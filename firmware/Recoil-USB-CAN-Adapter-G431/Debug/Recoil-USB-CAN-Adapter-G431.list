
Recoil-USB-CAN-Adapter-G431.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009e8c  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000094  0800a064  0800a064  0001a064  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a0f8  0800a0f8  00020184  2**0
                  CONTENTS
  4 .ARM          00000008  0800a0f8  0800a0f8  0001a0f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a100  0800a100  00020184  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a100  0800a100  0001a100  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a104  0800a104  0001a104  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000184  20000000  0800a108  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000d28  20000184  0800a28c  00020184  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000eac  0800a28c  00020eac  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020184  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a4d2  00000000  00000000  000201b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000039ea  00000000  00000000  0003a686  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001220  00000000  00000000  0003e070  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000010a8  00000000  00000000  0003f290  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000215ad  00000000  00000000  00040338  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018158  00000000  00000000  000618e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c0ca4  00000000  00000000  00079a3d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0013a6e1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000049f4  00000000  00000000  0013a734  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000184 	.word	0x20000184
 80001f4:	00000000 	.word	0x00000000
 80001f8:	0800a04c 	.word	0x0800a04c

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000188 	.word	0x20000188
 8000214:	0800a04c 	.word	0x0800a04c

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b974 	b.w	8000518 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9d08      	ldr	r5, [sp, #32]
 800024e:	4604      	mov	r4, r0
 8000250:	468e      	mov	lr, r1
 8000252:	2b00      	cmp	r3, #0
 8000254:	d14d      	bne.n	80002f2 <__udivmoddi4+0xaa>
 8000256:	428a      	cmp	r2, r1
 8000258:	4694      	mov	ip, r2
 800025a:	d969      	bls.n	8000330 <__udivmoddi4+0xe8>
 800025c:	fab2 f282 	clz	r2, r2
 8000260:	b152      	cbz	r2, 8000278 <__udivmoddi4+0x30>
 8000262:	fa01 f302 	lsl.w	r3, r1, r2
 8000266:	f1c2 0120 	rsb	r1, r2, #32
 800026a:	fa20 f101 	lsr.w	r1, r0, r1
 800026e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000272:	ea41 0e03 	orr.w	lr, r1, r3
 8000276:	4094      	lsls	r4, r2
 8000278:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800027c:	0c21      	lsrs	r1, r4, #16
 800027e:	fbbe f6f8 	udiv	r6, lr, r8
 8000282:	fa1f f78c 	uxth.w	r7, ip
 8000286:	fb08 e316 	mls	r3, r8, r6, lr
 800028a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800028e:	fb06 f107 	mul.w	r1, r6, r7
 8000292:	4299      	cmp	r1, r3
 8000294:	d90a      	bls.n	80002ac <__udivmoddi4+0x64>
 8000296:	eb1c 0303 	adds.w	r3, ip, r3
 800029a:	f106 30ff 	add.w	r0, r6, #4294967295
 800029e:	f080 811f 	bcs.w	80004e0 <__udivmoddi4+0x298>
 80002a2:	4299      	cmp	r1, r3
 80002a4:	f240 811c 	bls.w	80004e0 <__udivmoddi4+0x298>
 80002a8:	3e02      	subs	r6, #2
 80002aa:	4463      	add	r3, ip
 80002ac:	1a5b      	subs	r3, r3, r1
 80002ae:	b2a4      	uxth	r4, r4
 80002b0:	fbb3 f0f8 	udiv	r0, r3, r8
 80002b4:	fb08 3310 	mls	r3, r8, r0, r3
 80002b8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002bc:	fb00 f707 	mul.w	r7, r0, r7
 80002c0:	42a7      	cmp	r7, r4
 80002c2:	d90a      	bls.n	80002da <__udivmoddi4+0x92>
 80002c4:	eb1c 0404 	adds.w	r4, ip, r4
 80002c8:	f100 33ff 	add.w	r3, r0, #4294967295
 80002cc:	f080 810a 	bcs.w	80004e4 <__udivmoddi4+0x29c>
 80002d0:	42a7      	cmp	r7, r4
 80002d2:	f240 8107 	bls.w	80004e4 <__udivmoddi4+0x29c>
 80002d6:	4464      	add	r4, ip
 80002d8:	3802      	subs	r0, #2
 80002da:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002de:	1be4      	subs	r4, r4, r7
 80002e0:	2600      	movs	r6, #0
 80002e2:	b11d      	cbz	r5, 80002ec <__udivmoddi4+0xa4>
 80002e4:	40d4      	lsrs	r4, r2
 80002e6:	2300      	movs	r3, #0
 80002e8:	e9c5 4300 	strd	r4, r3, [r5]
 80002ec:	4631      	mov	r1, r6
 80002ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d909      	bls.n	800030a <__udivmoddi4+0xc2>
 80002f6:	2d00      	cmp	r5, #0
 80002f8:	f000 80ef 	beq.w	80004da <__udivmoddi4+0x292>
 80002fc:	2600      	movs	r6, #0
 80002fe:	e9c5 0100 	strd	r0, r1, [r5]
 8000302:	4630      	mov	r0, r6
 8000304:	4631      	mov	r1, r6
 8000306:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030a:	fab3 f683 	clz	r6, r3
 800030e:	2e00      	cmp	r6, #0
 8000310:	d14a      	bne.n	80003a8 <__udivmoddi4+0x160>
 8000312:	428b      	cmp	r3, r1
 8000314:	d302      	bcc.n	800031c <__udivmoddi4+0xd4>
 8000316:	4282      	cmp	r2, r0
 8000318:	f200 80f9 	bhi.w	800050e <__udivmoddi4+0x2c6>
 800031c:	1a84      	subs	r4, r0, r2
 800031e:	eb61 0303 	sbc.w	r3, r1, r3
 8000322:	2001      	movs	r0, #1
 8000324:	469e      	mov	lr, r3
 8000326:	2d00      	cmp	r5, #0
 8000328:	d0e0      	beq.n	80002ec <__udivmoddi4+0xa4>
 800032a:	e9c5 4e00 	strd	r4, lr, [r5]
 800032e:	e7dd      	b.n	80002ec <__udivmoddi4+0xa4>
 8000330:	b902      	cbnz	r2, 8000334 <__udivmoddi4+0xec>
 8000332:	deff      	udf	#255	; 0xff
 8000334:	fab2 f282 	clz	r2, r2
 8000338:	2a00      	cmp	r2, #0
 800033a:	f040 8092 	bne.w	8000462 <__udivmoddi4+0x21a>
 800033e:	eba1 010c 	sub.w	r1, r1, ip
 8000342:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000346:	fa1f fe8c 	uxth.w	lr, ip
 800034a:	2601      	movs	r6, #1
 800034c:	0c20      	lsrs	r0, r4, #16
 800034e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000352:	fb07 1113 	mls	r1, r7, r3, r1
 8000356:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800035a:	fb0e f003 	mul.w	r0, lr, r3
 800035e:	4288      	cmp	r0, r1
 8000360:	d908      	bls.n	8000374 <__udivmoddi4+0x12c>
 8000362:	eb1c 0101 	adds.w	r1, ip, r1
 8000366:	f103 38ff 	add.w	r8, r3, #4294967295
 800036a:	d202      	bcs.n	8000372 <__udivmoddi4+0x12a>
 800036c:	4288      	cmp	r0, r1
 800036e:	f200 80cb 	bhi.w	8000508 <__udivmoddi4+0x2c0>
 8000372:	4643      	mov	r3, r8
 8000374:	1a09      	subs	r1, r1, r0
 8000376:	b2a4      	uxth	r4, r4
 8000378:	fbb1 f0f7 	udiv	r0, r1, r7
 800037c:	fb07 1110 	mls	r1, r7, r0, r1
 8000380:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000384:	fb0e fe00 	mul.w	lr, lr, r0
 8000388:	45a6      	cmp	lr, r4
 800038a:	d908      	bls.n	800039e <__udivmoddi4+0x156>
 800038c:	eb1c 0404 	adds.w	r4, ip, r4
 8000390:	f100 31ff 	add.w	r1, r0, #4294967295
 8000394:	d202      	bcs.n	800039c <__udivmoddi4+0x154>
 8000396:	45a6      	cmp	lr, r4
 8000398:	f200 80bb 	bhi.w	8000512 <__udivmoddi4+0x2ca>
 800039c:	4608      	mov	r0, r1
 800039e:	eba4 040e 	sub.w	r4, r4, lr
 80003a2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003a6:	e79c      	b.n	80002e2 <__udivmoddi4+0x9a>
 80003a8:	f1c6 0720 	rsb	r7, r6, #32
 80003ac:	40b3      	lsls	r3, r6
 80003ae:	fa22 fc07 	lsr.w	ip, r2, r7
 80003b2:	ea4c 0c03 	orr.w	ip, ip, r3
 80003b6:	fa20 f407 	lsr.w	r4, r0, r7
 80003ba:	fa01 f306 	lsl.w	r3, r1, r6
 80003be:	431c      	orrs	r4, r3
 80003c0:	40f9      	lsrs	r1, r7
 80003c2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003c6:	fa00 f306 	lsl.w	r3, r0, r6
 80003ca:	fbb1 f8f9 	udiv	r8, r1, r9
 80003ce:	0c20      	lsrs	r0, r4, #16
 80003d0:	fa1f fe8c 	uxth.w	lr, ip
 80003d4:	fb09 1118 	mls	r1, r9, r8, r1
 80003d8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003dc:	fb08 f00e 	mul.w	r0, r8, lr
 80003e0:	4288      	cmp	r0, r1
 80003e2:	fa02 f206 	lsl.w	r2, r2, r6
 80003e6:	d90b      	bls.n	8000400 <__udivmoddi4+0x1b8>
 80003e8:	eb1c 0101 	adds.w	r1, ip, r1
 80003ec:	f108 3aff 	add.w	sl, r8, #4294967295
 80003f0:	f080 8088 	bcs.w	8000504 <__udivmoddi4+0x2bc>
 80003f4:	4288      	cmp	r0, r1
 80003f6:	f240 8085 	bls.w	8000504 <__udivmoddi4+0x2bc>
 80003fa:	f1a8 0802 	sub.w	r8, r8, #2
 80003fe:	4461      	add	r1, ip
 8000400:	1a09      	subs	r1, r1, r0
 8000402:	b2a4      	uxth	r4, r4
 8000404:	fbb1 f0f9 	udiv	r0, r1, r9
 8000408:	fb09 1110 	mls	r1, r9, r0, r1
 800040c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000410:	fb00 fe0e 	mul.w	lr, r0, lr
 8000414:	458e      	cmp	lr, r1
 8000416:	d908      	bls.n	800042a <__udivmoddi4+0x1e2>
 8000418:	eb1c 0101 	adds.w	r1, ip, r1
 800041c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000420:	d26c      	bcs.n	80004fc <__udivmoddi4+0x2b4>
 8000422:	458e      	cmp	lr, r1
 8000424:	d96a      	bls.n	80004fc <__udivmoddi4+0x2b4>
 8000426:	3802      	subs	r0, #2
 8000428:	4461      	add	r1, ip
 800042a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800042e:	fba0 9402 	umull	r9, r4, r0, r2
 8000432:	eba1 010e 	sub.w	r1, r1, lr
 8000436:	42a1      	cmp	r1, r4
 8000438:	46c8      	mov	r8, r9
 800043a:	46a6      	mov	lr, r4
 800043c:	d356      	bcc.n	80004ec <__udivmoddi4+0x2a4>
 800043e:	d053      	beq.n	80004e8 <__udivmoddi4+0x2a0>
 8000440:	b15d      	cbz	r5, 800045a <__udivmoddi4+0x212>
 8000442:	ebb3 0208 	subs.w	r2, r3, r8
 8000446:	eb61 010e 	sbc.w	r1, r1, lr
 800044a:	fa01 f707 	lsl.w	r7, r1, r7
 800044e:	fa22 f306 	lsr.w	r3, r2, r6
 8000452:	40f1      	lsrs	r1, r6
 8000454:	431f      	orrs	r7, r3
 8000456:	e9c5 7100 	strd	r7, r1, [r5]
 800045a:	2600      	movs	r6, #0
 800045c:	4631      	mov	r1, r6
 800045e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000462:	f1c2 0320 	rsb	r3, r2, #32
 8000466:	40d8      	lsrs	r0, r3
 8000468:	fa0c fc02 	lsl.w	ip, ip, r2
 800046c:	fa21 f303 	lsr.w	r3, r1, r3
 8000470:	4091      	lsls	r1, r2
 8000472:	4301      	orrs	r1, r0
 8000474:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000478:	fa1f fe8c 	uxth.w	lr, ip
 800047c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000480:	fb07 3610 	mls	r6, r7, r0, r3
 8000484:	0c0b      	lsrs	r3, r1, #16
 8000486:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800048a:	fb00 f60e 	mul.w	r6, r0, lr
 800048e:	429e      	cmp	r6, r3
 8000490:	fa04 f402 	lsl.w	r4, r4, r2
 8000494:	d908      	bls.n	80004a8 <__udivmoddi4+0x260>
 8000496:	eb1c 0303 	adds.w	r3, ip, r3
 800049a:	f100 38ff 	add.w	r8, r0, #4294967295
 800049e:	d22f      	bcs.n	8000500 <__udivmoddi4+0x2b8>
 80004a0:	429e      	cmp	r6, r3
 80004a2:	d92d      	bls.n	8000500 <__udivmoddi4+0x2b8>
 80004a4:	3802      	subs	r0, #2
 80004a6:	4463      	add	r3, ip
 80004a8:	1b9b      	subs	r3, r3, r6
 80004aa:	b289      	uxth	r1, r1
 80004ac:	fbb3 f6f7 	udiv	r6, r3, r7
 80004b0:	fb07 3316 	mls	r3, r7, r6, r3
 80004b4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004b8:	fb06 f30e 	mul.w	r3, r6, lr
 80004bc:	428b      	cmp	r3, r1
 80004be:	d908      	bls.n	80004d2 <__udivmoddi4+0x28a>
 80004c0:	eb1c 0101 	adds.w	r1, ip, r1
 80004c4:	f106 38ff 	add.w	r8, r6, #4294967295
 80004c8:	d216      	bcs.n	80004f8 <__udivmoddi4+0x2b0>
 80004ca:	428b      	cmp	r3, r1
 80004cc:	d914      	bls.n	80004f8 <__udivmoddi4+0x2b0>
 80004ce:	3e02      	subs	r6, #2
 80004d0:	4461      	add	r1, ip
 80004d2:	1ac9      	subs	r1, r1, r3
 80004d4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004d8:	e738      	b.n	800034c <__udivmoddi4+0x104>
 80004da:	462e      	mov	r6, r5
 80004dc:	4628      	mov	r0, r5
 80004de:	e705      	b.n	80002ec <__udivmoddi4+0xa4>
 80004e0:	4606      	mov	r6, r0
 80004e2:	e6e3      	b.n	80002ac <__udivmoddi4+0x64>
 80004e4:	4618      	mov	r0, r3
 80004e6:	e6f8      	b.n	80002da <__udivmoddi4+0x92>
 80004e8:	454b      	cmp	r3, r9
 80004ea:	d2a9      	bcs.n	8000440 <__udivmoddi4+0x1f8>
 80004ec:	ebb9 0802 	subs.w	r8, r9, r2
 80004f0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004f4:	3801      	subs	r0, #1
 80004f6:	e7a3      	b.n	8000440 <__udivmoddi4+0x1f8>
 80004f8:	4646      	mov	r6, r8
 80004fa:	e7ea      	b.n	80004d2 <__udivmoddi4+0x28a>
 80004fc:	4620      	mov	r0, r4
 80004fe:	e794      	b.n	800042a <__udivmoddi4+0x1e2>
 8000500:	4640      	mov	r0, r8
 8000502:	e7d1      	b.n	80004a8 <__udivmoddi4+0x260>
 8000504:	46d0      	mov	r8, sl
 8000506:	e77b      	b.n	8000400 <__udivmoddi4+0x1b8>
 8000508:	3b02      	subs	r3, #2
 800050a:	4461      	add	r1, ip
 800050c:	e732      	b.n	8000374 <__udivmoddi4+0x12c>
 800050e:	4630      	mov	r0, r6
 8000510:	e709      	b.n	8000326 <__udivmoddi4+0xde>
 8000512:	4464      	add	r4, ip
 8000514:	3802      	subs	r0, #2
 8000516:	e742      	b.n	800039e <__udivmoddi4+0x156>

08000518 <__aeabi_idiv0>:
 8000518:	4770      	bx	lr
 800051a:	bf00      	nop

0800051c <HAL_FDCAN_RxFifo0Callback>:
CAN_Frame can_tx_frame;

uint8_t usb_evt_happened;
uint8_t can_evt_happened;

void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs) {
 800051c:	b580      	push	{r7, lr}
 800051e:	b082      	sub	sp, #8
 8000520:	af00      	add	r7, sp, #0
 8000522:	6078      	str	r0, [r7, #4]
 8000524:	6039      	str	r1, [r7, #0]
  APP_handleCANMessage();
 8000526:	f000 f85d 	bl	80005e4 <APP_handleCANMessage>
}
 800052a:	bf00      	nop
 800052c:	3708      	adds	r7, #8
 800052e:	46bd      	mov	sp, r7
 8000530:	bd80      	pop	{r7, pc}
	...

08000534 <APP_handleUSBMessage>:
    HAL_UART_Transmit(&huart2, (uint8_t *)str, strlen(str), 100);
    HAL_Delay(100);
  }
}

void APP_handleUSBMessage() {
 8000534:	b580      	push	{r7, lr}
 8000536:	b082      	sub	sp, #8
 8000538:	af00      	add	r7, sp, #0
  // check if the first byte is the correct Start of Frame
  uint8_t is_valid_frame = usb_rx_buffer[0] == 0xAAU;
 800053a:	4b26      	ldr	r3, [pc, #152]	; (80005d4 <APP_handleUSBMessage+0xa0>)
 800053c:	781b      	ldrb	r3, [r3, #0]
 800053e:	2baa      	cmp	r3, #170	; 0xaa
 8000540:	bf0c      	ite	eq
 8000542:	2301      	moveq	r3, #1
 8000544:	2300      	movne	r3, #0
 8000546:	b2db      	uxtb	r3, r3
 8000548:	717b      	strb	r3, [r7, #5]
  if (!is_valid_frame) {
 800054a:	797b      	ldrb	r3, [r7, #5]
 800054c:	2b00      	cmp	r3, #0
 800054e:	d106      	bne.n	800055e <APP_handleUSBMessage+0x2a>
    // if not, discard and continue receiving
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_SET);
 8000550:	2201      	movs	r2, #1
 8000552:	2180      	movs	r1, #128	; 0x80
 8000554:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000558:	f001 fe14 	bl	8002184 <HAL_GPIO_WritePin>
    return;
 800055c:	e037      	b.n	80005ce <APP_handleUSBMessage+0x9a>
  }

  // decode the header section
  can_tx_frame.id_type = CAN_ID_STANDARD;
 800055e:	4b1e      	ldr	r3, [pc, #120]	; (80005d8 <APP_handleUSBMessage+0xa4>)
 8000560:	2200      	movs	r2, #0
 8000562:	711a      	strb	r2, [r3, #4]
  can_tx_frame.frame_type = CAN_FRAME_DATA;
 8000564:	4b1c      	ldr	r3, [pc, #112]	; (80005d8 <APP_handleUSBMessage+0xa4>)
 8000566:	2201      	movs	r2, #1
 8000568:	715a      	strb	r2, [r3, #5]
//  uint32_t timestamp = ((uart_rx_buffer[1])     // timestamp is not used
//      | (uart_rx_buffer[2] << 8U)
//      | (uart_rx_buffer[3] << 16U)
//      | (uart_rx_buffer[4] << 24U));
  can_tx_frame.size = usb_rx_buffer[5];
 800056a:	4b1a      	ldr	r3, [pc, #104]	; (80005d4 <APP_handleUSBMessage+0xa0>)
 800056c:	795b      	ldrb	r3, [r3, #5]
 800056e:	b29a      	uxth	r2, r3
 8000570:	4b19      	ldr	r3, [pc, #100]	; (80005d8 <APP_handleUSBMessage+0xa4>)
 8000572:	80da      	strh	r2, [r3, #6]
  can_tx_frame.id = (((uint32_t)usb_rx_buffer[6] << 0U)
 8000574:	4b17      	ldr	r3, [pc, #92]	; (80005d4 <APP_handleUSBMessage+0xa0>)
 8000576:	799b      	ldrb	r3, [r3, #6]
 8000578:	461a      	mov	r2, r3
                   | ((uint32_t)usb_rx_buffer[7] << 8U)
 800057a:	4b16      	ldr	r3, [pc, #88]	; (80005d4 <APP_handleUSBMessage+0xa0>)
 800057c:	79db      	ldrb	r3, [r3, #7]
 800057e:	021b      	lsls	r3, r3, #8
 8000580:	431a      	orrs	r2, r3
                   | ((uint32_t)usb_rx_buffer[8] << 16U)
 8000582:	4b14      	ldr	r3, [pc, #80]	; (80005d4 <APP_handleUSBMessage+0xa0>)
 8000584:	7a1b      	ldrb	r3, [r3, #8]
 8000586:	041b      	lsls	r3, r3, #16
 8000588:	431a      	orrs	r2, r3
                   | ((uint32_t)usb_rx_buffer[9] << 24U));
 800058a:	4b12      	ldr	r3, [pc, #72]	; (80005d4 <APP_handleUSBMessage+0xa0>)
 800058c:	7a5b      	ldrb	r3, [r3, #9]
 800058e:	061b      	lsls	r3, r3, #24
 8000590:	4313      	orrs	r3, r2
  can_tx_frame.id = (((uint32_t)usb_rx_buffer[6] << 0U)
 8000592:	4a11      	ldr	r2, [pc, #68]	; (80005d8 <APP_handleUSBMessage+0xa4>)
 8000594:	6013      	str	r3, [r2, #0]


  for (uint16_t i=0; i<can_tx_frame.size; i+=1) {
 8000596:	2300      	movs	r3, #0
 8000598:	80fb      	strh	r3, [r7, #6]
 800059a:	e00c      	b.n	80005b6 <APP_handleUSBMessage+0x82>
    can_tx_frame.data[i] = usb_rx_buffer[10+i];
 800059c:	88fb      	ldrh	r3, [r7, #6]
 800059e:	f103 020a 	add.w	r2, r3, #10
 80005a2:	88fb      	ldrh	r3, [r7, #6]
 80005a4:	490b      	ldr	r1, [pc, #44]	; (80005d4 <APP_handleUSBMessage+0xa0>)
 80005a6:	5c89      	ldrb	r1, [r1, r2]
 80005a8:	4a0b      	ldr	r2, [pc, #44]	; (80005d8 <APP_handleUSBMessage+0xa4>)
 80005aa:	4413      	add	r3, r2
 80005ac:	460a      	mov	r2, r1
 80005ae:	721a      	strb	r2, [r3, #8]
  for (uint16_t i=0; i<can_tx_frame.size; i+=1) {
 80005b0:	88fb      	ldrh	r3, [r7, #6]
 80005b2:	3301      	adds	r3, #1
 80005b4:	80fb      	strh	r3, [r7, #6]
 80005b6:	4b08      	ldr	r3, [pc, #32]	; (80005d8 <APP_handleUSBMessage+0xa4>)
 80005b8:	88db      	ldrh	r3, [r3, #6]
 80005ba:	88fa      	ldrh	r2, [r7, #6]
 80005bc:	429a      	cmp	r2, r3
 80005be:	d3ed      	bcc.n	800059c <APP_handleUSBMessage+0x68>
  // does not really need this piece of code
//  if (!HAL_FDCAN_GetTxFifoFreeLevel(&hfdcan1)) {
//    uint32_t fifo_idx = HAL_FDCAN_GetLatestTxFifoQRequestBuffer(&hfdcan1);
//    HAL_FDCAN_AbortTxRequest(&hfdcan1, fifo_idx);
//  }
  CAN_putTxFrame(&hfdcan1, &can_tx_frame);
 80005c0:	4905      	ldr	r1, [pc, #20]	; (80005d8 <APP_handleUSBMessage+0xa4>)
 80005c2:	4806      	ldr	r0, [pc, #24]	; (80005dc <APP_handleUSBMessage+0xa8>)
 80005c4:	f000 f95a 	bl	800087c <CAN_putTxFrame>
  usb_evt_happened = 1;
 80005c8:	4b05      	ldr	r3, [pc, #20]	; (80005e0 <APP_handleUSBMessage+0xac>)
 80005ca:	2201      	movs	r2, #1
 80005cc:	701a      	strb	r2, [r3, #0]
}
 80005ce:	3708      	adds	r7, #8
 80005d0:	46bd      	mov	sp, r7
 80005d2:	bd80      	pop	{r7, pc}
 80005d4:	200001a4 	.word	0x200001a4
 80005d8:	200002b8 	.word	0x200002b8
 80005dc:	200002cc 	.word	0x200002cc
 80005e0:	200002c8 	.word	0x200002c8

080005e4 <APP_handleCANMessage>:

void APP_handleCANMessage() {
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b082      	sub	sp, #8
 80005e8:	af00      	add	r7, sp, #0
  CAN_getRxFrame(&hfdcan1, &can_rx_frame);
 80005ea:	4931      	ldr	r1, [pc, #196]	; (80006b0 <APP_handleCANMessage+0xcc>)
 80005ec:	4831      	ldr	r0, [pc, #196]	; (80006b4 <APP_handleCANMessage+0xd0>)
 80005ee:	f000 f8c7 	bl	8000780 <CAN_getRxFrame>

  // prepare the USB frame
  usb_tx_buffer[0] = PYTHONCAN_START_OF_FRAME;
 80005f2:	4b31      	ldr	r3, [pc, #196]	; (80006b8 <APP_handleCANMessage+0xd4>)
 80005f4:	22aa      	movs	r2, #170	; 0xaa
 80005f6:	701a      	strb	r2, [r3, #0]

  usb_tx_buffer[1] = 0x00U;  // Timestamp
 80005f8:	4b2f      	ldr	r3, [pc, #188]	; (80006b8 <APP_handleCANMessage+0xd4>)
 80005fa:	2200      	movs	r2, #0
 80005fc:	705a      	strb	r2, [r3, #1]
  usb_tx_buffer[2] = 0x00U;
 80005fe:	4b2e      	ldr	r3, [pc, #184]	; (80006b8 <APP_handleCANMessage+0xd4>)
 8000600:	2200      	movs	r2, #0
 8000602:	709a      	strb	r2, [r3, #2]
  usb_tx_buffer[3] = 0x00U;
 8000604:	4b2c      	ldr	r3, [pc, #176]	; (80006b8 <APP_handleCANMessage+0xd4>)
 8000606:	2200      	movs	r2, #0
 8000608:	70da      	strb	r2, [r3, #3]
  usb_tx_buffer[4] = 0x00U;
 800060a:	4b2b      	ldr	r3, [pc, #172]	; (80006b8 <APP_handleCANMessage+0xd4>)
 800060c:	2200      	movs	r2, #0
 800060e:	711a      	strb	r2, [r3, #4]

  usb_tx_buffer[5] = can_rx_frame.size;  // DLC
 8000610:	4b27      	ldr	r3, [pc, #156]	; (80006b0 <APP_handleCANMessage+0xcc>)
 8000612:	88db      	ldrh	r3, [r3, #6]
 8000614:	b2da      	uxtb	r2, r3
 8000616:	4b28      	ldr	r3, [pc, #160]	; (80006b8 <APP_handleCANMessage+0xd4>)
 8000618:	715a      	strb	r2, [r3, #5]

  usb_tx_buffer[6] = READ_BITS(can_rx_frame.id, 0xFFU);  // ID
 800061a:	4b25      	ldr	r3, [pc, #148]	; (80006b0 <APP_handleCANMessage+0xcc>)
 800061c:	681b      	ldr	r3, [r3, #0]
 800061e:	b2da      	uxtb	r2, r3
 8000620:	4b25      	ldr	r3, [pc, #148]	; (80006b8 <APP_handleCANMessage+0xd4>)
 8000622:	719a      	strb	r2, [r3, #6]
  usb_tx_buffer[7] = READ_BITS(can_rx_frame.id >> 8U, 0xFFU);
 8000624:	4b22      	ldr	r3, [pc, #136]	; (80006b0 <APP_handleCANMessage+0xcc>)
 8000626:	681b      	ldr	r3, [r3, #0]
 8000628:	0a1b      	lsrs	r3, r3, #8
 800062a:	b2da      	uxtb	r2, r3
 800062c:	4b22      	ldr	r3, [pc, #136]	; (80006b8 <APP_handleCANMessage+0xd4>)
 800062e:	71da      	strb	r2, [r3, #7]
  usb_tx_buffer[8] = READ_BITS(can_rx_frame.id >> 16U, 0xFFU);
 8000630:	4b1f      	ldr	r3, [pc, #124]	; (80006b0 <APP_handleCANMessage+0xcc>)
 8000632:	681b      	ldr	r3, [r3, #0]
 8000634:	0c1b      	lsrs	r3, r3, #16
 8000636:	b2da      	uxtb	r2, r3
 8000638:	4b1f      	ldr	r3, [pc, #124]	; (80006b8 <APP_handleCANMessage+0xd4>)
 800063a:	721a      	strb	r2, [r3, #8]
  usb_tx_buffer[9] = READ_BITS(can_rx_frame.id >> 24U, 0xFFU);
 800063c:	4b1c      	ldr	r3, [pc, #112]	; (80006b0 <APP_handleCANMessage+0xcc>)
 800063e:	681b      	ldr	r3, [r3, #0]
 8000640:	0e1b      	lsrs	r3, r3, #24
 8000642:	b2da      	uxtb	r2, r3
 8000644:	4b1c      	ldr	r3, [pc, #112]	; (80006b8 <APP_handleCANMessage+0xd4>)
 8000646:	725a      	strb	r2, [r3, #9]

  usb_tx_size = 10;
 8000648:	4b1c      	ldr	r3, [pc, #112]	; (80006bc <APP_handleCANMessage+0xd8>)
 800064a:	220a      	movs	r2, #10
 800064c:	801a      	strh	r2, [r3, #0]

  for (uint16_t i=0; i<can_rx_frame.size; i+=1) {
 800064e:	2300      	movs	r3, #0
 8000650:	80fb      	strh	r3, [r7, #6]
 8000652:	e00a      	b.n	800066a <APP_handleCANMessage+0x86>
    usb_tx_buffer[10+i] = can_rx_frame.data[i];
 8000654:	88fa      	ldrh	r2, [r7, #6]
 8000656:	88fb      	ldrh	r3, [r7, #6]
 8000658:	330a      	adds	r3, #10
 800065a:	4915      	ldr	r1, [pc, #84]	; (80006b0 <APP_handleCANMessage+0xcc>)
 800065c:	440a      	add	r2, r1
 800065e:	7a11      	ldrb	r1, [r2, #8]
 8000660:	4a15      	ldr	r2, [pc, #84]	; (80006b8 <APP_handleCANMessage+0xd4>)
 8000662:	54d1      	strb	r1, [r2, r3]
  for (uint16_t i=0; i<can_rx_frame.size; i+=1) {
 8000664:	88fb      	ldrh	r3, [r7, #6]
 8000666:	3301      	adds	r3, #1
 8000668:	80fb      	strh	r3, [r7, #6]
 800066a:	4b11      	ldr	r3, [pc, #68]	; (80006b0 <APP_handleCANMessage+0xcc>)
 800066c:	88db      	ldrh	r3, [r3, #6]
 800066e:	88fa      	ldrh	r2, [r7, #6]
 8000670:	429a      	cmp	r2, r3
 8000672:	d3ef      	bcc.n	8000654 <APP_handleCANMessage+0x70>
  }
  usb_tx_size += can_rx_frame.size + 1;
 8000674:	4b0e      	ldr	r3, [pc, #56]	; (80006b0 <APP_handleCANMessage+0xcc>)
 8000676:	88da      	ldrh	r2, [r3, #6]
 8000678:	4b10      	ldr	r3, [pc, #64]	; (80006bc <APP_handleCANMessage+0xd8>)
 800067a:	881b      	ldrh	r3, [r3, #0]
 800067c:	4413      	add	r3, r2
 800067e:	b29b      	uxth	r3, r3
 8000680:	3301      	adds	r3, #1
 8000682:	b29a      	uxth	r2, r3
 8000684:	4b0d      	ldr	r3, [pc, #52]	; (80006bc <APP_handleCANMessage+0xd8>)
 8000686:	801a      	strh	r2, [r3, #0]

  usb_tx_buffer[10+can_rx_frame.size] = PYTHONCAN_END_OF_FRAME;
 8000688:	4b09      	ldr	r3, [pc, #36]	; (80006b0 <APP_handleCANMessage+0xcc>)
 800068a:	88db      	ldrh	r3, [r3, #6]
 800068c:	330a      	adds	r3, #10
 800068e:	4a0a      	ldr	r2, [pc, #40]	; (80006b8 <APP_handleCANMessage+0xd4>)
 8000690:	21bb      	movs	r1, #187	; 0xbb
 8000692:	54d1      	strb	r1, [r2, r3]

  CDC_Transmit_FS(usb_tx_buffer, usb_tx_size);
 8000694:	4b09      	ldr	r3, [pc, #36]	; (80006bc <APP_handleCANMessage+0xd8>)
 8000696:	881b      	ldrh	r3, [r3, #0]
 8000698:	4619      	mov	r1, r3
 800069a:	4807      	ldr	r0, [pc, #28]	; (80006b8 <APP_handleCANMessage+0xd4>)
 800069c:	f009 f84e 	bl	800973c <CDC_Transmit_FS>
  can_evt_happened = 1;
 80006a0:	4b07      	ldr	r3, [pc, #28]	; (80006c0 <APP_handleCANMessage+0xdc>)
 80006a2:	2201      	movs	r2, #1
 80006a4:	701a      	strb	r2, [r3, #0]
}
 80006a6:	bf00      	nop
 80006a8:	3708      	adds	r7, #8
 80006aa:	46bd      	mov	sp, r7
 80006ac:	bd80      	pop	{r7, pc}
 80006ae:	bf00      	nop
 80006b0:	200002a8 	.word	0x200002a8
 80006b4:	200002cc 	.word	0x200002cc
 80006b8:	20000228 	.word	0x20000228
 80006bc:	20000224 	.word	0x20000224
 80006c0:	200002c9 	.word	0x200002c9

080006c4 <APP_init>:

void APP_init() {
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b086      	sub	sp, #24
 80006c8:	af00      	add	r7, sp, #0
  #if FIRST_TIME_BOOTUP
  APP_initFlashOption();
  #endif

  usb_evt_happened = 0;
 80006ca:	4b11      	ldr	r3, [pc, #68]	; (8000710 <APP_init+0x4c>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	701a      	strb	r2, [r3, #0]
  can_evt_happened = 0;
 80006d0:	4b10      	ldr	r3, [pc, #64]	; (8000714 <APP_init+0x50>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	701a      	strb	r2, [r3, #0]

  FDCAN_FilterTypeDef filter_config;
  filter_config.IdType = FDCAN_STANDARD_ID;
 80006d6:	2300      	movs	r3, #0
 80006d8:	603b      	str	r3, [r7, #0]
  filter_config.FilterIndex = 0;
 80006da:	2300      	movs	r3, #0
 80006dc:	607b      	str	r3, [r7, #4]
  filter_config.FilterType = FDCAN_FILTER_MASK;
 80006de:	2302      	movs	r3, #2
 80006e0:	60bb      	str	r3, [r7, #8]
  filter_config.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 80006e2:	2301      	movs	r3, #1
 80006e4:	60fb      	str	r3, [r7, #12]
  filter_config.FilterID1 = 0;
 80006e6:	2300      	movs	r3, #0
 80006e8:	613b      	str	r3, [r7, #16]
  filter_config.FilterID2 = 0;
 80006ea:	2300      	movs	r3, #0
 80006ec:	617b      	str	r3, [r7, #20]

  HAL_FDCAN_ConfigFilter(&hfdcan1, &filter_config);
 80006ee:	463b      	mov	r3, r7
 80006f0:	4619      	mov	r1, r3
 80006f2:	4809      	ldr	r0, [pc, #36]	; (8000718 <APP_init+0x54>)
 80006f4:	f000 feca 	bl	800148c <HAL_FDCAN_ConfigFilter>
  HAL_FDCAN_Start(&hfdcan1);
 80006f8:	4807      	ldr	r0, [pc, #28]	; (8000718 <APP_init+0x54>)
 80006fa:	f000 ff21 	bl	8001540 <HAL_FDCAN_Start>
  HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0);
 80006fe:	2200      	movs	r2, #0
 8000700:	2101      	movs	r1, #1
 8000702:	4805      	ldr	r0, [pc, #20]	; (8000718 <APP_init+0x54>)
 8000704:	f001 f862 	bl	80017cc <HAL_FDCAN_ActivateNotification>
}
 8000708:	bf00      	nop
 800070a:	3718      	adds	r7, #24
 800070c:	46bd      	mov	sp, r7
 800070e:	bd80      	pop	{r7, pc}
 8000710:	200002c8 	.word	0x200002c8
 8000714:	200002c9 	.word	0x200002c9
 8000718:	200002cc 	.word	0x200002cc

0800071c <APP_main>:

void APP_main() {
 800071c:	b580      	push	{r7, lr}
 800071e:	af00      	add	r7, sp, #0
  // status light logic is handled in the main loop, because we need some
  // delay to make LED lights brighter
  if (usb_evt_happened) {
 8000720:	4b15      	ldr	r3, [pc, #84]	; (8000778 <APP_main+0x5c>)
 8000722:	781b      	ldrb	r3, [r3, #0]
 8000724:	2b00      	cmp	r3, #0
 8000726:	d008      	beq.n	800073a <APP_main+0x1e>
    usb_evt_happened = 0;
 8000728:	4b13      	ldr	r3, [pc, #76]	; (8000778 <APP_main+0x5c>)
 800072a:	2200      	movs	r2, #0
 800072c:	701a      	strb	r2, [r3, #0]
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET);
 800072e:	2200      	movs	r2, #0
 8000730:	2180      	movs	r1, #128	; 0x80
 8000732:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000736:	f001 fd25 	bl	8002184 <HAL_GPIO_WritePin>
  }
  if (can_evt_happened) {
 800073a:	4b10      	ldr	r3, [pc, #64]	; (800077c <APP_main+0x60>)
 800073c:	781b      	ldrb	r3, [r3, #0]
 800073e:	2b00      	cmp	r3, #0
 8000740:	d008      	beq.n	8000754 <APP_main+0x38>
    can_evt_happened = 0;
 8000742:	4b0e      	ldr	r3, [pc, #56]	; (800077c <APP_main+0x60>)
 8000744:	2200      	movs	r2, #0
 8000746:	701a      	strb	r2, [r3, #0]
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 8000748:	2200      	movs	r2, #0
 800074a:	2140      	movs	r1, #64	; 0x40
 800074c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000750:	f001 fd18 	bl	8002184 <HAL_GPIO_WritePin>
  }

  // this value controls the "brightness" and granularity of the LED for each activity
  HAL_Delay(1);
 8000754:	2001      	movs	r0, #1
 8000756:	f000 fc0d 	bl	8000f74 <HAL_Delay>

  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_SET);
 800075a:	2201      	movs	r2, #1
 800075c:	2180      	movs	r1, #128	; 0x80
 800075e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000762:	f001 fd0f 	bl	8002184 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_SET);
 8000766:	2201      	movs	r2, #1
 8000768:	2140      	movs	r1, #64	; 0x40
 800076a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800076e:	f001 fd09 	bl	8002184 <HAL_GPIO_WritePin>
}
 8000772:	bf00      	nop
 8000774:	bd80      	pop	{r7, pc}
 8000776:	bf00      	nop
 8000778:	200002c8 	.word	0x200002c8
 800077c:	200002c9 	.word	0x200002c9

08000780 <CAN_getRxFrame>:
  status |= HAL_FDCAN_ActivateNotification(hfdcan, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0);

  return status;
}

void CAN_getRxFrame(FDCAN_HandleTypeDef *hfdcan, CAN_Frame *rx_frame) {
 8000780:	b580      	push	{r7, lr}
 8000782:	b08c      	sub	sp, #48	; 0x30
 8000784:	af00      	add	r7, sp, #0
 8000786:	6078      	str	r0, [r7, #4]
 8000788:	6039      	str	r1, [r7, #0]
  FDCAN_RxHeaderTypeDef rx_header;
  HAL_FDCAN_GetRxMessage(hfdcan, FDCAN_RX_FIFO0, &rx_header, rx_frame->data);
 800078a:	683b      	ldr	r3, [r7, #0]
 800078c:	3308      	adds	r3, #8
 800078e:	f107 0208 	add.w	r2, r7, #8
 8000792:	2140      	movs	r1, #64	; 0x40
 8000794:	6878      	ldr	r0, [r7, #4]
 8000796:	f000 ff3f 	bl	8001618 <HAL_FDCAN_GetRxMessage>

  rx_frame->id = rx_header.Identifier;
 800079a:	68ba      	ldr	r2, [r7, #8]
 800079c:	683b      	ldr	r3, [r7, #0]
 800079e:	601a      	str	r2, [r3, #0]
  rx_frame->id_type = (rx_header.IdType == FDCAN_STANDARD_ID) ? CAN_ID_STANDARD : CAN_ID_EXTENDED;
 80007a0:	68fb      	ldr	r3, [r7, #12]
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	bf14      	ite	ne
 80007a6:	2301      	movne	r3, #1
 80007a8:	2300      	moveq	r3, #0
 80007aa:	b2db      	uxtb	r3, r3
 80007ac:	461a      	mov	r2, r3
 80007ae:	683b      	ldr	r3, [r7, #0]
 80007b0:	711a      	strb	r2, [r3, #4]
  rx_frame->frame_type = (rx_header.RxFrameType == FDCAN_DATA_FRAME) ? CAN_FRAME_DATA : CAN_FRAME_REMOTE;
 80007b2:	693b      	ldr	r3, [r7, #16]
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d101      	bne.n	80007bc <CAN_getRxFrame+0x3c>
 80007b8:	2201      	movs	r2, #1
 80007ba:	e000      	b.n	80007be <CAN_getRxFrame+0x3e>
 80007bc:	2200      	movs	r2, #0
 80007be:	683b      	ldr	r3, [r7, #0]
 80007c0:	715a      	strb	r2, [r3, #5]
  switch (rx_header.DataLength) {
 80007c2:	697b      	ldr	r3, [r7, #20]
 80007c4:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80007c8:	d04c      	beq.n	8000864 <CAN_getRxFrame+0xe4>
 80007ca:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80007ce:	d84d      	bhi.n	800086c <CAN_getRxFrame+0xec>
 80007d0:	f5b3 2fe0 	cmp.w	r3, #458752	; 0x70000
 80007d4:	d042      	beq.n	800085c <CAN_getRxFrame+0xdc>
 80007d6:	f5b3 2fe0 	cmp.w	r3, #458752	; 0x70000
 80007da:	d847      	bhi.n	800086c <CAN_getRxFrame+0xec>
 80007dc:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 80007e0:	d038      	beq.n	8000854 <CAN_getRxFrame+0xd4>
 80007e2:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 80007e6:	d841      	bhi.n	800086c <CAN_getRxFrame+0xec>
 80007e8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80007ec:	d02e      	beq.n	800084c <CAN_getRxFrame+0xcc>
 80007ee:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80007f2:	d83b      	bhi.n	800086c <CAN_getRxFrame+0xec>
 80007f4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80007f8:	d024      	beq.n	8000844 <CAN_getRxFrame+0xc4>
 80007fa:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80007fe:	d835      	bhi.n	800086c <CAN_getRxFrame+0xec>
 8000800:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8000804:	d01a      	beq.n	800083c <CAN_getRxFrame+0xbc>
 8000806:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800080a:	d82f      	bhi.n	800086c <CAN_getRxFrame+0xec>
 800080c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8000810:	d010      	beq.n	8000834 <CAN_getRxFrame+0xb4>
 8000812:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8000816:	d829      	bhi.n	800086c <CAN_getRxFrame+0xec>
 8000818:	2b00      	cmp	r3, #0
 800081a:	d003      	beq.n	8000824 <CAN_getRxFrame+0xa4>
 800081c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000820:	d004      	beq.n	800082c <CAN_getRxFrame+0xac>
 8000822:	e023      	b.n	800086c <CAN_getRxFrame+0xec>
    case FDCAN_DLC_BYTES_0:
      rx_frame->size = 0; break;
 8000824:	683b      	ldr	r3, [r7, #0]
 8000826:	2200      	movs	r2, #0
 8000828:	80da      	strh	r2, [r3, #6]
 800082a:	e023      	b.n	8000874 <CAN_getRxFrame+0xf4>
    case FDCAN_DLC_BYTES_1:
      rx_frame->size = 1; break;
 800082c:	683b      	ldr	r3, [r7, #0]
 800082e:	2201      	movs	r2, #1
 8000830:	80da      	strh	r2, [r3, #6]
 8000832:	e01f      	b.n	8000874 <CAN_getRxFrame+0xf4>
    case FDCAN_DLC_BYTES_2:
      rx_frame->size = 2; break;
 8000834:	683b      	ldr	r3, [r7, #0]
 8000836:	2202      	movs	r2, #2
 8000838:	80da      	strh	r2, [r3, #6]
 800083a:	e01b      	b.n	8000874 <CAN_getRxFrame+0xf4>
    case FDCAN_DLC_BYTES_3:
      rx_frame->size = 3; break;
 800083c:	683b      	ldr	r3, [r7, #0]
 800083e:	2203      	movs	r2, #3
 8000840:	80da      	strh	r2, [r3, #6]
 8000842:	e017      	b.n	8000874 <CAN_getRxFrame+0xf4>
    case FDCAN_DLC_BYTES_4:
      rx_frame->size = 4; break;
 8000844:	683b      	ldr	r3, [r7, #0]
 8000846:	2204      	movs	r2, #4
 8000848:	80da      	strh	r2, [r3, #6]
 800084a:	e013      	b.n	8000874 <CAN_getRxFrame+0xf4>
    case FDCAN_DLC_BYTES_5:
      rx_frame->size = 5; break;
 800084c:	683b      	ldr	r3, [r7, #0]
 800084e:	2205      	movs	r2, #5
 8000850:	80da      	strh	r2, [r3, #6]
 8000852:	e00f      	b.n	8000874 <CAN_getRxFrame+0xf4>
    case FDCAN_DLC_BYTES_6:
      rx_frame->size = 6; break;
 8000854:	683b      	ldr	r3, [r7, #0]
 8000856:	2206      	movs	r2, #6
 8000858:	80da      	strh	r2, [r3, #6]
 800085a:	e00b      	b.n	8000874 <CAN_getRxFrame+0xf4>
    case FDCAN_DLC_BYTES_7:
      rx_frame->size = 7; break;
 800085c:	683b      	ldr	r3, [r7, #0]
 800085e:	2207      	movs	r2, #7
 8000860:	80da      	strh	r2, [r3, #6]
 8000862:	e007      	b.n	8000874 <CAN_getRxFrame+0xf4>
    case FDCAN_DLC_BYTES_8:
      rx_frame->size = 8; break;
 8000864:	683b      	ldr	r3, [r7, #0]
 8000866:	2208      	movs	r2, #8
 8000868:	80da      	strh	r2, [r3, #6]
 800086a:	e003      	b.n	8000874 <CAN_getRxFrame+0xf4>
    default:
      rx_frame->size = 0;
 800086c:	683b      	ldr	r3, [r7, #0]
 800086e:	2200      	movs	r2, #0
 8000870:	80da      	strh	r2, [r3, #6]
  }
}
 8000872:	bf00      	nop
 8000874:	bf00      	nop
 8000876:	3730      	adds	r7, #48	; 0x30
 8000878:	46bd      	mov	sp, r7
 800087a:	bd80      	pop	{r7, pc}

0800087c <CAN_putTxFrame>:

HAL_StatusTypeDef CAN_putTxFrame(FDCAN_HandleTypeDef *hfdcan, CAN_Frame *tx_frame) {
 800087c:	b580      	push	{r7, lr}
 800087e:	b08c      	sub	sp, #48	; 0x30
 8000880:	af00      	add	r7, sp, #0
 8000882:	6078      	str	r0, [r7, #4]
 8000884:	6039      	str	r1, [r7, #0]
  FDCAN_TxHeaderTypeDef tx_header;

  tx_header.Identifier = tx_frame->id;
 8000886:	683b      	ldr	r3, [r7, #0]
 8000888:	681b      	ldr	r3, [r3, #0]
 800088a:	60fb      	str	r3, [r7, #12]
  tx_header.IdType = (tx_frame->id_type == CAN_ID_STANDARD) ? FDCAN_STANDARD_ID : FDCAN_EXTENDED_ID;
 800088c:	683b      	ldr	r3, [r7, #0]
 800088e:	791b      	ldrb	r3, [r3, #4]
 8000890:	2b00      	cmp	r3, #0
 8000892:	d101      	bne.n	8000898 <CAN_putTxFrame+0x1c>
 8000894:	2300      	movs	r3, #0
 8000896:	e001      	b.n	800089c <CAN_putTxFrame+0x20>
 8000898:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800089c:	613b      	str	r3, [r7, #16]
  tx_header.TxFrameType = (tx_frame->frame_type == CAN_FRAME_DATA) ? FDCAN_DATA_FRAME : FDCAN_REMOTE_FRAME;
 800089e:	683b      	ldr	r3, [r7, #0]
 80008a0:	795b      	ldrb	r3, [r3, #5]
 80008a2:	2b01      	cmp	r3, #1
 80008a4:	d101      	bne.n	80008aa <CAN_putTxFrame+0x2e>
 80008a6:	2300      	movs	r3, #0
 80008a8:	e001      	b.n	80008ae <CAN_putTxFrame+0x32>
 80008aa:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80008ae:	617b      	str	r3, [r7, #20]
  switch (tx_frame->size) {
 80008b0:	683b      	ldr	r3, [r7, #0]
 80008b2:	88db      	ldrh	r3, [r3, #6]
 80008b4:	2b08      	cmp	r3, #8
 80008b6:	d838      	bhi.n	800092a <CAN_putTxFrame+0xae>
 80008b8:	a201      	add	r2, pc, #4	; (adr r2, 80008c0 <CAN_putTxFrame+0x44>)
 80008ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80008be:	bf00      	nop
 80008c0:	080008e5 	.word	0x080008e5
 80008c4:	080008eb 	.word	0x080008eb
 80008c8:	080008f3 	.word	0x080008f3
 80008cc:	080008fb 	.word	0x080008fb
 80008d0:	08000903 	.word	0x08000903
 80008d4:	0800090b 	.word	0x0800090b
 80008d8:	08000913 	.word	0x08000913
 80008dc:	0800091b 	.word	0x0800091b
 80008e0:	08000923 	.word	0x08000923
    case 0:
      tx_header.DataLength = FDCAN_DLC_BYTES_0; break;
 80008e4:	2300      	movs	r3, #0
 80008e6:	61bb      	str	r3, [r7, #24]
 80008e8:	e021      	b.n	800092e <CAN_putTxFrame+0xb2>
    case 1:
      tx_header.DataLength = FDCAN_DLC_BYTES_1; break;
 80008ea:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80008ee:	61bb      	str	r3, [r7, #24]
 80008f0:	e01d      	b.n	800092e <CAN_putTxFrame+0xb2>
    case 2:
      tx_header.DataLength = FDCAN_DLC_BYTES_2; break;
 80008f2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80008f6:	61bb      	str	r3, [r7, #24]
 80008f8:	e019      	b.n	800092e <CAN_putTxFrame+0xb2>
    case 3:
      tx_header.DataLength = FDCAN_DLC_BYTES_3; break;
 80008fa:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 80008fe:	61bb      	str	r3, [r7, #24]
 8000900:	e015      	b.n	800092e <CAN_putTxFrame+0xb2>
    case 4:
      tx_header.DataLength = FDCAN_DLC_BYTES_4; break;
 8000902:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8000906:	61bb      	str	r3, [r7, #24]
 8000908:	e011      	b.n	800092e <CAN_putTxFrame+0xb2>
    case 5:
      tx_header.DataLength = FDCAN_DLC_BYTES_5; break;
 800090a:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800090e:	61bb      	str	r3, [r7, #24]
 8000910:	e00d      	b.n	800092e <CAN_putTxFrame+0xb2>
    case 6:
      tx_header.DataLength = FDCAN_DLC_BYTES_6; break;
 8000912:	f44f 23c0 	mov.w	r3, #393216	; 0x60000
 8000916:	61bb      	str	r3, [r7, #24]
 8000918:	e009      	b.n	800092e <CAN_putTxFrame+0xb2>
    case 7:
      tx_header.DataLength = FDCAN_DLC_BYTES_7; break;
 800091a:	f44f 23e0 	mov.w	r3, #458752	; 0x70000
 800091e:	61bb      	str	r3, [r7, #24]
 8000920:	e005      	b.n	800092e <CAN_putTxFrame+0xb2>
    case 8:
      tx_header.DataLength = FDCAN_DLC_BYTES_8; break;
 8000922:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8000926:	61bb      	str	r3, [r7, #24]
 8000928:	e001      	b.n	800092e <CAN_putTxFrame+0xb2>
    default:
      tx_header.DataLength = FDCAN_DLC_BYTES_0;
 800092a:	2300      	movs	r3, #0
 800092c:	61bb      	str	r3, [r7, #24]
  }
  tx_header.ErrorStateIndicator = FDCAN_ESI_PASSIVE;
 800092e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8000932:	61fb      	str	r3, [r7, #28]
  tx_header.BitRateSwitch = FDCAN_BRS_OFF;
 8000934:	2300      	movs	r3, #0
 8000936:	623b      	str	r3, [r7, #32]
  tx_header.FDFormat = FDCAN_CLASSIC_CAN;
 8000938:	2300      	movs	r3, #0
 800093a:	627b      	str	r3, [r7, #36]	; 0x24
  tx_header.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 800093c:	2300      	movs	r3, #0
 800093e:	62bb      	str	r3, [r7, #40]	; 0x28
  tx_header.MessageMarker = 0;
 8000940:	2300      	movs	r3, #0
 8000942:	62fb      	str	r3, [r7, #44]	; 0x2c

  return HAL_FDCAN_AddMessageToTxFifoQ(hfdcan, &tx_header, tx_frame->data);
 8000944:	683b      	ldr	r3, [r7, #0]
 8000946:	f103 0208 	add.w	r2, r3, #8
 800094a:	f107 030c 	add.w	r3, r7, #12
 800094e:	4619      	mov	r1, r3
 8000950:	6878      	ldr	r0, [r7, #4]
 8000952:	f000 fe1d 	bl	8001590 <HAL_FDCAN_AddMessageToTxFifoQ>
 8000956:	4603      	mov	r3, r0
}
 8000958:	4618      	mov	r0, r3
 800095a:	3730      	adds	r7, #48	; 0x30
 800095c:	46bd      	mov	sp, r7
 800095e:	bd80      	pop	{r7, pc}

08000960 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000964:	f000 fa95 	bl	8000e92 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000968:	f000 f80d 	bl	8000986 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800096c:	f000 f8e8 	bl	8000b40 <MX_GPIO_Init>
  MX_FDCAN1_Init();
 8000970:	f000 f854 	bl	8000a1c <MX_FDCAN1_Init>
  MX_USART2_UART_Init();
 8000974:	f000 f898 	bl	8000aa8 <MX_USART2_UART_Init>
  MX_USB_Device_Init();
 8000978:	f008 fe04 	bl	8009584 <MX_USB_Device_Init>
  /* USER CODE BEGIN 2 */
  APP_init();
 800097c:	f7ff fea2 	bl	80006c4 <APP_init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    APP_main();
 8000980:	f7ff fecc 	bl	800071c <APP_main>
 8000984:	e7fc      	b.n	8000980 <main+0x20>

08000986 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000986:	b580      	push	{r7, lr}
 8000988:	b094      	sub	sp, #80	; 0x50
 800098a:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800098c:	f107 0318 	add.w	r3, r7, #24
 8000990:	2238      	movs	r2, #56	; 0x38
 8000992:	2100      	movs	r1, #0
 8000994:	4618      	mov	r0, r3
 8000996:	f009 fb51 	bl	800a03c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800099a:	1d3b      	adds	r3, r7, #4
 800099c:	2200      	movs	r2, #0
 800099e:	601a      	str	r2, [r3, #0]
 80009a0:	605a      	str	r2, [r3, #4]
 80009a2:	609a      	str	r2, [r3, #8]
 80009a4:	60da      	str	r2, [r3, #12]
 80009a6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80009a8:	f44f 7000 	mov.w	r0, #512	; 0x200
 80009ac:	f003 f936 	bl	8003c1c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80009b0:	2301      	movs	r3, #1
 80009b2:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80009b4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80009b8:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009ba:	2302      	movs	r3, #2
 80009bc:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80009be:	2303      	movs	r3, #3
 80009c0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 80009c2:	2301      	movs	r3, #1
 80009c4:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 36;
 80009c6:	2324      	movs	r3, #36	; 0x24
 80009c8:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80009ca:	2302      	movs	r3, #2
 80009cc:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV6;
 80009ce:	2306      	movs	r3, #6
 80009d0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80009d2:	2302      	movs	r3, #2
 80009d4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009d6:	f107 0318 	add.w	r3, r7, #24
 80009da:	4618      	mov	r0, r3
 80009dc:	f003 f9c2 	bl	8003d64 <HAL_RCC_OscConfig>
 80009e0:	4603      	mov	r3, r0
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	d001      	beq.n	80009ea <SystemClock_Config+0x64>
  {
    Error_Handler();
 80009e6:	f000 f8f5 	bl	8000bd4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009ea:	230f      	movs	r3, #15
 80009ec:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009ee:	2303      	movs	r3, #3
 80009f0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009f2:	2300      	movs	r3, #0
 80009f4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80009f6:	2300      	movs	r3, #0
 80009f8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80009fa:	2300      	movs	r3, #0
 80009fc:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80009fe:	1d3b      	adds	r3, r7, #4
 8000a00:	2104      	movs	r1, #4
 8000a02:	4618      	mov	r0, r3
 8000a04:	f003 fcc6 	bl	8004394 <HAL_RCC_ClockConfig>
 8000a08:	4603      	mov	r3, r0
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	d001      	beq.n	8000a12 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8000a0e:	f000 f8e1 	bl	8000bd4 <Error_Handler>
  }
}
 8000a12:	bf00      	nop
 8000a14:	3750      	adds	r7, #80	; 0x50
 8000a16:	46bd      	mov	sp, r7
 8000a18:	bd80      	pop	{r7, pc}
	...

08000a1c <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8000a20:	4b1f      	ldr	r3, [pc, #124]	; (8000aa0 <MX_FDCAN1_Init+0x84>)
 8000a22:	4a20      	ldr	r2, [pc, #128]	; (8000aa4 <MX_FDCAN1_Init+0x88>)
 8000a24:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 8000a26:	4b1e      	ldr	r3, [pc, #120]	; (8000aa0 <MX_FDCAN1_Init+0x84>)
 8000a28:	2200      	movs	r2, #0
 8000a2a:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000a2c:	4b1c      	ldr	r3, [pc, #112]	; (8000aa0 <MX_FDCAN1_Init+0x84>)
 8000a2e:	2200      	movs	r2, #0
 8000a30:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8000a32:	4b1b      	ldr	r3, [pc, #108]	; (8000aa0 <MX_FDCAN1_Init+0x84>)
 8000a34:	2200      	movs	r2, #0
 8000a36:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 8000a38:	4b19      	ldr	r3, [pc, #100]	; (8000aa0 <MX_FDCAN1_Init+0x84>)
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8000a3e:	4b18      	ldr	r3, [pc, #96]	; (8000aa0 <MX_FDCAN1_Init+0x84>)
 8000a40:	2200      	movs	r2, #0
 8000a42:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8000a44:	4b16      	ldr	r3, [pc, #88]	; (8000aa0 <MX_FDCAN1_Init+0x84>)
 8000a46:	2200      	movs	r2, #0
 8000a48:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 36;
 8000a4a:	4b15      	ldr	r3, [pc, #84]	; (8000aa0 <MX_FDCAN1_Init+0x84>)
 8000a4c:	2224      	movs	r2, #36	; 0x24
 8000a4e:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 8000a50:	4b13      	ldr	r3, [pc, #76]	; (8000aa0 <MX_FDCAN1_Init+0x84>)
 8000a52:	2201      	movs	r2, #1
 8000a54:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 5;
 8000a56:	4b12      	ldr	r3, [pc, #72]	; (8000aa0 <MX_FDCAN1_Init+0x84>)
 8000a58:	2205      	movs	r2, #5
 8000a5a:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 8000a5c:	4b10      	ldr	r3, [pc, #64]	; (8000aa0 <MX_FDCAN1_Init+0x84>)
 8000a5e:	2202      	movs	r2, #2
 8000a60:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 8000a62:	4b0f      	ldr	r3, [pc, #60]	; (8000aa0 <MX_FDCAN1_Init+0x84>)
 8000a64:	2201      	movs	r2, #1
 8000a66:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 8000a68:	4b0d      	ldr	r3, [pc, #52]	; (8000aa0 <MX_FDCAN1_Init+0x84>)
 8000a6a:	2201      	movs	r2, #1
 8000a6c:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 8000a6e:	4b0c      	ldr	r3, [pc, #48]	; (8000aa0 <MX_FDCAN1_Init+0x84>)
 8000a70:	2201      	movs	r2, #1
 8000a72:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 8000a74:	4b0a      	ldr	r3, [pc, #40]	; (8000aa0 <MX_FDCAN1_Init+0x84>)
 8000a76:	2201      	movs	r2, #1
 8000a78:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.StdFiltersNbr = 0;
 8000a7a:	4b09      	ldr	r3, [pc, #36]	; (8000aa0 <MX_FDCAN1_Init+0x84>)
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.ExtFiltersNbr = 0;
 8000a80:	4b07      	ldr	r3, [pc, #28]	; (8000aa0 <MX_FDCAN1_Init+0x84>)
 8000a82:	2200      	movs	r2, #0
 8000a84:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000a86:	4b06      	ldr	r3, [pc, #24]	; (8000aa0 <MX_FDCAN1_Init+0x84>)
 8000a88:	2200      	movs	r2, #0
 8000a8a:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8000a8c:	4804      	ldr	r0, [pc, #16]	; (8000aa0 <MX_FDCAN1_Init+0x84>)
 8000a8e:	f000 fba3 	bl	80011d8 <HAL_FDCAN_Init>
 8000a92:	4603      	mov	r3, r0
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d001      	beq.n	8000a9c <MX_FDCAN1_Init+0x80>
  {
    Error_Handler();
 8000a98:	f000 f89c 	bl	8000bd4 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 8000a9c:	bf00      	nop
 8000a9e:	bd80      	pop	{r7, pc}
 8000aa0:	200002cc 	.word	0x200002cc
 8000aa4:	40006400 	.word	0x40006400

08000aa8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000aac:	4b22      	ldr	r3, [pc, #136]	; (8000b38 <MX_USART2_UART_Init+0x90>)
 8000aae:	4a23      	ldr	r2, [pc, #140]	; (8000b3c <MX_USART2_UART_Init+0x94>)
 8000ab0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000ab2:	4b21      	ldr	r3, [pc, #132]	; (8000b38 <MX_USART2_UART_Init+0x90>)
 8000ab4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000ab8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000aba:	4b1f      	ldr	r3, [pc, #124]	; (8000b38 <MX_USART2_UART_Init+0x90>)
 8000abc:	2200      	movs	r2, #0
 8000abe:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000ac0:	4b1d      	ldr	r3, [pc, #116]	; (8000b38 <MX_USART2_UART_Init+0x90>)
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000ac6:	4b1c      	ldr	r3, [pc, #112]	; (8000b38 <MX_USART2_UART_Init+0x90>)
 8000ac8:	2200      	movs	r2, #0
 8000aca:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000acc:	4b1a      	ldr	r3, [pc, #104]	; (8000b38 <MX_USART2_UART_Init+0x90>)
 8000ace:	220c      	movs	r2, #12
 8000ad0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ad2:	4b19      	ldr	r3, [pc, #100]	; (8000b38 <MX_USART2_UART_Init+0x90>)
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ad8:	4b17      	ldr	r3, [pc, #92]	; (8000b38 <MX_USART2_UART_Init+0x90>)
 8000ada:	2200      	movs	r2, #0
 8000adc:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000ade:	4b16      	ldr	r3, [pc, #88]	; (8000b38 <MX_USART2_UART_Init+0x90>)
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000ae4:	4b14      	ldr	r3, [pc, #80]	; (8000b38 <MX_USART2_UART_Init+0x90>)
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000aea:	4b13      	ldr	r3, [pc, #76]	; (8000b38 <MX_USART2_UART_Init+0x90>)
 8000aec:	2200      	movs	r2, #0
 8000aee:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000af0:	4811      	ldr	r0, [pc, #68]	; (8000b38 <MX_USART2_UART_Init+0x90>)
 8000af2:	f004 f85b 	bl	8004bac <HAL_UART_Init>
 8000af6:	4603      	mov	r3, r0
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d001      	beq.n	8000b00 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000afc:	f000 f86a 	bl	8000bd4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b00:	2100      	movs	r1, #0
 8000b02:	480d      	ldr	r0, [pc, #52]	; (8000b38 <MX_USART2_UART_Init+0x90>)
 8000b04:	f004 fd5c 	bl	80055c0 <HAL_UARTEx_SetTxFifoThreshold>
 8000b08:	4603      	mov	r3, r0
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d001      	beq.n	8000b12 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8000b0e:	f000 f861 	bl	8000bd4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b12:	2100      	movs	r1, #0
 8000b14:	4808      	ldr	r0, [pc, #32]	; (8000b38 <MX_USART2_UART_Init+0x90>)
 8000b16:	f004 fd91 	bl	800563c <HAL_UARTEx_SetRxFifoThreshold>
 8000b1a:	4603      	mov	r3, r0
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d001      	beq.n	8000b24 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000b20:	f000 f858 	bl	8000bd4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000b24:	4804      	ldr	r0, [pc, #16]	; (8000b38 <MX_USART2_UART_Init+0x90>)
 8000b26:	f004 fd12 	bl	800554e <HAL_UARTEx_DisableFifoMode>
 8000b2a:	4603      	mov	r3, r0
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d001      	beq.n	8000b34 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000b30:	f000 f850 	bl	8000bd4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000b34:	bf00      	nop
 8000b36:	bd80      	pop	{r7, pc}
 8000b38:	20000330 	.word	0x20000330
 8000b3c:	40004400 	.word	0x40004400

08000b40 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b088      	sub	sp, #32
 8000b44:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b46:	f107 030c 	add.w	r3, r7, #12
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	601a      	str	r2, [r3, #0]
 8000b4e:	605a      	str	r2, [r3, #4]
 8000b50:	609a      	str	r2, [r3, #8]
 8000b52:	60da      	str	r2, [r3, #12]
 8000b54:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000b56:	4b1e      	ldr	r3, [pc, #120]	; (8000bd0 <MX_GPIO_Init+0x90>)
 8000b58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b5a:	4a1d      	ldr	r2, [pc, #116]	; (8000bd0 <MX_GPIO_Init+0x90>)
 8000b5c:	f043 0320 	orr.w	r3, r3, #32
 8000b60:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b62:	4b1b      	ldr	r3, [pc, #108]	; (8000bd0 <MX_GPIO_Init+0x90>)
 8000b64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b66:	f003 0320 	and.w	r3, r3, #32
 8000b6a:	60bb      	str	r3, [r7, #8]
 8000b6c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b6e:	4b18      	ldr	r3, [pc, #96]	; (8000bd0 <MX_GPIO_Init+0x90>)
 8000b70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b72:	4a17      	ldr	r2, [pc, #92]	; (8000bd0 <MX_GPIO_Init+0x90>)
 8000b74:	f043 0301 	orr.w	r3, r3, #1
 8000b78:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b7a:	4b15      	ldr	r3, [pc, #84]	; (8000bd0 <MX_GPIO_Init+0x90>)
 8000b7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b7e:	f003 0301 	and.w	r3, r3, #1
 8000b82:	607b      	str	r3, [r7, #4]
 8000b84:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b86:	4b12      	ldr	r3, [pc, #72]	; (8000bd0 <MX_GPIO_Init+0x90>)
 8000b88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b8a:	4a11      	ldr	r2, [pc, #68]	; (8000bd0 <MX_GPIO_Init+0x90>)
 8000b8c:	f043 0302 	orr.w	r3, r3, #2
 8000b90:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b92:	4b0f      	ldr	r3, [pc, #60]	; (8000bd0 <MX_GPIO_Init+0x90>)
 8000b94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b96:	f003 0302 	and.w	r3, r3, #2
 8000b9a:	603b      	str	r3, [r7, #0]
 8000b9c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_SET);
 8000b9e:	2201      	movs	r2, #1
 8000ba0:	21c0      	movs	r1, #192	; 0xc0
 8000ba2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ba6:	f001 faed 	bl	8002184 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000baa:	23c0      	movs	r3, #192	; 0xc0
 8000bac:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000bae:	2311      	movs	r3, #17
 8000bb0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000bb6:	2302      	movs	r3, #2
 8000bb8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bba:	f107 030c 	add.w	r3, r7, #12
 8000bbe:	4619      	mov	r1, r3
 8000bc0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bc4:	f001 f95c 	bl	8001e80 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000bc8:	bf00      	nop
 8000bca:	3720      	adds	r7, #32
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	bd80      	pop	{r7, pc}
 8000bd0:	40021000 	.word	0x40021000

08000bd4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bd8:	b672      	cpsid	i
}
 8000bda:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000bdc:	e7fe      	b.n	8000bdc <Error_Handler+0x8>
	...

08000be0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000be0:	b480      	push	{r7}
 8000be2:	b083      	sub	sp, #12
 8000be4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000be6:	4b0f      	ldr	r3, [pc, #60]	; (8000c24 <HAL_MspInit+0x44>)
 8000be8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000bea:	4a0e      	ldr	r2, [pc, #56]	; (8000c24 <HAL_MspInit+0x44>)
 8000bec:	f043 0301 	orr.w	r3, r3, #1
 8000bf0:	6613      	str	r3, [r2, #96]	; 0x60
 8000bf2:	4b0c      	ldr	r3, [pc, #48]	; (8000c24 <HAL_MspInit+0x44>)
 8000bf4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000bf6:	f003 0301 	and.w	r3, r3, #1
 8000bfa:	607b      	str	r3, [r7, #4]
 8000bfc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bfe:	4b09      	ldr	r3, [pc, #36]	; (8000c24 <HAL_MspInit+0x44>)
 8000c00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c02:	4a08      	ldr	r2, [pc, #32]	; (8000c24 <HAL_MspInit+0x44>)
 8000c04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c08:	6593      	str	r3, [r2, #88]	; 0x58
 8000c0a:	4b06      	ldr	r3, [pc, #24]	; (8000c24 <HAL_MspInit+0x44>)
 8000c0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c12:	603b      	str	r3, [r7, #0]
 8000c14:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c16:	bf00      	nop
 8000c18:	370c      	adds	r7, #12
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c20:	4770      	bx	lr
 8000c22:	bf00      	nop
 8000c24:	40021000 	.word	0x40021000

08000c28 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b09a      	sub	sp, #104	; 0x68
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c30:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000c34:	2200      	movs	r2, #0
 8000c36:	601a      	str	r2, [r3, #0]
 8000c38:	605a      	str	r2, [r3, #4]
 8000c3a:	609a      	str	r2, [r3, #8]
 8000c3c:	60da      	str	r2, [r3, #12]
 8000c3e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c40:	f107 0310 	add.w	r3, r7, #16
 8000c44:	2244      	movs	r2, #68	; 0x44
 8000c46:	2100      	movs	r1, #0
 8000c48:	4618      	mov	r0, r3
 8000c4a:	f009 f9f7 	bl	800a03c <memset>
  if(hfdcan->Instance==FDCAN1)
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	4a24      	ldr	r2, [pc, #144]	; (8000ce4 <HAL_FDCAN_MspInit+0xbc>)
 8000c54:	4293      	cmp	r3, r2
 8000c56:	d140      	bne.n	8000cda <HAL_FDCAN_MspInit+0xb2>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8000c58:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c5c:	613b      	str	r3, [r7, #16]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 8000c5e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000c62:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c64:	f107 0310 	add.w	r3, r7, #16
 8000c68:	4618      	mov	r0, r3
 8000c6a:	f003 fdaf 	bl	80047cc <HAL_RCCEx_PeriphCLKConfig>
 8000c6e:	4603      	mov	r3, r0
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d001      	beq.n	8000c78 <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 8000c74:	f7ff ffae 	bl	8000bd4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8000c78:	4b1b      	ldr	r3, [pc, #108]	; (8000ce8 <HAL_FDCAN_MspInit+0xc0>)
 8000c7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c7c:	4a1a      	ldr	r2, [pc, #104]	; (8000ce8 <HAL_FDCAN_MspInit+0xc0>)
 8000c7e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000c82:	6593      	str	r3, [r2, #88]	; 0x58
 8000c84:	4b18      	ldr	r3, [pc, #96]	; (8000ce8 <HAL_FDCAN_MspInit+0xc0>)
 8000c86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c88:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000c8c:	60fb      	str	r3, [r7, #12]
 8000c8e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c90:	4b15      	ldr	r3, [pc, #84]	; (8000ce8 <HAL_FDCAN_MspInit+0xc0>)
 8000c92:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c94:	4a14      	ldr	r2, [pc, #80]	; (8000ce8 <HAL_FDCAN_MspInit+0xc0>)
 8000c96:	f043 0302 	orr.w	r3, r3, #2
 8000c9a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c9c:	4b12      	ldr	r3, [pc, #72]	; (8000ce8 <HAL_FDCAN_MspInit+0xc0>)
 8000c9e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ca0:	f003 0302 	and.w	r3, r3, #2
 8000ca4:	60bb      	str	r3, [r7, #8]
 8000ca6:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PB8-BOOT0     ------> FDCAN1_RX
    PB9     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000ca8:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000cac:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cae:	2302      	movs	r3, #2
 8000cb0:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8000cba:	2309      	movs	r3, #9
 8000cbc:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cbe:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000cc2:	4619      	mov	r1, r3
 8000cc4:	4809      	ldr	r0, [pc, #36]	; (8000cec <HAL_FDCAN_MspInit+0xc4>)
 8000cc6:	f001 f8db 	bl	8001e80 <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 0, 0);
 8000cca:	2200      	movs	r2, #0
 8000ccc:	2100      	movs	r1, #0
 8000cce:	2015      	movs	r0, #21
 8000cd0:	f000 fa4d 	bl	800116e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 8000cd4:	2015      	movs	r0, #21
 8000cd6:	f000 fa64 	bl	80011a2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }

}
 8000cda:	bf00      	nop
 8000cdc:	3768      	adds	r7, #104	; 0x68
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	bd80      	pop	{r7, pc}
 8000ce2:	bf00      	nop
 8000ce4:	40006400 	.word	0x40006400
 8000ce8:	40021000 	.word	0x40021000
 8000cec:	48000400 	.word	0x48000400

08000cf0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b09a      	sub	sp, #104	; 0x68
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cf8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	601a      	str	r2, [r3, #0]
 8000d00:	605a      	str	r2, [r3, #4]
 8000d02:	609a      	str	r2, [r3, #8]
 8000d04:	60da      	str	r2, [r3, #12]
 8000d06:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d08:	f107 0310 	add.w	r3, r7, #16
 8000d0c:	2244      	movs	r2, #68	; 0x44
 8000d0e:	2100      	movs	r1, #0
 8000d10:	4618      	mov	r0, r3
 8000d12:	f009 f993 	bl	800a03c <memset>
  if(huart->Instance==USART2)
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	4a1f      	ldr	r2, [pc, #124]	; (8000d98 <HAL_UART_MspInit+0xa8>)
 8000d1c:	4293      	cmp	r3, r2
 8000d1e:	d136      	bne.n	8000d8e <HAL_UART_MspInit+0x9e>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000d20:	2302      	movs	r3, #2
 8000d22:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000d24:	2300      	movs	r3, #0
 8000d26:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d28:	f107 0310 	add.w	r3, r7, #16
 8000d2c:	4618      	mov	r0, r3
 8000d2e:	f003 fd4d 	bl	80047cc <HAL_RCCEx_PeriphCLKConfig>
 8000d32:	4603      	mov	r3, r0
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d001      	beq.n	8000d3c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000d38:	f7ff ff4c 	bl	8000bd4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000d3c:	4b17      	ldr	r3, [pc, #92]	; (8000d9c <HAL_UART_MspInit+0xac>)
 8000d3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d40:	4a16      	ldr	r2, [pc, #88]	; (8000d9c <HAL_UART_MspInit+0xac>)
 8000d42:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d46:	6593      	str	r3, [r2, #88]	; 0x58
 8000d48:	4b14      	ldr	r3, [pc, #80]	; (8000d9c <HAL_UART_MspInit+0xac>)
 8000d4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d4c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d50:	60fb      	str	r3, [r7, #12]
 8000d52:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d54:	4b11      	ldr	r3, [pc, #68]	; (8000d9c <HAL_UART_MspInit+0xac>)
 8000d56:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d58:	4a10      	ldr	r2, [pc, #64]	; (8000d9c <HAL_UART_MspInit+0xac>)
 8000d5a:	f043 0301 	orr.w	r3, r3, #1
 8000d5e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d60:	4b0e      	ldr	r3, [pc, #56]	; (8000d9c <HAL_UART_MspInit+0xac>)
 8000d62:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d64:	f003 0301 	and.w	r3, r3, #1
 8000d68:	60bb      	str	r3, [r7, #8]
 8000d6a:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000d6c:	230c      	movs	r3, #12
 8000d6e:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d70:	2302      	movs	r3, #2
 8000d72:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d74:	2300      	movs	r3, #0
 8000d76:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d78:	2300      	movs	r3, #0
 8000d7a:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000d7c:	2307      	movs	r3, #7
 8000d7e:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d80:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000d84:	4619      	mov	r1, r3
 8000d86:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d8a:	f001 f879 	bl	8001e80 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000d8e:	bf00      	nop
 8000d90:	3768      	adds	r7, #104	; 0x68
 8000d92:	46bd      	mov	sp, r7
 8000d94:	bd80      	pop	{r7, pc}
 8000d96:	bf00      	nop
 8000d98:	40004400 	.word	0x40004400
 8000d9c:	40021000 	.word	0x40021000

08000da0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000da0:	b480      	push	{r7}
 8000da2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000da4:	e7fe      	b.n	8000da4 <NMI_Handler+0x4>

08000da6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000da6:	b480      	push	{r7}
 8000da8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000daa:	e7fe      	b.n	8000daa <HardFault_Handler+0x4>

08000dac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000dac:	b480      	push	{r7}
 8000dae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000db0:	e7fe      	b.n	8000db0 <MemManage_Handler+0x4>

08000db2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000db2:	b480      	push	{r7}
 8000db4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000db6:	e7fe      	b.n	8000db6 <BusFault_Handler+0x4>

08000db8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000db8:	b480      	push	{r7}
 8000dba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000dbc:	e7fe      	b.n	8000dbc <UsageFault_Handler+0x4>

08000dbe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000dbe:	b480      	push	{r7}
 8000dc0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000dc2:	bf00      	nop
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dca:	4770      	bx	lr

08000dcc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000dcc:	b480      	push	{r7}
 8000dce:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000dd0:	bf00      	nop
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd8:	4770      	bx	lr

08000dda <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000dda:	b480      	push	{r7}
 8000ddc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000dde:	bf00      	nop
 8000de0:	46bd      	mov	sp, r7
 8000de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de6:	4770      	bx	lr

08000de8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000dec:	f000 f8a4 	bl	8000f38 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000df0:	bf00      	nop
 8000df2:	bd80      	pop	{r7, pc}

08000df4 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt remap.
  */
void USB_LP_IRQHandler(void)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000df8:	4802      	ldr	r0, [pc, #8]	; (8000e04 <USB_LP_IRQHandler+0x10>)
 8000dfa:	f001 fae2 	bl	80023c2 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 8000dfe:	bf00      	nop
 8000e00:	bd80      	pop	{r7, pc}
 8000e02:	bf00      	nop
 8000e04:	20000998 	.word	0x20000998

08000e08 <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8000e0c:	4802      	ldr	r0, [pc, #8]	; (8000e18 <FDCAN1_IT0_IRQHandler+0x10>)
 8000e0e:	f000 fdc3 	bl	8001998 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 8000e12:	bf00      	nop
 8000e14:	bd80      	pop	{r7, pc}
 8000e16:	bf00      	nop
 8000e18:	200002cc 	.word	0x200002cc

08000e1c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000e20:	4b06      	ldr	r3, [pc, #24]	; (8000e3c <SystemInit+0x20>)
 8000e22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e26:	4a05      	ldr	r2, [pc, #20]	; (8000e3c <SystemInit+0x20>)
 8000e28:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e2c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e30:	bf00      	nop
 8000e32:	46bd      	mov	sp, r7
 8000e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e38:	4770      	bx	lr
 8000e3a:	bf00      	nop
 8000e3c:	e000ed00 	.word	0xe000ed00

08000e40 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000e40:	480d      	ldr	r0, [pc, #52]	; (8000e78 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000e42:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e44:	480d      	ldr	r0, [pc, #52]	; (8000e7c <LoopForever+0x6>)
  ldr r1, =_edata
 8000e46:	490e      	ldr	r1, [pc, #56]	; (8000e80 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000e48:	4a0e      	ldr	r2, [pc, #56]	; (8000e84 <LoopForever+0xe>)
  movs r3, #0
 8000e4a:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000e4c:	e002      	b.n	8000e54 <LoopCopyDataInit>

08000e4e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e4e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e50:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e52:	3304      	adds	r3, #4

08000e54 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e54:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e56:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e58:	d3f9      	bcc.n	8000e4e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e5a:	4a0b      	ldr	r2, [pc, #44]	; (8000e88 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000e5c:	4c0b      	ldr	r4, [pc, #44]	; (8000e8c <LoopForever+0x16>)
  movs r3, #0
 8000e5e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e60:	e001      	b.n	8000e66 <LoopFillZerobss>

08000e62 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e62:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e64:	3204      	adds	r2, #4

08000e66 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e66:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e68:	d3fb      	bcc.n	8000e62 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000e6a:	f7ff ffd7 	bl	8000e1c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000e6e:	f009 f8b3 	bl	8009fd8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000e72:	f7ff fd75 	bl	8000960 <main>

08000e76 <LoopForever>:

LoopForever:
    b LoopForever
 8000e76:	e7fe      	b.n	8000e76 <LoopForever>
  ldr   r0, =_estack
 8000e78:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8000e7c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e80:	20000184 	.word	0x20000184
  ldr r2, =_sidata
 8000e84:	0800a108 	.word	0x0800a108
  ldr r2, =_sbss
 8000e88:	20000184 	.word	0x20000184
  ldr r4, =_ebss
 8000e8c:	20000eac 	.word	0x20000eac

08000e90 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000e90:	e7fe      	b.n	8000e90 <ADC1_2_IRQHandler>

08000e92 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e92:	b580      	push	{r7, lr}
 8000e94:	b082      	sub	sp, #8
 8000e96:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000e98:	2300      	movs	r3, #0
 8000e9a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e9c:	2003      	movs	r0, #3
 8000e9e:	f000 f95b 	bl	8001158 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000ea2:	200f      	movs	r0, #15
 8000ea4:	f000 f80e 	bl	8000ec4 <HAL_InitTick>
 8000ea8:	4603      	mov	r3, r0
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d002      	beq.n	8000eb4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000eae:	2301      	movs	r3, #1
 8000eb0:	71fb      	strb	r3, [r7, #7]
 8000eb2:	e001      	b.n	8000eb8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000eb4:	f7ff fe94 	bl	8000be0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000eb8:	79fb      	ldrb	r3, [r7, #7]

}
 8000eba:	4618      	mov	r0, r3
 8000ebc:	3708      	adds	r7, #8
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	bd80      	pop	{r7, pc}
	...

08000ec4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b084      	sub	sp, #16
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000ecc:	2300      	movs	r3, #0
 8000ece:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000ed0:	4b16      	ldr	r3, [pc, #88]	; (8000f2c <HAL_InitTick+0x68>)
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d022      	beq.n	8000f1e <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000ed8:	4b15      	ldr	r3, [pc, #84]	; (8000f30 <HAL_InitTick+0x6c>)
 8000eda:	681a      	ldr	r2, [r3, #0]
 8000edc:	4b13      	ldr	r3, [pc, #76]	; (8000f2c <HAL_InitTick+0x68>)
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000ee4:	fbb1 f3f3 	udiv	r3, r1, r3
 8000ee8:	fbb2 f3f3 	udiv	r3, r2, r3
 8000eec:	4618      	mov	r0, r3
 8000eee:	f000 f966 	bl	80011be <HAL_SYSTICK_Config>
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d10f      	bne.n	8000f18 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	2b0f      	cmp	r3, #15
 8000efc:	d809      	bhi.n	8000f12 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000efe:	2200      	movs	r2, #0
 8000f00:	6879      	ldr	r1, [r7, #4]
 8000f02:	f04f 30ff 	mov.w	r0, #4294967295
 8000f06:	f000 f932 	bl	800116e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000f0a:	4a0a      	ldr	r2, [pc, #40]	; (8000f34 <HAL_InitTick+0x70>)
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	6013      	str	r3, [r2, #0]
 8000f10:	e007      	b.n	8000f22 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000f12:	2301      	movs	r3, #1
 8000f14:	73fb      	strb	r3, [r7, #15]
 8000f16:	e004      	b.n	8000f22 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000f18:	2301      	movs	r3, #1
 8000f1a:	73fb      	strb	r3, [r7, #15]
 8000f1c:	e001      	b.n	8000f22 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000f1e:	2301      	movs	r3, #1
 8000f20:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000f22:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f24:	4618      	mov	r0, r3
 8000f26:	3710      	adds	r7, #16
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	bd80      	pop	{r7, pc}
 8000f2c:	20000008 	.word	0x20000008
 8000f30:	20000000 	.word	0x20000000
 8000f34:	20000004 	.word	0x20000004

08000f38 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f38:	b480      	push	{r7}
 8000f3a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f3c:	4b05      	ldr	r3, [pc, #20]	; (8000f54 <HAL_IncTick+0x1c>)
 8000f3e:	681a      	ldr	r2, [r3, #0]
 8000f40:	4b05      	ldr	r3, [pc, #20]	; (8000f58 <HAL_IncTick+0x20>)
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	4413      	add	r3, r2
 8000f46:	4a03      	ldr	r2, [pc, #12]	; (8000f54 <HAL_IncTick+0x1c>)
 8000f48:	6013      	str	r3, [r2, #0]
}
 8000f4a:	bf00      	nop
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f52:	4770      	bx	lr
 8000f54:	200003c0 	.word	0x200003c0
 8000f58:	20000008 	.word	0x20000008

08000f5c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	af00      	add	r7, sp, #0
  return uwTick;
 8000f60:	4b03      	ldr	r3, [pc, #12]	; (8000f70 <HAL_GetTick+0x14>)
 8000f62:	681b      	ldr	r3, [r3, #0]
}
 8000f64:	4618      	mov	r0, r3
 8000f66:	46bd      	mov	sp, r7
 8000f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6c:	4770      	bx	lr
 8000f6e:	bf00      	nop
 8000f70:	200003c0 	.word	0x200003c0

08000f74 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b084      	sub	sp, #16
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f7c:	f7ff ffee 	bl	8000f5c <HAL_GetTick>
 8000f80:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f86:	68fb      	ldr	r3, [r7, #12]
 8000f88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f8c:	d004      	beq.n	8000f98 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f8e:	4b09      	ldr	r3, [pc, #36]	; (8000fb4 <HAL_Delay+0x40>)
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	68fa      	ldr	r2, [r7, #12]
 8000f94:	4413      	add	r3, r2
 8000f96:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000f98:	bf00      	nop
 8000f9a:	f7ff ffdf 	bl	8000f5c <HAL_GetTick>
 8000f9e:	4602      	mov	r2, r0
 8000fa0:	68bb      	ldr	r3, [r7, #8]
 8000fa2:	1ad3      	subs	r3, r2, r3
 8000fa4:	68fa      	ldr	r2, [r7, #12]
 8000fa6:	429a      	cmp	r2, r3
 8000fa8:	d8f7      	bhi.n	8000f9a <HAL_Delay+0x26>
  {
  }
}
 8000faa:	bf00      	nop
 8000fac:	bf00      	nop
 8000fae:	3710      	adds	r7, #16
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	bd80      	pop	{r7, pc}
 8000fb4:	20000008 	.word	0x20000008

08000fb8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	b085      	sub	sp, #20
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	f003 0307 	and.w	r3, r3, #7
 8000fc6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000fc8:	4b0c      	ldr	r3, [pc, #48]	; (8000ffc <__NVIC_SetPriorityGrouping+0x44>)
 8000fca:	68db      	ldr	r3, [r3, #12]
 8000fcc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000fce:	68ba      	ldr	r2, [r7, #8]
 8000fd0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000fd4:	4013      	ands	r3, r2
 8000fd6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000fd8:	68fb      	ldr	r3, [r7, #12]
 8000fda:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000fdc:	68bb      	ldr	r3, [r7, #8]
 8000fde:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000fe0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000fe4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fe8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000fea:	4a04      	ldr	r2, [pc, #16]	; (8000ffc <__NVIC_SetPriorityGrouping+0x44>)
 8000fec:	68bb      	ldr	r3, [r7, #8]
 8000fee:	60d3      	str	r3, [r2, #12]
}
 8000ff0:	bf00      	nop
 8000ff2:	3714      	adds	r7, #20
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffa:	4770      	bx	lr
 8000ffc:	e000ed00 	.word	0xe000ed00

08001000 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001000:	b480      	push	{r7}
 8001002:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001004:	4b04      	ldr	r3, [pc, #16]	; (8001018 <__NVIC_GetPriorityGrouping+0x18>)
 8001006:	68db      	ldr	r3, [r3, #12]
 8001008:	0a1b      	lsrs	r3, r3, #8
 800100a:	f003 0307 	and.w	r3, r3, #7
}
 800100e:	4618      	mov	r0, r3
 8001010:	46bd      	mov	sp, r7
 8001012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001016:	4770      	bx	lr
 8001018:	e000ed00 	.word	0xe000ed00

0800101c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800101c:	b480      	push	{r7}
 800101e:	b083      	sub	sp, #12
 8001020:	af00      	add	r7, sp, #0
 8001022:	4603      	mov	r3, r0
 8001024:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001026:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800102a:	2b00      	cmp	r3, #0
 800102c:	db0b      	blt.n	8001046 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800102e:	79fb      	ldrb	r3, [r7, #7]
 8001030:	f003 021f 	and.w	r2, r3, #31
 8001034:	4907      	ldr	r1, [pc, #28]	; (8001054 <__NVIC_EnableIRQ+0x38>)
 8001036:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800103a:	095b      	lsrs	r3, r3, #5
 800103c:	2001      	movs	r0, #1
 800103e:	fa00 f202 	lsl.w	r2, r0, r2
 8001042:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001046:	bf00      	nop
 8001048:	370c      	adds	r7, #12
 800104a:	46bd      	mov	sp, r7
 800104c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001050:	4770      	bx	lr
 8001052:	bf00      	nop
 8001054:	e000e100 	.word	0xe000e100

08001058 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001058:	b480      	push	{r7}
 800105a:	b083      	sub	sp, #12
 800105c:	af00      	add	r7, sp, #0
 800105e:	4603      	mov	r3, r0
 8001060:	6039      	str	r1, [r7, #0]
 8001062:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001064:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001068:	2b00      	cmp	r3, #0
 800106a:	db0a      	blt.n	8001082 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800106c:	683b      	ldr	r3, [r7, #0]
 800106e:	b2da      	uxtb	r2, r3
 8001070:	490c      	ldr	r1, [pc, #48]	; (80010a4 <__NVIC_SetPriority+0x4c>)
 8001072:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001076:	0112      	lsls	r2, r2, #4
 8001078:	b2d2      	uxtb	r2, r2
 800107a:	440b      	add	r3, r1
 800107c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001080:	e00a      	b.n	8001098 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001082:	683b      	ldr	r3, [r7, #0]
 8001084:	b2da      	uxtb	r2, r3
 8001086:	4908      	ldr	r1, [pc, #32]	; (80010a8 <__NVIC_SetPriority+0x50>)
 8001088:	79fb      	ldrb	r3, [r7, #7]
 800108a:	f003 030f 	and.w	r3, r3, #15
 800108e:	3b04      	subs	r3, #4
 8001090:	0112      	lsls	r2, r2, #4
 8001092:	b2d2      	uxtb	r2, r2
 8001094:	440b      	add	r3, r1
 8001096:	761a      	strb	r2, [r3, #24]
}
 8001098:	bf00      	nop
 800109a:	370c      	adds	r7, #12
 800109c:	46bd      	mov	sp, r7
 800109e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a2:	4770      	bx	lr
 80010a4:	e000e100 	.word	0xe000e100
 80010a8:	e000ed00 	.word	0xe000ed00

080010ac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010ac:	b480      	push	{r7}
 80010ae:	b089      	sub	sp, #36	; 0x24
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	60f8      	str	r0, [r7, #12]
 80010b4:	60b9      	str	r1, [r7, #8]
 80010b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010b8:	68fb      	ldr	r3, [r7, #12]
 80010ba:	f003 0307 	and.w	r3, r3, #7
 80010be:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010c0:	69fb      	ldr	r3, [r7, #28]
 80010c2:	f1c3 0307 	rsb	r3, r3, #7
 80010c6:	2b04      	cmp	r3, #4
 80010c8:	bf28      	it	cs
 80010ca:	2304      	movcs	r3, #4
 80010cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010ce:	69fb      	ldr	r3, [r7, #28]
 80010d0:	3304      	adds	r3, #4
 80010d2:	2b06      	cmp	r3, #6
 80010d4:	d902      	bls.n	80010dc <NVIC_EncodePriority+0x30>
 80010d6:	69fb      	ldr	r3, [r7, #28]
 80010d8:	3b03      	subs	r3, #3
 80010da:	e000      	b.n	80010de <NVIC_EncodePriority+0x32>
 80010dc:	2300      	movs	r3, #0
 80010de:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010e0:	f04f 32ff 	mov.w	r2, #4294967295
 80010e4:	69bb      	ldr	r3, [r7, #24]
 80010e6:	fa02 f303 	lsl.w	r3, r2, r3
 80010ea:	43da      	mvns	r2, r3
 80010ec:	68bb      	ldr	r3, [r7, #8]
 80010ee:	401a      	ands	r2, r3
 80010f0:	697b      	ldr	r3, [r7, #20]
 80010f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010f4:	f04f 31ff 	mov.w	r1, #4294967295
 80010f8:	697b      	ldr	r3, [r7, #20]
 80010fa:	fa01 f303 	lsl.w	r3, r1, r3
 80010fe:	43d9      	mvns	r1, r3
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001104:	4313      	orrs	r3, r2
         );
}
 8001106:	4618      	mov	r0, r3
 8001108:	3724      	adds	r7, #36	; 0x24
 800110a:	46bd      	mov	sp, r7
 800110c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001110:	4770      	bx	lr
	...

08001114 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	b082      	sub	sp, #8
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	3b01      	subs	r3, #1
 8001120:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001124:	d301      	bcc.n	800112a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001126:	2301      	movs	r3, #1
 8001128:	e00f      	b.n	800114a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800112a:	4a0a      	ldr	r2, [pc, #40]	; (8001154 <SysTick_Config+0x40>)
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	3b01      	subs	r3, #1
 8001130:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001132:	210f      	movs	r1, #15
 8001134:	f04f 30ff 	mov.w	r0, #4294967295
 8001138:	f7ff ff8e 	bl	8001058 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800113c:	4b05      	ldr	r3, [pc, #20]	; (8001154 <SysTick_Config+0x40>)
 800113e:	2200      	movs	r2, #0
 8001140:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001142:	4b04      	ldr	r3, [pc, #16]	; (8001154 <SysTick_Config+0x40>)
 8001144:	2207      	movs	r2, #7
 8001146:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001148:	2300      	movs	r3, #0
}
 800114a:	4618      	mov	r0, r3
 800114c:	3708      	adds	r7, #8
 800114e:	46bd      	mov	sp, r7
 8001150:	bd80      	pop	{r7, pc}
 8001152:	bf00      	nop
 8001154:	e000e010 	.word	0xe000e010

08001158 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	b082      	sub	sp, #8
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001160:	6878      	ldr	r0, [r7, #4]
 8001162:	f7ff ff29 	bl	8000fb8 <__NVIC_SetPriorityGrouping>
}
 8001166:	bf00      	nop
 8001168:	3708      	adds	r7, #8
 800116a:	46bd      	mov	sp, r7
 800116c:	bd80      	pop	{r7, pc}

0800116e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800116e:	b580      	push	{r7, lr}
 8001170:	b086      	sub	sp, #24
 8001172:	af00      	add	r7, sp, #0
 8001174:	4603      	mov	r3, r0
 8001176:	60b9      	str	r1, [r7, #8]
 8001178:	607a      	str	r2, [r7, #4]
 800117a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800117c:	f7ff ff40 	bl	8001000 <__NVIC_GetPriorityGrouping>
 8001180:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001182:	687a      	ldr	r2, [r7, #4]
 8001184:	68b9      	ldr	r1, [r7, #8]
 8001186:	6978      	ldr	r0, [r7, #20]
 8001188:	f7ff ff90 	bl	80010ac <NVIC_EncodePriority>
 800118c:	4602      	mov	r2, r0
 800118e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001192:	4611      	mov	r1, r2
 8001194:	4618      	mov	r0, r3
 8001196:	f7ff ff5f 	bl	8001058 <__NVIC_SetPriority>
}
 800119a:	bf00      	nop
 800119c:	3718      	adds	r7, #24
 800119e:	46bd      	mov	sp, r7
 80011a0:	bd80      	pop	{r7, pc}

080011a2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011a2:	b580      	push	{r7, lr}
 80011a4:	b082      	sub	sp, #8
 80011a6:	af00      	add	r7, sp, #0
 80011a8:	4603      	mov	r3, r0
 80011aa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80011ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011b0:	4618      	mov	r0, r3
 80011b2:	f7ff ff33 	bl	800101c <__NVIC_EnableIRQ>
}
 80011b6:	bf00      	nop
 80011b8:	3708      	adds	r7, #8
 80011ba:	46bd      	mov	sp, r7
 80011bc:	bd80      	pop	{r7, pc}

080011be <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80011be:	b580      	push	{r7, lr}
 80011c0:	b082      	sub	sp, #8
 80011c2:	af00      	add	r7, sp, #0
 80011c4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80011c6:	6878      	ldr	r0, [r7, #4]
 80011c8:	f7ff ffa4 	bl	8001114 <SysTick_Config>
 80011cc:	4603      	mov	r3, r0
}
 80011ce:	4618      	mov	r0, r3
 80011d0:	3708      	adds	r7, #8
 80011d2:	46bd      	mov	sp, r7
 80011d4:	bd80      	pop	{r7, pc}
	...

080011d8 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	b084      	sub	sp, #16
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d101      	bne.n	80011ea <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 80011e6:	2301      	movs	r3, #1
 80011e8:	e147      	b.n	800147a <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80011f0:	b2db      	uxtb	r3, r3
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d106      	bne.n	8001204 <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	2200      	movs	r2, #0
 80011fa:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 80011fe:	6878      	ldr	r0, [r7, #4]
 8001200:	f7ff fd12 	bl	8000c28 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	699a      	ldr	r2, [r3, #24]
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	f022 0210 	bic.w	r2, r2, #16
 8001212:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001214:	f7ff fea2 	bl	8000f5c <HAL_GetTick>
 8001218:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800121a:	e012      	b.n	8001242 <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 800121c:	f7ff fe9e 	bl	8000f5c <HAL_GetTick>
 8001220:	4602      	mov	r2, r0
 8001222:	68fb      	ldr	r3, [r7, #12]
 8001224:	1ad3      	subs	r3, r2, r3
 8001226:	2b0a      	cmp	r3, #10
 8001228:	d90b      	bls.n	8001242 <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800122e:	f043 0201 	orr.w	r2, r3, #1
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	2203      	movs	r2, #3
 800123a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 800123e:	2301      	movs	r3, #1
 8001240:	e11b      	b.n	800147a <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	699b      	ldr	r3, [r3, #24]
 8001248:	f003 0308 	and.w	r3, r3, #8
 800124c:	2b08      	cmp	r3, #8
 800124e:	d0e5      	beq.n	800121c <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	699a      	ldr	r2, [r3, #24]
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	f042 0201 	orr.w	r2, r2, #1
 800125e:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001260:	f7ff fe7c 	bl	8000f5c <HAL_GetTick>
 8001264:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8001266:	e012      	b.n	800128e <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8001268:	f7ff fe78 	bl	8000f5c <HAL_GetTick>
 800126c:	4602      	mov	r2, r0
 800126e:	68fb      	ldr	r3, [r7, #12]
 8001270:	1ad3      	subs	r3, r2, r3
 8001272:	2b0a      	cmp	r3, #10
 8001274:	d90b      	bls.n	800128e <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800127a:	f043 0201 	orr.w	r2, r3, #1
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	2203      	movs	r2, #3
 8001286:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 800128a:	2301      	movs	r3, #1
 800128c:	e0f5      	b.n	800147a <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	699b      	ldr	r3, [r3, #24]
 8001294:	f003 0301 	and.w	r3, r3, #1
 8001298:	2b00      	cmp	r3, #0
 800129a:	d0e5      	beq.n	8001268 <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	699a      	ldr	r2, [r3, #24]
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	f042 0202 	orr.w	r2, r2, #2
 80012aa:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	4a74      	ldr	r2, [pc, #464]	; (8001484 <HAL_FDCAN_Init+0x2ac>)
 80012b2:	4293      	cmp	r3, r2
 80012b4:	d103      	bne.n	80012be <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 80012b6:	4a74      	ldr	r2, [pc, #464]	; (8001488 <HAL_FDCAN_Init+0x2b0>)
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	685b      	ldr	r3, [r3, #4]
 80012bc:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	7c1b      	ldrb	r3, [r3, #16]
 80012c2:	2b01      	cmp	r3, #1
 80012c4:	d108      	bne.n	80012d8 <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	699a      	ldr	r2, [r3, #24]
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80012d4:	619a      	str	r2, [r3, #24]
 80012d6:	e007      	b.n	80012e8 <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	699a      	ldr	r2, [r3, #24]
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80012e6:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	7c5b      	ldrb	r3, [r3, #17]
 80012ec:	2b01      	cmp	r3, #1
 80012ee:	d108      	bne.n	8001302 <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	699a      	ldr	r2, [r3, #24]
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80012fe:	619a      	str	r2, [r3, #24]
 8001300:	e007      	b.n	8001312 <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	699a      	ldr	r2, [r3, #24]
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001310:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	7c9b      	ldrb	r3, [r3, #18]
 8001316:	2b01      	cmp	r3, #1
 8001318:	d108      	bne.n	800132c <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	699a      	ldr	r2, [r3, #24]
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001328:	619a      	str	r2, [r3, #24]
 800132a:	e007      	b.n	800133c <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	699a      	ldr	r2, [r3, #24]
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800133a:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	699b      	ldr	r3, [r3, #24]
 8001342:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	689a      	ldr	r2, [r3, #8]
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	430a      	orrs	r2, r1
 8001350:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	699a      	ldr	r2, [r3, #24]
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 8001360:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	691a      	ldr	r2, [r3, #16]
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	f022 0210 	bic.w	r2, r2, #16
 8001370:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	68db      	ldr	r3, [r3, #12]
 8001376:	2b01      	cmp	r3, #1
 8001378:	d108      	bne.n	800138c <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	699a      	ldr	r2, [r3, #24]
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	f042 0204 	orr.w	r2, r2, #4
 8001388:	619a      	str	r2, [r3, #24]
 800138a:	e02c      	b.n	80013e6 <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	68db      	ldr	r3, [r3, #12]
 8001390:	2b00      	cmp	r3, #0
 8001392:	d028      	beq.n	80013e6 <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	68db      	ldr	r3, [r3, #12]
 8001398:	2b02      	cmp	r3, #2
 800139a:	d01c      	beq.n	80013d6 <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	699a      	ldr	r2, [r3, #24]
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80013aa:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	691a      	ldr	r2, [r3, #16]
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	f042 0210 	orr.w	r2, r2, #16
 80013ba:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	68db      	ldr	r3, [r3, #12]
 80013c0:	2b03      	cmp	r3, #3
 80013c2:	d110      	bne.n	80013e6 <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	699a      	ldr	r2, [r3, #24]
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	f042 0220 	orr.w	r2, r2, #32
 80013d2:	619a      	str	r2, [r3, #24]
 80013d4:	e007      	b.n	80013e6 <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	699a      	ldr	r2, [r3, #24]
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	f042 0220 	orr.w	r2, r2, #32
 80013e4:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	699b      	ldr	r3, [r3, #24]
 80013ea:	3b01      	subs	r3, #1
 80013ec:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	69db      	ldr	r3, [r3, #28]
 80013f2:	3b01      	subs	r3, #1
 80013f4:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80013f6:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	6a1b      	ldr	r3, [r3, #32]
 80013fc:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80013fe:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	695b      	ldr	r3, [r3, #20]
 8001406:	3b01      	subs	r3, #1
 8001408:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 800140e:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001410:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	689b      	ldr	r3, [r3, #8]
 8001416:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800141a:	d115      	bne.n	8001448 <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001420:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001426:	3b01      	subs	r3, #1
 8001428:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800142a:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001430:	3b01      	subs	r3, #1
 8001432:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8001434:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800143c:	3b01      	subs	r3, #1
 800143e:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8001444:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8001446:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	430a      	orrs	r2, r1
 800145a:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 800145e:	6878      	ldr	r0, [r7, #4]
 8001460:	f000 fc3c 	bl	8001cdc <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	2200      	movs	r2, #0
 8001468:	659a      	str	r2, [r3, #88]	; 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	2200      	movs	r2, #0
 800146e:	661a      	str	r2, [r3, #96]	; 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	2201      	movs	r2, #1
 8001474:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return HAL_OK;
 8001478:	2300      	movs	r3, #0
}
 800147a:	4618      	mov	r0, r3
 800147c:	3710      	adds	r7, #16
 800147e:	46bd      	mov	sp, r7
 8001480:	bd80      	pop	{r7, pc}
 8001482:	bf00      	nop
 8001484:	40006400 	.word	0x40006400
 8001488:	40006500 	.word	0x40006500

0800148c <HAL_FDCAN_ConfigFilter>:
  * @param  sFilterConfig pointer to an FDCAN_FilterTypeDef structure that
  *         contains the filter configuration information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigFilter(FDCAN_HandleTypeDef *hfdcan, FDCAN_FilterTypeDef *sFilterConfig)
{
 800148c:	b480      	push	{r7}
 800148e:	b087      	sub	sp, #28
 8001490:	af00      	add	r7, sp, #0
 8001492:	6078      	str	r0, [r7, #4]
 8001494:	6039      	str	r1, [r7, #0]
  uint32_t FilterElementW1;
  uint32_t FilterElementW2;
  uint32_t *FilterAddress;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800149c:	75fb      	strb	r3, [r7, #23]

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 800149e:	7dfb      	ldrb	r3, [r7, #23]
 80014a0:	2b01      	cmp	r3, #1
 80014a2:	d002      	beq.n	80014aa <HAL_FDCAN_ConfigFilter+0x1e>
 80014a4:	7dfb      	ldrb	r3, [r7, #23]
 80014a6:	2b02      	cmp	r3, #2
 80014a8:	d13d      	bne.n	8001526 <HAL_FDCAN_ConfigFilter+0x9a>
  {
    /* Check function parameters */
    assert_param(IS_FDCAN_ID_TYPE(sFilterConfig->IdType));
    assert_param(IS_FDCAN_FILTER_CFG(sFilterConfig->FilterConfig));

    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 80014aa:	683b      	ldr	r3, [r7, #0]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d119      	bne.n	80014e6 <HAL_FDCAN_ConfigFilter+0x5a>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x7FFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x7FFU));
      assert_param(IS_FDCAN_STD_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build filter element */
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 80014b2:	683b      	ldr	r3, [r7, #0]
 80014b4:	689b      	ldr	r3, [r3, #8]
 80014b6:	079a      	lsls	r2, r3, #30
                         (sFilterConfig->FilterConfig << 27U) |
 80014b8:	683b      	ldr	r3, [r7, #0]
 80014ba:	68db      	ldr	r3, [r3, #12]
 80014bc:	06db      	lsls	r3, r3, #27
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 80014be:	431a      	orrs	r2, r3
                         (sFilterConfig->FilterID1 << 16U)    |
 80014c0:	683b      	ldr	r3, [r7, #0]
 80014c2:	691b      	ldr	r3, [r3, #16]
 80014c4:	041b      	lsls	r3, r3, #16
                         (sFilterConfig->FilterConfig << 27U) |
 80014c6:	431a      	orrs	r2, r3
                         sFilterConfig->FilterID2);
 80014c8:	683b      	ldr	r3, [r7, #0]
 80014ca:	695b      	ldr	r3, [r3, #20]
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 80014cc:	4313      	orrs	r3, r2
 80014ce:	613b      	str	r3, [r7, #16]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLS_SIZE));
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80014d4:	683b      	ldr	r3, [r7, #0]
 80014d6:	685b      	ldr	r3, [r3, #4]
 80014d8:	009b      	lsls	r3, r3, #2
 80014da:	4413      	add	r3, r2
 80014dc:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 80014de:	68bb      	ldr	r3, [r7, #8]
 80014e0:	693a      	ldr	r2, [r7, #16]
 80014e2:	601a      	str	r2, [r3, #0]
 80014e4:	e01d      	b.n	8001522 <HAL_FDCAN_ConfigFilter+0x96>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_EXT_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build first word of filter element */
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 80014e6:	683b      	ldr	r3, [r7, #0]
 80014e8:	68db      	ldr	r3, [r3, #12]
 80014ea:	075a      	lsls	r2, r3, #29
 80014ec:	683b      	ldr	r3, [r7, #0]
 80014ee:	691b      	ldr	r3, [r3, #16]
 80014f0:	4313      	orrs	r3, r2
 80014f2:	613b      	str	r3, [r7, #16]

      /* Build second word of filter element */
      FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 80014f4:	683b      	ldr	r3, [r7, #0]
 80014f6:	689b      	ldr	r3, [r3, #8]
 80014f8:	079a      	lsls	r2, r3, #30
 80014fa:	683b      	ldr	r3, [r7, #0]
 80014fc:	695b      	ldr	r3, [r3, #20]
 80014fe:	4313      	orrs	r3, r2
 8001500:	60fb      	str	r3, [r7, #12]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLE_SIZE));
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001506:	683b      	ldr	r3, [r7, #0]
 8001508:	685b      	ldr	r3, [r3, #4]
 800150a:	00db      	lsls	r3, r3, #3
 800150c:	4413      	add	r3, r2
 800150e:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8001510:	68bb      	ldr	r3, [r7, #8]
 8001512:	693a      	ldr	r2, [r7, #16]
 8001514:	601a      	str	r2, [r3, #0]
      FilterAddress++;
 8001516:	68bb      	ldr	r3, [r7, #8]
 8001518:	3304      	adds	r3, #4
 800151a:	60bb      	str	r3, [r7, #8]
      *FilterAddress = FilterElementW2;
 800151c:	68bb      	ldr	r3, [r7, #8]
 800151e:	68fa      	ldr	r2, [r7, #12]
 8001520:	601a      	str	r2, [r3, #0]
    }

    /* Return function status */
    return HAL_OK;
 8001522:	2300      	movs	r3, #0
 8001524:	e006      	b.n	8001534 <HAL_FDCAN_ConfigFilter+0xa8>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800152a:	f043 0202 	orr.w	r2, r3, #2
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8001532:	2301      	movs	r3, #1
  }
}
 8001534:	4618      	mov	r0, r3
 8001536:	371c      	adds	r7, #28
 8001538:	46bd      	mov	sp, r7
 800153a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153e:	4770      	bx	lr

08001540 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 8001540:	b480      	push	{r7}
 8001542:	b083      	sub	sp, #12
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800154e:	b2db      	uxtb	r3, r3
 8001550:	2b01      	cmp	r3, #1
 8001552:	d110      	bne.n	8001576 <HAL_FDCAN_Start+0x36>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	2202      	movs	r2, #2
 8001558:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	699a      	ldr	r2, [r3, #24]
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	f022 0201 	bic.w	r2, r2, #1
 800156a:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	2200      	movs	r2, #0
 8001570:	661a      	str	r2, [r3, #96]	; 0x60

    /* Return function status */
    return HAL_OK;
 8001572:	2300      	movs	r3, #0
 8001574:	e006      	b.n	8001584 <HAL_FDCAN_Start+0x44>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800157a:	f043 0204 	orr.w	r2, r3, #4
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8001582:	2301      	movs	r3, #1
  }
}
 8001584:	4618      	mov	r0, r3
 8001586:	370c      	adds	r7, #12
 8001588:	46bd      	mov	sp, r7
 800158a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158e:	4770      	bx	lr

08001590 <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader,
                                                uint8_t *pTxData)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	b086      	sub	sp, #24
 8001594:	af00      	add	r7, sp, #0
 8001596:	60f8      	str	r0, [r7, #12]
 8001598:	60b9      	str	r1, [r7, #8]
 800159a:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80015a2:	b2db      	uxtb	r3, r3
 80015a4:	2b02      	cmp	r3, #2
 80015a6:	d12c      	bne.n	8001602 <HAL_FDCAN_AddMessageToTxFifoQ+0x72>
  {
    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80015b0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d007      	beq.n	80015c8 <HAL_FDCAN_AddMessageToTxFifoQ+0x38>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80015bc:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 80015c4:	2301      	movs	r3, #1
 80015c6:	e023      	b.n	8001610 <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80015d0:	0c1b      	lsrs	r3, r3, #16
 80015d2:	f003 0303 	and.w	r3, r3, #3
 80015d6:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 80015d8:	697b      	ldr	r3, [r7, #20]
 80015da:	687a      	ldr	r2, [r7, #4]
 80015dc:	68b9      	ldr	r1, [r7, #8]
 80015de:	68f8      	ldr	r0, [r7, #12]
 80015e0:	f000 fbd2 	bl	8001d88 <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	2101      	movs	r1, #1
 80015ea:	697a      	ldr	r2, [r7, #20]
 80015ec:	fa01 f202 	lsl.w	r2, r1, r2
 80015f0:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 80015f4:	2201      	movs	r2, #1
 80015f6:	697b      	ldr	r3, [r7, #20]
 80015f8:	409a      	lsls	r2, r3
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	659a      	str	r2, [r3, #88]	; 0x58
    }

    /* Return function status */
    return HAL_OK;
 80015fe:	2300      	movs	r3, #0
 8001600:	e006      	b.n	8001610 <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001606:	f043 0208 	orr.w	r2, r3, #8
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 800160e:	2301      	movs	r3, #1
  }
}
 8001610:	4618      	mov	r0, r3
 8001612:	3718      	adds	r7, #24
 8001614:	46bd      	mov	sp, r7
 8001616:	bd80      	pop	{r7, pc}

08001618 <HAL_FDCAN_GetRxMessage>:
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation,
                                         FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 8001618:	b480      	push	{r7}
 800161a:	b08b      	sub	sp, #44	; 0x2c
 800161c:	af00      	add	r7, sp, #0
 800161e:	60f8      	str	r0, [r7, #12]
 8001620:	60b9      	str	r1, [r7, #8]
 8001622:	607a      	str	r2, [r7, #4]
 8001624:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800162c:	76fb      	strb	r3, [r7, #27]

  /* Check function parameters */
  assert_param(IS_FDCAN_RX_FIFO(RxLocation));

  if (state == HAL_FDCAN_STATE_BUSY)
 800162e:	7efb      	ldrb	r3, [r7, #27]
 8001630:	2b02      	cmp	r3, #2
 8001632:	f040 80bc 	bne.w	80017ae <HAL_FDCAN_GetRxMessage+0x196>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8001636:	68bb      	ldr	r3, [r7, #8]
 8001638:	2b40      	cmp	r3, #64	; 0x40
 800163a:	d121      	bne.n	8001680 <HAL_FDCAN_GetRxMessage+0x68>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001644:	f003 030f 	and.w	r3, r3, #15
 8001648:	2b00      	cmp	r3, #0
 800164a:	d107      	bne.n	800165c <HAL_FDCAN_GetRxMessage+0x44>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001650:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	661a      	str	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 8001658:	2301      	movs	r3, #1
 800165a:	e0af      	b.n	80017bc <HAL_FDCAN_GetRxMessage+0x1a4>
      }
      else
      {
        /* Calculate Rx FIFO 0 element address */
        GetIndex = ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001664:	0a1b      	lsrs	r3, r3, #8
 8001666:	f003 0303 	and.w	r3, r3, #3
 800166a:	61fb      	str	r3, [r7, #28]
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * SRAMCAN_RF0_SIZE));
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	6c99      	ldr	r1, [r3, #72]	; 0x48
 8001670:	69fa      	ldr	r2, [r7, #28]
 8001672:	4613      	mov	r3, r2
 8001674:	00db      	lsls	r3, r3, #3
 8001676:	4413      	add	r3, r2
 8001678:	00db      	lsls	r3, r3, #3
 800167a:	440b      	add	r3, r1
 800167c:	627b      	str	r3, [r7, #36]	; 0x24
 800167e:	e020      	b.n	80016c2 <HAL_FDCAN_GetRxMessage+0xaa>
      }
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001688:	f003 030f 	and.w	r3, r3, #15
 800168c:	2b00      	cmp	r3, #0
 800168e:	d107      	bne.n	80016a0 <HAL_FDCAN_GetRxMessage+0x88>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001694:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	661a      	str	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 800169c:	2301      	movs	r3, #1
 800169e:	e08d      	b.n	80017bc <HAL_FDCAN_GetRxMessage+0x1a4>
      }
      else
      {
        /* Calculate Rx FIFO 1 element address */
        GetIndex = ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80016a8:	0a1b      	lsrs	r3, r3, #8
 80016aa:	f003 0303 	and.w	r3, r3, #3
 80016ae:	61fb      	str	r3, [r7, #28]
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * SRAMCAN_RF1_SIZE));
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 80016b4:	69fa      	ldr	r2, [r7, #28]
 80016b6:	4613      	mov	r3, r2
 80016b8:	00db      	lsls	r3, r3, #3
 80016ba:	4413      	add	r3, r2
 80016bc:	00db      	lsls	r3, r3, #3
 80016be:	440b      	add	r3, r1
 80016c0:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 80016c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	f003 4280 	and.w	r2, r3, #1073741824	; 0x40000000
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	685b      	ldr	r3, [r3, #4]
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d107      	bne.n	80016e6 <HAL_FDCAN_GetRxMessage+0xce>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 80016d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	0c9b      	lsrs	r3, r3, #18
 80016dc:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	601a      	str	r2, [r3, #0]
 80016e4:	e005      	b.n	80016f2 <HAL_FDCAN_GetRxMessage+0xda>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 80016e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 80016f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	f003 5200 	and.w	r2, r3, #536870912	; 0x20000000
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 80016fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 800170a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800170c:	3304      	adds	r3, #4
 800170e:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 8001710:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	b29a      	uxth	r2, r3
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = (*RxAddress & FDCAN_ELEMENT_MASK_DLC);
 800171a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	f403 2270 	and.w	r2, r3, #983040	; 0xf0000
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 8001726:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	f403 1280 	and.w	r2, r3, #1048576	; 0x100000
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 8001732:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	f403 1200 	and.w	r2, r3, #2097152	; 0x200000
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 800173e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	0e1b      	lsrs	r3, r3, #24
 8001744:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 800174c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	0fda      	lsrs	r2, r3, #31
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	625a      	str	r2, [r3, #36]	; 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 8001756:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001758:	3304      	adds	r3, #4
 800175a:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 800175c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800175e:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16U]; ByteCounter++)
 8001760:	2300      	movs	r3, #0
 8001762:	623b      	str	r3, [r7, #32]
 8001764:	e00a      	b.n	800177c <HAL_FDCAN_GetRxMessage+0x164>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 8001766:	697a      	ldr	r2, [r7, #20]
 8001768:	6a3b      	ldr	r3, [r7, #32]
 800176a:	441a      	add	r2, r3
 800176c:	6839      	ldr	r1, [r7, #0]
 800176e:	6a3b      	ldr	r3, [r7, #32]
 8001770:	440b      	add	r3, r1
 8001772:	7812      	ldrb	r2, [r2, #0]
 8001774:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16U]; ByteCounter++)
 8001776:	6a3b      	ldr	r3, [r7, #32]
 8001778:	3301      	adds	r3, #1
 800177a:	623b      	str	r3, [r7, #32]
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	68db      	ldr	r3, [r3, #12]
 8001780:	0c1b      	lsrs	r3, r3, #16
 8001782:	4a11      	ldr	r2, [pc, #68]	; (80017c8 <HAL_FDCAN_GetRxMessage+0x1b0>)
 8001784:	5cd3      	ldrb	r3, [r2, r3]
 8001786:	461a      	mov	r2, r3
 8001788:	6a3b      	ldr	r3, [r7, #32]
 800178a:	4293      	cmp	r3, r2
 800178c:	d3eb      	bcc.n	8001766 <HAL_FDCAN_GetRxMessage+0x14e>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 800178e:	68bb      	ldr	r3, [r7, #8]
 8001790:	2b40      	cmp	r3, #64	; 0x40
 8001792:	d105      	bne.n	80017a0 <HAL_FDCAN_GetRxMessage+0x188>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	69fa      	ldr	r2, [r7, #28]
 800179a:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
 800179e:	e004      	b.n	80017aa <HAL_FDCAN_GetRxMessage+0x192>
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	69fa      	ldr	r2, [r7, #28]
 80017a6:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    }

    /* Return function status */
    return HAL_OK;
 80017aa:	2300      	movs	r3, #0
 80017ac:	e006      	b.n	80017bc <HAL_FDCAN_GetRxMessage+0x1a4>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80017b2:	f043 0208 	orr.w	r2, r3, #8
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 80017ba:	2301      	movs	r3, #1
  }
}
 80017bc:	4618      	mov	r0, r3
 80017be:	372c      	adds	r7, #44	; 0x2c
 80017c0:	46bd      	mov	sp, r7
 80017c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c6:	4770      	bx	lr
 80017c8:	0800a0c0 	.word	0x0800a0c0

080017cc <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs,
                                                 uint32_t BufferIndexes)
{
 80017cc:	b480      	push	{r7}
 80017ce:	b087      	sub	sp, #28
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	60f8      	str	r0, [r7, #12]
 80017d4:	60b9      	str	r1, [r7, #8]
 80017d6:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80017de:	75fb      	strb	r3, [r7, #23]
  if ((ActiveITs & (FDCAN_IT_TX_COMPLETE | FDCAN_IT_TX_ABORT_COMPLETE)) != 0U)
  {
    assert_param(IS_FDCAN_TX_LOCATION_LIST(BufferIndexes));
  }

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 80017e0:	7dfb      	ldrb	r3, [r7, #23]
 80017e2:	2b01      	cmp	r3, #1
 80017e4:	d003      	beq.n	80017ee <HAL_FDCAN_ActivateNotification+0x22>
 80017e6:	7dfb      	ldrb	r3, [r7, #23]
 80017e8:	2b02      	cmp	r3, #2
 80017ea:	f040 80c8 	bne.w	800197e <HAL_FDCAN_ActivateNotification+0x1b2>
  {
    /* Get interrupts line selection */
    ITs_lines_selection = hfdcan->Instance->ILS;
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017f4:	613b      	str	r3, [r7, #16]

    /* Enable Interrupt lines */
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0) != 0U)
 80017f6:	68bb      	ldr	r3, [r7, #8]
 80017f8:	f003 0307 	and.w	r3, r3, #7
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d004      	beq.n	800180a <HAL_FDCAN_ActivateNotification+0x3e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 8001800:	693b      	ldr	r3, [r7, #16]
 8001802:	f003 0301 	and.w	r3, r3, #1
 8001806:	2b00      	cmp	r3, #0
 8001808:	d03b      	beq.n	8001882 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 800180a:	68bb      	ldr	r3, [r7, #8]
 800180c:	f003 0338 	and.w	r3, r3, #56	; 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 8001810:	2b00      	cmp	r3, #0
 8001812:	d004      	beq.n	800181e <HAL_FDCAN_ActivateNotification+0x52>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 8001814:	693b      	ldr	r3, [r7, #16]
 8001816:	f003 0302 	and.w	r3, r3, #2
 800181a:	2b00      	cmp	r3, #0
 800181c:	d031      	beq.n	8001882 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 800181e:	68bb      	ldr	r3, [r7, #8]
 8001820:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 8001824:	2b00      	cmp	r3, #0
 8001826:	d004      	beq.n	8001832 <HAL_FDCAN_ActivateNotification+0x66>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 8001828:	693b      	ldr	r3, [r7, #16]
 800182a:	f003 0304 	and.w	r3, r3, #4
 800182e:	2b00      	cmp	r3, #0
 8001830:	d027      	beq.n	8001882 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 8001832:	68bb      	ldr	r3, [r7, #8]
 8001834:	f403 53f0 	and.w	r3, r3, #7680	; 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 8001838:	2b00      	cmp	r3, #0
 800183a:	d004      	beq.n	8001846 <HAL_FDCAN_ActivateNotification+0x7a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 800183c:	693b      	ldr	r3, [r7, #16]
 800183e:	f003 0308 	and.w	r3, r3, #8
 8001842:	2b00      	cmp	r3, #0
 8001844:	d01d      	beq.n	8001882 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 8001846:	68bb      	ldr	r3, [r7, #8]
 8001848:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 800184c:	2b00      	cmp	r3, #0
 800184e:	d004      	beq.n	800185a <HAL_FDCAN_ActivateNotification+0x8e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 8001850:	693b      	ldr	r3, [r7, #16]
 8001852:	f003 0310 	and.w	r3, r3, #16
 8001856:	2b00      	cmp	r3, #0
 8001858:	d013      	beq.n	8001882 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 800185a:	68bb      	ldr	r3, [r7, #8]
 800185c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 8001860:	2b00      	cmp	r3, #0
 8001862:	d004      	beq.n	800186e <HAL_FDCAN_ActivateNotification+0xa2>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 8001864:	693b      	ldr	r3, [r7, #16]
 8001866:	f003 0320 	and.w	r3, r3, #32
 800186a:	2b00      	cmp	r3, #0
 800186c:	d009      	beq.n	8001882 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 800186e:	68bb      	ldr	r3, [r7, #8]
 8001870:	f403 037c 	and.w	r3, r3, #16515072	; 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 8001874:	2b00      	cmp	r3, #0
 8001876:	d00c      	beq.n	8001892 <HAL_FDCAN_ActivateNotification+0xc6>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) == 0U)))
 8001878:	693b      	ldr	r3, [r7, #16]
 800187a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800187e:	2b00      	cmp	r3, #0
 8001880:	d107      	bne.n	8001892 <HAL_FDCAN_ActivateNotification+0xc6>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	f042 0201 	orr.w	r2, r2, #1
 8001890:	65da      	str	r2, [r3, #92]	; 0x5c
    }
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0)       != 0U)
 8001892:	68bb      	ldr	r3, [r7, #8]
 8001894:	f003 0307 	and.w	r3, r3, #7
 8001898:	2b00      	cmp	r3, #0
 800189a:	d004      	beq.n	80018a6 <HAL_FDCAN_ActivateNotification+0xda>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 800189c:	693b      	ldr	r3, [r7, #16]
 800189e:	f003 0301 	and.w	r3, r3, #1
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d13b      	bne.n	800191e <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 80018a6:	68bb      	ldr	r3, [r7, #8]
 80018a8:	f003 0338 	and.w	r3, r3, #56	; 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d004      	beq.n	80018ba <HAL_FDCAN_ActivateNotification+0xee>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 80018b0:	693b      	ldr	r3, [r7, #16]
 80018b2:	f003 0302 	and.w	r3, r3, #2
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d131      	bne.n	800191e <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 80018ba:	68bb      	ldr	r3, [r7, #8]
 80018bc:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d004      	beq.n	80018ce <HAL_FDCAN_ActivateNotification+0x102>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 80018c4:	693b      	ldr	r3, [r7, #16]
 80018c6:	f003 0304 	and.w	r3, r3, #4
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d127      	bne.n	800191e <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 80018ce:	68bb      	ldr	r3, [r7, #8]
 80018d0:	f403 53f0 	and.w	r3, r3, #7680	; 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d004      	beq.n	80018e2 <HAL_FDCAN_ActivateNotification+0x116>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 80018d8:	693b      	ldr	r3, [r7, #16]
 80018da:	f003 0308 	and.w	r3, r3, #8
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d11d      	bne.n	800191e <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 80018e2:	68bb      	ldr	r3, [r7, #8]
 80018e4:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d004      	beq.n	80018f6 <HAL_FDCAN_ActivateNotification+0x12a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 80018ec:	693b      	ldr	r3, [r7, #16]
 80018ee:	f003 0310 	and.w	r3, r3, #16
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d113      	bne.n	800191e <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 80018f6:	68bb      	ldr	r3, [r7, #8]
 80018f8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d004      	beq.n	800190a <HAL_FDCAN_ActivateNotification+0x13e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 8001900:	693b      	ldr	r3, [r7, #16]
 8001902:	f003 0320 	and.w	r3, r3, #32
 8001906:	2b00      	cmp	r3, #0
 8001908:	d109      	bne.n	800191e <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 800190a:	68bb      	ldr	r3, [r7, #8]
 800190c:	f403 037c 	and.w	r3, r3, #16515072	; 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 8001910:	2b00      	cmp	r3, #0
 8001912:	d00c      	beq.n	800192e <HAL_FDCAN_ActivateNotification+0x162>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) != 0U)))
 8001914:	693b      	ldr	r3, [r7, #16]
 8001916:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800191a:	2b00      	cmp	r3, #0
 800191c:	d007      	beq.n	800192e <HAL_FDCAN_ActivateNotification+0x162>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	f042 0202 	orr.w	r2, r2, #2
 800192c:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 800192e:	68bb      	ldr	r3, [r7, #8]
 8001930:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001934:	2b00      	cmp	r3, #0
 8001936:	d009      	beq.n	800194c <HAL_FDCAN_ActivateNotification+0x180>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	f8d3 10dc 	ldr.w	r1, [r3, #220]	; 0xdc
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	687a      	ldr	r2, [r7, #4]
 8001946:	430a      	orrs	r2, r1
 8001948:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 800194c:	68bb      	ldr	r3, [r7, #8]
 800194e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001952:	2b00      	cmp	r3, #0
 8001954:	d009      	beq.n	800196a <HAL_FDCAN_ActivateNotification+0x19e>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	f8d3 10e0 	ldr.w	r1, [r3, #224]	; 0xe0
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	687a      	ldr	r2, [r7, #4]
 8001964:	430a      	orrs	r2, r1
 8001966:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	68ba      	ldr	r2, [r7, #8]
 8001976:	430a      	orrs	r2, r1
 8001978:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return function status */
    return HAL_OK;
 800197a:	2300      	movs	r3, #0
 800197c:	e006      	b.n	800198c <HAL_FDCAN_ActivateNotification+0x1c0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001982:	f043 0202 	orr.w	r2, r3, #2
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 800198a:	2301      	movs	r3, #1
  }
}
 800198c:	4618      	mov	r0, r3
 800198e:	371c      	adds	r7, #28
 8001990:	46bd      	mov	sp, r7
 8001992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001996:	4770      	bx	lr

08001998 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	b08a      	sub	sp, #40	; 0x28
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
  uint32_t Errors;
  uint32_t ErrorStatusITs;
  uint32_t TransmittedBuffers;
  uint32_t AbortedBuffers;

  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80019a6:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 80019aa:	627b      	str	r3, [r7, #36]	; 0x24
  TxEventFifoITs &= hfdcan->Instance->IE;
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80019b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80019b4:	4013      	ands	r3, r2
 80019b6:	627b      	str	r3, [r7, #36]	; 0x24
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80019be:	f003 0307 	and.w	r3, r3, #7
 80019c2:	623b      	str	r3, [r7, #32]
  RxFifo0ITs &= hfdcan->Instance->IE;
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80019ca:	6a3a      	ldr	r2, [r7, #32]
 80019cc:	4013      	ands	r3, r2
 80019ce:	623b      	str	r3, [r7, #32]
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80019d6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80019da:	61fb      	str	r3, [r7, #28]
  RxFifo1ITs &= hfdcan->Instance->IE;
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80019e2:	69fa      	ldr	r2, [r7, #28]
 80019e4:	4013      	ands	r3, r2
 80019e6:	61fb      	str	r3, [r7, #28]
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80019ee:	f403 0371 	and.w	r3, r3, #15794176	; 0xf10000
 80019f2:	61bb      	str	r3, [r7, #24]
  Errors &= hfdcan->Instance->IE;
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80019fa:	69ba      	ldr	r2, [r7, #24]
 80019fc:	4013      	ands	r3, r2
 80019fe:	61bb      	str	r3, [r7, #24]
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001a06:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001a0a:	617b      	str	r3, [r7, #20]
  ErrorStatusITs &= hfdcan->Instance->IE;
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a12:	697a      	ldr	r2, [r7, #20]
 8001a14:	4013      	ands	r3, r2
 8001a16:	617b      	str	r3, [r7, #20]

  /* High Priority Message interrupt management *******************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != 0U)
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001a1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d00d      	beq.n	8001a42 <HAL_FDCAN_IRQHandler+0xaa>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != 0U)
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d006      	beq.n	8001a42 <HAL_FDCAN_IRQHandler+0xaa>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	2240      	movs	r2, #64	; 0x40
 8001a3a:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 8001a3c:	6878      	ldr	r0, [r7, #4]
 8001a3e:	f000 f92e 	bl	8001c9e <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE) != 0U)
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001a48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d01b      	beq.n	8001a88 <HAL_FDCAN_IRQHandler+0xf0>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d014      	beq.n	8001a88 <HAL_FDCAN_IRQHandler+0xf0>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001a66:	613b      	str	r3, [r7, #16]
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a70:	693a      	ldr	r2, [r7, #16]
 8001a72:	4013      	ands	r3, r2
 8001a74:	613b      	str	r3, [r7, #16]

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001a7e:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 8001a80:	6939      	ldr	r1, [r7, #16]
 8001a82:	6878      	ldr	r0, [r7, #4]
 8001a84:	f000 f8ec 	bl	8001c60 <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 8001a88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d007      	beq.n	8001a9e <HAL_FDCAN_IRQHandler+0x106>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a94:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 8001a96:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001a98:	6878      	ldr	r0, [r7, #4]
 8001a9a:	f000 f8b6 	bl	8001c0a <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 8001a9e:	6a3b      	ldr	r3, [r7, #32]
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d007      	beq.n	8001ab4 <HAL_FDCAN_IRQHandler+0x11c>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	6a3a      	ldr	r2, [r7, #32]
 8001aaa:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 8001aac:	6a39      	ldr	r1, [r7, #32]
 8001aae:	6878      	ldr	r0, [r7, #4]
 8001ab0:	f7fe fd34 	bl	800051c <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 8001ab4:	69fb      	ldr	r3, [r7, #28]
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d007      	beq.n	8001aca <HAL_FDCAN_IRQHandler+0x132>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	69fa      	ldr	r2, [r7, #28]
 8001ac0:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 8001ac2:	69f9      	ldr	r1, [r7, #28]
 8001ac4:	6878      	ldr	r0, [r7, #4]
 8001ac6:	f000 f8ab 	bl	8001c20 <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY) != 0U)
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001ad0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d00e      	beq.n	8001af6 <HAL_FDCAN_IRQHandler+0x15e>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_FIFO_EMPTY) != 0U)
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ade:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d007      	beq.n	8001af6 <HAL_FDCAN_IRQHandler+0x15e>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001aee:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 8001af0:	6878      	ldr	r0, [r7, #4]
 8001af2:	f000 f8a0 	bl	8001c36 <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE) != 0U)
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001afc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d01a      	beq.n	8001b3a <HAL_FDCAN_IRQHandler+0x1a2>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_COMPLETE) != 0U)
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d013      	beq.n	8001b3a <HAL_FDCAN_IRQHandler+0x1a2>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8001b1a:	60fb      	str	r3, [r7, #12]
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8001b24:	68fa      	ldr	r2, [r7, #12]
 8001b26:	4013      	ands	r3, r2
 8001b28:	60fb      	str	r3, [r7, #12]

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	2280      	movs	r2, #128	; 0x80
 8001b30:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 8001b32:	68f9      	ldr	r1, [r7, #12]
 8001b34:	6878      	ldr	r0, [r7, #4]
 8001b36:	f000 f888 	bl	8001c4a <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != 0U)
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001b40:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d00e      	beq.n	8001b66 <HAL_FDCAN_IRQHandler+0x1ce>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMESTAMP_WRAPAROUND) != 0U)
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b4e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d007      	beq.n	8001b66 <HAL_FDCAN_IRQHandler+0x1ce>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001b5e:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 8001b60:	6878      	ldr	r0, [r7, #4]
 8001b62:	f000 f888 	bl	8001c76 <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED) != 0U)
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001b6c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d00e      	beq.n	8001b92 <HAL_FDCAN_IRQHandler+0x1fa>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMEOUT_OCCURRED) != 0U)
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b7a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d007      	beq.n	8001b92 <HAL_FDCAN_IRQHandler+0x1fa>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001b8a:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 8001b8c:	6878      	ldr	r0, [r7, #4]
 8001b8e:	f000 f87c 	bl	8001c8a <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE) != 0U)
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001b98:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d011      	beq.n	8001bc4 <HAL_FDCAN_IRQHandler+0x22c>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RAM_ACCESS_FAILURE) != 0U)
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ba6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d00a      	beq.n	8001bc4 <HAL_FDCAN_IRQHandler+0x22c>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001bb6:	651a      	str	r2, [r3, #80]	; 0x50

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001bbc:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	661a      	str	r2, [r3, #96]	; 0x60
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 8001bc4:	697b      	ldr	r3, [r7, #20]
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d007      	beq.n	8001bda <HAL_FDCAN_IRQHandler+0x242>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	697a      	ldr	r2, [r7, #20]
 8001bd0:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 8001bd2:	6979      	ldr	r1, [r7, #20]
 8001bd4:	6878      	ldr	r0, [r7, #4]
 8001bd6:	f000 f876 	bl	8001cc6 <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 8001bda:	69bb      	ldr	r3, [r7, #24]
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d009      	beq.n	8001bf4 <HAL_FDCAN_IRQHandler+0x25c>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	69ba      	ldr	r2, [r7, #24]
 8001be6:	651a      	str	r2, [r3, #80]	; 0x50

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001bec:	69bb      	ldr	r3, [r7, #24]
 8001bee:	431a      	orrs	r2, r3
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d002      	beq.n	8001c02 <HAL_FDCAN_IRQHandler+0x26a>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 8001bfc:	6878      	ldr	r0, [r7, #4]
 8001bfe:	f000 f858 	bl	8001cb2 <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 8001c02:	bf00      	nop
 8001c04:	3728      	adds	r7, #40	; 0x28
 8001c06:	46bd      	mov	sp, r7
 8001c08:	bd80      	pop	{r7, pc}

08001c0a <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signalled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 8001c0a:	b480      	push	{r7}
 8001c0c:	b083      	sub	sp, #12
 8001c0e:	af00      	add	r7, sp, #0
 8001c10:	6078      	str	r0, [r7, #4]
 8001c12:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 8001c14:	bf00      	nop
 8001c16:	370c      	adds	r7, #12
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1e:	4770      	bx	lr

08001c20 <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signalled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 8001c20:	b480      	push	{r7}
 8001c22:	b083      	sub	sp, #12
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]
 8001c28:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 8001c2a:	bf00      	nop
 8001c2c:	370c      	adds	r7, #12
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c34:	4770      	bx	lr

08001c36 <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8001c36:	b480      	push	{r7}
 8001c38:	b083      	sub	sp, #12
 8001c3a:	af00      	add	r7, sp, #0
 8001c3c:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 8001c3e:	bf00      	nop
 8001c40:	370c      	adds	r7, #12
 8001c42:	46bd      	mov	sp, r7
 8001c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c48:	4770      	bx	lr

08001c4a <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8001c4a:	b480      	push	{r7}
 8001c4c:	b083      	sub	sp, #12
 8001c4e:	af00      	add	r7, sp, #0
 8001c50:	6078      	str	r0, [r7, #4]
 8001c52:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 8001c54:	bf00      	nop
 8001c56:	370c      	adds	r7, #12
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5e:	4770      	bx	lr

08001c60 <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8001c60:	b480      	push	{r7}
 8001c62:	b083      	sub	sp, #12
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]
 8001c68:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 8001c6a:	bf00      	nop
 8001c6c:	370c      	adds	r7, #12
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c74:	4770      	bx	lr

08001c76 <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8001c76:	b480      	push	{r7}
 8001c78:	b083      	sub	sp, #12
 8001c7a:	af00      	add	r7, sp, #0
 8001c7c:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 8001c7e:	bf00      	nop
 8001c80:	370c      	adds	r7, #12
 8001c82:	46bd      	mov	sp, r7
 8001c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c88:	4770      	bx	lr

08001c8a <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8001c8a:	b480      	push	{r7}
 8001c8c:	b083      	sub	sp, #12
 8001c8e:	af00      	add	r7, sp, #0
 8001c90:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 8001c92:	bf00      	nop
 8001c94:	370c      	adds	r7, #12
 8001c96:	46bd      	mov	sp, r7
 8001c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9c:	4770      	bx	lr

08001c9e <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8001c9e:	b480      	push	{r7}
 8001ca0:	b083      	sub	sp, #12
 8001ca2:	af00      	add	r7, sp, #0
 8001ca4:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 8001ca6:	bf00      	nop
 8001ca8:	370c      	adds	r7, #12
 8001caa:	46bd      	mov	sp, r7
 8001cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb0:	4770      	bx	lr

08001cb2 <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8001cb2:	b480      	push	{r7}
 8001cb4:	b083      	sub	sp, #12
 8001cb6:	af00      	add	r7, sp, #0
 8001cb8:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 8001cba:	bf00      	nop
 8001cbc:	370c      	adds	r7, #12
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc4:	4770      	bx	lr

08001cc6 <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 8001cc6:	b480      	push	{r7}
 8001cc8:	b083      	sub	sp, #12
 8001cca:	af00      	add	r7, sp, #0
 8001ccc:	6078      	str	r0, [r7, #4]
 8001cce:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 8001cd0:	bf00      	nop
 8001cd2:	370c      	adds	r7, #12
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cda:	4770      	bx	lr

08001cdc <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8001cdc:	b480      	push	{r7}
 8001cde:	b085      	sub	sp, #20
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 8001ce4:	4b27      	ldr	r3, [pc, #156]	; (8001d84 <FDCAN_CalcultateRamBlockAddresses+0xa8>)
 8001ce6:	60bb      	str	r3, [r7, #8]
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	68ba      	ldr	r2, [r7, #8]
 8001cec:	641a      	str	r2, [r3, #64]	; 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001cf6:	f423 11f8 	bic.w	r1, r3, #2031616	; 0x1f0000
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001cfe:	041a      	lsls	r2, r3, #16
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	430a      	orrs	r2, r1
 8001d06:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 8001d0a:	68bb      	ldr	r3, [r7, #8]
 8001d0c:	f103 0270 	add.w	r2, r3, #112	; 0x70
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	645a      	str	r2, [r3, #68]	; 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001d1c:	f023 6170 	bic.w	r1, r3, #251658240	; 0xf000000
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d24:	061a      	lsls	r2, r3, #24
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	430a      	orrs	r2, r1
 8001d2c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 8001d30:	68bb      	ldr	r3, [r7, #8]
 8001d32:	f103 02b0 	add.w	r2, r3, #176	; 0xb0
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	649a      	str	r2, [r3, #72]	; 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 8001d3a:	68bb      	ldr	r3, [r7, #8]
 8001d3c:	f503 72c4 	add.w	r2, r3, #392	; 0x188
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 8001d44:	68bb      	ldr	r3, [r7, #8]
 8001d46:	f503 7218 	add.w	r2, r3, #608	; 0x260
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	651a      	str	r2, [r3, #80]	; 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 8001d4e:	68bb      	ldr	r3, [r7, #8]
 8001d50:	f503 721e 	add.w	r2, r3, #632	; 0x278
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	655a      	str	r2, [r3, #84]	; 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8001d58:	68bb      	ldr	r3, [r7, #8]
 8001d5a:	60fb      	str	r3, [r7, #12]
 8001d5c:	e005      	b.n	8001d6a <FDCAN_CalcultateRamBlockAddresses+0x8e>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	2200      	movs	r2, #0
 8001d62:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	3304      	adds	r3, #4
 8001d68:	60fb      	str	r3, [r7, #12]
 8001d6a:	68bb      	ldr	r3, [r7, #8]
 8001d6c:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8001d70:	68fa      	ldr	r2, [r7, #12]
 8001d72:	429a      	cmp	r2, r3
 8001d74:	d3f3      	bcc.n	8001d5e <FDCAN_CalcultateRamBlockAddresses+0x82>
  }
}
 8001d76:	bf00      	nop
 8001d78:	bf00      	nop
 8001d7a:	3714      	adds	r7, #20
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d82:	4770      	bx	lr
 8001d84:	4000a400 	.word	0x4000a400

08001d88 <FDCAN_CopyMessageToRAM>:
  * @param  BufferIndex index of the buffer to be configured.
  * @retval none
 */
static void FDCAN_CopyMessageToRAM(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader, uint8_t *pTxData,
                                   uint32_t BufferIndex)
{
 8001d88:	b480      	push	{r7}
 8001d8a:	b089      	sub	sp, #36	; 0x24
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	60f8      	str	r0, [r7, #12]
 8001d90:	60b9      	str	r1, [r7, #8]
 8001d92:	607a      	str	r2, [r7, #4]
 8001d94:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 8001d96:	68bb      	ldr	r3, [r7, #8]
 8001d98:	685b      	ldr	r3, [r3, #4]
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d10a      	bne.n	8001db4 <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8001d9e:	68bb      	ldr	r3, [r7, #8]
 8001da0:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 8001da2:	68bb      	ldr	r3, [r7, #8]
 8001da4:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 8001da6:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18U));
 8001da8:	68bb      	ldr	r3, [r7, #8]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8001dae:	4313      	orrs	r3, r2
 8001db0:	61fb      	str	r3, [r7, #28]
 8001db2:	e00a      	b.n	8001dca <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8001db4:	68bb      	ldr	r3, [r7, #8]
 8001db6:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 8001db8:	68bb      	ldr	r3, [r7, #8]
 8001dba:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 8001dbc:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 8001dbe:	68bb      	ldr	r3, [r7, #8]
 8001dc0:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 8001dc2:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8001dc4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001dc8:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8001dca:	68bb      	ldr	r3, [r7, #8]
 8001dcc:	6a1b      	ldr	r3, [r3, #32]
 8001dce:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 8001dd0:	68bb      	ldr	r3, [r7, #8]
 8001dd2:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8001dd4:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 8001dd6:	68bb      	ldr	r3, [r7, #8]
 8001dd8:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 8001dda:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 8001ddc:	68bb      	ldr	r3, [r7, #8]
 8001dde:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 8001de0:	431a      	orrs	r2, r3
                 pTxHeader->DataLength);
 8001de2:	68bb      	ldr	r3, [r7, #8]
 8001de4:	68db      	ldr	r3, [r3, #12]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8001de6:	4313      	orrs	r3, r2
 8001de8:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxFIFOQSA + (BufferIndex * SRAMCAN_TFQ_SIZE));
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8001dee:	683a      	ldr	r2, [r7, #0]
 8001df0:	4613      	mov	r3, r2
 8001df2:	00db      	lsls	r3, r3, #3
 8001df4:	4413      	add	r3, r2
 8001df6:	00db      	lsls	r3, r3, #3
 8001df8:	440b      	add	r3, r1
 8001dfa:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 8001dfc:	69bb      	ldr	r3, [r7, #24]
 8001dfe:	69fa      	ldr	r2, [r7, #28]
 8001e00:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8001e02:	69bb      	ldr	r3, [r7, #24]
 8001e04:	3304      	adds	r3, #4
 8001e06:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 8001e08:	69bb      	ldr	r3, [r7, #24]
 8001e0a:	693a      	ldr	r2, [r7, #16]
 8001e0c:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8001e0e:	69bb      	ldr	r3, [r7, #24]
 8001e10:	3304      	adds	r3, #4
 8001e12:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16U]; ByteCounter += 4U)
 8001e14:	2300      	movs	r3, #0
 8001e16:	617b      	str	r3, [r7, #20]
 8001e18:	e020      	b.n	8001e5c <FDCAN_CopyMessageToRAM+0xd4>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8001e1a:	697b      	ldr	r3, [r7, #20]
 8001e1c:	3303      	adds	r3, #3
 8001e1e:	687a      	ldr	r2, [r7, #4]
 8001e20:	4413      	add	r3, r2
 8001e22:	781b      	ldrb	r3, [r3, #0]
 8001e24:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8001e26:	697b      	ldr	r3, [r7, #20]
 8001e28:	3302      	adds	r3, #2
 8001e2a:	6879      	ldr	r1, [r7, #4]
 8001e2c:	440b      	add	r3, r1
 8001e2e:	781b      	ldrb	r3, [r3, #0]
 8001e30:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8001e32:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8001e34:	697b      	ldr	r3, [r7, #20]
 8001e36:	3301      	adds	r3, #1
 8001e38:	6879      	ldr	r1, [r7, #4]
 8001e3a:	440b      	add	r3, r1
 8001e3c:	781b      	ldrb	r3, [r3, #0]
 8001e3e:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8001e40:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 8001e42:	6879      	ldr	r1, [r7, #4]
 8001e44:	697a      	ldr	r2, [r7, #20]
 8001e46:	440a      	add	r2, r1
 8001e48:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8001e4a:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8001e4c:	69bb      	ldr	r3, [r7, #24]
 8001e4e:	601a      	str	r2, [r3, #0]
    TxAddress++;
 8001e50:	69bb      	ldr	r3, [r7, #24]
 8001e52:	3304      	adds	r3, #4
 8001e54:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16U]; ByteCounter += 4U)
 8001e56:	697b      	ldr	r3, [r7, #20]
 8001e58:	3304      	adds	r3, #4
 8001e5a:	617b      	str	r3, [r7, #20]
 8001e5c:	68bb      	ldr	r3, [r7, #8]
 8001e5e:	68db      	ldr	r3, [r3, #12]
 8001e60:	0c1b      	lsrs	r3, r3, #16
 8001e62:	4a06      	ldr	r2, [pc, #24]	; (8001e7c <FDCAN_CopyMessageToRAM+0xf4>)
 8001e64:	5cd3      	ldrb	r3, [r2, r3]
 8001e66:	461a      	mov	r2, r3
 8001e68:	697b      	ldr	r3, [r7, #20]
 8001e6a:	4293      	cmp	r3, r2
 8001e6c:	d3d5      	bcc.n	8001e1a <FDCAN_CopyMessageToRAM+0x92>
  }
}
 8001e6e:	bf00      	nop
 8001e70:	bf00      	nop
 8001e72:	3724      	adds	r7, #36	; 0x24
 8001e74:	46bd      	mov	sp, r7
 8001e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7a:	4770      	bx	lr
 8001e7c:	0800a0c0 	.word	0x0800a0c0

08001e80 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e80:	b480      	push	{r7}
 8001e82:	b087      	sub	sp, #28
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
 8001e88:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001e8e:	e15a      	b.n	8002146 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001e90:	683b      	ldr	r3, [r7, #0]
 8001e92:	681a      	ldr	r2, [r3, #0]
 8001e94:	2101      	movs	r1, #1
 8001e96:	697b      	ldr	r3, [r7, #20]
 8001e98:	fa01 f303 	lsl.w	r3, r1, r3
 8001e9c:	4013      	ands	r3, r2
 8001e9e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	f000 814c 	beq.w	8002140 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001ea8:	683b      	ldr	r3, [r7, #0]
 8001eaa:	685b      	ldr	r3, [r3, #4]
 8001eac:	f003 0303 	and.w	r3, r3, #3
 8001eb0:	2b01      	cmp	r3, #1
 8001eb2:	d005      	beq.n	8001ec0 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001eb4:	683b      	ldr	r3, [r7, #0]
 8001eb6:	685b      	ldr	r3, [r3, #4]
 8001eb8:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001ebc:	2b02      	cmp	r3, #2
 8001ebe:	d130      	bne.n	8001f22 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	689b      	ldr	r3, [r3, #8]
 8001ec4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001ec6:	697b      	ldr	r3, [r7, #20]
 8001ec8:	005b      	lsls	r3, r3, #1
 8001eca:	2203      	movs	r2, #3
 8001ecc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ed0:	43db      	mvns	r3, r3
 8001ed2:	693a      	ldr	r2, [r7, #16]
 8001ed4:	4013      	ands	r3, r2
 8001ed6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001ed8:	683b      	ldr	r3, [r7, #0]
 8001eda:	68da      	ldr	r2, [r3, #12]
 8001edc:	697b      	ldr	r3, [r7, #20]
 8001ede:	005b      	lsls	r3, r3, #1
 8001ee0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ee4:	693a      	ldr	r2, [r7, #16]
 8001ee6:	4313      	orrs	r3, r2
 8001ee8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	693a      	ldr	r2, [r7, #16]
 8001eee:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	685b      	ldr	r3, [r3, #4]
 8001ef4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001ef6:	2201      	movs	r2, #1
 8001ef8:	697b      	ldr	r3, [r7, #20]
 8001efa:	fa02 f303 	lsl.w	r3, r2, r3
 8001efe:	43db      	mvns	r3, r3
 8001f00:	693a      	ldr	r2, [r7, #16]
 8001f02:	4013      	ands	r3, r2
 8001f04:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001f06:	683b      	ldr	r3, [r7, #0]
 8001f08:	685b      	ldr	r3, [r3, #4]
 8001f0a:	091b      	lsrs	r3, r3, #4
 8001f0c:	f003 0201 	and.w	r2, r3, #1
 8001f10:	697b      	ldr	r3, [r7, #20]
 8001f12:	fa02 f303 	lsl.w	r3, r2, r3
 8001f16:	693a      	ldr	r2, [r7, #16]
 8001f18:	4313      	orrs	r3, r2
 8001f1a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	693a      	ldr	r2, [r7, #16]
 8001f20:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001f22:	683b      	ldr	r3, [r7, #0]
 8001f24:	685b      	ldr	r3, [r3, #4]
 8001f26:	f003 0303 	and.w	r3, r3, #3
 8001f2a:	2b03      	cmp	r3, #3
 8001f2c:	d017      	beq.n	8001f5e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	68db      	ldr	r3, [r3, #12]
 8001f32:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001f34:	697b      	ldr	r3, [r7, #20]
 8001f36:	005b      	lsls	r3, r3, #1
 8001f38:	2203      	movs	r2, #3
 8001f3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f3e:	43db      	mvns	r3, r3
 8001f40:	693a      	ldr	r2, [r7, #16]
 8001f42:	4013      	ands	r3, r2
 8001f44:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001f46:	683b      	ldr	r3, [r7, #0]
 8001f48:	689a      	ldr	r2, [r3, #8]
 8001f4a:	697b      	ldr	r3, [r7, #20]
 8001f4c:	005b      	lsls	r3, r3, #1
 8001f4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f52:	693a      	ldr	r2, [r7, #16]
 8001f54:	4313      	orrs	r3, r2
 8001f56:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	693a      	ldr	r2, [r7, #16]
 8001f5c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f5e:	683b      	ldr	r3, [r7, #0]
 8001f60:	685b      	ldr	r3, [r3, #4]
 8001f62:	f003 0303 	and.w	r3, r3, #3
 8001f66:	2b02      	cmp	r3, #2
 8001f68:	d123      	bne.n	8001fb2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001f6a:	697b      	ldr	r3, [r7, #20]
 8001f6c:	08da      	lsrs	r2, r3, #3
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	3208      	adds	r2, #8
 8001f72:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f76:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001f78:	697b      	ldr	r3, [r7, #20]
 8001f7a:	f003 0307 	and.w	r3, r3, #7
 8001f7e:	009b      	lsls	r3, r3, #2
 8001f80:	220f      	movs	r2, #15
 8001f82:	fa02 f303 	lsl.w	r3, r2, r3
 8001f86:	43db      	mvns	r3, r3
 8001f88:	693a      	ldr	r2, [r7, #16]
 8001f8a:	4013      	ands	r3, r2
 8001f8c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001f8e:	683b      	ldr	r3, [r7, #0]
 8001f90:	691a      	ldr	r2, [r3, #16]
 8001f92:	697b      	ldr	r3, [r7, #20]
 8001f94:	f003 0307 	and.w	r3, r3, #7
 8001f98:	009b      	lsls	r3, r3, #2
 8001f9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f9e:	693a      	ldr	r2, [r7, #16]
 8001fa0:	4313      	orrs	r3, r2
 8001fa2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001fa4:	697b      	ldr	r3, [r7, #20]
 8001fa6:	08da      	lsrs	r2, r3, #3
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	3208      	adds	r2, #8
 8001fac:	6939      	ldr	r1, [r7, #16]
 8001fae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001fb8:	697b      	ldr	r3, [r7, #20]
 8001fba:	005b      	lsls	r3, r3, #1
 8001fbc:	2203      	movs	r2, #3
 8001fbe:	fa02 f303 	lsl.w	r3, r2, r3
 8001fc2:	43db      	mvns	r3, r3
 8001fc4:	693a      	ldr	r2, [r7, #16]
 8001fc6:	4013      	ands	r3, r2
 8001fc8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001fca:	683b      	ldr	r3, [r7, #0]
 8001fcc:	685b      	ldr	r3, [r3, #4]
 8001fce:	f003 0203 	and.w	r2, r3, #3
 8001fd2:	697b      	ldr	r3, [r7, #20]
 8001fd4:	005b      	lsls	r3, r3, #1
 8001fd6:	fa02 f303 	lsl.w	r3, r2, r3
 8001fda:	693a      	ldr	r2, [r7, #16]
 8001fdc:	4313      	orrs	r3, r2
 8001fde:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	693a      	ldr	r2, [r7, #16]
 8001fe4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001fe6:	683b      	ldr	r3, [r7, #0]
 8001fe8:	685b      	ldr	r3, [r3, #4]
 8001fea:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	f000 80a6 	beq.w	8002140 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ff4:	4b5b      	ldr	r3, [pc, #364]	; (8002164 <HAL_GPIO_Init+0x2e4>)
 8001ff6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ff8:	4a5a      	ldr	r2, [pc, #360]	; (8002164 <HAL_GPIO_Init+0x2e4>)
 8001ffa:	f043 0301 	orr.w	r3, r3, #1
 8001ffe:	6613      	str	r3, [r2, #96]	; 0x60
 8002000:	4b58      	ldr	r3, [pc, #352]	; (8002164 <HAL_GPIO_Init+0x2e4>)
 8002002:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002004:	f003 0301 	and.w	r3, r3, #1
 8002008:	60bb      	str	r3, [r7, #8]
 800200a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 800200c:	4a56      	ldr	r2, [pc, #344]	; (8002168 <HAL_GPIO_Init+0x2e8>)
 800200e:	697b      	ldr	r3, [r7, #20]
 8002010:	089b      	lsrs	r3, r3, #2
 8002012:	3302      	adds	r3, #2
 8002014:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002018:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800201a:	697b      	ldr	r3, [r7, #20]
 800201c:	f003 0303 	and.w	r3, r3, #3
 8002020:	009b      	lsls	r3, r3, #2
 8002022:	220f      	movs	r2, #15
 8002024:	fa02 f303 	lsl.w	r3, r2, r3
 8002028:	43db      	mvns	r3, r3
 800202a:	693a      	ldr	r2, [r7, #16]
 800202c:	4013      	ands	r3, r2
 800202e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002036:	d01f      	beq.n	8002078 <HAL_GPIO_Init+0x1f8>
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	4a4c      	ldr	r2, [pc, #304]	; (800216c <HAL_GPIO_Init+0x2ec>)
 800203c:	4293      	cmp	r3, r2
 800203e:	d019      	beq.n	8002074 <HAL_GPIO_Init+0x1f4>
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	4a4b      	ldr	r2, [pc, #300]	; (8002170 <HAL_GPIO_Init+0x2f0>)
 8002044:	4293      	cmp	r3, r2
 8002046:	d013      	beq.n	8002070 <HAL_GPIO_Init+0x1f0>
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	4a4a      	ldr	r2, [pc, #296]	; (8002174 <HAL_GPIO_Init+0x2f4>)
 800204c:	4293      	cmp	r3, r2
 800204e:	d00d      	beq.n	800206c <HAL_GPIO_Init+0x1ec>
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	4a49      	ldr	r2, [pc, #292]	; (8002178 <HAL_GPIO_Init+0x2f8>)
 8002054:	4293      	cmp	r3, r2
 8002056:	d007      	beq.n	8002068 <HAL_GPIO_Init+0x1e8>
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	4a48      	ldr	r2, [pc, #288]	; (800217c <HAL_GPIO_Init+0x2fc>)
 800205c:	4293      	cmp	r3, r2
 800205e:	d101      	bne.n	8002064 <HAL_GPIO_Init+0x1e4>
 8002060:	2305      	movs	r3, #5
 8002062:	e00a      	b.n	800207a <HAL_GPIO_Init+0x1fa>
 8002064:	2306      	movs	r3, #6
 8002066:	e008      	b.n	800207a <HAL_GPIO_Init+0x1fa>
 8002068:	2304      	movs	r3, #4
 800206a:	e006      	b.n	800207a <HAL_GPIO_Init+0x1fa>
 800206c:	2303      	movs	r3, #3
 800206e:	e004      	b.n	800207a <HAL_GPIO_Init+0x1fa>
 8002070:	2302      	movs	r3, #2
 8002072:	e002      	b.n	800207a <HAL_GPIO_Init+0x1fa>
 8002074:	2301      	movs	r3, #1
 8002076:	e000      	b.n	800207a <HAL_GPIO_Init+0x1fa>
 8002078:	2300      	movs	r3, #0
 800207a:	697a      	ldr	r2, [r7, #20]
 800207c:	f002 0203 	and.w	r2, r2, #3
 8002080:	0092      	lsls	r2, r2, #2
 8002082:	4093      	lsls	r3, r2
 8002084:	693a      	ldr	r2, [r7, #16]
 8002086:	4313      	orrs	r3, r2
 8002088:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800208a:	4937      	ldr	r1, [pc, #220]	; (8002168 <HAL_GPIO_Init+0x2e8>)
 800208c:	697b      	ldr	r3, [r7, #20]
 800208e:	089b      	lsrs	r3, r3, #2
 8002090:	3302      	adds	r3, #2
 8002092:	693a      	ldr	r2, [r7, #16]
 8002094:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002098:	4b39      	ldr	r3, [pc, #228]	; (8002180 <HAL_GPIO_Init+0x300>)
 800209a:	689b      	ldr	r3, [r3, #8]
 800209c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	43db      	mvns	r3, r3
 80020a2:	693a      	ldr	r2, [r7, #16]
 80020a4:	4013      	ands	r3, r2
 80020a6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80020a8:	683b      	ldr	r3, [r7, #0]
 80020aa:	685b      	ldr	r3, [r3, #4]
 80020ac:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d003      	beq.n	80020bc <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80020b4:	693a      	ldr	r2, [r7, #16]
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	4313      	orrs	r3, r2
 80020ba:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80020bc:	4a30      	ldr	r2, [pc, #192]	; (8002180 <HAL_GPIO_Init+0x300>)
 80020be:	693b      	ldr	r3, [r7, #16]
 80020c0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80020c2:	4b2f      	ldr	r3, [pc, #188]	; (8002180 <HAL_GPIO_Init+0x300>)
 80020c4:	68db      	ldr	r3, [r3, #12]
 80020c6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	43db      	mvns	r3, r3
 80020cc:	693a      	ldr	r2, [r7, #16]
 80020ce:	4013      	ands	r3, r2
 80020d0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80020d2:	683b      	ldr	r3, [r7, #0]
 80020d4:	685b      	ldr	r3, [r3, #4]
 80020d6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d003      	beq.n	80020e6 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80020de:	693a      	ldr	r2, [r7, #16]
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	4313      	orrs	r3, r2
 80020e4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80020e6:	4a26      	ldr	r2, [pc, #152]	; (8002180 <HAL_GPIO_Init+0x300>)
 80020e8:	693b      	ldr	r3, [r7, #16]
 80020ea:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80020ec:	4b24      	ldr	r3, [pc, #144]	; (8002180 <HAL_GPIO_Init+0x300>)
 80020ee:	685b      	ldr	r3, [r3, #4]
 80020f0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	43db      	mvns	r3, r3
 80020f6:	693a      	ldr	r2, [r7, #16]
 80020f8:	4013      	ands	r3, r2
 80020fa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80020fc:	683b      	ldr	r3, [r7, #0]
 80020fe:	685b      	ldr	r3, [r3, #4]
 8002100:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002104:	2b00      	cmp	r3, #0
 8002106:	d003      	beq.n	8002110 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8002108:	693a      	ldr	r2, [r7, #16]
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	4313      	orrs	r3, r2
 800210e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002110:	4a1b      	ldr	r2, [pc, #108]	; (8002180 <HAL_GPIO_Init+0x300>)
 8002112:	693b      	ldr	r3, [r7, #16]
 8002114:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002116:	4b1a      	ldr	r3, [pc, #104]	; (8002180 <HAL_GPIO_Init+0x300>)
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	43db      	mvns	r3, r3
 8002120:	693a      	ldr	r2, [r7, #16]
 8002122:	4013      	ands	r3, r2
 8002124:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002126:	683b      	ldr	r3, [r7, #0]
 8002128:	685b      	ldr	r3, [r3, #4]
 800212a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800212e:	2b00      	cmp	r3, #0
 8002130:	d003      	beq.n	800213a <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8002132:	693a      	ldr	r2, [r7, #16]
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	4313      	orrs	r3, r2
 8002138:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800213a:	4a11      	ldr	r2, [pc, #68]	; (8002180 <HAL_GPIO_Init+0x300>)
 800213c:	693b      	ldr	r3, [r7, #16]
 800213e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002140:	697b      	ldr	r3, [r7, #20]
 8002142:	3301      	adds	r3, #1
 8002144:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002146:	683b      	ldr	r3, [r7, #0]
 8002148:	681a      	ldr	r2, [r3, #0]
 800214a:	697b      	ldr	r3, [r7, #20]
 800214c:	fa22 f303 	lsr.w	r3, r2, r3
 8002150:	2b00      	cmp	r3, #0
 8002152:	f47f ae9d 	bne.w	8001e90 <HAL_GPIO_Init+0x10>
  }
}
 8002156:	bf00      	nop
 8002158:	bf00      	nop
 800215a:	371c      	adds	r7, #28
 800215c:	46bd      	mov	sp, r7
 800215e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002162:	4770      	bx	lr
 8002164:	40021000 	.word	0x40021000
 8002168:	40010000 	.word	0x40010000
 800216c:	48000400 	.word	0x48000400
 8002170:	48000800 	.word	0x48000800
 8002174:	48000c00 	.word	0x48000c00
 8002178:	48001000 	.word	0x48001000
 800217c:	48001400 	.word	0x48001400
 8002180:	40010400 	.word	0x40010400

08002184 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002184:	b480      	push	{r7}
 8002186:	b083      	sub	sp, #12
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
 800218c:	460b      	mov	r3, r1
 800218e:	807b      	strh	r3, [r7, #2]
 8002190:	4613      	mov	r3, r2
 8002192:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002194:	787b      	ldrb	r3, [r7, #1]
 8002196:	2b00      	cmp	r3, #0
 8002198:	d003      	beq.n	80021a2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800219a:	887a      	ldrh	r2, [r7, #2]
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80021a0:	e002      	b.n	80021a8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80021a2:	887a      	ldrh	r2, [r7, #2]
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80021a8:	bf00      	nop
 80021aa:	370c      	adds	r7, #12
 80021ac:	46bd      	mov	sp, r7
 80021ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b2:	4770      	bx	lr

080021b4 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80021b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80021b6:	b08b      	sub	sp, #44	; 0x2c
 80021b8:	af06      	add	r7, sp, #24
 80021ba:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d101      	bne.n	80021c6 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80021c2:	2301      	movs	r3, #1
 80021c4:	e0d7      	b.n	8002376 <HAL_PCD_Init+0x1c2>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 80021cc:	b2db      	uxtb	r3, r3
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d106      	bne.n	80021e0 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	2200      	movs	r2, #0
 80021d6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80021da:	6878      	ldr	r0, [r7, #4]
 80021dc:	f007 fbf6 	bl	80099cc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	2203      	movs	r2, #3
 80021e4:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	4618      	mov	r0, r3
 80021ee:	f003 fac8 	bl	8005782 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80021f2:	2300      	movs	r3, #0
 80021f4:	73fb      	strb	r3, [r7, #15]
 80021f6:	e04c      	b.n	8002292 <HAL_PCD_Init+0xde>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80021f8:	7bfb      	ldrb	r3, [r7, #15]
 80021fa:	6879      	ldr	r1, [r7, #4]
 80021fc:	1c5a      	adds	r2, r3, #1
 80021fe:	4613      	mov	r3, r2
 8002200:	009b      	lsls	r3, r3, #2
 8002202:	4413      	add	r3, r2
 8002204:	00db      	lsls	r3, r3, #3
 8002206:	440b      	add	r3, r1
 8002208:	3301      	adds	r3, #1
 800220a:	2201      	movs	r2, #1
 800220c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800220e:	7bfb      	ldrb	r3, [r7, #15]
 8002210:	6879      	ldr	r1, [r7, #4]
 8002212:	1c5a      	adds	r2, r3, #1
 8002214:	4613      	mov	r3, r2
 8002216:	009b      	lsls	r3, r3, #2
 8002218:	4413      	add	r3, r2
 800221a:	00db      	lsls	r3, r3, #3
 800221c:	440b      	add	r3, r1
 800221e:	7bfa      	ldrb	r2, [r7, #15]
 8002220:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002222:	7bfa      	ldrb	r2, [r7, #15]
 8002224:	7bfb      	ldrb	r3, [r7, #15]
 8002226:	b298      	uxth	r0, r3
 8002228:	6879      	ldr	r1, [r7, #4]
 800222a:	4613      	mov	r3, r2
 800222c:	009b      	lsls	r3, r3, #2
 800222e:	4413      	add	r3, r2
 8002230:	00db      	lsls	r3, r3, #3
 8002232:	440b      	add	r3, r1
 8002234:	3336      	adds	r3, #54	; 0x36
 8002236:	4602      	mov	r2, r0
 8002238:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800223a:	7bfb      	ldrb	r3, [r7, #15]
 800223c:	6879      	ldr	r1, [r7, #4]
 800223e:	1c5a      	adds	r2, r3, #1
 8002240:	4613      	mov	r3, r2
 8002242:	009b      	lsls	r3, r3, #2
 8002244:	4413      	add	r3, r2
 8002246:	00db      	lsls	r3, r3, #3
 8002248:	440b      	add	r3, r1
 800224a:	3303      	adds	r3, #3
 800224c:	2200      	movs	r2, #0
 800224e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002250:	7bfa      	ldrb	r2, [r7, #15]
 8002252:	6879      	ldr	r1, [r7, #4]
 8002254:	4613      	mov	r3, r2
 8002256:	009b      	lsls	r3, r3, #2
 8002258:	4413      	add	r3, r2
 800225a:	00db      	lsls	r3, r3, #3
 800225c:	440b      	add	r3, r1
 800225e:	3338      	adds	r3, #56	; 0x38
 8002260:	2200      	movs	r2, #0
 8002262:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002264:	7bfa      	ldrb	r2, [r7, #15]
 8002266:	6879      	ldr	r1, [r7, #4]
 8002268:	4613      	mov	r3, r2
 800226a:	009b      	lsls	r3, r3, #2
 800226c:	4413      	add	r3, r2
 800226e:	00db      	lsls	r3, r3, #3
 8002270:	440b      	add	r3, r1
 8002272:	333c      	adds	r3, #60	; 0x3c
 8002274:	2200      	movs	r2, #0
 8002276:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002278:	7bfa      	ldrb	r2, [r7, #15]
 800227a:	6879      	ldr	r1, [r7, #4]
 800227c:	4613      	mov	r3, r2
 800227e:	009b      	lsls	r3, r3, #2
 8002280:	4413      	add	r3, r2
 8002282:	00db      	lsls	r3, r3, #3
 8002284:	440b      	add	r3, r1
 8002286:	3340      	adds	r3, #64	; 0x40
 8002288:	2200      	movs	r2, #0
 800228a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800228c:	7bfb      	ldrb	r3, [r7, #15]
 800228e:	3301      	adds	r3, #1
 8002290:	73fb      	strb	r3, [r7, #15]
 8002292:	7bfa      	ldrb	r2, [r7, #15]
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	685b      	ldr	r3, [r3, #4]
 8002298:	429a      	cmp	r2, r3
 800229a:	d3ad      	bcc.n	80021f8 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800229c:	2300      	movs	r3, #0
 800229e:	73fb      	strb	r3, [r7, #15]
 80022a0:	e044      	b.n	800232c <HAL_PCD_Init+0x178>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80022a2:	7bfa      	ldrb	r2, [r7, #15]
 80022a4:	6879      	ldr	r1, [r7, #4]
 80022a6:	4613      	mov	r3, r2
 80022a8:	009b      	lsls	r3, r3, #2
 80022aa:	4413      	add	r3, r2
 80022ac:	00db      	lsls	r3, r3, #3
 80022ae:	440b      	add	r3, r1
 80022b0:	f203 1369 	addw	r3, r3, #361	; 0x169
 80022b4:	2200      	movs	r2, #0
 80022b6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80022b8:	7bfa      	ldrb	r2, [r7, #15]
 80022ba:	6879      	ldr	r1, [r7, #4]
 80022bc:	4613      	mov	r3, r2
 80022be:	009b      	lsls	r3, r3, #2
 80022c0:	4413      	add	r3, r2
 80022c2:	00db      	lsls	r3, r3, #3
 80022c4:	440b      	add	r3, r1
 80022c6:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80022ca:	7bfa      	ldrb	r2, [r7, #15]
 80022cc:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80022ce:	7bfa      	ldrb	r2, [r7, #15]
 80022d0:	6879      	ldr	r1, [r7, #4]
 80022d2:	4613      	mov	r3, r2
 80022d4:	009b      	lsls	r3, r3, #2
 80022d6:	4413      	add	r3, r2
 80022d8:	00db      	lsls	r3, r3, #3
 80022da:	440b      	add	r3, r1
 80022dc:	f203 136b 	addw	r3, r3, #363	; 0x16b
 80022e0:	2200      	movs	r2, #0
 80022e2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80022e4:	7bfa      	ldrb	r2, [r7, #15]
 80022e6:	6879      	ldr	r1, [r7, #4]
 80022e8:	4613      	mov	r3, r2
 80022ea:	009b      	lsls	r3, r3, #2
 80022ec:	4413      	add	r3, r2
 80022ee:	00db      	lsls	r3, r3, #3
 80022f0:	440b      	add	r3, r1
 80022f2:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 80022f6:	2200      	movs	r2, #0
 80022f8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80022fa:	7bfa      	ldrb	r2, [r7, #15]
 80022fc:	6879      	ldr	r1, [r7, #4]
 80022fe:	4613      	mov	r3, r2
 8002300:	009b      	lsls	r3, r3, #2
 8002302:	4413      	add	r3, r2
 8002304:	00db      	lsls	r3, r3, #3
 8002306:	440b      	add	r3, r1
 8002308:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800230c:	2200      	movs	r2, #0
 800230e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002310:	7bfa      	ldrb	r2, [r7, #15]
 8002312:	6879      	ldr	r1, [r7, #4]
 8002314:	4613      	mov	r3, r2
 8002316:	009b      	lsls	r3, r3, #2
 8002318:	4413      	add	r3, r2
 800231a:	00db      	lsls	r3, r3, #3
 800231c:	440b      	add	r3, r1
 800231e:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8002322:	2200      	movs	r2, #0
 8002324:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002326:	7bfb      	ldrb	r3, [r7, #15]
 8002328:	3301      	adds	r3, #1
 800232a:	73fb      	strb	r3, [r7, #15]
 800232c:	7bfa      	ldrb	r2, [r7, #15]
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	685b      	ldr	r3, [r3, #4]
 8002332:	429a      	cmp	r2, r3
 8002334:	d3b5      	bcc.n	80022a2 <HAL_PCD_Init+0xee>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	603b      	str	r3, [r7, #0]
 800233c:	687e      	ldr	r6, [r7, #4]
 800233e:	466d      	mov	r5, sp
 8002340:	f106 0410 	add.w	r4, r6, #16
 8002344:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002346:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002348:	6823      	ldr	r3, [r4, #0]
 800234a:	602b      	str	r3, [r5, #0]
 800234c:	1d33      	adds	r3, r6, #4
 800234e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002350:	6838      	ldr	r0, [r7, #0]
 8002352:	f003 fa31 	bl	80057b8 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	2200      	movs	r2, #0
 800235a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	2201      	movs	r2, #1
 8002362:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	69db      	ldr	r3, [r3, #28]
 800236a:	2b01      	cmp	r3, #1
 800236c:	d102      	bne.n	8002374 <HAL_PCD_Init+0x1c0>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800236e:	6878      	ldr	r0, [r7, #4]
 8002370:	f001 fc29 	bl	8003bc6 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8002374:	2300      	movs	r3, #0
}
 8002376:	4618      	mov	r0, r3
 8002378:	3714      	adds	r7, #20
 800237a:	46bd      	mov	sp, r7
 800237c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800237e <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800237e:	b580      	push	{r7, lr}
 8002380:	b082      	sub	sp, #8
 8002382:	af00      	add	r7, sp, #0
 8002384:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800238c:	2b01      	cmp	r3, #1
 800238e:	d101      	bne.n	8002394 <HAL_PCD_Start+0x16>
 8002390:	2302      	movs	r3, #2
 8002392:	e012      	b.n	80023ba <HAL_PCD_Start+0x3c>
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	2201      	movs	r2, #1
 8002398:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	4618      	mov	r0, r3
 80023a2:	f003 f9d7 	bl	8005754 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	4618      	mov	r0, r3
 80023ac:	f005 fbf0 	bl	8007b90 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	2200      	movs	r2, #0
 80023b4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80023b8:	2300      	movs	r3, #0
}
 80023ba:	4618      	mov	r0, r3
 80023bc:	3708      	adds	r7, #8
 80023be:	46bd      	mov	sp, r7
 80023c0:	bd80      	pop	{r7, pc}

080023c2 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80023c2:	b580      	push	{r7, lr}
 80023c4:	b084      	sub	sp, #16
 80023c6:	af00      	add	r7, sp, #0
 80023c8:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	4618      	mov	r0, r3
 80023d0:	f005 fbf5 	bl	8007bbe <USB_ReadInterrupts>
 80023d4:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d003      	beq.n	80023e8 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 80023e0:	6878      	ldr	r0, [r7, #4]
 80023e2:	f000 fb26 	bl	8002a32 <PCD_EP_ISR_Handler>

    return;
 80023e6:	e110      	b.n	800260a <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d013      	beq.n	800241a <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80023fa:	b29a      	uxth	r2, r3
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002404:	b292      	uxth	r2, r2
 8002406:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 800240a:	6878      	ldr	r0, [r7, #4]
 800240c:	f007 fb6f 	bl	8009aee <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8002410:	2100      	movs	r1, #0
 8002412:	6878      	ldr	r0, [r7, #4]
 8002414:	f000 f8fc 	bl	8002610 <HAL_PCD_SetAddress>

    return;
 8002418:	e0f7      	b.n	800260a <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002420:	2b00      	cmp	r3, #0
 8002422:	d00c      	beq.n	800243e <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800242c:	b29a      	uxth	r2, r3
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002436:	b292      	uxth	r2, r2
 8002438:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 800243c:	e0e5      	b.n	800260a <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002444:	2b00      	cmp	r3, #0
 8002446:	d00c      	beq.n	8002462 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002450:	b29a      	uxth	r2, r3
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800245a:	b292      	uxth	r2, r2
 800245c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8002460:	e0d3      	b.n	800260a <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002468:	2b00      	cmp	r3, #0
 800246a:	d034      	beq.n	80024d6 <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002474:	b29a      	uxth	r2, r3
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f022 0204 	bic.w	r2, r2, #4
 800247e:	b292      	uxth	r2, r2
 8002480:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800248c:	b29a      	uxth	r2, r3
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f022 0208 	bic.w	r2, r2, #8
 8002496:	b292      	uxth	r2, r2
 8002498:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (hpcd->LPM_State == LPM_L1)
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 80024a2:	2b01      	cmp	r3, #1
 80024a4:	d107      	bne.n	80024b6 <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	2200      	movs	r2, #0
 80024aa:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80024ae:	2100      	movs	r1, #0
 80024b0:	6878      	ldr	r0, [r7, #4]
 80024b2:	f007 fd11 	bl	8009ed8 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 80024b6:	6878      	ldr	r0, [r7, #4]
 80024b8:	f007 fb52 	bl	8009b60 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80024c4:	b29a      	uxth	r2, r3
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80024ce:	b292      	uxth	r2, r2
 80024d0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 80024d4:	e099      	b.n	800260a <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d027      	beq.n	8002530 <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80024e8:	b29a      	uxth	r2, r3
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f042 0208 	orr.w	r2, r2, #8
 80024f2:	b292      	uxth	r2, r2
 80024f4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002500:	b29a      	uxth	r2, r3
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800250a:	b292      	uxth	r2, r2
 800250c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002518:	b29a      	uxth	r2, r3
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f042 0204 	orr.w	r2, r2, #4
 8002522:	b292      	uxth	r2, r2
 8002524:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8002528:	6878      	ldr	r0, [r7, #4]
 800252a:	f007 faff 	bl	8009b2c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 800252e:	e06c      	b.n	800260a <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002536:	2b00      	cmp	r3, #0
 8002538:	d040      	beq.n	80025bc <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002542:	b29a      	uxth	r2, r3
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800254c:	b292      	uxth	r2, r2
 800254e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 8002558:	2b00      	cmp	r3, #0
 800255a:	d12b      	bne.n	80025b4 <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002564:	b29a      	uxth	r2, r3
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	f042 0204 	orr.w	r2, r2, #4
 800256e:	b292      	uxth	r2, r2
 8002570:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800257c:	b29a      	uxth	r2, r3
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f042 0208 	orr.w	r2, r2, #8
 8002586:	b292      	uxth	r2, r2
 8002588:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      hpcd->LPM_State = LPM_L1;
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	2201      	movs	r2, #1
 8002590:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800259c:	b29b      	uxth	r3, r3
 800259e:	089b      	lsrs	r3, r3, #2
 80025a0:	f003 023c 	and.w	r2, r3, #60	; 0x3c
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	f8c3 22e4 	str.w	r2, [r3, #740]	; 0x2e4
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80025aa:	2101      	movs	r1, #1
 80025ac:	6878      	ldr	r0, [r7, #4]
 80025ae:	f007 fc93 	bl	8009ed8 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 80025b2:	e02a      	b.n	800260a <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 80025b4:	6878      	ldr	r0, [r7, #4]
 80025b6:	f007 fab9 	bl	8009b2c <HAL_PCD_SuspendCallback>
    return;
 80025ba:	e026      	b.n	800260a <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d00f      	beq.n	80025e6 <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80025ce:	b29a      	uxth	r2, r3
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80025d8:	b292      	uxth	r2, r2
 80025da:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 80025de:	6878      	ldr	r0, [r7, #4]
 80025e0:	f007 fa77 	bl	8009ad2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80025e4:	e011      	b.n	800260a <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d00c      	beq.n	800260a <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80025f8:	b29a      	uxth	r2, r3
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002602:	b292      	uxth	r2, r2
 8002604:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8002608:	bf00      	nop
  }
}
 800260a:	3710      	adds	r7, #16
 800260c:	46bd      	mov	sp, r7
 800260e:	bd80      	pop	{r7, pc}

08002610 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002610:	b580      	push	{r7, lr}
 8002612:	b082      	sub	sp, #8
 8002614:	af00      	add	r7, sp, #0
 8002616:	6078      	str	r0, [r7, #4]
 8002618:	460b      	mov	r3, r1
 800261a:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002622:	2b01      	cmp	r3, #1
 8002624:	d101      	bne.n	800262a <HAL_PCD_SetAddress+0x1a>
 8002626:	2302      	movs	r3, #2
 8002628:	e013      	b.n	8002652 <HAL_PCD_SetAddress+0x42>
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	2201      	movs	r2, #1
 800262e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	78fa      	ldrb	r2, [r7, #3]
 8002636:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	78fa      	ldrb	r2, [r7, #3]
 8002640:	4611      	mov	r1, r2
 8002642:	4618      	mov	r0, r3
 8002644:	f005 fa90 	bl	8007b68 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	2200      	movs	r2, #0
 800264c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002650:	2300      	movs	r3, #0
}
 8002652:	4618      	mov	r0, r3
 8002654:	3708      	adds	r7, #8
 8002656:	46bd      	mov	sp, r7
 8002658:	bd80      	pop	{r7, pc}

0800265a <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800265a:	b580      	push	{r7, lr}
 800265c:	b084      	sub	sp, #16
 800265e:	af00      	add	r7, sp, #0
 8002660:	6078      	str	r0, [r7, #4]
 8002662:	4608      	mov	r0, r1
 8002664:	4611      	mov	r1, r2
 8002666:	461a      	mov	r2, r3
 8002668:	4603      	mov	r3, r0
 800266a:	70fb      	strb	r3, [r7, #3]
 800266c:	460b      	mov	r3, r1
 800266e:	803b      	strh	r3, [r7, #0]
 8002670:	4613      	mov	r3, r2
 8002672:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002674:	2300      	movs	r3, #0
 8002676:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002678:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800267c:	2b00      	cmp	r3, #0
 800267e:	da0e      	bge.n	800269e <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002680:	78fb      	ldrb	r3, [r7, #3]
 8002682:	f003 0307 	and.w	r3, r3, #7
 8002686:	1c5a      	adds	r2, r3, #1
 8002688:	4613      	mov	r3, r2
 800268a:	009b      	lsls	r3, r3, #2
 800268c:	4413      	add	r3, r2
 800268e:	00db      	lsls	r3, r3, #3
 8002690:	687a      	ldr	r2, [r7, #4]
 8002692:	4413      	add	r3, r2
 8002694:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	2201      	movs	r2, #1
 800269a:	705a      	strb	r2, [r3, #1]
 800269c:	e00e      	b.n	80026bc <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800269e:	78fb      	ldrb	r3, [r7, #3]
 80026a0:	f003 0207 	and.w	r2, r3, #7
 80026a4:	4613      	mov	r3, r2
 80026a6:	009b      	lsls	r3, r3, #2
 80026a8:	4413      	add	r3, r2
 80026aa:	00db      	lsls	r3, r3, #3
 80026ac:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80026b0:	687a      	ldr	r2, [r7, #4]
 80026b2:	4413      	add	r3, r2
 80026b4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	2200      	movs	r2, #0
 80026ba:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80026bc:	78fb      	ldrb	r3, [r7, #3]
 80026be:	f003 0307 	and.w	r3, r3, #7
 80026c2:	b2da      	uxtb	r2, r3
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80026c8:	883a      	ldrh	r2, [r7, #0]
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	78ba      	ldrb	r2, [r7, #2]
 80026d2:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	785b      	ldrb	r3, [r3, #1]
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d004      	beq.n	80026e6 <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	781b      	ldrb	r3, [r3, #0]
 80026e0:	b29a      	uxth	r2, r3
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80026e6:	78bb      	ldrb	r3, [r7, #2]
 80026e8:	2b02      	cmp	r3, #2
 80026ea:	d102      	bne.n	80026f2 <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	2200      	movs	r2, #0
 80026f0:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80026f8:	2b01      	cmp	r3, #1
 80026fa:	d101      	bne.n	8002700 <HAL_PCD_EP_Open+0xa6>
 80026fc:	2302      	movs	r3, #2
 80026fe:	e00e      	b.n	800271e <HAL_PCD_EP_Open+0xc4>
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	2201      	movs	r2, #1
 8002704:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	68f9      	ldr	r1, [r7, #12]
 800270e:	4618      	mov	r0, r3
 8002710:	f003 f874 	bl	80057fc <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	2200      	movs	r2, #0
 8002718:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 800271c:	7afb      	ldrb	r3, [r7, #11]
}
 800271e:	4618      	mov	r0, r3
 8002720:	3710      	adds	r7, #16
 8002722:	46bd      	mov	sp, r7
 8002724:	bd80      	pop	{r7, pc}

08002726 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002726:	b580      	push	{r7, lr}
 8002728:	b084      	sub	sp, #16
 800272a:	af00      	add	r7, sp, #0
 800272c:	6078      	str	r0, [r7, #4]
 800272e:	460b      	mov	r3, r1
 8002730:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002732:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002736:	2b00      	cmp	r3, #0
 8002738:	da0e      	bge.n	8002758 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800273a:	78fb      	ldrb	r3, [r7, #3]
 800273c:	f003 0307 	and.w	r3, r3, #7
 8002740:	1c5a      	adds	r2, r3, #1
 8002742:	4613      	mov	r3, r2
 8002744:	009b      	lsls	r3, r3, #2
 8002746:	4413      	add	r3, r2
 8002748:	00db      	lsls	r3, r3, #3
 800274a:	687a      	ldr	r2, [r7, #4]
 800274c:	4413      	add	r3, r2
 800274e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	2201      	movs	r2, #1
 8002754:	705a      	strb	r2, [r3, #1]
 8002756:	e00e      	b.n	8002776 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002758:	78fb      	ldrb	r3, [r7, #3]
 800275a:	f003 0207 	and.w	r2, r3, #7
 800275e:	4613      	mov	r3, r2
 8002760:	009b      	lsls	r3, r3, #2
 8002762:	4413      	add	r3, r2
 8002764:	00db      	lsls	r3, r3, #3
 8002766:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800276a:	687a      	ldr	r2, [r7, #4]
 800276c:	4413      	add	r3, r2
 800276e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	2200      	movs	r2, #0
 8002774:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002776:	78fb      	ldrb	r3, [r7, #3]
 8002778:	f003 0307 	and.w	r3, r3, #7
 800277c:	b2da      	uxtb	r2, r3
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002788:	2b01      	cmp	r3, #1
 800278a:	d101      	bne.n	8002790 <HAL_PCD_EP_Close+0x6a>
 800278c:	2302      	movs	r3, #2
 800278e:	e00e      	b.n	80027ae <HAL_PCD_EP_Close+0x88>
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	2201      	movs	r2, #1
 8002794:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	68f9      	ldr	r1, [r7, #12]
 800279e:	4618      	mov	r0, r3
 80027a0:	f003 fbc0 	bl	8005f24 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	2200      	movs	r2, #0
 80027a8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 80027ac:	2300      	movs	r3, #0
}
 80027ae:	4618      	mov	r0, r3
 80027b0:	3710      	adds	r7, #16
 80027b2:	46bd      	mov	sp, r7
 80027b4:	bd80      	pop	{r7, pc}

080027b6 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80027b6:	b580      	push	{r7, lr}
 80027b8:	b086      	sub	sp, #24
 80027ba:	af00      	add	r7, sp, #0
 80027bc:	60f8      	str	r0, [r7, #12]
 80027be:	607a      	str	r2, [r7, #4]
 80027c0:	603b      	str	r3, [r7, #0]
 80027c2:	460b      	mov	r3, r1
 80027c4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80027c6:	7afb      	ldrb	r3, [r7, #11]
 80027c8:	f003 0207 	and.w	r2, r3, #7
 80027cc:	4613      	mov	r3, r2
 80027ce:	009b      	lsls	r3, r3, #2
 80027d0:	4413      	add	r3, r2
 80027d2:	00db      	lsls	r3, r3, #3
 80027d4:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80027d8:	68fa      	ldr	r2, [r7, #12]
 80027da:	4413      	add	r3, r2
 80027dc:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80027de:	697b      	ldr	r3, [r7, #20]
 80027e0:	687a      	ldr	r2, [r7, #4]
 80027e2:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80027e4:	697b      	ldr	r3, [r7, #20]
 80027e6:	683a      	ldr	r2, [r7, #0]
 80027e8:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80027ea:	697b      	ldr	r3, [r7, #20]
 80027ec:	2200      	movs	r2, #0
 80027ee:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 80027f0:	697b      	ldr	r3, [r7, #20]
 80027f2:	2200      	movs	r2, #0
 80027f4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80027f6:	7afb      	ldrb	r3, [r7, #11]
 80027f8:	f003 0307 	and.w	r3, r3, #7
 80027fc:	b2da      	uxtb	r2, r3
 80027fe:	697b      	ldr	r3, [r7, #20]
 8002800:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002802:	7afb      	ldrb	r3, [r7, #11]
 8002804:	f003 0307 	and.w	r3, r3, #7
 8002808:	2b00      	cmp	r3, #0
 800280a:	d106      	bne.n	800281a <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	6979      	ldr	r1, [r7, #20]
 8002812:	4618      	mov	r0, r3
 8002814:	f003 fd73 	bl	80062fe <USB_EPStartXfer>
 8002818:	e005      	b.n	8002826 <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	6979      	ldr	r1, [r7, #20]
 8002820:	4618      	mov	r0, r3
 8002822:	f003 fd6c 	bl	80062fe <USB_EPStartXfer>
  }

  return HAL_OK;
 8002826:	2300      	movs	r3, #0
}
 8002828:	4618      	mov	r0, r3
 800282a:	3718      	adds	r7, #24
 800282c:	46bd      	mov	sp, r7
 800282e:	bd80      	pop	{r7, pc}

08002830 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002830:	b480      	push	{r7}
 8002832:	b083      	sub	sp, #12
 8002834:	af00      	add	r7, sp, #0
 8002836:	6078      	str	r0, [r7, #4]
 8002838:	460b      	mov	r3, r1
 800283a:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800283c:	78fb      	ldrb	r3, [r7, #3]
 800283e:	f003 0207 	and.w	r2, r3, #7
 8002842:	6879      	ldr	r1, [r7, #4]
 8002844:	4613      	mov	r3, r2
 8002846:	009b      	lsls	r3, r3, #2
 8002848:	4413      	add	r3, r2
 800284a:	00db      	lsls	r3, r3, #3
 800284c:	440b      	add	r3, r1
 800284e:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8002852:	681b      	ldr	r3, [r3, #0]
}
 8002854:	4618      	mov	r0, r3
 8002856:	370c      	adds	r7, #12
 8002858:	46bd      	mov	sp, r7
 800285a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800285e:	4770      	bx	lr

08002860 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002860:	b580      	push	{r7, lr}
 8002862:	b086      	sub	sp, #24
 8002864:	af00      	add	r7, sp, #0
 8002866:	60f8      	str	r0, [r7, #12]
 8002868:	607a      	str	r2, [r7, #4]
 800286a:	603b      	str	r3, [r7, #0]
 800286c:	460b      	mov	r3, r1
 800286e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002870:	7afb      	ldrb	r3, [r7, #11]
 8002872:	f003 0307 	and.w	r3, r3, #7
 8002876:	1c5a      	adds	r2, r3, #1
 8002878:	4613      	mov	r3, r2
 800287a:	009b      	lsls	r3, r3, #2
 800287c:	4413      	add	r3, r2
 800287e:	00db      	lsls	r3, r3, #3
 8002880:	68fa      	ldr	r2, [r7, #12]
 8002882:	4413      	add	r3, r2
 8002884:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002886:	697b      	ldr	r3, [r7, #20]
 8002888:	687a      	ldr	r2, [r7, #4]
 800288a:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800288c:	697b      	ldr	r3, [r7, #20]
 800288e:	683a      	ldr	r2, [r7, #0]
 8002890:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8002892:	697b      	ldr	r3, [r7, #20]
 8002894:	2201      	movs	r2, #1
 8002896:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 800289a:	697b      	ldr	r3, [r7, #20]
 800289c:	683a      	ldr	r2, [r7, #0]
 800289e:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 80028a0:	697b      	ldr	r3, [r7, #20]
 80028a2:	2200      	movs	r2, #0
 80028a4:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 80028a6:	697b      	ldr	r3, [r7, #20]
 80028a8:	2201      	movs	r2, #1
 80028aa:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80028ac:	7afb      	ldrb	r3, [r7, #11]
 80028ae:	f003 0307 	and.w	r3, r3, #7
 80028b2:	b2da      	uxtb	r2, r3
 80028b4:	697b      	ldr	r3, [r7, #20]
 80028b6:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80028b8:	7afb      	ldrb	r3, [r7, #11]
 80028ba:	f003 0307 	and.w	r3, r3, #7
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d106      	bne.n	80028d0 <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	6979      	ldr	r1, [r7, #20]
 80028c8:	4618      	mov	r0, r3
 80028ca:	f003 fd18 	bl	80062fe <USB_EPStartXfer>
 80028ce:	e005      	b.n	80028dc <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	6979      	ldr	r1, [r7, #20]
 80028d6:	4618      	mov	r0, r3
 80028d8:	f003 fd11 	bl	80062fe <USB_EPStartXfer>
  }

  return HAL_OK;
 80028dc:	2300      	movs	r3, #0
}
 80028de:	4618      	mov	r0, r3
 80028e0:	3718      	adds	r7, #24
 80028e2:	46bd      	mov	sp, r7
 80028e4:	bd80      	pop	{r7, pc}

080028e6 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80028e6:	b580      	push	{r7, lr}
 80028e8:	b084      	sub	sp, #16
 80028ea:	af00      	add	r7, sp, #0
 80028ec:	6078      	str	r0, [r7, #4]
 80028ee:	460b      	mov	r3, r1
 80028f0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80028f2:	78fb      	ldrb	r3, [r7, #3]
 80028f4:	f003 0207 	and.w	r2, r3, #7
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	685b      	ldr	r3, [r3, #4]
 80028fc:	429a      	cmp	r2, r3
 80028fe:	d901      	bls.n	8002904 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002900:	2301      	movs	r3, #1
 8002902:	e03e      	b.n	8002982 <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002904:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002908:	2b00      	cmp	r3, #0
 800290a:	da0e      	bge.n	800292a <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800290c:	78fb      	ldrb	r3, [r7, #3]
 800290e:	f003 0307 	and.w	r3, r3, #7
 8002912:	1c5a      	adds	r2, r3, #1
 8002914:	4613      	mov	r3, r2
 8002916:	009b      	lsls	r3, r3, #2
 8002918:	4413      	add	r3, r2
 800291a:	00db      	lsls	r3, r3, #3
 800291c:	687a      	ldr	r2, [r7, #4]
 800291e:	4413      	add	r3, r2
 8002920:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	2201      	movs	r2, #1
 8002926:	705a      	strb	r2, [r3, #1]
 8002928:	e00c      	b.n	8002944 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800292a:	78fa      	ldrb	r2, [r7, #3]
 800292c:	4613      	mov	r3, r2
 800292e:	009b      	lsls	r3, r3, #2
 8002930:	4413      	add	r3, r2
 8002932:	00db      	lsls	r3, r3, #3
 8002934:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002938:	687a      	ldr	r2, [r7, #4]
 800293a:	4413      	add	r3, r2
 800293c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	2200      	movs	r2, #0
 8002942:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	2201      	movs	r2, #1
 8002948:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800294a:	78fb      	ldrb	r3, [r7, #3]
 800294c:	f003 0307 	and.w	r3, r3, #7
 8002950:	b2da      	uxtb	r2, r3
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800295c:	2b01      	cmp	r3, #1
 800295e:	d101      	bne.n	8002964 <HAL_PCD_EP_SetStall+0x7e>
 8002960:	2302      	movs	r3, #2
 8002962:	e00e      	b.n	8002982 <HAL_PCD_EP_SetStall+0x9c>
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	2201      	movs	r2, #1
 8002968:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	68f9      	ldr	r1, [r7, #12]
 8002972:	4618      	mov	r0, r3
 8002974:	f004 fff9 	bl	800796a <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	2200      	movs	r2, #0
 800297c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002980:	2300      	movs	r3, #0
}
 8002982:	4618      	mov	r0, r3
 8002984:	3710      	adds	r7, #16
 8002986:	46bd      	mov	sp, r7
 8002988:	bd80      	pop	{r7, pc}

0800298a <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800298a:	b580      	push	{r7, lr}
 800298c:	b084      	sub	sp, #16
 800298e:	af00      	add	r7, sp, #0
 8002990:	6078      	str	r0, [r7, #4]
 8002992:	460b      	mov	r3, r1
 8002994:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002996:	78fb      	ldrb	r3, [r7, #3]
 8002998:	f003 020f 	and.w	r2, r3, #15
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	685b      	ldr	r3, [r3, #4]
 80029a0:	429a      	cmp	r2, r3
 80029a2:	d901      	bls.n	80029a8 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80029a4:	2301      	movs	r3, #1
 80029a6:	e040      	b.n	8002a2a <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80029a8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	da0e      	bge.n	80029ce <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80029b0:	78fb      	ldrb	r3, [r7, #3]
 80029b2:	f003 0307 	and.w	r3, r3, #7
 80029b6:	1c5a      	adds	r2, r3, #1
 80029b8:	4613      	mov	r3, r2
 80029ba:	009b      	lsls	r3, r3, #2
 80029bc:	4413      	add	r3, r2
 80029be:	00db      	lsls	r3, r3, #3
 80029c0:	687a      	ldr	r2, [r7, #4]
 80029c2:	4413      	add	r3, r2
 80029c4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	2201      	movs	r2, #1
 80029ca:	705a      	strb	r2, [r3, #1]
 80029cc:	e00e      	b.n	80029ec <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80029ce:	78fb      	ldrb	r3, [r7, #3]
 80029d0:	f003 0207 	and.w	r2, r3, #7
 80029d4:	4613      	mov	r3, r2
 80029d6:	009b      	lsls	r3, r3, #2
 80029d8:	4413      	add	r3, r2
 80029da:	00db      	lsls	r3, r3, #3
 80029dc:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80029e0:	687a      	ldr	r2, [r7, #4]
 80029e2:	4413      	add	r3, r2
 80029e4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	2200      	movs	r2, #0
 80029ea:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	2200      	movs	r2, #0
 80029f0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80029f2:	78fb      	ldrb	r3, [r7, #3]
 80029f4:	f003 0307 	and.w	r3, r3, #7
 80029f8:	b2da      	uxtb	r2, r3
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002a04:	2b01      	cmp	r3, #1
 8002a06:	d101      	bne.n	8002a0c <HAL_PCD_EP_ClrStall+0x82>
 8002a08:	2302      	movs	r3, #2
 8002a0a:	e00e      	b.n	8002a2a <HAL_PCD_EP_ClrStall+0xa0>
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	2201      	movs	r2, #1
 8002a10:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	68f9      	ldr	r1, [r7, #12]
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	f004 fff6 	bl	8007a0c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	2200      	movs	r2, #0
 8002a24:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002a28:	2300      	movs	r3, #0
}
 8002a2a:	4618      	mov	r0, r3
 8002a2c:	3710      	adds	r7, #16
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	bd80      	pop	{r7, pc}

08002a32 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8002a32:	b580      	push	{r7, lr}
 8002a34:	b096      	sub	sp, #88	; 0x58
 8002a36:	af00      	add	r7, sp, #0
 8002a38:	6078      	str	r0, [r7, #4]
  uint16_t wEPVal;
  uint16_t TxPctSize;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002a3a:	e39c      	b.n	8003176 <PCD_EP_ISR_Handler+0x744>
  {
    wIstr = hpcd->Instance->ISTR;
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002a44:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8002a48:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8002a4c:	b2db      	uxtb	r3, r3
 8002a4e:	f003 030f 	and.w	r3, r3, #15
 8002a52:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55

    if (epindex == 0U)
 8002a56:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	f040 815e 	bne.w	8002d1c <PCD_EP_ISR_Handler+0x2ea>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8002a60:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8002a64:	f003 0310 	and.w	r3, r3, #16
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d150      	bne.n	8002b0e <PCD_EP_ISR_Handler+0xdc>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	881b      	ldrh	r3, [r3, #0]
 8002a72:	b29b      	uxth	r3, r3
 8002a74:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8002a78:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a7c:	81fb      	strh	r3, [r7, #14]
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681a      	ldr	r2, [r3, #0]
 8002a82:	89fb      	ldrh	r3, [r7, #14]
 8002a84:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002a88:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002a8c:	b29b      	uxth	r3, r3
 8002a8e:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	3328      	adds	r3, #40	; 0x28
 8002a94:	64fb      	str	r3, [r7, #76]	; 0x4c

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002a9e:	b29b      	uxth	r3, r3
 8002aa0:	461a      	mov	r2, r3
 8002aa2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002aa4:	781b      	ldrb	r3, [r3, #0]
 8002aa6:	00db      	lsls	r3, r3, #3
 8002aa8:	4413      	add	r3, r2
 8002aaa:	687a      	ldr	r2, [r7, #4]
 8002aac:	6812      	ldr	r2, [r2, #0]
 8002aae:	4413      	add	r3, r2
 8002ab0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002ab4:	881b      	ldrh	r3, [r3, #0]
 8002ab6:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002aba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002abc:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8002abe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002ac0:	695a      	ldr	r2, [r3, #20]
 8002ac2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002ac4:	69db      	ldr	r3, [r3, #28]
 8002ac6:	441a      	add	r2, r3
 8002ac8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002aca:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8002acc:	2100      	movs	r1, #0
 8002ace:	6878      	ldr	r0, [r7, #4]
 8002ad0:	f006 ffe5 	bl	8009a9e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002ada:	b2db      	uxtb	r3, r3
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	f000 834a 	beq.w	8003176 <PCD_EP_ISR_Handler+0x744>
 8002ae2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002ae4:	699b      	ldr	r3, [r3, #24]
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	f040 8345 	bne.w	8003176 <PCD_EP_ISR_Handler+0x744>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002af2:	b2db      	uxtb	r3, r3
 8002af4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002af8:	b2da      	uxtb	r2, r3
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	b292      	uxth	r2, r2
 8002b00:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	2200      	movs	r2, #0
 8002b08:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002b0c:	e333      	b.n	8003176 <PCD_EP_ISR_Handler+0x744>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002b14:	64fb      	str	r3, [r7, #76]	; 0x4c
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	881b      	ldrh	r3, [r3, #0]
 8002b1c:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8002b20:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8002b24:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d032      	beq.n	8002b92 <PCD_EP_ISR_Handler+0x160>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002b34:	b29b      	uxth	r3, r3
 8002b36:	461a      	mov	r2, r3
 8002b38:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002b3a:	781b      	ldrb	r3, [r3, #0]
 8002b3c:	00db      	lsls	r3, r3, #3
 8002b3e:	4413      	add	r3, r2
 8002b40:	687a      	ldr	r2, [r7, #4]
 8002b42:	6812      	ldr	r2, [r2, #0]
 8002b44:	4413      	add	r3, r2
 8002b46:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002b4a:	881b      	ldrh	r3, [r3, #0]
 8002b4c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002b50:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002b52:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	6818      	ldr	r0, [r3, #0]
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8002b5e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002b60:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8002b62:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002b64:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002b66:	b29b      	uxth	r3, r3
 8002b68:	f005 f87b 	bl	8007c62 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	881b      	ldrh	r3, [r3, #0]
 8002b72:	b29a      	uxth	r2, r3
 8002b74:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002b78:	4013      	ands	r3, r2
 8002b7a:	823b      	strh	r3, [r7, #16]
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	8a3a      	ldrh	r2, [r7, #16]
 8002b82:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002b86:	b292      	uxth	r2, r2
 8002b88:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8002b8a:	6878      	ldr	r0, [r7, #4]
 8002b8c:	f006 ff5a 	bl	8009a44 <HAL_PCD_SetupStageCallback>
 8002b90:	e2f1      	b.n	8003176 <PCD_EP_ISR_Handler+0x744>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002b92:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	f280 82ed 	bge.w	8003176 <PCD_EP_ISR_Handler+0x744>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	881b      	ldrh	r3, [r3, #0]
 8002ba2:	b29a      	uxth	r2, r3
 8002ba4:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002ba8:	4013      	ands	r3, r2
 8002baa:	83fb      	strh	r3, [r7, #30]
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	8bfa      	ldrh	r2, [r7, #30]
 8002bb2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002bb6:	b292      	uxth	r2, r2
 8002bb8:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002bc2:	b29b      	uxth	r3, r3
 8002bc4:	461a      	mov	r2, r3
 8002bc6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002bc8:	781b      	ldrb	r3, [r3, #0]
 8002bca:	00db      	lsls	r3, r3, #3
 8002bcc:	4413      	add	r3, r2
 8002bce:	687a      	ldr	r2, [r7, #4]
 8002bd0:	6812      	ldr	r2, [r2, #0]
 8002bd2:	4413      	add	r3, r2
 8002bd4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002bd8:	881b      	ldrh	r3, [r3, #0]
 8002bda:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002bde:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002be0:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8002be2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002be4:	69db      	ldr	r3, [r3, #28]
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d019      	beq.n	8002c1e <PCD_EP_ISR_Handler+0x1ec>
 8002bea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002bec:	695b      	ldr	r3, [r3, #20]
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d015      	beq.n	8002c1e <PCD_EP_ISR_Handler+0x1ec>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	6818      	ldr	r0, [r3, #0]
 8002bf6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002bf8:	6959      	ldr	r1, [r3, #20]
 8002bfa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002bfc:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8002bfe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002c00:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002c02:	b29b      	uxth	r3, r3
 8002c04:	f005 f82d 	bl	8007c62 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8002c08:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002c0a:	695a      	ldr	r2, [r3, #20]
 8002c0c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002c0e:	69db      	ldr	r3, [r3, #28]
 8002c10:	441a      	add	r2, r3
 8002c12:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002c14:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8002c16:	2100      	movs	r1, #0
 8002c18:	6878      	ldr	r0, [r7, #4]
 8002c1a:	f006 ff25 	bl	8009a68 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	881b      	ldrh	r3, [r3, #0]
 8002c24:	b29b      	uxth	r3, r3
 8002c26:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	f040 82a3 	bne.w	8003176 <PCD_EP_ISR_Handler+0x744>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	61bb      	str	r3, [r7, #24]
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002c3e:	b29b      	uxth	r3, r3
 8002c40:	461a      	mov	r2, r3
 8002c42:	69bb      	ldr	r3, [r7, #24]
 8002c44:	4413      	add	r3, r2
 8002c46:	61bb      	str	r3, [r7, #24]
 8002c48:	69bb      	ldr	r3, [r7, #24]
 8002c4a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002c4e:	617b      	str	r3, [r7, #20]
 8002c50:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002c52:	691b      	ldr	r3, [r3, #16]
 8002c54:	2b3e      	cmp	r3, #62	; 0x3e
 8002c56:	d918      	bls.n	8002c8a <PCD_EP_ISR_Handler+0x258>
 8002c58:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002c5a:	691b      	ldr	r3, [r3, #16]
 8002c5c:	095b      	lsrs	r3, r3, #5
 8002c5e:	647b      	str	r3, [r7, #68]	; 0x44
 8002c60:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002c62:	691b      	ldr	r3, [r3, #16]
 8002c64:	f003 031f 	and.w	r3, r3, #31
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d102      	bne.n	8002c72 <PCD_EP_ISR_Handler+0x240>
 8002c6c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002c6e:	3b01      	subs	r3, #1
 8002c70:	647b      	str	r3, [r7, #68]	; 0x44
 8002c72:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002c74:	b29b      	uxth	r3, r3
 8002c76:	029b      	lsls	r3, r3, #10
 8002c78:	b29b      	uxth	r3, r3
 8002c7a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002c7e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002c82:	b29a      	uxth	r2, r3
 8002c84:	697b      	ldr	r3, [r7, #20]
 8002c86:	801a      	strh	r2, [r3, #0]
 8002c88:	e029      	b.n	8002cde <PCD_EP_ISR_Handler+0x2ac>
 8002c8a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002c8c:	691b      	ldr	r3, [r3, #16]
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d112      	bne.n	8002cb8 <PCD_EP_ISR_Handler+0x286>
 8002c92:	697b      	ldr	r3, [r7, #20]
 8002c94:	881b      	ldrh	r3, [r3, #0]
 8002c96:	b29b      	uxth	r3, r3
 8002c98:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002c9c:	b29a      	uxth	r2, r3
 8002c9e:	697b      	ldr	r3, [r7, #20]
 8002ca0:	801a      	strh	r2, [r3, #0]
 8002ca2:	697b      	ldr	r3, [r7, #20]
 8002ca4:	881b      	ldrh	r3, [r3, #0]
 8002ca6:	b29b      	uxth	r3, r3
 8002ca8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002cac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002cb0:	b29a      	uxth	r2, r3
 8002cb2:	697b      	ldr	r3, [r7, #20]
 8002cb4:	801a      	strh	r2, [r3, #0]
 8002cb6:	e012      	b.n	8002cde <PCD_EP_ISR_Handler+0x2ac>
 8002cb8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002cba:	691b      	ldr	r3, [r3, #16]
 8002cbc:	085b      	lsrs	r3, r3, #1
 8002cbe:	647b      	str	r3, [r7, #68]	; 0x44
 8002cc0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002cc2:	691b      	ldr	r3, [r3, #16]
 8002cc4:	f003 0301 	and.w	r3, r3, #1
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d002      	beq.n	8002cd2 <PCD_EP_ISR_Handler+0x2a0>
 8002ccc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002cce:	3301      	adds	r3, #1
 8002cd0:	647b      	str	r3, [r7, #68]	; 0x44
 8002cd2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002cd4:	b29b      	uxth	r3, r3
 8002cd6:	029b      	lsls	r3, r3, #10
 8002cd8:	b29a      	uxth	r2, r3
 8002cda:	697b      	ldr	r3, [r7, #20]
 8002cdc:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	881b      	ldrh	r3, [r3, #0]
 8002ce4:	b29b      	uxth	r3, r3
 8002ce6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002cea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002cee:	827b      	strh	r3, [r7, #18]
 8002cf0:	8a7b      	ldrh	r3, [r7, #18]
 8002cf2:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8002cf6:	827b      	strh	r3, [r7, #18]
 8002cf8:	8a7b      	ldrh	r3, [r7, #18]
 8002cfa:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002cfe:	827b      	strh	r3, [r7, #18]
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681a      	ldr	r2, [r3, #0]
 8002d04:	8a7b      	ldrh	r3, [r7, #18]
 8002d06:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002d0a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002d0e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002d12:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002d16:	b29b      	uxth	r3, r3
 8002d18:	8013      	strh	r3, [r2, #0]
 8002d1a:	e22c      	b.n	8003176 <PCD_EP_ISR_Handler+0x744>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	461a      	mov	r2, r3
 8002d22:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8002d26:	009b      	lsls	r3, r3, #2
 8002d28:	4413      	add	r3, r2
 8002d2a:	881b      	ldrh	r3, [r3, #0]
 8002d2c:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002d30:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	f280 80f6 	bge.w	8002f26 <PCD_EP_ISR_Handler+0x4f4>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	461a      	mov	r2, r3
 8002d40:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8002d44:	009b      	lsls	r3, r3, #2
 8002d46:	4413      	add	r3, r2
 8002d48:	881b      	ldrh	r3, [r3, #0]
 8002d4a:	b29a      	uxth	r2, r3
 8002d4c:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002d50:	4013      	ands	r3, r2
 8002d52:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	461a      	mov	r2, r3
 8002d5c:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8002d60:	009b      	lsls	r3, r3, #2
 8002d62:	4413      	add	r3, r2
 8002d64:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 8002d68:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002d6c:	b292      	uxth	r2, r2
 8002d6e:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8002d70:	f897 2055 	ldrb.w	r2, [r7, #85]	; 0x55
 8002d74:	4613      	mov	r3, r2
 8002d76:	009b      	lsls	r3, r3, #2
 8002d78:	4413      	add	r3, r2
 8002d7a:	00db      	lsls	r3, r3, #3
 8002d7c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002d80:	687a      	ldr	r2, [r7, #4]
 8002d82:	4413      	add	r3, r2
 8002d84:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8002d86:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002d88:	7b1b      	ldrb	r3, [r3, #12]
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d123      	bne.n	8002dd6 <PCD_EP_ISR_Handler+0x3a4>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002d96:	b29b      	uxth	r3, r3
 8002d98:	461a      	mov	r2, r3
 8002d9a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002d9c:	781b      	ldrb	r3, [r3, #0]
 8002d9e:	00db      	lsls	r3, r3, #3
 8002da0:	4413      	add	r3, r2
 8002da2:	687a      	ldr	r2, [r7, #4]
 8002da4:	6812      	ldr	r2, [r2, #0]
 8002da6:	4413      	add	r3, r2
 8002da8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002dac:	881b      	ldrh	r3, [r3, #0]
 8002dae:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002db2:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

          if (count != 0U)
 8002db6:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	f000 808e 	beq.w	8002edc <PCD_EP_ISR_Handler+0x4aa>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	6818      	ldr	r0, [r3, #0]
 8002dc4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002dc6:	6959      	ldr	r1, [r3, #20]
 8002dc8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002dca:	88da      	ldrh	r2, [r3, #6]
 8002dcc:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8002dd0:	f004 ff47 	bl	8007c62 <USB_ReadPMA>
 8002dd4:	e082      	b.n	8002edc <PCD_EP_ISR_Handler+0x4aa>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8002dd6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002dd8:	78db      	ldrb	r3, [r3, #3]
 8002dda:	2b02      	cmp	r3, #2
 8002ddc:	d10a      	bne.n	8002df4 <PCD_EP_ISR_Handler+0x3c2>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8002dde:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8002de2:	461a      	mov	r2, r3
 8002de4:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8002de6:	6878      	ldr	r0, [r7, #4]
 8002de8:	f000 f9d3 	bl	8003192 <HAL_PCD_EP_DB_Receive>
 8002dec:	4603      	mov	r3, r0
 8002dee:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8002df2:	e073      	b.n	8002edc <PCD_EP_ISR_Handler+0x4aa>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	461a      	mov	r2, r3
 8002dfa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002dfc:	781b      	ldrb	r3, [r3, #0]
 8002dfe:	009b      	lsls	r3, r3, #2
 8002e00:	4413      	add	r3, r2
 8002e02:	881b      	ldrh	r3, [r3, #0]
 8002e04:	b29b      	uxth	r3, r3
 8002e06:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002e0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e0e:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	461a      	mov	r2, r3
 8002e18:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002e1a:	781b      	ldrb	r3, [r3, #0]
 8002e1c:	009b      	lsls	r3, r3, #2
 8002e1e:	441a      	add	r2, r3
 8002e20:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002e24:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002e28:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002e2c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002e30:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002e34:	b29b      	uxth	r3, r3
 8002e36:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	461a      	mov	r2, r3
 8002e3e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002e40:	781b      	ldrb	r3, [r3, #0]
 8002e42:	009b      	lsls	r3, r3, #2
 8002e44:	4413      	add	r3, r2
 8002e46:	881b      	ldrh	r3, [r3, #0]
 8002e48:	b29b      	uxth	r3, r3
 8002e4a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d022      	beq.n	8002e98 <PCD_EP_ISR_Handler+0x466>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002e5a:	b29b      	uxth	r3, r3
 8002e5c:	461a      	mov	r2, r3
 8002e5e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002e60:	781b      	ldrb	r3, [r3, #0]
 8002e62:	00db      	lsls	r3, r3, #3
 8002e64:	4413      	add	r3, r2
 8002e66:	687a      	ldr	r2, [r7, #4]
 8002e68:	6812      	ldr	r2, [r2, #0]
 8002e6a:	4413      	add	r3, r2
 8002e6c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002e70:	881b      	ldrh	r3, [r3, #0]
 8002e72:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002e76:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

              if (count != 0U)
 8002e7a:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d02c      	beq.n	8002edc <PCD_EP_ISR_Handler+0x4aa>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	6818      	ldr	r0, [r3, #0]
 8002e86:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002e88:	6959      	ldr	r1, [r3, #20]
 8002e8a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002e8c:	891a      	ldrh	r2, [r3, #8]
 8002e8e:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8002e92:	f004 fee6 	bl	8007c62 <USB_ReadPMA>
 8002e96:	e021      	b.n	8002edc <PCD_EP_ISR_Handler+0x4aa>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002ea0:	b29b      	uxth	r3, r3
 8002ea2:	461a      	mov	r2, r3
 8002ea4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002ea6:	781b      	ldrb	r3, [r3, #0]
 8002ea8:	00db      	lsls	r3, r3, #3
 8002eaa:	4413      	add	r3, r2
 8002eac:	687a      	ldr	r2, [r7, #4]
 8002eae:	6812      	ldr	r2, [r2, #0]
 8002eb0:	4413      	add	r3, r2
 8002eb2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002eb6:	881b      	ldrh	r3, [r3, #0]
 8002eb8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002ebc:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

              if (count != 0U)
 8002ec0:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d009      	beq.n	8002edc <PCD_EP_ISR_Handler+0x4aa>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	6818      	ldr	r0, [r3, #0]
 8002ecc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002ece:	6959      	ldr	r1, [r3, #20]
 8002ed0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002ed2:	895a      	ldrh	r2, [r3, #10]
 8002ed4:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8002ed8:	f004 fec3 	bl	8007c62 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8002edc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002ede:	69da      	ldr	r2, [r3, #28]
 8002ee0:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8002ee4:	441a      	add	r2, r3
 8002ee6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002ee8:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8002eea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002eec:	695a      	ldr	r2, [r3, #20]
 8002eee:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8002ef2:	441a      	add	r2, r3
 8002ef4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002ef6:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8002ef8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002efa:	699b      	ldr	r3, [r3, #24]
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d005      	beq.n	8002f0c <PCD_EP_ISR_Handler+0x4da>
 8002f00:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8002f04:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f06:	691b      	ldr	r3, [r3, #16]
 8002f08:	429a      	cmp	r2, r3
 8002f0a:	d206      	bcs.n	8002f1a <PCD_EP_ISR_Handler+0x4e8>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8002f0c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f0e:	781b      	ldrb	r3, [r3, #0]
 8002f10:	4619      	mov	r1, r3
 8002f12:	6878      	ldr	r0, [r7, #4]
 8002f14:	f006 fda8 	bl	8009a68 <HAL_PCD_DataOutStageCallback>
 8002f18:	e005      	b.n	8002f26 <PCD_EP_ISR_Handler+0x4f4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8002f20:	4618      	mov	r0, r3
 8002f22:	f003 f9ec 	bl	80062fe <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8002f26:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8002f2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	f000 8121 	beq.w	8003176 <PCD_EP_ISR_Handler+0x744>
      {
        ep = &hpcd->IN_ep[epindex];
 8002f34:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8002f38:	1c5a      	adds	r2, r3, #1
 8002f3a:	4613      	mov	r3, r2
 8002f3c:	009b      	lsls	r3, r3, #2
 8002f3e:	4413      	add	r3, r2
 8002f40:	00db      	lsls	r3, r3, #3
 8002f42:	687a      	ldr	r2, [r7, #4]
 8002f44:	4413      	add	r3, r2
 8002f46:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	461a      	mov	r2, r3
 8002f4e:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8002f52:	009b      	lsls	r3, r3, #2
 8002f54:	4413      	add	r3, r2
 8002f56:	881b      	ldrh	r3, [r3, #0]
 8002f58:	b29b      	uxth	r3, r3
 8002f5a:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8002f5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f62:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	461a      	mov	r2, r3
 8002f6c:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8002f70:	009b      	lsls	r3, r3, #2
 8002f72:	441a      	add	r2, r3
 8002f74:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8002f78:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002f7c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002f80:	b29b      	uxth	r3, r3
 8002f82:	8013      	strh	r3, [r2, #0]

        if (ep->type != EP_TYPE_BULK)
 8002f84:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f86:	78db      	ldrb	r3, [r3, #3]
 8002f88:	2b02      	cmp	r3, #2
 8002f8a:	f000 80a2 	beq.w	80030d2 <PCD_EP_ISR_Handler+0x6a0>
        {
          ep->xfer_len = 0U;
 8002f8e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f90:	2200      	movs	r2, #0
 8002f92:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8002f94:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f96:	7b1b      	ldrb	r3, [r3, #12]
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	f000 8093 	beq.w	80030c4 <PCD_EP_ISR_Handler+0x692>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002f9e:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8002fa2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d046      	beq.n	8003038 <PCD_EP_ISR_Handler+0x606>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002faa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002fac:	785b      	ldrb	r3, [r3, #1]
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d126      	bne.n	8003000 <PCD_EP_ISR_Handler+0x5ce>
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	627b      	str	r3, [r7, #36]	; 0x24
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002fc0:	b29b      	uxth	r3, r3
 8002fc2:	461a      	mov	r2, r3
 8002fc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fc6:	4413      	add	r3, r2
 8002fc8:	627b      	str	r3, [r7, #36]	; 0x24
 8002fca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002fcc:	781b      	ldrb	r3, [r3, #0]
 8002fce:	00da      	lsls	r2, r3, #3
 8002fd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fd2:	4413      	add	r3, r2
 8002fd4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002fd8:	623b      	str	r3, [r7, #32]
 8002fda:	6a3b      	ldr	r3, [r7, #32]
 8002fdc:	881b      	ldrh	r3, [r3, #0]
 8002fde:	b29b      	uxth	r3, r3
 8002fe0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002fe4:	b29a      	uxth	r2, r3
 8002fe6:	6a3b      	ldr	r3, [r7, #32]
 8002fe8:	801a      	strh	r2, [r3, #0]
 8002fea:	6a3b      	ldr	r3, [r7, #32]
 8002fec:	881b      	ldrh	r3, [r3, #0]
 8002fee:	b29b      	uxth	r3, r3
 8002ff0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002ff4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002ff8:	b29a      	uxth	r2, r3
 8002ffa:	6a3b      	ldr	r3, [r7, #32]
 8002ffc:	801a      	strh	r2, [r3, #0]
 8002ffe:	e061      	b.n	80030c4 <PCD_EP_ISR_Handler+0x692>
 8003000:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003002:	785b      	ldrb	r3, [r3, #1]
 8003004:	2b01      	cmp	r3, #1
 8003006:	d15d      	bne.n	80030c4 <PCD_EP_ISR_Handler+0x692>
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003016:	b29b      	uxth	r3, r3
 8003018:	461a      	mov	r2, r3
 800301a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800301c:	4413      	add	r3, r2
 800301e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003020:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003022:	781b      	ldrb	r3, [r3, #0]
 8003024:	00da      	lsls	r2, r3, #3
 8003026:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003028:	4413      	add	r3, r2
 800302a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800302e:	62bb      	str	r3, [r7, #40]	; 0x28
 8003030:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003032:	2200      	movs	r2, #0
 8003034:	801a      	strh	r2, [r3, #0]
 8003036:	e045      	b.n	80030c4 <PCD_EP_ISR_Handler+0x692>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800303e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003040:	785b      	ldrb	r3, [r3, #1]
 8003042:	2b00      	cmp	r3, #0
 8003044:	d126      	bne.n	8003094 <PCD_EP_ISR_Handler+0x662>
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	637b      	str	r3, [r7, #52]	; 0x34
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003054:	b29b      	uxth	r3, r3
 8003056:	461a      	mov	r2, r3
 8003058:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800305a:	4413      	add	r3, r2
 800305c:	637b      	str	r3, [r7, #52]	; 0x34
 800305e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003060:	781b      	ldrb	r3, [r3, #0]
 8003062:	00da      	lsls	r2, r3, #3
 8003064:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003066:	4413      	add	r3, r2
 8003068:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800306c:	633b      	str	r3, [r7, #48]	; 0x30
 800306e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003070:	881b      	ldrh	r3, [r3, #0]
 8003072:	b29b      	uxth	r3, r3
 8003074:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003078:	b29a      	uxth	r2, r3
 800307a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800307c:	801a      	strh	r2, [r3, #0]
 800307e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003080:	881b      	ldrh	r3, [r3, #0]
 8003082:	b29b      	uxth	r3, r3
 8003084:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003088:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800308c:	b29a      	uxth	r2, r3
 800308e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003090:	801a      	strh	r2, [r3, #0]
 8003092:	e017      	b.n	80030c4 <PCD_EP_ISR_Handler+0x692>
 8003094:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003096:	785b      	ldrb	r3, [r3, #1]
 8003098:	2b01      	cmp	r3, #1
 800309a:	d113      	bne.n	80030c4 <PCD_EP_ISR_Handler+0x692>
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80030a4:	b29b      	uxth	r3, r3
 80030a6:	461a      	mov	r2, r3
 80030a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80030aa:	4413      	add	r3, r2
 80030ac:	63fb      	str	r3, [r7, #60]	; 0x3c
 80030ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80030b0:	781b      	ldrb	r3, [r3, #0]
 80030b2:	00da      	lsls	r2, r3, #3
 80030b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80030b6:	4413      	add	r3, r2
 80030b8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80030bc:	63bb      	str	r3, [r7, #56]	; 0x38
 80030be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030c0:	2200      	movs	r2, #0
 80030c2:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80030c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80030c6:	781b      	ldrb	r3, [r3, #0]
 80030c8:	4619      	mov	r1, r3
 80030ca:	6878      	ldr	r0, [r7, #4]
 80030cc:	f006 fce7 	bl	8009a9e <HAL_PCD_DataInStageCallback>
 80030d0:	e051      	b.n	8003176 <PCD_EP_ISR_Handler+0x744>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Bulk Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 80030d2:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80030d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d144      	bne.n	8003168 <PCD_EP_ISR_Handler+0x736>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80030e6:	b29b      	uxth	r3, r3
 80030e8:	461a      	mov	r2, r3
 80030ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80030ec:	781b      	ldrb	r3, [r3, #0]
 80030ee:	00db      	lsls	r3, r3, #3
 80030f0:	4413      	add	r3, r2
 80030f2:	687a      	ldr	r2, [r7, #4]
 80030f4:	6812      	ldr	r2, [r2, #0]
 80030f6:	4413      	add	r3, r2
 80030f8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80030fc:	881b      	ldrh	r3, [r3, #0]
 80030fe:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003102:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            if (ep->xfer_len > TxPctSize)
 8003106:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003108:	699a      	ldr	r2, [r3, #24]
 800310a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800310e:	429a      	cmp	r2, r3
 8003110:	d907      	bls.n	8003122 <PCD_EP_ISR_Handler+0x6f0>
            {
              ep->xfer_len -= TxPctSize;
 8003112:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003114:	699a      	ldr	r2, [r3, #24]
 8003116:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800311a:	1ad2      	subs	r2, r2, r3
 800311c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800311e:	619a      	str	r2, [r3, #24]
 8003120:	e002      	b.n	8003128 <PCD_EP_ISR_Handler+0x6f6>
            }
            else
            {
              ep->xfer_len = 0U;
 8003122:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003124:	2200      	movs	r2, #0
 8003126:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8003128:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800312a:	699b      	ldr	r3, [r3, #24]
 800312c:	2b00      	cmp	r3, #0
 800312e:	d106      	bne.n	800313e <PCD_EP_ISR_Handler+0x70c>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003130:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003132:	781b      	ldrb	r3, [r3, #0]
 8003134:	4619      	mov	r1, r3
 8003136:	6878      	ldr	r0, [r7, #4]
 8003138:	f006 fcb1 	bl	8009a9e <HAL_PCD_DataInStageCallback>
 800313c:	e01b      	b.n	8003176 <PCD_EP_ISR_Handler+0x744>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 800313e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003140:	695a      	ldr	r2, [r3, #20]
 8003142:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8003146:	441a      	add	r2, r3
 8003148:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800314a:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 800314c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800314e:	69da      	ldr	r2, [r3, #28]
 8003150:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8003154:	441a      	add	r2, r3
 8003156:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003158:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8003160:	4618      	mov	r0, r3
 8003162:	f003 f8cc 	bl	80062fe <USB_EPStartXfer>
 8003166:	e006      	b.n	8003176 <PCD_EP_ISR_Handler+0x744>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8003168:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800316c:	461a      	mov	r2, r3
 800316e:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8003170:	6878      	ldr	r0, [r7, #4]
 8003172:	f000 f917 	bl	80033a4 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800317e:	b29b      	uxth	r3, r3
 8003180:	b21b      	sxth	r3, r3
 8003182:	2b00      	cmp	r3, #0
 8003184:	f6ff ac5a 	blt.w	8002a3c <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8003188:	2300      	movs	r3, #0
}
 800318a:	4618      	mov	r0, r3
 800318c:	3758      	adds	r7, #88	; 0x58
 800318e:	46bd      	mov	sp, r7
 8003190:	bd80      	pop	{r7, pc}

08003192 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8003192:	b580      	push	{r7, lr}
 8003194:	b088      	sub	sp, #32
 8003196:	af00      	add	r7, sp, #0
 8003198:	60f8      	str	r0, [r7, #12]
 800319a:	60b9      	str	r1, [r7, #8]
 800319c:	4613      	mov	r3, r2
 800319e:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80031a0:	88fb      	ldrh	r3, [r7, #6]
 80031a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d07c      	beq.n	80032a4 <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80031b2:	b29b      	uxth	r3, r3
 80031b4:	461a      	mov	r2, r3
 80031b6:	68bb      	ldr	r3, [r7, #8]
 80031b8:	781b      	ldrb	r3, [r3, #0]
 80031ba:	00db      	lsls	r3, r3, #3
 80031bc:	4413      	add	r3, r2
 80031be:	68fa      	ldr	r2, [r7, #12]
 80031c0:	6812      	ldr	r2, [r2, #0]
 80031c2:	4413      	add	r3, r2
 80031c4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80031c8:	881b      	ldrh	r3, [r3, #0]
 80031ca:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80031ce:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80031d0:	68bb      	ldr	r3, [r7, #8]
 80031d2:	699a      	ldr	r2, [r3, #24]
 80031d4:	8b7b      	ldrh	r3, [r7, #26]
 80031d6:	429a      	cmp	r2, r3
 80031d8:	d306      	bcc.n	80031e8 <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 80031da:	68bb      	ldr	r3, [r7, #8]
 80031dc:	699a      	ldr	r2, [r3, #24]
 80031de:	8b7b      	ldrh	r3, [r7, #26]
 80031e0:	1ad2      	subs	r2, r2, r3
 80031e2:	68bb      	ldr	r3, [r7, #8]
 80031e4:	619a      	str	r2, [r3, #24]
 80031e6:	e002      	b.n	80031ee <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 80031e8:	68bb      	ldr	r3, [r7, #8]
 80031ea:	2200      	movs	r2, #0
 80031ec:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80031ee:	68bb      	ldr	r3, [r7, #8]
 80031f0:	699b      	ldr	r3, [r3, #24]
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d123      	bne.n	800323e <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	461a      	mov	r2, r3
 80031fc:	68bb      	ldr	r3, [r7, #8]
 80031fe:	781b      	ldrb	r3, [r3, #0]
 8003200:	009b      	lsls	r3, r3, #2
 8003202:	4413      	add	r3, r2
 8003204:	881b      	ldrh	r3, [r3, #0]
 8003206:	b29b      	uxth	r3, r3
 8003208:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800320c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003210:	833b      	strh	r3, [r7, #24]
 8003212:	8b3b      	ldrh	r3, [r7, #24]
 8003214:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003218:	833b      	strh	r3, [r7, #24]
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	461a      	mov	r2, r3
 8003220:	68bb      	ldr	r3, [r7, #8]
 8003222:	781b      	ldrb	r3, [r3, #0]
 8003224:	009b      	lsls	r3, r3, #2
 8003226:	441a      	add	r2, r3
 8003228:	8b3b      	ldrh	r3, [r7, #24]
 800322a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800322e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003232:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003236:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800323a:	b29b      	uxth	r3, r3
 800323c:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800323e:	88fb      	ldrh	r3, [r7, #6]
 8003240:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003244:	2b00      	cmp	r3, #0
 8003246:	d01f      	beq.n	8003288 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	461a      	mov	r2, r3
 800324e:	68bb      	ldr	r3, [r7, #8]
 8003250:	781b      	ldrb	r3, [r3, #0]
 8003252:	009b      	lsls	r3, r3, #2
 8003254:	4413      	add	r3, r2
 8003256:	881b      	ldrh	r3, [r3, #0]
 8003258:	b29b      	uxth	r3, r3
 800325a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800325e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003262:	82fb      	strh	r3, [r7, #22]
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	461a      	mov	r2, r3
 800326a:	68bb      	ldr	r3, [r7, #8]
 800326c:	781b      	ldrb	r3, [r3, #0]
 800326e:	009b      	lsls	r3, r3, #2
 8003270:	441a      	add	r2, r3
 8003272:	8afb      	ldrh	r3, [r7, #22]
 8003274:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003278:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800327c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003280:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003284:	b29b      	uxth	r3, r3
 8003286:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8003288:	8b7b      	ldrh	r3, [r7, #26]
 800328a:	2b00      	cmp	r3, #0
 800328c:	f000 8085 	beq.w	800339a <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	6818      	ldr	r0, [r3, #0]
 8003294:	68bb      	ldr	r3, [r7, #8]
 8003296:	6959      	ldr	r1, [r3, #20]
 8003298:	68bb      	ldr	r3, [r7, #8]
 800329a:	891a      	ldrh	r2, [r3, #8]
 800329c:	8b7b      	ldrh	r3, [r7, #26]
 800329e:	f004 fce0 	bl	8007c62 <USB_ReadPMA>
 80032a2:	e07a      	b.n	800339a <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80032ac:	b29b      	uxth	r3, r3
 80032ae:	461a      	mov	r2, r3
 80032b0:	68bb      	ldr	r3, [r7, #8]
 80032b2:	781b      	ldrb	r3, [r3, #0]
 80032b4:	00db      	lsls	r3, r3, #3
 80032b6:	4413      	add	r3, r2
 80032b8:	68fa      	ldr	r2, [r7, #12]
 80032ba:	6812      	ldr	r2, [r2, #0]
 80032bc:	4413      	add	r3, r2
 80032be:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80032c2:	881b      	ldrh	r3, [r3, #0]
 80032c4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80032c8:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80032ca:	68bb      	ldr	r3, [r7, #8]
 80032cc:	699a      	ldr	r2, [r3, #24]
 80032ce:	8b7b      	ldrh	r3, [r7, #26]
 80032d0:	429a      	cmp	r2, r3
 80032d2:	d306      	bcc.n	80032e2 <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 80032d4:	68bb      	ldr	r3, [r7, #8]
 80032d6:	699a      	ldr	r2, [r3, #24]
 80032d8:	8b7b      	ldrh	r3, [r7, #26]
 80032da:	1ad2      	subs	r2, r2, r3
 80032dc:	68bb      	ldr	r3, [r7, #8]
 80032de:	619a      	str	r2, [r3, #24]
 80032e0:	e002      	b.n	80032e8 <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 80032e2:	68bb      	ldr	r3, [r7, #8]
 80032e4:	2200      	movs	r2, #0
 80032e6:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80032e8:	68bb      	ldr	r3, [r7, #8]
 80032ea:	699b      	ldr	r3, [r3, #24]
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d123      	bne.n	8003338 <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	461a      	mov	r2, r3
 80032f6:	68bb      	ldr	r3, [r7, #8]
 80032f8:	781b      	ldrb	r3, [r3, #0]
 80032fa:	009b      	lsls	r3, r3, #2
 80032fc:	4413      	add	r3, r2
 80032fe:	881b      	ldrh	r3, [r3, #0]
 8003300:	b29b      	uxth	r3, r3
 8003302:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003306:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800330a:	83fb      	strh	r3, [r7, #30]
 800330c:	8bfb      	ldrh	r3, [r7, #30]
 800330e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003312:	83fb      	strh	r3, [r7, #30]
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	461a      	mov	r2, r3
 800331a:	68bb      	ldr	r3, [r7, #8]
 800331c:	781b      	ldrb	r3, [r3, #0]
 800331e:	009b      	lsls	r3, r3, #2
 8003320:	441a      	add	r2, r3
 8003322:	8bfb      	ldrh	r3, [r7, #30]
 8003324:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003328:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800332c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003330:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003334:	b29b      	uxth	r3, r3
 8003336:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8003338:	88fb      	ldrh	r3, [r7, #6]
 800333a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800333e:	2b00      	cmp	r3, #0
 8003340:	d11f      	bne.n	8003382 <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	461a      	mov	r2, r3
 8003348:	68bb      	ldr	r3, [r7, #8]
 800334a:	781b      	ldrb	r3, [r3, #0]
 800334c:	009b      	lsls	r3, r3, #2
 800334e:	4413      	add	r3, r2
 8003350:	881b      	ldrh	r3, [r3, #0]
 8003352:	b29b      	uxth	r3, r3
 8003354:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003358:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800335c:	83bb      	strh	r3, [r7, #28]
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	461a      	mov	r2, r3
 8003364:	68bb      	ldr	r3, [r7, #8]
 8003366:	781b      	ldrb	r3, [r3, #0]
 8003368:	009b      	lsls	r3, r3, #2
 800336a:	441a      	add	r2, r3
 800336c:	8bbb      	ldrh	r3, [r7, #28]
 800336e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003372:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003376:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800337a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800337e:	b29b      	uxth	r3, r3
 8003380:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8003382:	8b7b      	ldrh	r3, [r7, #26]
 8003384:	2b00      	cmp	r3, #0
 8003386:	d008      	beq.n	800339a <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	6818      	ldr	r0, [r3, #0]
 800338c:	68bb      	ldr	r3, [r7, #8]
 800338e:	6959      	ldr	r1, [r3, #20]
 8003390:	68bb      	ldr	r3, [r7, #8]
 8003392:	895a      	ldrh	r2, [r3, #10]
 8003394:	8b7b      	ldrh	r3, [r7, #26]
 8003396:	f004 fc64 	bl	8007c62 <USB_ReadPMA>
    }
  }

  return count;
 800339a:	8b7b      	ldrh	r3, [r7, #26]
}
 800339c:	4618      	mov	r0, r3
 800339e:	3720      	adds	r7, #32
 80033a0:	46bd      	mov	sp, r7
 80033a2:	bd80      	pop	{r7, pc}

080033a4 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80033a4:	b580      	push	{r7, lr}
 80033a6:	b0a2      	sub	sp, #136	; 0x88
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	60f8      	str	r0, [r7, #12]
 80033ac:	60b9      	str	r1, [r7, #8]
 80033ae:	4613      	mov	r3, r2
 80033b0:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80033b2:	88fb      	ldrh	r3, [r7, #6]
 80033b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	f000 81c5 	beq.w	8003748 <HAL_PCD_EP_DB_Transmit+0x3a4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80033c6:	b29b      	uxth	r3, r3
 80033c8:	461a      	mov	r2, r3
 80033ca:	68bb      	ldr	r3, [r7, #8]
 80033cc:	781b      	ldrb	r3, [r3, #0]
 80033ce:	00db      	lsls	r3, r3, #3
 80033d0:	4413      	add	r3, r2
 80033d2:	68fa      	ldr	r2, [r7, #12]
 80033d4:	6812      	ldr	r2, [r2, #0]
 80033d6:	4413      	add	r3, r2
 80033d8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80033dc:	881b      	ldrh	r3, [r3, #0]
 80033de:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80033e2:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxPctSize)
 80033e6:	68bb      	ldr	r3, [r7, #8]
 80033e8:	699a      	ldr	r2, [r3, #24]
 80033ea:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80033ee:	429a      	cmp	r2, r3
 80033f0:	d907      	bls.n	8003402 <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 80033f2:	68bb      	ldr	r3, [r7, #8]
 80033f4:	699a      	ldr	r2, [r3, #24]
 80033f6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80033fa:	1ad2      	subs	r2, r2, r3
 80033fc:	68bb      	ldr	r3, [r7, #8]
 80033fe:	619a      	str	r2, [r3, #24]
 8003400:	e002      	b.n	8003408 <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 8003402:	68bb      	ldr	r3, [r7, #8]
 8003404:	2200      	movs	r2, #0
 8003406:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8003408:	68bb      	ldr	r3, [r7, #8]
 800340a:	699b      	ldr	r3, [r3, #24]
 800340c:	2b00      	cmp	r3, #0
 800340e:	f040 80b9 	bne.w	8003584 <HAL_PCD_EP_DB_Transmit+0x1e0>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003412:	68bb      	ldr	r3, [r7, #8]
 8003414:	785b      	ldrb	r3, [r3, #1]
 8003416:	2b00      	cmp	r3, #0
 8003418:	d126      	bne.n	8003468 <HAL_PCD_EP_DB_Transmit+0xc4>
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	62bb      	str	r3, [r7, #40]	; 0x28
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003428:	b29b      	uxth	r3, r3
 800342a:	461a      	mov	r2, r3
 800342c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800342e:	4413      	add	r3, r2
 8003430:	62bb      	str	r3, [r7, #40]	; 0x28
 8003432:	68bb      	ldr	r3, [r7, #8]
 8003434:	781b      	ldrb	r3, [r3, #0]
 8003436:	00da      	lsls	r2, r3, #3
 8003438:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800343a:	4413      	add	r3, r2
 800343c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003440:	627b      	str	r3, [r7, #36]	; 0x24
 8003442:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003444:	881b      	ldrh	r3, [r3, #0]
 8003446:	b29b      	uxth	r3, r3
 8003448:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800344c:	b29a      	uxth	r2, r3
 800344e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003450:	801a      	strh	r2, [r3, #0]
 8003452:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003454:	881b      	ldrh	r3, [r3, #0]
 8003456:	b29b      	uxth	r3, r3
 8003458:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800345c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003460:	b29a      	uxth	r2, r3
 8003462:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003464:	801a      	strh	r2, [r3, #0]
 8003466:	e01a      	b.n	800349e <HAL_PCD_EP_DB_Transmit+0xfa>
 8003468:	68bb      	ldr	r3, [r7, #8]
 800346a:	785b      	ldrb	r3, [r3, #1]
 800346c:	2b01      	cmp	r3, #1
 800346e:	d116      	bne.n	800349e <HAL_PCD_EP_DB_Transmit+0xfa>
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	633b      	str	r3, [r7, #48]	; 0x30
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800347e:	b29b      	uxth	r3, r3
 8003480:	461a      	mov	r2, r3
 8003482:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003484:	4413      	add	r3, r2
 8003486:	633b      	str	r3, [r7, #48]	; 0x30
 8003488:	68bb      	ldr	r3, [r7, #8]
 800348a:	781b      	ldrb	r3, [r3, #0]
 800348c:	00da      	lsls	r2, r3, #3
 800348e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003490:	4413      	add	r3, r2
 8003492:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003496:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003498:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800349a:	2200      	movs	r2, #0
 800349c:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	623b      	str	r3, [r7, #32]
 80034a4:	68bb      	ldr	r3, [r7, #8]
 80034a6:	785b      	ldrb	r3, [r3, #1]
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d126      	bne.n	80034fa <HAL_PCD_EP_DB_Transmit+0x156>
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	61bb      	str	r3, [r7, #24]
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80034ba:	b29b      	uxth	r3, r3
 80034bc:	461a      	mov	r2, r3
 80034be:	69bb      	ldr	r3, [r7, #24]
 80034c0:	4413      	add	r3, r2
 80034c2:	61bb      	str	r3, [r7, #24]
 80034c4:	68bb      	ldr	r3, [r7, #8]
 80034c6:	781b      	ldrb	r3, [r3, #0]
 80034c8:	00da      	lsls	r2, r3, #3
 80034ca:	69bb      	ldr	r3, [r7, #24]
 80034cc:	4413      	add	r3, r2
 80034ce:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80034d2:	617b      	str	r3, [r7, #20]
 80034d4:	697b      	ldr	r3, [r7, #20]
 80034d6:	881b      	ldrh	r3, [r3, #0]
 80034d8:	b29b      	uxth	r3, r3
 80034da:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80034de:	b29a      	uxth	r2, r3
 80034e0:	697b      	ldr	r3, [r7, #20]
 80034e2:	801a      	strh	r2, [r3, #0]
 80034e4:	697b      	ldr	r3, [r7, #20]
 80034e6:	881b      	ldrh	r3, [r3, #0]
 80034e8:	b29b      	uxth	r3, r3
 80034ea:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80034ee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80034f2:	b29a      	uxth	r2, r3
 80034f4:	697b      	ldr	r3, [r7, #20]
 80034f6:	801a      	strh	r2, [r3, #0]
 80034f8:	e017      	b.n	800352a <HAL_PCD_EP_DB_Transmit+0x186>
 80034fa:	68bb      	ldr	r3, [r7, #8]
 80034fc:	785b      	ldrb	r3, [r3, #1]
 80034fe:	2b01      	cmp	r3, #1
 8003500:	d113      	bne.n	800352a <HAL_PCD_EP_DB_Transmit+0x186>
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800350a:	b29b      	uxth	r3, r3
 800350c:	461a      	mov	r2, r3
 800350e:	6a3b      	ldr	r3, [r7, #32]
 8003510:	4413      	add	r3, r2
 8003512:	623b      	str	r3, [r7, #32]
 8003514:	68bb      	ldr	r3, [r7, #8]
 8003516:	781b      	ldrb	r3, [r3, #0]
 8003518:	00da      	lsls	r2, r3, #3
 800351a:	6a3b      	ldr	r3, [r7, #32]
 800351c:	4413      	add	r3, r2
 800351e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003522:	61fb      	str	r3, [r7, #28]
 8003524:	69fb      	ldr	r3, [r7, #28]
 8003526:	2200      	movs	r2, #0
 8003528:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800352a:	68bb      	ldr	r3, [r7, #8]
 800352c:	781b      	ldrb	r3, [r3, #0]
 800352e:	4619      	mov	r1, r3
 8003530:	68f8      	ldr	r0, [r7, #12]
 8003532:	f006 fab4 	bl	8009a9e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003536:	88fb      	ldrh	r3, [r7, #6]
 8003538:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800353c:	2b00      	cmp	r3, #0
 800353e:	f000 82d2 	beq.w	8003ae6 <HAL_PCD_EP_DB_Transmit+0x742>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	461a      	mov	r2, r3
 8003548:	68bb      	ldr	r3, [r7, #8]
 800354a:	781b      	ldrb	r3, [r3, #0]
 800354c:	009b      	lsls	r3, r3, #2
 800354e:	4413      	add	r3, r2
 8003550:	881b      	ldrh	r3, [r3, #0]
 8003552:	b29b      	uxth	r3, r3
 8003554:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003558:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800355c:	827b      	strh	r3, [r7, #18]
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	461a      	mov	r2, r3
 8003564:	68bb      	ldr	r3, [r7, #8]
 8003566:	781b      	ldrb	r3, [r3, #0]
 8003568:	009b      	lsls	r3, r3, #2
 800356a:	441a      	add	r2, r3
 800356c:	8a7b      	ldrh	r3, [r7, #18]
 800356e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003572:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003576:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800357a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800357e:	b29b      	uxth	r3, r3
 8003580:	8013      	strh	r3, [r2, #0]
 8003582:	e2b0      	b.n	8003ae6 <HAL_PCD_EP_DB_Transmit+0x742>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003584:	88fb      	ldrh	r3, [r7, #6]
 8003586:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800358a:	2b00      	cmp	r3, #0
 800358c:	d021      	beq.n	80035d2 <HAL_PCD_EP_DB_Transmit+0x22e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	461a      	mov	r2, r3
 8003594:	68bb      	ldr	r3, [r7, #8]
 8003596:	781b      	ldrb	r3, [r3, #0]
 8003598:	009b      	lsls	r3, r3, #2
 800359a:	4413      	add	r3, r2
 800359c:	881b      	ldrh	r3, [r3, #0]
 800359e:	b29b      	uxth	r3, r3
 80035a0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80035a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80035a8:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	461a      	mov	r2, r3
 80035b2:	68bb      	ldr	r3, [r7, #8]
 80035b4:	781b      	ldrb	r3, [r3, #0]
 80035b6:	009b      	lsls	r3, r3, #2
 80035b8:	441a      	add	r2, r3
 80035ba:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80035be:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80035c2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80035c6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80035ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80035ce:	b29b      	uxth	r3, r3
 80035d0:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80035d2:	68bb      	ldr	r3, [r7, #8]
 80035d4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80035d8:	2b01      	cmp	r3, #1
 80035da:	f040 8284 	bne.w	8003ae6 <HAL_PCD_EP_DB_Transmit+0x742>
      {
        ep->xfer_buff += TxPctSize;
 80035de:	68bb      	ldr	r3, [r7, #8]
 80035e0:	695a      	ldr	r2, [r3, #20]
 80035e2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80035e6:	441a      	add	r2, r3
 80035e8:	68bb      	ldr	r3, [r7, #8]
 80035ea:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80035ec:	68bb      	ldr	r3, [r7, #8]
 80035ee:	69da      	ldr	r2, [r3, #28]
 80035f0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80035f4:	441a      	add	r2, r3
 80035f6:	68bb      	ldr	r3, [r7, #8]
 80035f8:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80035fa:	68bb      	ldr	r3, [r7, #8]
 80035fc:	6a1a      	ldr	r2, [r3, #32]
 80035fe:	68bb      	ldr	r3, [r7, #8]
 8003600:	691b      	ldr	r3, [r3, #16]
 8003602:	429a      	cmp	r2, r3
 8003604:	d309      	bcc.n	800361a <HAL_PCD_EP_DB_Transmit+0x276>
        {
          len = ep->maxpacket;
 8003606:	68bb      	ldr	r3, [r7, #8]
 8003608:	691b      	ldr	r3, [r3, #16]
 800360a:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 800360c:	68bb      	ldr	r3, [r7, #8]
 800360e:	6a1a      	ldr	r2, [r3, #32]
 8003610:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003612:	1ad2      	subs	r2, r2, r3
 8003614:	68bb      	ldr	r3, [r7, #8]
 8003616:	621a      	str	r2, [r3, #32]
 8003618:	e015      	b.n	8003646 <HAL_PCD_EP_DB_Transmit+0x2a2>
        }
        else if (ep->xfer_len_db == 0U)
 800361a:	68bb      	ldr	r3, [r7, #8]
 800361c:	6a1b      	ldr	r3, [r3, #32]
 800361e:	2b00      	cmp	r3, #0
 8003620:	d107      	bne.n	8003632 <HAL_PCD_EP_DB_Transmit+0x28e>
        {
          len = TxPctSize;
 8003622:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003626:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8003628:	68bb      	ldr	r3, [r7, #8]
 800362a:	2200      	movs	r2, #0
 800362c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8003630:	e009      	b.n	8003646 <HAL_PCD_EP_DB_Transmit+0x2a2>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8003632:	68bb      	ldr	r3, [r7, #8]
 8003634:	2200      	movs	r2, #0
 8003636:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 800363a:	68bb      	ldr	r3, [r7, #8]
 800363c:	6a1b      	ldr	r3, [r3, #32]
 800363e:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8003640:	68bb      	ldr	r3, [r7, #8]
 8003642:	2200      	movs	r2, #0
 8003644:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003646:	68bb      	ldr	r3, [r7, #8]
 8003648:	785b      	ldrb	r3, [r3, #1]
 800364a:	2b00      	cmp	r3, #0
 800364c:	d155      	bne.n	80036fa <HAL_PCD_EP_DB_Transmit+0x356>
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	63bb      	str	r3, [r7, #56]	; 0x38
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800365c:	b29b      	uxth	r3, r3
 800365e:	461a      	mov	r2, r3
 8003660:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003662:	4413      	add	r3, r2
 8003664:	63bb      	str	r3, [r7, #56]	; 0x38
 8003666:	68bb      	ldr	r3, [r7, #8]
 8003668:	781b      	ldrb	r3, [r3, #0]
 800366a:	00da      	lsls	r2, r3, #3
 800366c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800366e:	4413      	add	r3, r2
 8003670:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003674:	637b      	str	r3, [r7, #52]	; 0x34
 8003676:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003678:	2b3e      	cmp	r3, #62	; 0x3e
 800367a:	d916      	bls.n	80036aa <HAL_PCD_EP_DB_Transmit+0x306>
 800367c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800367e:	095b      	lsrs	r3, r3, #5
 8003680:	64bb      	str	r3, [r7, #72]	; 0x48
 8003682:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003684:	f003 031f 	and.w	r3, r3, #31
 8003688:	2b00      	cmp	r3, #0
 800368a:	d102      	bne.n	8003692 <HAL_PCD_EP_DB_Transmit+0x2ee>
 800368c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800368e:	3b01      	subs	r3, #1
 8003690:	64bb      	str	r3, [r7, #72]	; 0x48
 8003692:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003694:	b29b      	uxth	r3, r3
 8003696:	029b      	lsls	r3, r3, #10
 8003698:	b29b      	uxth	r3, r3
 800369a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800369e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80036a2:	b29a      	uxth	r2, r3
 80036a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80036a6:	801a      	strh	r2, [r3, #0]
 80036a8:	e043      	b.n	8003732 <HAL_PCD_EP_DB_Transmit+0x38e>
 80036aa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d112      	bne.n	80036d6 <HAL_PCD_EP_DB_Transmit+0x332>
 80036b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80036b2:	881b      	ldrh	r3, [r3, #0]
 80036b4:	b29b      	uxth	r3, r3
 80036b6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80036ba:	b29a      	uxth	r2, r3
 80036bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80036be:	801a      	strh	r2, [r3, #0]
 80036c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80036c2:	881b      	ldrh	r3, [r3, #0]
 80036c4:	b29b      	uxth	r3, r3
 80036c6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80036ca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80036ce:	b29a      	uxth	r2, r3
 80036d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80036d2:	801a      	strh	r2, [r3, #0]
 80036d4:	e02d      	b.n	8003732 <HAL_PCD_EP_DB_Transmit+0x38e>
 80036d6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80036d8:	085b      	lsrs	r3, r3, #1
 80036da:	64bb      	str	r3, [r7, #72]	; 0x48
 80036dc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80036de:	f003 0301 	and.w	r3, r3, #1
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d002      	beq.n	80036ec <HAL_PCD_EP_DB_Transmit+0x348>
 80036e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80036e8:	3301      	adds	r3, #1
 80036ea:	64bb      	str	r3, [r7, #72]	; 0x48
 80036ec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80036ee:	b29b      	uxth	r3, r3
 80036f0:	029b      	lsls	r3, r3, #10
 80036f2:	b29a      	uxth	r2, r3
 80036f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80036f6:	801a      	strh	r2, [r3, #0]
 80036f8:	e01b      	b.n	8003732 <HAL_PCD_EP_DB_Transmit+0x38e>
 80036fa:	68bb      	ldr	r3, [r7, #8]
 80036fc:	785b      	ldrb	r3, [r3, #1]
 80036fe:	2b01      	cmp	r3, #1
 8003700:	d117      	bne.n	8003732 <HAL_PCD_EP_DB_Transmit+0x38e>
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	643b      	str	r3, [r7, #64]	; 0x40
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003710:	b29b      	uxth	r3, r3
 8003712:	461a      	mov	r2, r3
 8003714:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003716:	4413      	add	r3, r2
 8003718:	643b      	str	r3, [r7, #64]	; 0x40
 800371a:	68bb      	ldr	r3, [r7, #8]
 800371c:	781b      	ldrb	r3, [r3, #0]
 800371e:	00da      	lsls	r2, r3, #3
 8003720:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003722:	4413      	add	r3, r2
 8003724:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003728:	63fb      	str	r3, [r7, #60]	; 0x3c
 800372a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800372c:	b29a      	uxth	r2, r3
 800372e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003730:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	6818      	ldr	r0, [r3, #0]
 8003736:	68bb      	ldr	r3, [r7, #8]
 8003738:	6959      	ldr	r1, [r3, #20]
 800373a:	68bb      	ldr	r3, [r7, #8]
 800373c:	891a      	ldrh	r2, [r3, #8]
 800373e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003740:	b29b      	uxth	r3, r3
 8003742:	f004 fa4c 	bl	8007bde <USB_WritePMA>
 8003746:	e1ce      	b.n	8003ae6 <HAL_PCD_EP_DB_Transmit+0x742>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003750:	b29b      	uxth	r3, r3
 8003752:	461a      	mov	r2, r3
 8003754:	68bb      	ldr	r3, [r7, #8]
 8003756:	781b      	ldrb	r3, [r3, #0]
 8003758:	00db      	lsls	r3, r3, #3
 800375a:	4413      	add	r3, r2
 800375c:	68fa      	ldr	r2, [r7, #12]
 800375e:	6812      	ldr	r2, [r2, #0]
 8003760:	4413      	add	r3, r2
 8003762:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003766:	881b      	ldrh	r3, [r3, #0]
 8003768:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800376c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxPctSize)
 8003770:	68bb      	ldr	r3, [r7, #8]
 8003772:	699a      	ldr	r2, [r3, #24]
 8003774:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003778:	429a      	cmp	r2, r3
 800377a:	d307      	bcc.n	800378c <HAL_PCD_EP_DB_Transmit+0x3e8>
    {
      ep->xfer_len -= TxPctSize;
 800377c:	68bb      	ldr	r3, [r7, #8]
 800377e:	699a      	ldr	r2, [r3, #24]
 8003780:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003784:	1ad2      	subs	r2, r2, r3
 8003786:	68bb      	ldr	r3, [r7, #8]
 8003788:	619a      	str	r2, [r3, #24]
 800378a:	e002      	b.n	8003792 <HAL_PCD_EP_DB_Transmit+0x3ee>
    }
    else
    {
      ep->xfer_len = 0U;
 800378c:	68bb      	ldr	r3, [r7, #8]
 800378e:	2200      	movs	r2, #0
 8003790:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8003792:	68bb      	ldr	r3, [r7, #8]
 8003794:	699b      	ldr	r3, [r3, #24]
 8003796:	2b00      	cmp	r3, #0
 8003798:	f040 80c4 	bne.w	8003924 <HAL_PCD_EP_DB_Transmit+0x580>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800379c:	68bb      	ldr	r3, [r7, #8]
 800379e:	785b      	ldrb	r3, [r3, #1]
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d126      	bne.n	80037f2 <HAL_PCD_EP_DB_Transmit+0x44e>
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	66bb      	str	r3, [r7, #104]	; 0x68
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80037b2:	b29b      	uxth	r3, r3
 80037b4:	461a      	mov	r2, r3
 80037b6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80037b8:	4413      	add	r3, r2
 80037ba:	66bb      	str	r3, [r7, #104]	; 0x68
 80037bc:	68bb      	ldr	r3, [r7, #8]
 80037be:	781b      	ldrb	r3, [r3, #0]
 80037c0:	00da      	lsls	r2, r3, #3
 80037c2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80037c4:	4413      	add	r3, r2
 80037c6:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80037ca:	667b      	str	r3, [r7, #100]	; 0x64
 80037cc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80037ce:	881b      	ldrh	r3, [r3, #0]
 80037d0:	b29b      	uxth	r3, r3
 80037d2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80037d6:	b29a      	uxth	r2, r3
 80037d8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80037da:	801a      	strh	r2, [r3, #0]
 80037dc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80037de:	881b      	ldrh	r3, [r3, #0]
 80037e0:	b29b      	uxth	r3, r3
 80037e2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80037e6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80037ea:	b29a      	uxth	r2, r3
 80037ec:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80037ee:	801a      	strh	r2, [r3, #0]
 80037f0:	e01a      	b.n	8003828 <HAL_PCD_EP_DB_Transmit+0x484>
 80037f2:	68bb      	ldr	r3, [r7, #8]
 80037f4:	785b      	ldrb	r3, [r3, #1]
 80037f6:	2b01      	cmp	r3, #1
 80037f8:	d116      	bne.n	8003828 <HAL_PCD_EP_DB_Transmit+0x484>
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	673b      	str	r3, [r7, #112]	; 0x70
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003808:	b29b      	uxth	r3, r3
 800380a:	461a      	mov	r2, r3
 800380c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800380e:	4413      	add	r3, r2
 8003810:	673b      	str	r3, [r7, #112]	; 0x70
 8003812:	68bb      	ldr	r3, [r7, #8]
 8003814:	781b      	ldrb	r3, [r3, #0]
 8003816:	00da      	lsls	r2, r3, #3
 8003818:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800381a:	4413      	add	r3, r2
 800381c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003820:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003822:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003824:	2200      	movs	r2, #0
 8003826:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800382e:	68bb      	ldr	r3, [r7, #8]
 8003830:	785b      	ldrb	r3, [r3, #1]
 8003832:	2b00      	cmp	r3, #0
 8003834:	d12f      	bne.n	8003896 <HAL_PCD_EP_DB_Transmit+0x4f2>
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003846:	b29b      	uxth	r3, r3
 8003848:	461a      	mov	r2, r3
 800384a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800384e:	4413      	add	r3, r2
 8003850:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003854:	68bb      	ldr	r3, [r7, #8]
 8003856:	781b      	ldrb	r3, [r3, #0]
 8003858:	00da      	lsls	r2, r3, #3
 800385a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800385e:	4413      	add	r3, r2
 8003860:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003864:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003868:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800386c:	881b      	ldrh	r3, [r3, #0]
 800386e:	b29b      	uxth	r3, r3
 8003870:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003874:	b29a      	uxth	r2, r3
 8003876:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800387a:	801a      	strh	r2, [r3, #0]
 800387c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003880:	881b      	ldrh	r3, [r3, #0]
 8003882:	b29b      	uxth	r3, r3
 8003884:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003888:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800388c:	b29a      	uxth	r2, r3
 800388e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003892:	801a      	strh	r2, [r3, #0]
 8003894:	e017      	b.n	80038c6 <HAL_PCD_EP_DB_Transmit+0x522>
 8003896:	68bb      	ldr	r3, [r7, #8]
 8003898:	785b      	ldrb	r3, [r3, #1]
 800389a:	2b01      	cmp	r3, #1
 800389c:	d113      	bne.n	80038c6 <HAL_PCD_EP_DB_Transmit+0x522>
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80038a6:	b29b      	uxth	r3, r3
 80038a8:	461a      	mov	r2, r3
 80038aa:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80038ac:	4413      	add	r3, r2
 80038ae:	67fb      	str	r3, [r7, #124]	; 0x7c
 80038b0:	68bb      	ldr	r3, [r7, #8]
 80038b2:	781b      	ldrb	r3, [r3, #0]
 80038b4:	00da      	lsls	r2, r3, #3
 80038b6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80038b8:	4413      	add	r3, r2
 80038ba:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80038be:	67bb      	str	r3, [r7, #120]	; 0x78
 80038c0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80038c2:	2200      	movs	r2, #0
 80038c4:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80038c6:	68bb      	ldr	r3, [r7, #8]
 80038c8:	781b      	ldrb	r3, [r3, #0]
 80038ca:	4619      	mov	r1, r3
 80038cc:	68f8      	ldr	r0, [r7, #12]
 80038ce:	f006 f8e6 	bl	8009a9e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80038d2:	88fb      	ldrh	r3, [r7, #6]
 80038d4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80038d8:	2b00      	cmp	r3, #0
 80038da:	f040 8104 	bne.w	8003ae6 <HAL_PCD_EP_DB_Transmit+0x742>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	461a      	mov	r2, r3
 80038e4:	68bb      	ldr	r3, [r7, #8]
 80038e6:	781b      	ldrb	r3, [r3, #0]
 80038e8:	009b      	lsls	r3, r3, #2
 80038ea:	4413      	add	r3, r2
 80038ec:	881b      	ldrh	r3, [r3, #0]
 80038ee:	b29b      	uxth	r3, r3
 80038f0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80038f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80038f8:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	461a      	mov	r2, r3
 8003902:	68bb      	ldr	r3, [r7, #8]
 8003904:	781b      	ldrb	r3, [r3, #0]
 8003906:	009b      	lsls	r3, r3, #2
 8003908:	441a      	add	r2, r3
 800390a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800390e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003912:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003916:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800391a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800391e:	b29b      	uxth	r3, r3
 8003920:	8013      	strh	r3, [r2, #0]
 8003922:	e0e0      	b.n	8003ae6 <HAL_PCD_EP_DB_Transmit+0x742>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003924:	88fb      	ldrh	r3, [r7, #6]
 8003926:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800392a:	2b00      	cmp	r3, #0
 800392c:	d121      	bne.n	8003972 <HAL_PCD_EP_DB_Transmit+0x5ce>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	461a      	mov	r2, r3
 8003934:	68bb      	ldr	r3, [r7, #8]
 8003936:	781b      	ldrb	r3, [r3, #0]
 8003938:	009b      	lsls	r3, r3, #2
 800393a:	4413      	add	r3, r2
 800393c:	881b      	ldrh	r3, [r3, #0]
 800393e:	b29b      	uxth	r3, r3
 8003940:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003944:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003948:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	461a      	mov	r2, r3
 8003952:	68bb      	ldr	r3, [r7, #8]
 8003954:	781b      	ldrb	r3, [r3, #0]
 8003956:	009b      	lsls	r3, r3, #2
 8003958:	441a      	add	r2, r3
 800395a:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800395e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003962:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003966:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800396a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800396e:	b29b      	uxth	r3, r3
 8003970:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8003972:	68bb      	ldr	r3, [r7, #8]
 8003974:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003978:	2b01      	cmp	r3, #1
 800397a:	f040 80b4 	bne.w	8003ae6 <HAL_PCD_EP_DB_Transmit+0x742>
      {
        ep->xfer_buff += TxPctSize;
 800397e:	68bb      	ldr	r3, [r7, #8]
 8003980:	695a      	ldr	r2, [r3, #20]
 8003982:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003986:	441a      	add	r2, r3
 8003988:	68bb      	ldr	r3, [r7, #8]
 800398a:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800398c:	68bb      	ldr	r3, [r7, #8]
 800398e:	69da      	ldr	r2, [r3, #28]
 8003990:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003994:	441a      	add	r2, r3
 8003996:	68bb      	ldr	r3, [r7, #8]
 8003998:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800399a:	68bb      	ldr	r3, [r7, #8]
 800399c:	6a1a      	ldr	r2, [r3, #32]
 800399e:	68bb      	ldr	r3, [r7, #8]
 80039a0:	691b      	ldr	r3, [r3, #16]
 80039a2:	429a      	cmp	r2, r3
 80039a4:	d309      	bcc.n	80039ba <HAL_PCD_EP_DB_Transmit+0x616>
        {
          len = ep->maxpacket;
 80039a6:	68bb      	ldr	r3, [r7, #8]
 80039a8:	691b      	ldr	r3, [r3, #16]
 80039aa:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 80039ac:	68bb      	ldr	r3, [r7, #8]
 80039ae:	6a1a      	ldr	r2, [r3, #32]
 80039b0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80039b2:	1ad2      	subs	r2, r2, r3
 80039b4:	68bb      	ldr	r3, [r7, #8]
 80039b6:	621a      	str	r2, [r3, #32]
 80039b8:	e015      	b.n	80039e6 <HAL_PCD_EP_DB_Transmit+0x642>
        }
        else if (ep->xfer_len_db == 0U)
 80039ba:	68bb      	ldr	r3, [r7, #8]
 80039bc:	6a1b      	ldr	r3, [r3, #32]
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d107      	bne.n	80039d2 <HAL_PCD_EP_DB_Transmit+0x62e>
        {
          len = TxPctSize;
 80039c2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80039c6:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 80039c8:	68bb      	ldr	r3, [r7, #8]
 80039ca:	2200      	movs	r2, #0
 80039cc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80039d0:	e009      	b.n	80039e6 <HAL_PCD_EP_DB_Transmit+0x642>
        }
        else
        {
          len = ep->xfer_len_db;
 80039d2:	68bb      	ldr	r3, [r7, #8]
 80039d4:	6a1b      	ldr	r3, [r3, #32]
 80039d6:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 80039d8:	68bb      	ldr	r3, [r7, #8]
 80039da:	2200      	movs	r2, #0
 80039dc:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 80039de:	68bb      	ldr	r3, [r7, #8]
 80039e0:	2200      	movs	r2, #0
 80039e2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	663b      	str	r3, [r7, #96]	; 0x60
 80039ec:	68bb      	ldr	r3, [r7, #8]
 80039ee:	785b      	ldrb	r3, [r3, #1]
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d155      	bne.n	8003aa0 <HAL_PCD_EP_DB_Transmit+0x6fc>
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	65bb      	str	r3, [r7, #88]	; 0x58
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003a02:	b29b      	uxth	r3, r3
 8003a04:	461a      	mov	r2, r3
 8003a06:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003a08:	4413      	add	r3, r2
 8003a0a:	65bb      	str	r3, [r7, #88]	; 0x58
 8003a0c:	68bb      	ldr	r3, [r7, #8]
 8003a0e:	781b      	ldrb	r3, [r3, #0]
 8003a10:	00da      	lsls	r2, r3, #3
 8003a12:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003a14:	4413      	add	r3, r2
 8003a16:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003a1a:	657b      	str	r3, [r7, #84]	; 0x54
 8003a1c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003a1e:	2b3e      	cmp	r3, #62	; 0x3e
 8003a20:	d916      	bls.n	8003a50 <HAL_PCD_EP_DB_Transmit+0x6ac>
 8003a22:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003a24:	095b      	lsrs	r3, r3, #5
 8003a26:	677b      	str	r3, [r7, #116]	; 0x74
 8003a28:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003a2a:	f003 031f 	and.w	r3, r3, #31
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d102      	bne.n	8003a38 <HAL_PCD_EP_DB_Transmit+0x694>
 8003a32:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003a34:	3b01      	subs	r3, #1
 8003a36:	677b      	str	r3, [r7, #116]	; 0x74
 8003a38:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003a3a:	b29b      	uxth	r3, r3
 8003a3c:	029b      	lsls	r3, r3, #10
 8003a3e:	b29b      	uxth	r3, r3
 8003a40:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003a44:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003a48:	b29a      	uxth	r2, r3
 8003a4a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003a4c:	801a      	strh	r2, [r3, #0]
 8003a4e:	e040      	b.n	8003ad2 <HAL_PCD_EP_DB_Transmit+0x72e>
 8003a50:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d112      	bne.n	8003a7c <HAL_PCD_EP_DB_Transmit+0x6d8>
 8003a56:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003a58:	881b      	ldrh	r3, [r3, #0]
 8003a5a:	b29b      	uxth	r3, r3
 8003a5c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003a60:	b29a      	uxth	r2, r3
 8003a62:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003a64:	801a      	strh	r2, [r3, #0]
 8003a66:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003a68:	881b      	ldrh	r3, [r3, #0]
 8003a6a:	b29b      	uxth	r3, r3
 8003a6c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003a70:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003a74:	b29a      	uxth	r2, r3
 8003a76:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003a78:	801a      	strh	r2, [r3, #0]
 8003a7a:	e02a      	b.n	8003ad2 <HAL_PCD_EP_DB_Transmit+0x72e>
 8003a7c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003a7e:	085b      	lsrs	r3, r3, #1
 8003a80:	677b      	str	r3, [r7, #116]	; 0x74
 8003a82:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003a84:	f003 0301 	and.w	r3, r3, #1
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d002      	beq.n	8003a92 <HAL_PCD_EP_DB_Transmit+0x6ee>
 8003a8c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003a8e:	3301      	adds	r3, #1
 8003a90:	677b      	str	r3, [r7, #116]	; 0x74
 8003a92:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003a94:	b29b      	uxth	r3, r3
 8003a96:	029b      	lsls	r3, r3, #10
 8003a98:	b29a      	uxth	r2, r3
 8003a9a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003a9c:	801a      	strh	r2, [r3, #0]
 8003a9e:	e018      	b.n	8003ad2 <HAL_PCD_EP_DB_Transmit+0x72e>
 8003aa0:	68bb      	ldr	r3, [r7, #8]
 8003aa2:	785b      	ldrb	r3, [r3, #1]
 8003aa4:	2b01      	cmp	r3, #1
 8003aa6:	d114      	bne.n	8003ad2 <HAL_PCD_EP_DB_Transmit+0x72e>
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003ab0:	b29b      	uxth	r3, r3
 8003ab2:	461a      	mov	r2, r3
 8003ab4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003ab6:	4413      	add	r3, r2
 8003ab8:	663b      	str	r3, [r7, #96]	; 0x60
 8003aba:	68bb      	ldr	r3, [r7, #8]
 8003abc:	781b      	ldrb	r3, [r3, #0]
 8003abe:	00da      	lsls	r2, r3, #3
 8003ac0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003ac2:	4413      	add	r3, r2
 8003ac4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003ac8:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003aca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003acc:	b29a      	uxth	r2, r3
 8003ace:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003ad0:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	6818      	ldr	r0, [r3, #0]
 8003ad6:	68bb      	ldr	r3, [r7, #8]
 8003ad8:	6959      	ldr	r1, [r3, #20]
 8003ada:	68bb      	ldr	r3, [r7, #8]
 8003adc:	895a      	ldrh	r2, [r3, #10]
 8003ade:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003ae0:	b29b      	uxth	r3, r3
 8003ae2:	f004 f87c 	bl	8007bde <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	461a      	mov	r2, r3
 8003aec:	68bb      	ldr	r3, [r7, #8]
 8003aee:	781b      	ldrb	r3, [r3, #0]
 8003af0:	009b      	lsls	r3, r3, #2
 8003af2:	4413      	add	r3, r2
 8003af4:	881b      	ldrh	r3, [r3, #0]
 8003af6:	b29b      	uxth	r3, r3
 8003af8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003afc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003b00:	823b      	strh	r3, [r7, #16]
 8003b02:	8a3b      	ldrh	r3, [r7, #16]
 8003b04:	f083 0310 	eor.w	r3, r3, #16
 8003b08:	823b      	strh	r3, [r7, #16]
 8003b0a:	8a3b      	ldrh	r3, [r7, #16]
 8003b0c:	f083 0320 	eor.w	r3, r3, #32
 8003b10:	823b      	strh	r3, [r7, #16]
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	461a      	mov	r2, r3
 8003b18:	68bb      	ldr	r3, [r7, #8]
 8003b1a:	781b      	ldrb	r3, [r3, #0]
 8003b1c:	009b      	lsls	r3, r3, #2
 8003b1e:	441a      	add	r2, r3
 8003b20:	8a3b      	ldrh	r3, [r7, #16]
 8003b22:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003b26:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003b2a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003b2e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003b32:	b29b      	uxth	r3, r3
 8003b34:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8003b36:	2300      	movs	r3, #0
}
 8003b38:	4618      	mov	r0, r3
 8003b3a:	3788      	adds	r7, #136	; 0x88
 8003b3c:	46bd      	mov	sp, r7
 8003b3e:	bd80      	pop	{r7, pc}

08003b40 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8003b40:	b480      	push	{r7}
 8003b42:	b087      	sub	sp, #28
 8003b44:	af00      	add	r7, sp, #0
 8003b46:	60f8      	str	r0, [r7, #12]
 8003b48:	607b      	str	r3, [r7, #4]
 8003b4a:	460b      	mov	r3, r1
 8003b4c:	817b      	strh	r3, [r7, #10]
 8003b4e:	4613      	mov	r3, r2
 8003b50:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8003b52:	897b      	ldrh	r3, [r7, #10]
 8003b54:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b58:	b29b      	uxth	r3, r3
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d00b      	beq.n	8003b76 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003b5e:	897b      	ldrh	r3, [r7, #10]
 8003b60:	f003 0307 	and.w	r3, r3, #7
 8003b64:	1c5a      	adds	r2, r3, #1
 8003b66:	4613      	mov	r3, r2
 8003b68:	009b      	lsls	r3, r3, #2
 8003b6a:	4413      	add	r3, r2
 8003b6c:	00db      	lsls	r3, r3, #3
 8003b6e:	68fa      	ldr	r2, [r7, #12]
 8003b70:	4413      	add	r3, r2
 8003b72:	617b      	str	r3, [r7, #20]
 8003b74:	e009      	b.n	8003b8a <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003b76:	897a      	ldrh	r2, [r7, #10]
 8003b78:	4613      	mov	r3, r2
 8003b7a:	009b      	lsls	r3, r3, #2
 8003b7c:	4413      	add	r3, r2
 8003b7e:	00db      	lsls	r3, r3, #3
 8003b80:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003b84:	68fa      	ldr	r2, [r7, #12]
 8003b86:	4413      	add	r3, r2
 8003b88:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8003b8a:	893b      	ldrh	r3, [r7, #8]
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d107      	bne.n	8003ba0 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8003b90:	697b      	ldr	r3, [r7, #20]
 8003b92:	2200      	movs	r2, #0
 8003b94:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	b29a      	uxth	r2, r3
 8003b9a:	697b      	ldr	r3, [r7, #20]
 8003b9c:	80da      	strh	r2, [r3, #6]
 8003b9e:	e00b      	b.n	8003bb8 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8003ba0:	697b      	ldr	r3, [r7, #20]
 8003ba2:	2201      	movs	r2, #1
 8003ba4:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	b29a      	uxth	r2, r3
 8003baa:	697b      	ldr	r3, [r7, #20]
 8003bac:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	0c1b      	lsrs	r3, r3, #16
 8003bb2:	b29a      	uxth	r2, r3
 8003bb4:	697b      	ldr	r3, [r7, #20]
 8003bb6:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8003bb8:	2300      	movs	r3, #0
}
 8003bba:	4618      	mov	r0, r3
 8003bbc:	371c      	adds	r7, #28
 8003bbe:	46bd      	mov	sp, r7
 8003bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc4:	4770      	bx	lr

08003bc6 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003bc6:	b480      	push	{r7}
 8003bc8:	b085      	sub	sp, #20
 8003bca:	af00      	add	r7, sp, #0
 8003bcc:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	2201      	movs	r2, #1
 8003bd8:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
  hpcd->LPM_State = LPM_L0;
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	2200      	movs	r2, #0
 8003be0:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8003bea:	b29b      	uxth	r3, r3
 8003bec:	f043 0301 	orr.w	r3, r3, #1
 8003bf0:	b29a      	uxth	r2, r3
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8003bfe:	b29b      	uxth	r3, r3
 8003c00:	f043 0302 	orr.w	r3, r3, #2
 8003c04:	b29a      	uxth	r2, r3
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 8003c0c:	2300      	movs	r3, #0
}
 8003c0e:	4618      	mov	r0, r3
 8003c10:	3714      	adds	r7, #20
 8003c12:	46bd      	mov	sp, r7
 8003c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c18:	4770      	bx	lr
	...

08003c1c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003c1c:	b480      	push	{r7}
 8003c1e:	b085      	sub	sp, #20
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d141      	bne.n	8003cae <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003c2a:	4b4b      	ldr	r3, [pc, #300]	; (8003d58 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003c32:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c36:	d131      	bne.n	8003c9c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003c38:	4b47      	ldr	r3, [pc, #284]	; (8003d58 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003c3a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003c3e:	4a46      	ldr	r2, [pc, #280]	; (8003d58 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003c40:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003c44:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003c48:	4b43      	ldr	r3, [pc, #268]	; (8003d58 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003c50:	4a41      	ldr	r2, [pc, #260]	; (8003d58 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003c52:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003c56:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003c58:	4b40      	ldr	r3, [pc, #256]	; (8003d5c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	2232      	movs	r2, #50	; 0x32
 8003c5e:	fb02 f303 	mul.w	r3, r2, r3
 8003c62:	4a3f      	ldr	r2, [pc, #252]	; (8003d60 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003c64:	fba2 2303 	umull	r2, r3, r2, r3
 8003c68:	0c9b      	lsrs	r3, r3, #18
 8003c6a:	3301      	adds	r3, #1
 8003c6c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003c6e:	e002      	b.n	8003c76 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	3b01      	subs	r3, #1
 8003c74:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003c76:	4b38      	ldr	r3, [pc, #224]	; (8003d58 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003c78:	695b      	ldr	r3, [r3, #20]
 8003c7a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c7e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c82:	d102      	bne.n	8003c8a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d1f2      	bne.n	8003c70 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003c8a:	4b33      	ldr	r3, [pc, #204]	; (8003d58 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003c8c:	695b      	ldr	r3, [r3, #20]
 8003c8e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c92:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c96:	d158      	bne.n	8003d4a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003c98:	2303      	movs	r3, #3
 8003c9a:	e057      	b.n	8003d4c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003c9c:	4b2e      	ldr	r3, [pc, #184]	; (8003d58 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003c9e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003ca2:	4a2d      	ldr	r2, [pc, #180]	; (8003d58 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003ca4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003ca8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003cac:	e04d      	b.n	8003d4a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003cb4:	d141      	bne.n	8003d3a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003cb6:	4b28      	ldr	r3, [pc, #160]	; (8003d58 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003cbe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003cc2:	d131      	bne.n	8003d28 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003cc4:	4b24      	ldr	r3, [pc, #144]	; (8003d58 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003cc6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003cca:	4a23      	ldr	r2, [pc, #140]	; (8003d58 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003ccc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003cd0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003cd4:	4b20      	ldr	r3, [pc, #128]	; (8003d58 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003cdc:	4a1e      	ldr	r2, [pc, #120]	; (8003d58 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003cde:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003ce2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003ce4:	4b1d      	ldr	r3, [pc, #116]	; (8003d5c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	2232      	movs	r2, #50	; 0x32
 8003cea:	fb02 f303 	mul.w	r3, r2, r3
 8003cee:	4a1c      	ldr	r2, [pc, #112]	; (8003d60 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003cf0:	fba2 2303 	umull	r2, r3, r2, r3
 8003cf4:	0c9b      	lsrs	r3, r3, #18
 8003cf6:	3301      	adds	r3, #1
 8003cf8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003cfa:	e002      	b.n	8003d02 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	3b01      	subs	r3, #1
 8003d00:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003d02:	4b15      	ldr	r3, [pc, #84]	; (8003d58 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d04:	695b      	ldr	r3, [r3, #20]
 8003d06:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d0a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d0e:	d102      	bne.n	8003d16 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d1f2      	bne.n	8003cfc <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003d16:	4b10      	ldr	r3, [pc, #64]	; (8003d58 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d18:	695b      	ldr	r3, [r3, #20]
 8003d1a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d1e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d22:	d112      	bne.n	8003d4a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003d24:	2303      	movs	r3, #3
 8003d26:	e011      	b.n	8003d4c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003d28:	4b0b      	ldr	r3, [pc, #44]	; (8003d58 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d2a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003d2e:	4a0a      	ldr	r2, [pc, #40]	; (8003d58 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d30:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d34:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003d38:	e007      	b.n	8003d4a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003d3a:	4b07      	ldr	r3, [pc, #28]	; (8003d58 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003d42:	4a05      	ldr	r2, [pc, #20]	; (8003d58 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d44:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003d48:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8003d4a:	2300      	movs	r3, #0
}
 8003d4c:	4618      	mov	r0, r3
 8003d4e:	3714      	adds	r7, #20
 8003d50:	46bd      	mov	sp, r7
 8003d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d56:	4770      	bx	lr
 8003d58:	40007000 	.word	0x40007000
 8003d5c:	20000000 	.word	0x20000000
 8003d60:	431bde83 	.word	0x431bde83

08003d64 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003d64:	b580      	push	{r7, lr}
 8003d66:	b088      	sub	sp, #32
 8003d68:	af00      	add	r7, sp, #0
 8003d6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d101      	bne.n	8003d76 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003d72:	2301      	movs	r3, #1
 8003d74:	e306      	b.n	8004384 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	f003 0301 	and.w	r3, r3, #1
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d075      	beq.n	8003e6e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003d82:	4b97      	ldr	r3, [pc, #604]	; (8003fe0 <HAL_RCC_OscConfig+0x27c>)
 8003d84:	689b      	ldr	r3, [r3, #8]
 8003d86:	f003 030c 	and.w	r3, r3, #12
 8003d8a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003d8c:	4b94      	ldr	r3, [pc, #592]	; (8003fe0 <HAL_RCC_OscConfig+0x27c>)
 8003d8e:	68db      	ldr	r3, [r3, #12]
 8003d90:	f003 0303 	and.w	r3, r3, #3
 8003d94:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8003d96:	69bb      	ldr	r3, [r7, #24]
 8003d98:	2b0c      	cmp	r3, #12
 8003d9a:	d102      	bne.n	8003da2 <HAL_RCC_OscConfig+0x3e>
 8003d9c:	697b      	ldr	r3, [r7, #20]
 8003d9e:	2b03      	cmp	r3, #3
 8003da0:	d002      	beq.n	8003da8 <HAL_RCC_OscConfig+0x44>
 8003da2:	69bb      	ldr	r3, [r7, #24]
 8003da4:	2b08      	cmp	r3, #8
 8003da6:	d10b      	bne.n	8003dc0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003da8:	4b8d      	ldr	r3, [pc, #564]	; (8003fe0 <HAL_RCC_OscConfig+0x27c>)
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d05b      	beq.n	8003e6c <HAL_RCC_OscConfig+0x108>
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	685b      	ldr	r3, [r3, #4]
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d157      	bne.n	8003e6c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003dbc:	2301      	movs	r3, #1
 8003dbe:	e2e1      	b.n	8004384 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	685b      	ldr	r3, [r3, #4]
 8003dc4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003dc8:	d106      	bne.n	8003dd8 <HAL_RCC_OscConfig+0x74>
 8003dca:	4b85      	ldr	r3, [pc, #532]	; (8003fe0 <HAL_RCC_OscConfig+0x27c>)
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	4a84      	ldr	r2, [pc, #528]	; (8003fe0 <HAL_RCC_OscConfig+0x27c>)
 8003dd0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003dd4:	6013      	str	r3, [r2, #0]
 8003dd6:	e01d      	b.n	8003e14 <HAL_RCC_OscConfig+0xb0>
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	685b      	ldr	r3, [r3, #4]
 8003ddc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003de0:	d10c      	bne.n	8003dfc <HAL_RCC_OscConfig+0x98>
 8003de2:	4b7f      	ldr	r3, [pc, #508]	; (8003fe0 <HAL_RCC_OscConfig+0x27c>)
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	4a7e      	ldr	r2, [pc, #504]	; (8003fe0 <HAL_RCC_OscConfig+0x27c>)
 8003de8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003dec:	6013      	str	r3, [r2, #0]
 8003dee:	4b7c      	ldr	r3, [pc, #496]	; (8003fe0 <HAL_RCC_OscConfig+0x27c>)
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	4a7b      	ldr	r2, [pc, #492]	; (8003fe0 <HAL_RCC_OscConfig+0x27c>)
 8003df4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003df8:	6013      	str	r3, [r2, #0]
 8003dfa:	e00b      	b.n	8003e14 <HAL_RCC_OscConfig+0xb0>
 8003dfc:	4b78      	ldr	r3, [pc, #480]	; (8003fe0 <HAL_RCC_OscConfig+0x27c>)
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	4a77      	ldr	r2, [pc, #476]	; (8003fe0 <HAL_RCC_OscConfig+0x27c>)
 8003e02:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003e06:	6013      	str	r3, [r2, #0]
 8003e08:	4b75      	ldr	r3, [pc, #468]	; (8003fe0 <HAL_RCC_OscConfig+0x27c>)
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	4a74      	ldr	r2, [pc, #464]	; (8003fe0 <HAL_RCC_OscConfig+0x27c>)
 8003e0e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003e12:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	685b      	ldr	r3, [r3, #4]
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d013      	beq.n	8003e44 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e1c:	f7fd f89e 	bl	8000f5c <HAL_GetTick>
 8003e20:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003e22:	e008      	b.n	8003e36 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003e24:	f7fd f89a 	bl	8000f5c <HAL_GetTick>
 8003e28:	4602      	mov	r2, r0
 8003e2a:	693b      	ldr	r3, [r7, #16]
 8003e2c:	1ad3      	subs	r3, r2, r3
 8003e2e:	2b64      	cmp	r3, #100	; 0x64
 8003e30:	d901      	bls.n	8003e36 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003e32:	2303      	movs	r3, #3
 8003e34:	e2a6      	b.n	8004384 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003e36:	4b6a      	ldr	r3, [pc, #424]	; (8003fe0 <HAL_RCC_OscConfig+0x27c>)
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d0f0      	beq.n	8003e24 <HAL_RCC_OscConfig+0xc0>
 8003e42:	e014      	b.n	8003e6e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e44:	f7fd f88a 	bl	8000f5c <HAL_GetTick>
 8003e48:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003e4a:	e008      	b.n	8003e5e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003e4c:	f7fd f886 	bl	8000f5c <HAL_GetTick>
 8003e50:	4602      	mov	r2, r0
 8003e52:	693b      	ldr	r3, [r7, #16]
 8003e54:	1ad3      	subs	r3, r2, r3
 8003e56:	2b64      	cmp	r3, #100	; 0x64
 8003e58:	d901      	bls.n	8003e5e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003e5a:	2303      	movs	r3, #3
 8003e5c:	e292      	b.n	8004384 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003e5e:	4b60      	ldr	r3, [pc, #384]	; (8003fe0 <HAL_RCC_OscConfig+0x27c>)
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d1f0      	bne.n	8003e4c <HAL_RCC_OscConfig+0xe8>
 8003e6a:	e000      	b.n	8003e6e <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e6c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	f003 0302 	and.w	r3, r3, #2
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d075      	beq.n	8003f66 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003e7a:	4b59      	ldr	r3, [pc, #356]	; (8003fe0 <HAL_RCC_OscConfig+0x27c>)
 8003e7c:	689b      	ldr	r3, [r3, #8]
 8003e7e:	f003 030c 	and.w	r3, r3, #12
 8003e82:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003e84:	4b56      	ldr	r3, [pc, #344]	; (8003fe0 <HAL_RCC_OscConfig+0x27c>)
 8003e86:	68db      	ldr	r3, [r3, #12]
 8003e88:	f003 0303 	and.w	r3, r3, #3
 8003e8c:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8003e8e:	69bb      	ldr	r3, [r7, #24]
 8003e90:	2b0c      	cmp	r3, #12
 8003e92:	d102      	bne.n	8003e9a <HAL_RCC_OscConfig+0x136>
 8003e94:	697b      	ldr	r3, [r7, #20]
 8003e96:	2b02      	cmp	r3, #2
 8003e98:	d002      	beq.n	8003ea0 <HAL_RCC_OscConfig+0x13c>
 8003e9a:	69bb      	ldr	r3, [r7, #24]
 8003e9c:	2b04      	cmp	r3, #4
 8003e9e:	d11f      	bne.n	8003ee0 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003ea0:	4b4f      	ldr	r3, [pc, #316]	; (8003fe0 <HAL_RCC_OscConfig+0x27c>)
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d005      	beq.n	8003eb8 <HAL_RCC_OscConfig+0x154>
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	68db      	ldr	r3, [r3, #12]
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d101      	bne.n	8003eb8 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8003eb4:	2301      	movs	r3, #1
 8003eb6:	e265      	b.n	8004384 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003eb8:	4b49      	ldr	r3, [pc, #292]	; (8003fe0 <HAL_RCC_OscConfig+0x27c>)
 8003eba:	685b      	ldr	r3, [r3, #4]
 8003ebc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	691b      	ldr	r3, [r3, #16]
 8003ec4:	061b      	lsls	r3, r3, #24
 8003ec6:	4946      	ldr	r1, [pc, #280]	; (8003fe0 <HAL_RCC_OscConfig+0x27c>)
 8003ec8:	4313      	orrs	r3, r2
 8003eca:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003ecc:	4b45      	ldr	r3, [pc, #276]	; (8003fe4 <HAL_RCC_OscConfig+0x280>)
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	4618      	mov	r0, r3
 8003ed2:	f7fc fff7 	bl	8000ec4 <HAL_InitTick>
 8003ed6:	4603      	mov	r3, r0
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d043      	beq.n	8003f64 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8003edc:	2301      	movs	r3, #1
 8003ede:	e251      	b.n	8004384 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	68db      	ldr	r3, [r3, #12]
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d023      	beq.n	8003f30 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003ee8:	4b3d      	ldr	r3, [pc, #244]	; (8003fe0 <HAL_RCC_OscConfig+0x27c>)
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	4a3c      	ldr	r2, [pc, #240]	; (8003fe0 <HAL_RCC_OscConfig+0x27c>)
 8003eee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ef2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ef4:	f7fd f832 	bl	8000f5c <HAL_GetTick>
 8003ef8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003efa:	e008      	b.n	8003f0e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003efc:	f7fd f82e 	bl	8000f5c <HAL_GetTick>
 8003f00:	4602      	mov	r2, r0
 8003f02:	693b      	ldr	r3, [r7, #16]
 8003f04:	1ad3      	subs	r3, r2, r3
 8003f06:	2b02      	cmp	r3, #2
 8003f08:	d901      	bls.n	8003f0e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8003f0a:	2303      	movs	r3, #3
 8003f0c:	e23a      	b.n	8004384 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003f0e:	4b34      	ldr	r3, [pc, #208]	; (8003fe0 <HAL_RCC_OscConfig+0x27c>)
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d0f0      	beq.n	8003efc <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f1a:	4b31      	ldr	r3, [pc, #196]	; (8003fe0 <HAL_RCC_OscConfig+0x27c>)
 8003f1c:	685b      	ldr	r3, [r3, #4]
 8003f1e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	691b      	ldr	r3, [r3, #16]
 8003f26:	061b      	lsls	r3, r3, #24
 8003f28:	492d      	ldr	r1, [pc, #180]	; (8003fe0 <HAL_RCC_OscConfig+0x27c>)
 8003f2a:	4313      	orrs	r3, r2
 8003f2c:	604b      	str	r3, [r1, #4]
 8003f2e:	e01a      	b.n	8003f66 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003f30:	4b2b      	ldr	r3, [pc, #172]	; (8003fe0 <HAL_RCC_OscConfig+0x27c>)
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	4a2a      	ldr	r2, [pc, #168]	; (8003fe0 <HAL_RCC_OscConfig+0x27c>)
 8003f36:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003f3a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f3c:	f7fd f80e 	bl	8000f5c <HAL_GetTick>
 8003f40:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003f42:	e008      	b.n	8003f56 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003f44:	f7fd f80a 	bl	8000f5c <HAL_GetTick>
 8003f48:	4602      	mov	r2, r0
 8003f4a:	693b      	ldr	r3, [r7, #16]
 8003f4c:	1ad3      	subs	r3, r2, r3
 8003f4e:	2b02      	cmp	r3, #2
 8003f50:	d901      	bls.n	8003f56 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8003f52:	2303      	movs	r3, #3
 8003f54:	e216      	b.n	8004384 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003f56:	4b22      	ldr	r3, [pc, #136]	; (8003fe0 <HAL_RCC_OscConfig+0x27c>)
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d1f0      	bne.n	8003f44 <HAL_RCC_OscConfig+0x1e0>
 8003f62:	e000      	b.n	8003f66 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003f64:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	f003 0308 	and.w	r3, r3, #8
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d041      	beq.n	8003ff6 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	695b      	ldr	r3, [r3, #20]
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d01c      	beq.n	8003fb4 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003f7a:	4b19      	ldr	r3, [pc, #100]	; (8003fe0 <HAL_RCC_OscConfig+0x27c>)
 8003f7c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003f80:	4a17      	ldr	r2, [pc, #92]	; (8003fe0 <HAL_RCC_OscConfig+0x27c>)
 8003f82:	f043 0301 	orr.w	r3, r3, #1
 8003f86:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f8a:	f7fc ffe7 	bl	8000f5c <HAL_GetTick>
 8003f8e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003f90:	e008      	b.n	8003fa4 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003f92:	f7fc ffe3 	bl	8000f5c <HAL_GetTick>
 8003f96:	4602      	mov	r2, r0
 8003f98:	693b      	ldr	r3, [r7, #16]
 8003f9a:	1ad3      	subs	r3, r2, r3
 8003f9c:	2b02      	cmp	r3, #2
 8003f9e:	d901      	bls.n	8003fa4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003fa0:	2303      	movs	r3, #3
 8003fa2:	e1ef      	b.n	8004384 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003fa4:	4b0e      	ldr	r3, [pc, #56]	; (8003fe0 <HAL_RCC_OscConfig+0x27c>)
 8003fa6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003faa:	f003 0302 	and.w	r3, r3, #2
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d0ef      	beq.n	8003f92 <HAL_RCC_OscConfig+0x22e>
 8003fb2:	e020      	b.n	8003ff6 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003fb4:	4b0a      	ldr	r3, [pc, #40]	; (8003fe0 <HAL_RCC_OscConfig+0x27c>)
 8003fb6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003fba:	4a09      	ldr	r2, [pc, #36]	; (8003fe0 <HAL_RCC_OscConfig+0x27c>)
 8003fbc:	f023 0301 	bic.w	r3, r3, #1
 8003fc0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003fc4:	f7fc ffca 	bl	8000f5c <HAL_GetTick>
 8003fc8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003fca:	e00d      	b.n	8003fe8 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003fcc:	f7fc ffc6 	bl	8000f5c <HAL_GetTick>
 8003fd0:	4602      	mov	r2, r0
 8003fd2:	693b      	ldr	r3, [r7, #16]
 8003fd4:	1ad3      	subs	r3, r2, r3
 8003fd6:	2b02      	cmp	r3, #2
 8003fd8:	d906      	bls.n	8003fe8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003fda:	2303      	movs	r3, #3
 8003fdc:	e1d2      	b.n	8004384 <HAL_RCC_OscConfig+0x620>
 8003fde:	bf00      	nop
 8003fe0:	40021000 	.word	0x40021000
 8003fe4:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003fe8:	4b8c      	ldr	r3, [pc, #560]	; (800421c <HAL_RCC_OscConfig+0x4b8>)
 8003fea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003fee:	f003 0302 	and.w	r3, r3, #2
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d1ea      	bne.n	8003fcc <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	f003 0304 	and.w	r3, r3, #4
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	f000 80a6 	beq.w	8004150 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004004:	2300      	movs	r3, #0
 8004006:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004008:	4b84      	ldr	r3, [pc, #528]	; (800421c <HAL_RCC_OscConfig+0x4b8>)
 800400a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800400c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004010:	2b00      	cmp	r3, #0
 8004012:	d101      	bne.n	8004018 <HAL_RCC_OscConfig+0x2b4>
 8004014:	2301      	movs	r3, #1
 8004016:	e000      	b.n	800401a <HAL_RCC_OscConfig+0x2b6>
 8004018:	2300      	movs	r3, #0
 800401a:	2b00      	cmp	r3, #0
 800401c:	d00d      	beq.n	800403a <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800401e:	4b7f      	ldr	r3, [pc, #508]	; (800421c <HAL_RCC_OscConfig+0x4b8>)
 8004020:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004022:	4a7e      	ldr	r2, [pc, #504]	; (800421c <HAL_RCC_OscConfig+0x4b8>)
 8004024:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004028:	6593      	str	r3, [r2, #88]	; 0x58
 800402a:	4b7c      	ldr	r3, [pc, #496]	; (800421c <HAL_RCC_OscConfig+0x4b8>)
 800402c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800402e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004032:	60fb      	str	r3, [r7, #12]
 8004034:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8004036:	2301      	movs	r3, #1
 8004038:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800403a:	4b79      	ldr	r3, [pc, #484]	; (8004220 <HAL_RCC_OscConfig+0x4bc>)
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004042:	2b00      	cmp	r3, #0
 8004044:	d118      	bne.n	8004078 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004046:	4b76      	ldr	r3, [pc, #472]	; (8004220 <HAL_RCC_OscConfig+0x4bc>)
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	4a75      	ldr	r2, [pc, #468]	; (8004220 <HAL_RCC_OscConfig+0x4bc>)
 800404c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004050:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004052:	f7fc ff83 	bl	8000f5c <HAL_GetTick>
 8004056:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004058:	e008      	b.n	800406c <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800405a:	f7fc ff7f 	bl	8000f5c <HAL_GetTick>
 800405e:	4602      	mov	r2, r0
 8004060:	693b      	ldr	r3, [r7, #16]
 8004062:	1ad3      	subs	r3, r2, r3
 8004064:	2b02      	cmp	r3, #2
 8004066:	d901      	bls.n	800406c <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8004068:	2303      	movs	r3, #3
 800406a:	e18b      	b.n	8004384 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800406c:	4b6c      	ldr	r3, [pc, #432]	; (8004220 <HAL_RCC_OscConfig+0x4bc>)
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004074:	2b00      	cmp	r3, #0
 8004076:	d0f0      	beq.n	800405a <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	689b      	ldr	r3, [r3, #8]
 800407c:	2b01      	cmp	r3, #1
 800407e:	d108      	bne.n	8004092 <HAL_RCC_OscConfig+0x32e>
 8004080:	4b66      	ldr	r3, [pc, #408]	; (800421c <HAL_RCC_OscConfig+0x4b8>)
 8004082:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004086:	4a65      	ldr	r2, [pc, #404]	; (800421c <HAL_RCC_OscConfig+0x4b8>)
 8004088:	f043 0301 	orr.w	r3, r3, #1
 800408c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004090:	e024      	b.n	80040dc <HAL_RCC_OscConfig+0x378>
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	689b      	ldr	r3, [r3, #8]
 8004096:	2b05      	cmp	r3, #5
 8004098:	d110      	bne.n	80040bc <HAL_RCC_OscConfig+0x358>
 800409a:	4b60      	ldr	r3, [pc, #384]	; (800421c <HAL_RCC_OscConfig+0x4b8>)
 800409c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040a0:	4a5e      	ldr	r2, [pc, #376]	; (800421c <HAL_RCC_OscConfig+0x4b8>)
 80040a2:	f043 0304 	orr.w	r3, r3, #4
 80040a6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80040aa:	4b5c      	ldr	r3, [pc, #368]	; (800421c <HAL_RCC_OscConfig+0x4b8>)
 80040ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040b0:	4a5a      	ldr	r2, [pc, #360]	; (800421c <HAL_RCC_OscConfig+0x4b8>)
 80040b2:	f043 0301 	orr.w	r3, r3, #1
 80040b6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80040ba:	e00f      	b.n	80040dc <HAL_RCC_OscConfig+0x378>
 80040bc:	4b57      	ldr	r3, [pc, #348]	; (800421c <HAL_RCC_OscConfig+0x4b8>)
 80040be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040c2:	4a56      	ldr	r2, [pc, #344]	; (800421c <HAL_RCC_OscConfig+0x4b8>)
 80040c4:	f023 0301 	bic.w	r3, r3, #1
 80040c8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80040cc:	4b53      	ldr	r3, [pc, #332]	; (800421c <HAL_RCC_OscConfig+0x4b8>)
 80040ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040d2:	4a52      	ldr	r2, [pc, #328]	; (800421c <HAL_RCC_OscConfig+0x4b8>)
 80040d4:	f023 0304 	bic.w	r3, r3, #4
 80040d8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	689b      	ldr	r3, [r3, #8]
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d016      	beq.n	8004112 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040e4:	f7fc ff3a 	bl	8000f5c <HAL_GetTick>
 80040e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80040ea:	e00a      	b.n	8004102 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80040ec:	f7fc ff36 	bl	8000f5c <HAL_GetTick>
 80040f0:	4602      	mov	r2, r0
 80040f2:	693b      	ldr	r3, [r7, #16]
 80040f4:	1ad3      	subs	r3, r2, r3
 80040f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80040fa:	4293      	cmp	r3, r2
 80040fc:	d901      	bls.n	8004102 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80040fe:	2303      	movs	r3, #3
 8004100:	e140      	b.n	8004384 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004102:	4b46      	ldr	r3, [pc, #280]	; (800421c <HAL_RCC_OscConfig+0x4b8>)
 8004104:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004108:	f003 0302 	and.w	r3, r3, #2
 800410c:	2b00      	cmp	r3, #0
 800410e:	d0ed      	beq.n	80040ec <HAL_RCC_OscConfig+0x388>
 8004110:	e015      	b.n	800413e <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004112:	f7fc ff23 	bl	8000f5c <HAL_GetTick>
 8004116:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004118:	e00a      	b.n	8004130 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800411a:	f7fc ff1f 	bl	8000f5c <HAL_GetTick>
 800411e:	4602      	mov	r2, r0
 8004120:	693b      	ldr	r3, [r7, #16]
 8004122:	1ad3      	subs	r3, r2, r3
 8004124:	f241 3288 	movw	r2, #5000	; 0x1388
 8004128:	4293      	cmp	r3, r2
 800412a:	d901      	bls.n	8004130 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 800412c:	2303      	movs	r3, #3
 800412e:	e129      	b.n	8004384 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004130:	4b3a      	ldr	r3, [pc, #232]	; (800421c <HAL_RCC_OscConfig+0x4b8>)
 8004132:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004136:	f003 0302 	and.w	r3, r3, #2
 800413a:	2b00      	cmp	r3, #0
 800413c:	d1ed      	bne.n	800411a <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800413e:	7ffb      	ldrb	r3, [r7, #31]
 8004140:	2b01      	cmp	r3, #1
 8004142:	d105      	bne.n	8004150 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004144:	4b35      	ldr	r3, [pc, #212]	; (800421c <HAL_RCC_OscConfig+0x4b8>)
 8004146:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004148:	4a34      	ldr	r2, [pc, #208]	; (800421c <HAL_RCC_OscConfig+0x4b8>)
 800414a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800414e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	f003 0320 	and.w	r3, r3, #32
 8004158:	2b00      	cmp	r3, #0
 800415a:	d03c      	beq.n	80041d6 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	699b      	ldr	r3, [r3, #24]
 8004160:	2b00      	cmp	r3, #0
 8004162:	d01c      	beq.n	800419e <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004164:	4b2d      	ldr	r3, [pc, #180]	; (800421c <HAL_RCC_OscConfig+0x4b8>)
 8004166:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800416a:	4a2c      	ldr	r2, [pc, #176]	; (800421c <HAL_RCC_OscConfig+0x4b8>)
 800416c:	f043 0301 	orr.w	r3, r3, #1
 8004170:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004174:	f7fc fef2 	bl	8000f5c <HAL_GetTick>
 8004178:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800417a:	e008      	b.n	800418e <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800417c:	f7fc feee 	bl	8000f5c <HAL_GetTick>
 8004180:	4602      	mov	r2, r0
 8004182:	693b      	ldr	r3, [r7, #16]
 8004184:	1ad3      	subs	r3, r2, r3
 8004186:	2b02      	cmp	r3, #2
 8004188:	d901      	bls.n	800418e <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800418a:	2303      	movs	r3, #3
 800418c:	e0fa      	b.n	8004384 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800418e:	4b23      	ldr	r3, [pc, #140]	; (800421c <HAL_RCC_OscConfig+0x4b8>)
 8004190:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004194:	f003 0302 	and.w	r3, r3, #2
 8004198:	2b00      	cmp	r3, #0
 800419a:	d0ef      	beq.n	800417c <HAL_RCC_OscConfig+0x418>
 800419c:	e01b      	b.n	80041d6 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800419e:	4b1f      	ldr	r3, [pc, #124]	; (800421c <HAL_RCC_OscConfig+0x4b8>)
 80041a0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80041a4:	4a1d      	ldr	r2, [pc, #116]	; (800421c <HAL_RCC_OscConfig+0x4b8>)
 80041a6:	f023 0301 	bic.w	r3, r3, #1
 80041aa:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041ae:	f7fc fed5 	bl	8000f5c <HAL_GetTick>
 80041b2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80041b4:	e008      	b.n	80041c8 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80041b6:	f7fc fed1 	bl	8000f5c <HAL_GetTick>
 80041ba:	4602      	mov	r2, r0
 80041bc:	693b      	ldr	r3, [r7, #16]
 80041be:	1ad3      	subs	r3, r2, r3
 80041c0:	2b02      	cmp	r3, #2
 80041c2:	d901      	bls.n	80041c8 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80041c4:	2303      	movs	r3, #3
 80041c6:	e0dd      	b.n	8004384 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80041c8:	4b14      	ldr	r3, [pc, #80]	; (800421c <HAL_RCC_OscConfig+0x4b8>)
 80041ca:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80041ce:	f003 0302 	and.w	r3, r3, #2
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d1ef      	bne.n	80041b6 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	69db      	ldr	r3, [r3, #28]
 80041da:	2b00      	cmp	r3, #0
 80041dc:	f000 80d1 	beq.w	8004382 <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80041e0:	4b0e      	ldr	r3, [pc, #56]	; (800421c <HAL_RCC_OscConfig+0x4b8>)
 80041e2:	689b      	ldr	r3, [r3, #8]
 80041e4:	f003 030c 	and.w	r3, r3, #12
 80041e8:	2b0c      	cmp	r3, #12
 80041ea:	f000 808b 	beq.w	8004304 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	69db      	ldr	r3, [r3, #28]
 80041f2:	2b02      	cmp	r3, #2
 80041f4:	d15e      	bne.n	80042b4 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80041f6:	4b09      	ldr	r3, [pc, #36]	; (800421c <HAL_RCC_OscConfig+0x4b8>)
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	4a08      	ldr	r2, [pc, #32]	; (800421c <HAL_RCC_OscConfig+0x4b8>)
 80041fc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004200:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004202:	f7fc feab 	bl	8000f5c <HAL_GetTick>
 8004206:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004208:	e00c      	b.n	8004224 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800420a:	f7fc fea7 	bl	8000f5c <HAL_GetTick>
 800420e:	4602      	mov	r2, r0
 8004210:	693b      	ldr	r3, [r7, #16]
 8004212:	1ad3      	subs	r3, r2, r3
 8004214:	2b02      	cmp	r3, #2
 8004216:	d905      	bls.n	8004224 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8004218:	2303      	movs	r3, #3
 800421a:	e0b3      	b.n	8004384 <HAL_RCC_OscConfig+0x620>
 800421c:	40021000 	.word	0x40021000
 8004220:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004224:	4b59      	ldr	r3, [pc, #356]	; (800438c <HAL_RCC_OscConfig+0x628>)
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800422c:	2b00      	cmp	r3, #0
 800422e:	d1ec      	bne.n	800420a <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004230:	4b56      	ldr	r3, [pc, #344]	; (800438c <HAL_RCC_OscConfig+0x628>)
 8004232:	68da      	ldr	r2, [r3, #12]
 8004234:	4b56      	ldr	r3, [pc, #344]	; (8004390 <HAL_RCC_OscConfig+0x62c>)
 8004236:	4013      	ands	r3, r2
 8004238:	687a      	ldr	r2, [r7, #4]
 800423a:	6a11      	ldr	r1, [r2, #32]
 800423c:	687a      	ldr	r2, [r7, #4]
 800423e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004240:	3a01      	subs	r2, #1
 8004242:	0112      	lsls	r2, r2, #4
 8004244:	4311      	orrs	r1, r2
 8004246:	687a      	ldr	r2, [r7, #4]
 8004248:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800424a:	0212      	lsls	r2, r2, #8
 800424c:	4311      	orrs	r1, r2
 800424e:	687a      	ldr	r2, [r7, #4]
 8004250:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004252:	0852      	lsrs	r2, r2, #1
 8004254:	3a01      	subs	r2, #1
 8004256:	0552      	lsls	r2, r2, #21
 8004258:	4311      	orrs	r1, r2
 800425a:	687a      	ldr	r2, [r7, #4]
 800425c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800425e:	0852      	lsrs	r2, r2, #1
 8004260:	3a01      	subs	r2, #1
 8004262:	0652      	lsls	r2, r2, #25
 8004264:	4311      	orrs	r1, r2
 8004266:	687a      	ldr	r2, [r7, #4]
 8004268:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800426a:	06d2      	lsls	r2, r2, #27
 800426c:	430a      	orrs	r2, r1
 800426e:	4947      	ldr	r1, [pc, #284]	; (800438c <HAL_RCC_OscConfig+0x628>)
 8004270:	4313      	orrs	r3, r2
 8004272:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004274:	4b45      	ldr	r3, [pc, #276]	; (800438c <HAL_RCC_OscConfig+0x628>)
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	4a44      	ldr	r2, [pc, #272]	; (800438c <HAL_RCC_OscConfig+0x628>)
 800427a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800427e:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004280:	4b42      	ldr	r3, [pc, #264]	; (800438c <HAL_RCC_OscConfig+0x628>)
 8004282:	68db      	ldr	r3, [r3, #12]
 8004284:	4a41      	ldr	r2, [pc, #260]	; (800438c <HAL_RCC_OscConfig+0x628>)
 8004286:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800428a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800428c:	f7fc fe66 	bl	8000f5c <HAL_GetTick>
 8004290:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004292:	e008      	b.n	80042a6 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004294:	f7fc fe62 	bl	8000f5c <HAL_GetTick>
 8004298:	4602      	mov	r2, r0
 800429a:	693b      	ldr	r3, [r7, #16]
 800429c:	1ad3      	subs	r3, r2, r3
 800429e:	2b02      	cmp	r3, #2
 80042a0:	d901      	bls.n	80042a6 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80042a2:	2303      	movs	r3, #3
 80042a4:	e06e      	b.n	8004384 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80042a6:	4b39      	ldr	r3, [pc, #228]	; (800438c <HAL_RCC_OscConfig+0x628>)
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d0f0      	beq.n	8004294 <HAL_RCC_OscConfig+0x530>
 80042b2:	e066      	b.n	8004382 <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80042b4:	4b35      	ldr	r3, [pc, #212]	; (800438c <HAL_RCC_OscConfig+0x628>)
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	4a34      	ldr	r2, [pc, #208]	; (800438c <HAL_RCC_OscConfig+0x628>)
 80042ba:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80042be:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80042c0:	4b32      	ldr	r3, [pc, #200]	; (800438c <HAL_RCC_OscConfig+0x628>)
 80042c2:	68db      	ldr	r3, [r3, #12]
 80042c4:	4a31      	ldr	r2, [pc, #196]	; (800438c <HAL_RCC_OscConfig+0x628>)
 80042c6:	f023 0303 	bic.w	r3, r3, #3
 80042ca:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80042cc:	4b2f      	ldr	r3, [pc, #188]	; (800438c <HAL_RCC_OscConfig+0x628>)
 80042ce:	68db      	ldr	r3, [r3, #12]
 80042d0:	4a2e      	ldr	r2, [pc, #184]	; (800438c <HAL_RCC_OscConfig+0x628>)
 80042d2:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80042d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80042da:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042dc:	f7fc fe3e 	bl	8000f5c <HAL_GetTick>
 80042e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80042e2:	e008      	b.n	80042f6 <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80042e4:	f7fc fe3a 	bl	8000f5c <HAL_GetTick>
 80042e8:	4602      	mov	r2, r0
 80042ea:	693b      	ldr	r3, [r7, #16]
 80042ec:	1ad3      	subs	r3, r2, r3
 80042ee:	2b02      	cmp	r3, #2
 80042f0:	d901      	bls.n	80042f6 <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 80042f2:	2303      	movs	r3, #3
 80042f4:	e046      	b.n	8004384 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80042f6:	4b25      	ldr	r3, [pc, #148]	; (800438c <HAL_RCC_OscConfig+0x628>)
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d1f0      	bne.n	80042e4 <HAL_RCC_OscConfig+0x580>
 8004302:	e03e      	b.n	8004382 <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	69db      	ldr	r3, [r3, #28]
 8004308:	2b01      	cmp	r3, #1
 800430a:	d101      	bne.n	8004310 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 800430c:	2301      	movs	r3, #1
 800430e:	e039      	b.n	8004384 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8004310:	4b1e      	ldr	r3, [pc, #120]	; (800438c <HAL_RCC_OscConfig+0x628>)
 8004312:	68db      	ldr	r3, [r3, #12]
 8004314:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004316:	697b      	ldr	r3, [r7, #20]
 8004318:	f003 0203 	and.w	r2, r3, #3
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	6a1b      	ldr	r3, [r3, #32]
 8004320:	429a      	cmp	r2, r3
 8004322:	d12c      	bne.n	800437e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004324:	697b      	ldr	r3, [r7, #20]
 8004326:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800432e:	3b01      	subs	r3, #1
 8004330:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004332:	429a      	cmp	r2, r3
 8004334:	d123      	bne.n	800437e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004336:	697b      	ldr	r3, [r7, #20]
 8004338:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004340:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004342:	429a      	cmp	r2, r3
 8004344:	d11b      	bne.n	800437e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004346:	697b      	ldr	r3, [r7, #20]
 8004348:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004350:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004352:	429a      	cmp	r2, r3
 8004354:	d113      	bne.n	800437e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004356:	697b      	ldr	r3, [r7, #20]
 8004358:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004360:	085b      	lsrs	r3, r3, #1
 8004362:	3b01      	subs	r3, #1
 8004364:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004366:	429a      	cmp	r2, r3
 8004368:	d109      	bne.n	800437e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800436a:	697b      	ldr	r3, [r7, #20]
 800436c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004374:	085b      	lsrs	r3, r3, #1
 8004376:	3b01      	subs	r3, #1
 8004378:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800437a:	429a      	cmp	r2, r3
 800437c:	d001      	beq.n	8004382 <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 800437e:	2301      	movs	r3, #1
 8004380:	e000      	b.n	8004384 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 8004382:	2300      	movs	r3, #0
}
 8004384:	4618      	mov	r0, r3
 8004386:	3720      	adds	r7, #32
 8004388:	46bd      	mov	sp, r7
 800438a:	bd80      	pop	{r7, pc}
 800438c:	40021000 	.word	0x40021000
 8004390:	019f800c 	.word	0x019f800c

08004394 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004394:	b580      	push	{r7, lr}
 8004396:	b086      	sub	sp, #24
 8004398:	af00      	add	r7, sp, #0
 800439a:	6078      	str	r0, [r7, #4]
 800439c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800439e:	2300      	movs	r3, #0
 80043a0:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d101      	bne.n	80043ac <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80043a8:	2301      	movs	r3, #1
 80043aa:	e11e      	b.n	80045ea <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80043ac:	4b91      	ldr	r3, [pc, #580]	; (80045f4 <HAL_RCC_ClockConfig+0x260>)
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	f003 030f 	and.w	r3, r3, #15
 80043b4:	683a      	ldr	r2, [r7, #0]
 80043b6:	429a      	cmp	r2, r3
 80043b8:	d910      	bls.n	80043dc <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80043ba:	4b8e      	ldr	r3, [pc, #568]	; (80045f4 <HAL_RCC_ClockConfig+0x260>)
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	f023 020f 	bic.w	r2, r3, #15
 80043c2:	498c      	ldr	r1, [pc, #560]	; (80045f4 <HAL_RCC_ClockConfig+0x260>)
 80043c4:	683b      	ldr	r3, [r7, #0]
 80043c6:	4313      	orrs	r3, r2
 80043c8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80043ca:	4b8a      	ldr	r3, [pc, #552]	; (80045f4 <HAL_RCC_ClockConfig+0x260>)
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	f003 030f 	and.w	r3, r3, #15
 80043d2:	683a      	ldr	r2, [r7, #0]
 80043d4:	429a      	cmp	r2, r3
 80043d6:	d001      	beq.n	80043dc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80043d8:	2301      	movs	r3, #1
 80043da:	e106      	b.n	80045ea <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	f003 0301 	and.w	r3, r3, #1
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d073      	beq.n	80044d0 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	685b      	ldr	r3, [r3, #4]
 80043ec:	2b03      	cmp	r3, #3
 80043ee:	d129      	bne.n	8004444 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80043f0:	4b81      	ldr	r3, [pc, #516]	; (80045f8 <HAL_RCC_ClockConfig+0x264>)
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d101      	bne.n	8004400 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80043fc:	2301      	movs	r3, #1
 80043fe:	e0f4      	b.n	80045ea <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8004400:	f000 f99e 	bl	8004740 <RCC_GetSysClockFreqFromPLLSource>
 8004404:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8004406:	693b      	ldr	r3, [r7, #16]
 8004408:	4a7c      	ldr	r2, [pc, #496]	; (80045fc <HAL_RCC_ClockConfig+0x268>)
 800440a:	4293      	cmp	r3, r2
 800440c:	d93f      	bls.n	800448e <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800440e:	4b7a      	ldr	r3, [pc, #488]	; (80045f8 <HAL_RCC_ClockConfig+0x264>)
 8004410:	689b      	ldr	r3, [r3, #8]
 8004412:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004416:	2b00      	cmp	r3, #0
 8004418:	d009      	beq.n	800442e <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004422:	2b00      	cmp	r3, #0
 8004424:	d033      	beq.n	800448e <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800442a:	2b00      	cmp	r3, #0
 800442c:	d12f      	bne.n	800448e <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800442e:	4b72      	ldr	r3, [pc, #456]	; (80045f8 <HAL_RCC_ClockConfig+0x264>)
 8004430:	689b      	ldr	r3, [r3, #8]
 8004432:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004436:	4a70      	ldr	r2, [pc, #448]	; (80045f8 <HAL_RCC_ClockConfig+0x264>)
 8004438:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800443c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800443e:	2380      	movs	r3, #128	; 0x80
 8004440:	617b      	str	r3, [r7, #20]
 8004442:	e024      	b.n	800448e <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	685b      	ldr	r3, [r3, #4]
 8004448:	2b02      	cmp	r3, #2
 800444a:	d107      	bne.n	800445c <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800444c:	4b6a      	ldr	r3, [pc, #424]	; (80045f8 <HAL_RCC_ClockConfig+0x264>)
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004454:	2b00      	cmp	r3, #0
 8004456:	d109      	bne.n	800446c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004458:	2301      	movs	r3, #1
 800445a:	e0c6      	b.n	80045ea <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800445c:	4b66      	ldr	r3, [pc, #408]	; (80045f8 <HAL_RCC_ClockConfig+0x264>)
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004464:	2b00      	cmp	r3, #0
 8004466:	d101      	bne.n	800446c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004468:	2301      	movs	r3, #1
 800446a:	e0be      	b.n	80045ea <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 800446c:	f000 f8ce 	bl	800460c <HAL_RCC_GetSysClockFreq>
 8004470:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8004472:	693b      	ldr	r3, [r7, #16]
 8004474:	4a61      	ldr	r2, [pc, #388]	; (80045fc <HAL_RCC_ClockConfig+0x268>)
 8004476:	4293      	cmp	r3, r2
 8004478:	d909      	bls.n	800448e <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800447a:	4b5f      	ldr	r3, [pc, #380]	; (80045f8 <HAL_RCC_ClockConfig+0x264>)
 800447c:	689b      	ldr	r3, [r3, #8]
 800447e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004482:	4a5d      	ldr	r2, [pc, #372]	; (80045f8 <HAL_RCC_ClockConfig+0x264>)
 8004484:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004488:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800448a:	2380      	movs	r3, #128	; 0x80
 800448c:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800448e:	4b5a      	ldr	r3, [pc, #360]	; (80045f8 <HAL_RCC_ClockConfig+0x264>)
 8004490:	689b      	ldr	r3, [r3, #8]
 8004492:	f023 0203 	bic.w	r2, r3, #3
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	685b      	ldr	r3, [r3, #4]
 800449a:	4957      	ldr	r1, [pc, #348]	; (80045f8 <HAL_RCC_ClockConfig+0x264>)
 800449c:	4313      	orrs	r3, r2
 800449e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80044a0:	f7fc fd5c 	bl	8000f5c <HAL_GetTick>
 80044a4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80044a6:	e00a      	b.n	80044be <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80044a8:	f7fc fd58 	bl	8000f5c <HAL_GetTick>
 80044ac:	4602      	mov	r2, r0
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	1ad3      	subs	r3, r2, r3
 80044b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80044b6:	4293      	cmp	r3, r2
 80044b8:	d901      	bls.n	80044be <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80044ba:	2303      	movs	r3, #3
 80044bc:	e095      	b.n	80045ea <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80044be:	4b4e      	ldr	r3, [pc, #312]	; (80045f8 <HAL_RCC_ClockConfig+0x264>)
 80044c0:	689b      	ldr	r3, [r3, #8]
 80044c2:	f003 020c 	and.w	r2, r3, #12
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	685b      	ldr	r3, [r3, #4]
 80044ca:	009b      	lsls	r3, r3, #2
 80044cc:	429a      	cmp	r2, r3
 80044ce:	d1eb      	bne.n	80044a8 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	f003 0302 	and.w	r3, r3, #2
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d023      	beq.n	8004524 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	f003 0304 	and.w	r3, r3, #4
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d005      	beq.n	80044f4 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80044e8:	4b43      	ldr	r3, [pc, #268]	; (80045f8 <HAL_RCC_ClockConfig+0x264>)
 80044ea:	689b      	ldr	r3, [r3, #8]
 80044ec:	4a42      	ldr	r2, [pc, #264]	; (80045f8 <HAL_RCC_ClockConfig+0x264>)
 80044ee:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80044f2:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	f003 0308 	and.w	r3, r3, #8
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d007      	beq.n	8004510 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8004500:	4b3d      	ldr	r3, [pc, #244]	; (80045f8 <HAL_RCC_ClockConfig+0x264>)
 8004502:	689b      	ldr	r3, [r3, #8]
 8004504:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8004508:	4a3b      	ldr	r2, [pc, #236]	; (80045f8 <HAL_RCC_ClockConfig+0x264>)
 800450a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800450e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004510:	4b39      	ldr	r3, [pc, #228]	; (80045f8 <HAL_RCC_ClockConfig+0x264>)
 8004512:	689b      	ldr	r3, [r3, #8]
 8004514:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	689b      	ldr	r3, [r3, #8]
 800451c:	4936      	ldr	r1, [pc, #216]	; (80045f8 <HAL_RCC_ClockConfig+0x264>)
 800451e:	4313      	orrs	r3, r2
 8004520:	608b      	str	r3, [r1, #8]
 8004522:	e008      	b.n	8004536 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8004524:	697b      	ldr	r3, [r7, #20]
 8004526:	2b80      	cmp	r3, #128	; 0x80
 8004528:	d105      	bne.n	8004536 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800452a:	4b33      	ldr	r3, [pc, #204]	; (80045f8 <HAL_RCC_ClockConfig+0x264>)
 800452c:	689b      	ldr	r3, [r3, #8]
 800452e:	4a32      	ldr	r2, [pc, #200]	; (80045f8 <HAL_RCC_ClockConfig+0x264>)
 8004530:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004534:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004536:	4b2f      	ldr	r3, [pc, #188]	; (80045f4 <HAL_RCC_ClockConfig+0x260>)
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	f003 030f 	and.w	r3, r3, #15
 800453e:	683a      	ldr	r2, [r7, #0]
 8004540:	429a      	cmp	r2, r3
 8004542:	d21d      	bcs.n	8004580 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004544:	4b2b      	ldr	r3, [pc, #172]	; (80045f4 <HAL_RCC_ClockConfig+0x260>)
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	f023 020f 	bic.w	r2, r3, #15
 800454c:	4929      	ldr	r1, [pc, #164]	; (80045f4 <HAL_RCC_ClockConfig+0x260>)
 800454e:	683b      	ldr	r3, [r7, #0]
 8004550:	4313      	orrs	r3, r2
 8004552:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004554:	f7fc fd02 	bl	8000f5c <HAL_GetTick>
 8004558:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800455a:	e00a      	b.n	8004572 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800455c:	f7fc fcfe 	bl	8000f5c <HAL_GetTick>
 8004560:	4602      	mov	r2, r0
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	1ad3      	subs	r3, r2, r3
 8004566:	f241 3288 	movw	r2, #5000	; 0x1388
 800456a:	4293      	cmp	r3, r2
 800456c:	d901      	bls.n	8004572 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800456e:	2303      	movs	r3, #3
 8004570:	e03b      	b.n	80045ea <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004572:	4b20      	ldr	r3, [pc, #128]	; (80045f4 <HAL_RCC_ClockConfig+0x260>)
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	f003 030f 	and.w	r3, r3, #15
 800457a:	683a      	ldr	r2, [r7, #0]
 800457c:	429a      	cmp	r2, r3
 800457e:	d1ed      	bne.n	800455c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	f003 0304 	and.w	r3, r3, #4
 8004588:	2b00      	cmp	r3, #0
 800458a:	d008      	beq.n	800459e <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800458c:	4b1a      	ldr	r3, [pc, #104]	; (80045f8 <HAL_RCC_ClockConfig+0x264>)
 800458e:	689b      	ldr	r3, [r3, #8]
 8004590:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	68db      	ldr	r3, [r3, #12]
 8004598:	4917      	ldr	r1, [pc, #92]	; (80045f8 <HAL_RCC_ClockConfig+0x264>)
 800459a:	4313      	orrs	r3, r2
 800459c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	f003 0308 	and.w	r3, r3, #8
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d009      	beq.n	80045be <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80045aa:	4b13      	ldr	r3, [pc, #76]	; (80045f8 <HAL_RCC_ClockConfig+0x264>)
 80045ac:	689b      	ldr	r3, [r3, #8]
 80045ae:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	691b      	ldr	r3, [r3, #16]
 80045b6:	00db      	lsls	r3, r3, #3
 80045b8:	490f      	ldr	r1, [pc, #60]	; (80045f8 <HAL_RCC_ClockConfig+0x264>)
 80045ba:	4313      	orrs	r3, r2
 80045bc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80045be:	f000 f825 	bl	800460c <HAL_RCC_GetSysClockFreq>
 80045c2:	4602      	mov	r2, r0
 80045c4:	4b0c      	ldr	r3, [pc, #48]	; (80045f8 <HAL_RCC_ClockConfig+0x264>)
 80045c6:	689b      	ldr	r3, [r3, #8]
 80045c8:	091b      	lsrs	r3, r3, #4
 80045ca:	f003 030f 	and.w	r3, r3, #15
 80045ce:	490c      	ldr	r1, [pc, #48]	; (8004600 <HAL_RCC_ClockConfig+0x26c>)
 80045d0:	5ccb      	ldrb	r3, [r1, r3]
 80045d2:	f003 031f 	and.w	r3, r3, #31
 80045d6:	fa22 f303 	lsr.w	r3, r2, r3
 80045da:	4a0a      	ldr	r2, [pc, #40]	; (8004604 <HAL_RCC_ClockConfig+0x270>)
 80045dc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80045de:	4b0a      	ldr	r3, [pc, #40]	; (8004608 <HAL_RCC_ClockConfig+0x274>)
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	4618      	mov	r0, r3
 80045e4:	f7fc fc6e 	bl	8000ec4 <HAL_InitTick>
 80045e8:	4603      	mov	r3, r0
}
 80045ea:	4618      	mov	r0, r3
 80045ec:	3718      	adds	r7, #24
 80045ee:	46bd      	mov	sp, r7
 80045f0:	bd80      	pop	{r7, pc}
 80045f2:	bf00      	nop
 80045f4:	40022000 	.word	0x40022000
 80045f8:	40021000 	.word	0x40021000
 80045fc:	04c4b400 	.word	0x04c4b400
 8004600:	0800a0a8 	.word	0x0800a0a8
 8004604:	20000000 	.word	0x20000000
 8004608:	20000004 	.word	0x20000004

0800460c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800460c:	b480      	push	{r7}
 800460e:	b087      	sub	sp, #28
 8004610:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8004612:	4b2c      	ldr	r3, [pc, #176]	; (80046c4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004614:	689b      	ldr	r3, [r3, #8]
 8004616:	f003 030c 	and.w	r3, r3, #12
 800461a:	2b04      	cmp	r3, #4
 800461c:	d102      	bne.n	8004624 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800461e:	4b2a      	ldr	r3, [pc, #168]	; (80046c8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004620:	613b      	str	r3, [r7, #16]
 8004622:	e047      	b.n	80046b4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8004624:	4b27      	ldr	r3, [pc, #156]	; (80046c4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004626:	689b      	ldr	r3, [r3, #8]
 8004628:	f003 030c 	and.w	r3, r3, #12
 800462c:	2b08      	cmp	r3, #8
 800462e:	d102      	bne.n	8004636 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004630:	4b26      	ldr	r3, [pc, #152]	; (80046cc <HAL_RCC_GetSysClockFreq+0xc0>)
 8004632:	613b      	str	r3, [r7, #16]
 8004634:	e03e      	b.n	80046b4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8004636:	4b23      	ldr	r3, [pc, #140]	; (80046c4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004638:	689b      	ldr	r3, [r3, #8]
 800463a:	f003 030c 	and.w	r3, r3, #12
 800463e:	2b0c      	cmp	r3, #12
 8004640:	d136      	bne.n	80046b0 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004642:	4b20      	ldr	r3, [pc, #128]	; (80046c4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004644:	68db      	ldr	r3, [r3, #12]
 8004646:	f003 0303 	and.w	r3, r3, #3
 800464a:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800464c:	4b1d      	ldr	r3, [pc, #116]	; (80046c4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800464e:	68db      	ldr	r3, [r3, #12]
 8004650:	091b      	lsrs	r3, r3, #4
 8004652:	f003 030f 	and.w	r3, r3, #15
 8004656:	3301      	adds	r3, #1
 8004658:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	2b03      	cmp	r3, #3
 800465e:	d10c      	bne.n	800467a <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004660:	4a1a      	ldr	r2, [pc, #104]	; (80046cc <HAL_RCC_GetSysClockFreq+0xc0>)
 8004662:	68bb      	ldr	r3, [r7, #8]
 8004664:	fbb2 f3f3 	udiv	r3, r2, r3
 8004668:	4a16      	ldr	r2, [pc, #88]	; (80046c4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800466a:	68d2      	ldr	r2, [r2, #12]
 800466c:	0a12      	lsrs	r2, r2, #8
 800466e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004672:	fb02 f303 	mul.w	r3, r2, r3
 8004676:	617b      	str	r3, [r7, #20]
      break;
 8004678:	e00c      	b.n	8004694 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800467a:	4a13      	ldr	r2, [pc, #76]	; (80046c8 <HAL_RCC_GetSysClockFreq+0xbc>)
 800467c:	68bb      	ldr	r3, [r7, #8]
 800467e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004682:	4a10      	ldr	r2, [pc, #64]	; (80046c4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004684:	68d2      	ldr	r2, [r2, #12]
 8004686:	0a12      	lsrs	r2, r2, #8
 8004688:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800468c:	fb02 f303 	mul.w	r3, r2, r3
 8004690:	617b      	str	r3, [r7, #20]
      break;
 8004692:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004694:	4b0b      	ldr	r3, [pc, #44]	; (80046c4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004696:	68db      	ldr	r3, [r3, #12]
 8004698:	0e5b      	lsrs	r3, r3, #25
 800469a:	f003 0303 	and.w	r3, r3, #3
 800469e:	3301      	adds	r3, #1
 80046a0:	005b      	lsls	r3, r3, #1
 80046a2:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80046a4:	697a      	ldr	r2, [r7, #20]
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80046ac:	613b      	str	r3, [r7, #16]
 80046ae:	e001      	b.n	80046b4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80046b0:	2300      	movs	r3, #0
 80046b2:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80046b4:	693b      	ldr	r3, [r7, #16]
}
 80046b6:	4618      	mov	r0, r3
 80046b8:	371c      	adds	r7, #28
 80046ba:	46bd      	mov	sp, r7
 80046bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c0:	4770      	bx	lr
 80046c2:	bf00      	nop
 80046c4:	40021000 	.word	0x40021000
 80046c8:	00f42400 	.word	0x00f42400
 80046cc:	007a1200 	.word	0x007a1200

080046d0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80046d0:	b480      	push	{r7}
 80046d2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80046d4:	4b03      	ldr	r3, [pc, #12]	; (80046e4 <HAL_RCC_GetHCLKFreq+0x14>)
 80046d6:	681b      	ldr	r3, [r3, #0]
}
 80046d8:	4618      	mov	r0, r3
 80046da:	46bd      	mov	sp, r7
 80046dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e0:	4770      	bx	lr
 80046e2:	bf00      	nop
 80046e4:	20000000 	.word	0x20000000

080046e8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80046e8:	b580      	push	{r7, lr}
 80046ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80046ec:	f7ff fff0 	bl	80046d0 <HAL_RCC_GetHCLKFreq>
 80046f0:	4602      	mov	r2, r0
 80046f2:	4b06      	ldr	r3, [pc, #24]	; (800470c <HAL_RCC_GetPCLK1Freq+0x24>)
 80046f4:	689b      	ldr	r3, [r3, #8]
 80046f6:	0a1b      	lsrs	r3, r3, #8
 80046f8:	f003 0307 	and.w	r3, r3, #7
 80046fc:	4904      	ldr	r1, [pc, #16]	; (8004710 <HAL_RCC_GetPCLK1Freq+0x28>)
 80046fe:	5ccb      	ldrb	r3, [r1, r3]
 8004700:	f003 031f 	and.w	r3, r3, #31
 8004704:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004708:	4618      	mov	r0, r3
 800470a:	bd80      	pop	{r7, pc}
 800470c:	40021000 	.word	0x40021000
 8004710:	0800a0b8 	.word	0x0800a0b8

08004714 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004714:	b580      	push	{r7, lr}
 8004716:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004718:	f7ff ffda 	bl	80046d0 <HAL_RCC_GetHCLKFreq>
 800471c:	4602      	mov	r2, r0
 800471e:	4b06      	ldr	r3, [pc, #24]	; (8004738 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004720:	689b      	ldr	r3, [r3, #8]
 8004722:	0adb      	lsrs	r3, r3, #11
 8004724:	f003 0307 	and.w	r3, r3, #7
 8004728:	4904      	ldr	r1, [pc, #16]	; (800473c <HAL_RCC_GetPCLK2Freq+0x28>)
 800472a:	5ccb      	ldrb	r3, [r1, r3]
 800472c:	f003 031f 	and.w	r3, r3, #31
 8004730:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004734:	4618      	mov	r0, r3
 8004736:	bd80      	pop	{r7, pc}
 8004738:	40021000 	.word	0x40021000
 800473c:	0800a0b8 	.word	0x0800a0b8

08004740 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8004740:	b480      	push	{r7}
 8004742:	b087      	sub	sp, #28
 8004744:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004746:	4b1e      	ldr	r3, [pc, #120]	; (80047c0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004748:	68db      	ldr	r3, [r3, #12]
 800474a:	f003 0303 	and.w	r3, r3, #3
 800474e:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004750:	4b1b      	ldr	r3, [pc, #108]	; (80047c0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004752:	68db      	ldr	r3, [r3, #12]
 8004754:	091b      	lsrs	r3, r3, #4
 8004756:	f003 030f 	and.w	r3, r3, #15
 800475a:	3301      	adds	r3, #1
 800475c:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800475e:	693b      	ldr	r3, [r7, #16]
 8004760:	2b03      	cmp	r3, #3
 8004762:	d10c      	bne.n	800477e <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004764:	4a17      	ldr	r2, [pc, #92]	; (80047c4 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	fbb2 f3f3 	udiv	r3, r2, r3
 800476c:	4a14      	ldr	r2, [pc, #80]	; (80047c0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800476e:	68d2      	ldr	r2, [r2, #12]
 8004770:	0a12      	lsrs	r2, r2, #8
 8004772:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004776:	fb02 f303 	mul.w	r3, r2, r3
 800477a:	617b      	str	r3, [r7, #20]
    break;
 800477c:	e00c      	b.n	8004798 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800477e:	4a12      	ldr	r2, [pc, #72]	; (80047c8 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	fbb2 f3f3 	udiv	r3, r2, r3
 8004786:	4a0e      	ldr	r2, [pc, #56]	; (80047c0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004788:	68d2      	ldr	r2, [r2, #12]
 800478a:	0a12      	lsrs	r2, r2, #8
 800478c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004790:	fb02 f303 	mul.w	r3, r2, r3
 8004794:	617b      	str	r3, [r7, #20]
    break;
 8004796:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004798:	4b09      	ldr	r3, [pc, #36]	; (80047c0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800479a:	68db      	ldr	r3, [r3, #12]
 800479c:	0e5b      	lsrs	r3, r3, #25
 800479e:	f003 0303 	and.w	r3, r3, #3
 80047a2:	3301      	adds	r3, #1
 80047a4:	005b      	lsls	r3, r3, #1
 80047a6:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80047a8:	697a      	ldr	r2, [r7, #20]
 80047aa:	68bb      	ldr	r3, [r7, #8]
 80047ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80047b0:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80047b2:	687b      	ldr	r3, [r7, #4]
}
 80047b4:	4618      	mov	r0, r3
 80047b6:	371c      	adds	r7, #28
 80047b8:	46bd      	mov	sp, r7
 80047ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047be:	4770      	bx	lr
 80047c0:	40021000 	.word	0x40021000
 80047c4:	007a1200 	.word	0x007a1200
 80047c8:	00f42400 	.word	0x00f42400

080047cc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80047cc:	b580      	push	{r7, lr}
 80047ce:	b086      	sub	sp, #24
 80047d0:	af00      	add	r7, sp, #0
 80047d2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80047d4:	2300      	movs	r3, #0
 80047d6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80047d8:	2300      	movs	r3, #0
 80047da:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	f000 8098 	beq.w	800491a <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80047ea:	2300      	movs	r3, #0
 80047ec:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80047ee:	4b43      	ldr	r3, [pc, #268]	; (80048fc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80047f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d10d      	bne.n	8004816 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80047fa:	4b40      	ldr	r3, [pc, #256]	; (80048fc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80047fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047fe:	4a3f      	ldr	r2, [pc, #252]	; (80048fc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004800:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004804:	6593      	str	r3, [r2, #88]	; 0x58
 8004806:	4b3d      	ldr	r3, [pc, #244]	; (80048fc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004808:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800480a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800480e:	60bb      	str	r3, [r7, #8]
 8004810:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004812:	2301      	movs	r3, #1
 8004814:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004816:	4b3a      	ldr	r3, [pc, #232]	; (8004900 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	4a39      	ldr	r2, [pc, #228]	; (8004900 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800481c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004820:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004822:	f7fc fb9b 	bl	8000f5c <HAL_GetTick>
 8004826:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004828:	e009      	b.n	800483e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800482a:	f7fc fb97 	bl	8000f5c <HAL_GetTick>
 800482e:	4602      	mov	r2, r0
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	1ad3      	subs	r3, r2, r3
 8004834:	2b02      	cmp	r3, #2
 8004836:	d902      	bls.n	800483e <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8004838:	2303      	movs	r3, #3
 800483a:	74fb      	strb	r3, [r7, #19]
        break;
 800483c:	e005      	b.n	800484a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800483e:	4b30      	ldr	r3, [pc, #192]	; (8004900 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004846:	2b00      	cmp	r3, #0
 8004848:	d0ef      	beq.n	800482a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800484a:	7cfb      	ldrb	r3, [r7, #19]
 800484c:	2b00      	cmp	r3, #0
 800484e:	d159      	bne.n	8004904 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004850:	4b2a      	ldr	r3, [pc, #168]	; (80048fc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004852:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004856:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800485a:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800485c:	697b      	ldr	r3, [r7, #20]
 800485e:	2b00      	cmp	r3, #0
 8004860:	d01e      	beq.n	80048a0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004866:	697a      	ldr	r2, [r7, #20]
 8004868:	429a      	cmp	r2, r3
 800486a:	d019      	beq.n	80048a0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800486c:	4b23      	ldr	r3, [pc, #140]	; (80048fc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800486e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004872:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004876:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004878:	4b20      	ldr	r3, [pc, #128]	; (80048fc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800487a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800487e:	4a1f      	ldr	r2, [pc, #124]	; (80048fc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004880:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004884:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004888:	4b1c      	ldr	r3, [pc, #112]	; (80048fc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800488a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800488e:	4a1b      	ldr	r2, [pc, #108]	; (80048fc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004890:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004894:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004898:	4a18      	ldr	r2, [pc, #96]	; (80048fc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800489a:	697b      	ldr	r3, [r7, #20]
 800489c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80048a0:	697b      	ldr	r3, [r7, #20]
 80048a2:	f003 0301 	and.w	r3, r3, #1
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d016      	beq.n	80048d8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048aa:	f7fc fb57 	bl	8000f5c <HAL_GetTick>
 80048ae:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80048b0:	e00b      	b.n	80048ca <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80048b2:	f7fc fb53 	bl	8000f5c <HAL_GetTick>
 80048b6:	4602      	mov	r2, r0
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	1ad3      	subs	r3, r2, r3
 80048bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80048c0:	4293      	cmp	r3, r2
 80048c2:	d902      	bls.n	80048ca <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80048c4:	2303      	movs	r3, #3
 80048c6:	74fb      	strb	r3, [r7, #19]
            break;
 80048c8:	e006      	b.n	80048d8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80048ca:	4b0c      	ldr	r3, [pc, #48]	; (80048fc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80048cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048d0:	f003 0302 	and.w	r3, r3, #2
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d0ec      	beq.n	80048b2 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80048d8:	7cfb      	ldrb	r3, [r7, #19]
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d10b      	bne.n	80048f6 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80048de:	4b07      	ldr	r3, [pc, #28]	; (80048fc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80048e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048e4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048ec:	4903      	ldr	r1, [pc, #12]	; (80048fc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80048ee:	4313      	orrs	r3, r2
 80048f0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80048f4:	e008      	b.n	8004908 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80048f6:	7cfb      	ldrb	r3, [r7, #19]
 80048f8:	74bb      	strb	r3, [r7, #18]
 80048fa:	e005      	b.n	8004908 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80048fc:	40021000 	.word	0x40021000
 8004900:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004904:	7cfb      	ldrb	r3, [r7, #19]
 8004906:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004908:	7c7b      	ldrb	r3, [r7, #17]
 800490a:	2b01      	cmp	r3, #1
 800490c:	d105      	bne.n	800491a <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800490e:	4ba6      	ldr	r3, [pc, #664]	; (8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004910:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004912:	4aa5      	ldr	r2, [pc, #660]	; (8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004914:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004918:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	f003 0301 	and.w	r3, r3, #1
 8004922:	2b00      	cmp	r3, #0
 8004924:	d00a      	beq.n	800493c <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004926:	4ba0      	ldr	r3, [pc, #640]	; (8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004928:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800492c:	f023 0203 	bic.w	r2, r3, #3
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	685b      	ldr	r3, [r3, #4]
 8004934:	499c      	ldr	r1, [pc, #624]	; (8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004936:	4313      	orrs	r3, r2
 8004938:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	f003 0302 	and.w	r3, r3, #2
 8004944:	2b00      	cmp	r3, #0
 8004946:	d00a      	beq.n	800495e <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004948:	4b97      	ldr	r3, [pc, #604]	; (8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800494a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800494e:	f023 020c 	bic.w	r2, r3, #12
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	689b      	ldr	r3, [r3, #8]
 8004956:	4994      	ldr	r1, [pc, #592]	; (8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004958:	4313      	orrs	r3, r2
 800495a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	f003 0304 	and.w	r3, r3, #4
 8004966:	2b00      	cmp	r3, #0
 8004968:	d00a      	beq.n	8004980 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800496a:	4b8f      	ldr	r3, [pc, #572]	; (8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800496c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004970:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	68db      	ldr	r3, [r3, #12]
 8004978:	498b      	ldr	r1, [pc, #556]	; (8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800497a:	4313      	orrs	r3, r2
 800497c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	f003 0308 	and.w	r3, r3, #8
 8004988:	2b00      	cmp	r3, #0
 800498a:	d00a      	beq.n	80049a2 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800498c:	4b86      	ldr	r3, [pc, #536]	; (8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800498e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004992:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	691b      	ldr	r3, [r3, #16]
 800499a:	4983      	ldr	r1, [pc, #524]	; (8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800499c:	4313      	orrs	r3, r2
 800499e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	f003 0320 	and.w	r3, r3, #32
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d00a      	beq.n	80049c4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80049ae:	4b7e      	ldr	r3, [pc, #504]	; (8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80049b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049b4:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	695b      	ldr	r3, [r3, #20]
 80049bc:	497a      	ldr	r1, [pc, #488]	; (8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80049be:	4313      	orrs	r3, r2
 80049c0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d00a      	beq.n	80049e6 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80049d0:	4b75      	ldr	r3, [pc, #468]	; (8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80049d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049d6:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	699b      	ldr	r3, [r3, #24]
 80049de:	4972      	ldr	r1, [pc, #456]	; (8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80049e0:	4313      	orrs	r3, r2
 80049e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d00a      	beq.n	8004a08 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80049f2:	4b6d      	ldr	r3, [pc, #436]	; (8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80049f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049f8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	69db      	ldr	r3, [r3, #28]
 8004a00:	4969      	ldr	r1, [pc, #420]	; (8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004a02:	4313      	orrs	r3, r2
 8004a04:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d00a      	beq.n	8004a2a <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004a14:	4b64      	ldr	r3, [pc, #400]	; (8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004a16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a1a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	6a1b      	ldr	r3, [r3, #32]
 8004a22:	4961      	ldr	r1, [pc, #388]	; (8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004a24:	4313      	orrs	r3, r2
 8004a26:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d00a      	beq.n	8004a4c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004a36:	4b5c      	ldr	r3, [pc, #368]	; (8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004a38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a3c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a44:	4958      	ldr	r1, [pc, #352]	; (8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004a46:	4313      	orrs	r3, r2
 8004a48:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d015      	beq.n	8004a84 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004a58:	4b53      	ldr	r3, [pc, #332]	; (8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004a5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a5e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a66:	4950      	ldr	r1, [pc, #320]	; (8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004a68:	4313      	orrs	r3, r2
 8004a6a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a72:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004a76:	d105      	bne.n	8004a84 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004a78:	4b4b      	ldr	r3, [pc, #300]	; (8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004a7a:	68db      	ldr	r3, [r3, #12]
 8004a7c:	4a4a      	ldr	r2, [pc, #296]	; (8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004a7e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004a82:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d015      	beq.n	8004abc <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004a90:	4b45      	ldr	r3, [pc, #276]	; (8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004a92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a96:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a9e:	4942      	ldr	r1, [pc, #264]	; (8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004aa0:	4313      	orrs	r3, r2
 8004aa2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004aaa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004aae:	d105      	bne.n	8004abc <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004ab0:	4b3d      	ldr	r3, [pc, #244]	; (8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004ab2:	68db      	ldr	r3, [r3, #12]
 8004ab4:	4a3c      	ldr	r2, [pc, #240]	; (8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004ab6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004aba:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d015      	beq.n	8004af4 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004ac8:	4b37      	ldr	r3, [pc, #220]	; (8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004aca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ace:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ad6:	4934      	ldr	r1, [pc, #208]	; (8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004ad8:	4313      	orrs	r3, r2
 8004ada:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ae2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004ae6:	d105      	bne.n	8004af4 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004ae8:	4b2f      	ldr	r3, [pc, #188]	; (8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004aea:	68db      	ldr	r3, [r3, #12]
 8004aec:	4a2e      	ldr	r2, [pc, #184]	; (8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004aee:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004af2:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d015      	beq.n	8004b2c <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004b00:	4b29      	ldr	r3, [pc, #164]	; (8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004b02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b06:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b0e:	4926      	ldr	r1, [pc, #152]	; (8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004b10:	4313      	orrs	r3, r2
 8004b12:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b1a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004b1e:	d105      	bne.n	8004b2c <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004b20:	4b21      	ldr	r3, [pc, #132]	; (8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004b22:	68db      	ldr	r3, [r3, #12]
 8004b24:	4a20      	ldr	r2, [pc, #128]	; (8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004b26:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004b2a:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d015      	beq.n	8004b64 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004b38:	4b1b      	ldr	r3, [pc, #108]	; (8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004b3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b3e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b46:	4918      	ldr	r1, [pc, #96]	; (8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004b48:	4313      	orrs	r3, r2
 8004b4a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b52:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004b56:	d105      	bne.n	8004b64 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004b58:	4b13      	ldr	r3, [pc, #76]	; (8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004b5a:	68db      	ldr	r3, [r3, #12]
 8004b5c:	4a12      	ldr	r2, [pc, #72]	; (8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004b5e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004b62:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d015      	beq.n	8004b9c <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004b70:	4b0d      	ldr	r3, [pc, #52]	; (8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004b72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b76:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b7e:	490a      	ldr	r1, [pc, #40]	; (8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004b80:	4313      	orrs	r3, r2
 8004b82:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b8a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004b8e:	d105      	bne.n	8004b9c <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004b90:	4b05      	ldr	r3, [pc, #20]	; (8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004b92:	68db      	ldr	r3, [r3, #12]
 8004b94:	4a04      	ldr	r2, [pc, #16]	; (8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004b96:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b9a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8004b9c:	7cbb      	ldrb	r3, [r7, #18]
}
 8004b9e:	4618      	mov	r0, r3
 8004ba0:	3718      	adds	r7, #24
 8004ba2:	46bd      	mov	sp, r7
 8004ba4:	bd80      	pop	{r7, pc}
 8004ba6:	bf00      	nop
 8004ba8:	40021000 	.word	0x40021000

08004bac <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004bac:	b580      	push	{r7, lr}
 8004bae:	b082      	sub	sp, #8
 8004bb0:	af00      	add	r7, sp, #0
 8004bb2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d101      	bne.n	8004bbe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004bba:	2301      	movs	r3, #1
 8004bbc:	e042      	b.n	8004c44 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d106      	bne.n	8004bd6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	2200      	movs	r2, #0
 8004bcc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004bd0:	6878      	ldr	r0, [r7, #4]
 8004bd2:	f7fc f88d 	bl	8000cf0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	2224      	movs	r2, #36	; 0x24
 8004bda:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	681a      	ldr	r2, [r3, #0]
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	f022 0201 	bic.w	r2, r2, #1
 8004bec:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004bee:	6878      	ldr	r0, [r7, #4]
 8004bf0:	f000 f82c 	bl	8004c4c <UART_SetConfig>
 8004bf4:	4603      	mov	r3, r0
 8004bf6:	2b01      	cmp	r3, #1
 8004bf8:	d101      	bne.n	8004bfe <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8004bfa:	2301      	movs	r3, #1
 8004bfc:	e022      	b.n	8004c44 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d002      	beq.n	8004c0c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8004c06:	6878      	ldr	r0, [r7, #4]
 8004c08:	f000 faec 	bl	80051e4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	685a      	ldr	r2, [r3, #4]
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004c1a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	689a      	ldr	r2, [r3, #8]
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004c2a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	681a      	ldr	r2, [r3, #0]
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	f042 0201 	orr.w	r2, r2, #1
 8004c3a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004c3c:	6878      	ldr	r0, [r7, #4]
 8004c3e:	f000 fb73 	bl	8005328 <UART_CheckIdleState>
 8004c42:	4603      	mov	r3, r0
}
 8004c44:	4618      	mov	r0, r3
 8004c46:	3708      	adds	r7, #8
 8004c48:	46bd      	mov	sp, r7
 8004c4a:	bd80      	pop	{r7, pc}

08004c4c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004c4c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004c50:	b08c      	sub	sp, #48	; 0x30
 8004c52:	af00      	add	r7, sp, #0
 8004c54:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004c56:	2300      	movs	r3, #0
 8004c58:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004c5c:	697b      	ldr	r3, [r7, #20]
 8004c5e:	689a      	ldr	r2, [r3, #8]
 8004c60:	697b      	ldr	r3, [r7, #20]
 8004c62:	691b      	ldr	r3, [r3, #16]
 8004c64:	431a      	orrs	r2, r3
 8004c66:	697b      	ldr	r3, [r7, #20]
 8004c68:	695b      	ldr	r3, [r3, #20]
 8004c6a:	431a      	orrs	r2, r3
 8004c6c:	697b      	ldr	r3, [r7, #20]
 8004c6e:	69db      	ldr	r3, [r3, #28]
 8004c70:	4313      	orrs	r3, r2
 8004c72:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004c74:	697b      	ldr	r3, [r7, #20]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	681a      	ldr	r2, [r3, #0]
 8004c7a:	4bab      	ldr	r3, [pc, #684]	; (8004f28 <UART_SetConfig+0x2dc>)
 8004c7c:	4013      	ands	r3, r2
 8004c7e:	697a      	ldr	r2, [r7, #20]
 8004c80:	6812      	ldr	r2, [r2, #0]
 8004c82:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004c84:	430b      	orrs	r3, r1
 8004c86:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004c88:	697b      	ldr	r3, [r7, #20]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	685b      	ldr	r3, [r3, #4]
 8004c8e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004c92:	697b      	ldr	r3, [r7, #20]
 8004c94:	68da      	ldr	r2, [r3, #12]
 8004c96:	697b      	ldr	r3, [r7, #20]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	430a      	orrs	r2, r1
 8004c9c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004c9e:	697b      	ldr	r3, [r7, #20]
 8004ca0:	699b      	ldr	r3, [r3, #24]
 8004ca2:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004ca4:	697b      	ldr	r3, [r7, #20]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	4aa0      	ldr	r2, [pc, #640]	; (8004f2c <UART_SetConfig+0x2e0>)
 8004caa:	4293      	cmp	r3, r2
 8004cac:	d004      	beq.n	8004cb8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004cae:	697b      	ldr	r3, [r7, #20]
 8004cb0:	6a1b      	ldr	r3, [r3, #32]
 8004cb2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004cb4:	4313      	orrs	r3, r2
 8004cb6:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004cb8:	697b      	ldr	r3, [r7, #20]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	689b      	ldr	r3, [r3, #8]
 8004cbe:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8004cc2:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8004cc6:	697a      	ldr	r2, [r7, #20]
 8004cc8:	6812      	ldr	r2, [r2, #0]
 8004cca:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004ccc:	430b      	orrs	r3, r1
 8004cce:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004cd0:	697b      	ldr	r3, [r7, #20]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cd6:	f023 010f 	bic.w	r1, r3, #15
 8004cda:	697b      	ldr	r3, [r7, #20]
 8004cdc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004cde:	697b      	ldr	r3, [r7, #20]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	430a      	orrs	r2, r1
 8004ce4:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004ce6:	697b      	ldr	r3, [r7, #20]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	4a91      	ldr	r2, [pc, #580]	; (8004f30 <UART_SetConfig+0x2e4>)
 8004cec:	4293      	cmp	r3, r2
 8004cee:	d125      	bne.n	8004d3c <UART_SetConfig+0xf0>
 8004cf0:	4b90      	ldr	r3, [pc, #576]	; (8004f34 <UART_SetConfig+0x2e8>)
 8004cf2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cf6:	f003 0303 	and.w	r3, r3, #3
 8004cfa:	2b03      	cmp	r3, #3
 8004cfc:	d81a      	bhi.n	8004d34 <UART_SetConfig+0xe8>
 8004cfe:	a201      	add	r2, pc, #4	; (adr r2, 8004d04 <UART_SetConfig+0xb8>)
 8004d00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d04:	08004d15 	.word	0x08004d15
 8004d08:	08004d25 	.word	0x08004d25
 8004d0c:	08004d1d 	.word	0x08004d1d
 8004d10:	08004d2d 	.word	0x08004d2d
 8004d14:	2301      	movs	r3, #1
 8004d16:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004d1a:	e0d6      	b.n	8004eca <UART_SetConfig+0x27e>
 8004d1c:	2302      	movs	r3, #2
 8004d1e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004d22:	e0d2      	b.n	8004eca <UART_SetConfig+0x27e>
 8004d24:	2304      	movs	r3, #4
 8004d26:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004d2a:	e0ce      	b.n	8004eca <UART_SetConfig+0x27e>
 8004d2c:	2308      	movs	r3, #8
 8004d2e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004d32:	e0ca      	b.n	8004eca <UART_SetConfig+0x27e>
 8004d34:	2310      	movs	r3, #16
 8004d36:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004d3a:	e0c6      	b.n	8004eca <UART_SetConfig+0x27e>
 8004d3c:	697b      	ldr	r3, [r7, #20]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	4a7d      	ldr	r2, [pc, #500]	; (8004f38 <UART_SetConfig+0x2ec>)
 8004d42:	4293      	cmp	r3, r2
 8004d44:	d138      	bne.n	8004db8 <UART_SetConfig+0x16c>
 8004d46:	4b7b      	ldr	r3, [pc, #492]	; (8004f34 <UART_SetConfig+0x2e8>)
 8004d48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d4c:	f003 030c 	and.w	r3, r3, #12
 8004d50:	2b0c      	cmp	r3, #12
 8004d52:	d82d      	bhi.n	8004db0 <UART_SetConfig+0x164>
 8004d54:	a201      	add	r2, pc, #4	; (adr r2, 8004d5c <UART_SetConfig+0x110>)
 8004d56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d5a:	bf00      	nop
 8004d5c:	08004d91 	.word	0x08004d91
 8004d60:	08004db1 	.word	0x08004db1
 8004d64:	08004db1 	.word	0x08004db1
 8004d68:	08004db1 	.word	0x08004db1
 8004d6c:	08004da1 	.word	0x08004da1
 8004d70:	08004db1 	.word	0x08004db1
 8004d74:	08004db1 	.word	0x08004db1
 8004d78:	08004db1 	.word	0x08004db1
 8004d7c:	08004d99 	.word	0x08004d99
 8004d80:	08004db1 	.word	0x08004db1
 8004d84:	08004db1 	.word	0x08004db1
 8004d88:	08004db1 	.word	0x08004db1
 8004d8c:	08004da9 	.word	0x08004da9
 8004d90:	2300      	movs	r3, #0
 8004d92:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004d96:	e098      	b.n	8004eca <UART_SetConfig+0x27e>
 8004d98:	2302      	movs	r3, #2
 8004d9a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004d9e:	e094      	b.n	8004eca <UART_SetConfig+0x27e>
 8004da0:	2304      	movs	r3, #4
 8004da2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004da6:	e090      	b.n	8004eca <UART_SetConfig+0x27e>
 8004da8:	2308      	movs	r3, #8
 8004daa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004dae:	e08c      	b.n	8004eca <UART_SetConfig+0x27e>
 8004db0:	2310      	movs	r3, #16
 8004db2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004db6:	e088      	b.n	8004eca <UART_SetConfig+0x27e>
 8004db8:	697b      	ldr	r3, [r7, #20]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	4a5f      	ldr	r2, [pc, #380]	; (8004f3c <UART_SetConfig+0x2f0>)
 8004dbe:	4293      	cmp	r3, r2
 8004dc0:	d125      	bne.n	8004e0e <UART_SetConfig+0x1c2>
 8004dc2:	4b5c      	ldr	r3, [pc, #368]	; (8004f34 <UART_SetConfig+0x2e8>)
 8004dc4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004dc8:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004dcc:	2b30      	cmp	r3, #48	; 0x30
 8004dce:	d016      	beq.n	8004dfe <UART_SetConfig+0x1b2>
 8004dd0:	2b30      	cmp	r3, #48	; 0x30
 8004dd2:	d818      	bhi.n	8004e06 <UART_SetConfig+0x1ba>
 8004dd4:	2b20      	cmp	r3, #32
 8004dd6:	d00a      	beq.n	8004dee <UART_SetConfig+0x1a2>
 8004dd8:	2b20      	cmp	r3, #32
 8004dda:	d814      	bhi.n	8004e06 <UART_SetConfig+0x1ba>
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d002      	beq.n	8004de6 <UART_SetConfig+0x19a>
 8004de0:	2b10      	cmp	r3, #16
 8004de2:	d008      	beq.n	8004df6 <UART_SetConfig+0x1aa>
 8004de4:	e00f      	b.n	8004e06 <UART_SetConfig+0x1ba>
 8004de6:	2300      	movs	r3, #0
 8004de8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004dec:	e06d      	b.n	8004eca <UART_SetConfig+0x27e>
 8004dee:	2302      	movs	r3, #2
 8004df0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004df4:	e069      	b.n	8004eca <UART_SetConfig+0x27e>
 8004df6:	2304      	movs	r3, #4
 8004df8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004dfc:	e065      	b.n	8004eca <UART_SetConfig+0x27e>
 8004dfe:	2308      	movs	r3, #8
 8004e00:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004e04:	e061      	b.n	8004eca <UART_SetConfig+0x27e>
 8004e06:	2310      	movs	r3, #16
 8004e08:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004e0c:	e05d      	b.n	8004eca <UART_SetConfig+0x27e>
 8004e0e:	697b      	ldr	r3, [r7, #20]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	4a4b      	ldr	r2, [pc, #300]	; (8004f40 <UART_SetConfig+0x2f4>)
 8004e14:	4293      	cmp	r3, r2
 8004e16:	d125      	bne.n	8004e64 <UART_SetConfig+0x218>
 8004e18:	4b46      	ldr	r3, [pc, #280]	; (8004f34 <UART_SetConfig+0x2e8>)
 8004e1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e1e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004e22:	2bc0      	cmp	r3, #192	; 0xc0
 8004e24:	d016      	beq.n	8004e54 <UART_SetConfig+0x208>
 8004e26:	2bc0      	cmp	r3, #192	; 0xc0
 8004e28:	d818      	bhi.n	8004e5c <UART_SetConfig+0x210>
 8004e2a:	2b80      	cmp	r3, #128	; 0x80
 8004e2c:	d00a      	beq.n	8004e44 <UART_SetConfig+0x1f8>
 8004e2e:	2b80      	cmp	r3, #128	; 0x80
 8004e30:	d814      	bhi.n	8004e5c <UART_SetConfig+0x210>
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d002      	beq.n	8004e3c <UART_SetConfig+0x1f0>
 8004e36:	2b40      	cmp	r3, #64	; 0x40
 8004e38:	d008      	beq.n	8004e4c <UART_SetConfig+0x200>
 8004e3a:	e00f      	b.n	8004e5c <UART_SetConfig+0x210>
 8004e3c:	2300      	movs	r3, #0
 8004e3e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004e42:	e042      	b.n	8004eca <UART_SetConfig+0x27e>
 8004e44:	2302      	movs	r3, #2
 8004e46:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004e4a:	e03e      	b.n	8004eca <UART_SetConfig+0x27e>
 8004e4c:	2304      	movs	r3, #4
 8004e4e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004e52:	e03a      	b.n	8004eca <UART_SetConfig+0x27e>
 8004e54:	2308      	movs	r3, #8
 8004e56:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004e5a:	e036      	b.n	8004eca <UART_SetConfig+0x27e>
 8004e5c:	2310      	movs	r3, #16
 8004e5e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004e62:	e032      	b.n	8004eca <UART_SetConfig+0x27e>
 8004e64:	697b      	ldr	r3, [r7, #20]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	4a30      	ldr	r2, [pc, #192]	; (8004f2c <UART_SetConfig+0x2e0>)
 8004e6a:	4293      	cmp	r3, r2
 8004e6c:	d12a      	bne.n	8004ec4 <UART_SetConfig+0x278>
 8004e6e:	4b31      	ldr	r3, [pc, #196]	; (8004f34 <UART_SetConfig+0x2e8>)
 8004e70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e74:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004e78:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004e7c:	d01a      	beq.n	8004eb4 <UART_SetConfig+0x268>
 8004e7e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004e82:	d81b      	bhi.n	8004ebc <UART_SetConfig+0x270>
 8004e84:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004e88:	d00c      	beq.n	8004ea4 <UART_SetConfig+0x258>
 8004e8a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004e8e:	d815      	bhi.n	8004ebc <UART_SetConfig+0x270>
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d003      	beq.n	8004e9c <UART_SetConfig+0x250>
 8004e94:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e98:	d008      	beq.n	8004eac <UART_SetConfig+0x260>
 8004e9a:	e00f      	b.n	8004ebc <UART_SetConfig+0x270>
 8004e9c:	2300      	movs	r3, #0
 8004e9e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004ea2:	e012      	b.n	8004eca <UART_SetConfig+0x27e>
 8004ea4:	2302      	movs	r3, #2
 8004ea6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004eaa:	e00e      	b.n	8004eca <UART_SetConfig+0x27e>
 8004eac:	2304      	movs	r3, #4
 8004eae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004eb2:	e00a      	b.n	8004eca <UART_SetConfig+0x27e>
 8004eb4:	2308      	movs	r3, #8
 8004eb6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004eba:	e006      	b.n	8004eca <UART_SetConfig+0x27e>
 8004ebc:	2310      	movs	r3, #16
 8004ebe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004ec2:	e002      	b.n	8004eca <UART_SetConfig+0x27e>
 8004ec4:	2310      	movs	r3, #16
 8004ec6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004eca:	697b      	ldr	r3, [r7, #20]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	4a17      	ldr	r2, [pc, #92]	; (8004f2c <UART_SetConfig+0x2e0>)
 8004ed0:	4293      	cmp	r3, r2
 8004ed2:	f040 80a8 	bne.w	8005026 <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004ed6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004eda:	2b08      	cmp	r3, #8
 8004edc:	d834      	bhi.n	8004f48 <UART_SetConfig+0x2fc>
 8004ede:	a201      	add	r2, pc, #4	; (adr r2, 8004ee4 <UART_SetConfig+0x298>)
 8004ee0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ee4:	08004f09 	.word	0x08004f09
 8004ee8:	08004f49 	.word	0x08004f49
 8004eec:	08004f11 	.word	0x08004f11
 8004ef0:	08004f49 	.word	0x08004f49
 8004ef4:	08004f17 	.word	0x08004f17
 8004ef8:	08004f49 	.word	0x08004f49
 8004efc:	08004f49 	.word	0x08004f49
 8004f00:	08004f49 	.word	0x08004f49
 8004f04:	08004f1f 	.word	0x08004f1f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004f08:	f7ff fbee 	bl	80046e8 <HAL_RCC_GetPCLK1Freq>
 8004f0c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004f0e:	e021      	b.n	8004f54 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004f10:	4b0c      	ldr	r3, [pc, #48]	; (8004f44 <UART_SetConfig+0x2f8>)
 8004f12:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004f14:	e01e      	b.n	8004f54 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004f16:	f7ff fb79 	bl	800460c <HAL_RCC_GetSysClockFreq>
 8004f1a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004f1c:	e01a      	b.n	8004f54 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004f1e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004f22:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004f24:	e016      	b.n	8004f54 <UART_SetConfig+0x308>
 8004f26:	bf00      	nop
 8004f28:	cfff69f3 	.word	0xcfff69f3
 8004f2c:	40008000 	.word	0x40008000
 8004f30:	40013800 	.word	0x40013800
 8004f34:	40021000 	.word	0x40021000
 8004f38:	40004400 	.word	0x40004400
 8004f3c:	40004800 	.word	0x40004800
 8004f40:	40004c00 	.word	0x40004c00
 8004f44:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8004f48:	2300      	movs	r3, #0
 8004f4a:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8004f4c:	2301      	movs	r3, #1
 8004f4e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8004f52:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004f54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	f000 812a 	beq.w	80051b0 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004f5c:	697b      	ldr	r3, [r7, #20]
 8004f5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f60:	4a9e      	ldr	r2, [pc, #632]	; (80051dc <UART_SetConfig+0x590>)
 8004f62:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004f66:	461a      	mov	r2, r3
 8004f68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f6a:	fbb3 f3f2 	udiv	r3, r3, r2
 8004f6e:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004f70:	697b      	ldr	r3, [r7, #20]
 8004f72:	685a      	ldr	r2, [r3, #4]
 8004f74:	4613      	mov	r3, r2
 8004f76:	005b      	lsls	r3, r3, #1
 8004f78:	4413      	add	r3, r2
 8004f7a:	69ba      	ldr	r2, [r7, #24]
 8004f7c:	429a      	cmp	r2, r3
 8004f7e:	d305      	bcc.n	8004f8c <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004f80:	697b      	ldr	r3, [r7, #20]
 8004f82:	685b      	ldr	r3, [r3, #4]
 8004f84:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004f86:	69ba      	ldr	r2, [r7, #24]
 8004f88:	429a      	cmp	r2, r3
 8004f8a:	d903      	bls.n	8004f94 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 8004f8c:	2301      	movs	r3, #1
 8004f8e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8004f92:	e10d      	b.n	80051b0 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004f94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f96:	2200      	movs	r2, #0
 8004f98:	60bb      	str	r3, [r7, #8]
 8004f9a:	60fa      	str	r2, [r7, #12]
 8004f9c:	697b      	ldr	r3, [r7, #20]
 8004f9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fa0:	4a8e      	ldr	r2, [pc, #568]	; (80051dc <UART_SetConfig+0x590>)
 8004fa2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004fa6:	b29b      	uxth	r3, r3
 8004fa8:	2200      	movs	r2, #0
 8004faa:	603b      	str	r3, [r7, #0]
 8004fac:	607a      	str	r2, [r7, #4]
 8004fae:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004fb2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004fb6:	f7fb f92f 	bl	8000218 <__aeabi_uldivmod>
 8004fba:	4602      	mov	r2, r0
 8004fbc:	460b      	mov	r3, r1
 8004fbe:	4610      	mov	r0, r2
 8004fc0:	4619      	mov	r1, r3
 8004fc2:	f04f 0200 	mov.w	r2, #0
 8004fc6:	f04f 0300 	mov.w	r3, #0
 8004fca:	020b      	lsls	r3, r1, #8
 8004fcc:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004fd0:	0202      	lsls	r2, r0, #8
 8004fd2:	6979      	ldr	r1, [r7, #20]
 8004fd4:	6849      	ldr	r1, [r1, #4]
 8004fd6:	0849      	lsrs	r1, r1, #1
 8004fd8:	2000      	movs	r0, #0
 8004fda:	460c      	mov	r4, r1
 8004fdc:	4605      	mov	r5, r0
 8004fde:	eb12 0804 	adds.w	r8, r2, r4
 8004fe2:	eb43 0905 	adc.w	r9, r3, r5
 8004fe6:	697b      	ldr	r3, [r7, #20]
 8004fe8:	685b      	ldr	r3, [r3, #4]
 8004fea:	2200      	movs	r2, #0
 8004fec:	469a      	mov	sl, r3
 8004fee:	4693      	mov	fp, r2
 8004ff0:	4652      	mov	r2, sl
 8004ff2:	465b      	mov	r3, fp
 8004ff4:	4640      	mov	r0, r8
 8004ff6:	4649      	mov	r1, r9
 8004ff8:	f7fb f90e 	bl	8000218 <__aeabi_uldivmod>
 8004ffc:	4602      	mov	r2, r0
 8004ffe:	460b      	mov	r3, r1
 8005000:	4613      	mov	r3, r2
 8005002:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005004:	6a3b      	ldr	r3, [r7, #32]
 8005006:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800500a:	d308      	bcc.n	800501e <UART_SetConfig+0x3d2>
 800500c:	6a3b      	ldr	r3, [r7, #32]
 800500e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005012:	d204      	bcs.n	800501e <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 8005014:	697b      	ldr	r3, [r7, #20]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	6a3a      	ldr	r2, [r7, #32]
 800501a:	60da      	str	r2, [r3, #12]
 800501c:	e0c8      	b.n	80051b0 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 800501e:	2301      	movs	r3, #1
 8005020:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8005024:	e0c4      	b.n	80051b0 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005026:	697b      	ldr	r3, [r7, #20]
 8005028:	69db      	ldr	r3, [r3, #28]
 800502a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800502e:	d167      	bne.n	8005100 <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 8005030:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005034:	2b08      	cmp	r3, #8
 8005036:	d828      	bhi.n	800508a <UART_SetConfig+0x43e>
 8005038:	a201      	add	r2, pc, #4	; (adr r2, 8005040 <UART_SetConfig+0x3f4>)
 800503a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800503e:	bf00      	nop
 8005040:	08005065 	.word	0x08005065
 8005044:	0800506d 	.word	0x0800506d
 8005048:	08005075 	.word	0x08005075
 800504c:	0800508b 	.word	0x0800508b
 8005050:	0800507b 	.word	0x0800507b
 8005054:	0800508b 	.word	0x0800508b
 8005058:	0800508b 	.word	0x0800508b
 800505c:	0800508b 	.word	0x0800508b
 8005060:	08005083 	.word	0x08005083
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005064:	f7ff fb40 	bl	80046e8 <HAL_RCC_GetPCLK1Freq>
 8005068:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800506a:	e014      	b.n	8005096 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800506c:	f7ff fb52 	bl	8004714 <HAL_RCC_GetPCLK2Freq>
 8005070:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005072:	e010      	b.n	8005096 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005074:	4b5a      	ldr	r3, [pc, #360]	; (80051e0 <UART_SetConfig+0x594>)
 8005076:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005078:	e00d      	b.n	8005096 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800507a:	f7ff fac7 	bl	800460c <HAL_RCC_GetSysClockFreq>
 800507e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005080:	e009      	b.n	8005096 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005082:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005086:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005088:	e005      	b.n	8005096 <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 800508a:	2300      	movs	r3, #0
 800508c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800508e:	2301      	movs	r3, #1
 8005090:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8005094:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005096:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005098:	2b00      	cmp	r3, #0
 800509a:	f000 8089 	beq.w	80051b0 <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800509e:	697b      	ldr	r3, [r7, #20]
 80050a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050a2:	4a4e      	ldr	r2, [pc, #312]	; (80051dc <UART_SetConfig+0x590>)
 80050a4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80050a8:	461a      	mov	r2, r3
 80050aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050ac:	fbb3 f3f2 	udiv	r3, r3, r2
 80050b0:	005a      	lsls	r2, r3, #1
 80050b2:	697b      	ldr	r3, [r7, #20]
 80050b4:	685b      	ldr	r3, [r3, #4]
 80050b6:	085b      	lsrs	r3, r3, #1
 80050b8:	441a      	add	r2, r3
 80050ba:	697b      	ldr	r3, [r7, #20]
 80050bc:	685b      	ldr	r3, [r3, #4]
 80050be:	fbb2 f3f3 	udiv	r3, r2, r3
 80050c2:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80050c4:	6a3b      	ldr	r3, [r7, #32]
 80050c6:	2b0f      	cmp	r3, #15
 80050c8:	d916      	bls.n	80050f8 <UART_SetConfig+0x4ac>
 80050ca:	6a3b      	ldr	r3, [r7, #32]
 80050cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80050d0:	d212      	bcs.n	80050f8 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80050d2:	6a3b      	ldr	r3, [r7, #32]
 80050d4:	b29b      	uxth	r3, r3
 80050d6:	f023 030f 	bic.w	r3, r3, #15
 80050da:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80050dc:	6a3b      	ldr	r3, [r7, #32]
 80050de:	085b      	lsrs	r3, r3, #1
 80050e0:	b29b      	uxth	r3, r3
 80050e2:	f003 0307 	and.w	r3, r3, #7
 80050e6:	b29a      	uxth	r2, r3
 80050e8:	8bfb      	ldrh	r3, [r7, #30]
 80050ea:	4313      	orrs	r3, r2
 80050ec:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80050ee:	697b      	ldr	r3, [r7, #20]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	8bfa      	ldrh	r2, [r7, #30]
 80050f4:	60da      	str	r2, [r3, #12]
 80050f6:	e05b      	b.n	80051b0 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 80050f8:	2301      	movs	r3, #1
 80050fa:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80050fe:	e057      	b.n	80051b0 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005100:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005104:	2b08      	cmp	r3, #8
 8005106:	d828      	bhi.n	800515a <UART_SetConfig+0x50e>
 8005108:	a201      	add	r2, pc, #4	; (adr r2, 8005110 <UART_SetConfig+0x4c4>)
 800510a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800510e:	bf00      	nop
 8005110:	08005135 	.word	0x08005135
 8005114:	0800513d 	.word	0x0800513d
 8005118:	08005145 	.word	0x08005145
 800511c:	0800515b 	.word	0x0800515b
 8005120:	0800514b 	.word	0x0800514b
 8005124:	0800515b 	.word	0x0800515b
 8005128:	0800515b 	.word	0x0800515b
 800512c:	0800515b 	.word	0x0800515b
 8005130:	08005153 	.word	0x08005153
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005134:	f7ff fad8 	bl	80046e8 <HAL_RCC_GetPCLK1Freq>
 8005138:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800513a:	e014      	b.n	8005166 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800513c:	f7ff faea 	bl	8004714 <HAL_RCC_GetPCLK2Freq>
 8005140:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005142:	e010      	b.n	8005166 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005144:	4b26      	ldr	r3, [pc, #152]	; (80051e0 <UART_SetConfig+0x594>)
 8005146:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005148:	e00d      	b.n	8005166 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800514a:	f7ff fa5f 	bl	800460c <HAL_RCC_GetSysClockFreq>
 800514e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005150:	e009      	b.n	8005166 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005152:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005156:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005158:	e005      	b.n	8005166 <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 800515a:	2300      	movs	r3, #0
 800515c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800515e:	2301      	movs	r3, #1
 8005160:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8005164:	bf00      	nop
    }

    if (pclk != 0U)
 8005166:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005168:	2b00      	cmp	r3, #0
 800516a:	d021      	beq.n	80051b0 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800516c:	697b      	ldr	r3, [r7, #20]
 800516e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005170:	4a1a      	ldr	r2, [pc, #104]	; (80051dc <UART_SetConfig+0x590>)
 8005172:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005176:	461a      	mov	r2, r3
 8005178:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800517a:	fbb3 f2f2 	udiv	r2, r3, r2
 800517e:	697b      	ldr	r3, [r7, #20]
 8005180:	685b      	ldr	r3, [r3, #4]
 8005182:	085b      	lsrs	r3, r3, #1
 8005184:	441a      	add	r2, r3
 8005186:	697b      	ldr	r3, [r7, #20]
 8005188:	685b      	ldr	r3, [r3, #4]
 800518a:	fbb2 f3f3 	udiv	r3, r2, r3
 800518e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005190:	6a3b      	ldr	r3, [r7, #32]
 8005192:	2b0f      	cmp	r3, #15
 8005194:	d909      	bls.n	80051aa <UART_SetConfig+0x55e>
 8005196:	6a3b      	ldr	r3, [r7, #32]
 8005198:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800519c:	d205      	bcs.n	80051aa <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800519e:	6a3b      	ldr	r3, [r7, #32]
 80051a0:	b29a      	uxth	r2, r3
 80051a2:	697b      	ldr	r3, [r7, #20]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	60da      	str	r2, [r3, #12]
 80051a8:	e002      	b.n	80051b0 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 80051aa:	2301      	movs	r3, #1
 80051ac:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80051b0:	697b      	ldr	r3, [r7, #20]
 80051b2:	2201      	movs	r2, #1
 80051b4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80051b8:	697b      	ldr	r3, [r7, #20]
 80051ba:	2201      	movs	r2, #1
 80051bc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80051c0:	697b      	ldr	r3, [r7, #20]
 80051c2:	2200      	movs	r2, #0
 80051c4:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 80051c6:	697b      	ldr	r3, [r7, #20]
 80051c8:	2200      	movs	r2, #0
 80051ca:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 80051cc:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 80051d0:	4618      	mov	r0, r3
 80051d2:	3730      	adds	r7, #48	; 0x30
 80051d4:	46bd      	mov	sp, r7
 80051d6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80051da:	bf00      	nop
 80051dc:	0800a0d0 	.word	0x0800a0d0
 80051e0:	00f42400 	.word	0x00f42400

080051e4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80051e4:	b480      	push	{r7}
 80051e6:	b083      	sub	sp, #12
 80051e8:	af00      	add	r7, sp, #0
 80051ea:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051f0:	f003 0301 	and.w	r3, r3, #1
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d00a      	beq.n	800520e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	685b      	ldr	r3, [r3, #4]
 80051fe:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	430a      	orrs	r2, r1
 800520c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005212:	f003 0302 	and.w	r3, r3, #2
 8005216:	2b00      	cmp	r3, #0
 8005218:	d00a      	beq.n	8005230 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	685b      	ldr	r3, [r3, #4]
 8005220:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	430a      	orrs	r2, r1
 800522e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005234:	f003 0304 	and.w	r3, r3, #4
 8005238:	2b00      	cmp	r3, #0
 800523a:	d00a      	beq.n	8005252 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	685b      	ldr	r3, [r3, #4]
 8005242:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	430a      	orrs	r2, r1
 8005250:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005256:	f003 0308 	and.w	r3, r3, #8
 800525a:	2b00      	cmp	r3, #0
 800525c:	d00a      	beq.n	8005274 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	685b      	ldr	r3, [r3, #4]
 8005264:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	430a      	orrs	r2, r1
 8005272:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005278:	f003 0310 	and.w	r3, r3, #16
 800527c:	2b00      	cmp	r3, #0
 800527e:	d00a      	beq.n	8005296 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	689b      	ldr	r3, [r3, #8]
 8005286:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	430a      	orrs	r2, r1
 8005294:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800529a:	f003 0320 	and.w	r3, r3, #32
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d00a      	beq.n	80052b8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	689b      	ldr	r3, [r3, #8]
 80052a8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	430a      	orrs	r2, r1
 80052b6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d01a      	beq.n	80052fa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	685b      	ldr	r3, [r3, #4]
 80052ca:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	430a      	orrs	r2, r1
 80052d8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052de:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80052e2:	d10a      	bne.n	80052fa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	685b      	ldr	r3, [r3, #4]
 80052ea:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	430a      	orrs	r2, r1
 80052f8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005302:	2b00      	cmp	r3, #0
 8005304:	d00a      	beq.n	800531c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	685b      	ldr	r3, [r3, #4]
 800530c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	430a      	orrs	r2, r1
 800531a:	605a      	str	r2, [r3, #4]
  }
}
 800531c:	bf00      	nop
 800531e:	370c      	adds	r7, #12
 8005320:	46bd      	mov	sp, r7
 8005322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005326:	4770      	bx	lr

08005328 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005328:	b580      	push	{r7, lr}
 800532a:	b086      	sub	sp, #24
 800532c:	af02      	add	r7, sp, #8
 800532e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	2200      	movs	r2, #0
 8005334:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005338:	f7fb fe10 	bl	8000f5c <HAL_GetTick>
 800533c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	f003 0308 	and.w	r3, r3, #8
 8005348:	2b08      	cmp	r3, #8
 800534a:	d10e      	bne.n	800536a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800534c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005350:	9300      	str	r3, [sp, #0]
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	2200      	movs	r2, #0
 8005356:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800535a:	6878      	ldr	r0, [r7, #4]
 800535c:	f000 f82f 	bl	80053be <UART_WaitOnFlagUntilTimeout>
 8005360:	4603      	mov	r3, r0
 8005362:	2b00      	cmp	r3, #0
 8005364:	d001      	beq.n	800536a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005366:	2303      	movs	r3, #3
 8005368:	e025      	b.n	80053b6 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	f003 0304 	and.w	r3, r3, #4
 8005374:	2b04      	cmp	r3, #4
 8005376:	d10e      	bne.n	8005396 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005378:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800537c:	9300      	str	r3, [sp, #0]
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	2200      	movs	r2, #0
 8005382:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005386:	6878      	ldr	r0, [r7, #4]
 8005388:	f000 f819 	bl	80053be <UART_WaitOnFlagUntilTimeout>
 800538c:	4603      	mov	r3, r0
 800538e:	2b00      	cmp	r3, #0
 8005390:	d001      	beq.n	8005396 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005392:	2303      	movs	r3, #3
 8005394:	e00f      	b.n	80053b6 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	2220      	movs	r2, #32
 800539a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	2220      	movs	r2, #32
 80053a2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	2200      	movs	r2, #0
 80053aa:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	2200      	movs	r2, #0
 80053b0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80053b4:	2300      	movs	r3, #0
}
 80053b6:	4618      	mov	r0, r3
 80053b8:	3710      	adds	r7, #16
 80053ba:	46bd      	mov	sp, r7
 80053bc:	bd80      	pop	{r7, pc}

080053be <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80053be:	b580      	push	{r7, lr}
 80053c0:	b09c      	sub	sp, #112	; 0x70
 80053c2:	af00      	add	r7, sp, #0
 80053c4:	60f8      	str	r0, [r7, #12]
 80053c6:	60b9      	str	r1, [r7, #8]
 80053c8:	603b      	str	r3, [r7, #0]
 80053ca:	4613      	mov	r3, r2
 80053cc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80053ce:	e0a9      	b.n	8005524 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80053d0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80053d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053d6:	f000 80a5 	beq.w	8005524 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80053da:	f7fb fdbf 	bl	8000f5c <HAL_GetTick>
 80053de:	4602      	mov	r2, r0
 80053e0:	683b      	ldr	r3, [r7, #0]
 80053e2:	1ad3      	subs	r3, r2, r3
 80053e4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80053e6:	429a      	cmp	r2, r3
 80053e8:	d302      	bcc.n	80053f0 <UART_WaitOnFlagUntilTimeout+0x32>
 80053ea:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d140      	bne.n	8005472 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053f6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80053f8:	e853 3f00 	ldrex	r3, [r3]
 80053fc:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80053fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005400:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005404:	667b      	str	r3, [r7, #100]	; 0x64
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	461a      	mov	r2, r3
 800540c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800540e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005410:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005412:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005414:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005416:	e841 2300 	strex	r3, r2, [r1]
 800541a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800541c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800541e:	2b00      	cmp	r3, #0
 8005420:	d1e6      	bne.n	80053f0 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	3308      	adds	r3, #8
 8005428:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800542a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800542c:	e853 3f00 	ldrex	r3, [r3]
 8005430:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005432:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005434:	f023 0301 	bic.w	r3, r3, #1
 8005438:	663b      	str	r3, [r7, #96]	; 0x60
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	3308      	adds	r3, #8
 8005440:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005442:	64ba      	str	r2, [r7, #72]	; 0x48
 8005444:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005446:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005448:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800544a:	e841 2300 	strex	r3, r2, [r1]
 800544e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005450:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005452:	2b00      	cmp	r3, #0
 8005454:	d1e5      	bne.n	8005422 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	2220      	movs	r2, #32
 800545a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	2220      	movs	r2, #32
 8005462:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	2200      	movs	r2, #0
 800546a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800546e:	2303      	movs	r3, #3
 8005470:	e069      	b.n	8005546 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	f003 0304 	and.w	r3, r3, #4
 800547c:	2b00      	cmp	r3, #0
 800547e:	d051      	beq.n	8005524 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	69db      	ldr	r3, [r3, #28]
 8005486:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800548a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800548e:	d149      	bne.n	8005524 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005498:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054a2:	e853 3f00 	ldrex	r3, [r3]
 80054a6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80054a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054aa:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80054ae:	66fb      	str	r3, [r7, #108]	; 0x6c
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	461a      	mov	r2, r3
 80054b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80054b8:	637b      	str	r3, [r7, #52]	; 0x34
 80054ba:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054bc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80054be:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80054c0:	e841 2300 	strex	r3, r2, [r1]
 80054c4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80054c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d1e6      	bne.n	800549a <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	3308      	adds	r3, #8
 80054d2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054d4:	697b      	ldr	r3, [r7, #20]
 80054d6:	e853 3f00 	ldrex	r3, [r3]
 80054da:	613b      	str	r3, [r7, #16]
   return(result);
 80054dc:	693b      	ldr	r3, [r7, #16]
 80054de:	f023 0301 	bic.w	r3, r3, #1
 80054e2:	66bb      	str	r3, [r7, #104]	; 0x68
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	3308      	adds	r3, #8
 80054ea:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80054ec:	623a      	str	r2, [r7, #32]
 80054ee:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054f0:	69f9      	ldr	r1, [r7, #28]
 80054f2:	6a3a      	ldr	r2, [r7, #32]
 80054f4:	e841 2300 	strex	r3, r2, [r1]
 80054f8:	61bb      	str	r3, [r7, #24]
   return(result);
 80054fa:	69bb      	ldr	r3, [r7, #24]
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d1e5      	bne.n	80054cc <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	2220      	movs	r2, #32
 8005504:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	2220      	movs	r2, #32
 800550c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	2220      	movs	r2, #32
 8005514:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	2200      	movs	r2, #0
 800551c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8005520:	2303      	movs	r3, #3
 8005522:	e010      	b.n	8005546 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	69da      	ldr	r2, [r3, #28]
 800552a:	68bb      	ldr	r3, [r7, #8]
 800552c:	4013      	ands	r3, r2
 800552e:	68ba      	ldr	r2, [r7, #8]
 8005530:	429a      	cmp	r2, r3
 8005532:	bf0c      	ite	eq
 8005534:	2301      	moveq	r3, #1
 8005536:	2300      	movne	r3, #0
 8005538:	b2db      	uxtb	r3, r3
 800553a:	461a      	mov	r2, r3
 800553c:	79fb      	ldrb	r3, [r7, #7]
 800553e:	429a      	cmp	r2, r3
 8005540:	f43f af46 	beq.w	80053d0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005544:	2300      	movs	r3, #0
}
 8005546:	4618      	mov	r0, r3
 8005548:	3770      	adds	r7, #112	; 0x70
 800554a:	46bd      	mov	sp, r7
 800554c:	bd80      	pop	{r7, pc}

0800554e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800554e:	b480      	push	{r7}
 8005550:	b085      	sub	sp, #20
 8005552:	af00      	add	r7, sp, #0
 8005554:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800555c:	2b01      	cmp	r3, #1
 800555e:	d101      	bne.n	8005564 <HAL_UARTEx_DisableFifoMode+0x16>
 8005560:	2302      	movs	r3, #2
 8005562:	e027      	b.n	80055b4 <HAL_UARTEx_DisableFifoMode+0x66>
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	2201      	movs	r2, #1
 8005568:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	2224      	movs	r2, #36	; 0x24
 8005570:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	681a      	ldr	r2, [r3, #0]
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	f022 0201 	bic.w	r2, r2, #1
 800558a:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8005592:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	2200      	movs	r2, #0
 8005598:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	68fa      	ldr	r2, [r7, #12]
 80055a0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	2220      	movs	r2, #32
 80055a6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	2200      	movs	r2, #0
 80055ae:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80055b2:	2300      	movs	r3, #0
}
 80055b4:	4618      	mov	r0, r3
 80055b6:	3714      	adds	r7, #20
 80055b8:	46bd      	mov	sp, r7
 80055ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055be:	4770      	bx	lr

080055c0 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80055c0:	b580      	push	{r7, lr}
 80055c2:	b084      	sub	sp, #16
 80055c4:	af00      	add	r7, sp, #0
 80055c6:	6078      	str	r0, [r7, #4]
 80055c8:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80055d0:	2b01      	cmp	r3, #1
 80055d2:	d101      	bne.n	80055d8 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80055d4:	2302      	movs	r3, #2
 80055d6:	e02d      	b.n	8005634 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	2201      	movs	r2, #1
 80055dc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	2224      	movs	r2, #36	; 0x24
 80055e4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	681a      	ldr	r2, [r3, #0]
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	f022 0201 	bic.w	r2, r2, #1
 80055fe:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	689b      	ldr	r3, [r3, #8]
 8005606:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	683a      	ldr	r2, [r7, #0]
 8005610:	430a      	orrs	r2, r1
 8005612:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005614:	6878      	ldr	r0, [r7, #4]
 8005616:	f000 f84f 	bl	80056b8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	68fa      	ldr	r2, [r7, #12]
 8005620:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	2220      	movs	r2, #32
 8005626:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	2200      	movs	r2, #0
 800562e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005632:	2300      	movs	r3, #0
}
 8005634:	4618      	mov	r0, r3
 8005636:	3710      	adds	r7, #16
 8005638:	46bd      	mov	sp, r7
 800563a:	bd80      	pop	{r7, pc}

0800563c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800563c:	b580      	push	{r7, lr}
 800563e:	b084      	sub	sp, #16
 8005640:	af00      	add	r7, sp, #0
 8005642:	6078      	str	r0, [r7, #4]
 8005644:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800564c:	2b01      	cmp	r3, #1
 800564e:	d101      	bne.n	8005654 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005650:	2302      	movs	r3, #2
 8005652:	e02d      	b.n	80056b0 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	2201      	movs	r2, #1
 8005658:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	2224      	movs	r2, #36	; 0x24
 8005660:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	681a      	ldr	r2, [r3, #0]
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	f022 0201 	bic.w	r2, r2, #1
 800567a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	689b      	ldr	r3, [r3, #8]
 8005682:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	683a      	ldr	r2, [r7, #0]
 800568c:	430a      	orrs	r2, r1
 800568e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005690:	6878      	ldr	r0, [r7, #4]
 8005692:	f000 f811 	bl	80056b8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	68fa      	ldr	r2, [r7, #12]
 800569c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	2220      	movs	r2, #32
 80056a2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	2200      	movs	r2, #0
 80056aa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80056ae:	2300      	movs	r3, #0
}
 80056b0:	4618      	mov	r0, r3
 80056b2:	3710      	adds	r7, #16
 80056b4:	46bd      	mov	sp, r7
 80056b6:	bd80      	pop	{r7, pc}

080056b8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80056b8:	b480      	push	{r7}
 80056ba:	b085      	sub	sp, #20
 80056bc:	af00      	add	r7, sp, #0
 80056be:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d108      	bne.n	80056da <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	2201      	movs	r2, #1
 80056cc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	2201      	movs	r2, #1
 80056d4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80056d8:	e031      	b.n	800573e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80056da:	2308      	movs	r3, #8
 80056dc:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80056de:	2308      	movs	r3, #8
 80056e0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	689b      	ldr	r3, [r3, #8]
 80056e8:	0e5b      	lsrs	r3, r3, #25
 80056ea:	b2db      	uxtb	r3, r3
 80056ec:	f003 0307 	and.w	r3, r3, #7
 80056f0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	689b      	ldr	r3, [r3, #8]
 80056f8:	0f5b      	lsrs	r3, r3, #29
 80056fa:	b2db      	uxtb	r3, r3
 80056fc:	f003 0307 	and.w	r3, r3, #7
 8005700:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005702:	7bbb      	ldrb	r3, [r7, #14]
 8005704:	7b3a      	ldrb	r2, [r7, #12]
 8005706:	4911      	ldr	r1, [pc, #68]	; (800574c <UARTEx_SetNbDataToProcess+0x94>)
 8005708:	5c8a      	ldrb	r2, [r1, r2]
 800570a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800570e:	7b3a      	ldrb	r2, [r7, #12]
 8005710:	490f      	ldr	r1, [pc, #60]	; (8005750 <UARTEx_SetNbDataToProcess+0x98>)
 8005712:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005714:	fb93 f3f2 	sdiv	r3, r3, r2
 8005718:	b29a      	uxth	r2, r3
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005720:	7bfb      	ldrb	r3, [r7, #15]
 8005722:	7b7a      	ldrb	r2, [r7, #13]
 8005724:	4909      	ldr	r1, [pc, #36]	; (800574c <UARTEx_SetNbDataToProcess+0x94>)
 8005726:	5c8a      	ldrb	r2, [r1, r2]
 8005728:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800572c:	7b7a      	ldrb	r2, [r7, #13]
 800572e:	4908      	ldr	r1, [pc, #32]	; (8005750 <UARTEx_SetNbDataToProcess+0x98>)
 8005730:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005732:	fb93 f3f2 	sdiv	r3, r3, r2
 8005736:	b29a      	uxth	r2, r3
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800573e:	bf00      	nop
 8005740:	3714      	adds	r7, #20
 8005742:	46bd      	mov	sp, r7
 8005744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005748:	4770      	bx	lr
 800574a:	bf00      	nop
 800574c:	0800a0e8 	.word	0x0800a0e8
 8005750:	0800a0f0 	.word	0x0800a0f0

08005754 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8005754:	b480      	push	{r7}
 8005756:	b085      	sub	sp, #20
 8005758:	af00      	add	r7, sp, #0
 800575a:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	2200      	movs	r2, #0
 8005760:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8005764:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8005768:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	b29a      	uxth	r2, r3
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005774:	2300      	movs	r3, #0
}
 8005776:	4618      	mov	r0, r3
 8005778:	3714      	adds	r7, #20
 800577a:	46bd      	mov	sp, r7
 800577c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005780:	4770      	bx	lr

08005782 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8005782:	b480      	push	{r7}
 8005784:	b085      	sub	sp, #20
 8005786:	af00      	add	r7, sp, #0
 8005788:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800578a:	f64b 7380 	movw	r3, #49024	; 0xbf80
 800578e:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8005796:	b29a      	uxth	r2, r3
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	b29b      	uxth	r3, r3
 800579c:	43db      	mvns	r3, r3
 800579e:	b29b      	uxth	r3, r3
 80057a0:	4013      	ands	r3, r2
 80057a2:	b29a      	uxth	r2, r3
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80057aa:	2300      	movs	r3, #0
}
 80057ac:	4618      	mov	r0, r3
 80057ae:	3714      	adds	r7, #20
 80057b0:	46bd      	mov	sp, r7
 80057b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b6:	4770      	bx	lr

080057b8 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80057b8:	b084      	sub	sp, #16
 80057ba:	b480      	push	{r7}
 80057bc:	b083      	sub	sp, #12
 80057be:	af00      	add	r7, sp, #0
 80057c0:	6078      	str	r0, [r7, #4]
 80057c2:	f107 0014 	add.w	r0, r7, #20
 80057c6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	2201      	movs	r2, #1
 80057ce:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	2200      	movs	r2, #0
 80057d6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	2200      	movs	r2, #0
 80057de:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	2200      	movs	r2, #0
 80057e6:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 80057ea:	2300      	movs	r3, #0
}
 80057ec:	4618      	mov	r0, r3
 80057ee:	370c      	adds	r7, #12
 80057f0:	46bd      	mov	sp, r7
 80057f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f6:	b004      	add	sp, #16
 80057f8:	4770      	bx	lr
	...

080057fc <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80057fc:	b480      	push	{r7}
 80057fe:	b09d      	sub	sp, #116	; 0x74
 8005800:	af00      	add	r7, sp, #0
 8005802:	6078      	str	r0, [r7, #4]
 8005804:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8005806:	2300      	movs	r3, #0
 8005808:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800580c:	687a      	ldr	r2, [r7, #4]
 800580e:	683b      	ldr	r3, [r7, #0]
 8005810:	781b      	ldrb	r3, [r3, #0]
 8005812:	009b      	lsls	r3, r3, #2
 8005814:	4413      	add	r3, r2
 8005816:	881b      	ldrh	r3, [r3, #0]
 8005818:	b29b      	uxth	r3, r3
 800581a:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 800581e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005822:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 8005826:	683b      	ldr	r3, [r7, #0]
 8005828:	78db      	ldrb	r3, [r3, #3]
 800582a:	2b03      	cmp	r3, #3
 800582c:	d81f      	bhi.n	800586e <USB_ActivateEndpoint+0x72>
 800582e:	a201      	add	r2, pc, #4	; (adr r2, 8005834 <USB_ActivateEndpoint+0x38>)
 8005830:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005834:	08005845 	.word	0x08005845
 8005838:	08005861 	.word	0x08005861
 800583c:	08005877 	.word	0x08005877
 8005840:	08005853 	.word	0x08005853
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8005844:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8005848:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800584c:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8005850:	e012      	b.n	8005878 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8005852:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8005856:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 800585a:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 800585e:	e00b      	b.n	8005878 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8005860:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8005864:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005868:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 800586c:	e004      	b.n	8005878 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 800586e:	2301      	movs	r3, #1
 8005870:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 8005874:	e000      	b.n	8005878 <USB_ActivateEndpoint+0x7c>
      break;
 8005876:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8005878:	687a      	ldr	r2, [r7, #4]
 800587a:	683b      	ldr	r3, [r7, #0]
 800587c:	781b      	ldrb	r3, [r3, #0]
 800587e:	009b      	lsls	r3, r3, #2
 8005880:	441a      	add	r2, r3
 8005882:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8005886:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800588a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800588e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005892:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005896:	b29b      	uxth	r3, r3
 8005898:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800589a:	687a      	ldr	r2, [r7, #4]
 800589c:	683b      	ldr	r3, [r7, #0]
 800589e:	781b      	ldrb	r3, [r3, #0]
 80058a0:	009b      	lsls	r3, r3, #2
 80058a2:	4413      	add	r3, r2
 80058a4:	881b      	ldrh	r3, [r3, #0]
 80058a6:	b29b      	uxth	r3, r3
 80058a8:	b21b      	sxth	r3, r3
 80058aa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80058ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80058b2:	b21a      	sxth	r2, r3
 80058b4:	683b      	ldr	r3, [r7, #0]
 80058b6:	781b      	ldrb	r3, [r3, #0]
 80058b8:	b21b      	sxth	r3, r3
 80058ba:	4313      	orrs	r3, r2
 80058bc:	b21b      	sxth	r3, r3
 80058be:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 80058c2:	687a      	ldr	r2, [r7, #4]
 80058c4:	683b      	ldr	r3, [r7, #0]
 80058c6:	781b      	ldrb	r3, [r3, #0]
 80058c8:	009b      	lsls	r3, r3, #2
 80058ca:	441a      	add	r2, r3
 80058cc:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 80058d0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80058d4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80058d8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80058dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80058e0:	b29b      	uxth	r3, r3
 80058e2:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 80058e4:	683b      	ldr	r3, [r7, #0]
 80058e6:	7b1b      	ldrb	r3, [r3, #12]
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	f040 8149 	bne.w	8005b80 <USB_ActivateEndpoint+0x384>
  {
    if (ep->is_in != 0U)
 80058ee:	683b      	ldr	r3, [r7, #0]
 80058f0:	785b      	ldrb	r3, [r3, #1]
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	f000 8084 	beq.w	8005a00 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	61bb      	str	r3, [r7, #24]
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005902:	b29b      	uxth	r3, r3
 8005904:	461a      	mov	r2, r3
 8005906:	69bb      	ldr	r3, [r7, #24]
 8005908:	4413      	add	r3, r2
 800590a:	61bb      	str	r3, [r7, #24]
 800590c:	683b      	ldr	r3, [r7, #0]
 800590e:	781b      	ldrb	r3, [r3, #0]
 8005910:	00da      	lsls	r2, r3, #3
 8005912:	69bb      	ldr	r3, [r7, #24]
 8005914:	4413      	add	r3, r2
 8005916:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800591a:	617b      	str	r3, [r7, #20]
 800591c:	683b      	ldr	r3, [r7, #0]
 800591e:	88db      	ldrh	r3, [r3, #6]
 8005920:	085b      	lsrs	r3, r3, #1
 8005922:	b29b      	uxth	r3, r3
 8005924:	005b      	lsls	r3, r3, #1
 8005926:	b29a      	uxth	r2, r3
 8005928:	697b      	ldr	r3, [r7, #20]
 800592a:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800592c:	687a      	ldr	r2, [r7, #4]
 800592e:	683b      	ldr	r3, [r7, #0]
 8005930:	781b      	ldrb	r3, [r3, #0]
 8005932:	009b      	lsls	r3, r3, #2
 8005934:	4413      	add	r3, r2
 8005936:	881b      	ldrh	r3, [r3, #0]
 8005938:	827b      	strh	r3, [r7, #18]
 800593a:	8a7b      	ldrh	r3, [r7, #18]
 800593c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005940:	2b00      	cmp	r3, #0
 8005942:	d01b      	beq.n	800597c <USB_ActivateEndpoint+0x180>
 8005944:	687a      	ldr	r2, [r7, #4]
 8005946:	683b      	ldr	r3, [r7, #0]
 8005948:	781b      	ldrb	r3, [r3, #0]
 800594a:	009b      	lsls	r3, r3, #2
 800594c:	4413      	add	r3, r2
 800594e:	881b      	ldrh	r3, [r3, #0]
 8005950:	b29b      	uxth	r3, r3
 8005952:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005956:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800595a:	823b      	strh	r3, [r7, #16]
 800595c:	687a      	ldr	r2, [r7, #4]
 800595e:	683b      	ldr	r3, [r7, #0]
 8005960:	781b      	ldrb	r3, [r3, #0]
 8005962:	009b      	lsls	r3, r3, #2
 8005964:	441a      	add	r2, r3
 8005966:	8a3b      	ldrh	r3, [r7, #16]
 8005968:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800596c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005970:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005974:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005978:	b29b      	uxth	r3, r3
 800597a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800597c:	683b      	ldr	r3, [r7, #0]
 800597e:	78db      	ldrb	r3, [r3, #3]
 8005980:	2b01      	cmp	r3, #1
 8005982:	d020      	beq.n	80059c6 <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005984:	687a      	ldr	r2, [r7, #4]
 8005986:	683b      	ldr	r3, [r7, #0]
 8005988:	781b      	ldrb	r3, [r3, #0]
 800598a:	009b      	lsls	r3, r3, #2
 800598c:	4413      	add	r3, r2
 800598e:	881b      	ldrh	r3, [r3, #0]
 8005990:	b29b      	uxth	r3, r3
 8005992:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005996:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800599a:	81bb      	strh	r3, [r7, #12]
 800599c:	89bb      	ldrh	r3, [r7, #12]
 800599e:	f083 0320 	eor.w	r3, r3, #32
 80059a2:	81bb      	strh	r3, [r7, #12]
 80059a4:	687a      	ldr	r2, [r7, #4]
 80059a6:	683b      	ldr	r3, [r7, #0]
 80059a8:	781b      	ldrb	r3, [r3, #0]
 80059aa:	009b      	lsls	r3, r3, #2
 80059ac:	441a      	add	r2, r3
 80059ae:	89bb      	ldrh	r3, [r7, #12]
 80059b0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80059b4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80059b8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80059bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80059c0:	b29b      	uxth	r3, r3
 80059c2:	8013      	strh	r3, [r2, #0]
 80059c4:	e2a6      	b.n	8005f14 <USB_ActivateEndpoint+0x718>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80059c6:	687a      	ldr	r2, [r7, #4]
 80059c8:	683b      	ldr	r3, [r7, #0]
 80059ca:	781b      	ldrb	r3, [r3, #0]
 80059cc:	009b      	lsls	r3, r3, #2
 80059ce:	4413      	add	r3, r2
 80059d0:	881b      	ldrh	r3, [r3, #0]
 80059d2:	b29b      	uxth	r3, r3
 80059d4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80059d8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80059dc:	81fb      	strh	r3, [r7, #14]
 80059de:	687a      	ldr	r2, [r7, #4]
 80059e0:	683b      	ldr	r3, [r7, #0]
 80059e2:	781b      	ldrb	r3, [r3, #0]
 80059e4:	009b      	lsls	r3, r3, #2
 80059e6:	441a      	add	r2, r3
 80059e8:	89fb      	ldrh	r3, [r7, #14]
 80059ea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80059ee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80059f2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80059f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80059fa:	b29b      	uxth	r3, r3
 80059fc:	8013      	strh	r3, [r2, #0]
 80059fe:	e289      	b.n	8005f14 <USB_ActivateEndpoint+0x718>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	633b      	str	r3, [r7, #48]	; 0x30
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005a0a:	b29b      	uxth	r3, r3
 8005a0c:	461a      	mov	r2, r3
 8005a0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a10:	4413      	add	r3, r2
 8005a12:	633b      	str	r3, [r7, #48]	; 0x30
 8005a14:	683b      	ldr	r3, [r7, #0]
 8005a16:	781b      	ldrb	r3, [r3, #0]
 8005a18:	00da      	lsls	r2, r3, #3
 8005a1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a1c:	4413      	add	r3, r2
 8005a1e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005a22:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005a24:	683b      	ldr	r3, [r7, #0]
 8005a26:	88db      	ldrh	r3, [r3, #6]
 8005a28:	085b      	lsrs	r3, r3, #1
 8005a2a:	b29b      	uxth	r3, r3
 8005a2c:	005b      	lsls	r3, r3, #1
 8005a2e:	b29a      	uxth	r2, r3
 8005a30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a32:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	62bb      	str	r3, [r7, #40]	; 0x28
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005a3e:	b29b      	uxth	r3, r3
 8005a40:	461a      	mov	r2, r3
 8005a42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a44:	4413      	add	r3, r2
 8005a46:	62bb      	str	r3, [r7, #40]	; 0x28
 8005a48:	683b      	ldr	r3, [r7, #0]
 8005a4a:	781b      	ldrb	r3, [r3, #0]
 8005a4c:	00da      	lsls	r2, r3, #3
 8005a4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a50:	4413      	add	r3, r2
 8005a52:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005a56:	627b      	str	r3, [r7, #36]	; 0x24
 8005a58:	683b      	ldr	r3, [r7, #0]
 8005a5a:	691b      	ldr	r3, [r3, #16]
 8005a5c:	2b3e      	cmp	r3, #62	; 0x3e
 8005a5e:	d918      	bls.n	8005a92 <USB_ActivateEndpoint+0x296>
 8005a60:	683b      	ldr	r3, [r7, #0]
 8005a62:	691b      	ldr	r3, [r3, #16]
 8005a64:	095b      	lsrs	r3, r3, #5
 8005a66:	66bb      	str	r3, [r7, #104]	; 0x68
 8005a68:	683b      	ldr	r3, [r7, #0]
 8005a6a:	691b      	ldr	r3, [r3, #16]
 8005a6c:	f003 031f 	and.w	r3, r3, #31
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d102      	bne.n	8005a7a <USB_ActivateEndpoint+0x27e>
 8005a74:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005a76:	3b01      	subs	r3, #1
 8005a78:	66bb      	str	r3, [r7, #104]	; 0x68
 8005a7a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005a7c:	b29b      	uxth	r3, r3
 8005a7e:	029b      	lsls	r3, r3, #10
 8005a80:	b29b      	uxth	r3, r3
 8005a82:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005a86:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005a8a:	b29a      	uxth	r2, r3
 8005a8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a8e:	801a      	strh	r2, [r3, #0]
 8005a90:	e029      	b.n	8005ae6 <USB_ActivateEndpoint+0x2ea>
 8005a92:	683b      	ldr	r3, [r7, #0]
 8005a94:	691b      	ldr	r3, [r3, #16]
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d112      	bne.n	8005ac0 <USB_ActivateEndpoint+0x2c4>
 8005a9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a9c:	881b      	ldrh	r3, [r3, #0]
 8005a9e:	b29b      	uxth	r3, r3
 8005aa0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005aa4:	b29a      	uxth	r2, r3
 8005aa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005aa8:	801a      	strh	r2, [r3, #0]
 8005aaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005aac:	881b      	ldrh	r3, [r3, #0]
 8005aae:	b29b      	uxth	r3, r3
 8005ab0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005ab4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005ab8:	b29a      	uxth	r2, r3
 8005aba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005abc:	801a      	strh	r2, [r3, #0]
 8005abe:	e012      	b.n	8005ae6 <USB_ActivateEndpoint+0x2ea>
 8005ac0:	683b      	ldr	r3, [r7, #0]
 8005ac2:	691b      	ldr	r3, [r3, #16]
 8005ac4:	085b      	lsrs	r3, r3, #1
 8005ac6:	66bb      	str	r3, [r7, #104]	; 0x68
 8005ac8:	683b      	ldr	r3, [r7, #0]
 8005aca:	691b      	ldr	r3, [r3, #16]
 8005acc:	f003 0301 	and.w	r3, r3, #1
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d002      	beq.n	8005ada <USB_ActivateEndpoint+0x2de>
 8005ad4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005ad6:	3301      	adds	r3, #1
 8005ad8:	66bb      	str	r3, [r7, #104]	; 0x68
 8005ada:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005adc:	b29b      	uxth	r3, r3
 8005ade:	029b      	lsls	r3, r3, #10
 8005ae0:	b29a      	uxth	r2, r3
 8005ae2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ae4:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005ae6:	687a      	ldr	r2, [r7, #4]
 8005ae8:	683b      	ldr	r3, [r7, #0]
 8005aea:	781b      	ldrb	r3, [r3, #0]
 8005aec:	009b      	lsls	r3, r3, #2
 8005aee:	4413      	add	r3, r2
 8005af0:	881b      	ldrh	r3, [r3, #0]
 8005af2:	847b      	strh	r3, [r7, #34]	; 0x22
 8005af4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005af6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d01b      	beq.n	8005b36 <USB_ActivateEndpoint+0x33a>
 8005afe:	687a      	ldr	r2, [r7, #4]
 8005b00:	683b      	ldr	r3, [r7, #0]
 8005b02:	781b      	ldrb	r3, [r3, #0]
 8005b04:	009b      	lsls	r3, r3, #2
 8005b06:	4413      	add	r3, r2
 8005b08:	881b      	ldrh	r3, [r3, #0]
 8005b0a:	b29b      	uxth	r3, r3
 8005b0c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005b10:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b14:	843b      	strh	r3, [r7, #32]
 8005b16:	687a      	ldr	r2, [r7, #4]
 8005b18:	683b      	ldr	r3, [r7, #0]
 8005b1a:	781b      	ldrb	r3, [r3, #0]
 8005b1c:	009b      	lsls	r3, r3, #2
 8005b1e:	441a      	add	r2, r3
 8005b20:	8c3b      	ldrh	r3, [r7, #32]
 8005b22:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005b26:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005b2a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005b2e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005b32:	b29b      	uxth	r3, r3
 8005b34:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005b36:	687a      	ldr	r2, [r7, #4]
 8005b38:	683b      	ldr	r3, [r7, #0]
 8005b3a:	781b      	ldrb	r3, [r3, #0]
 8005b3c:	009b      	lsls	r3, r3, #2
 8005b3e:	4413      	add	r3, r2
 8005b40:	881b      	ldrh	r3, [r3, #0]
 8005b42:	b29b      	uxth	r3, r3
 8005b44:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005b48:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b4c:	83fb      	strh	r3, [r7, #30]
 8005b4e:	8bfb      	ldrh	r3, [r7, #30]
 8005b50:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005b54:	83fb      	strh	r3, [r7, #30]
 8005b56:	8bfb      	ldrh	r3, [r7, #30]
 8005b58:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005b5c:	83fb      	strh	r3, [r7, #30]
 8005b5e:	687a      	ldr	r2, [r7, #4]
 8005b60:	683b      	ldr	r3, [r7, #0]
 8005b62:	781b      	ldrb	r3, [r3, #0]
 8005b64:	009b      	lsls	r3, r3, #2
 8005b66:	441a      	add	r2, r3
 8005b68:	8bfb      	ldrh	r3, [r7, #30]
 8005b6a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005b6e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005b72:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005b76:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005b7a:	b29b      	uxth	r3, r3
 8005b7c:	8013      	strh	r3, [r2, #0]
 8005b7e:	e1c9      	b.n	8005f14 <USB_ActivateEndpoint+0x718>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8005b80:	683b      	ldr	r3, [r7, #0]
 8005b82:	78db      	ldrb	r3, [r3, #3]
 8005b84:	2b02      	cmp	r3, #2
 8005b86:	d11e      	bne.n	8005bc6 <USB_ActivateEndpoint+0x3ca>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8005b88:	687a      	ldr	r2, [r7, #4]
 8005b8a:	683b      	ldr	r3, [r7, #0]
 8005b8c:	781b      	ldrb	r3, [r3, #0]
 8005b8e:	009b      	lsls	r3, r3, #2
 8005b90:	4413      	add	r3, r2
 8005b92:	881b      	ldrh	r3, [r3, #0]
 8005b94:	b29b      	uxth	r3, r3
 8005b96:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005b9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b9e:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8005ba2:	687a      	ldr	r2, [r7, #4]
 8005ba4:	683b      	ldr	r3, [r7, #0]
 8005ba6:	781b      	ldrb	r3, [r3, #0]
 8005ba8:	009b      	lsls	r3, r3, #2
 8005baa:	441a      	add	r2, r3
 8005bac:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8005bb0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005bb4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005bb8:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8005bbc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005bc0:	b29b      	uxth	r3, r3
 8005bc2:	8013      	strh	r3, [r2, #0]
 8005bc4:	e01d      	b.n	8005c02 <USB_ActivateEndpoint+0x406>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8005bc6:	687a      	ldr	r2, [r7, #4]
 8005bc8:	683b      	ldr	r3, [r7, #0]
 8005bca:	781b      	ldrb	r3, [r3, #0]
 8005bcc:	009b      	lsls	r3, r3, #2
 8005bce:	4413      	add	r3, r2
 8005bd0:	881b      	ldrh	r3, [r3, #0]
 8005bd2:	b29b      	uxth	r3, r3
 8005bd4:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8005bd8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005bdc:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 8005be0:	687a      	ldr	r2, [r7, #4]
 8005be2:	683b      	ldr	r3, [r7, #0]
 8005be4:	781b      	ldrb	r3, [r3, #0]
 8005be6:	009b      	lsls	r3, r3, #2
 8005be8:	441a      	add	r2, r3
 8005bea:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8005bee:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005bf2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005bf6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005bfa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005bfe:	b29b      	uxth	r3, r3
 8005c00:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005c0c:	b29b      	uxth	r3, r3
 8005c0e:	461a      	mov	r2, r3
 8005c10:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005c12:	4413      	add	r3, r2
 8005c14:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005c16:	683b      	ldr	r3, [r7, #0]
 8005c18:	781b      	ldrb	r3, [r3, #0]
 8005c1a:	00da      	lsls	r2, r3, #3
 8005c1c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005c1e:	4413      	add	r3, r2
 8005c20:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005c24:	65bb      	str	r3, [r7, #88]	; 0x58
 8005c26:	683b      	ldr	r3, [r7, #0]
 8005c28:	891b      	ldrh	r3, [r3, #8]
 8005c2a:	085b      	lsrs	r3, r3, #1
 8005c2c:	b29b      	uxth	r3, r3
 8005c2e:	005b      	lsls	r3, r3, #1
 8005c30:	b29a      	uxth	r2, r3
 8005c32:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005c34:	801a      	strh	r2, [r3, #0]
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	657b      	str	r3, [r7, #84]	; 0x54
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005c40:	b29b      	uxth	r3, r3
 8005c42:	461a      	mov	r2, r3
 8005c44:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005c46:	4413      	add	r3, r2
 8005c48:	657b      	str	r3, [r7, #84]	; 0x54
 8005c4a:	683b      	ldr	r3, [r7, #0]
 8005c4c:	781b      	ldrb	r3, [r3, #0]
 8005c4e:	00da      	lsls	r2, r3, #3
 8005c50:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005c52:	4413      	add	r3, r2
 8005c54:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005c58:	653b      	str	r3, [r7, #80]	; 0x50
 8005c5a:	683b      	ldr	r3, [r7, #0]
 8005c5c:	895b      	ldrh	r3, [r3, #10]
 8005c5e:	085b      	lsrs	r3, r3, #1
 8005c60:	b29b      	uxth	r3, r3
 8005c62:	005b      	lsls	r3, r3, #1
 8005c64:	b29a      	uxth	r2, r3
 8005c66:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005c68:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8005c6a:	683b      	ldr	r3, [r7, #0]
 8005c6c:	785b      	ldrb	r3, [r3, #1]
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	f040 8093 	bne.w	8005d9a <USB_ActivateEndpoint+0x59e>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005c74:	687a      	ldr	r2, [r7, #4]
 8005c76:	683b      	ldr	r3, [r7, #0]
 8005c78:	781b      	ldrb	r3, [r3, #0]
 8005c7a:	009b      	lsls	r3, r3, #2
 8005c7c:	4413      	add	r3, r2
 8005c7e:	881b      	ldrh	r3, [r3, #0]
 8005c80:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8005c84:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8005c88:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d01b      	beq.n	8005cc8 <USB_ActivateEndpoint+0x4cc>
 8005c90:	687a      	ldr	r2, [r7, #4]
 8005c92:	683b      	ldr	r3, [r7, #0]
 8005c94:	781b      	ldrb	r3, [r3, #0]
 8005c96:	009b      	lsls	r3, r3, #2
 8005c98:	4413      	add	r3, r2
 8005c9a:	881b      	ldrh	r3, [r3, #0]
 8005c9c:	b29b      	uxth	r3, r3
 8005c9e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005ca2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ca6:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8005ca8:	687a      	ldr	r2, [r7, #4]
 8005caa:	683b      	ldr	r3, [r7, #0]
 8005cac:	781b      	ldrb	r3, [r3, #0]
 8005cae:	009b      	lsls	r3, r3, #2
 8005cb0:	441a      	add	r2, r3
 8005cb2:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8005cb4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005cb8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005cbc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005cc0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005cc4:	b29b      	uxth	r3, r3
 8005cc6:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005cc8:	687a      	ldr	r2, [r7, #4]
 8005cca:	683b      	ldr	r3, [r7, #0]
 8005ccc:	781b      	ldrb	r3, [r3, #0]
 8005cce:	009b      	lsls	r3, r3, #2
 8005cd0:	4413      	add	r3, r2
 8005cd2:	881b      	ldrh	r3, [r3, #0]
 8005cd4:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8005cd6:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8005cd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d01b      	beq.n	8005d18 <USB_ActivateEndpoint+0x51c>
 8005ce0:	687a      	ldr	r2, [r7, #4]
 8005ce2:	683b      	ldr	r3, [r7, #0]
 8005ce4:	781b      	ldrb	r3, [r3, #0]
 8005ce6:	009b      	lsls	r3, r3, #2
 8005ce8:	4413      	add	r3, r2
 8005cea:	881b      	ldrh	r3, [r3, #0]
 8005cec:	b29b      	uxth	r3, r3
 8005cee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005cf2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005cf6:	877b      	strh	r3, [r7, #58]	; 0x3a
 8005cf8:	687a      	ldr	r2, [r7, #4]
 8005cfa:	683b      	ldr	r3, [r7, #0]
 8005cfc:	781b      	ldrb	r3, [r3, #0]
 8005cfe:	009b      	lsls	r3, r3, #2
 8005d00:	441a      	add	r2, r3
 8005d02:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8005d04:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005d08:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005d0c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005d10:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005d14:	b29b      	uxth	r3, r3
 8005d16:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005d18:	687a      	ldr	r2, [r7, #4]
 8005d1a:	683b      	ldr	r3, [r7, #0]
 8005d1c:	781b      	ldrb	r3, [r3, #0]
 8005d1e:	009b      	lsls	r3, r3, #2
 8005d20:	4413      	add	r3, r2
 8005d22:	881b      	ldrh	r3, [r3, #0]
 8005d24:	b29b      	uxth	r3, r3
 8005d26:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005d2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d2e:	873b      	strh	r3, [r7, #56]	; 0x38
 8005d30:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005d32:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005d36:	873b      	strh	r3, [r7, #56]	; 0x38
 8005d38:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005d3a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005d3e:	873b      	strh	r3, [r7, #56]	; 0x38
 8005d40:	687a      	ldr	r2, [r7, #4]
 8005d42:	683b      	ldr	r3, [r7, #0]
 8005d44:	781b      	ldrb	r3, [r3, #0]
 8005d46:	009b      	lsls	r3, r3, #2
 8005d48:	441a      	add	r2, r3
 8005d4a:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005d4c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005d50:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005d54:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005d58:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005d5c:	b29b      	uxth	r3, r3
 8005d5e:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005d60:	687a      	ldr	r2, [r7, #4]
 8005d62:	683b      	ldr	r3, [r7, #0]
 8005d64:	781b      	ldrb	r3, [r3, #0]
 8005d66:	009b      	lsls	r3, r3, #2
 8005d68:	4413      	add	r3, r2
 8005d6a:	881b      	ldrh	r3, [r3, #0]
 8005d6c:	b29b      	uxth	r3, r3
 8005d6e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005d72:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005d76:	86fb      	strh	r3, [r7, #54]	; 0x36
 8005d78:	687a      	ldr	r2, [r7, #4]
 8005d7a:	683b      	ldr	r3, [r7, #0]
 8005d7c:	781b      	ldrb	r3, [r3, #0]
 8005d7e:	009b      	lsls	r3, r3, #2
 8005d80:	441a      	add	r2, r3
 8005d82:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005d84:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005d88:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005d8c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005d90:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005d94:	b29b      	uxth	r3, r3
 8005d96:	8013      	strh	r3, [r2, #0]
 8005d98:	e0bc      	b.n	8005f14 <USB_ActivateEndpoint+0x718>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005d9a:	687a      	ldr	r2, [r7, #4]
 8005d9c:	683b      	ldr	r3, [r7, #0]
 8005d9e:	781b      	ldrb	r3, [r3, #0]
 8005da0:	009b      	lsls	r3, r3, #2
 8005da2:	4413      	add	r3, r2
 8005da4:	881b      	ldrh	r3, [r3, #0]
 8005da6:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8005daa:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005dae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d01d      	beq.n	8005df2 <USB_ActivateEndpoint+0x5f6>
 8005db6:	687a      	ldr	r2, [r7, #4]
 8005db8:	683b      	ldr	r3, [r7, #0]
 8005dba:	781b      	ldrb	r3, [r3, #0]
 8005dbc:	009b      	lsls	r3, r3, #2
 8005dbe:	4413      	add	r3, r2
 8005dc0:	881b      	ldrh	r3, [r3, #0]
 8005dc2:	b29b      	uxth	r3, r3
 8005dc4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005dc8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005dcc:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8005dd0:	687a      	ldr	r2, [r7, #4]
 8005dd2:	683b      	ldr	r3, [r7, #0]
 8005dd4:	781b      	ldrb	r3, [r3, #0]
 8005dd6:	009b      	lsls	r3, r3, #2
 8005dd8:	441a      	add	r2, r3
 8005dda:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8005dde:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005de2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005de6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005dea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005dee:	b29b      	uxth	r3, r3
 8005df0:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005df2:	687a      	ldr	r2, [r7, #4]
 8005df4:	683b      	ldr	r3, [r7, #0]
 8005df6:	781b      	ldrb	r3, [r3, #0]
 8005df8:	009b      	lsls	r3, r3, #2
 8005dfa:	4413      	add	r3, r2
 8005dfc:	881b      	ldrh	r3, [r3, #0]
 8005dfe:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8005e02:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8005e06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d01d      	beq.n	8005e4a <USB_ActivateEndpoint+0x64e>
 8005e0e:	687a      	ldr	r2, [r7, #4]
 8005e10:	683b      	ldr	r3, [r7, #0]
 8005e12:	781b      	ldrb	r3, [r3, #0]
 8005e14:	009b      	lsls	r3, r3, #2
 8005e16:	4413      	add	r3, r2
 8005e18:	881b      	ldrh	r3, [r3, #0]
 8005e1a:	b29b      	uxth	r3, r3
 8005e1c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005e20:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e24:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8005e28:	687a      	ldr	r2, [r7, #4]
 8005e2a:	683b      	ldr	r3, [r7, #0]
 8005e2c:	781b      	ldrb	r3, [r3, #0]
 8005e2e:	009b      	lsls	r3, r3, #2
 8005e30:	441a      	add	r2, r3
 8005e32:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8005e36:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005e3a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005e3e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005e42:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005e46:	b29b      	uxth	r3, r3
 8005e48:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005e4a:	683b      	ldr	r3, [r7, #0]
 8005e4c:	78db      	ldrb	r3, [r3, #3]
 8005e4e:	2b01      	cmp	r3, #1
 8005e50:	d024      	beq.n	8005e9c <USB_ActivateEndpoint+0x6a0>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005e52:	687a      	ldr	r2, [r7, #4]
 8005e54:	683b      	ldr	r3, [r7, #0]
 8005e56:	781b      	ldrb	r3, [r3, #0]
 8005e58:	009b      	lsls	r3, r3, #2
 8005e5a:	4413      	add	r3, r2
 8005e5c:	881b      	ldrh	r3, [r3, #0]
 8005e5e:	b29b      	uxth	r3, r3
 8005e60:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005e64:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005e68:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8005e6c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8005e70:	f083 0320 	eor.w	r3, r3, #32
 8005e74:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8005e78:	687a      	ldr	r2, [r7, #4]
 8005e7a:	683b      	ldr	r3, [r7, #0]
 8005e7c:	781b      	ldrb	r3, [r3, #0]
 8005e7e:	009b      	lsls	r3, r3, #2
 8005e80:	441a      	add	r2, r3
 8005e82:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8005e86:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005e8a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005e8e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005e92:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005e96:	b29b      	uxth	r3, r3
 8005e98:	8013      	strh	r3, [r2, #0]
 8005e9a:	e01d      	b.n	8005ed8 <USB_ActivateEndpoint+0x6dc>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005e9c:	687a      	ldr	r2, [r7, #4]
 8005e9e:	683b      	ldr	r3, [r7, #0]
 8005ea0:	781b      	ldrb	r3, [r3, #0]
 8005ea2:	009b      	lsls	r3, r3, #2
 8005ea4:	4413      	add	r3, r2
 8005ea6:	881b      	ldrh	r3, [r3, #0]
 8005ea8:	b29b      	uxth	r3, r3
 8005eaa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005eae:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005eb2:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8005eb6:	687a      	ldr	r2, [r7, #4]
 8005eb8:	683b      	ldr	r3, [r7, #0]
 8005eba:	781b      	ldrb	r3, [r3, #0]
 8005ebc:	009b      	lsls	r3, r3, #2
 8005ebe:	441a      	add	r2, r3
 8005ec0:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8005ec4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005ec8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005ecc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005ed0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005ed4:	b29b      	uxth	r3, r3
 8005ed6:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005ed8:	687a      	ldr	r2, [r7, #4]
 8005eda:	683b      	ldr	r3, [r7, #0]
 8005edc:	781b      	ldrb	r3, [r3, #0]
 8005ede:	009b      	lsls	r3, r3, #2
 8005ee0:	4413      	add	r3, r2
 8005ee2:	881b      	ldrh	r3, [r3, #0]
 8005ee4:	b29b      	uxth	r3, r3
 8005ee6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005eea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005eee:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8005ef2:	687a      	ldr	r2, [r7, #4]
 8005ef4:	683b      	ldr	r3, [r7, #0]
 8005ef6:	781b      	ldrb	r3, [r3, #0]
 8005ef8:	009b      	lsls	r3, r3, #2
 8005efa:	441a      	add	r2, r3
 8005efc:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8005f00:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005f04:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005f08:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005f0c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005f10:	b29b      	uxth	r3, r3
 8005f12:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8005f14:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 8005f18:	4618      	mov	r0, r3
 8005f1a:	3774      	adds	r7, #116	; 0x74
 8005f1c:	46bd      	mov	sp, r7
 8005f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f22:	4770      	bx	lr

08005f24 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005f24:	b480      	push	{r7}
 8005f26:	b08d      	sub	sp, #52	; 0x34
 8005f28:	af00      	add	r7, sp, #0
 8005f2a:	6078      	str	r0, [r7, #4]
 8005f2c:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8005f2e:	683b      	ldr	r3, [r7, #0]
 8005f30:	7b1b      	ldrb	r3, [r3, #12]
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	f040 808e 	bne.w	8006054 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8005f38:	683b      	ldr	r3, [r7, #0]
 8005f3a:	785b      	ldrb	r3, [r3, #1]
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d044      	beq.n	8005fca <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005f40:	687a      	ldr	r2, [r7, #4]
 8005f42:	683b      	ldr	r3, [r7, #0]
 8005f44:	781b      	ldrb	r3, [r3, #0]
 8005f46:	009b      	lsls	r3, r3, #2
 8005f48:	4413      	add	r3, r2
 8005f4a:	881b      	ldrh	r3, [r3, #0]
 8005f4c:	81bb      	strh	r3, [r7, #12]
 8005f4e:	89bb      	ldrh	r3, [r7, #12]
 8005f50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d01b      	beq.n	8005f90 <USB_DeactivateEndpoint+0x6c>
 8005f58:	687a      	ldr	r2, [r7, #4]
 8005f5a:	683b      	ldr	r3, [r7, #0]
 8005f5c:	781b      	ldrb	r3, [r3, #0]
 8005f5e:	009b      	lsls	r3, r3, #2
 8005f60:	4413      	add	r3, r2
 8005f62:	881b      	ldrh	r3, [r3, #0]
 8005f64:	b29b      	uxth	r3, r3
 8005f66:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005f6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f6e:	817b      	strh	r3, [r7, #10]
 8005f70:	687a      	ldr	r2, [r7, #4]
 8005f72:	683b      	ldr	r3, [r7, #0]
 8005f74:	781b      	ldrb	r3, [r3, #0]
 8005f76:	009b      	lsls	r3, r3, #2
 8005f78:	441a      	add	r2, r3
 8005f7a:	897b      	ldrh	r3, [r7, #10]
 8005f7c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005f80:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005f84:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005f88:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005f8c:	b29b      	uxth	r3, r3
 8005f8e:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005f90:	687a      	ldr	r2, [r7, #4]
 8005f92:	683b      	ldr	r3, [r7, #0]
 8005f94:	781b      	ldrb	r3, [r3, #0]
 8005f96:	009b      	lsls	r3, r3, #2
 8005f98:	4413      	add	r3, r2
 8005f9a:	881b      	ldrh	r3, [r3, #0]
 8005f9c:	b29b      	uxth	r3, r3
 8005f9e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005fa2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005fa6:	813b      	strh	r3, [r7, #8]
 8005fa8:	687a      	ldr	r2, [r7, #4]
 8005faa:	683b      	ldr	r3, [r7, #0]
 8005fac:	781b      	ldrb	r3, [r3, #0]
 8005fae:	009b      	lsls	r3, r3, #2
 8005fb0:	441a      	add	r2, r3
 8005fb2:	893b      	ldrh	r3, [r7, #8]
 8005fb4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005fb8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005fbc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005fc0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005fc4:	b29b      	uxth	r3, r3
 8005fc6:	8013      	strh	r3, [r2, #0]
 8005fc8:	e192      	b.n	80062f0 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005fca:	687a      	ldr	r2, [r7, #4]
 8005fcc:	683b      	ldr	r3, [r7, #0]
 8005fce:	781b      	ldrb	r3, [r3, #0]
 8005fd0:	009b      	lsls	r3, r3, #2
 8005fd2:	4413      	add	r3, r2
 8005fd4:	881b      	ldrh	r3, [r3, #0]
 8005fd6:	827b      	strh	r3, [r7, #18]
 8005fd8:	8a7b      	ldrh	r3, [r7, #18]
 8005fda:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d01b      	beq.n	800601a <USB_DeactivateEndpoint+0xf6>
 8005fe2:	687a      	ldr	r2, [r7, #4]
 8005fe4:	683b      	ldr	r3, [r7, #0]
 8005fe6:	781b      	ldrb	r3, [r3, #0]
 8005fe8:	009b      	lsls	r3, r3, #2
 8005fea:	4413      	add	r3, r2
 8005fec:	881b      	ldrh	r3, [r3, #0]
 8005fee:	b29b      	uxth	r3, r3
 8005ff0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005ff4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ff8:	823b      	strh	r3, [r7, #16]
 8005ffa:	687a      	ldr	r2, [r7, #4]
 8005ffc:	683b      	ldr	r3, [r7, #0]
 8005ffe:	781b      	ldrb	r3, [r3, #0]
 8006000:	009b      	lsls	r3, r3, #2
 8006002:	441a      	add	r2, r3
 8006004:	8a3b      	ldrh	r3, [r7, #16]
 8006006:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800600a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800600e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006012:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006016:	b29b      	uxth	r3, r3
 8006018:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800601a:	687a      	ldr	r2, [r7, #4]
 800601c:	683b      	ldr	r3, [r7, #0]
 800601e:	781b      	ldrb	r3, [r3, #0]
 8006020:	009b      	lsls	r3, r3, #2
 8006022:	4413      	add	r3, r2
 8006024:	881b      	ldrh	r3, [r3, #0]
 8006026:	b29b      	uxth	r3, r3
 8006028:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800602c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006030:	81fb      	strh	r3, [r7, #14]
 8006032:	687a      	ldr	r2, [r7, #4]
 8006034:	683b      	ldr	r3, [r7, #0]
 8006036:	781b      	ldrb	r3, [r3, #0]
 8006038:	009b      	lsls	r3, r3, #2
 800603a:	441a      	add	r2, r3
 800603c:	89fb      	ldrh	r3, [r7, #14]
 800603e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006042:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006046:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800604a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800604e:	b29b      	uxth	r3, r3
 8006050:	8013      	strh	r3, [r2, #0]
 8006052:	e14d      	b.n	80062f0 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8006054:	683b      	ldr	r3, [r7, #0]
 8006056:	785b      	ldrb	r3, [r3, #1]
 8006058:	2b00      	cmp	r3, #0
 800605a:	f040 80a5 	bne.w	80061a8 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800605e:	687a      	ldr	r2, [r7, #4]
 8006060:	683b      	ldr	r3, [r7, #0]
 8006062:	781b      	ldrb	r3, [r3, #0]
 8006064:	009b      	lsls	r3, r3, #2
 8006066:	4413      	add	r3, r2
 8006068:	881b      	ldrh	r3, [r3, #0]
 800606a:	843b      	strh	r3, [r7, #32]
 800606c:	8c3b      	ldrh	r3, [r7, #32]
 800606e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006072:	2b00      	cmp	r3, #0
 8006074:	d01b      	beq.n	80060ae <USB_DeactivateEndpoint+0x18a>
 8006076:	687a      	ldr	r2, [r7, #4]
 8006078:	683b      	ldr	r3, [r7, #0]
 800607a:	781b      	ldrb	r3, [r3, #0]
 800607c:	009b      	lsls	r3, r3, #2
 800607e:	4413      	add	r3, r2
 8006080:	881b      	ldrh	r3, [r3, #0]
 8006082:	b29b      	uxth	r3, r3
 8006084:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006088:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800608c:	83fb      	strh	r3, [r7, #30]
 800608e:	687a      	ldr	r2, [r7, #4]
 8006090:	683b      	ldr	r3, [r7, #0]
 8006092:	781b      	ldrb	r3, [r3, #0]
 8006094:	009b      	lsls	r3, r3, #2
 8006096:	441a      	add	r2, r3
 8006098:	8bfb      	ldrh	r3, [r7, #30]
 800609a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800609e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80060a2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80060a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80060aa:	b29b      	uxth	r3, r3
 80060ac:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80060ae:	687a      	ldr	r2, [r7, #4]
 80060b0:	683b      	ldr	r3, [r7, #0]
 80060b2:	781b      	ldrb	r3, [r3, #0]
 80060b4:	009b      	lsls	r3, r3, #2
 80060b6:	4413      	add	r3, r2
 80060b8:	881b      	ldrh	r3, [r3, #0]
 80060ba:	83bb      	strh	r3, [r7, #28]
 80060bc:	8bbb      	ldrh	r3, [r7, #28]
 80060be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d01b      	beq.n	80060fe <USB_DeactivateEndpoint+0x1da>
 80060c6:	687a      	ldr	r2, [r7, #4]
 80060c8:	683b      	ldr	r3, [r7, #0]
 80060ca:	781b      	ldrb	r3, [r3, #0]
 80060cc:	009b      	lsls	r3, r3, #2
 80060ce:	4413      	add	r3, r2
 80060d0:	881b      	ldrh	r3, [r3, #0]
 80060d2:	b29b      	uxth	r3, r3
 80060d4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80060d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80060dc:	837b      	strh	r3, [r7, #26]
 80060de:	687a      	ldr	r2, [r7, #4]
 80060e0:	683b      	ldr	r3, [r7, #0]
 80060e2:	781b      	ldrb	r3, [r3, #0]
 80060e4:	009b      	lsls	r3, r3, #2
 80060e6:	441a      	add	r2, r3
 80060e8:	8b7b      	ldrh	r3, [r7, #26]
 80060ea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80060ee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80060f2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80060f6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80060fa:	b29b      	uxth	r3, r3
 80060fc:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 80060fe:	687a      	ldr	r2, [r7, #4]
 8006100:	683b      	ldr	r3, [r7, #0]
 8006102:	781b      	ldrb	r3, [r3, #0]
 8006104:	009b      	lsls	r3, r3, #2
 8006106:	4413      	add	r3, r2
 8006108:	881b      	ldrh	r3, [r3, #0]
 800610a:	b29b      	uxth	r3, r3
 800610c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006110:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006114:	833b      	strh	r3, [r7, #24]
 8006116:	687a      	ldr	r2, [r7, #4]
 8006118:	683b      	ldr	r3, [r7, #0]
 800611a:	781b      	ldrb	r3, [r3, #0]
 800611c:	009b      	lsls	r3, r3, #2
 800611e:	441a      	add	r2, r3
 8006120:	8b3b      	ldrh	r3, [r7, #24]
 8006122:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006126:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800612a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800612e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006132:	b29b      	uxth	r3, r3
 8006134:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006136:	687a      	ldr	r2, [r7, #4]
 8006138:	683b      	ldr	r3, [r7, #0]
 800613a:	781b      	ldrb	r3, [r3, #0]
 800613c:	009b      	lsls	r3, r3, #2
 800613e:	4413      	add	r3, r2
 8006140:	881b      	ldrh	r3, [r3, #0]
 8006142:	b29b      	uxth	r3, r3
 8006144:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006148:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800614c:	82fb      	strh	r3, [r7, #22]
 800614e:	687a      	ldr	r2, [r7, #4]
 8006150:	683b      	ldr	r3, [r7, #0]
 8006152:	781b      	ldrb	r3, [r3, #0]
 8006154:	009b      	lsls	r3, r3, #2
 8006156:	441a      	add	r2, r3
 8006158:	8afb      	ldrh	r3, [r7, #22]
 800615a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800615e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006162:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006166:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800616a:	b29b      	uxth	r3, r3
 800616c:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800616e:	687a      	ldr	r2, [r7, #4]
 8006170:	683b      	ldr	r3, [r7, #0]
 8006172:	781b      	ldrb	r3, [r3, #0]
 8006174:	009b      	lsls	r3, r3, #2
 8006176:	4413      	add	r3, r2
 8006178:	881b      	ldrh	r3, [r3, #0]
 800617a:	b29b      	uxth	r3, r3
 800617c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006180:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006184:	82bb      	strh	r3, [r7, #20]
 8006186:	687a      	ldr	r2, [r7, #4]
 8006188:	683b      	ldr	r3, [r7, #0]
 800618a:	781b      	ldrb	r3, [r3, #0]
 800618c:	009b      	lsls	r3, r3, #2
 800618e:	441a      	add	r2, r3
 8006190:	8abb      	ldrh	r3, [r7, #20]
 8006192:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006196:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800619a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800619e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80061a2:	b29b      	uxth	r3, r3
 80061a4:	8013      	strh	r3, [r2, #0]
 80061a6:	e0a3      	b.n	80062f0 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80061a8:	687a      	ldr	r2, [r7, #4]
 80061aa:	683b      	ldr	r3, [r7, #0]
 80061ac:	781b      	ldrb	r3, [r3, #0]
 80061ae:	009b      	lsls	r3, r3, #2
 80061b0:	4413      	add	r3, r2
 80061b2:	881b      	ldrh	r3, [r3, #0]
 80061b4:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80061b6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80061b8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d01b      	beq.n	80061f8 <USB_DeactivateEndpoint+0x2d4>
 80061c0:	687a      	ldr	r2, [r7, #4]
 80061c2:	683b      	ldr	r3, [r7, #0]
 80061c4:	781b      	ldrb	r3, [r3, #0]
 80061c6:	009b      	lsls	r3, r3, #2
 80061c8:	4413      	add	r3, r2
 80061ca:	881b      	ldrh	r3, [r3, #0]
 80061cc:	b29b      	uxth	r3, r3
 80061ce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80061d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80061d6:	85bb      	strh	r3, [r7, #44]	; 0x2c
 80061d8:	687a      	ldr	r2, [r7, #4]
 80061da:	683b      	ldr	r3, [r7, #0]
 80061dc:	781b      	ldrb	r3, [r3, #0]
 80061de:	009b      	lsls	r3, r3, #2
 80061e0:	441a      	add	r2, r3
 80061e2:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80061e4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80061e8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80061ec:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80061f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80061f4:	b29b      	uxth	r3, r3
 80061f6:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80061f8:	687a      	ldr	r2, [r7, #4]
 80061fa:	683b      	ldr	r3, [r7, #0]
 80061fc:	781b      	ldrb	r3, [r3, #0]
 80061fe:	009b      	lsls	r3, r3, #2
 8006200:	4413      	add	r3, r2
 8006202:	881b      	ldrh	r3, [r3, #0]
 8006204:	857b      	strh	r3, [r7, #42]	; 0x2a
 8006206:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8006208:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800620c:	2b00      	cmp	r3, #0
 800620e:	d01b      	beq.n	8006248 <USB_DeactivateEndpoint+0x324>
 8006210:	687a      	ldr	r2, [r7, #4]
 8006212:	683b      	ldr	r3, [r7, #0]
 8006214:	781b      	ldrb	r3, [r3, #0]
 8006216:	009b      	lsls	r3, r3, #2
 8006218:	4413      	add	r3, r2
 800621a:	881b      	ldrh	r3, [r3, #0]
 800621c:	b29b      	uxth	r3, r3
 800621e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006222:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006226:	853b      	strh	r3, [r7, #40]	; 0x28
 8006228:	687a      	ldr	r2, [r7, #4]
 800622a:	683b      	ldr	r3, [r7, #0]
 800622c:	781b      	ldrb	r3, [r3, #0]
 800622e:	009b      	lsls	r3, r3, #2
 8006230:	441a      	add	r2, r3
 8006232:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8006234:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006238:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800623c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006240:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006244:	b29b      	uxth	r3, r3
 8006246:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8006248:	687a      	ldr	r2, [r7, #4]
 800624a:	683b      	ldr	r3, [r7, #0]
 800624c:	781b      	ldrb	r3, [r3, #0]
 800624e:	009b      	lsls	r3, r3, #2
 8006250:	4413      	add	r3, r2
 8006252:	881b      	ldrh	r3, [r3, #0]
 8006254:	b29b      	uxth	r3, r3
 8006256:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800625a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800625e:	84fb      	strh	r3, [r7, #38]	; 0x26
 8006260:	687a      	ldr	r2, [r7, #4]
 8006262:	683b      	ldr	r3, [r7, #0]
 8006264:	781b      	ldrb	r3, [r3, #0]
 8006266:	009b      	lsls	r3, r3, #2
 8006268:	441a      	add	r2, r3
 800626a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800626c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006270:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006274:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006278:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800627c:	b29b      	uxth	r3, r3
 800627e:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006280:	687a      	ldr	r2, [r7, #4]
 8006282:	683b      	ldr	r3, [r7, #0]
 8006284:	781b      	ldrb	r3, [r3, #0]
 8006286:	009b      	lsls	r3, r3, #2
 8006288:	4413      	add	r3, r2
 800628a:	881b      	ldrh	r3, [r3, #0]
 800628c:	b29b      	uxth	r3, r3
 800628e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006292:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006296:	84bb      	strh	r3, [r7, #36]	; 0x24
 8006298:	687a      	ldr	r2, [r7, #4]
 800629a:	683b      	ldr	r3, [r7, #0]
 800629c:	781b      	ldrb	r3, [r3, #0]
 800629e:	009b      	lsls	r3, r3, #2
 80062a0:	441a      	add	r2, r3
 80062a2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80062a4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80062a8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80062ac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80062b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80062b4:	b29b      	uxth	r3, r3
 80062b6:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80062b8:	687a      	ldr	r2, [r7, #4]
 80062ba:	683b      	ldr	r3, [r7, #0]
 80062bc:	781b      	ldrb	r3, [r3, #0]
 80062be:	009b      	lsls	r3, r3, #2
 80062c0:	4413      	add	r3, r2
 80062c2:	881b      	ldrh	r3, [r3, #0]
 80062c4:	b29b      	uxth	r3, r3
 80062c6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80062ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80062ce:	847b      	strh	r3, [r7, #34]	; 0x22
 80062d0:	687a      	ldr	r2, [r7, #4]
 80062d2:	683b      	ldr	r3, [r7, #0]
 80062d4:	781b      	ldrb	r3, [r3, #0]
 80062d6:	009b      	lsls	r3, r3, #2
 80062d8:	441a      	add	r2, r3
 80062da:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80062dc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80062e0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80062e4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80062e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80062ec:	b29b      	uxth	r3, r3
 80062ee:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 80062f0:	2300      	movs	r3, #0
}
 80062f2:	4618      	mov	r0, r3
 80062f4:	3734      	adds	r7, #52	; 0x34
 80062f6:	46bd      	mov	sp, r7
 80062f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062fc:	4770      	bx	lr

080062fe <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80062fe:	b580      	push	{r7, lr}
 8006300:	b0c2      	sub	sp, #264	; 0x108
 8006302:	af00      	add	r7, sp, #0
 8006304:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006308:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800630c:	6018      	str	r0, [r3, #0]
 800630e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006312:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006316:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006318:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800631c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	785b      	ldrb	r3, [r3, #1]
 8006324:	2b01      	cmp	r3, #1
 8006326:	f040 867b 	bne.w	8007020 <USB_EPStartXfer+0xd22>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800632a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800632e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	699a      	ldr	r2, [r3, #24]
 8006336:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800633a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	691b      	ldr	r3, [r3, #16]
 8006342:	429a      	cmp	r2, r3
 8006344:	d908      	bls.n	8006358 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8006346:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800634a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	691b      	ldr	r3, [r3, #16]
 8006352:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8006356:	e007      	b.n	8006368 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8006358:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800635c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	699b      	ldr	r3, [r3, #24]
 8006364:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8006368:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800636c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	7b1b      	ldrb	r3, [r3, #12]
 8006374:	2b00      	cmp	r3, #0
 8006376:	d13a      	bne.n	80063ee <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8006378:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800637c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	6959      	ldr	r1, [r3, #20]
 8006384:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006388:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	88da      	ldrh	r2, [r3, #6]
 8006390:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006394:	b29b      	uxth	r3, r3
 8006396:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800639a:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800639e:	6800      	ldr	r0, [r0, #0]
 80063a0:	f001 fc1d 	bl	8007bde <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80063a4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80063a8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	613b      	str	r3, [r7, #16]
 80063b0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80063b4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80063be:	b29b      	uxth	r3, r3
 80063c0:	461a      	mov	r2, r3
 80063c2:	693b      	ldr	r3, [r7, #16]
 80063c4:	4413      	add	r3, r2
 80063c6:	613b      	str	r3, [r7, #16]
 80063c8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80063cc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	781b      	ldrb	r3, [r3, #0]
 80063d4:	00da      	lsls	r2, r3, #3
 80063d6:	693b      	ldr	r3, [r7, #16]
 80063d8:	4413      	add	r3, r2
 80063da:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80063de:	60fb      	str	r3, [r7, #12]
 80063e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80063e4:	b29a      	uxth	r2, r3
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	801a      	strh	r2, [r3, #0]
 80063ea:	f000 bde3 	b.w	8006fb4 <USB_EPStartXfer+0xcb6>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 80063ee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80063f2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	78db      	ldrb	r3, [r3, #3]
 80063fa:	2b02      	cmp	r3, #2
 80063fc:	f040 843a 	bne.w	8006c74 <USB_EPStartXfer+0x976>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8006400:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006404:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	6a1a      	ldr	r2, [r3, #32]
 800640c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006410:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	691b      	ldr	r3, [r3, #16]
 8006418:	429a      	cmp	r2, r3
 800641a:	f240 83b7 	bls.w	8006b8c <USB_EPStartXfer+0x88e>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800641e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006422:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006426:	681a      	ldr	r2, [r3, #0]
 8006428:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800642c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	781b      	ldrb	r3, [r3, #0]
 8006434:	009b      	lsls	r3, r3, #2
 8006436:	4413      	add	r3, r2
 8006438:	881b      	ldrh	r3, [r3, #0]
 800643a:	b29b      	uxth	r3, r3
 800643c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006440:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006444:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8006448:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800644c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006450:	681a      	ldr	r2, [r3, #0]
 8006452:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006456:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	781b      	ldrb	r3, [r3, #0]
 800645e:	009b      	lsls	r3, r3, #2
 8006460:	441a      	add	r2, r3
 8006462:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8006466:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800646a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800646e:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8006472:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006476:	b29b      	uxth	r3, r3
 8006478:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800647a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800647e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	6a1a      	ldr	r2, [r3, #32]
 8006486:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800648a:	1ad2      	subs	r2, r2, r3
 800648c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006490:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8006498:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800649c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80064a0:	681a      	ldr	r2, [r3, #0]
 80064a2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80064a6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	781b      	ldrb	r3, [r3, #0]
 80064ae:	009b      	lsls	r3, r3, #2
 80064b0:	4413      	add	r3, r2
 80064b2:	881b      	ldrh	r3, [r3, #0]
 80064b4:	b29b      	uxth	r3, r3
 80064b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	f000 81b3 	beq.w	8006826 <USB_EPStartXfer+0x528>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80064c0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80064c4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	633b      	str	r3, [r7, #48]	; 0x30
 80064cc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80064d0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	785b      	ldrb	r3, [r3, #1]
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d16d      	bne.n	80065b8 <USB_EPStartXfer+0x2ba>
 80064dc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80064e0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	62bb      	str	r3, [r7, #40]	; 0x28
 80064e8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80064ec:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80064f6:	b29b      	uxth	r3, r3
 80064f8:	461a      	mov	r2, r3
 80064fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064fc:	4413      	add	r3, r2
 80064fe:	62bb      	str	r3, [r7, #40]	; 0x28
 8006500:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006504:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	781b      	ldrb	r3, [r3, #0]
 800650c:	00da      	lsls	r2, r3, #3
 800650e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006510:	4413      	add	r3, r2
 8006512:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006516:	627b      	str	r3, [r7, #36]	; 0x24
 8006518:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800651c:	2b3e      	cmp	r3, #62	; 0x3e
 800651e:	d91c      	bls.n	800655a <USB_EPStartXfer+0x25c>
 8006520:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006524:	095b      	lsrs	r3, r3, #5
 8006526:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800652a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800652e:	f003 031f 	and.w	r3, r3, #31
 8006532:	2b00      	cmp	r3, #0
 8006534:	d104      	bne.n	8006540 <USB_EPStartXfer+0x242>
 8006536:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800653a:	3b01      	subs	r3, #1
 800653c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006540:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006544:	b29b      	uxth	r3, r3
 8006546:	029b      	lsls	r3, r3, #10
 8006548:	b29b      	uxth	r3, r3
 800654a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800654e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006552:	b29a      	uxth	r2, r3
 8006554:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006556:	801a      	strh	r2, [r3, #0]
 8006558:	e053      	b.n	8006602 <USB_EPStartXfer+0x304>
 800655a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800655e:	2b00      	cmp	r3, #0
 8006560:	d112      	bne.n	8006588 <USB_EPStartXfer+0x28a>
 8006562:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006564:	881b      	ldrh	r3, [r3, #0]
 8006566:	b29b      	uxth	r3, r3
 8006568:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800656c:	b29a      	uxth	r2, r3
 800656e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006570:	801a      	strh	r2, [r3, #0]
 8006572:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006574:	881b      	ldrh	r3, [r3, #0]
 8006576:	b29b      	uxth	r3, r3
 8006578:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800657c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006580:	b29a      	uxth	r2, r3
 8006582:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006584:	801a      	strh	r2, [r3, #0]
 8006586:	e03c      	b.n	8006602 <USB_EPStartXfer+0x304>
 8006588:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800658c:	085b      	lsrs	r3, r3, #1
 800658e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006592:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006596:	f003 0301 	and.w	r3, r3, #1
 800659a:	2b00      	cmp	r3, #0
 800659c:	d004      	beq.n	80065a8 <USB_EPStartXfer+0x2aa>
 800659e:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80065a2:	3301      	adds	r3, #1
 80065a4:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80065a8:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80065ac:	b29b      	uxth	r3, r3
 80065ae:	029b      	lsls	r3, r3, #10
 80065b0:	b29a      	uxth	r2, r3
 80065b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065b4:	801a      	strh	r2, [r3, #0]
 80065b6:	e024      	b.n	8006602 <USB_EPStartXfer+0x304>
 80065b8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80065bc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	785b      	ldrb	r3, [r3, #1]
 80065c4:	2b01      	cmp	r3, #1
 80065c6:	d11c      	bne.n	8006602 <USB_EPStartXfer+0x304>
 80065c8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80065cc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80065d6:	b29b      	uxth	r3, r3
 80065d8:	461a      	mov	r2, r3
 80065da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065dc:	4413      	add	r3, r2
 80065de:	633b      	str	r3, [r7, #48]	; 0x30
 80065e0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80065e4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	781b      	ldrb	r3, [r3, #0]
 80065ec:	00da      	lsls	r2, r3, #3
 80065ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065f0:	4413      	add	r3, r2
 80065f2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80065f6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80065f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80065fc:	b29a      	uxth	r2, r3
 80065fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006600:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8006602:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006606:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	895b      	ldrh	r3, [r3, #10]
 800660e:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006612:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006616:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	6959      	ldr	r1, [r3, #20]
 800661e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006622:	b29b      	uxth	r3, r3
 8006624:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8006628:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800662c:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8006630:	6800      	ldr	r0, [r0, #0]
 8006632:	f001 fad4 	bl	8007bde <USB_WritePMA>
            ep->xfer_buff += len;
 8006636:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800663a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	695a      	ldr	r2, [r3, #20]
 8006642:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006646:	441a      	add	r2, r3
 8006648:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800664c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8006654:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006658:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	6a1a      	ldr	r2, [r3, #32]
 8006660:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006664:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	691b      	ldr	r3, [r3, #16]
 800666c:	429a      	cmp	r2, r3
 800666e:	d90f      	bls.n	8006690 <USB_EPStartXfer+0x392>
            {
              ep->xfer_len_db -= len;
 8006670:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006674:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	6a1a      	ldr	r2, [r3, #32]
 800667c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006680:	1ad2      	subs	r2, r2, r3
 8006682:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006686:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	621a      	str	r2, [r3, #32]
 800668e:	e00e      	b.n	80066ae <USB_EPStartXfer+0x3b0>
            }
            else
            {
              len = ep->xfer_len_db;
 8006690:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006694:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	6a1b      	ldr	r3, [r3, #32]
 800669c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 80066a0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80066a4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	2200      	movs	r2, #0
 80066ac:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80066ae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80066b2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	785b      	ldrb	r3, [r3, #1]
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d16d      	bne.n	800679a <USB_EPStartXfer+0x49c>
 80066be:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80066c2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	61bb      	str	r3, [r7, #24]
 80066ca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80066ce:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80066d8:	b29b      	uxth	r3, r3
 80066da:	461a      	mov	r2, r3
 80066dc:	69bb      	ldr	r3, [r7, #24]
 80066de:	4413      	add	r3, r2
 80066e0:	61bb      	str	r3, [r7, #24]
 80066e2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80066e6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	781b      	ldrb	r3, [r3, #0]
 80066ee:	00da      	lsls	r2, r3, #3
 80066f0:	69bb      	ldr	r3, [r7, #24]
 80066f2:	4413      	add	r3, r2
 80066f4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80066f8:	617b      	str	r3, [r7, #20]
 80066fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80066fe:	2b3e      	cmp	r3, #62	; 0x3e
 8006700:	d91c      	bls.n	800673c <USB_EPStartXfer+0x43e>
 8006702:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006706:	095b      	lsrs	r3, r3, #5
 8006708:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800670c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006710:	f003 031f 	and.w	r3, r3, #31
 8006714:	2b00      	cmp	r3, #0
 8006716:	d104      	bne.n	8006722 <USB_EPStartXfer+0x424>
 8006718:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800671c:	3b01      	subs	r3, #1
 800671e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006722:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006726:	b29b      	uxth	r3, r3
 8006728:	029b      	lsls	r3, r3, #10
 800672a:	b29b      	uxth	r3, r3
 800672c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006730:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006734:	b29a      	uxth	r2, r3
 8006736:	697b      	ldr	r3, [r7, #20]
 8006738:	801a      	strh	r2, [r3, #0]
 800673a:	e059      	b.n	80067f0 <USB_EPStartXfer+0x4f2>
 800673c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006740:	2b00      	cmp	r3, #0
 8006742:	d112      	bne.n	800676a <USB_EPStartXfer+0x46c>
 8006744:	697b      	ldr	r3, [r7, #20]
 8006746:	881b      	ldrh	r3, [r3, #0]
 8006748:	b29b      	uxth	r3, r3
 800674a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800674e:	b29a      	uxth	r2, r3
 8006750:	697b      	ldr	r3, [r7, #20]
 8006752:	801a      	strh	r2, [r3, #0]
 8006754:	697b      	ldr	r3, [r7, #20]
 8006756:	881b      	ldrh	r3, [r3, #0]
 8006758:	b29b      	uxth	r3, r3
 800675a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800675e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006762:	b29a      	uxth	r2, r3
 8006764:	697b      	ldr	r3, [r7, #20]
 8006766:	801a      	strh	r2, [r3, #0]
 8006768:	e042      	b.n	80067f0 <USB_EPStartXfer+0x4f2>
 800676a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800676e:	085b      	lsrs	r3, r3, #1
 8006770:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006774:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006778:	f003 0301 	and.w	r3, r3, #1
 800677c:	2b00      	cmp	r3, #0
 800677e:	d004      	beq.n	800678a <USB_EPStartXfer+0x48c>
 8006780:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006784:	3301      	adds	r3, #1
 8006786:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800678a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800678e:	b29b      	uxth	r3, r3
 8006790:	029b      	lsls	r3, r3, #10
 8006792:	b29a      	uxth	r2, r3
 8006794:	697b      	ldr	r3, [r7, #20]
 8006796:	801a      	strh	r2, [r3, #0]
 8006798:	e02a      	b.n	80067f0 <USB_EPStartXfer+0x4f2>
 800679a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800679e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	785b      	ldrb	r3, [r3, #1]
 80067a6:	2b01      	cmp	r3, #1
 80067a8:	d122      	bne.n	80067f0 <USB_EPStartXfer+0x4f2>
 80067aa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80067ae:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	623b      	str	r3, [r7, #32]
 80067b6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80067ba:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80067c4:	b29b      	uxth	r3, r3
 80067c6:	461a      	mov	r2, r3
 80067c8:	6a3b      	ldr	r3, [r7, #32]
 80067ca:	4413      	add	r3, r2
 80067cc:	623b      	str	r3, [r7, #32]
 80067ce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80067d2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	781b      	ldrb	r3, [r3, #0]
 80067da:	00da      	lsls	r2, r3, #3
 80067dc:	6a3b      	ldr	r3, [r7, #32]
 80067de:	4413      	add	r3, r2
 80067e0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80067e4:	61fb      	str	r3, [r7, #28]
 80067e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80067ea:	b29a      	uxth	r2, r3
 80067ec:	69fb      	ldr	r3, [r7, #28]
 80067ee:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80067f0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80067f4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	891b      	ldrh	r3, [r3, #8]
 80067fc:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006800:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006804:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	6959      	ldr	r1, [r3, #20]
 800680c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006810:	b29b      	uxth	r3, r3
 8006812:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8006816:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800681a:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800681e:	6800      	ldr	r0, [r0, #0]
 8006820:	f001 f9dd 	bl	8007bde <USB_WritePMA>
 8006824:	e3c6      	b.n	8006fb4 <USB_EPStartXfer+0xcb6>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006826:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800682a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	785b      	ldrb	r3, [r3, #1]
 8006832:	2b00      	cmp	r3, #0
 8006834:	d16d      	bne.n	8006912 <USB_EPStartXfer+0x614>
 8006836:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800683a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	64bb      	str	r3, [r7, #72]	; 0x48
 8006842:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006846:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006850:	b29b      	uxth	r3, r3
 8006852:	461a      	mov	r2, r3
 8006854:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006856:	4413      	add	r3, r2
 8006858:	64bb      	str	r3, [r7, #72]	; 0x48
 800685a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800685e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	781b      	ldrb	r3, [r3, #0]
 8006866:	00da      	lsls	r2, r3, #3
 8006868:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800686a:	4413      	add	r3, r2
 800686c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006870:	647b      	str	r3, [r7, #68]	; 0x44
 8006872:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006876:	2b3e      	cmp	r3, #62	; 0x3e
 8006878:	d91c      	bls.n	80068b4 <USB_EPStartXfer+0x5b6>
 800687a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800687e:	095b      	lsrs	r3, r3, #5
 8006880:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006884:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006888:	f003 031f 	and.w	r3, r3, #31
 800688c:	2b00      	cmp	r3, #0
 800688e:	d104      	bne.n	800689a <USB_EPStartXfer+0x59c>
 8006890:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006894:	3b01      	subs	r3, #1
 8006896:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800689a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800689e:	b29b      	uxth	r3, r3
 80068a0:	029b      	lsls	r3, r3, #10
 80068a2:	b29b      	uxth	r3, r3
 80068a4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80068a8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80068ac:	b29a      	uxth	r2, r3
 80068ae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80068b0:	801a      	strh	r2, [r3, #0]
 80068b2:	e059      	b.n	8006968 <USB_EPStartXfer+0x66a>
 80068b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d112      	bne.n	80068e2 <USB_EPStartXfer+0x5e4>
 80068bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80068be:	881b      	ldrh	r3, [r3, #0]
 80068c0:	b29b      	uxth	r3, r3
 80068c2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80068c6:	b29a      	uxth	r2, r3
 80068c8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80068ca:	801a      	strh	r2, [r3, #0]
 80068cc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80068ce:	881b      	ldrh	r3, [r3, #0]
 80068d0:	b29b      	uxth	r3, r3
 80068d2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80068d6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80068da:	b29a      	uxth	r2, r3
 80068dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80068de:	801a      	strh	r2, [r3, #0]
 80068e0:	e042      	b.n	8006968 <USB_EPStartXfer+0x66a>
 80068e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80068e6:	085b      	lsrs	r3, r3, #1
 80068e8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80068ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80068f0:	f003 0301 	and.w	r3, r3, #1
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d004      	beq.n	8006902 <USB_EPStartXfer+0x604>
 80068f8:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80068fc:	3301      	adds	r3, #1
 80068fe:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006902:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006906:	b29b      	uxth	r3, r3
 8006908:	029b      	lsls	r3, r3, #10
 800690a:	b29a      	uxth	r2, r3
 800690c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800690e:	801a      	strh	r2, [r3, #0]
 8006910:	e02a      	b.n	8006968 <USB_EPStartXfer+0x66a>
 8006912:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006916:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	785b      	ldrb	r3, [r3, #1]
 800691e:	2b01      	cmp	r3, #1
 8006920:	d122      	bne.n	8006968 <USB_EPStartXfer+0x66a>
 8006922:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006926:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	653b      	str	r3, [r7, #80]	; 0x50
 800692e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006932:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800693c:	b29b      	uxth	r3, r3
 800693e:	461a      	mov	r2, r3
 8006940:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006942:	4413      	add	r3, r2
 8006944:	653b      	str	r3, [r7, #80]	; 0x50
 8006946:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800694a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	781b      	ldrb	r3, [r3, #0]
 8006952:	00da      	lsls	r2, r3, #3
 8006954:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006956:	4413      	add	r3, r2
 8006958:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800695c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800695e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006962:	b29a      	uxth	r2, r3
 8006964:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006966:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8006968:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800696c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	891b      	ldrh	r3, [r3, #8]
 8006974:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006978:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800697c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	6959      	ldr	r1, [r3, #20]
 8006984:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006988:	b29b      	uxth	r3, r3
 800698a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800698e:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8006992:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8006996:	6800      	ldr	r0, [r0, #0]
 8006998:	f001 f921 	bl	8007bde <USB_WritePMA>
            ep->xfer_buff += len;
 800699c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80069a0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	695a      	ldr	r2, [r3, #20]
 80069a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80069ac:	441a      	add	r2, r3
 80069ae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80069b2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80069ba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80069be:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	6a1a      	ldr	r2, [r3, #32]
 80069c6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80069ca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	691b      	ldr	r3, [r3, #16]
 80069d2:	429a      	cmp	r2, r3
 80069d4:	d90f      	bls.n	80069f6 <USB_EPStartXfer+0x6f8>
            {
              ep->xfer_len_db -= len;
 80069d6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80069da:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	6a1a      	ldr	r2, [r3, #32]
 80069e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80069e6:	1ad2      	subs	r2, r2, r3
 80069e8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80069ec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	621a      	str	r2, [r3, #32]
 80069f4:	e00e      	b.n	8006a14 <USB_EPStartXfer+0x716>
            }
            else
            {
              len = ep->xfer_len_db;
 80069f6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80069fa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	6a1b      	ldr	r3, [r3, #32]
 8006a02:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8006a06:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a0a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	2200      	movs	r2, #0
 8006a12:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006a14:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a18:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	643b      	str	r3, [r7, #64]	; 0x40
 8006a20:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a24:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	785b      	ldrb	r3, [r3, #1]
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d16d      	bne.n	8006b0c <USB_EPStartXfer+0x80e>
 8006a30:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a34:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	63bb      	str	r3, [r7, #56]	; 0x38
 8006a3c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a40:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006a4a:	b29b      	uxth	r3, r3
 8006a4c:	461a      	mov	r2, r3
 8006a4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a50:	4413      	add	r3, r2
 8006a52:	63bb      	str	r3, [r7, #56]	; 0x38
 8006a54:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a58:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	781b      	ldrb	r3, [r3, #0]
 8006a60:	00da      	lsls	r2, r3, #3
 8006a62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a64:	4413      	add	r3, r2
 8006a66:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006a6a:	637b      	str	r3, [r7, #52]	; 0x34
 8006a6c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006a70:	2b3e      	cmp	r3, #62	; 0x3e
 8006a72:	d91c      	bls.n	8006aae <USB_EPStartXfer+0x7b0>
 8006a74:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006a78:	095b      	lsrs	r3, r3, #5
 8006a7a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006a7e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006a82:	f003 031f 	and.w	r3, r3, #31
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d104      	bne.n	8006a94 <USB_EPStartXfer+0x796>
 8006a8a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a8e:	3b01      	subs	r3, #1
 8006a90:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006a94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a98:	b29b      	uxth	r3, r3
 8006a9a:	029b      	lsls	r3, r3, #10
 8006a9c:	b29b      	uxth	r3, r3
 8006a9e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006aa2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006aa6:	b29a      	uxth	r2, r3
 8006aa8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006aaa:	801a      	strh	r2, [r3, #0]
 8006aac:	e053      	b.n	8006b56 <USB_EPStartXfer+0x858>
 8006aae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d112      	bne.n	8006adc <USB_EPStartXfer+0x7de>
 8006ab6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ab8:	881b      	ldrh	r3, [r3, #0]
 8006aba:	b29b      	uxth	r3, r3
 8006abc:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006ac0:	b29a      	uxth	r2, r3
 8006ac2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ac4:	801a      	strh	r2, [r3, #0]
 8006ac6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ac8:	881b      	ldrh	r3, [r3, #0]
 8006aca:	b29b      	uxth	r3, r3
 8006acc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006ad0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006ad4:	b29a      	uxth	r2, r3
 8006ad6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ad8:	801a      	strh	r2, [r3, #0]
 8006ada:	e03c      	b.n	8006b56 <USB_EPStartXfer+0x858>
 8006adc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006ae0:	085b      	lsrs	r3, r3, #1
 8006ae2:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006ae6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006aea:	f003 0301 	and.w	r3, r3, #1
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d004      	beq.n	8006afc <USB_EPStartXfer+0x7fe>
 8006af2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006af6:	3301      	adds	r3, #1
 8006af8:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006afc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b00:	b29b      	uxth	r3, r3
 8006b02:	029b      	lsls	r3, r3, #10
 8006b04:	b29a      	uxth	r2, r3
 8006b06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b08:	801a      	strh	r2, [r3, #0]
 8006b0a:	e024      	b.n	8006b56 <USB_EPStartXfer+0x858>
 8006b0c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b10:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	785b      	ldrb	r3, [r3, #1]
 8006b18:	2b01      	cmp	r3, #1
 8006b1a:	d11c      	bne.n	8006b56 <USB_EPStartXfer+0x858>
 8006b1c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b20:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006b2a:	b29b      	uxth	r3, r3
 8006b2c:	461a      	mov	r2, r3
 8006b2e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006b30:	4413      	add	r3, r2
 8006b32:	643b      	str	r3, [r7, #64]	; 0x40
 8006b34:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b38:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	781b      	ldrb	r3, [r3, #0]
 8006b40:	00da      	lsls	r2, r3, #3
 8006b42:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006b44:	4413      	add	r3, r2
 8006b46:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006b4a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006b4c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006b50:	b29a      	uxth	r2, r3
 8006b52:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006b54:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8006b56:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b5a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	895b      	ldrh	r3, [r3, #10]
 8006b62:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006b66:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b6a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	6959      	ldr	r1, [r3, #20]
 8006b72:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006b76:	b29b      	uxth	r3, r3
 8006b78:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8006b7c:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8006b80:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8006b84:	6800      	ldr	r0, [r0, #0]
 8006b86:	f001 f82a 	bl	8007bde <USB_WritePMA>
 8006b8a:	e213      	b.n	8006fb4 <USB_EPStartXfer+0xcb6>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8006b8c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b90:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	6a1b      	ldr	r3, [r3, #32]
 8006b98:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8006b9c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ba0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006ba4:	681a      	ldr	r2, [r3, #0]
 8006ba6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006baa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	781b      	ldrb	r3, [r3, #0]
 8006bb2:	009b      	lsls	r3, r3, #2
 8006bb4:	4413      	add	r3, r2
 8006bb6:	881b      	ldrh	r3, [r3, #0]
 8006bb8:	b29b      	uxth	r3, r3
 8006bba:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8006bbe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006bc2:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8006bc6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006bca:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006bce:	681a      	ldr	r2, [r3, #0]
 8006bd0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006bd4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	781b      	ldrb	r3, [r3, #0]
 8006bdc:	009b      	lsls	r3, r3, #2
 8006bde:	441a      	add	r2, r3
 8006be0:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8006be4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006be8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006bec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006bf0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006bf4:	b29b      	uxth	r3, r3
 8006bf6:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8006bf8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006bfc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006c04:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c08:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006c12:	b29b      	uxth	r3, r3
 8006c14:	461a      	mov	r2, r3
 8006c16:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006c18:	4413      	add	r3, r2
 8006c1a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006c1c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c20:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	781b      	ldrb	r3, [r3, #0]
 8006c28:	00da      	lsls	r2, r3, #3
 8006c2a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006c2c:	4413      	add	r3, r2
 8006c2e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006c32:	65bb      	str	r3, [r7, #88]	; 0x58
 8006c34:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006c38:	b29a      	uxth	r2, r3
 8006c3a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006c3c:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8006c3e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c42:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	891b      	ldrh	r3, [r3, #8]
 8006c4a:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006c4e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c52:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	6959      	ldr	r1, [r3, #20]
 8006c5a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006c5e:	b29b      	uxth	r3, r3
 8006c60:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8006c64:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8006c68:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8006c6c:	6800      	ldr	r0, [r0, #0]
 8006c6e:	f000 ffb6 	bl	8007bde <USB_WritePMA>
 8006c72:	e19f      	b.n	8006fb4 <USB_EPStartXfer+0xcb6>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8006c74:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c78:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	6a1a      	ldr	r2, [r3, #32]
 8006c80:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006c84:	1ad2      	subs	r2, r2, r3
 8006c86:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c8a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8006c92:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c96:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006c9a:	681a      	ldr	r2, [r3, #0]
 8006c9c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ca0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	781b      	ldrb	r3, [r3, #0]
 8006ca8:	009b      	lsls	r3, r3, #2
 8006caa:	4413      	add	r3, r2
 8006cac:	881b      	ldrh	r3, [r3, #0]
 8006cae:	b29b      	uxth	r3, r3
 8006cb0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	f000 80bc 	beq.w	8006e32 <USB_EPStartXfer+0xb34>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006cba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006cbe:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	673b      	str	r3, [r7, #112]	; 0x70
 8006cc6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006cca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	785b      	ldrb	r3, [r3, #1]
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d16d      	bne.n	8006db2 <USB_EPStartXfer+0xab4>
 8006cd6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006cda:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	66bb      	str	r3, [r7, #104]	; 0x68
 8006ce2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ce6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006cf0:	b29b      	uxth	r3, r3
 8006cf2:	461a      	mov	r2, r3
 8006cf4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006cf6:	4413      	add	r3, r2
 8006cf8:	66bb      	str	r3, [r7, #104]	; 0x68
 8006cfa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006cfe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	781b      	ldrb	r3, [r3, #0]
 8006d06:	00da      	lsls	r2, r3, #3
 8006d08:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006d0a:	4413      	add	r3, r2
 8006d0c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006d10:	667b      	str	r3, [r7, #100]	; 0x64
 8006d12:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006d16:	2b3e      	cmp	r3, #62	; 0x3e
 8006d18:	d91c      	bls.n	8006d54 <USB_EPStartXfer+0xa56>
 8006d1a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006d1e:	095b      	lsrs	r3, r3, #5
 8006d20:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006d24:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006d28:	f003 031f 	and.w	r3, r3, #31
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d104      	bne.n	8006d3a <USB_EPStartXfer+0xa3c>
 8006d30:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8006d34:	3b01      	subs	r3, #1
 8006d36:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006d3a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8006d3e:	b29b      	uxth	r3, r3
 8006d40:	029b      	lsls	r3, r3, #10
 8006d42:	b29b      	uxth	r3, r3
 8006d44:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006d48:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006d4c:	b29a      	uxth	r2, r3
 8006d4e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006d50:	801a      	strh	r2, [r3, #0]
 8006d52:	e053      	b.n	8006dfc <USB_EPStartXfer+0xafe>
 8006d54:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d112      	bne.n	8006d82 <USB_EPStartXfer+0xa84>
 8006d5c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006d5e:	881b      	ldrh	r3, [r3, #0]
 8006d60:	b29b      	uxth	r3, r3
 8006d62:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006d66:	b29a      	uxth	r2, r3
 8006d68:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006d6a:	801a      	strh	r2, [r3, #0]
 8006d6c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006d6e:	881b      	ldrh	r3, [r3, #0]
 8006d70:	b29b      	uxth	r3, r3
 8006d72:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006d76:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006d7a:	b29a      	uxth	r2, r3
 8006d7c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006d7e:	801a      	strh	r2, [r3, #0]
 8006d80:	e03c      	b.n	8006dfc <USB_EPStartXfer+0xafe>
 8006d82:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006d86:	085b      	lsrs	r3, r3, #1
 8006d88:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006d8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006d90:	f003 0301 	and.w	r3, r3, #1
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d004      	beq.n	8006da2 <USB_EPStartXfer+0xaa4>
 8006d98:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8006d9c:	3301      	adds	r3, #1
 8006d9e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006da2:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8006da6:	b29b      	uxth	r3, r3
 8006da8:	029b      	lsls	r3, r3, #10
 8006daa:	b29a      	uxth	r2, r3
 8006dac:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006dae:	801a      	strh	r2, [r3, #0]
 8006db0:	e024      	b.n	8006dfc <USB_EPStartXfer+0xafe>
 8006db2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006db6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	785b      	ldrb	r3, [r3, #1]
 8006dbe:	2b01      	cmp	r3, #1
 8006dc0:	d11c      	bne.n	8006dfc <USB_EPStartXfer+0xafe>
 8006dc2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006dc6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006dd0:	b29b      	uxth	r3, r3
 8006dd2:	461a      	mov	r2, r3
 8006dd4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006dd6:	4413      	add	r3, r2
 8006dd8:	673b      	str	r3, [r7, #112]	; 0x70
 8006dda:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006dde:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	781b      	ldrb	r3, [r3, #0]
 8006de6:	00da      	lsls	r2, r3, #3
 8006de8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006dea:	4413      	add	r3, r2
 8006dec:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006df0:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006df2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006df6:	b29a      	uxth	r2, r3
 8006df8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006dfa:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8006dfc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e00:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	895b      	ldrh	r3, [r3, #10]
 8006e08:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006e0c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e10:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	6959      	ldr	r1, [r3, #20]
 8006e18:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006e1c:	b29b      	uxth	r3, r3
 8006e1e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8006e22:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8006e26:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8006e2a:	6800      	ldr	r0, [r0, #0]
 8006e2c:	f000 fed7 	bl	8007bde <USB_WritePMA>
 8006e30:	e0c0      	b.n	8006fb4 <USB_EPStartXfer+0xcb6>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006e32:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e36:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	785b      	ldrb	r3, [r3, #1]
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d16d      	bne.n	8006f1e <USB_EPStartXfer+0xc20>
 8006e42:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e46:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006e4e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e52:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006e5c:	b29b      	uxth	r3, r3
 8006e5e:	461a      	mov	r2, r3
 8006e60:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006e62:	4413      	add	r3, r2
 8006e64:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006e66:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e6a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	781b      	ldrb	r3, [r3, #0]
 8006e72:	00da      	lsls	r2, r3, #3
 8006e74:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006e76:	4413      	add	r3, r2
 8006e78:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006e7c:	67bb      	str	r3, [r7, #120]	; 0x78
 8006e7e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006e82:	2b3e      	cmp	r3, #62	; 0x3e
 8006e84:	d91c      	bls.n	8006ec0 <USB_EPStartXfer+0xbc2>
 8006e86:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006e8a:	095b      	lsrs	r3, r3, #5
 8006e8c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006e90:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006e94:	f003 031f 	and.w	r3, r3, #31
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d104      	bne.n	8006ea6 <USB_EPStartXfer+0xba8>
 8006e9c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006ea0:	3b01      	subs	r3, #1
 8006ea2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006ea6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006eaa:	b29b      	uxth	r3, r3
 8006eac:	029b      	lsls	r3, r3, #10
 8006eae:	b29b      	uxth	r3, r3
 8006eb0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006eb4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006eb8:	b29a      	uxth	r2, r3
 8006eba:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006ebc:	801a      	strh	r2, [r3, #0]
 8006ebe:	e05f      	b.n	8006f80 <USB_EPStartXfer+0xc82>
 8006ec0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d112      	bne.n	8006eee <USB_EPStartXfer+0xbf0>
 8006ec8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006eca:	881b      	ldrh	r3, [r3, #0]
 8006ecc:	b29b      	uxth	r3, r3
 8006ece:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006ed2:	b29a      	uxth	r2, r3
 8006ed4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006ed6:	801a      	strh	r2, [r3, #0]
 8006ed8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006eda:	881b      	ldrh	r3, [r3, #0]
 8006edc:	b29b      	uxth	r3, r3
 8006ede:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006ee2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006ee6:	b29a      	uxth	r2, r3
 8006ee8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006eea:	801a      	strh	r2, [r3, #0]
 8006eec:	e048      	b.n	8006f80 <USB_EPStartXfer+0xc82>
 8006eee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006ef2:	085b      	lsrs	r3, r3, #1
 8006ef4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006ef8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006efc:	f003 0301 	and.w	r3, r3, #1
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d004      	beq.n	8006f0e <USB_EPStartXfer+0xc10>
 8006f04:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006f08:	3301      	adds	r3, #1
 8006f0a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006f0e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006f12:	b29b      	uxth	r3, r3
 8006f14:	029b      	lsls	r3, r3, #10
 8006f16:	b29a      	uxth	r2, r3
 8006f18:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006f1a:	801a      	strh	r2, [r3, #0]
 8006f1c:	e030      	b.n	8006f80 <USB_EPStartXfer+0xc82>
 8006f1e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f22:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	785b      	ldrb	r3, [r3, #1]
 8006f2a:	2b01      	cmp	r3, #1
 8006f2c:	d128      	bne.n	8006f80 <USB_EPStartXfer+0xc82>
 8006f2e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f32:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006f3c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f40:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006f4a:	b29b      	uxth	r3, r3
 8006f4c:	461a      	mov	r2, r3
 8006f4e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006f52:	4413      	add	r3, r2
 8006f54:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006f58:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f5c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	781b      	ldrb	r3, [r3, #0]
 8006f64:	00da      	lsls	r2, r3, #3
 8006f66:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006f6a:	4413      	add	r3, r2
 8006f6c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006f70:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006f74:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006f78:	b29a      	uxth	r2, r3
 8006f7a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006f7e:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8006f80:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f84:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	891b      	ldrh	r3, [r3, #8]
 8006f8c:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006f90:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f94:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	6959      	ldr	r1, [r3, #20]
 8006f9c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006fa0:	b29b      	uxth	r3, r3
 8006fa2:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8006fa6:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8006faa:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8006fae:	6800      	ldr	r0, [r0, #0]
 8006fb0:	f000 fe15 	bl	8007bde <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8006fb4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006fb8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006fbc:	681a      	ldr	r2, [r3, #0]
 8006fbe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006fc2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	781b      	ldrb	r3, [r3, #0]
 8006fca:	009b      	lsls	r3, r3, #2
 8006fcc:	4413      	add	r3, r2
 8006fce:	881b      	ldrh	r3, [r3, #0]
 8006fd0:	b29b      	uxth	r3, r3
 8006fd2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006fd6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006fda:	817b      	strh	r3, [r7, #10]
 8006fdc:	897b      	ldrh	r3, [r7, #10]
 8006fde:	f083 0310 	eor.w	r3, r3, #16
 8006fe2:	817b      	strh	r3, [r7, #10]
 8006fe4:	897b      	ldrh	r3, [r7, #10]
 8006fe6:	f083 0320 	eor.w	r3, r3, #32
 8006fea:	817b      	strh	r3, [r7, #10]
 8006fec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ff0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006ff4:	681a      	ldr	r2, [r3, #0]
 8006ff6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ffa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	781b      	ldrb	r3, [r3, #0]
 8007002:	009b      	lsls	r3, r3, #2
 8007004:	441a      	add	r2, r3
 8007006:	897b      	ldrh	r3, [r7, #10]
 8007008:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800700c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007010:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007014:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007018:	b29b      	uxth	r3, r3
 800701a:	8013      	strh	r3, [r2, #0]
 800701c:	f000 bc9f 	b.w	800795e <USB_EPStartXfer+0x1660>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8007020:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007024:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	7b1b      	ldrb	r3, [r3, #12]
 800702c:	2b00      	cmp	r3, #0
 800702e:	f040 80ae 	bne.w	800718e <USB_EPStartXfer+0xe90>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8007032:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007036:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	699a      	ldr	r2, [r3, #24]
 800703e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007042:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	691b      	ldr	r3, [r3, #16]
 800704a:	429a      	cmp	r2, r3
 800704c:	d917      	bls.n	800707e <USB_EPStartXfer+0xd80>
      {
        len = ep->maxpacket;
 800704e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007052:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	691b      	ldr	r3, [r3, #16]
 800705a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 800705e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007062:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	699a      	ldr	r2, [r3, #24]
 800706a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800706e:	1ad2      	subs	r2, r2, r3
 8007070:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007074:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	619a      	str	r2, [r3, #24]
 800707c:	e00e      	b.n	800709c <USB_EPStartXfer+0xd9e>
      }
      else
      {
        len = ep->xfer_len;
 800707e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007082:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	699b      	ldr	r3, [r3, #24]
 800708a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 800708e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007092:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	2200      	movs	r2, #0
 800709a:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800709c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80070a0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80070aa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80070ae:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80070b8:	b29b      	uxth	r3, r3
 80070ba:	461a      	mov	r2, r3
 80070bc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80070c0:	4413      	add	r3, r2
 80070c2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80070c6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80070ca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	781b      	ldrb	r3, [r3, #0]
 80070d2:	00da      	lsls	r2, r3, #3
 80070d4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80070d8:	4413      	add	r3, r2
 80070da:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80070de:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80070e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80070e6:	2b3e      	cmp	r3, #62	; 0x3e
 80070e8:	d91d      	bls.n	8007126 <USB_EPStartXfer+0xe28>
 80070ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80070ee:	095b      	lsrs	r3, r3, #5
 80070f0:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80070f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80070f8:	f003 031f 	and.w	r3, r3, #31
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	d104      	bne.n	800710a <USB_EPStartXfer+0xe0c>
 8007100:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007104:	3b01      	subs	r3, #1
 8007106:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800710a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800710e:	b29b      	uxth	r3, r3
 8007110:	029b      	lsls	r3, r3, #10
 8007112:	b29b      	uxth	r3, r3
 8007114:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007118:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800711c:	b29a      	uxth	r2, r3
 800711e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007122:	801a      	strh	r2, [r3, #0]
 8007124:	e3e1      	b.n	80078ea <USB_EPStartXfer+0x15ec>
 8007126:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800712a:	2b00      	cmp	r3, #0
 800712c:	d116      	bne.n	800715c <USB_EPStartXfer+0xe5e>
 800712e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007132:	881b      	ldrh	r3, [r3, #0]
 8007134:	b29b      	uxth	r3, r3
 8007136:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800713a:	b29a      	uxth	r2, r3
 800713c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007140:	801a      	strh	r2, [r3, #0]
 8007142:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007146:	881b      	ldrh	r3, [r3, #0]
 8007148:	b29b      	uxth	r3, r3
 800714a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800714e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007152:	b29a      	uxth	r2, r3
 8007154:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007158:	801a      	strh	r2, [r3, #0]
 800715a:	e3c6      	b.n	80078ea <USB_EPStartXfer+0x15ec>
 800715c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007160:	085b      	lsrs	r3, r3, #1
 8007162:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007166:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800716a:	f003 0301 	and.w	r3, r3, #1
 800716e:	2b00      	cmp	r3, #0
 8007170:	d004      	beq.n	800717c <USB_EPStartXfer+0xe7e>
 8007172:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007176:	3301      	adds	r3, #1
 8007178:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800717c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007180:	b29b      	uxth	r3, r3
 8007182:	029b      	lsls	r3, r3, #10
 8007184:	b29a      	uxth	r2, r3
 8007186:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800718a:	801a      	strh	r2, [r3, #0]
 800718c:	e3ad      	b.n	80078ea <USB_EPStartXfer+0x15ec>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800718e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007192:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	78db      	ldrb	r3, [r3, #3]
 800719a:	2b02      	cmp	r3, #2
 800719c:	f040 8200 	bne.w	80075a0 <USB_EPStartXfer+0x12a2>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 80071a0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80071a4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	785b      	ldrb	r3, [r3, #1]
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	f040 8091 	bne.w	80072d4 <USB_EPStartXfer+0xfd6>
 80071b2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80071b6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80071c0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80071c4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80071ce:	b29b      	uxth	r3, r3
 80071d0:	461a      	mov	r2, r3
 80071d2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80071d6:	4413      	add	r3, r2
 80071d8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80071dc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80071e0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	781b      	ldrb	r3, [r3, #0]
 80071e8:	00da      	lsls	r2, r3, #3
 80071ea:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80071ee:	4413      	add	r3, r2
 80071f0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80071f4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80071f8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80071fc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	691b      	ldr	r3, [r3, #16]
 8007204:	2b3e      	cmp	r3, #62	; 0x3e
 8007206:	d925      	bls.n	8007254 <USB_EPStartXfer+0xf56>
 8007208:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800720c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	691b      	ldr	r3, [r3, #16]
 8007214:	095b      	lsrs	r3, r3, #5
 8007216:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800721a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800721e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	691b      	ldr	r3, [r3, #16]
 8007226:	f003 031f 	and.w	r3, r3, #31
 800722a:	2b00      	cmp	r3, #0
 800722c:	d104      	bne.n	8007238 <USB_EPStartXfer+0xf3a>
 800722e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007232:	3b01      	subs	r3, #1
 8007234:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007238:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800723c:	b29b      	uxth	r3, r3
 800723e:	029b      	lsls	r3, r3, #10
 8007240:	b29b      	uxth	r3, r3
 8007242:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007246:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800724a:	b29a      	uxth	r2, r3
 800724c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007250:	801a      	strh	r2, [r3, #0]
 8007252:	e074      	b.n	800733e <USB_EPStartXfer+0x1040>
 8007254:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007258:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	691b      	ldr	r3, [r3, #16]
 8007260:	2b00      	cmp	r3, #0
 8007262:	d116      	bne.n	8007292 <USB_EPStartXfer+0xf94>
 8007264:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007268:	881b      	ldrh	r3, [r3, #0]
 800726a:	b29b      	uxth	r3, r3
 800726c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007270:	b29a      	uxth	r2, r3
 8007272:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007276:	801a      	strh	r2, [r3, #0]
 8007278:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800727c:	881b      	ldrh	r3, [r3, #0]
 800727e:	b29b      	uxth	r3, r3
 8007280:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007284:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007288:	b29a      	uxth	r2, r3
 800728a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800728e:	801a      	strh	r2, [r3, #0]
 8007290:	e055      	b.n	800733e <USB_EPStartXfer+0x1040>
 8007292:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007296:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	691b      	ldr	r3, [r3, #16]
 800729e:	085b      	lsrs	r3, r3, #1
 80072a0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80072a4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80072a8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	691b      	ldr	r3, [r3, #16]
 80072b0:	f003 0301 	and.w	r3, r3, #1
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	d004      	beq.n	80072c2 <USB_EPStartXfer+0xfc4>
 80072b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80072bc:	3301      	adds	r3, #1
 80072be:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80072c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80072c6:	b29b      	uxth	r3, r3
 80072c8:	029b      	lsls	r3, r3, #10
 80072ca:	b29a      	uxth	r2, r3
 80072cc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80072d0:	801a      	strh	r2, [r3, #0]
 80072d2:	e034      	b.n	800733e <USB_EPStartXfer+0x1040>
 80072d4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80072d8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	785b      	ldrb	r3, [r3, #1]
 80072e0:	2b01      	cmp	r3, #1
 80072e2:	d12c      	bne.n	800733e <USB_EPStartXfer+0x1040>
 80072e4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80072e8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80072f2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80072f6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007300:	b29b      	uxth	r3, r3
 8007302:	461a      	mov	r2, r3
 8007304:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007308:	4413      	add	r3, r2
 800730a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800730e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007312:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	781b      	ldrb	r3, [r3, #0]
 800731a:	00da      	lsls	r2, r3, #3
 800731c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007320:	4413      	add	r3, r2
 8007322:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007326:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800732a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800732e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	691b      	ldr	r3, [r3, #16]
 8007336:	b29a      	uxth	r2, r3
 8007338:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800733c:	801a      	strh	r2, [r3, #0]
 800733e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007342:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800734c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007350:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	785b      	ldrb	r3, [r3, #1]
 8007358:	2b00      	cmp	r3, #0
 800735a:	f040 8091 	bne.w	8007480 <USB_EPStartXfer+0x1182>
 800735e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007362:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800736c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007370:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800737a:	b29b      	uxth	r3, r3
 800737c:	461a      	mov	r2, r3
 800737e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007382:	4413      	add	r3, r2
 8007384:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007388:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800738c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	781b      	ldrb	r3, [r3, #0]
 8007394:	00da      	lsls	r2, r3, #3
 8007396:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800739a:	4413      	add	r3, r2
 800739c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80073a0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80073a4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80073a8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	691b      	ldr	r3, [r3, #16]
 80073b0:	2b3e      	cmp	r3, #62	; 0x3e
 80073b2:	d925      	bls.n	8007400 <USB_EPStartXfer+0x1102>
 80073b4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80073b8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	691b      	ldr	r3, [r3, #16]
 80073c0:	095b      	lsrs	r3, r3, #5
 80073c2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80073c6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80073ca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	691b      	ldr	r3, [r3, #16]
 80073d2:	f003 031f 	and.w	r3, r3, #31
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d104      	bne.n	80073e4 <USB_EPStartXfer+0x10e6>
 80073da:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80073de:	3b01      	subs	r3, #1
 80073e0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80073e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80073e8:	b29b      	uxth	r3, r3
 80073ea:	029b      	lsls	r3, r3, #10
 80073ec:	b29b      	uxth	r3, r3
 80073ee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80073f2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80073f6:	b29a      	uxth	r2, r3
 80073f8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80073fc:	801a      	strh	r2, [r3, #0]
 80073fe:	e06d      	b.n	80074dc <USB_EPStartXfer+0x11de>
 8007400:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007404:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	691b      	ldr	r3, [r3, #16]
 800740c:	2b00      	cmp	r3, #0
 800740e:	d116      	bne.n	800743e <USB_EPStartXfer+0x1140>
 8007410:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007414:	881b      	ldrh	r3, [r3, #0]
 8007416:	b29b      	uxth	r3, r3
 8007418:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800741c:	b29a      	uxth	r2, r3
 800741e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007422:	801a      	strh	r2, [r3, #0]
 8007424:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007428:	881b      	ldrh	r3, [r3, #0]
 800742a:	b29b      	uxth	r3, r3
 800742c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007430:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007434:	b29a      	uxth	r2, r3
 8007436:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800743a:	801a      	strh	r2, [r3, #0]
 800743c:	e04e      	b.n	80074dc <USB_EPStartXfer+0x11de>
 800743e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007442:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	691b      	ldr	r3, [r3, #16]
 800744a:	085b      	lsrs	r3, r3, #1
 800744c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007450:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007454:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	691b      	ldr	r3, [r3, #16]
 800745c:	f003 0301 	and.w	r3, r3, #1
 8007460:	2b00      	cmp	r3, #0
 8007462:	d004      	beq.n	800746e <USB_EPStartXfer+0x1170>
 8007464:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007468:	3301      	adds	r3, #1
 800746a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800746e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007472:	b29b      	uxth	r3, r3
 8007474:	029b      	lsls	r3, r3, #10
 8007476:	b29a      	uxth	r2, r3
 8007478:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800747c:	801a      	strh	r2, [r3, #0]
 800747e:	e02d      	b.n	80074dc <USB_EPStartXfer+0x11de>
 8007480:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007484:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	785b      	ldrb	r3, [r3, #1]
 800748c:	2b01      	cmp	r3, #1
 800748e:	d125      	bne.n	80074dc <USB_EPStartXfer+0x11de>
 8007490:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007494:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800749e:	b29b      	uxth	r3, r3
 80074a0:	461a      	mov	r2, r3
 80074a2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80074a6:	4413      	add	r3, r2
 80074a8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80074ac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80074b0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	781b      	ldrb	r3, [r3, #0]
 80074b8:	00da      	lsls	r2, r3, #3
 80074ba:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80074be:	4413      	add	r3, r2
 80074c0:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80074c4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80074c8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80074cc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	691b      	ldr	r3, [r3, #16]
 80074d4:	b29a      	uxth	r2, r3
 80074d6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80074da:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 80074dc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80074e0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	69db      	ldr	r3, [r3, #28]
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	f000 81fe 	beq.w	80078ea <USB_EPStartXfer+0x15ec>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 80074ee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80074f2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80074f6:	681a      	ldr	r2, [r3, #0]
 80074f8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80074fc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	781b      	ldrb	r3, [r3, #0]
 8007504:	009b      	lsls	r3, r3, #2
 8007506:	4413      	add	r3, r2
 8007508:	881b      	ldrh	r3, [r3, #0]
 800750a:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800750e:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8007512:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007516:	2b00      	cmp	r3, #0
 8007518:	d005      	beq.n	8007526 <USB_EPStartXfer+0x1228>
 800751a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800751e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007522:	2b00      	cmp	r3, #0
 8007524:	d10d      	bne.n	8007542 <USB_EPStartXfer+0x1244>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8007526:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800752a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800752e:	2b00      	cmp	r3, #0
 8007530:	f040 81db 	bne.w	80078ea <USB_EPStartXfer+0x15ec>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8007534:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8007538:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800753c:	2b00      	cmp	r3, #0
 800753e:	f040 81d4 	bne.w	80078ea <USB_EPStartXfer+0x15ec>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8007542:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007546:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800754a:	681a      	ldr	r2, [r3, #0]
 800754c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007550:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	781b      	ldrb	r3, [r3, #0]
 8007558:	009b      	lsls	r3, r3, #2
 800755a:	4413      	add	r3, r2
 800755c:	881b      	ldrh	r3, [r3, #0]
 800755e:	b29b      	uxth	r3, r3
 8007560:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007564:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007568:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 800756c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007570:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007574:	681a      	ldr	r2, [r3, #0]
 8007576:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800757a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	781b      	ldrb	r3, [r3, #0]
 8007582:	009b      	lsls	r3, r3, #2
 8007584:	441a      	add	r2, r3
 8007586:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 800758a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800758e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007592:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007596:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800759a:	b29b      	uxth	r3, r3
 800759c:	8013      	strh	r3, [r2, #0]
 800759e:	e1a4      	b.n	80078ea <USB_EPStartXfer+0x15ec>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 80075a0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80075a4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	78db      	ldrb	r3, [r3, #3]
 80075ac:	2b01      	cmp	r3, #1
 80075ae:	f040 819a 	bne.w	80078e6 <USB_EPStartXfer+0x15e8>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 80075b2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80075b6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	699a      	ldr	r2, [r3, #24]
 80075be:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80075c2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	691b      	ldr	r3, [r3, #16]
 80075ca:	429a      	cmp	r2, r3
 80075cc:	d917      	bls.n	80075fe <USB_EPStartXfer+0x1300>
        {
          len = ep->maxpacket;
 80075ce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80075d2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	691b      	ldr	r3, [r3, #16]
 80075da:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 80075de:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80075e2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	699a      	ldr	r2, [r3, #24]
 80075ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80075ee:	1ad2      	subs	r2, r2, r3
 80075f0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80075f4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	619a      	str	r2, [r3, #24]
 80075fc:	e00e      	b.n	800761c <USB_EPStartXfer+0x131e>
        }
        else
        {
          len = ep->xfer_len;
 80075fe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007602:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	699b      	ldr	r3, [r3, #24]
 800760a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 800760e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007612:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	2200      	movs	r2, #0
 800761a:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800761c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007620:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	785b      	ldrb	r3, [r3, #1]
 8007628:	2b00      	cmp	r3, #0
 800762a:	d178      	bne.n	800771e <USB_EPStartXfer+0x1420>
 800762c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007630:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800763a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800763e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007648:	b29b      	uxth	r3, r3
 800764a:	461a      	mov	r2, r3
 800764c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8007650:	4413      	add	r3, r2
 8007652:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007656:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800765a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	781b      	ldrb	r3, [r3, #0]
 8007662:	00da      	lsls	r2, r3, #3
 8007664:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8007668:	4413      	add	r3, r2
 800766a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800766e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007672:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007676:	2b3e      	cmp	r3, #62	; 0x3e
 8007678:	d91d      	bls.n	80076b6 <USB_EPStartXfer+0x13b8>
 800767a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800767e:	095b      	lsrs	r3, r3, #5
 8007680:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8007684:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007688:	f003 031f 	and.w	r3, r3, #31
 800768c:	2b00      	cmp	r3, #0
 800768e:	d104      	bne.n	800769a <USB_EPStartXfer+0x139c>
 8007690:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007694:	3b01      	subs	r3, #1
 8007696:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800769a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800769e:	b29b      	uxth	r3, r3
 80076a0:	029b      	lsls	r3, r3, #10
 80076a2:	b29b      	uxth	r3, r3
 80076a4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80076a8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80076ac:	b29a      	uxth	r2, r3
 80076ae:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80076b2:	801a      	strh	r2, [r3, #0]
 80076b4:	e064      	b.n	8007780 <USB_EPStartXfer+0x1482>
 80076b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	d116      	bne.n	80076ec <USB_EPStartXfer+0x13ee>
 80076be:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80076c2:	881b      	ldrh	r3, [r3, #0]
 80076c4:	b29b      	uxth	r3, r3
 80076c6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80076ca:	b29a      	uxth	r2, r3
 80076cc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80076d0:	801a      	strh	r2, [r3, #0]
 80076d2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80076d6:	881b      	ldrh	r3, [r3, #0]
 80076d8:	b29b      	uxth	r3, r3
 80076da:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80076de:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80076e2:	b29a      	uxth	r2, r3
 80076e4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80076e8:	801a      	strh	r2, [r3, #0]
 80076ea:	e049      	b.n	8007780 <USB_EPStartXfer+0x1482>
 80076ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80076f0:	085b      	lsrs	r3, r3, #1
 80076f2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80076f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80076fa:	f003 0301 	and.w	r3, r3, #1
 80076fe:	2b00      	cmp	r3, #0
 8007700:	d004      	beq.n	800770c <USB_EPStartXfer+0x140e>
 8007702:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007706:	3301      	adds	r3, #1
 8007708:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800770c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007710:	b29b      	uxth	r3, r3
 8007712:	029b      	lsls	r3, r3, #10
 8007714:	b29a      	uxth	r2, r3
 8007716:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800771a:	801a      	strh	r2, [r3, #0]
 800771c:	e030      	b.n	8007780 <USB_EPStartXfer+0x1482>
 800771e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007722:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	785b      	ldrb	r3, [r3, #1]
 800772a:	2b01      	cmp	r3, #1
 800772c:	d128      	bne.n	8007780 <USB_EPStartXfer+0x1482>
 800772e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007732:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800773c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007740:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800774a:	b29b      	uxth	r3, r3
 800774c:	461a      	mov	r2, r3
 800774e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007752:	4413      	add	r3, r2
 8007754:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8007758:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800775c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	781b      	ldrb	r3, [r3, #0]
 8007764:	00da      	lsls	r2, r3, #3
 8007766:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800776a:	4413      	add	r3, r2
 800776c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007770:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007774:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007778:	b29a      	uxth	r2, r3
 800777a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800777e:	801a      	strh	r2, [r3, #0]
 8007780:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007784:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800778e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007792:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	785b      	ldrb	r3, [r3, #1]
 800779a:	2b00      	cmp	r3, #0
 800779c:	d178      	bne.n	8007890 <USB_EPStartXfer+0x1592>
 800779e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80077a2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80077ac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80077b0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80077ba:	b29b      	uxth	r3, r3
 80077bc:	461a      	mov	r2, r3
 80077be:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80077c2:	4413      	add	r3, r2
 80077c4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80077c8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80077cc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	781b      	ldrb	r3, [r3, #0]
 80077d4:	00da      	lsls	r2, r3, #3
 80077d6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80077da:	4413      	add	r3, r2
 80077dc:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80077e0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80077e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80077e8:	2b3e      	cmp	r3, #62	; 0x3e
 80077ea:	d91d      	bls.n	8007828 <USB_EPStartXfer+0x152a>
 80077ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80077f0:	095b      	lsrs	r3, r3, #5
 80077f2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80077f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80077fa:	f003 031f 	and.w	r3, r3, #31
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d104      	bne.n	800780c <USB_EPStartXfer+0x150e>
 8007802:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007806:	3b01      	subs	r3, #1
 8007808:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800780c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007810:	b29b      	uxth	r3, r3
 8007812:	029b      	lsls	r3, r3, #10
 8007814:	b29b      	uxth	r3, r3
 8007816:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800781a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800781e:	b29a      	uxth	r2, r3
 8007820:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007824:	801a      	strh	r2, [r3, #0]
 8007826:	e060      	b.n	80078ea <USB_EPStartXfer+0x15ec>
 8007828:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800782c:	2b00      	cmp	r3, #0
 800782e:	d116      	bne.n	800785e <USB_EPStartXfer+0x1560>
 8007830:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007834:	881b      	ldrh	r3, [r3, #0]
 8007836:	b29b      	uxth	r3, r3
 8007838:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800783c:	b29a      	uxth	r2, r3
 800783e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007842:	801a      	strh	r2, [r3, #0]
 8007844:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007848:	881b      	ldrh	r3, [r3, #0]
 800784a:	b29b      	uxth	r3, r3
 800784c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007850:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007854:	b29a      	uxth	r2, r3
 8007856:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800785a:	801a      	strh	r2, [r3, #0]
 800785c:	e045      	b.n	80078ea <USB_EPStartXfer+0x15ec>
 800785e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007862:	085b      	lsrs	r3, r3, #1
 8007864:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007868:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800786c:	f003 0301 	and.w	r3, r3, #1
 8007870:	2b00      	cmp	r3, #0
 8007872:	d004      	beq.n	800787e <USB_EPStartXfer+0x1580>
 8007874:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007878:	3301      	adds	r3, #1
 800787a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800787e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007882:	b29b      	uxth	r3, r3
 8007884:	029b      	lsls	r3, r3, #10
 8007886:	b29a      	uxth	r2, r3
 8007888:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800788c:	801a      	strh	r2, [r3, #0]
 800788e:	e02c      	b.n	80078ea <USB_EPStartXfer+0x15ec>
 8007890:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007894:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	785b      	ldrb	r3, [r3, #1]
 800789c:	2b01      	cmp	r3, #1
 800789e:	d124      	bne.n	80078ea <USB_EPStartXfer+0x15ec>
 80078a0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80078a4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80078ae:	b29b      	uxth	r3, r3
 80078b0:	461a      	mov	r2, r3
 80078b2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80078b6:	4413      	add	r3, r2
 80078b8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80078bc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80078c0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	781b      	ldrb	r3, [r3, #0]
 80078c8:	00da      	lsls	r2, r3, #3
 80078ca:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80078ce:	4413      	add	r3, r2
 80078d0:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80078d4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80078d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80078dc:	b29a      	uxth	r2, r3
 80078de:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80078e2:	801a      	strh	r2, [r3, #0]
 80078e4:	e001      	b.n	80078ea <USB_EPStartXfer+0x15ec>
      }
      else
      {
        return HAL_ERROR;
 80078e6:	2301      	movs	r3, #1
 80078e8:	e03a      	b.n	8007960 <USB_EPStartXfer+0x1662>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80078ea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80078ee:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80078f2:	681a      	ldr	r2, [r3, #0]
 80078f4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80078f8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	781b      	ldrb	r3, [r3, #0]
 8007900:	009b      	lsls	r3, r3, #2
 8007902:	4413      	add	r3, r2
 8007904:	881b      	ldrh	r3, [r3, #0]
 8007906:	b29b      	uxth	r3, r3
 8007908:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800790c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007910:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8007914:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8007918:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800791c:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8007920:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8007924:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8007928:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800792c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007930:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007934:	681a      	ldr	r2, [r3, #0]
 8007936:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800793a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	781b      	ldrb	r3, [r3, #0]
 8007942:	009b      	lsls	r3, r3, #2
 8007944:	441a      	add	r2, r3
 8007946:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800794a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800794e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007952:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007956:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800795a:	b29b      	uxth	r3, r3
 800795c:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800795e:	2300      	movs	r3, #0
}
 8007960:	4618      	mov	r0, r3
 8007962:	f507 7784 	add.w	r7, r7, #264	; 0x108
 8007966:	46bd      	mov	sp, r7
 8007968:	bd80      	pop	{r7, pc}

0800796a <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800796a:	b480      	push	{r7}
 800796c:	b085      	sub	sp, #20
 800796e:	af00      	add	r7, sp, #0
 8007970:	6078      	str	r0, [r7, #4]
 8007972:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8007974:	683b      	ldr	r3, [r7, #0]
 8007976:	785b      	ldrb	r3, [r3, #1]
 8007978:	2b00      	cmp	r3, #0
 800797a:	d020      	beq.n	80079be <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800797c:	687a      	ldr	r2, [r7, #4]
 800797e:	683b      	ldr	r3, [r7, #0]
 8007980:	781b      	ldrb	r3, [r3, #0]
 8007982:	009b      	lsls	r3, r3, #2
 8007984:	4413      	add	r3, r2
 8007986:	881b      	ldrh	r3, [r3, #0]
 8007988:	b29b      	uxth	r3, r3
 800798a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800798e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007992:	81bb      	strh	r3, [r7, #12]
 8007994:	89bb      	ldrh	r3, [r7, #12]
 8007996:	f083 0310 	eor.w	r3, r3, #16
 800799a:	81bb      	strh	r3, [r7, #12]
 800799c:	687a      	ldr	r2, [r7, #4]
 800799e:	683b      	ldr	r3, [r7, #0]
 80079a0:	781b      	ldrb	r3, [r3, #0]
 80079a2:	009b      	lsls	r3, r3, #2
 80079a4:	441a      	add	r2, r3
 80079a6:	89bb      	ldrh	r3, [r7, #12]
 80079a8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80079ac:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80079b0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80079b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80079b8:	b29b      	uxth	r3, r3
 80079ba:	8013      	strh	r3, [r2, #0]
 80079bc:	e01f      	b.n	80079fe <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 80079be:	687a      	ldr	r2, [r7, #4]
 80079c0:	683b      	ldr	r3, [r7, #0]
 80079c2:	781b      	ldrb	r3, [r3, #0]
 80079c4:	009b      	lsls	r3, r3, #2
 80079c6:	4413      	add	r3, r2
 80079c8:	881b      	ldrh	r3, [r3, #0]
 80079ca:	b29b      	uxth	r3, r3
 80079cc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80079d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80079d4:	81fb      	strh	r3, [r7, #14]
 80079d6:	89fb      	ldrh	r3, [r7, #14]
 80079d8:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80079dc:	81fb      	strh	r3, [r7, #14]
 80079de:	687a      	ldr	r2, [r7, #4]
 80079e0:	683b      	ldr	r3, [r7, #0]
 80079e2:	781b      	ldrb	r3, [r3, #0]
 80079e4:	009b      	lsls	r3, r3, #2
 80079e6:	441a      	add	r2, r3
 80079e8:	89fb      	ldrh	r3, [r7, #14]
 80079ea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80079ee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80079f2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80079f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80079fa:	b29b      	uxth	r3, r3
 80079fc:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80079fe:	2300      	movs	r3, #0
}
 8007a00:	4618      	mov	r0, r3
 8007a02:	3714      	adds	r7, #20
 8007a04:	46bd      	mov	sp, r7
 8007a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a0a:	4770      	bx	lr

08007a0c <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007a0c:	b480      	push	{r7}
 8007a0e:	b087      	sub	sp, #28
 8007a10:	af00      	add	r7, sp, #0
 8007a12:	6078      	str	r0, [r7, #4]
 8007a14:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8007a16:	683b      	ldr	r3, [r7, #0]
 8007a18:	7b1b      	ldrb	r3, [r3, #12]
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	f040 809d 	bne.w	8007b5a <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8007a20:	683b      	ldr	r3, [r7, #0]
 8007a22:	785b      	ldrb	r3, [r3, #1]
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	d04c      	beq.n	8007ac2 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007a28:	687a      	ldr	r2, [r7, #4]
 8007a2a:	683b      	ldr	r3, [r7, #0]
 8007a2c:	781b      	ldrb	r3, [r3, #0]
 8007a2e:	009b      	lsls	r3, r3, #2
 8007a30:	4413      	add	r3, r2
 8007a32:	881b      	ldrh	r3, [r3, #0]
 8007a34:	823b      	strh	r3, [r7, #16]
 8007a36:	8a3b      	ldrh	r3, [r7, #16]
 8007a38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	d01b      	beq.n	8007a78 <USB_EPClearStall+0x6c>
 8007a40:	687a      	ldr	r2, [r7, #4]
 8007a42:	683b      	ldr	r3, [r7, #0]
 8007a44:	781b      	ldrb	r3, [r3, #0]
 8007a46:	009b      	lsls	r3, r3, #2
 8007a48:	4413      	add	r3, r2
 8007a4a:	881b      	ldrh	r3, [r3, #0]
 8007a4c:	b29b      	uxth	r3, r3
 8007a4e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007a52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007a56:	81fb      	strh	r3, [r7, #14]
 8007a58:	687a      	ldr	r2, [r7, #4]
 8007a5a:	683b      	ldr	r3, [r7, #0]
 8007a5c:	781b      	ldrb	r3, [r3, #0]
 8007a5e:	009b      	lsls	r3, r3, #2
 8007a60:	441a      	add	r2, r3
 8007a62:	89fb      	ldrh	r3, [r7, #14]
 8007a64:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007a68:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007a6c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007a70:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007a74:	b29b      	uxth	r3, r3
 8007a76:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007a78:	683b      	ldr	r3, [r7, #0]
 8007a7a:	78db      	ldrb	r3, [r3, #3]
 8007a7c:	2b01      	cmp	r3, #1
 8007a7e:	d06c      	beq.n	8007b5a <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8007a80:	687a      	ldr	r2, [r7, #4]
 8007a82:	683b      	ldr	r3, [r7, #0]
 8007a84:	781b      	ldrb	r3, [r3, #0]
 8007a86:	009b      	lsls	r3, r3, #2
 8007a88:	4413      	add	r3, r2
 8007a8a:	881b      	ldrh	r3, [r3, #0]
 8007a8c:	b29b      	uxth	r3, r3
 8007a8e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007a92:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007a96:	81bb      	strh	r3, [r7, #12]
 8007a98:	89bb      	ldrh	r3, [r7, #12]
 8007a9a:	f083 0320 	eor.w	r3, r3, #32
 8007a9e:	81bb      	strh	r3, [r7, #12]
 8007aa0:	687a      	ldr	r2, [r7, #4]
 8007aa2:	683b      	ldr	r3, [r7, #0]
 8007aa4:	781b      	ldrb	r3, [r3, #0]
 8007aa6:	009b      	lsls	r3, r3, #2
 8007aa8:	441a      	add	r2, r3
 8007aaa:	89bb      	ldrh	r3, [r7, #12]
 8007aac:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007ab0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007ab4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007ab8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007abc:	b29b      	uxth	r3, r3
 8007abe:	8013      	strh	r3, [r2, #0]
 8007ac0:	e04b      	b.n	8007b5a <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007ac2:	687a      	ldr	r2, [r7, #4]
 8007ac4:	683b      	ldr	r3, [r7, #0]
 8007ac6:	781b      	ldrb	r3, [r3, #0]
 8007ac8:	009b      	lsls	r3, r3, #2
 8007aca:	4413      	add	r3, r2
 8007acc:	881b      	ldrh	r3, [r3, #0]
 8007ace:	82fb      	strh	r3, [r7, #22]
 8007ad0:	8afb      	ldrh	r3, [r7, #22]
 8007ad2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d01b      	beq.n	8007b12 <USB_EPClearStall+0x106>
 8007ada:	687a      	ldr	r2, [r7, #4]
 8007adc:	683b      	ldr	r3, [r7, #0]
 8007ade:	781b      	ldrb	r3, [r3, #0]
 8007ae0:	009b      	lsls	r3, r3, #2
 8007ae2:	4413      	add	r3, r2
 8007ae4:	881b      	ldrh	r3, [r3, #0]
 8007ae6:	b29b      	uxth	r3, r3
 8007ae8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007aec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007af0:	82bb      	strh	r3, [r7, #20]
 8007af2:	687a      	ldr	r2, [r7, #4]
 8007af4:	683b      	ldr	r3, [r7, #0]
 8007af6:	781b      	ldrb	r3, [r3, #0]
 8007af8:	009b      	lsls	r3, r3, #2
 8007afa:	441a      	add	r2, r3
 8007afc:	8abb      	ldrh	r3, [r7, #20]
 8007afe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007b02:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007b06:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007b0a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007b0e:	b29b      	uxth	r3, r3
 8007b10:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007b12:	687a      	ldr	r2, [r7, #4]
 8007b14:	683b      	ldr	r3, [r7, #0]
 8007b16:	781b      	ldrb	r3, [r3, #0]
 8007b18:	009b      	lsls	r3, r3, #2
 8007b1a:	4413      	add	r3, r2
 8007b1c:	881b      	ldrh	r3, [r3, #0]
 8007b1e:	b29b      	uxth	r3, r3
 8007b20:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007b24:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007b28:	827b      	strh	r3, [r7, #18]
 8007b2a:	8a7b      	ldrh	r3, [r7, #18]
 8007b2c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8007b30:	827b      	strh	r3, [r7, #18]
 8007b32:	8a7b      	ldrh	r3, [r7, #18]
 8007b34:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8007b38:	827b      	strh	r3, [r7, #18]
 8007b3a:	687a      	ldr	r2, [r7, #4]
 8007b3c:	683b      	ldr	r3, [r7, #0]
 8007b3e:	781b      	ldrb	r3, [r3, #0]
 8007b40:	009b      	lsls	r3, r3, #2
 8007b42:	441a      	add	r2, r3
 8007b44:	8a7b      	ldrh	r3, [r7, #18]
 8007b46:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007b4a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007b4e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007b52:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007b56:	b29b      	uxth	r3, r3
 8007b58:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8007b5a:	2300      	movs	r3, #0
}
 8007b5c:	4618      	mov	r0, r3
 8007b5e:	371c      	adds	r7, #28
 8007b60:	46bd      	mov	sp, r7
 8007b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b66:	4770      	bx	lr

08007b68 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8007b68:	b480      	push	{r7}
 8007b6a:	b083      	sub	sp, #12
 8007b6c:	af00      	add	r7, sp, #0
 8007b6e:	6078      	str	r0, [r7, #4]
 8007b70:	460b      	mov	r3, r1
 8007b72:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8007b74:	78fb      	ldrb	r3, [r7, #3]
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	d103      	bne.n	8007b82 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	2280      	movs	r2, #128	; 0x80
 8007b7e:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8007b82:	2300      	movs	r3, #0
}
 8007b84:	4618      	mov	r0, r3
 8007b86:	370c      	adds	r7, #12
 8007b88:	46bd      	mov	sp, r7
 8007b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b8e:	4770      	bx	lr

08007b90 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8007b90:	b480      	push	{r7}
 8007b92:	b083      	sub	sp, #12
 8007b94:	af00      	add	r7, sp, #0
 8007b96:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8007b9e:	b29b      	uxth	r3, r3
 8007ba0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007ba4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007ba8:	b29a      	uxth	r2, r3
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 8007bb0:	2300      	movs	r3, #0
}
 8007bb2:	4618      	mov	r0, r3
 8007bb4:	370c      	adds	r7, #12
 8007bb6:	46bd      	mov	sp, r7
 8007bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bbc:	4770      	bx	lr

08007bbe <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8007bbe:	b480      	push	{r7}
 8007bc0:	b085      	sub	sp, #20
 8007bc2:	af00      	add	r7, sp, #0
 8007bc4:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8007bcc:	b29b      	uxth	r3, r3
 8007bce:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8007bd0:	68fb      	ldr	r3, [r7, #12]
}
 8007bd2:	4618      	mov	r0, r3
 8007bd4:	3714      	adds	r7, #20
 8007bd6:	46bd      	mov	sp, r7
 8007bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bdc:	4770      	bx	lr

08007bde <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8007bde:	b480      	push	{r7}
 8007be0:	b08d      	sub	sp, #52	; 0x34
 8007be2:	af00      	add	r7, sp, #0
 8007be4:	60f8      	str	r0, [r7, #12]
 8007be6:	60b9      	str	r1, [r7, #8]
 8007be8:	4611      	mov	r1, r2
 8007bea:	461a      	mov	r2, r3
 8007bec:	460b      	mov	r3, r1
 8007bee:	80fb      	strh	r3, [r7, #6]
 8007bf0:	4613      	mov	r3, r2
 8007bf2:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8007bf4:	88bb      	ldrh	r3, [r7, #4]
 8007bf6:	3301      	adds	r3, #1
 8007bf8:	085b      	lsrs	r3, r3, #1
 8007bfa:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t temp1;
  uint32_t temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8007c00:	68bb      	ldr	r3, [r7, #8]
 8007c02:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007c04:	88fa      	ldrh	r2, [r7, #6]
 8007c06:	69fb      	ldr	r3, [r7, #28]
 8007c08:	4413      	add	r3, r2
 8007c0a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007c0e:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8007c10:	6a3b      	ldr	r3, [r7, #32]
 8007c12:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007c14:	e01b      	b.n	8007c4e <USB_WritePMA+0x70>
  {
    temp1 = *pBuf;
 8007c16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c18:	781b      	ldrb	r3, [r3, #0]
 8007c1a:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8007c1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c1e:	3301      	adds	r3, #1
 8007c20:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8007c22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c24:	781b      	ldrb	r3, [r3, #0]
 8007c26:	b29b      	uxth	r3, r3
 8007c28:	021b      	lsls	r3, r3, #8
 8007c2a:	b29b      	uxth	r3, r3
 8007c2c:	461a      	mov	r2, r3
 8007c2e:	69bb      	ldr	r3, [r7, #24]
 8007c30:	4313      	orrs	r3, r2
 8007c32:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8007c34:	697b      	ldr	r3, [r7, #20]
 8007c36:	b29a      	uxth	r2, r3
 8007c38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c3a:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8007c3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c3e:	3302      	adds	r3, #2
 8007c40:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 8007c42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c44:	3301      	adds	r3, #1
 8007c46:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8007c48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c4a:	3b01      	subs	r3, #1
 8007c4c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007c4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	d1e0      	bne.n	8007c16 <USB_WritePMA+0x38>
  }
}
 8007c54:	bf00      	nop
 8007c56:	bf00      	nop
 8007c58:	3734      	adds	r7, #52	; 0x34
 8007c5a:	46bd      	mov	sp, r7
 8007c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c60:	4770      	bx	lr

08007c62 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8007c62:	b480      	push	{r7}
 8007c64:	b08b      	sub	sp, #44	; 0x2c
 8007c66:	af00      	add	r7, sp, #0
 8007c68:	60f8      	str	r0, [r7, #12]
 8007c6a:	60b9      	str	r1, [r7, #8]
 8007c6c:	4611      	mov	r1, r2
 8007c6e:	461a      	mov	r2, r3
 8007c70:	460b      	mov	r3, r1
 8007c72:	80fb      	strh	r3, [r7, #6]
 8007c74:	4613      	mov	r3, r2
 8007c76:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8007c78:	88bb      	ldrh	r3, [r7, #4]
 8007c7a:	085b      	lsrs	r3, r3, #1
 8007c7c:	b29b      	uxth	r3, r3
 8007c7e:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	617b      	str	r3, [r7, #20]
  uint32_t i;
  uint32_t temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8007c84:	68bb      	ldr	r3, [r7, #8]
 8007c86:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007c88:	88fa      	ldrh	r2, [r7, #6]
 8007c8a:	697b      	ldr	r3, [r7, #20]
 8007c8c:	4413      	add	r3, r2
 8007c8e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007c92:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8007c94:	69bb      	ldr	r3, [r7, #24]
 8007c96:	627b      	str	r3, [r7, #36]	; 0x24
 8007c98:	e018      	b.n	8007ccc <USB_ReadPMA+0x6a>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8007c9a:	6a3b      	ldr	r3, [r7, #32]
 8007c9c:	881b      	ldrh	r3, [r3, #0]
 8007c9e:	b29b      	uxth	r3, r3
 8007ca0:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8007ca2:	6a3b      	ldr	r3, [r7, #32]
 8007ca4:	3302      	adds	r3, #2
 8007ca6:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8007ca8:	693b      	ldr	r3, [r7, #16]
 8007caa:	b2da      	uxtb	r2, r3
 8007cac:	69fb      	ldr	r3, [r7, #28]
 8007cae:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8007cb0:	69fb      	ldr	r3, [r7, #28]
 8007cb2:	3301      	adds	r3, #1
 8007cb4:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8007cb6:	693b      	ldr	r3, [r7, #16]
 8007cb8:	0a1b      	lsrs	r3, r3, #8
 8007cba:	b2da      	uxtb	r2, r3
 8007cbc:	69fb      	ldr	r3, [r7, #28]
 8007cbe:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8007cc0:	69fb      	ldr	r3, [r7, #28]
 8007cc2:	3301      	adds	r3, #1
 8007cc4:	61fb      	str	r3, [r7, #28]
  for (i = n; i != 0U; i--)
 8007cc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cc8:	3b01      	subs	r3, #1
 8007cca:	627b      	str	r3, [r7, #36]	; 0x24
 8007ccc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d1e3      	bne.n	8007c9a <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8007cd2:	88bb      	ldrh	r3, [r7, #4]
 8007cd4:	f003 0301 	and.w	r3, r3, #1
 8007cd8:	b29b      	uxth	r3, r3
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	d007      	beq.n	8007cee <USB_ReadPMA+0x8c>
  {
    temp = *pdwVal;
 8007cde:	6a3b      	ldr	r3, [r7, #32]
 8007ce0:	881b      	ldrh	r3, [r3, #0]
 8007ce2:	b29b      	uxth	r3, r3
 8007ce4:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8007ce6:	693b      	ldr	r3, [r7, #16]
 8007ce8:	b2da      	uxtb	r2, r3
 8007cea:	69fb      	ldr	r3, [r7, #28]
 8007cec:	701a      	strb	r2, [r3, #0]
  }
}
 8007cee:	bf00      	nop
 8007cf0:	372c      	adds	r7, #44	; 0x2c
 8007cf2:	46bd      	mov	sp, r7
 8007cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cf8:	4770      	bx	lr

08007cfa <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007cfa:	b580      	push	{r7, lr}
 8007cfc:	b084      	sub	sp, #16
 8007cfe:	af00      	add	r7, sp, #0
 8007d00:	6078      	str	r0, [r7, #4]
 8007d02:	460b      	mov	r3, r1
 8007d04:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8007d06:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8007d0a:	f002 f91b 	bl	8009f44 <USBD_static_malloc>
 8007d0e:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	d105      	bne.n	8007d22 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	2200      	movs	r2, #0
 8007d1a:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8007d1e:	2302      	movs	r3, #2
 8007d20:	e066      	b.n	8007df0 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	68fa      	ldr	r2, [r7, #12]
 8007d26:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	7c1b      	ldrb	r3, [r3, #16]
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	d119      	bne.n	8007d66 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8007d32:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007d36:	2202      	movs	r2, #2
 8007d38:	2181      	movs	r1, #129	; 0x81
 8007d3a:	6878      	ldr	r0, [r7, #4]
 8007d3c:	f001 ffa7 	bl	8009c8e <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	2201      	movs	r2, #1
 8007d44:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8007d46:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007d4a:	2202      	movs	r2, #2
 8007d4c:	2101      	movs	r1, #1
 8007d4e:	6878      	ldr	r0, [r7, #4]
 8007d50:	f001 ff9d 	bl	8009c8e <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	2201      	movs	r2, #1
 8007d58:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	2210      	movs	r2, #16
 8007d60:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8007d64:	e016      	b.n	8007d94 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8007d66:	2340      	movs	r3, #64	; 0x40
 8007d68:	2202      	movs	r2, #2
 8007d6a:	2181      	movs	r1, #129	; 0x81
 8007d6c:	6878      	ldr	r0, [r7, #4]
 8007d6e:	f001 ff8e 	bl	8009c8e <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	2201      	movs	r2, #1
 8007d76:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8007d78:	2340      	movs	r3, #64	; 0x40
 8007d7a:	2202      	movs	r2, #2
 8007d7c:	2101      	movs	r1, #1
 8007d7e:	6878      	ldr	r0, [r7, #4]
 8007d80:	f001 ff85 	bl	8009c8e <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	2201      	movs	r2, #1
 8007d88:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	2210      	movs	r2, #16
 8007d90:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8007d94:	2308      	movs	r3, #8
 8007d96:	2203      	movs	r2, #3
 8007d98:	2182      	movs	r1, #130	; 0x82
 8007d9a:	6878      	ldr	r0, [r7, #4]
 8007d9c:	f001 ff77 	bl	8009c8e <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	2201      	movs	r2, #1
 8007da4:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8007db2:	68fb      	ldr	r3, [r7, #12]
 8007db4:	2200      	movs	r2, #0
 8007db6:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8007dba:	68fb      	ldr	r3, [r7, #12]
 8007dbc:	2200      	movs	r2, #0
 8007dbe:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	7c1b      	ldrb	r3, [r3, #16]
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d109      	bne.n	8007dde <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007dca:	68fb      	ldr	r3, [r7, #12]
 8007dcc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007dd0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007dd4:	2101      	movs	r1, #1
 8007dd6:	6878      	ldr	r0, [r7, #4]
 8007dd8:	f002 f849 	bl	8009e6e <USBD_LL_PrepareReceive>
 8007ddc:	e007      	b.n	8007dee <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007dde:	68fb      	ldr	r3, [r7, #12]
 8007de0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007de4:	2340      	movs	r3, #64	; 0x40
 8007de6:	2101      	movs	r1, #1
 8007de8:	6878      	ldr	r0, [r7, #4]
 8007dea:	f002 f840 	bl	8009e6e <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8007dee:	2300      	movs	r3, #0
}
 8007df0:	4618      	mov	r0, r3
 8007df2:	3710      	adds	r7, #16
 8007df4:	46bd      	mov	sp, r7
 8007df6:	bd80      	pop	{r7, pc}

08007df8 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007df8:	b580      	push	{r7, lr}
 8007dfa:	b082      	sub	sp, #8
 8007dfc:	af00      	add	r7, sp, #0
 8007dfe:	6078      	str	r0, [r7, #4]
 8007e00:	460b      	mov	r3, r1
 8007e02:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8007e04:	2181      	movs	r1, #129	; 0x81
 8007e06:	6878      	ldr	r0, [r7, #4]
 8007e08:	f001 ff67 	bl	8009cda <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	2200      	movs	r2, #0
 8007e10:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8007e12:	2101      	movs	r1, #1
 8007e14:	6878      	ldr	r0, [r7, #4]
 8007e16:	f001 ff60 	bl	8009cda <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	2200      	movs	r2, #0
 8007e1e:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8007e22:	2182      	movs	r1, #130	; 0x82
 8007e24:	6878      	ldr	r0, [r7, #4]
 8007e26:	f001 ff58 	bl	8009cda <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	2200      	movs	r2, #0
 8007e2e:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	2200      	movs	r2, #0
 8007e36:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	d00e      	beq.n	8007e62 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007e4a:	685b      	ldr	r3, [r3, #4]
 8007e4c:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007e54:	4618      	mov	r0, r3
 8007e56:	f002 f883 	bl	8009f60 <USBD_static_free>
    pdev->pClassData = NULL;
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	2200      	movs	r2, #0
 8007e5e:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8007e62:	2300      	movs	r3, #0
}
 8007e64:	4618      	mov	r0, r3
 8007e66:	3708      	adds	r7, #8
 8007e68:	46bd      	mov	sp, r7
 8007e6a:	bd80      	pop	{r7, pc}

08007e6c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8007e6c:	b580      	push	{r7, lr}
 8007e6e:	b086      	sub	sp, #24
 8007e70:	af00      	add	r7, sp, #0
 8007e72:	6078      	str	r0, [r7, #4]
 8007e74:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007e7c:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8007e7e:	2300      	movs	r3, #0
 8007e80:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8007e82:	2300      	movs	r3, #0
 8007e84:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8007e86:	2300      	movs	r3, #0
 8007e88:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8007e8a:	693b      	ldr	r3, [r7, #16]
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	d101      	bne.n	8007e94 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 8007e90:	2303      	movs	r3, #3
 8007e92:	e0af      	b.n	8007ff4 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007e94:	683b      	ldr	r3, [r7, #0]
 8007e96:	781b      	ldrb	r3, [r3, #0]
 8007e98:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	d03f      	beq.n	8007f20 <USBD_CDC_Setup+0xb4>
 8007ea0:	2b20      	cmp	r3, #32
 8007ea2:	f040 809f 	bne.w	8007fe4 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8007ea6:	683b      	ldr	r3, [r7, #0]
 8007ea8:	88db      	ldrh	r3, [r3, #6]
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	d02e      	beq.n	8007f0c <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8007eae:	683b      	ldr	r3, [r7, #0]
 8007eb0:	781b      	ldrb	r3, [r3, #0]
 8007eb2:	b25b      	sxtb	r3, r3
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	da16      	bge.n	8007ee6 <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007ebe:	689b      	ldr	r3, [r3, #8]
 8007ec0:	683a      	ldr	r2, [r7, #0]
 8007ec2:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 8007ec4:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007ec6:	683a      	ldr	r2, [r7, #0]
 8007ec8:	88d2      	ldrh	r2, [r2, #6]
 8007eca:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8007ecc:	683b      	ldr	r3, [r7, #0]
 8007ece:	88db      	ldrh	r3, [r3, #6]
 8007ed0:	2b07      	cmp	r3, #7
 8007ed2:	bf28      	it	cs
 8007ed4:	2307      	movcs	r3, #7
 8007ed6:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8007ed8:	693b      	ldr	r3, [r7, #16]
 8007eda:	89fa      	ldrh	r2, [r7, #14]
 8007edc:	4619      	mov	r1, r3
 8007ede:	6878      	ldr	r0, [r7, #4]
 8007ee0:	f001 facf 	bl	8009482 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 8007ee4:	e085      	b.n	8007ff2 <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 8007ee6:	683b      	ldr	r3, [r7, #0]
 8007ee8:	785a      	ldrb	r2, [r3, #1]
 8007eea:	693b      	ldr	r3, [r7, #16]
 8007eec:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8007ef0:	683b      	ldr	r3, [r7, #0]
 8007ef2:	88db      	ldrh	r3, [r3, #6]
 8007ef4:	b2da      	uxtb	r2, r3
 8007ef6:	693b      	ldr	r3, [r7, #16]
 8007ef8:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8007efc:	6939      	ldr	r1, [r7, #16]
 8007efe:	683b      	ldr	r3, [r7, #0]
 8007f00:	88db      	ldrh	r3, [r3, #6]
 8007f02:	461a      	mov	r2, r3
 8007f04:	6878      	ldr	r0, [r7, #4]
 8007f06:	f001 fae8 	bl	80094da <USBD_CtlPrepareRx>
      break;
 8007f0a:	e072      	b.n	8007ff2 <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007f12:	689b      	ldr	r3, [r3, #8]
 8007f14:	683a      	ldr	r2, [r7, #0]
 8007f16:	7850      	ldrb	r0, [r2, #1]
 8007f18:	2200      	movs	r2, #0
 8007f1a:	6839      	ldr	r1, [r7, #0]
 8007f1c:	4798      	blx	r3
      break;
 8007f1e:	e068      	b.n	8007ff2 <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007f20:	683b      	ldr	r3, [r7, #0]
 8007f22:	785b      	ldrb	r3, [r3, #1]
 8007f24:	2b0b      	cmp	r3, #11
 8007f26:	d852      	bhi.n	8007fce <USBD_CDC_Setup+0x162>
 8007f28:	a201      	add	r2, pc, #4	; (adr r2, 8007f30 <USBD_CDC_Setup+0xc4>)
 8007f2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f2e:	bf00      	nop
 8007f30:	08007f61 	.word	0x08007f61
 8007f34:	08007fdd 	.word	0x08007fdd
 8007f38:	08007fcf 	.word	0x08007fcf
 8007f3c:	08007fcf 	.word	0x08007fcf
 8007f40:	08007fcf 	.word	0x08007fcf
 8007f44:	08007fcf 	.word	0x08007fcf
 8007f48:	08007fcf 	.word	0x08007fcf
 8007f4c:	08007fcf 	.word	0x08007fcf
 8007f50:	08007fcf 	.word	0x08007fcf
 8007f54:	08007fcf 	.word	0x08007fcf
 8007f58:	08007f8b 	.word	0x08007f8b
 8007f5c:	08007fb5 	.word	0x08007fb5
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007f66:	b2db      	uxtb	r3, r3
 8007f68:	2b03      	cmp	r3, #3
 8007f6a:	d107      	bne.n	8007f7c <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8007f6c:	f107 030a 	add.w	r3, r7, #10
 8007f70:	2202      	movs	r2, #2
 8007f72:	4619      	mov	r1, r3
 8007f74:	6878      	ldr	r0, [r7, #4]
 8007f76:	f001 fa84 	bl	8009482 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007f7a:	e032      	b.n	8007fe2 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8007f7c:	6839      	ldr	r1, [r7, #0]
 8007f7e:	6878      	ldr	r0, [r7, #4]
 8007f80:	f001 fa0e 	bl	80093a0 <USBD_CtlError>
            ret = USBD_FAIL;
 8007f84:	2303      	movs	r3, #3
 8007f86:	75fb      	strb	r3, [r7, #23]
          break;
 8007f88:	e02b      	b.n	8007fe2 <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007f90:	b2db      	uxtb	r3, r3
 8007f92:	2b03      	cmp	r3, #3
 8007f94:	d107      	bne.n	8007fa6 <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8007f96:	f107 030d 	add.w	r3, r7, #13
 8007f9a:	2201      	movs	r2, #1
 8007f9c:	4619      	mov	r1, r3
 8007f9e:	6878      	ldr	r0, [r7, #4]
 8007fa0:	f001 fa6f 	bl	8009482 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007fa4:	e01d      	b.n	8007fe2 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8007fa6:	6839      	ldr	r1, [r7, #0]
 8007fa8:	6878      	ldr	r0, [r7, #4]
 8007faa:	f001 f9f9 	bl	80093a0 <USBD_CtlError>
            ret = USBD_FAIL;
 8007fae:	2303      	movs	r3, #3
 8007fb0:	75fb      	strb	r3, [r7, #23]
          break;
 8007fb2:	e016      	b.n	8007fe2 <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007fba:	b2db      	uxtb	r3, r3
 8007fbc:	2b03      	cmp	r3, #3
 8007fbe:	d00f      	beq.n	8007fe0 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 8007fc0:	6839      	ldr	r1, [r7, #0]
 8007fc2:	6878      	ldr	r0, [r7, #4]
 8007fc4:	f001 f9ec 	bl	80093a0 <USBD_CtlError>
            ret = USBD_FAIL;
 8007fc8:	2303      	movs	r3, #3
 8007fca:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8007fcc:	e008      	b.n	8007fe0 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8007fce:	6839      	ldr	r1, [r7, #0]
 8007fd0:	6878      	ldr	r0, [r7, #4]
 8007fd2:	f001 f9e5 	bl	80093a0 <USBD_CtlError>
          ret = USBD_FAIL;
 8007fd6:	2303      	movs	r3, #3
 8007fd8:	75fb      	strb	r3, [r7, #23]
          break;
 8007fda:	e002      	b.n	8007fe2 <USBD_CDC_Setup+0x176>
          break;
 8007fdc:	bf00      	nop
 8007fde:	e008      	b.n	8007ff2 <USBD_CDC_Setup+0x186>
          break;
 8007fe0:	bf00      	nop
      }
      break;
 8007fe2:	e006      	b.n	8007ff2 <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 8007fe4:	6839      	ldr	r1, [r7, #0]
 8007fe6:	6878      	ldr	r0, [r7, #4]
 8007fe8:	f001 f9da 	bl	80093a0 <USBD_CtlError>
      ret = USBD_FAIL;
 8007fec:	2303      	movs	r3, #3
 8007fee:	75fb      	strb	r3, [r7, #23]
      break;
 8007ff0:	bf00      	nop
  }

  return (uint8_t)ret;
 8007ff2:	7dfb      	ldrb	r3, [r7, #23]
}
 8007ff4:	4618      	mov	r0, r3
 8007ff6:	3718      	adds	r7, #24
 8007ff8:	46bd      	mov	sp, r7
 8007ffa:	bd80      	pop	{r7, pc}

08007ffc <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007ffc:	b580      	push	{r7, lr}
 8007ffe:	b084      	sub	sp, #16
 8008000:	af00      	add	r7, sp, #0
 8008002:	6078      	str	r0, [r7, #4]
 8008004:	460b      	mov	r3, r1
 8008006:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800800e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008016:	2b00      	cmp	r3, #0
 8008018:	d101      	bne.n	800801e <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800801a:	2303      	movs	r3, #3
 800801c:	e04f      	b.n	80080be <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008024:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8008026:	78fa      	ldrb	r2, [r7, #3]
 8008028:	6879      	ldr	r1, [r7, #4]
 800802a:	4613      	mov	r3, r2
 800802c:	009b      	lsls	r3, r3, #2
 800802e:	4413      	add	r3, r2
 8008030:	009b      	lsls	r3, r3, #2
 8008032:	440b      	add	r3, r1
 8008034:	3318      	adds	r3, #24
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	2b00      	cmp	r3, #0
 800803a:	d029      	beq.n	8008090 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800803c:	78fa      	ldrb	r2, [r7, #3]
 800803e:	6879      	ldr	r1, [r7, #4]
 8008040:	4613      	mov	r3, r2
 8008042:	009b      	lsls	r3, r3, #2
 8008044:	4413      	add	r3, r2
 8008046:	009b      	lsls	r3, r3, #2
 8008048:	440b      	add	r3, r1
 800804a:	3318      	adds	r3, #24
 800804c:	681a      	ldr	r2, [r3, #0]
 800804e:	78f9      	ldrb	r1, [r7, #3]
 8008050:	68f8      	ldr	r0, [r7, #12]
 8008052:	460b      	mov	r3, r1
 8008054:	009b      	lsls	r3, r3, #2
 8008056:	440b      	add	r3, r1
 8008058:	00db      	lsls	r3, r3, #3
 800805a:	4403      	add	r3, r0
 800805c:	3338      	adds	r3, #56	; 0x38
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	fbb2 f1f3 	udiv	r1, r2, r3
 8008064:	fb01 f303 	mul.w	r3, r1, r3
 8008068:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800806a:	2b00      	cmp	r3, #0
 800806c:	d110      	bne.n	8008090 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800806e:	78fa      	ldrb	r2, [r7, #3]
 8008070:	6879      	ldr	r1, [r7, #4]
 8008072:	4613      	mov	r3, r2
 8008074:	009b      	lsls	r3, r3, #2
 8008076:	4413      	add	r3, r2
 8008078:	009b      	lsls	r3, r3, #2
 800807a:	440b      	add	r3, r1
 800807c:	3318      	adds	r3, #24
 800807e:	2200      	movs	r2, #0
 8008080:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8008082:	78f9      	ldrb	r1, [r7, #3]
 8008084:	2300      	movs	r3, #0
 8008086:	2200      	movs	r2, #0
 8008088:	6878      	ldr	r0, [r7, #4]
 800808a:	f001 fecf 	bl	8009e2c <USBD_LL_Transmit>
 800808e:	e015      	b.n	80080bc <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 8008090:	68bb      	ldr	r3, [r7, #8]
 8008092:	2200      	movs	r2, #0
 8008094:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800809e:	691b      	ldr	r3, [r3, #16]
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	d00b      	beq.n	80080bc <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80080aa:	691b      	ldr	r3, [r3, #16]
 80080ac:	68ba      	ldr	r2, [r7, #8]
 80080ae:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 80080b2:	68ba      	ldr	r2, [r7, #8]
 80080b4:	f502 7104 	add.w	r1, r2, #528	; 0x210
 80080b8:	78fa      	ldrb	r2, [r7, #3]
 80080ba:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 80080bc:	2300      	movs	r3, #0
}
 80080be:	4618      	mov	r0, r3
 80080c0:	3710      	adds	r7, #16
 80080c2:	46bd      	mov	sp, r7
 80080c4:	bd80      	pop	{r7, pc}

080080c6 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80080c6:	b580      	push	{r7, lr}
 80080c8:	b084      	sub	sp, #16
 80080ca:	af00      	add	r7, sp, #0
 80080cc:	6078      	str	r0, [r7, #4]
 80080ce:	460b      	mov	r3, r1
 80080d0:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80080d8:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	d101      	bne.n	80080e8 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80080e4:	2303      	movs	r3, #3
 80080e6:	e015      	b.n	8008114 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80080e8:	78fb      	ldrb	r3, [r7, #3]
 80080ea:	4619      	mov	r1, r3
 80080ec:	6878      	ldr	r0, [r7, #4]
 80080ee:	f001 fedf 	bl	8009eb0 <USBD_LL_GetRxDataSize>
 80080f2:	4602      	mov	r2, r0
 80080f4:	68fb      	ldr	r3, [r7, #12]
 80080f6:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008100:	68db      	ldr	r3, [r3, #12]
 8008102:	68fa      	ldr	r2, [r7, #12]
 8008104:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8008108:	68fa      	ldr	r2, [r7, #12]
 800810a:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800810e:	4611      	mov	r1, r2
 8008110:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8008112:	2300      	movs	r3, #0
}
 8008114:	4618      	mov	r0, r3
 8008116:	3710      	adds	r7, #16
 8008118:	46bd      	mov	sp, r7
 800811a:	bd80      	pop	{r7, pc}

0800811c <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800811c:	b580      	push	{r7, lr}
 800811e:	b084      	sub	sp, #16
 8008120:	af00      	add	r7, sp, #0
 8008122:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800812a:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800812c:	68fb      	ldr	r3, [r7, #12]
 800812e:	2b00      	cmp	r3, #0
 8008130:	d101      	bne.n	8008136 <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 8008132:	2303      	movs	r3, #3
 8008134:	e01b      	b.n	800816e <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800813c:	2b00      	cmp	r3, #0
 800813e:	d015      	beq.n	800816c <USBD_CDC_EP0_RxReady+0x50>
 8008140:	68fb      	ldr	r3, [r7, #12]
 8008142:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8008146:	2bff      	cmp	r3, #255	; 0xff
 8008148:	d010      	beq.n	800816c <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008150:	689b      	ldr	r3, [r3, #8]
 8008152:	68fa      	ldr	r2, [r7, #12]
 8008154:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 8008158:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800815a:	68fa      	ldr	r2, [r7, #12]
 800815c:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8008160:	b292      	uxth	r2, r2
 8008162:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8008164:	68fb      	ldr	r3, [r7, #12]
 8008166:	22ff      	movs	r2, #255	; 0xff
 8008168:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800816c:	2300      	movs	r3, #0
}
 800816e:	4618      	mov	r0, r3
 8008170:	3710      	adds	r7, #16
 8008172:	46bd      	mov	sp, r7
 8008174:	bd80      	pop	{r7, pc}
	...

08008178 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8008178:	b480      	push	{r7}
 800817a:	b083      	sub	sp, #12
 800817c:	af00      	add	r7, sp, #0
 800817e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	2243      	movs	r2, #67	; 0x43
 8008184:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 8008186:	4b03      	ldr	r3, [pc, #12]	; (8008194 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8008188:	4618      	mov	r0, r3
 800818a:	370c      	adds	r7, #12
 800818c:	46bd      	mov	sp, r7
 800818e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008192:	4770      	bx	lr
 8008194:	20000094 	.word	0x20000094

08008198 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8008198:	b480      	push	{r7}
 800819a:	b083      	sub	sp, #12
 800819c:	af00      	add	r7, sp, #0
 800819e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	2243      	movs	r2, #67	; 0x43
 80081a4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 80081a6:	4b03      	ldr	r3, [pc, #12]	; (80081b4 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 80081a8:	4618      	mov	r0, r3
 80081aa:	370c      	adds	r7, #12
 80081ac:	46bd      	mov	sp, r7
 80081ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081b2:	4770      	bx	lr
 80081b4:	20000050 	.word	0x20000050

080081b8 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80081b8:	b480      	push	{r7}
 80081ba:	b083      	sub	sp, #12
 80081bc:	af00      	add	r7, sp, #0
 80081be:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	2243      	movs	r2, #67	; 0x43
 80081c4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 80081c6:	4b03      	ldr	r3, [pc, #12]	; (80081d4 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 80081c8:	4618      	mov	r0, r3
 80081ca:	370c      	adds	r7, #12
 80081cc:	46bd      	mov	sp, r7
 80081ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081d2:	4770      	bx	lr
 80081d4:	200000d8 	.word	0x200000d8

080081d8 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80081d8:	b480      	push	{r7}
 80081da:	b083      	sub	sp, #12
 80081dc:	af00      	add	r7, sp, #0
 80081de:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	220a      	movs	r2, #10
 80081e4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 80081e6:	4b03      	ldr	r3, [pc, #12]	; (80081f4 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80081e8:	4618      	mov	r0, r3
 80081ea:	370c      	adds	r7, #12
 80081ec:	46bd      	mov	sp, r7
 80081ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081f2:	4770      	bx	lr
 80081f4:	2000000c 	.word	0x2000000c

080081f8 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80081f8:	b480      	push	{r7}
 80081fa:	b083      	sub	sp, #12
 80081fc:	af00      	add	r7, sp, #0
 80081fe:	6078      	str	r0, [r7, #4]
 8008200:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8008202:	683b      	ldr	r3, [r7, #0]
 8008204:	2b00      	cmp	r3, #0
 8008206:	d101      	bne.n	800820c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8008208:	2303      	movs	r3, #3
 800820a:	e004      	b.n	8008216 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	683a      	ldr	r2, [r7, #0]
 8008210:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8008214:	2300      	movs	r3, #0
}
 8008216:	4618      	mov	r0, r3
 8008218:	370c      	adds	r7, #12
 800821a:	46bd      	mov	sp, r7
 800821c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008220:	4770      	bx	lr

08008222 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8008222:	b480      	push	{r7}
 8008224:	b087      	sub	sp, #28
 8008226:	af00      	add	r7, sp, #0
 8008228:	60f8      	str	r0, [r7, #12]
 800822a:	60b9      	str	r1, [r7, #8]
 800822c:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800822e:	68fb      	ldr	r3, [r7, #12]
 8008230:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008234:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8008236:	697b      	ldr	r3, [r7, #20]
 8008238:	2b00      	cmp	r3, #0
 800823a:	d101      	bne.n	8008240 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800823c:	2303      	movs	r3, #3
 800823e:	e008      	b.n	8008252 <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 8008240:	697b      	ldr	r3, [r7, #20]
 8008242:	68ba      	ldr	r2, [r7, #8]
 8008244:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8008248:	697b      	ldr	r3, [r7, #20]
 800824a:	687a      	ldr	r2, [r7, #4]
 800824c:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8008250:	2300      	movs	r3, #0
}
 8008252:	4618      	mov	r0, r3
 8008254:	371c      	adds	r7, #28
 8008256:	46bd      	mov	sp, r7
 8008258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800825c:	4770      	bx	lr

0800825e <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800825e:	b480      	push	{r7}
 8008260:	b085      	sub	sp, #20
 8008262:	af00      	add	r7, sp, #0
 8008264:	6078      	str	r0, [r7, #4]
 8008266:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800826e:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8008270:	68fb      	ldr	r3, [r7, #12]
 8008272:	2b00      	cmp	r3, #0
 8008274:	d101      	bne.n	800827a <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 8008276:	2303      	movs	r3, #3
 8008278:	e004      	b.n	8008284 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 800827a:	68fb      	ldr	r3, [r7, #12]
 800827c:	683a      	ldr	r2, [r7, #0]
 800827e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8008282:	2300      	movs	r3, #0
}
 8008284:	4618      	mov	r0, r3
 8008286:	3714      	adds	r7, #20
 8008288:	46bd      	mov	sp, r7
 800828a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800828e:	4770      	bx	lr

08008290 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8008290:	b580      	push	{r7, lr}
 8008292:	b084      	sub	sp, #16
 8008294:	af00      	add	r7, sp, #0
 8008296:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800829e:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 80082a0:	2301      	movs	r3, #1
 80082a2:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	d101      	bne.n	80082b2 <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80082ae:	2303      	movs	r3, #3
 80082b0:	e01a      	b.n	80082e8 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 80082b2:	68bb      	ldr	r3, [r7, #8]
 80082b4:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	d114      	bne.n	80082e6 <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 80082bc:	68bb      	ldr	r3, [r7, #8]
 80082be:	2201      	movs	r2, #1
 80082c0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 80082c4:	68bb      	ldr	r3, [r7, #8]
 80082c6:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 80082ce:	68bb      	ldr	r3, [r7, #8]
 80082d0:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 80082d4:	68bb      	ldr	r3, [r7, #8]
 80082d6:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80082da:	2181      	movs	r1, #129	; 0x81
 80082dc:	6878      	ldr	r0, [r7, #4]
 80082de:	f001 fda5 	bl	8009e2c <USBD_LL_Transmit>

    ret = USBD_OK;
 80082e2:	2300      	movs	r3, #0
 80082e4:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 80082e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80082e8:	4618      	mov	r0, r3
 80082ea:	3710      	adds	r7, #16
 80082ec:	46bd      	mov	sp, r7
 80082ee:	bd80      	pop	{r7, pc}

080082f0 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80082f0:	b580      	push	{r7, lr}
 80082f2:	b084      	sub	sp, #16
 80082f4:	af00      	add	r7, sp, #0
 80082f6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80082fe:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008306:	2b00      	cmp	r3, #0
 8008308:	d101      	bne.n	800830e <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800830a:	2303      	movs	r3, #3
 800830c:	e016      	b.n	800833c <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	7c1b      	ldrb	r3, [r3, #16]
 8008312:	2b00      	cmp	r3, #0
 8008314:	d109      	bne.n	800832a <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008316:	68fb      	ldr	r3, [r7, #12]
 8008318:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800831c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008320:	2101      	movs	r1, #1
 8008322:	6878      	ldr	r0, [r7, #4]
 8008324:	f001 fda3 	bl	8009e6e <USBD_LL_PrepareReceive>
 8008328:	e007      	b.n	800833a <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800832a:	68fb      	ldr	r3, [r7, #12]
 800832c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008330:	2340      	movs	r3, #64	; 0x40
 8008332:	2101      	movs	r1, #1
 8008334:	6878      	ldr	r0, [r7, #4]
 8008336:	f001 fd9a 	bl	8009e6e <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800833a:	2300      	movs	r3, #0
}
 800833c:	4618      	mov	r0, r3
 800833e:	3710      	adds	r7, #16
 8008340:	46bd      	mov	sp, r7
 8008342:	bd80      	pop	{r7, pc}

08008344 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8008344:	b580      	push	{r7, lr}
 8008346:	b086      	sub	sp, #24
 8008348:	af00      	add	r7, sp, #0
 800834a:	60f8      	str	r0, [r7, #12]
 800834c:	60b9      	str	r1, [r7, #8]
 800834e:	4613      	mov	r3, r2
 8008350:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8008352:	68fb      	ldr	r3, [r7, #12]
 8008354:	2b00      	cmp	r3, #0
 8008356:	d101      	bne.n	800835c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8008358:	2303      	movs	r3, #3
 800835a:	e01f      	b.n	800839c <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 800835c:	68fb      	ldr	r3, [r7, #12]
 800835e:	2200      	movs	r2, #0
 8008360:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 8008364:	68fb      	ldr	r3, [r7, #12]
 8008366:	2200      	movs	r2, #0
 8008368:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	2200      	movs	r2, #0
 8008370:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8008374:	68bb      	ldr	r3, [r7, #8]
 8008376:	2b00      	cmp	r3, #0
 8008378:	d003      	beq.n	8008382 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800837a:	68fb      	ldr	r3, [r7, #12]
 800837c:	68ba      	ldr	r2, [r7, #8]
 800837e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008382:	68fb      	ldr	r3, [r7, #12]
 8008384:	2201      	movs	r2, #1
 8008386:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800838a:	68fb      	ldr	r3, [r7, #12]
 800838c:	79fa      	ldrb	r2, [r7, #7]
 800838e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8008390:	68f8      	ldr	r0, [r7, #12]
 8008392:	f001 fc01 	bl	8009b98 <USBD_LL_Init>
 8008396:	4603      	mov	r3, r0
 8008398:	75fb      	strb	r3, [r7, #23]

  return ret;
 800839a:	7dfb      	ldrb	r3, [r7, #23]
}
 800839c:	4618      	mov	r0, r3
 800839e:	3718      	adds	r7, #24
 80083a0:	46bd      	mov	sp, r7
 80083a2:	bd80      	pop	{r7, pc}

080083a4 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80083a4:	b580      	push	{r7, lr}
 80083a6:	b084      	sub	sp, #16
 80083a8:	af00      	add	r7, sp, #0
 80083aa:	6078      	str	r0, [r7, #4]
 80083ac:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80083ae:	2300      	movs	r3, #0
 80083b0:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80083b2:	683b      	ldr	r3, [r7, #0]
 80083b4:	2b00      	cmp	r3, #0
 80083b6:	d101      	bne.n	80083bc <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 80083b8:	2303      	movs	r3, #3
 80083ba:	e016      	b.n	80083ea <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	683a      	ldr	r2, [r7, #0]
 80083c0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80083ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	d00b      	beq.n	80083e8 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80083d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083d8:	f107 020e 	add.w	r2, r7, #14
 80083dc:	4610      	mov	r0, r2
 80083de:	4798      	blx	r3
 80083e0:	4602      	mov	r2, r0
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 80083e8:	2300      	movs	r3, #0
}
 80083ea:	4618      	mov	r0, r3
 80083ec:	3710      	adds	r7, #16
 80083ee:	46bd      	mov	sp, r7
 80083f0:	bd80      	pop	{r7, pc}

080083f2 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80083f2:	b580      	push	{r7, lr}
 80083f4:	b082      	sub	sp, #8
 80083f6:	af00      	add	r7, sp, #0
 80083f8:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80083fa:	6878      	ldr	r0, [r7, #4]
 80083fc:	f001 fc2c 	bl	8009c58 <USBD_LL_Start>
 8008400:	4603      	mov	r3, r0
}
 8008402:	4618      	mov	r0, r3
 8008404:	3708      	adds	r7, #8
 8008406:	46bd      	mov	sp, r7
 8008408:	bd80      	pop	{r7, pc}

0800840a <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800840a:	b480      	push	{r7}
 800840c:	b083      	sub	sp, #12
 800840e:	af00      	add	r7, sp, #0
 8008410:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008412:	2300      	movs	r3, #0
}
 8008414:	4618      	mov	r0, r3
 8008416:	370c      	adds	r7, #12
 8008418:	46bd      	mov	sp, r7
 800841a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800841e:	4770      	bx	lr

08008420 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008420:	b580      	push	{r7, lr}
 8008422:	b084      	sub	sp, #16
 8008424:	af00      	add	r7, sp, #0
 8008426:	6078      	str	r0, [r7, #4]
 8008428:	460b      	mov	r3, r1
 800842a:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800842c:	2303      	movs	r3, #3
 800842e:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008436:	2b00      	cmp	r3, #0
 8008438:	d009      	beq.n	800844e <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	78fa      	ldrb	r2, [r7, #3]
 8008444:	4611      	mov	r1, r2
 8008446:	6878      	ldr	r0, [r7, #4]
 8008448:	4798      	blx	r3
 800844a:	4603      	mov	r3, r0
 800844c:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800844e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008450:	4618      	mov	r0, r3
 8008452:	3710      	adds	r7, #16
 8008454:	46bd      	mov	sp, r7
 8008456:	bd80      	pop	{r7, pc}

08008458 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008458:	b580      	push	{r7, lr}
 800845a:	b082      	sub	sp, #8
 800845c:	af00      	add	r7, sp, #0
 800845e:	6078      	str	r0, [r7, #4]
 8008460:	460b      	mov	r3, r1
 8008462:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800846a:	2b00      	cmp	r3, #0
 800846c:	d007      	beq.n	800847e <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008474:	685b      	ldr	r3, [r3, #4]
 8008476:	78fa      	ldrb	r2, [r7, #3]
 8008478:	4611      	mov	r1, r2
 800847a:	6878      	ldr	r0, [r7, #4]
 800847c:	4798      	blx	r3
  }

  return USBD_OK;
 800847e:	2300      	movs	r3, #0
}
 8008480:	4618      	mov	r0, r3
 8008482:	3708      	adds	r7, #8
 8008484:	46bd      	mov	sp, r7
 8008486:	bd80      	pop	{r7, pc}

08008488 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8008488:	b580      	push	{r7, lr}
 800848a:	b084      	sub	sp, #16
 800848c:	af00      	add	r7, sp, #0
 800848e:	6078      	str	r0, [r7, #4]
 8008490:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008498:	6839      	ldr	r1, [r7, #0]
 800849a:	4618      	mov	r0, r3
 800849c:	f000 ff46 	bl	800932c <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	2201      	movs	r2, #1
 80084a4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80084ae:	461a      	mov	r2, r3
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80084bc:	f003 031f 	and.w	r3, r3, #31
 80084c0:	2b02      	cmp	r3, #2
 80084c2:	d01a      	beq.n	80084fa <USBD_LL_SetupStage+0x72>
 80084c4:	2b02      	cmp	r3, #2
 80084c6:	d822      	bhi.n	800850e <USBD_LL_SetupStage+0x86>
 80084c8:	2b00      	cmp	r3, #0
 80084ca:	d002      	beq.n	80084d2 <USBD_LL_SetupStage+0x4a>
 80084cc:	2b01      	cmp	r3, #1
 80084ce:	d00a      	beq.n	80084e6 <USBD_LL_SetupStage+0x5e>
 80084d0:	e01d      	b.n	800850e <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80084d8:	4619      	mov	r1, r3
 80084da:	6878      	ldr	r0, [r7, #4]
 80084dc:	f000 f9ee 	bl	80088bc <USBD_StdDevReq>
 80084e0:	4603      	mov	r3, r0
 80084e2:	73fb      	strb	r3, [r7, #15]
      break;
 80084e4:	e020      	b.n	8008528 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80084ec:	4619      	mov	r1, r3
 80084ee:	6878      	ldr	r0, [r7, #4]
 80084f0:	f000 fa52 	bl	8008998 <USBD_StdItfReq>
 80084f4:	4603      	mov	r3, r0
 80084f6:	73fb      	strb	r3, [r7, #15]
      break;
 80084f8:	e016      	b.n	8008528 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008500:	4619      	mov	r1, r3
 8008502:	6878      	ldr	r0, [r7, #4]
 8008504:	f000 fa91 	bl	8008a2a <USBD_StdEPReq>
 8008508:	4603      	mov	r3, r0
 800850a:	73fb      	strb	r3, [r7, #15]
      break;
 800850c:	e00c      	b.n	8008528 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8008514:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008518:	b2db      	uxtb	r3, r3
 800851a:	4619      	mov	r1, r3
 800851c:	6878      	ldr	r0, [r7, #4]
 800851e:	f001 fbfb 	bl	8009d18 <USBD_LL_StallEP>
 8008522:	4603      	mov	r3, r0
 8008524:	73fb      	strb	r3, [r7, #15]
      break;
 8008526:	bf00      	nop
  }

  return ret;
 8008528:	7bfb      	ldrb	r3, [r7, #15]
}
 800852a:	4618      	mov	r0, r3
 800852c:	3710      	adds	r7, #16
 800852e:	46bd      	mov	sp, r7
 8008530:	bd80      	pop	{r7, pc}

08008532 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8008532:	b580      	push	{r7, lr}
 8008534:	b086      	sub	sp, #24
 8008536:	af00      	add	r7, sp, #0
 8008538:	60f8      	str	r0, [r7, #12]
 800853a:	460b      	mov	r3, r1
 800853c:	607a      	str	r2, [r7, #4]
 800853e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8008540:	7afb      	ldrb	r3, [r7, #11]
 8008542:	2b00      	cmp	r3, #0
 8008544:	d138      	bne.n	80085b8 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 8008546:	68fb      	ldr	r3, [r7, #12]
 8008548:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800854c:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800854e:	68fb      	ldr	r3, [r7, #12]
 8008550:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008554:	2b03      	cmp	r3, #3
 8008556:	d14a      	bne.n	80085ee <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8008558:	693b      	ldr	r3, [r7, #16]
 800855a:	689a      	ldr	r2, [r3, #8]
 800855c:	693b      	ldr	r3, [r7, #16]
 800855e:	68db      	ldr	r3, [r3, #12]
 8008560:	429a      	cmp	r2, r3
 8008562:	d913      	bls.n	800858c <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8008564:	693b      	ldr	r3, [r7, #16]
 8008566:	689a      	ldr	r2, [r3, #8]
 8008568:	693b      	ldr	r3, [r7, #16]
 800856a:	68db      	ldr	r3, [r3, #12]
 800856c:	1ad2      	subs	r2, r2, r3
 800856e:	693b      	ldr	r3, [r7, #16]
 8008570:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8008572:	693b      	ldr	r3, [r7, #16]
 8008574:	68da      	ldr	r2, [r3, #12]
 8008576:	693b      	ldr	r3, [r7, #16]
 8008578:	689b      	ldr	r3, [r3, #8]
 800857a:	4293      	cmp	r3, r2
 800857c:	bf28      	it	cs
 800857e:	4613      	movcs	r3, r2
 8008580:	461a      	mov	r2, r3
 8008582:	6879      	ldr	r1, [r7, #4]
 8008584:	68f8      	ldr	r0, [r7, #12]
 8008586:	f000 ffc5 	bl	8009514 <USBD_CtlContinueRx>
 800858a:	e030      	b.n	80085ee <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800858c:	68fb      	ldr	r3, [r7, #12]
 800858e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008592:	b2db      	uxtb	r3, r3
 8008594:	2b03      	cmp	r3, #3
 8008596:	d10b      	bne.n	80085b0 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 8008598:	68fb      	ldr	r3, [r7, #12]
 800859a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800859e:	691b      	ldr	r3, [r3, #16]
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	d005      	beq.n	80085b0 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 80085a4:	68fb      	ldr	r3, [r7, #12]
 80085a6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80085aa:	691b      	ldr	r3, [r3, #16]
 80085ac:	68f8      	ldr	r0, [r7, #12]
 80085ae:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80085b0:	68f8      	ldr	r0, [r7, #12]
 80085b2:	f000 ffc0 	bl	8009536 <USBD_CtlSendStatus>
 80085b6:	e01a      	b.n	80085ee <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80085b8:	68fb      	ldr	r3, [r7, #12]
 80085ba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80085be:	b2db      	uxtb	r3, r3
 80085c0:	2b03      	cmp	r3, #3
 80085c2:	d114      	bne.n	80085ee <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 80085c4:	68fb      	ldr	r3, [r7, #12]
 80085c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80085ca:	699b      	ldr	r3, [r3, #24]
 80085cc:	2b00      	cmp	r3, #0
 80085ce:	d00e      	beq.n	80085ee <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 80085d0:	68fb      	ldr	r3, [r7, #12]
 80085d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80085d6:	699b      	ldr	r3, [r3, #24]
 80085d8:	7afa      	ldrb	r2, [r7, #11]
 80085da:	4611      	mov	r1, r2
 80085dc:	68f8      	ldr	r0, [r7, #12]
 80085de:	4798      	blx	r3
 80085e0:	4603      	mov	r3, r0
 80085e2:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 80085e4:	7dfb      	ldrb	r3, [r7, #23]
 80085e6:	2b00      	cmp	r3, #0
 80085e8:	d001      	beq.n	80085ee <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 80085ea:	7dfb      	ldrb	r3, [r7, #23]
 80085ec:	e000      	b.n	80085f0 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 80085ee:	2300      	movs	r3, #0
}
 80085f0:	4618      	mov	r0, r3
 80085f2:	3718      	adds	r7, #24
 80085f4:	46bd      	mov	sp, r7
 80085f6:	bd80      	pop	{r7, pc}

080085f8 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80085f8:	b580      	push	{r7, lr}
 80085fa:	b086      	sub	sp, #24
 80085fc:	af00      	add	r7, sp, #0
 80085fe:	60f8      	str	r0, [r7, #12]
 8008600:	460b      	mov	r3, r1
 8008602:	607a      	str	r2, [r7, #4]
 8008604:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8008606:	7afb      	ldrb	r3, [r7, #11]
 8008608:	2b00      	cmp	r3, #0
 800860a:	d16b      	bne.n	80086e4 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 800860c:	68fb      	ldr	r3, [r7, #12]
 800860e:	3314      	adds	r3, #20
 8008610:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8008612:	68fb      	ldr	r3, [r7, #12]
 8008614:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008618:	2b02      	cmp	r3, #2
 800861a:	d156      	bne.n	80086ca <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 800861c:	693b      	ldr	r3, [r7, #16]
 800861e:	689a      	ldr	r2, [r3, #8]
 8008620:	693b      	ldr	r3, [r7, #16]
 8008622:	68db      	ldr	r3, [r3, #12]
 8008624:	429a      	cmp	r2, r3
 8008626:	d914      	bls.n	8008652 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8008628:	693b      	ldr	r3, [r7, #16]
 800862a:	689a      	ldr	r2, [r3, #8]
 800862c:	693b      	ldr	r3, [r7, #16]
 800862e:	68db      	ldr	r3, [r3, #12]
 8008630:	1ad2      	subs	r2, r2, r3
 8008632:	693b      	ldr	r3, [r7, #16]
 8008634:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8008636:	693b      	ldr	r3, [r7, #16]
 8008638:	689b      	ldr	r3, [r3, #8]
 800863a:	461a      	mov	r2, r3
 800863c:	6879      	ldr	r1, [r7, #4]
 800863e:	68f8      	ldr	r0, [r7, #12]
 8008640:	f000 ff3a 	bl	80094b8 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008644:	2300      	movs	r3, #0
 8008646:	2200      	movs	r2, #0
 8008648:	2100      	movs	r1, #0
 800864a:	68f8      	ldr	r0, [r7, #12]
 800864c:	f001 fc0f 	bl	8009e6e <USBD_LL_PrepareReceive>
 8008650:	e03b      	b.n	80086ca <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8008652:	693b      	ldr	r3, [r7, #16]
 8008654:	68da      	ldr	r2, [r3, #12]
 8008656:	693b      	ldr	r3, [r7, #16]
 8008658:	689b      	ldr	r3, [r3, #8]
 800865a:	429a      	cmp	r2, r3
 800865c:	d11c      	bne.n	8008698 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800865e:	693b      	ldr	r3, [r7, #16]
 8008660:	685a      	ldr	r2, [r3, #4]
 8008662:	693b      	ldr	r3, [r7, #16]
 8008664:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8008666:	429a      	cmp	r2, r3
 8008668:	d316      	bcc.n	8008698 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800866a:	693b      	ldr	r3, [r7, #16]
 800866c:	685a      	ldr	r2, [r3, #4]
 800866e:	68fb      	ldr	r3, [r7, #12]
 8008670:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8008674:	429a      	cmp	r2, r3
 8008676:	d20f      	bcs.n	8008698 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8008678:	2200      	movs	r2, #0
 800867a:	2100      	movs	r1, #0
 800867c:	68f8      	ldr	r0, [r7, #12]
 800867e:	f000 ff1b 	bl	80094b8 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8008682:	68fb      	ldr	r3, [r7, #12]
 8008684:	2200      	movs	r2, #0
 8008686:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800868a:	2300      	movs	r3, #0
 800868c:	2200      	movs	r2, #0
 800868e:	2100      	movs	r1, #0
 8008690:	68f8      	ldr	r0, [r7, #12]
 8008692:	f001 fbec 	bl	8009e6e <USBD_LL_PrepareReceive>
 8008696:	e018      	b.n	80086ca <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008698:	68fb      	ldr	r3, [r7, #12]
 800869a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800869e:	b2db      	uxtb	r3, r3
 80086a0:	2b03      	cmp	r3, #3
 80086a2:	d10b      	bne.n	80086bc <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 80086a4:	68fb      	ldr	r3, [r7, #12]
 80086a6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80086aa:	68db      	ldr	r3, [r3, #12]
 80086ac:	2b00      	cmp	r3, #0
 80086ae:	d005      	beq.n	80086bc <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 80086b0:	68fb      	ldr	r3, [r7, #12]
 80086b2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80086b6:	68db      	ldr	r3, [r3, #12]
 80086b8:	68f8      	ldr	r0, [r7, #12]
 80086ba:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80086bc:	2180      	movs	r1, #128	; 0x80
 80086be:	68f8      	ldr	r0, [r7, #12]
 80086c0:	f001 fb2a 	bl	8009d18 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80086c4:	68f8      	ldr	r0, [r7, #12]
 80086c6:	f000 ff49 	bl	800955c <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 80086ca:	68fb      	ldr	r3, [r7, #12]
 80086cc:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80086d0:	2b01      	cmp	r3, #1
 80086d2:	d122      	bne.n	800871a <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 80086d4:	68f8      	ldr	r0, [r7, #12]
 80086d6:	f7ff fe98 	bl	800840a <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80086da:	68fb      	ldr	r3, [r7, #12]
 80086dc:	2200      	movs	r2, #0
 80086de:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80086e2:	e01a      	b.n	800871a <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80086e4:	68fb      	ldr	r3, [r7, #12]
 80086e6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80086ea:	b2db      	uxtb	r3, r3
 80086ec:	2b03      	cmp	r3, #3
 80086ee:	d114      	bne.n	800871a <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 80086f0:	68fb      	ldr	r3, [r7, #12]
 80086f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80086f6:	695b      	ldr	r3, [r3, #20]
 80086f8:	2b00      	cmp	r3, #0
 80086fa:	d00e      	beq.n	800871a <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 80086fc:	68fb      	ldr	r3, [r7, #12]
 80086fe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008702:	695b      	ldr	r3, [r3, #20]
 8008704:	7afa      	ldrb	r2, [r7, #11]
 8008706:	4611      	mov	r1, r2
 8008708:	68f8      	ldr	r0, [r7, #12]
 800870a:	4798      	blx	r3
 800870c:	4603      	mov	r3, r0
 800870e:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8008710:	7dfb      	ldrb	r3, [r7, #23]
 8008712:	2b00      	cmp	r3, #0
 8008714:	d001      	beq.n	800871a <USBD_LL_DataInStage+0x122>
        {
          return ret;
 8008716:	7dfb      	ldrb	r3, [r7, #23]
 8008718:	e000      	b.n	800871c <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 800871a:	2300      	movs	r3, #0
}
 800871c:	4618      	mov	r0, r3
 800871e:	3718      	adds	r7, #24
 8008720:	46bd      	mov	sp, r7
 8008722:	bd80      	pop	{r7, pc}

08008724 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8008724:	b580      	push	{r7, lr}
 8008726:	b082      	sub	sp, #8
 8008728:	af00      	add	r7, sp, #0
 800872a:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	2201      	movs	r2, #1
 8008730:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	2200      	movs	r2, #0
 8008738:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	2200      	movs	r2, #0
 8008740:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	2200      	movs	r2, #0
 8008746:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008750:	2b00      	cmp	r3, #0
 8008752:	d101      	bne.n	8008758 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 8008754:	2303      	movs	r3, #3
 8008756:	e02f      	b.n	80087b8 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800875e:	2b00      	cmp	r3, #0
 8008760:	d00f      	beq.n	8008782 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008768:	685b      	ldr	r3, [r3, #4]
 800876a:	2b00      	cmp	r3, #0
 800876c:	d009      	beq.n	8008782 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008774:	685b      	ldr	r3, [r3, #4]
 8008776:	687a      	ldr	r2, [r7, #4]
 8008778:	6852      	ldr	r2, [r2, #4]
 800877a:	b2d2      	uxtb	r2, r2
 800877c:	4611      	mov	r1, r2
 800877e:	6878      	ldr	r0, [r7, #4]
 8008780:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008782:	2340      	movs	r3, #64	; 0x40
 8008784:	2200      	movs	r2, #0
 8008786:	2100      	movs	r1, #0
 8008788:	6878      	ldr	r0, [r7, #4]
 800878a:	f001 fa80 	bl	8009c8e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	2201      	movs	r2, #1
 8008792:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	2240      	movs	r2, #64	; 0x40
 800879a:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800879e:	2340      	movs	r3, #64	; 0x40
 80087a0:	2200      	movs	r2, #0
 80087a2:	2180      	movs	r1, #128	; 0x80
 80087a4:	6878      	ldr	r0, [r7, #4]
 80087a6:	f001 fa72 	bl	8009c8e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	2201      	movs	r2, #1
 80087ae:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	2240      	movs	r2, #64	; 0x40
 80087b4:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 80087b6:	2300      	movs	r3, #0
}
 80087b8:	4618      	mov	r0, r3
 80087ba:	3708      	adds	r7, #8
 80087bc:	46bd      	mov	sp, r7
 80087be:	bd80      	pop	{r7, pc}

080087c0 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80087c0:	b480      	push	{r7}
 80087c2:	b083      	sub	sp, #12
 80087c4:	af00      	add	r7, sp, #0
 80087c6:	6078      	str	r0, [r7, #4]
 80087c8:	460b      	mov	r3, r1
 80087ca:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	78fa      	ldrb	r2, [r7, #3]
 80087d0:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80087d2:	2300      	movs	r3, #0
}
 80087d4:	4618      	mov	r0, r3
 80087d6:	370c      	adds	r7, #12
 80087d8:	46bd      	mov	sp, r7
 80087da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087de:	4770      	bx	lr

080087e0 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80087e0:	b480      	push	{r7}
 80087e2:	b083      	sub	sp, #12
 80087e4:	af00      	add	r7, sp, #0
 80087e6:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80087ee:	b2da      	uxtb	r2, r3
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	2204      	movs	r2, #4
 80087fa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80087fe:	2300      	movs	r3, #0
}
 8008800:	4618      	mov	r0, r3
 8008802:	370c      	adds	r7, #12
 8008804:	46bd      	mov	sp, r7
 8008806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800880a:	4770      	bx	lr

0800880c <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800880c:	b480      	push	{r7}
 800880e:	b083      	sub	sp, #12
 8008810:	af00      	add	r7, sp, #0
 8008812:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800881a:	b2db      	uxtb	r3, r3
 800881c:	2b04      	cmp	r3, #4
 800881e:	d106      	bne.n	800882e <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8008826:	b2da      	uxtb	r2, r3
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800882e:	2300      	movs	r3, #0
}
 8008830:	4618      	mov	r0, r3
 8008832:	370c      	adds	r7, #12
 8008834:	46bd      	mov	sp, r7
 8008836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800883a:	4770      	bx	lr

0800883c <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800883c:	b580      	push	{r7, lr}
 800883e:	b082      	sub	sp, #8
 8008840:	af00      	add	r7, sp, #0
 8008842:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800884a:	2b00      	cmp	r3, #0
 800884c:	d101      	bne.n	8008852 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 800884e:	2303      	movs	r3, #3
 8008850:	e012      	b.n	8008878 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008858:	b2db      	uxtb	r3, r3
 800885a:	2b03      	cmp	r3, #3
 800885c:	d10b      	bne.n	8008876 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008864:	69db      	ldr	r3, [r3, #28]
 8008866:	2b00      	cmp	r3, #0
 8008868:	d005      	beq.n	8008876 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008870:	69db      	ldr	r3, [r3, #28]
 8008872:	6878      	ldr	r0, [r7, #4]
 8008874:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008876:	2300      	movs	r3, #0
}
 8008878:	4618      	mov	r0, r3
 800887a:	3708      	adds	r7, #8
 800887c:	46bd      	mov	sp, r7
 800887e:	bd80      	pop	{r7, pc}

08008880 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8008880:	b480      	push	{r7}
 8008882:	b087      	sub	sp, #28
 8008884:	af00      	add	r7, sp, #0
 8008886:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800888c:	697b      	ldr	r3, [r7, #20]
 800888e:	781b      	ldrb	r3, [r3, #0]
 8008890:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8008892:	697b      	ldr	r3, [r7, #20]
 8008894:	3301      	adds	r3, #1
 8008896:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8008898:	697b      	ldr	r3, [r7, #20]
 800889a:	781b      	ldrb	r3, [r3, #0]
 800889c:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800889e:	8a3b      	ldrh	r3, [r7, #16]
 80088a0:	021b      	lsls	r3, r3, #8
 80088a2:	b21a      	sxth	r2, r3
 80088a4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80088a8:	4313      	orrs	r3, r2
 80088aa:	b21b      	sxth	r3, r3
 80088ac:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80088ae:	89fb      	ldrh	r3, [r7, #14]
}
 80088b0:	4618      	mov	r0, r3
 80088b2:	371c      	adds	r7, #28
 80088b4:	46bd      	mov	sp, r7
 80088b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ba:	4770      	bx	lr

080088bc <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80088bc:	b580      	push	{r7, lr}
 80088be:	b084      	sub	sp, #16
 80088c0:	af00      	add	r7, sp, #0
 80088c2:	6078      	str	r0, [r7, #4]
 80088c4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80088c6:	2300      	movs	r3, #0
 80088c8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80088ca:	683b      	ldr	r3, [r7, #0]
 80088cc:	781b      	ldrb	r3, [r3, #0]
 80088ce:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80088d2:	2b40      	cmp	r3, #64	; 0x40
 80088d4:	d005      	beq.n	80088e2 <USBD_StdDevReq+0x26>
 80088d6:	2b40      	cmp	r3, #64	; 0x40
 80088d8:	d853      	bhi.n	8008982 <USBD_StdDevReq+0xc6>
 80088da:	2b00      	cmp	r3, #0
 80088dc:	d00b      	beq.n	80088f6 <USBD_StdDevReq+0x3a>
 80088de:	2b20      	cmp	r3, #32
 80088e0:	d14f      	bne.n	8008982 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80088e8:	689b      	ldr	r3, [r3, #8]
 80088ea:	6839      	ldr	r1, [r7, #0]
 80088ec:	6878      	ldr	r0, [r7, #4]
 80088ee:	4798      	blx	r3
 80088f0:	4603      	mov	r3, r0
 80088f2:	73fb      	strb	r3, [r7, #15]
      break;
 80088f4:	e04a      	b.n	800898c <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80088f6:	683b      	ldr	r3, [r7, #0]
 80088f8:	785b      	ldrb	r3, [r3, #1]
 80088fa:	2b09      	cmp	r3, #9
 80088fc:	d83b      	bhi.n	8008976 <USBD_StdDevReq+0xba>
 80088fe:	a201      	add	r2, pc, #4	; (adr r2, 8008904 <USBD_StdDevReq+0x48>)
 8008900:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008904:	08008959 	.word	0x08008959
 8008908:	0800896d 	.word	0x0800896d
 800890c:	08008977 	.word	0x08008977
 8008910:	08008963 	.word	0x08008963
 8008914:	08008977 	.word	0x08008977
 8008918:	08008937 	.word	0x08008937
 800891c:	0800892d 	.word	0x0800892d
 8008920:	08008977 	.word	0x08008977
 8008924:	0800894f 	.word	0x0800894f
 8008928:	08008941 	.word	0x08008941
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800892c:	6839      	ldr	r1, [r7, #0]
 800892e:	6878      	ldr	r0, [r7, #4]
 8008930:	f000 f9de 	bl	8008cf0 <USBD_GetDescriptor>
          break;
 8008934:	e024      	b.n	8008980 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8008936:	6839      	ldr	r1, [r7, #0]
 8008938:	6878      	ldr	r0, [r7, #4]
 800893a:	f000 fb6d 	bl	8009018 <USBD_SetAddress>
          break;
 800893e:	e01f      	b.n	8008980 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8008940:	6839      	ldr	r1, [r7, #0]
 8008942:	6878      	ldr	r0, [r7, #4]
 8008944:	f000 fbac 	bl	80090a0 <USBD_SetConfig>
 8008948:	4603      	mov	r3, r0
 800894a:	73fb      	strb	r3, [r7, #15]
          break;
 800894c:	e018      	b.n	8008980 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800894e:	6839      	ldr	r1, [r7, #0]
 8008950:	6878      	ldr	r0, [r7, #4]
 8008952:	f000 fc4b 	bl	80091ec <USBD_GetConfig>
          break;
 8008956:	e013      	b.n	8008980 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8008958:	6839      	ldr	r1, [r7, #0]
 800895a:	6878      	ldr	r0, [r7, #4]
 800895c:	f000 fc7c 	bl	8009258 <USBD_GetStatus>
          break;
 8008960:	e00e      	b.n	8008980 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8008962:	6839      	ldr	r1, [r7, #0]
 8008964:	6878      	ldr	r0, [r7, #4]
 8008966:	f000 fcab 	bl	80092c0 <USBD_SetFeature>
          break;
 800896a:	e009      	b.n	8008980 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800896c:	6839      	ldr	r1, [r7, #0]
 800896e:	6878      	ldr	r0, [r7, #4]
 8008970:	f000 fcba 	bl	80092e8 <USBD_ClrFeature>
          break;
 8008974:	e004      	b.n	8008980 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 8008976:	6839      	ldr	r1, [r7, #0]
 8008978:	6878      	ldr	r0, [r7, #4]
 800897a:	f000 fd11 	bl	80093a0 <USBD_CtlError>
          break;
 800897e:	bf00      	nop
      }
      break;
 8008980:	e004      	b.n	800898c <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 8008982:	6839      	ldr	r1, [r7, #0]
 8008984:	6878      	ldr	r0, [r7, #4]
 8008986:	f000 fd0b 	bl	80093a0 <USBD_CtlError>
      break;
 800898a:	bf00      	nop
  }

  return ret;
 800898c:	7bfb      	ldrb	r3, [r7, #15]
}
 800898e:	4618      	mov	r0, r3
 8008990:	3710      	adds	r7, #16
 8008992:	46bd      	mov	sp, r7
 8008994:	bd80      	pop	{r7, pc}
 8008996:	bf00      	nop

08008998 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008998:	b580      	push	{r7, lr}
 800899a:	b084      	sub	sp, #16
 800899c:	af00      	add	r7, sp, #0
 800899e:	6078      	str	r0, [r7, #4]
 80089a0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80089a2:	2300      	movs	r3, #0
 80089a4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80089a6:	683b      	ldr	r3, [r7, #0]
 80089a8:	781b      	ldrb	r3, [r3, #0]
 80089aa:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80089ae:	2b40      	cmp	r3, #64	; 0x40
 80089b0:	d005      	beq.n	80089be <USBD_StdItfReq+0x26>
 80089b2:	2b40      	cmp	r3, #64	; 0x40
 80089b4:	d82f      	bhi.n	8008a16 <USBD_StdItfReq+0x7e>
 80089b6:	2b00      	cmp	r3, #0
 80089b8:	d001      	beq.n	80089be <USBD_StdItfReq+0x26>
 80089ba:	2b20      	cmp	r3, #32
 80089bc:	d12b      	bne.n	8008a16 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80089c4:	b2db      	uxtb	r3, r3
 80089c6:	3b01      	subs	r3, #1
 80089c8:	2b02      	cmp	r3, #2
 80089ca:	d81d      	bhi.n	8008a08 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80089cc:	683b      	ldr	r3, [r7, #0]
 80089ce:	889b      	ldrh	r3, [r3, #4]
 80089d0:	b2db      	uxtb	r3, r3
 80089d2:	2b01      	cmp	r3, #1
 80089d4:	d813      	bhi.n	80089fe <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80089dc:	689b      	ldr	r3, [r3, #8]
 80089de:	6839      	ldr	r1, [r7, #0]
 80089e0:	6878      	ldr	r0, [r7, #4]
 80089e2:	4798      	blx	r3
 80089e4:	4603      	mov	r3, r0
 80089e6:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80089e8:	683b      	ldr	r3, [r7, #0]
 80089ea:	88db      	ldrh	r3, [r3, #6]
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	d110      	bne.n	8008a12 <USBD_StdItfReq+0x7a>
 80089f0:	7bfb      	ldrb	r3, [r7, #15]
 80089f2:	2b00      	cmp	r3, #0
 80089f4:	d10d      	bne.n	8008a12 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 80089f6:	6878      	ldr	r0, [r7, #4]
 80089f8:	f000 fd9d 	bl	8009536 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80089fc:	e009      	b.n	8008a12 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 80089fe:	6839      	ldr	r1, [r7, #0]
 8008a00:	6878      	ldr	r0, [r7, #4]
 8008a02:	f000 fccd 	bl	80093a0 <USBD_CtlError>
          break;
 8008a06:	e004      	b.n	8008a12 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 8008a08:	6839      	ldr	r1, [r7, #0]
 8008a0a:	6878      	ldr	r0, [r7, #4]
 8008a0c:	f000 fcc8 	bl	80093a0 <USBD_CtlError>
          break;
 8008a10:	e000      	b.n	8008a14 <USBD_StdItfReq+0x7c>
          break;
 8008a12:	bf00      	nop
      }
      break;
 8008a14:	e004      	b.n	8008a20 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 8008a16:	6839      	ldr	r1, [r7, #0]
 8008a18:	6878      	ldr	r0, [r7, #4]
 8008a1a:	f000 fcc1 	bl	80093a0 <USBD_CtlError>
      break;
 8008a1e:	bf00      	nop
  }

  return ret;
 8008a20:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a22:	4618      	mov	r0, r3
 8008a24:	3710      	adds	r7, #16
 8008a26:	46bd      	mov	sp, r7
 8008a28:	bd80      	pop	{r7, pc}

08008a2a <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008a2a:	b580      	push	{r7, lr}
 8008a2c:	b084      	sub	sp, #16
 8008a2e:	af00      	add	r7, sp, #0
 8008a30:	6078      	str	r0, [r7, #4]
 8008a32:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8008a34:	2300      	movs	r3, #0
 8008a36:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8008a38:	683b      	ldr	r3, [r7, #0]
 8008a3a:	889b      	ldrh	r3, [r3, #4]
 8008a3c:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008a3e:	683b      	ldr	r3, [r7, #0]
 8008a40:	781b      	ldrb	r3, [r3, #0]
 8008a42:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008a46:	2b40      	cmp	r3, #64	; 0x40
 8008a48:	d007      	beq.n	8008a5a <USBD_StdEPReq+0x30>
 8008a4a:	2b40      	cmp	r3, #64	; 0x40
 8008a4c:	f200 8145 	bhi.w	8008cda <USBD_StdEPReq+0x2b0>
 8008a50:	2b00      	cmp	r3, #0
 8008a52:	d00c      	beq.n	8008a6e <USBD_StdEPReq+0x44>
 8008a54:	2b20      	cmp	r3, #32
 8008a56:	f040 8140 	bne.w	8008cda <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008a60:	689b      	ldr	r3, [r3, #8]
 8008a62:	6839      	ldr	r1, [r7, #0]
 8008a64:	6878      	ldr	r0, [r7, #4]
 8008a66:	4798      	blx	r3
 8008a68:	4603      	mov	r3, r0
 8008a6a:	73fb      	strb	r3, [r7, #15]
      break;
 8008a6c:	e13a      	b.n	8008ce4 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008a6e:	683b      	ldr	r3, [r7, #0]
 8008a70:	785b      	ldrb	r3, [r3, #1]
 8008a72:	2b03      	cmp	r3, #3
 8008a74:	d007      	beq.n	8008a86 <USBD_StdEPReq+0x5c>
 8008a76:	2b03      	cmp	r3, #3
 8008a78:	f300 8129 	bgt.w	8008cce <USBD_StdEPReq+0x2a4>
 8008a7c:	2b00      	cmp	r3, #0
 8008a7e:	d07f      	beq.n	8008b80 <USBD_StdEPReq+0x156>
 8008a80:	2b01      	cmp	r3, #1
 8008a82:	d03c      	beq.n	8008afe <USBD_StdEPReq+0xd4>
 8008a84:	e123      	b.n	8008cce <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008a8c:	b2db      	uxtb	r3, r3
 8008a8e:	2b02      	cmp	r3, #2
 8008a90:	d002      	beq.n	8008a98 <USBD_StdEPReq+0x6e>
 8008a92:	2b03      	cmp	r3, #3
 8008a94:	d016      	beq.n	8008ac4 <USBD_StdEPReq+0x9a>
 8008a96:	e02c      	b.n	8008af2 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008a98:	7bbb      	ldrb	r3, [r7, #14]
 8008a9a:	2b00      	cmp	r3, #0
 8008a9c:	d00d      	beq.n	8008aba <USBD_StdEPReq+0x90>
 8008a9e:	7bbb      	ldrb	r3, [r7, #14]
 8008aa0:	2b80      	cmp	r3, #128	; 0x80
 8008aa2:	d00a      	beq.n	8008aba <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008aa4:	7bbb      	ldrb	r3, [r7, #14]
 8008aa6:	4619      	mov	r1, r3
 8008aa8:	6878      	ldr	r0, [r7, #4]
 8008aaa:	f001 f935 	bl	8009d18 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8008aae:	2180      	movs	r1, #128	; 0x80
 8008ab0:	6878      	ldr	r0, [r7, #4]
 8008ab2:	f001 f931 	bl	8009d18 <USBD_LL_StallEP>
 8008ab6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008ab8:	e020      	b.n	8008afc <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 8008aba:	6839      	ldr	r1, [r7, #0]
 8008abc:	6878      	ldr	r0, [r7, #4]
 8008abe:	f000 fc6f 	bl	80093a0 <USBD_CtlError>
              break;
 8008ac2:	e01b      	b.n	8008afc <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008ac4:	683b      	ldr	r3, [r7, #0]
 8008ac6:	885b      	ldrh	r3, [r3, #2]
 8008ac8:	2b00      	cmp	r3, #0
 8008aca:	d10e      	bne.n	8008aea <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8008acc:	7bbb      	ldrb	r3, [r7, #14]
 8008ace:	2b00      	cmp	r3, #0
 8008ad0:	d00b      	beq.n	8008aea <USBD_StdEPReq+0xc0>
 8008ad2:	7bbb      	ldrb	r3, [r7, #14]
 8008ad4:	2b80      	cmp	r3, #128	; 0x80
 8008ad6:	d008      	beq.n	8008aea <USBD_StdEPReq+0xc0>
 8008ad8:	683b      	ldr	r3, [r7, #0]
 8008ada:	88db      	ldrh	r3, [r3, #6]
 8008adc:	2b00      	cmp	r3, #0
 8008ade:	d104      	bne.n	8008aea <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8008ae0:	7bbb      	ldrb	r3, [r7, #14]
 8008ae2:	4619      	mov	r1, r3
 8008ae4:	6878      	ldr	r0, [r7, #4]
 8008ae6:	f001 f917 	bl	8009d18 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8008aea:	6878      	ldr	r0, [r7, #4]
 8008aec:	f000 fd23 	bl	8009536 <USBD_CtlSendStatus>

              break;
 8008af0:	e004      	b.n	8008afc <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 8008af2:	6839      	ldr	r1, [r7, #0]
 8008af4:	6878      	ldr	r0, [r7, #4]
 8008af6:	f000 fc53 	bl	80093a0 <USBD_CtlError>
              break;
 8008afa:	bf00      	nop
          }
          break;
 8008afc:	e0ec      	b.n	8008cd8 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008b04:	b2db      	uxtb	r3, r3
 8008b06:	2b02      	cmp	r3, #2
 8008b08:	d002      	beq.n	8008b10 <USBD_StdEPReq+0xe6>
 8008b0a:	2b03      	cmp	r3, #3
 8008b0c:	d016      	beq.n	8008b3c <USBD_StdEPReq+0x112>
 8008b0e:	e030      	b.n	8008b72 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008b10:	7bbb      	ldrb	r3, [r7, #14]
 8008b12:	2b00      	cmp	r3, #0
 8008b14:	d00d      	beq.n	8008b32 <USBD_StdEPReq+0x108>
 8008b16:	7bbb      	ldrb	r3, [r7, #14]
 8008b18:	2b80      	cmp	r3, #128	; 0x80
 8008b1a:	d00a      	beq.n	8008b32 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008b1c:	7bbb      	ldrb	r3, [r7, #14]
 8008b1e:	4619      	mov	r1, r3
 8008b20:	6878      	ldr	r0, [r7, #4]
 8008b22:	f001 f8f9 	bl	8009d18 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8008b26:	2180      	movs	r1, #128	; 0x80
 8008b28:	6878      	ldr	r0, [r7, #4]
 8008b2a:	f001 f8f5 	bl	8009d18 <USBD_LL_StallEP>
 8008b2e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008b30:	e025      	b.n	8008b7e <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 8008b32:	6839      	ldr	r1, [r7, #0]
 8008b34:	6878      	ldr	r0, [r7, #4]
 8008b36:	f000 fc33 	bl	80093a0 <USBD_CtlError>
              break;
 8008b3a:	e020      	b.n	8008b7e <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008b3c:	683b      	ldr	r3, [r7, #0]
 8008b3e:	885b      	ldrh	r3, [r3, #2]
 8008b40:	2b00      	cmp	r3, #0
 8008b42:	d11b      	bne.n	8008b7c <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8008b44:	7bbb      	ldrb	r3, [r7, #14]
 8008b46:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008b4a:	2b00      	cmp	r3, #0
 8008b4c:	d004      	beq.n	8008b58 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8008b4e:	7bbb      	ldrb	r3, [r7, #14]
 8008b50:	4619      	mov	r1, r3
 8008b52:	6878      	ldr	r0, [r7, #4]
 8008b54:	f001 f8ff 	bl	8009d56 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8008b58:	6878      	ldr	r0, [r7, #4]
 8008b5a:	f000 fcec 	bl	8009536 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008b64:	689b      	ldr	r3, [r3, #8]
 8008b66:	6839      	ldr	r1, [r7, #0]
 8008b68:	6878      	ldr	r0, [r7, #4]
 8008b6a:	4798      	blx	r3
 8008b6c:	4603      	mov	r3, r0
 8008b6e:	73fb      	strb	r3, [r7, #15]
              }
              break;
 8008b70:	e004      	b.n	8008b7c <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 8008b72:	6839      	ldr	r1, [r7, #0]
 8008b74:	6878      	ldr	r0, [r7, #4]
 8008b76:	f000 fc13 	bl	80093a0 <USBD_CtlError>
              break;
 8008b7a:	e000      	b.n	8008b7e <USBD_StdEPReq+0x154>
              break;
 8008b7c:	bf00      	nop
          }
          break;
 8008b7e:	e0ab      	b.n	8008cd8 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008b86:	b2db      	uxtb	r3, r3
 8008b88:	2b02      	cmp	r3, #2
 8008b8a:	d002      	beq.n	8008b92 <USBD_StdEPReq+0x168>
 8008b8c:	2b03      	cmp	r3, #3
 8008b8e:	d032      	beq.n	8008bf6 <USBD_StdEPReq+0x1cc>
 8008b90:	e097      	b.n	8008cc2 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008b92:	7bbb      	ldrb	r3, [r7, #14]
 8008b94:	2b00      	cmp	r3, #0
 8008b96:	d007      	beq.n	8008ba8 <USBD_StdEPReq+0x17e>
 8008b98:	7bbb      	ldrb	r3, [r7, #14]
 8008b9a:	2b80      	cmp	r3, #128	; 0x80
 8008b9c:	d004      	beq.n	8008ba8 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 8008b9e:	6839      	ldr	r1, [r7, #0]
 8008ba0:	6878      	ldr	r0, [r7, #4]
 8008ba2:	f000 fbfd 	bl	80093a0 <USBD_CtlError>
                break;
 8008ba6:	e091      	b.n	8008ccc <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008ba8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008bac:	2b00      	cmp	r3, #0
 8008bae:	da0b      	bge.n	8008bc8 <USBD_StdEPReq+0x19e>
 8008bb0:	7bbb      	ldrb	r3, [r7, #14]
 8008bb2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008bb6:	4613      	mov	r3, r2
 8008bb8:	009b      	lsls	r3, r3, #2
 8008bba:	4413      	add	r3, r2
 8008bbc:	009b      	lsls	r3, r3, #2
 8008bbe:	3310      	adds	r3, #16
 8008bc0:	687a      	ldr	r2, [r7, #4]
 8008bc2:	4413      	add	r3, r2
 8008bc4:	3304      	adds	r3, #4
 8008bc6:	e00b      	b.n	8008be0 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008bc8:	7bbb      	ldrb	r3, [r7, #14]
 8008bca:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008bce:	4613      	mov	r3, r2
 8008bd0:	009b      	lsls	r3, r3, #2
 8008bd2:	4413      	add	r3, r2
 8008bd4:	009b      	lsls	r3, r3, #2
 8008bd6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008bda:	687a      	ldr	r2, [r7, #4]
 8008bdc:	4413      	add	r3, r2
 8008bde:	3304      	adds	r3, #4
 8008be0:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8008be2:	68bb      	ldr	r3, [r7, #8]
 8008be4:	2200      	movs	r2, #0
 8008be6:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008be8:	68bb      	ldr	r3, [r7, #8]
 8008bea:	2202      	movs	r2, #2
 8008bec:	4619      	mov	r1, r3
 8008bee:	6878      	ldr	r0, [r7, #4]
 8008bf0:	f000 fc47 	bl	8009482 <USBD_CtlSendData>
              break;
 8008bf4:	e06a      	b.n	8008ccc <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8008bf6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008bfa:	2b00      	cmp	r3, #0
 8008bfc:	da11      	bge.n	8008c22 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8008bfe:	7bbb      	ldrb	r3, [r7, #14]
 8008c00:	f003 020f 	and.w	r2, r3, #15
 8008c04:	6879      	ldr	r1, [r7, #4]
 8008c06:	4613      	mov	r3, r2
 8008c08:	009b      	lsls	r3, r3, #2
 8008c0a:	4413      	add	r3, r2
 8008c0c:	009b      	lsls	r3, r3, #2
 8008c0e:	440b      	add	r3, r1
 8008c10:	3324      	adds	r3, #36	; 0x24
 8008c12:	881b      	ldrh	r3, [r3, #0]
 8008c14:	2b00      	cmp	r3, #0
 8008c16:	d117      	bne.n	8008c48 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8008c18:	6839      	ldr	r1, [r7, #0]
 8008c1a:	6878      	ldr	r0, [r7, #4]
 8008c1c:	f000 fbc0 	bl	80093a0 <USBD_CtlError>
                  break;
 8008c20:	e054      	b.n	8008ccc <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8008c22:	7bbb      	ldrb	r3, [r7, #14]
 8008c24:	f003 020f 	and.w	r2, r3, #15
 8008c28:	6879      	ldr	r1, [r7, #4]
 8008c2a:	4613      	mov	r3, r2
 8008c2c:	009b      	lsls	r3, r3, #2
 8008c2e:	4413      	add	r3, r2
 8008c30:	009b      	lsls	r3, r3, #2
 8008c32:	440b      	add	r3, r1
 8008c34:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8008c38:	881b      	ldrh	r3, [r3, #0]
 8008c3a:	2b00      	cmp	r3, #0
 8008c3c:	d104      	bne.n	8008c48 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8008c3e:	6839      	ldr	r1, [r7, #0]
 8008c40:	6878      	ldr	r0, [r7, #4]
 8008c42:	f000 fbad 	bl	80093a0 <USBD_CtlError>
                  break;
 8008c46:	e041      	b.n	8008ccc <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008c48:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008c4c:	2b00      	cmp	r3, #0
 8008c4e:	da0b      	bge.n	8008c68 <USBD_StdEPReq+0x23e>
 8008c50:	7bbb      	ldrb	r3, [r7, #14]
 8008c52:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008c56:	4613      	mov	r3, r2
 8008c58:	009b      	lsls	r3, r3, #2
 8008c5a:	4413      	add	r3, r2
 8008c5c:	009b      	lsls	r3, r3, #2
 8008c5e:	3310      	adds	r3, #16
 8008c60:	687a      	ldr	r2, [r7, #4]
 8008c62:	4413      	add	r3, r2
 8008c64:	3304      	adds	r3, #4
 8008c66:	e00b      	b.n	8008c80 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008c68:	7bbb      	ldrb	r3, [r7, #14]
 8008c6a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008c6e:	4613      	mov	r3, r2
 8008c70:	009b      	lsls	r3, r3, #2
 8008c72:	4413      	add	r3, r2
 8008c74:	009b      	lsls	r3, r3, #2
 8008c76:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008c7a:	687a      	ldr	r2, [r7, #4]
 8008c7c:	4413      	add	r3, r2
 8008c7e:	3304      	adds	r3, #4
 8008c80:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8008c82:	7bbb      	ldrb	r3, [r7, #14]
 8008c84:	2b00      	cmp	r3, #0
 8008c86:	d002      	beq.n	8008c8e <USBD_StdEPReq+0x264>
 8008c88:	7bbb      	ldrb	r3, [r7, #14]
 8008c8a:	2b80      	cmp	r3, #128	; 0x80
 8008c8c:	d103      	bne.n	8008c96 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 8008c8e:	68bb      	ldr	r3, [r7, #8]
 8008c90:	2200      	movs	r2, #0
 8008c92:	601a      	str	r2, [r3, #0]
 8008c94:	e00e      	b.n	8008cb4 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8008c96:	7bbb      	ldrb	r3, [r7, #14]
 8008c98:	4619      	mov	r1, r3
 8008c9a:	6878      	ldr	r0, [r7, #4]
 8008c9c:	f001 f87a 	bl	8009d94 <USBD_LL_IsStallEP>
 8008ca0:	4603      	mov	r3, r0
 8008ca2:	2b00      	cmp	r3, #0
 8008ca4:	d003      	beq.n	8008cae <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 8008ca6:	68bb      	ldr	r3, [r7, #8]
 8008ca8:	2201      	movs	r2, #1
 8008caa:	601a      	str	r2, [r3, #0]
 8008cac:	e002      	b.n	8008cb4 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 8008cae:	68bb      	ldr	r3, [r7, #8]
 8008cb0:	2200      	movs	r2, #0
 8008cb2:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008cb4:	68bb      	ldr	r3, [r7, #8]
 8008cb6:	2202      	movs	r2, #2
 8008cb8:	4619      	mov	r1, r3
 8008cba:	6878      	ldr	r0, [r7, #4]
 8008cbc:	f000 fbe1 	bl	8009482 <USBD_CtlSendData>
              break;
 8008cc0:	e004      	b.n	8008ccc <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 8008cc2:	6839      	ldr	r1, [r7, #0]
 8008cc4:	6878      	ldr	r0, [r7, #4]
 8008cc6:	f000 fb6b 	bl	80093a0 <USBD_CtlError>
              break;
 8008cca:	bf00      	nop
          }
          break;
 8008ccc:	e004      	b.n	8008cd8 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 8008cce:	6839      	ldr	r1, [r7, #0]
 8008cd0:	6878      	ldr	r0, [r7, #4]
 8008cd2:	f000 fb65 	bl	80093a0 <USBD_CtlError>
          break;
 8008cd6:	bf00      	nop
      }
      break;
 8008cd8:	e004      	b.n	8008ce4 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 8008cda:	6839      	ldr	r1, [r7, #0]
 8008cdc:	6878      	ldr	r0, [r7, #4]
 8008cde:	f000 fb5f 	bl	80093a0 <USBD_CtlError>
      break;
 8008ce2:	bf00      	nop
  }

  return ret;
 8008ce4:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ce6:	4618      	mov	r0, r3
 8008ce8:	3710      	adds	r7, #16
 8008cea:	46bd      	mov	sp, r7
 8008cec:	bd80      	pop	{r7, pc}
	...

08008cf0 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008cf0:	b580      	push	{r7, lr}
 8008cf2:	b084      	sub	sp, #16
 8008cf4:	af00      	add	r7, sp, #0
 8008cf6:	6078      	str	r0, [r7, #4]
 8008cf8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008cfa:	2300      	movs	r3, #0
 8008cfc:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8008cfe:	2300      	movs	r3, #0
 8008d00:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8008d02:	2300      	movs	r3, #0
 8008d04:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8008d06:	683b      	ldr	r3, [r7, #0]
 8008d08:	885b      	ldrh	r3, [r3, #2]
 8008d0a:	0a1b      	lsrs	r3, r3, #8
 8008d0c:	b29b      	uxth	r3, r3
 8008d0e:	3b01      	subs	r3, #1
 8008d10:	2b0e      	cmp	r3, #14
 8008d12:	f200 8152 	bhi.w	8008fba <USBD_GetDescriptor+0x2ca>
 8008d16:	a201      	add	r2, pc, #4	; (adr r2, 8008d1c <USBD_GetDescriptor+0x2c>)
 8008d18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d1c:	08008d8d 	.word	0x08008d8d
 8008d20:	08008da5 	.word	0x08008da5
 8008d24:	08008de5 	.word	0x08008de5
 8008d28:	08008fbb 	.word	0x08008fbb
 8008d2c:	08008fbb 	.word	0x08008fbb
 8008d30:	08008f5b 	.word	0x08008f5b
 8008d34:	08008f87 	.word	0x08008f87
 8008d38:	08008fbb 	.word	0x08008fbb
 8008d3c:	08008fbb 	.word	0x08008fbb
 8008d40:	08008fbb 	.word	0x08008fbb
 8008d44:	08008fbb 	.word	0x08008fbb
 8008d48:	08008fbb 	.word	0x08008fbb
 8008d4c:	08008fbb 	.word	0x08008fbb
 8008d50:	08008fbb 	.word	0x08008fbb
 8008d54:	08008d59 	.word	0x08008d59
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008d5e:	69db      	ldr	r3, [r3, #28]
 8008d60:	2b00      	cmp	r3, #0
 8008d62:	d00b      	beq.n	8008d7c <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008d6a:	69db      	ldr	r3, [r3, #28]
 8008d6c:	687a      	ldr	r2, [r7, #4]
 8008d6e:	7c12      	ldrb	r2, [r2, #16]
 8008d70:	f107 0108 	add.w	r1, r7, #8
 8008d74:	4610      	mov	r0, r2
 8008d76:	4798      	blx	r3
 8008d78:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008d7a:	e126      	b.n	8008fca <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8008d7c:	6839      	ldr	r1, [r7, #0]
 8008d7e:	6878      	ldr	r0, [r7, #4]
 8008d80:	f000 fb0e 	bl	80093a0 <USBD_CtlError>
        err++;
 8008d84:	7afb      	ldrb	r3, [r7, #11]
 8008d86:	3301      	adds	r3, #1
 8008d88:	72fb      	strb	r3, [r7, #11]
      break;
 8008d8a:	e11e      	b.n	8008fca <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008d92:	681b      	ldr	r3, [r3, #0]
 8008d94:	687a      	ldr	r2, [r7, #4]
 8008d96:	7c12      	ldrb	r2, [r2, #16]
 8008d98:	f107 0108 	add.w	r1, r7, #8
 8008d9c:	4610      	mov	r0, r2
 8008d9e:	4798      	blx	r3
 8008da0:	60f8      	str	r0, [r7, #12]
      break;
 8008da2:	e112      	b.n	8008fca <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	7c1b      	ldrb	r3, [r3, #16]
 8008da8:	2b00      	cmp	r3, #0
 8008daa:	d10d      	bne.n	8008dc8 <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008db2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008db4:	f107 0208 	add.w	r2, r7, #8
 8008db8:	4610      	mov	r0, r2
 8008dba:	4798      	blx	r3
 8008dbc:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008dbe:	68fb      	ldr	r3, [r7, #12]
 8008dc0:	3301      	adds	r3, #1
 8008dc2:	2202      	movs	r2, #2
 8008dc4:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8008dc6:	e100      	b.n	8008fca <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008dce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008dd0:	f107 0208 	add.w	r2, r7, #8
 8008dd4:	4610      	mov	r0, r2
 8008dd6:	4798      	blx	r3
 8008dd8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008dda:	68fb      	ldr	r3, [r7, #12]
 8008ddc:	3301      	adds	r3, #1
 8008dde:	2202      	movs	r2, #2
 8008de0:	701a      	strb	r2, [r3, #0]
      break;
 8008de2:	e0f2      	b.n	8008fca <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8008de4:	683b      	ldr	r3, [r7, #0]
 8008de6:	885b      	ldrh	r3, [r3, #2]
 8008de8:	b2db      	uxtb	r3, r3
 8008dea:	2b05      	cmp	r3, #5
 8008dec:	f200 80ac 	bhi.w	8008f48 <USBD_GetDescriptor+0x258>
 8008df0:	a201      	add	r2, pc, #4	; (adr r2, 8008df8 <USBD_GetDescriptor+0x108>)
 8008df2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008df6:	bf00      	nop
 8008df8:	08008e11 	.word	0x08008e11
 8008dfc:	08008e45 	.word	0x08008e45
 8008e00:	08008e79 	.word	0x08008e79
 8008e04:	08008ead 	.word	0x08008ead
 8008e08:	08008ee1 	.word	0x08008ee1
 8008e0c:	08008f15 	.word	0x08008f15
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008e16:	685b      	ldr	r3, [r3, #4]
 8008e18:	2b00      	cmp	r3, #0
 8008e1a:	d00b      	beq.n	8008e34 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008e22:	685b      	ldr	r3, [r3, #4]
 8008e24:	687a      	ldr	r2, [r7, #4]
 8008e26:	7c12      	ldrb	r2, [r2, #16]
 8008e28:	f107 0108 	add.w	r1, r7, #8
 8008e2c:	4610      	mov	r0, r2
 8008e2e:	4798      	blx	r3
 8008e30:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008e32:	e091      	b.n	8008f58 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008e34:	6839      	ldr	r1, [r7, #0]
 8008e36:	6878      	ldr	r0, [r7, #4]
 8008e38:	f000 fab2 	bl	80093a0 <USBD_CtlError>
            err++;
 8008e3c:	7afb      	ldrb	r3, [r7, #11]
 8008e3e:	3301      	adds	r3, #1
 8008e40:	72fb      	strb	r3, [r7, #11]
          break;
 8008e42:	e089      	b.n	8008f58 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008e4a:	689b      	ldr	r3, [r3, #8]
 8008e4c:	2b00      	cmp	r3, #0
 8008e4e:	d00b      	beq.n	8008e68 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008e56:	689b      	ldr	r3, [r3, #8]
 8008e58:	687a      	ldr	r2, [r7, #4]
 8008e5a:	7c12      	ldrb	r2, [r2, #16]
 8008e5c:	f107 0108 	add.w	r1, r7, #8
 8008e60:	4610      	mov	r0, r2
 8008e62:	4798      	blx	r3
 8008e64:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008e66:	e077      	b.n	8008f58 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008e68:	6839      	ldr	r1, [r7, #0]
 8008e6a:	6878      	ldr	r0, [r7, #4]
 8008e6c:	f000 fa98 	bl	80093a0 <USBD_CtlError>
            err++;
 8008e70:	7afb      	ldrb	r3, [r7, #11]
 8008e72:	3301      	adds	r3, #1
 8008e74:	72fb      	strb	r3, [r7, #11]
          break;
 8008e76:	e06f      	b.n	8008f58 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008e7e:	68db      	ldr	r3, [r3, #12]
 8008e80:	2b00      	cmp	r3, #0
 8008e82:	d00b      	beq.n	8008e9c <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008e8a:	68db      	ldr	r3, [r3, #12]
 8008e8c:	687a      	ldr	r2, [r7, #4]
 8008e8e:	7c12      	ldrb	r2, [r2, #16]
 8008e90:	f107 0108 	add.w	r1, r7, #8
 8008e94:	4610      	mov	r0, r2
 8008e96:	4798      	blx	r3
 8008e98:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008e9a:	e05d      	b.n	8008f58 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008e9c:	6839      	ldr	r1, [r7, #0]
 8008e9e:	6878      	ldr	r0, [r7, #4]
 8008ea0:	f000 fa7e 	bl	80093a0 <USBD_CtlError>
            err++;
 8008ea4:	7afb      	ldrb	r3, [r7, #11]
 8008ea6:	3301      	adds	r3, #1
 8008ea8:	72fb      	strb	r3, [r7, #11]
          break;
 8008eaa:	e055      	b.n	8008f58 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008eb2:	691b      	ldr	r3, [r3, #16]
 8008eb4:	2b00      	cmp	r3, #0
 8008eb6:	d00b      	beq.n	8008ed0 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008ebe:	691b      	ldr	r3, [r3, #16]
 8008ec0:	687a      	ldr	r2, [r7, #4]
 8008ec2:	7c12      	ldrb	r2, [r2, #16]
 8008ec4:	f107 0108 	add.w	r1, r7, #8
 8008ec8:	4610      	mov	r0, r2
 8008eca:	4798      	blx	r3
 8008ecc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008ece:	e043      	b.n	8008f58 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008ed0:	6839      	ldr	r1, [r7, #0]
 8008ed2:	6878      	ldr	r0, [r7, #4]
 8008ed4:	f000 fa64 	bl	80093a0 <USBD_CtlError>
            err++;
 8008ed8:	7afb      	ldrb	r3, [r7, #11]
 8008eda:	3301      	adds	r3, #1
 8008edc:	72fb      	strb	r3, [r7, #11]
          break;
 8008ede:	e03b      	b.n	8008f58 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008ee6:	695b      	ldr	r3, [r3, #20]
 8008ee8:	2b00      	cmp	r3, #0
 8008eea:	d00b      	beq.n	8008f04 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008ef2:	695b      	ldr	r3, [r3, #20]
 8008ef4:	687a      	ldr	r2, [r7, #4]
 8008ef6:	7c12      	ldrb	r2, [r2, #16]
 8008ef8:	f107 0108 	add.w	r1, r7, #8
 8008efc:	4610      	mov	r0, r2
 8008efe:	4798      	blx	r3
 8008f00:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008f02:	e029      	b.n	8008f58 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008f04:	6839      	ldr	r1, [r7, #0]
 8008f06:	6878      	ldr	r0, [r7, #4]
 8008f08:	f000 fa4a 	bl	80093a0 <USBD_CtlError>
            err++;
 8008f0c:	7afb      	ldrb	r3, [r7, #11]
 8008f0e:	3301      	adds	r3, #1
 8008f10:	72fb      	strb	r3, [r7, #11]
          break;
 8008f12:	e021      	b.n	8008f58 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008f1a:	699b      	ldr	r3, [r3, #24]
 8008f1c:	2b00      	cmp	r3, #0
 8008f1e:	d00b      	beq.n	8008f38 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008f26:	699b      	ldr	r3, [r3, #24]
 8008f28:	687a      	ldr	r2, [r7, #4]
 8008f2a:	7c12      	ldrb	r2, [r2, #16]
 8008f2c:	f107 0108 	add.w	r1, r7, #8
 8008f30:	4610      	mov	r0, r2
 8008f32:	4798      	blx	r3
 8008f34:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008f36:	e00f      	b.n	8008f58 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008f38:	6839      	ldr	r1, [r7, #0]
 8008f3a:	6878      	ldr	r0, [r7, #4]
 8008f3c:	f000 fa30 	bl	80093a0 <USBD_CtlError>
            err++;
 8008f40:	7afb      	ldrb	r3, [r7, #11]
 8008f42:	3301      	adds	r3, #1
 8008f44:	72fb      	strb	r3, [r7, #11]
          break;
 8008f46:	e007      	b.n	8008f58 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8008f48:	6839      	ldr	r1, [r7, #0]
 8008f4a:	6878      	ldr	r0, [r7, #4]
 8008f4c:	f000 fa28 	bl	80093a0 <USBD_CtlError>
          err++;
 8008f50:	7afb      	ldrb	r3, [r7, #11]
 8008f52:	3301      	adds	r3, #1
 8008f54:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 8008f56:	bf00      	nop
      }
      break;
 8008f58:	e037      	b.n	8008fca <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	7c1b      	ldrb	r3, [r3, #16]
 8008f5e:	2b00      	cmp	r3, #0
 8008f60:	d109      	bne.n	8008f76 <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008f68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008f6a:	f107 0208 	add.w	r2, r7, #8
 8008f6e:	4610      	mov	r0, r2
 8008f70:	4798      	blx	r3
 8008f72:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008f74:	e029      	b.n	8008fca <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8008f76:	6839      	ldr	r1, [r7, #0]
 8008f78:	6878      	ldr	r0, [r7, #4]
 8008f7a:	f000 fa11 	bl	80093a0 <USBD_CtlError>
        err++;
 8008f7e:	7afb      	ldrb	r3, [r7, #11]
 8008f80:	3301      	adds	r3, #1
 8008f82:	72fb      	strb	r3, [r7, #11]
      break;
 8008f84:	e021      	b.n	8008fca <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	7c1b      	ldrb	r3, [r3, #16]
 8008f8a:	2b00      	cmp	r3, #0
 8008f8c:	d10d      	bne.n	8008faa <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008f94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f96:	f107 0208 	add.w	r2, r7, #8
 8008f9a:	4610      	mov	r0, r2
 8008f9c:	4798      	blx	r3
 8008f9e:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008fa0:	68fb      	ldr	r3, [r7, #12]
 8008fa2:	3301      	adds	r3, #1
 8008fa4:	2207      	movs	r2, #7
 8008fa6:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008fa8:	e00f      	b.n	8008fca <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8008faa:	6839      	ldr	r1, [r7, #0]
 8008fac:	6878      	ldr	r0, [r7, #4]
 8008fae:	f000 f9f7 	bl	80093a0 <USBD_CtlError>
        err++;
 8008fb2:	7afb      	ldrb	r3, [r7, #11]
 8008fb4:	3301      	adds	r3, #1
 8008fb6:	72fb      	strb	r3, [r7, #11]
      break;
 8008fb8:	e007      	b.n	8008fca <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 8008fba:	6839      	ldr	r1, [r7, #0]
 8008fbc:	6878      	ldr	r0, [r7, #4]
 8008fbe:	f000 f9ef 	bl	80093a0 <USBD_CtlError>
      err++;
 8008fc2:	7afb      	ldrb	r3, [r7, #11]
 8008fc4:	3301      	adds	r3, #1
 8008fc6:	72fb      	strb	r3, [r7, #11]
      break;
 8008fc8:	bf00      	nop
  }

  if (err != 0U)
 8008fca:	7afb      	ldrb	r3, [r7, #11]
 8008fcc:	2b00      	cmp	r3, #0
 8008fce:	d11e      	bne.n	800900e <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 8008fd0:	683b      	ldr	r3, [r7, #0]
 8008fd2:	88db      	ldrh	r3, [r3, #6]
 8008fd4:	2b00      	cmp	r3, #0
 8008fd6:	d016      	beq.n	8009006 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 8008fd8:	893b      	ldrh	r3, [r7, #8]
 8008fda:	2b00      	cmp	r3, #0
 8008fdc:	d00e      	beq.n	8008ffc <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 8008fde:	683b      	ldr	r3, [r7, #0]
 8008fe0:	88da      	ldrh	r2, [r3, #6]
 8008fe2:	893b      	ldrh	r3, [r7, #8]
 8008fe4:	4293      	cmp	r3, r2
 8008fe6:	bf28      	it	cs
 8008fe8:	4613      	movcs	r3, r2
 8008fea:	b29b      	uxth	r3, r3
 8008fec:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8008fee:	893b      	ldrh	r3, [r7, #8]
 8008ff0:	461a      	mov	r2, r3
 8008ff2:	68f9      	ldr	r1, [r7, #12]
 8008ff4:	6878      	ldr	r0, [r7, #4]
 8008ff6:	f000 fa44 	bl	8009482 <USBD_CtlSendData>
 8008ffa:	e009      	b.n	8009010 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8008ffc:	6839      	ldr	r1, [r7, #0]
 8008ffe:	6878      	ldr	r0, [r7, #4]
 8009000:	f000 f9ce 	bl	80093a0 <USBD_CtlError>
 8009004:	e004      	b.n	8009010 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8009006:	6878      	ldr	r0, [r7, #4]
 8009008:	f000 fa95 	bl	8009536 <USBD_CtlSendStatus>
 800900c:	e000      	b.n	8009010 <USBD_GetDescriptor+0x320>
    return;
 800900e:	bf00      	nop
  }
}
 8009010:	3710      	adds	r7, #16
 8009012:	46bd      	mov	sp, r7
 8009014:	bd80      	pop	{r7, pc}
 8009016:	bf00      	nop

08009018 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009018:	b580      	push	{r7, lr}
 800901a:	b084      	sub	sp, #16
 800901c:	af00      	add	r7, sp, #0
 800901e:	6078      	str	r0, [r7, #4]
 8009020:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8009022:	683b      	ldr	r3, [r7, #0]
 8009024:	889b      	ldrh	r3, [r3, #4]
 8009026:	2b00      	cmp	r3, #0
 8009028:	d131      	bne.n	800908e <USBD_SetAddress+0x76>
 800902a:	683b      	ldr	r3, [r7, #0]
 800902c:	88db      	ldrh	r3, [r3, #6]
 800902e:	2b00      	cmp	r3, #0
 8009030:	d12d      	bne.n	800908e <USBD_SetAddress+0x76>
 8009032:	683b      	ldr	r3, [r7, #0]
 8009034:	885b      	ldrh	r3, [r3, #2]
 8009036:	2b7f      	cmp	r3, #127	; 0x7f
 8009038:	d829      	bhi.n	800908e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800903a:	683b      	ldr	r3, [r7, #0]
 800903c:	885b      	ldrh	r3, [r3, #2]
 800903e:	b2db      	uxtb	r3, r3
 8009040:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009044:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800904c:	b2db      	uxtb	r3, r3
 800904e:	2b03      	cmp	r3, #3
 8009050:	d104      	bne.n	800905c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8009052:	6839      	ldr	r1, [r7, #0]
 8009054:	6878      	ldr	r0, [r7, #4]
 8009056:	f000 f9a3 	bl	80093a0 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800905a:	e01d      	b.n	8009098 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	7bfa      	ldrb	r2, [r7, #15]
 8009060:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8009064:	7bfb      	ldrb	r3, [r7, #15]
 8009066:	4619      	mov	r1, r3
 8009068:	6878      	ldr	r0, [r7, #4]
 800906a:	f000 fec0 	bl	8009dee <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800906e:	6878      	ldr	r0, [r7, #4]
 8009070:	f000 fa61 	bl	8009536 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8009074:	7bfb      	ldrb	r3, [r7, #15]
 8009076:	2b00      	cmp	r3, #0
 8009078:	d004      	beq.n	8009084 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	2202      	movs	r2, #2
 800907e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009082:	e009      	b.n	8009098 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	2201      	movs	r2, #1
 8009088:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800908c:	e004      	b.n	8009098 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800908e:	6839      	ldr	r1, [r7, #0]
 8009090:	6878      	ldr	r0, [r7, #4]
 8009092:	f000 f985 	bl	80093a0 <USBD_CtlError>
  }
}
 8009096:	bf00      	nop
 8009098:	bf00      	nop
 800909a:	3710      	adds	r7, #16
 800909c:	46bd      	mov	sp, r7
 800909e:	bd80      	pop	{r7, pc}

080090a0 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80090a0:	b580      	push	{r7, lr}
 80090a2:	b084      	sub	sp, #16
 80090a4:	af00      	add	r7, sp, #0
 80090a6:	6078      	str	r0, [r7, #4]
 80090a8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80090aa:	2300      	movs	r3, #0
 80090ac:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80090ae:	683b      	ldr	r3, [r7, #0]
 80090b0:	885b      	ldrh	r3, [r3, #2]
 80090b2:	b2da      	uxtb	r2, r3
 80090b4:	4b4c      	ldr	r3, [pc, #304]	; (80091e8 <USBD_SetConfig+0x148>)
 80090b6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80090b8:	4b4b      	ldr	r3, [pc, #300]	; (80091e8 <USBD_SetConfig+0x148>)
 80090ba:	781b      	ldrb	r3, [r3, #0]
 80090bc:	2b01      	cmp	r3, #1
 80090be:	d905      	bls.n	80090cc <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80090c0:	6839      	ldr	r1, [r7, #0]
 80090c2:	6878      	ldr	r0, [r7, #4]
 80090c4:	f000 f96c 	bl	80093a0 <USBD_CtlError>
    return USBD_FAIL;
 80090c8:	2303      	movs	r3, #3
 80090ca:	e088      	b.n	80091de <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80090d2:	b2db      	uxtb	r3, r3
 80090d4:	2b02      	cmp	r3, #2
 80090d6:	d002      	beq.n	80090de <USBD_SetConfig+0x3e>
 80090d8:	2b03      	cmp	r3, #3
 80090da:	d025      	beq.n	8009128 <USBD_SetConfig+0x88>
 80090dc:	e071      	b.n	80091c2 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80090de:	4b42      	ldr	r3, [pc, #264]	; (80091e8 <USBD_SetConfig+0x148>)
 80090e0:	781b      	ldrb	r3, [r3, #0]
 80090e2:	2b00      	cmp	r3, #0
 80090e4:	d01c      	beq.n	8009120 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 80090e6:	4b40      	ldr	r3, [pc, #256]	; (80091e8 <USBD_SetConfig+0x148>)
 80090e8:	781b      	ldrb	r3, [r3, #0]
 80090ea:	461a      	mov	r2, r3
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80090f0:	4b3d      	ldr	r3, [pc, #244]	; (80091e8 <USBD_SetConfig+0x148>)
 80090f2:	781b      	ldrb	r3, [r3, #0]
 80090f4:	4619      	mov	r1, r3
 80090f6:	6878      	ldr	r0, [r7, #4]
 80090f8:	f7ff f992 	bl	8008420 <USBD_SetClassConfig>
 80090fc:	4603      	mov	r3, r0
 80090fe:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8009100:	7bfb      	ldrb	r3, [r7, #15]
 8009102:	2b00      	cmp	r3, #0
 8009104:	d004      	beq.n	8009110 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 8009106:	6839      	ldr	r1, [r7, #0]
 8009108:	6878      	ldr	r0, [r7, #4]
 800910a:	f000 f949 	bl	80093a0 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800910e:	e065      	b.n	80091dc <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8009110:	6878      	ldr	r0, [r7, #4]
 8009112:	f000 fa10 	bl	8009536 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	2203      	movs	r2, #3
 800911a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800911e:	e05d      	b.n	80091dc <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8009120:	6878      	ldr	r0, [r7, #4]
 8009122:	f000 fa08 	bl	8009536 <USBD_CtlSendStatus>
      break;
 8009126:	e059      	b.n	80091dc <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8009128:	4b2f      	ldr	r3, [pc, #188]	; (80091e8 <USBD_SetConfig+0x148>)
 800912a:	781b      	ldrb	r3, [r3, #0]
 800912c:	2b00      	cmp	r3, #0
 800912e:	d112      	bne.n	8009156 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	2202      	movs	r2, #2
 8009134:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8009138:	4b2b      	ldr	r3, [pc, #172]	; (80091e8 <USBD_SetConfig+0x148>)
 800913a:	781b      	ldrb	r3, [r3, #0]
 800913c:	461a      	mov	r2, r3
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8009142:	4b29      	ldr	r3, [pc, #164]	; (80091e8 <USBD_SetConfig+0x148>)
 8009144:	781b      	ldrb	r3, [r3, #0]
 8009146:	4619      	mov	r1, r3
 8009148:	6878      	ldr	r0, [r7, #4]
 800914a:	f7ff f985 	bl	8008458 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800914e:	6878      	ldr	r0, [r7, #4]
 8009150:	f000 f9f1 	bl	8009536 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8009154:	e042      	b.n	80091dc <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 8009156:	4b24      	ldr	r3, [pc, #144]	; (80091e8 <USBD_SetConfig+0x148>)
 8009158:	781b      	ldrb	r3, [r3, #0]
 800915a:	461a      	mov	r2, r3
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	685b      	ldr	r3, [r3, #4]
 8009160:	429a      	cmp	r2, r3
 8009162:	d02a      	beq.n	80091ba <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	685b      	ldr	r3, [r3, #4]
 8009168:	b2db      	uxtb	r3, r3
 800916a:	4619      	mov	r1, r3
 800916c:	6878      	ldr	r0, [r7, #4]
 800916e:	f7ff f973 	bl	8008458 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8009172:	4b1d      	ldr	r3, [pc, #116]	; (80091e8 <USBD_SetConfig+0x148>)
 8009174:	781b      	ldrb	r3, [r3, #0]
 8009176:	461a      	mov	r2, r3
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800917c:	4b1a      	ldr	r3, [pc, #104]	; (80091e8 <USBD_SetConfig+0x148>)
 800917e:	781b      	ldrb	r3, [r3, #0]
 8009180:	4619      	mov	r1, r3
 8009182:	6878      	ldr	r0, [r7, #4]
 8009184:	f7ff f94c 	bl	8008420 <USBD_SetClassConfig>
 8009188:	4603      	mov	r3, r0
 800918a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800918c:	7bfb      	ldrb	r3, [r7, #15]
 800918e:	2b00      	cmp	r3, #0
 8009190:	d00f      	beq.n	80091b2 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 8009192:	6839      	ldr	r1, [r7, #0]
 8009194:	6878      	ldr	r0, [r7, #4]
 8009196:	f000 f903 	bl	80093a0 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	685b      	ldr	r3, [r3, #4]
 800919e:	b2db      	uxtb	r3, r3
 80091a0:	4619      	mov	r1, r3
 80091a2:	6878      	ldr	r0, [r7, #4]
 80091a4:	f7ff f958 	bl	8008458 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	2202      	movs	r2, #2
 80091ac:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80091b0:	e014      	b.n	80091dc <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 80091b2:	6878      	ldr	r0, [r7, #4]
 80091b4:	f000 f9bf 	bl	8009536 <USBD_CtlSendStatus>
      break;
 80091b8:	e010      	b.n	80091dc <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 80091ba:	6878      	ldr	r0, [r7, #4]
 80091bc:	f000 f9bb 	bl	8009536 <USBD_CtlSendStatus>
      break;
 80091c0:	e00c      	b.n	80091dc <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 80091c2:	6839      	ldr	r1, [r7, #0]
 80091c4:	6878      	ldr	r0, [r7, #4]
 80091c6:	f000 f8eb 	bl	80093a0 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80091ca:	4b07      	ldr	r3, [pc, #28]	; (80091e8 <USBD_SetConfig+0x148>)
 80091cc:	781b      	ldrb	r3, [r3, #0]
 80091ce:	4619      	mov	r1, r3
 80091d0:	6878      	ldr	r0, [r7, #4]
 80091d2:	f7ff f941 	bl	8008458 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80091d6:	2303      	movs	r3, #3
 80091d8:	73fb      	strb	r3, [r7, #15]
      break;
 80091da:	bf00      	nop
  }

  return ret;
 80091dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80091de:	4618      	mov	r0, r3
 80091e0:	3710      	adds	r7, #16
 80091e2:	46bd      	mov	sp, r7
 80091e4:	bd80      	pop	{r7, pc}
 80091e6:	bf00      	nop
 80091e8:	200003c4 	.word	0x200003c4

080091ec <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80091ec:	b580      	push	{r7, lr}
 80091ee:	b082      	sub	sp, #8
 80091f0:	af00      	add	r7, sp, #0
 80091f2:	6078      	str	r0, [r7, #4]
 80091f4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80091f6:	683b      	ldr	r3, [r7, #0]
 80091f8:	88db      	ldrh	r3, [r3, #6]
 80091fa:	2b01      	cmp	r3, #1
 80091fc:	d004      	beq.n	8009208 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80091fe:	6839      	ldr	r1, [r7, #0]
 8009200:	6878      	ldr	r0, [r7, #4]
 8009202:	f000 f8cd 	bl	80093a0 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8009206:	e023      	b.n	8009250 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800920e:	b2db      	uxtb	r3, r3
 8009210:	2b02      	cmp	r3, #2
 8009212:	dc02      	bgt.n	800921a <USBD_GetConfig+0x2e>
 8009214:	2b00      	cmp	r3, #0
 8009216:	dc03      	bgt.n	8009220 <USBD_GetConfig+0x34>
 8009218:	e015      	b.n	8009246 <USBD_GetConfig+0x5a>
 800921a:	2b03      	cmp	r3, #3
 800921c:	d00b      	beq.n	8009236 <USBD_GetConfig+0x4a>
 800921e:	e012      	b.n	8009246 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	2200      	movs	r2, #0
 8009224:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	3308      	adds	r3, #8
 800922a:	2201      	movs	r2, #1
 800922c:	4619      	mov	r1, r3
 800922e:	6878      	ldr	r0, [r7, #4]
 8009230:	f000 f927 	bl	8009482 <USBD_CtlSendData>
        break;
 8009234:	e00c      	b.n	8009250 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	3304      	adds	r3, #4
 800923a:	2201      	movs	r2, #1
 800923c:	4619      	mov	r1, r3
 800923e:	6878      	ldr	r0, [r7, #4]
 8009240:	f000 f91f 	bl	8009482 <USBD_CtlSendData>
        break;
 8009244:	e004      	b.n	8009250 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8009246:	6839      	ldr	r1, [r7, #0]
 8009248:	6878      	ldr	r0, [r7, #4]
 800924a:	f000 f8a9 	bl	80093a0 <USBD_CtlError>
        break;
 800924e:	bf00      	nop
}
 8009250:	bf00      	nop
 8009252:	3708      	adds	r7, #8
 8009254:	46bd      	mov	sp, r7
 8009256:	bd80      	pop	{r7, pc}

08009258 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009258:	b580      	push	{r7, lr}
 800925a:	b082      	sub	sp, #8
 800925c:	af00      	add	r7, sp, #0
 800925e:	6078      	str	r0, [r7, #4]
 8009260:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009268:	b2db      	uxtb	r3, r3
 800926a:	3b01      	subs	r3, #1
 800926c:	2b02      	cmp	r3, #2
 800926e:	d81e      	bhi.n	80092ae <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8009270:	683b      	ldr	r3, [r7, #0]
 8009272:	88db      	ldrh	r3, [r3, #6]
 8009274:	2b02      	cmp	r3, #2
 8009276:	d004      	beq.n	8009282 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8009278:	6839      	ldr	r1, [r7, #0]
 800927a:	6878      	ldr	r0, [r7, #4]
 800927c:	f000 f890 	bl	80093a0 <USBD_CtlError>
        break;
 8009280:	e01a      	b.n	80092b8 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
#else
      pdev->dev_config_status = 0U;
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	2200      	movs	r2, #0
 8009286:	60da      	str	r2, [r3, #12]
#endif

      if (pdev->dev_remote_wakeup != 0U)
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800928e:	2b00      	cmp	r3, #0
 8009290:	d005      	beq.n	800929e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	68db      	ldr	r3, [r3, #12]
 8009296:	f043 0202 	orr.w	r2, r3, #2
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	330c      	adds	r3, #12
 80092a2:	2202      	movs	r2, #2
 80092a4:	4619      	mov	r1, r3
 80092a6:	6878      	ldr	r0, [r7, #4]
 80092a8:	f000 f8eb 	bl	8009482 <USBD_CtlSendData>
      break;
 80092ac:	e004      	b.n	80092b8 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80092ae:	6839      	ldr	r1, [r7, #0]
 80092b0:	6878      	ldr	r0, [r7, #4]
 80092b2:	f000 f875 	bl	80093a0 <USBD_CtlError>
      break;
 80092b6:	bf00      	nop
  }
}
 80092b8:	bf00      	nop
 80092ba:	3708      	adds	r7, #8
 80092bc:	46bd      	mov	sp, r7
 80092be:	bd80      	pop	{r7, pc}

080092c0 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80092c0:	b580      	push	{r7, lr}
 80092c2:	b082      	sub	sp, #8
 80092c4:	af00      	add	r7, sp, #0
 80092c6:	6078      	str	r0, [r7, #4]
 80092c8:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80092ca:	683b      	ldr	r3, [r7, #0]
 80092cc:	885b      	ldrh	r3, [r3, #2]
 80092ce:	2b01      	cmp	r3, #1
 80092d0:	d106      	bne.n	80092e0 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	2201      	movs	r2, #1
 80092d6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80092da:	6878      	ldr	r0, [r7, #4]
 80092dc:	f000 f92b 	bl	8009536 <USBD_CtlSendStatus>
  }
}
 80092e0:	bf00      	nop
 80092e2:	3708      	adds	r7, #8
 80092e4:	46bd      	mov	sp, r7
 80092e6:	bd80      	pop	{r7, pc}

080092e8 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80092e8:	b580      	push	{r7, lr}
 80092ea:	b082      	sub	sp, #8
 80092ec:	af00      	add	r7, sp, #0
 80092ee:	6078      	str	r0, [r7, #4]
 80092f0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80092f8:	b2db      	uxtb	r3, r3
 80092fa:	3b01      	subs	r3, #1
 80092fc:	2b02      	cmp	r3, #2
 80092fe:	d80b      	bhi.n	8009318 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009300:	683b      	ldr	r3, [r7, #0]
 8009302:	885b      	ldrh	r3, [r3, #2]
 8009304:	2b01      	cmp	r3, #1
 8009306:	d10c      	bne.n	8009322 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	2200      	movs	r2, #0
 800930c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8009310:	6878      	ldr	r0, [r7, #4]
 8009312:	f000 f910 	bl	8009536 <USBD_CtlSendStatus>
      }
      break;
 8009316:	e004      	b.n	8009322 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8009318:	6839      	ldr	r1, [r7, #0]
 800931a:	6878      	ldr	r0, [r7, #4]
 800931c:	f000 f840 	bl	80093a0 <USBD_CtlError>
      break;
 8009320:	e000      	b.n	8009324 <USBD_ClrFeature+0x3c>
      break;
 8009322:	bf00      	nop
  }
}
 8009324:	bf00      	nop
 8009326:	3708      	adds	r7, #8
 8009328:	46bd      	mov	sp, r7
 800932a:	bd80      	pop	{r7, pc}

0800932c <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800932c:	b580      	push	{r7, lr}
 800932e:	b084      	sub	sp, #16
 8009330:	af00      	add	r7, sp, #0
 8009332:	6078      	str	r0, [r7, #4]
 8009334:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8009336:	683b      	ldr	r3, [r7, #0]
 8009338:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800933a:	68fb      	ldr	r3, [r7, #12]
 800933c:	781a      	ldrb	r2, [r3, #0]
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8009342:	68fb      	ldr	r3, [r7, #12]
 8009344:	3301      	adds	r3, #1
 8009346:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8009348:	68fb      	ldr	r3, [r7, #12]
 800934a:	781a      	ldrb	r2, [r3, #0]
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8009350:	68fb      	ldr	r3, [r7, #12]
 8009352:	3301      	adds	r3, #1
 8009354:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8009356:	68f8      	ldr	r0, [r7, #12]
 8009358:	f7ff fa92 	bl	8008880 <SWAPBYTE>
 800935c:	4603      	mov	r3, r0
 800935e:	461a      	mov	r2, r3
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8009364:	68fb      	ldr	r3, [r7, #12]
 8009366:	3301      	adds	r3, #1
 8009368:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800936a:	68fb      	ldr	r3, [r7, #12]
 800936c:	3301      	adds	r3, #1
 800936e:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8009370:	68f8      	ldr	r0, [r7, #12]
 8009372:	f7ff fa85 	bl	8008880 <SWAPBYTE>
 8009376:	4603      	mov	r3, r0
 8009378:	461a      	mov	r2, r3
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800937e:	68fb      	ldr	r3, [r7, #12]
 8009380:	3301      	adds	r3, #1
 8009382:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009384:	68fb      	ldr	r3, [r7, #12]
 8009386:	3301      	adds	r3, #1
 8009388:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800938a:	68f8      	ldr	r0, [r7, #12]
 800938c:	f7ff fa78 	bl	8008880 <SWAPBYTE>
 8009390:	4603      	mov	r3, r0
 8009392:	461a      	mov	r2, r3
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	80da      	strh	r2, [r3, #6]
}
 8009398:	bf00      	nop
 800939a:	3710      	adds	r7, #16
 800939c:	46bd      	mov	sp, r7
 800939e:	bd80      	pop	{r7, pc}

080093a0 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80093a0:	b580      	push	{r7, lr}
 80093a2:	b082      	sub	sp, #8
 80093a4:	af00      	add	r7, sp, #0
 80093a6:	6078      	str	r0, [r7, #4]
 80093a8:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80093aa:	2180      	movs	r1, #128	; 0x80
 80093ac:	6878      	ldr	r0, [r7, #4]
 80093ae:	f000 fcb3 	bl	8009d18 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80093b2:	2100      	movs	r1, #0
 80093b4:	6878      	ldr	r0, [r7, #4]
 80093b6:	f000 fcaf 	bl	8009d18 <USBD_LL_StallEP>
}
 80093ba:	bf00      	nop
 80093bc:	3708      	adds	r7, #8
 80093be:	46bd      	mov	sp, r7
 80093c0:	bd80      	pop	{r7, pc}

080093c2 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80093c2:	b580      	push	{r7, lr}
 80093c4:	b086      	sub	sp, #24
 80093c6:	af00      	add	r7, sp, #0
 80093c8:	60f8      	str	r0, [r7, #12]
 80093ca:	60b9      	str	r1, [r7, #8]
 80093cc:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80093ce:	2300      	movs	r3, #0
 80093d0:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80093d2:	68fb      	ldr	r3, [r7, #12]
 80093d4:	2b00      	cmp	r3, #0
 80093d6:	d036      	beq.n	8009446 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 80093d8:	68fb      	ldr	r3, [r7, #12]
 80093da:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 80093dc:	6938      	ldr	r0, [r7, #16]
 80093de:	f000 f836 	bl	800944e <USBD_GetLen>
 80093e2:	4603      	mov	r3, r0
 80093e4:	3301      	adds	r3, #1
 80093e6:	b29b      	uxth	r3, r3
 80093e8:	005b      	lsls	r3, r3, #1
 80093ea:	b29a      	uxth	r2, r3
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80093f0:	7dfb      	ldrb	r3, [r7, #23]
 80093f2:	68ba      	ldr	r2, [r7, #8]
 80093f4:	4413      	add	r3, r2
 80093f6:	687a      	ldr	r2, [r7, #4]
 80093f8:	7812      	ldrb	r2, [r2, #0]
 80093fa:	701a      	strb	r2, [r3, #0]
  idx++;
 80093fc:	7dfb      	ldrb	r3, [r7, #23]
 80093fe:	3301      	adds	r3, #1
 8009400:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8009402:	7dfb      	ldrb	r3, [r7, #23]
 8009404:	68ba      	ldr	r2, [r7, #8]
 8009406:	4413      	add	r3, r2
 8009408:	2203      	movs	r2, #3
 800940a:	701a      	strb	r2, [r3, #0]
  idx++;
 800940c:	7dfb      	ldrb	r3, [r7, #23]
 800940e:	3301      	adds	r3, #1
 8009410:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8009412:	e013      	b.n	800943c <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8009414:	7dfb      	ldrb	r3, [r7, #23]
 8009416:	68ba      	ldr	r2, [r7, #8]
 8009418:	4413      	add	r3, r2
 800941a:	693a      	ldr	r2, [r7, #16]
 800941c:	7812      	ldrb	r2, [r2, #0]
 800941e:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8009420:	693b      	ldr	r3, [r7, #16]
 8009422:	3301      	adds	r3, #1
 8009424:	613b      	str	r3, [r7, #16]
    idx++;
 8009426:	7dfb      	ldrb	r3, [r7, #23]
 8009428:	3301      	adds	r3, #1
 800942a:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800942c:	7dfb      	ldrb	r3, [r7, #23]
 800942e:	68ba      	ldr	r2, [r7, #8]
 8009430:	4413      	add	r3, r2
 8009432:	2200      	movs	r2, #0
 8009434:	701a      	strb	r2, [r3, #0]
    idx++;
 8009436:	7dfb      	ldrb	r3, [r7, #23]
 8009438:	3301      	adds	r3, #1
 800943a:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800943c:	693b      	ldr	r3, [r7, #16]
 800943e:	781b      	ldrb	r3, [r3, #0]
 8009440:	2b00      	cmp	r3, #0
 8009442:	d1e7      	bne.n	8009414 <USBD_GetString+0x52>
 8009444:	e000      	b.n	8009448 <USBD_GetString+0x86>
    return;
 8009446:	bf00      	nop
  }
}
 8009448:	3718      	adds	r7, #24
 800944a:	46bd      	mov	sp, r7
 800944c:	bd80      	pop	{r7, pc}

0800944e <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800944e:	b480      	push	{r7}
 8009450:	b085      	sub	sp, #20
 8009452:	af00      	add	r7, sp, #0
 8009454:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8009456:	2300      	movs	r3, #0
 8009458:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800945e:	e005      	b.n	800946c <USBD_GetLen+0x1e>
  {
    len++;
 8009460:	7bfb      	ldrb	r3, [r7, #15]
 8009462:	3301      	adds	r3, #1
 8009464:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8009466:	68bb      	ldr	r3, [r7, #8]
 8009468:	3301      	adds	r3, #1
 800946a:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800946c:	68bb      	ldr	r3, [r7, #8]
 800946e:	781b      	ldrb	r3, [r3, #0]
 8009470:	2b00      	cmp	r3, #0
 8009472:	d1f5      	bne.n	8009460 <USBD_GetLen+0x12>
  }

  return len;
 8009474:	7bfb      	ldrb	r3, [r7, #15]
}
 8009476:	4618      	mov	r0, r3
 8009478:	3714      	adds	r7, #20
 800947a:	46bd      	mov	sp, r7
 800947c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009480:	4770      	bx	lr

08009482 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8009482:	b580      	push	{r7, lr}
 8009484:	b084      	sub	sp, #16
 8009486:	af00      	add	r7, sp, #0
 8009488:	60f8      	str	r0, [r7, #12]
 800948a:	60b9      	str	r1, [r7, #8]
 800948c:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800948e:	68fb      	ldr	r3, [r7, #12]
 8009490:	2202      	movs	r2, #2
 8009492:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8009496:	68fb      	ldr	r3, [r7, #12]
 8009498:	687a      	ldr	r2, [r7, #4]
 800949a:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800949c:	68fb      	ldr	r3, [r7, #12]
 800949e:	687a      	ldr	r2, [r7, #4]
 80094a0:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	68ba      	ldr	r2, [r7, #8]
 80094a6:	2100      	movs	r1, #0
 80094a8:	68f8      	ldr	r0, [r7, #12]
 80094aa:	f000 fcbf 	bl	8009e2c <USBD_LL_Transmit>

  return USBD_OK;
 80094ae:	2300      	movs	r3, #0
}
 80094b0:	4618      	mov	r0, r3
 80094b2:	3710      	adds	r7, #16
 80094b4:	46bd      	mov	sp, r7
 80094b6:	bd80      	pop	{r7, pc}

080094b8 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80094b8:	b580      	push	{r7, lr}
 80094ba:	b084      	sub	sp, #16
 80094bc:	af00      	add	r7, sp, #0
 80094be:	60f8      	str	r0, [r7, #12]
 80094c0:	60b9      	str	r1, [r7, #8]
 80094c2:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	68ba      	ldr	r2, [r7, #8]
 80094c8:	2100      	movs	r1, #0
 80094ca:	68f8      	ldr	r0, [r7, #12]
 80094cc:	f000 fcae 	bl	8009e2c <USBD_LL_Transmit>

  return USBD_OK;
 80094d0:	2300      	movs	r3, #0
}
 80094d2:	4618      	mov	r0, r3
 80094d4:	3710      	adds	r7, #16
 80094d6:	46bd      	mov	sp, r7
 80094d8:	bd80      	pop	{r7, pc}

080094da <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80094da:	b580      	push	{r7, lr}
 80094dc:	b084      	sub	sp, #16
 80094de:	af00      	add	r7, sp, #0
 80094e0:	60f8      	str	r0, [r7, #12]
 80094e2:	60b9      	str	r1, [r7, #8]
 80094e4:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80094e6:	68fb      	ldr	r3, [r7, #12]
 80094e8:	2203      	movs	r2, #3
 80094ea:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80094ee:	68fb      	ldr	r3, [r7, #12]
 80094f0:	687a      	ldr	r2, [r7, #4]
 80094f2:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 80094f6:	68fb      	ldr	r3, [r7, #12]
 80094f8:	687a      	ldr	r2, [r7, #4]
 80094fa:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	68ba      	ldr	r2, [r7, #8]
 8009502:	2100      	movs	r1, #0
 8009504:	68f8      	ldr	r0, [r7, #12]
 8009506:	f000 fcb2 	bl	8009e6e <USBD_LL_PrepareReceive>

  return USBD_OK;
 800950a:	2300      	movs	r3, #0
}
 800950c:	4618      	mov	r0, r3
 800950e:	3710      	adds	r7, #16
 8009510:	46bd      	mov	sp, r7
 8009512:	bd80      	pop	{r7, pc}

08009514 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8009514:	b580      	push	{r7, lr}
 8009516:	b084      	sub	sp, #16
 8009518:	af00      	add	r7, sp, #0
 800951a:	60f8      	str	r0, [r7, #12]
 800951c:	60b9      	str	r1, [r7, #8]
 800951e:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	68ba      	ldr	r2, [r7, #8]
 8009524:	2100      	movs	r1, #0
 8009526:	68f8      	ldr	r0, [r7, #12]
 8009528:	f000 fca1 	bl	8009e6e <USBD_LL_PrepareReceive>

  return USBD_OK;
 800952c:	2300      	movs	r3, #0
}
 800952e:	4618      	mov	r0, r3
 8009530:	3710      	adds	r7, #16
 8009532:	46bd      	mov	sp, r7
 8009534:	bd80      	pop	{r7, pc}

08009536 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8009536:	b580      	push	{r7, lr}
 8009538:	b082      	sub	sp, #8
 800953a:	af00      	add	r7, sp, #0
 800953c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	2204      	movs	r2, #4
 8009542:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8009546:	2300      	movs	r3, #0
 8009548:	2200      	movs	r2, #0
 800954a:	2100      	movs	r1, #0
 800954c:	6878      	ldr	r0, [r7, #4]
 800954e:	f000 fc6d 	bl	8009e2c <USBD_LL_Transmit>

  return USBD_OK;
 8009552:	2300      	movs	r3, #0
}
 8009554:	4618      	mov	r0, r3
 8009556:	3708      	adds	r7, #8
 8009558:	46bd      	mov	sp, r7
 800955a:	bd80      	pop	{r7, pc}

0800955c <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800955c:	b580      	push	{r7, lr}
 800955e:	b082      	sub	sp, #8
 8009560:	af00      	add	r7, sp, #0
 8009562:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	2205      	movs	r2, #5
 8009568:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800956c:	2300      	movs	r3, #0
 800956e:	2200      	movs	r2, #0
 8009570:	2100      	movs	r1, #0
 8009572:	6878      	ldr	r0, [r7, #4]
 8009574:	f000 fc7b 	bl	8009e6e <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009578:	2300      	movs	r3, #0
}
 800957a:	4618      	mov	r0, r3
 800957c:	3708      	adds	r7, #8
 800957e:	46bd      	mov	sp, r7
 8009580:	bd80      	pop	{r7, pc}
	...

08009584 <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 8009584:	b580      	push	{r7, lr}
 8009586:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 8009588:	2200      	movs	r2, #0
 800958a:	4912      	ldr	r1, [pc, #72]	; (80095d4 <MX_USB_Device_Init+0x50>)
 800958c:	4812      	ldr	r0, [pc, #72]	; (80095d8 <MX_USB_Device_Init+0x54>)
 800958e:	f7fe fed9 	bl	8008344 <USBD_Init>
 8009592:	4603      	mov	r3, r0
 8009594:	2b00      	cmp	r3, #0
 8009596:	d001      	beq.n	800959c <MX_USB_Device_Init+0x18>
    Error_Handler();
 8009598:	f7f7 fb1c 	bl	8000bd4 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 800959c:	490f      	ldr	r1, [pc, #60]	; (80095dc <MX_USB_Device_Init+0x58>)
 800959e:	480e      	ldr	r0, [pc, #56]	; (80095d8 <MX_USB_Device_Init+0x54>)
 80095a0:	f7fe ff00 	bl	80083a4 <USBD_RegisterClass>
 80095a4:	4603      	mov	r3, r0
 80095a6:	2b00      	cmp	r3, #0
 80095a8:	d001      	beq.n	80095ae <MX_USB_Device_Init+0x2a>
    Error_Handler();
 80095aa:	f7f7 fb13 	bl	8000bd4 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 80095ae:	490c      	ldr	r1, [pc, #48]	; (80095e0 <MX_USB_Device_Init+0x5c>)
 80095b0:	4809      	ldr	r0, [pc, #36]	; (80095d8 <MX_USB_Device_Init+0x54>)
 80095b2:	f7fe fe21 	bl	80081f8 <USBD_CDC_RegisterInterface>
 80095b6:	4603      	mov	r3, r0
 80095b8:	2b00      	cmp	r3, #0
 80095ba:	d001      	beq.n	80095c0 <MX_USB_Device_Init+0x3c>
    Error_Handler();
 80095bc:	f7f7 fb0a 	bl	8000bd4 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 80095c0:	4805      	ldr	r0, [pc, #20]	; (80095d8 <MX_USB_Device_Init+0x54>)
 80095c2:	f7fe ff16 	bl	80083f2 <USBD_Start>
 80095c6:	4603      	mov	r3, r0
 80095c8:	2b00      	cmp	r3, #0
 80095ca:	d001      	beq.n	80095d0 <MX_USB_Device_Init+0x4c>
    Error_Handler();
 80095cc:	f7f7 fb02 	bl	8000bd4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 80095d0:	bf00      	nop
 80095d2:	bd80      	pop	{r7, pc}
 80095d4:	20000130 	.word	0x20000130
 80095d8:	200003c8 	.word	0x200003c8
 80095dc:	20000018 	.word	0x20000018
 80095e0:	2000011c 	.word	0x2000011c

080095e4 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80095e4:	b580      	push	{r7, lr}
 80095e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80095e8:	2200      	movs	r2, #0
 80095ea:	4905      	ldr	r1, [pc, #20]	; (8009600 <CDC_Init_FS+0x1c>)
 80095ec:	4805      	ldr	r0, [pc, #20]	; (8009604 <CDC_Init_FS+0x20>)
 80095ee:	f7fe fe18 	bl	8008222 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80095f2:	4905      	ldr	r1, [pc, #20]	; (8009608 <CDC_Init_FS+0x24>)
 80095f4:	4803      	ldr	r0, [pc, #12]	; (8009604 <CDC_Init_FS+0x20>)
 80095f6:	f7fe fe32 	bl	800825e <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80095fa:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80095fc:	4618      	mov	r0, r3
 80095fe:	bd80      	pop	{r7, pc}
 8009600:	20000718 	.word	0x20000718
 8009604:	200003c8 	.word	0x200003c8
 8009608:	20000698 	.word	0x20000698

0800960c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800960c:	b480      	push	{r7}
 800960e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8009610:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8009612:	4618      	mov	r0, r3
 8009614:	46bd      	mov	sp, r7
 8009616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800961a:	4770      	bx	lr

0800961c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800961c:	b480      	push	{r7}
 800961e:	b083      	sub	sp, #12
 8009620:	af00      	add	r7, sp, #0
 8009622:	4603      	mov	r3, r0
 8009624:	6039      	str	r1, [r7, #0]
 8009626:	71fb      	strb	r3, [r7, #7]
 8009628:	4613      	mov	r3, r2
 800962a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800962c:	79fb      	ldrb	r3, [r7, #7]
 800962e:	2b23      	cmp	r3, #35	; 0x23
 8009630:	d84a      	bhi.n	80096c8 <CDC_Control_FS+0xac>
 8009632:	a201      	add	r2, pc, #4	; (adr r2, 8009638 <CDC_Control_FS+0x1c>)
 8009634:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009638:	080096c9 	.word	0x080096c9
 800963c:	080096c9 	.word	0x080096c9
 8009640:	080096c9 	.word	0x080096c9
 8009644:	080096c9 	.word	0x080096c9
 8009648:	080096c9 	.word	0x080096c9
 800964c:	080096c9 	.word	0x080096c9
 8009650:	080096c9 	.word	0x080096c9
 8009654:	080096c9 	.word	0x080096c9
 8009658:	080096c9 	.word	0x080096c9
 800965c:	080096c9 	.word	0x080096c9
 8009660:	080096c9 	.word	0x080096c9
 8009664:	080096c9 	.word	0x080096c9
 8009668:	080096c9 	.word	0x080096c9
 800966c:	080096c9 	.word	0x080096c9
 8009670:	080096c9 	.word	0x080096c9
 8009674:	080096c9 	.word	0x080096c9
 8009678:	080096c9 	.word	0x080096c9
 800967c:	080096c9 	.word	0x080096c9
 8009680:	080096c9 	.word	0x080096c9
 8009684:	080096c9 	.word	0x080096c9
 8009688:	080096c9 	.word	0x080096c9
 800968c:	080096c9 	.word	0x080096c9
 8009690:	080096c9 	.word	0x080096c9
 8009694:	080096c9 	.word	0x080096c9
 8009698:	080096c9 	.word	0x080096c9
 800969c:	080096c9 	.word	0x080096c9
 80096a0:	080096c9 	.word	0x080096c9
 80096a4:	080096c9 	.word	0x080096c9
 80096a8:	080096c9 	.word	0x080096c9
 80096ac:	080096c9 	.word	0x080096c9
 80096b0:	080096c9 	.word	0x080096c9
 80096b4:	080096c9 	.word	0x080096c9
 80096b8:	080096c9 	.word	0x080096c9
 80096bc:	080096c9 	.word	0x080096c9
 80096c0:	080096c9 	.word	0x080096c9
 80096c4:	080096c9 	.word	0x080096c9
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80096c8:	bf00      	nop
  }

  return (USBD_OK);
 80096ca:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80096cc:	4618      	mov	r0, r3
 80096ce:	370c      	adds	r7, #12
 80096d0:	46bd      	mov	sp, r7
 80096d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096d6:	4770      	bx	lr

080096d8 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80096d8:	b580      	push	{r7, lr}
 80096da:	b082      	sub	sp, #8
 80096dc:	af00      	add	r7, sp, #0
 80096de:	6078      	str	r0, [r7, #4]
 80096e0:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80096e2:	6879      	ldr	r1, [r7, #4]
 80096e4:	4812      	ldr	r0, [pc, #72]	; (8009730 <CDC_Receive_FS+0x58>)
 80096e6:	f7fe fdba 	bl	800825e <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80096ea:	4811      	ldr	r0, [pc, #68]	; (8009730 <CDC_Receive_FS+0x58>)
 80096ec:	f7fe fe00 	bl	80082f0 <USBD_CDC_ReceivePacket>

  usb_rx_size = (uint16_t) *Len;
 80096f0:	683b      	ldr	r3, [r7, #0]
 80096f2:	681b      	ldr	r3, [r3, #0]
 80096f4:	b29a      	uxth	r2, r3
 80096f6:	4b0f      	ldr	r3, [pc, #60]	; (8009734 <CDC_Receive_FS+0x5c>)
 80096f8:	801a      	strh	r2, [r3, #0]

  // clear the receive buffer
  memset(usb_rx_buffer, 0, USB_BUFFER_SIZE);
 80096fa:	2280      	movs	r2, #128	; 0x80
 80096fc:	2100      	movs	r1, #0
 80096fe:	480e      	ldr	r0, [pc, #56]	; (8009738 <CDC_Receive_FS+0x60>)
 8009700:	f000 fc9c 	bl	800a03c <memset>

  // copy the received data to the receive buffer
  memcpy(usb_rx_buffer, Buf, usb_rx_size);
 8009704:	4b0b      	ldr	r3, [pc, #44]	; (8009734 <CDC_Receive_FS+0x5c>)
 8009706:	881b      	ldrh	r3, [r3, #0]
 8009708:	461a      	mov	r2, r3
 800970a:	6879      	ldr	r1, [r7, #4]
 800970c:	480a      	ldr	r0, [pc, #40]	; (8009738 <CDC_Receive_FS+0x60>)
 800970e:	f000 fc87 	bl	800a020 <memcpy>

  // clear the original buffer
  memset(Buf, 0, usb_rx_size);
 8009712:	4b08      	ldr	r3, [pc, #32]	; (8009734 <CDC_Receive_FS+0x5c>)
 8009714:	881b      	ldrh	r3, [r3, #0]
 8009716:	461a      	mov	r2, r3
 8009718:	2100      	movs	r1, #0
 800971a:	6878      	ldr	r0, [r7, #4]
 800971c:	f000 fc8e 	bl	800a03c <memset>

  APP_handleUSBMessage();
 8009720:	f7f6 ff08 	bl	8000534 <APP_handleUSBMessage>

  return (USBD_OK);
 8009724:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8009726:	4618      	mov	r0, r3
 8009728:	3708      	adds	r7, #8
 800972a:	46bd      	mov	sp, r7
 800972c:	bd80      	pop	{r7, pc}
 800972e:	bf00      	nop
 8009730:	200003c8 	.word	0x200003c8
 8009734:	200001a0 	.word	0x200001a0
 8009738:	200001a4 	.word	0x200001a4

0800973c <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800973c:	b580      	push	{r7, lr}
 800973e:	b084      	sub	sp, #16
 8009740:	af00      	add	r7, sp, #0
 8009742:	6078      	str	r0, [r7, #4]
 8009744:	460b      	mov	r3, r1
 8009746:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8009748:	2300      	movs	r3, #0
 800974a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800974c:	4b0d      	ldr	r3, [pc, #52]	; (8009784 <CDC_Transmit_FS+0x48>)
 800974e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009752:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8009754:	68bb      	ldr	r3, [r7, #8]
 8009756:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800975a:	2b00      	cmp	r3, #0
 800975c:	d001      	beq.n	8009762 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800975e:	2301      	movs	r3, #1
 8009760:	e00b      	b.n	800977a <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8009762:	887b      	ldrh	r3, [r7, #2]
 8009764:	461a      	mov	r2, r3
 8009766:	6879      	ldr	r1, [r7, #4]
 8009768:	4806      	ldr	r0, [pc, #24]	; (8009784 <CDC_Transmit_FS+0x48>)
 800976a:	f7fe fd5a 	bl	8008222 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800976e:	4805      	ldr	r0, [pc, #20]	; (8009784 <CDC_Transmit_FS+0x48>)
 8009770:	f7fe fd8e 	bl	8008290 <USBD_CDC_TransmitPacket>
 8009774:	4603      	mov	r3, r0
 8009776:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8009778:	7bfb      	ldrb	r3, [r7, #15]
}
 800977a:	4618      	mov	r0, r3
 800977c:	3710      	adds	r7, #16
 800977e:	46bd      	mov	sp, r7
 8009780:	bd80      	pop	{r7, pc}
 8009782:	bf00      	nop
 8009784:	200003c8 	.word	0x200003c8

08009788 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8009788:	b480      	push	{r7}
 800978a:	b087      	sub	sp, #28
 800978c:	af00      	add	r7, sp, #0
 800978e:	60f8      	str	r0, [r7, #12]
 8009790:	60b9      	str	r1, [r7, #8]
 8009792:	4613      	mov	r3, r2
 8009794:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8009796:	2300      	movs	r3, #0
 8009798:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800979a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800979e:	4618      	mov	r0, r3
 80097a0:	371c      	adds	r7, #28
 80097a2:	46bd      	mov	sp, r7
 80097a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097a8:	4770      	bx	lr
	...

080097ac <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80097ac:	b480      	push	{r7}
 80097ae:	b083      	sub	sp, #12
 80097b0:	af00      	add	r7, sp, #0
 80097b2:	4603      	mov	r3, r0
 80097b4:	6039      	str	r1, [r7, #0]
 80097b6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 80097b8:	683b      	ldr	r3, [r7, #0]
 80097ba:	2212      	movs	r2, #18
 80097bc:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 80097be:	4b03      	ldr	r3, [pc, #12]	; (80097cc <USBD_CDC_DeviceDescriptor+0x20>)
}
 80097c0:	4618      	mov	r0, r3
 80097c2:	370c      	adds	r7, #12
 80097c4:	46bd      	mov	sp, r7
 80097c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097ca:	4770      	bx	lr
 80097cc:	20000150 	.word	0x20000150

080097d0 <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80097d0:	b480      	push	{r7}
 80097d2:	b083      	sub	sp, #12
 80097d4:	af00      	add	r7, sp, #0
 80097d6:	4603      	mov	r3, r0
 80097d8:	6039      	str	r1, [r7, #0]
 80097da:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80097dc:	683b      	ldr	r3, [r7, #0]
 80097de:	2204      	movs	r2, #4
 80097e0:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80097e2:	4b03      	ldr	r3, [pc, #12]	; (80097f0 <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 80097e4:	4618      	mov	r0, r3
 80097e6:	370c      	adds	r7, #12
 80097e8:	46bd      	mov	sp, r7
 80097ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097ee:	4770      	bx	lr
 80097f0:	20000164 	.word	0x20000164

080097f4 <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80097f4:	b580      	push	{r7, lr}
 80097f6:	b082      	sub	sp, #8
 80097f8:	af00      	add	r7, sp, #0
 80097fa:	4603      	mov	r3, r0
 80097fc:	6039      	str	r1, [r7, #0]
 80097fe:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009800:	79fb      	ldrb	r3, [r7, #7]
 8009802:	2b00      	cmp	r3, #0
 8009804:	d105      	bne.n	8009812 <USBD_CDC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 8009806:	683a      	ldr	r2, [r7, #0]
 8009808:	4907      	ldr	r1, [pc, #28]	; (8009828 <USBD_CDC_ProductStrDescriptor+0x34>)
 800980a:	4808      	ldr	r0, [pc, #32]	; (800982c <USBD_CDC_ProductStrDescriptor+0x38>)
 800980c:	f7ff fdd9 	bl	80093c2 <USBD_GetString>
 8009810:	e004      	b.n	800981c <USBD_CDC_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 8009812:	683a      	ldr	r2, [r7, #0]
 8009814:	4904      	ldr	r1, [pc, #16]	; (8009828 <USBD_CDC_ProductStrDescriptor+0x34>)
 8009816:	4805      	ldr	r0, [pc, #20]	; (800982c <USBD_CDC_ProductStrDescriptor+0x38>)
 8009818:	f7ff fdd3 	bl	80093c2 <USBD_GetString>
  }
  return USBD_StrDesc;
 800981c:	4b02      	ldr	r3, [pc, #8]	; (8009828 <USBD_CDC_ProductStrDescriptor+0x34>)
}
 800981e:	4618      	mov	r0, r3
 8009820:	3708      	adds	r7, #8
 8009822:	46bd      	mov	sp, r7
 8009824:	bd80      	pop	{r7, pc}
 8009826:	bf00      	nop
 8009828:	20000798 	.word	0x20000798
 800982c:	0800a064 	.word	0x0800a064

08009830 <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009830:	b580      	push	{r7, lr}
 8009832:	b082      	sub	sp, #8
 8009834:	af00      	add	r7, sp, #0
 8009836:	4603      	mov	r3, r0
 8009838:	6039      	str	r1, [r7, #0]
 800983a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800983c:	683a      	ldr	r2, [r7, #0]
 800983e:	4904      	ldr	r1, [pc, #16]	; (8009850 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 8009840:	4804      	ldr	r0, [pc, #16]	; (8009854 <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 8009842:	f7ff fdbe 	bl	80093c2 <USBD_GetString>
  return USBD_StrDesc;
 8009846:	4b02      	ldr	r3, [pc, #8]	; (8009850 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
}
 8009848:	4618      	mov	r0, r3
 800984a:	3708      	adds	r7, #8
 800984c:	46bd      	mov	sp, r7
 800984e:	bd80      	pop	{r7, pc}
 8009850:	20000798 	.word	0x20000798
 8009854:	0800a07c 	.word	0x0800a07c

08009858 <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009858:	b580      	push	{r7, lr}
 800985a:	b082      	sub	sp, #8
 800985c:	af00      	add	r7, sp, #0
 800985e:	4603      	mov	r3, r0
 8009860:	6039      	str	r1, [r7, #0]
 8009862:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8009864:	683b      	ldr	r3, [r7, #0]
 8009866:	221a      	movs	r2, #26
 8009868:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800986a:	f000 f843 	bl	80098f4 <Get_SerialNum>

  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */

  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 800986e:	4b02      	ldr	r3, [pc, #8]	; (8009878 <USBD_CDC_SerialStrDescriptor+0x20>)
}
 8009870:	4618      	mov	r0, r3
 8009872:	3708      	adds	r7, #8
 8009874:	46bd      	mov	sp, r7
 8009876:	bd80      	pop	{r7, pc}
 8009878:	20000168 	.word	0x20000168

0800987c <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800987c:	b580      	push	{r7, lr}
 800987e:	b082      	sub	sp, #8
 8009880:	af00      	add	r7, sp, #0
 8009882:	4603      	mov	r3, r0
 8009884:	6039      	str	r1, [r7, #0]
 8009886:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8009888:	79fb      	ldrb	r3, [r7, #7]
 800988a:	2b00      	cmp	r3, #0
 800988c:	d105      	bne.n	800989a <USBD_CDC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800988e:	683a      	ldr	r2, [r7, #0]
 8009890:	4907      	ldr	r1, [pc, #28]	; (80098b0 <USBD_CDC_ConfigStrDescriptor+0x34>)
 8009892:	4808      	ldr	r0, [pc, #32]	; (80098b4 <USBD_CDC_ConfigStrDescriptor+0x38>)
 8009894:	f7ff fd95 	bl	80093c2 <USBD_GetString>
 8009898:	e004      	b.n	80098a4 <USBD_CDC_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800989a:	683a      	ldr	r2, [r7, #0]
 800989c:	4904      	ldr	r1, [pc, #16]	; (80098b0 <USBD_CDC_ConfigStrDescriptor+0x34>)
 800989e:	4805      	ldr	r0, [pc, #20]	; (80098b4 <USBD_CDC_ConfigStrDescriptor+0x38>)
 80098a0:	f7ff fd8f 	bl	80093c2 <USBD_GetString>
  }
  return USBD_StrDesc;
 80098a4:	4b02      	ldr	r3, [pc, #8]	; (80098b0 <USBD_CDC_ConfigStrDescriptor+0x34>)
}
 80098a6:	4618      	mov	r0, r3
 80098a8:	3708      	adds	r7, #8
 80098aa:	46bd      	mov	sp, r7
 80098ac:	bd80      	pop	{r7, pc}
 80098ae:	bf00      	nop
 80098b0:	20000798 	.word	0x20000798
 80098b4:	0800a08c 	.word	0x0800a08c

080098b8 <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80098b8:	b580      	push	{r7, lr}
 80098ba:	b082      	sub	sp, #8
 80098bc:	af00      	add	r7, sp, #0
 80098be:	4603      	mov	r3, r0
 80098c0:	6039      	str	r1, [r7, #0]
 80098c2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80098c4:	79fb      	ldrb	r3, [r7, #7]
 80098c6:	2b00      	cmp	r3, #0
 80098c8:	d105      	bne.n	80098d6 <USBD_CDC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 80098ca:	683a      	ldr	r2, [r7, #0]
 80098cc:	4907      	ldr	r1, [pc, #28]	; (80098ec <USBD_CDC_InterfaceStrDescriptor+0x34>)
 80098ce:	4808      	ldr	r0, [pc, #32]	; (80098f0 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 80098d0:	f7ff fd77 	bl	80093c2 <USBD_GetString>
 80098d4:	e004      	b.n	80098e0 <USBD_CDC_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 80098d6:	683a      	ldr	r2, [r7, #0]
 80098d8:	4904      	ldr	r1, [pc, #16]	; (80098ec <USBD_CDC_InterfaceStrDescriptor+0x34>)
 80098da:	4805      	ldr	r0, [pc, #20]	; (80098f0 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 80098dc:	f7ff fd71 	bl	80093c2 <USBD_GetString>
  }
  return USBD_StrDesc;
 80098e0:	4b02      	ldr	r3, [pc, #8]	; (80098ec <USBD_CDC_InterfaceStrDescriptor+0x34>)
}
 80098e2:	4618      	mov	r0, r3
 80098e4:	3708      	adds	r7, #8
 80098e6:	46bd      	mov	sp, r7
 80098e8:	bd80      	pop	{r7, pc}
 80098ea:	bf00      	nop
 80098ec:	20000798 	.word	0x20000798
 80098f0:	0800a098 	.word	0x0800a098

080098f4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80098f4:	b580      	push	{r7, lr}
 80098f6:	b084      	sub	sp, #16
 80098f8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80098fa:	4b0f      	ldr	r3, [pc, #60]	; (8009938 <Get_SerialNum+0x44>)
 80098fc:	681b      	ldr	r3, [r3, #0]
 80098fe:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8009900:	4b0e      	ldr	r3, [pc, #56]	; (800993c <Get_SerialNum+0x48>)
 8009902:	681b      	ldr	r3, [r3, #0]
 8009904:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8009906:	4b0e      	ldr	r3, [pc, #56]	; (8009940 <Get_SerialNum+0x4c>)
 8009908:	681b      	ldr	r3, [r3, #0]
 800990a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800990c:	68fa      	ldr	r2, [r7, #12]
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	4413      	add	r3, r2
 8009912:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8009914:	68fb      	ldr	r3, [r7, #12]
 8009916:	2b00      	cmp	r3, #0
 8009918:	d009      	beq.n	800992e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800991a:	2208      	movs	r2, #8
 800991c:	4909      	ldr	r1, [pc, #36]	; (8009944 <Get_SerialNum+0x50>)
 800991e:	68f8      	ldr	r0, [r7, #12]
 8009920:	f000 f814 	bl	800994c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8009924:	2204      	movs	r2, #4
 8009926:	4908      	ldr	r1, [pc, #32]	; (8009948 <Get_SerialNum+0x54>)
 8009928:	68b8      	ldr	r0, [r7, #8]
 800992a:	f000 f80f 	bl	800994c <IntToUnicode>
  }
}
 800992e:	bf00      	nop
 8009930:	3710      	adds	r7, #16
 8009932:	46bd      	mov	sp, r7
 8009934:	bd80      	pop	{r7, pc}
 8009936:	bf00      	nop
 8009938:	1fff7590 	.word	0x1fff7590
 800993c:	1fff7594 	.word	0x1fff7594
 8009940:	1fff7598 	.word	0x1fff7598
 8009944:	2000016a 	.word	0x2000016a
 8009948:	2000017a 	.word	0x2000017a

0800994c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800994c:	b480      	push	{r7}
 800994e:	b087      	sub	sp, #28
 8009950:	af00      	add	r7, sp, #0
 8009952:	60f8      	str	r0, [r7, #12]
 8009954:	60b9      	str	r1, [r7, #8]
 8009956:	4613      	mov	r3, r2
 8009958:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800995a:	2300      	movs	r3, #0
 800995c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800995e:	2300      	movs	r3, #0
 8009960:	75fb      	strb	r3, [r7, #23]
 8009962:	e027      	b.n	80099b4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8009964:	68fb      	ldr	r3, [r7, #12]
 8009966:	0f1b      	lsrs	r3, r3, #28
 8009968:	2b09      	cmp	r3, #9
 800996a:	d80b      	bhi.n	8009984 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800996c:	68fb      	ldr	r3, [r7, #12]
 800996e:	0f1b      	lsrs	r3, r3, #28
 8009970:	b2da      	uxtb	r2, r3
 8009972:	7dfb      	ldrb	r3, [r7, #23]
 8009974:	005b      	lsls	r3, r3, #1
 8009976:	4619      	mov	r1, r3
 8009978:	68bb      	ldr	r3, [r7, #8]
 800997a:	440b      	add	r3, r1
 800997c:	3230      	adds	r2, #48	; 0x30
 800997e:	b2d2      	uxtb	r2, r2
 8009980:	701a      	strb	r2, [r3, #0]
 8009982:	e00a      	b.n	800999a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8009984:	68fb      	ldr	r3, [r7, #12]
 8009986:	0f1b      	lsrs	r3, r3, #28
 8009988:	b2da      	uxtb	r2, r3
 800998a:	7dfb      	ldrb	r3, [r7, #23]
 800998c:	005b      	lsls	r3, r3, #1
 800998e:	4619      	mov	r1, r3
 8009990:	68bb      	ldr	r3, [r7, #8]
 8009992:	440b      	add	r3, r1
 8009994:	3237      	adds	r2, #55	; 0x37
 8009996:	b2d2      	uxtb	r2, r2
 8009998:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800999a:	68fb      	ldr	r3, [r7, #12]
 800999c:	011b      	lsls	r3, r3, #4
 800999e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80099a0:	7dfb      	ldrb	r3, [r7, #23]
 80099a2:	005b      	lsls	r3, r3, #1
 80099a4:	3301      	adds	r3, #1
 80099a6:	68ba      	ldr	r2, [r7, #8]
 80099a8:	4413      	add	r3, r2
 80099aa:	2200      	movs	r2, #0
 80099ac:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80099ae:	7dfb      	ldrb	r3, [r7, #23]
 80099b0:	3301      	adds	r3, #1
 80099b2:	75fb      	strb	r3, [r7, #23]
 80099b4:	7dfa      	ldrb	r2, [r7, #23]
 80099b6:	79fb      	ldrb	r3, [r7, #7]
 80099b8:	429a      	cmp	r2, r3
 80099ba:	d3d3      	bcc.n	8009964 <IntToUnicode+0x18>
  }
}
 80099bc:	bf00      	nop
 80099be:	bf00      	nop
 80099c0:	371c      	adds	r7, #28
 80099c2:	46bd      	mov	sp, r7
 80099c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099c8:	4770      	bx	lr
	...

080099cc <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80099cc:	b580      	push	{r7, lr}
 80099ce:	b094      	sub	sp, #80	; 0x50
 80099d0:	af00      	add	r7, sp, #0
 80099d2:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80099d4:	f107 030c 	add.w	r3, r7, #12
 80099d8:	2244      	movs	r2, #68	; 0x44
 80099da:	2100      	movs	r1, #0
 80099dc:	4618      	mov	r0, r3
 80099de:	f000 fb2d 	bl	800a03c <memset>
  if(pcdHandle->Instance==USB)
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	681b      	ldr	r3, [r3, #0]
 80099e6:	4a15      	ldr	r2, [pc, #84]	; (8009a3c <HAL_PCD_MspInit+0x70>)
 80099e8:	4293      	cmp	r3, r2
 80099ea:	d123      	bne.n	8009a34 <HAL_PCD_MspInit+0x68>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80099ec:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80099f0:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 80099f2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80099f6:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80099f8:	f107 030c 	add.w	r3, r7, #12
 80099fc:	4618      	mov	r0, r3
 80099fe:	f7fa fee5 	bl	80047cc <HAL_RCCEx_PeriphCLKConfig>
 8009a02:	4603      	mov	r3, r0
 8009a04:	2b00      	cmp	r3, #0
 8009a06:	d001      	beq.n	8009a0c <HAL_PCD_MspInit+0x40>
    {
      Error_Handler();
 8009a08:	f7f7 f8e4 	bl	8000bd4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8009a0c:	4b0c      	ldr	r3, [pc, #48]	; (8009a40 <HAL_PCD_MspInit+0x74>)
 8009a0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009a10:	4a0b      	ldr	r2, [pc, #44]	; (8009a40 <HAL_PCD_MspInit+0x74>)
 8009a12:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8009a16:	6593      	str	r3, [r2, #88]	; 0x58
 8009a18:	4b09      	ldr	r3, [pc, #36]	; (8009a40 <HAL_PCD_MspInit+0x74>)
 8009a1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009a1c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009a20:	60bb      	str	r3, [r7, #8]
 8009a22:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 8009a24:	2200      	movs	r2, #0
 8009a26:	2100      	movs	r1, #0
 8009a28:	2014      	movs	r0, #20
 8009a2a:	f7f7 fba0 	bl	800116e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 8009a2e:	2014      	movs	r0, #20
 8009a30:	f7f7 fbb7 	bl	80011a2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8009a34:	bf00      	nop
 8009a36:	3750      	adds	r7, #80	; 0x50
 8009a38:	46bd      	mov	sp, r7
 8009a3a:	bd80      	pop	{r7, pc}
 8009a3c:	40005c00 	.word	0x40005c00
 8009a40:	40021000 	.word	0x40021000

08009a44 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009a44:	b580      	push	{r7, lr}
 8009a46:	b082      	sub	sp, #8
 8009a48:	af00      	add	r7, sp, #0
 8009a4a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	f8d3 22f0 	ldr.w	r2, [r3, #752]	; 0x2f0
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8009a58:	4619      	mov	r1, r3
 8009a5a:	4610      	mov	r0, r2
 8009a5c:	f7fe fd14 	bl	8008488 <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 8009a60:	bf00      	nop
 8009a62:	3708      	adds	r7, #8
 8009a64:	46bd      	mov	sp, r7
 8009a66:	bd80      	pop	{r7, pc}

08009a68 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009a68:	b580      	push	{r7, lr}
 8009a6a:	b082      	sub	sp, #8
 8009a6c:	af00      	add	r7, sp, #0
 8009a6e:	6078      	str	r0, [r7, #4]
 8009a70:	460b      	mov	r3, r1
 8009a72:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	f8d3 02f0 	ldr.w	r0, [r3, #752]	; 0x2f0
 8009a7a:	78fa      	ldrb	r2, [r7, #3]
 8009a7c:	6879      	ldr	r1, [r7, #4]
 8009a7e:	4613      	mov	r3, r2
 8009a80:	009b      	lsls	r3, r3, #2
 8009a82:	4413      	add	r3, r2
 8009a84:	00db      	lsls	r3, r3, #3
 8009a86:	440b      	add	r3, r1
 8009a88:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8009a8c:	681a      	ldr	r2, [r3, #0]
 8009a8e:	78fb      	ldrb	r3, [r7, #3]
 8009a90:	4619      	mov	r1, r3
 8009a92:	f7fe fd4e 	bl	8008532 <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 8009a96:	bf00      	nop
 8009a98:	3708      	adds	r7, #8
 8009a9a:	46bd      	mov	sp, r7
 8009a9c:	bd80      	pop	{r7, pc}

08009a9e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009a9e:	b580      	push	{r7, lr}
 8009aa0:	b082      	sub	sp, #8
 8009aa2:	af00      	add	r7, sp, #0
 8009aa4:	6078      	str	r0, [r7, #4]
 8009aa6:	460b      	mov	r3, r1
 8009aa8:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	f8d3 02f0 	ldr.w	r0, [r3, #752]	; 0x2f0
 8009ab0:	78fa      	ldrb	r2, [r7, #3]
 8009ab2:	6879      	ldr	r1, [r7, #4]
 8009ab4:	4613      	mov	r3, r2
 8009ab6:	009b      	lsls	r3, r3, #2
 8009ab8:	4413      	add	r3, r2
 8009aba:	00db      	lsls	r3, r3, #3
 8009abc:	440b      	add	r3, r1
 8009abe:	333c      	adds	r3, #60	; 0x3c
 8009ac0:	681a      	ldr	r2, [r3, #0]
 8009ac2:	78fb      	ldrb	r3, [r7, #3]
 8009ac4:	4619      	mov	r1, r3
 8009ac6:	f7fe fd97 	bl	80085f8 <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 8009aca:	bf00      	nop
 8009acc:	3708      	adds	r7, #8
 8009ace:	46bd      	mov	sp, r7
 8009ad0:	bd80      	pop	{r7, pc}

08009ad2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009ad2:	b580      	push	{r7, lr}
 8009ad4:	b082      	sub	sp, #8
 8009ad6:	af00      	add	r7, sp, #0
 8009ad8:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8009ae0:	4618      	mov	r0, r3
 8009ae2:	f7fe feab 	bl	800883c <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 8009ae6:	bf00      	nop
 8009ae8:	3708      	adds	r7, #8
 8009aea:	46bd      	mov	sp, r7
 8009aec:	bd80      	pop	{r7, pc}

08009aee <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009aee:	b580      	push	{r7, lr}
 8009af0:	b084      	sub	sp, #16
 8009af2:	af00      	add	r7, sp, #0
 8009af4:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8009af6:	2301      	movs	r3, #1
 8009af8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	689b      	ldr	r3, [r3, #8]
 8009afe:	2b02      	cmp	r3, #2
 8009b00:	d001      	beq.n	8009b06 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8009b02:	f7f7 f867 	bl	8000bd4 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8009b0c:	7bfa      	ldrb	r2, [r7, #15]
 8009b0e:	4611      	mov	r1, r2
 8009b10:	4618      	mov	r0, r3
 8009b12:	f7fe fe55 	bl	80087c0 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8009b1c:	4618      	mov	r0, r3
 8009b1e:	f7fe fe01 	bl	8008724 <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 8009b22:	bf00      	nop
 8009b24:	3710      	adds	r7, #16
 8009b26:	46bd      	mov	sp, r7
 8009b28:	bd80      	pop	{r7, pc}
	...

08009b2c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009b2c:	b580      	push	{r7, lr}
 8009b2e:	b082      	sub	sp, #8
 8009b30:	af00      	add	r7, sp, #0
 8009b32:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8009b3a:	4618      	mov	r0, r3
 8009b3c:	f7fe fe50 	bl	80087e0 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	699b      	ldr	r3, [r3, #24]
 8009b44:	2b00      	cmp	r3, #0
 8009b46:	d005      	beq.n	8009b54 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009b48:	4b04      	ldr	r3, [pc, #16]	; (8009b5c <HAL_PCD_SuspendCallback+0x30>)
 8009b4a:	691b      	ldr	r3, [r3, #16]
 8009b4c:	4a03      	ldr	r2, [pc, #12]	; (8009b5c <HAL_PCD_SuspendCallback+0x30>)
 8009b4e:	f043 0306 	orr.w	r3, r3, #6
 8009b52:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 8009b54:	bf00      	nop
 8009b56:	3708      	adds	r7, #8
 8009b58:	46bd      	mov	sp, r7
 8009b5a:	bd80      	pop	{r7, pc}
 8009b5c:	e000ed00 	.word	0xe000ed00

08009b60 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009b60:	b580      	push	{r7, lr}
 8009b62:	b082      	sub	sp, #8
 8009b64:	af00      	add	r7, sp, #0
 8009b66:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	699b      	ldr	r3, [r3, #24]
 8009b6c:	2b00      	cmp	r3, #0
 8009b6e:	d007      	beq.n	8009b80 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009b70:	4b08      	ldr	r3, [pc, #32]	; (8009b94 <HAL_PCD_ResumeCallback+0x34>)
 8009b72:	691b      	ldr	r3, [r3, #16]
 8009b74:	4a07      	ldr	r2, [pc, #28]	; (8009b94 <HAL_PCD_ResumeCallback+0x34>)
 8009b76:	f023 0306 	bic.w	r3, r3, #6
 8009b7a:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 8009b7c:	f000 f9fa 	bl	8009f74 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8009b86:	4618      	mov	r0, r3
 8009b88:	f7fe fe40 	bl	800880c <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 8009b8c:	bf00      	nop
 8009b8e:	3708      	adds	r7, #8
 8009b90:	46bd      	mov	sp, r7
 8009b92:	bd80      	pop	{r7, pc}
 8009b94:	e000ed00 	.word	0xe000ed00

08009b98 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8009b98:	b580      	push	{r7, lr}
 8009b9a:	b082      	sub	sp, #8
 8009b9c:	af00      	add	r7, sp, #0
 8009b9e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 8009ba0:	4a2b      	ldr	r2, [pc, #172]	; (8009c50 <USBD_LL_Init+0xb8>)
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	f8c2 32f0 	str.w	r3, [r2, #752]	; 0x2f0
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	4a29      	ldr	r2, [pc, #164]	; (8009c50 <USBD_LL_Init+0xb8>)
 8009bac:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_FS.Instance = USB;
 8009bb0:	4b27      	ldr	r3, [pc, #156]	; (8009c50 <USBD_LL_Init+0xb8>)
 8009bb2:	4a28      	ldr	r2, [pc, #160]	; (8009c54 <USBD_LL_Init+0xbc>)
 8009bb4:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8009bb6:	4b26      	ldr	r3, [pc, #152]	; (8009c50 <USBD_LL_Init+0xb8>)
 8009bb8:	2208      	movs	r2, #8
 8009bba:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8009bbc:	4b24      	ldr	r3, [pc, #144]	; (8009c50 <USBD_LL_Init+0xb8>)
 8009bbe:	2202      	movs	r2, #2
 8009bc0:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8009bc2:	4b23      	ldr	r3, [pc, #140]	; (8009c50 <USBD_LL_Init+0xb8>)
 8009bc4:	2202      	movs	r2, #2
 8009bc6:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8009bc8:	4b21      	ldr	r3, [pc, #132]	; (8009c50 <USBD_LL_Init+0xb8>)
 8009bca:	2200      	movs	r2, #0
 8009bcc:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8009bce:	4b20      	ldr	r3, [pc, #128]	; (8009c50 <USBD_LL_Init+0xb8>)
 8009bd0:	2200      	movs	r2, #0
 8009bd2:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8009bd4:	4b1e      	ldr	r3, [pc, #120]	; (8009c50 <USBD_LL_Init+0xb8>)
 8009bd6:	2200      	movs	r2, #0
 8009bd8:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8009bda:	4b1d      	ldr	r3, [pc, #116]	; (8009c50 <USBD_LL_Init+0xb8>)
 8009bdc:	2200      	movs	r2, #0
 8009bde:	621a      	str	r2, [r3, #32]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8009be0:	481b      	ldr	r0, [pc, #108]	; (8009c50 <USBD_LL_Init+0xb8>)
 8009be2:	f7f8 fae7 	bl	80021b4 <HAL_PCD_Init>
 8009be6:	4603      	mov	r3, r0
 8009be8:	2b00      	cmp	r3, #0
 8009bea:	d001      	beq.n	8009bf0 <USBD_LL_Init+0x58>
  {
    Error_Handler( );
 8009bec:	f7f6 fff2 	bl	8000bd4 <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8009bf6:	2318      	movs	r3, #24
 8009bf8:	2200      	movs	r2, #0
 8009bfa:	2100      	movs	r1, #0
 8009bfc:	f7f9 ffa0 	bl	8003b40 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8009c06:	2358      	movs	r3, #88	; 0x58
 8009c08:	2200      	movs	r2, #0
 8009c0a:	2180      	movs	r1, #128	; 0x80
 8009c0c:	f7f9 ff98 	bl	8003b40 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8009c16:	23c0      	movs	r3, #192	; 0xc0
 8009c18:	2200      	movs	r2, #0
 8009c1a:	2181      	movs	r1, #129	; 0x81
 8009c1c:	f7f9 ff90 	bl	8003b40 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8009c26:	f44f 7388 	mov.w	r3, #272	; 0x110
 8009c2a:	2200      	movs	r2, #0
 8009c2c:	2101      	movs	r1, #1
 8009c2e:	f7f9 ff87 	bl	8003b40 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8009c38:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009c3c:	2200      	movs	r2, #0
 8009c3e:	2182      	movs	r1, #130	; 0x82
 8009c40:	f7f9 ff7e 	bl	8003b40 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8009c44:	2300      	movs	r3, #0
}
 8009c46:	4618      	mov	r0, r3
 8009c48:	3708      	adds	r7, #8
 8009c4a:	46bd      	mov	sp, r7
 8009c4c:	bd80      	pop	{r7, pc}
 8009c4e:	bf00      	nop
 8009c50:	20000998 	.word	0x20000998
 8009c54:	40005c00 	.word	0x40005c00

08009c58 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8009c58:	b580      	push	{r7, lr}
 8009c5a:	b084      	sub	sp, #16
 8009c5c:	af00      	add	r7, sp, #0
 8009c5e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009c60:	2300      	movs	r3, #0
 8009c62:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009c64:	2300      	movs	r3, #0
 8009c66:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009c6e:	4618      	mov	r0, r3
 8009c70:	f7f8 fb85 	bl	800237e <HAL_PCD_Start>
 8009c74:	4603      	mov	r3, r0
 8009c76:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009c78:	7bfb      	ldrb	r3, [r7, #15]
 8009c7a:	4618      	mov	r0, r3
 8009c7c:	f000 f980 	bl	8009f80 <USBD_Get_USB_Status>
 8009c80:	4603      	mov	r3, r0
 8009c82:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009c84:	7bbb      	ldrb	r3, [r7, #14]
}
 8009c86:	4618      	mov	r0, r3
 8009c88:	3710      	adds	r7, #16
 8009c8a:	46bd      	mov	sp, r7
 8009c8c:	bd80      	pop	{r7, pc}

08009c8e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8009c8e:	b580      	push	{r7, lr}
 8009c90:	b084      	sub	sp, #16
 8009c92:	af00      	add	r7, sp, #0
 8009c94:	6078      	str	r0, [r7, #4]
 8009c96:	4608      	mov	r0, r1
 8009c98:	4611      	mov	r1, r2
 8009c9a:	461a      	mov	r2, r3
 8009c9c:	4603      	mov	r3, r0
 8009c9e:	70fb      	strb	r3, [r7, #3]
 8009ca0:	460b      	mov	r3, r1
 8009ca2:	70bb      	strb	r3, [r7, #2]
 8009ca4:	4613      	mov	r3, r2
 8009ca6:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009ca8:	2300      	movs	r3, #0
 8009caa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009cac:	2300      	movs	r3, #0
 8009cae:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8009cb6:	78bb      	ldrb	r3, [r7, #2]
 8009cb8:	883a      	ldrh	r2, [r7, #0]
 8009cba:	78f9      	ldrb	r1, [r7, #3]
 8009cbc:	f7f8 fccd 	bl	800265a <HAL_PCD_EP_Open>
 8009cc0:	4603      	mov	r3, r0
 8009cc2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009cc4:	7bfb      	ldrb	r3, [r7, #15]
 8009cc6:	4618      	mov	r0, r3
 8009cc8:	f000 f95a 	bl	8009f80 <USBD_Get_USB_Status>
 8009ccc:	4603      	mov	r3, r0
 8009cce:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009cd0:	7bbb      	ldrb	r3, [r7, #14]
}
 8009cd2:	4618      	mov	r0, r3
 8009cd4:	3710      	adds	r7, #16
 8009cd6:	46bd      	mov	sp, r7
 8009cd8:	bd80      	pop	{r7, pc}

08009cda <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009cda:	b580      	push	{r7, lr}
 8009cdc:	b084      	sub	sp, #16
 8009cde:	af00      	add	r7, sp, #0
 8009ce0:	6078      	str	r0, [r7, #4]
 8009ce2:	460b      	mov	r3, r1
 8009ce4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009ce6:	2300      	movs	r3, #0
 8009ce8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009cea:	2300      	movs	r3, #0
 8009cec:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009cf4:	78fa      	ldrb	r2, [r7, #3]
 8009cf6:	4611      	mov	r1, r2
 8009cf8:	4618      	mov	r0, r3
 8009cfa:	f7f8 fd14 	bl	8002726 <HAL_PCD_EP_Close>
 8009cfe:	4603      	mov	r3, r0
 8009d00:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009d02:	7bfb      	ldrb	r3, [r7, #15]
 8009d04:	4618      	mov	r0, r3
 8009d06:	f000 f93b 	bl	8009f80 <USBD_Get_USB_Status>
 8009d0a:	4603      	mov	r3, r0
 8009d0c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009d0e:	7bbb      	ldrb	r3, [r7, #14]
}
 8009d10:	4618      	mov	r0, r3
 8009d12:	3710      	adds	r7, #16
 8009d14:	46bd      	mov	sp, r7
 8009d16:	bd80      	pop	{r7, pc}

08009d18 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009d18:	b580      	push	{r7, lr}
 8009d1a:	b084      	sub	sp, #16
 8009d1c:	af00      	add	r7, sp, #0
 8009d1e:	6078      	str	r0, [r7, #4]
 8009d20:	460b      	mov	r3, r1
 8009d22:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009d24:	2300      	movs	r3, #0
 8009d26:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009d28:	2300      	movs	r3, #0
 8009d2a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009d32:	78fa      	ldrb	r2, [r7, #3]
 8009d34:	4611      	mov	r1, r2
 8009d36:	4618      	mov	r0, r3
 8009d38:	f7f8 fdd5 	bl	80028e6 <HAL_PCD_EP_SetStall>
 8009d3c:	4603      	mov	r3, r0
 8009d3e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009d40:	7bfb      	ldrb	r3, [r7, #15]
 8009d42:	4618      	mov	r0, r3
 8009d44:	f000 f91c 	bl	8009f80 <USBD_Get_USB_Status>
 8009d48:	4603      	mov	r3, r0
 8009d4a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009d4c:	7bbb      	ldrb	r3, [r7, #14]
}
 8009d4e:	4618      	mov	r0, r3
 8009d50:	3710      	adds	r7, #16
 8009d52:	46bd      	mov	sp, r7
 8009d54:	bd80      	pop	{r7, pc}

08009d56 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009d56:	b580      	push	{r7, lr}
 8009d58:	b084      	sub	sp, #16
 8009d5a:	af00      	add	r7, sp, #0
 8009d5c:	6078      	str	r0, [r7, #4]
 8009d5e:	460b      	mov	r3, r1
 8009d60:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009d62:	2300      	movs	r3, #0
 8009d64:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009d66:	2300      	movs	r3, #0
 8009d68:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009d70:	78fa      	ldrb	r2, [r7, #3]
 8009d72:	4611      	mov	r1, r2
 8009d74:	4618      	mov	r0, r3
 8009d76:	f7f8 fe08 	bl	800298a <HAL_PCD_EP_ClrStall>
 8009d7a:	4603      	mov	r3, r0
 8009d7c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009d7e:	7bfb      	ldrb	r3, [r7, #15]
 8009d80:	4618      	mov	r0, r3
 8009d82:	f000 f8fd 	bl	8009f80 <USBD_Get_USB_Status>
 8009d86:	4603      	mov	r3, r0
 8009d88:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009d8a:	7bbb      	ldrb	r3, [r7, #14]
}
 8009d8c:	4618      	mov	r0, r3
 8009d8e:	3710      	adds	r7, #16
 8009d90:	46bd      	mov	sp, r7
 8009d92:	bd80      	pop	{r7, pc}

08009d94 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009d94:	b480      	push	{r7}
 8009d96:	b085      	sub	sp, #20
 8009d98:	af00      	add	r7, sp, #0
 8009d9a:	6078      	str	r0, [r7, #4]
 8009d9c:	460b      	mov	r3, r1
 8009d9e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009da6:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8009da8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009dac:	2b00      	cmp	r3, #0
 8009dae:	da0c      	bge.n	8009dca <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8009db0:	78fb      	ldrb	r3, [r7, #3]
 8009db2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009db6:	68f9      	ldr	r1, [r7, #12]
 8009db8:	1c5a      	adds	r2, r3, #1
 8009dba:	4613      	mov	r3, r2
 8009dbc:	009b      	lsls	r3, r3, #2
 8009dbe:	4413      	add	r3, r2
 8009dc0:	00db      	lsls	r3, r3, #3
 8009dc2:	440b      	add	r3, r1
 8009dc4:	3302      	adds	r3, #2
 8009dc6:	781b      	ldrb	r3, [r3, #0]
 8009dc8:	e00b      	b.n	8009de2 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8009dca:	78fb      	ldrb	r3, [r7, #3]
 8009dcc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009dd0:	68f9      	ldr	r1, [r7, #12]
 8009dd2:	4613      	mov	r3, r2
 8009dd4:	009b      	lsls	r3, r3, #2
 8009dd6:	4413      	add	r3, r2
 8009dd8:	00db      	lsls	r3, r3, #3
 8009dda:	440b      	add	r3, r1
 8009ddc:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 8009de0:	781b      	ldrb	r3, [r3, #0]
  }
}
 8009de2:	4618      	mov	r0, r3
 8009de4:	3714      	adds	r7, #20
 8009de6:	46bd      	mov	sp, r7
 8009de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dec:	4770      	bx	lr

08009dee <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8009dee:	b580      	push	{r7, lr}
 8009df0:	b084      	sub	sp, #16
 8009df2:	af00      	add	r7, sp, #0
 8009df4:	6078      	str	r0, [r7, #4]
 8009df6:	460b      	mov	r3, r1
 8009df8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009dfa:	2300      	movs	r3, #0
 8009dfc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009dfe:	2300      	movs	r3, #0
 8009e00:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009e08:	78fa      	ldrb	r2, [r7, #3]
 8009e0a:	4611      	mov	r1, r2
 8009e0c:	4618      	mov	r0, r3
 8009e0e:	f7f8 fbff 	bl	8002610 <HAL_PCD_SetAddress>
 8009e12:	4603      	mov	r3, r0
 8009e14:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009e16:	7bfb      	ldrb	r3, [r7, #15]
 8009e18:	4618      	mov	r0, r3
 8009e1a:	f000 f8b1 	bl	8009f80 <USBD_Get_USB_Status>
 8009e1e:	4603      	mov	r3, r0
 8009e20:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009e22:	7bbb      	ldrb	r3, [r7, #14]
}
 8009e24:	4618      	mov	r0, r3
 8009e26:	3710      	adds	r7, #16
 8009e28:	46bd      	mov	sp, r7
 8009e2a:	bd80      	pop	{r7, pc}

08009e2c <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009e2c:	b580      	push	{r7, lr}
 8009e2e:	b086      	sub	sp, #24
 8009e30:	af00      	add	r7, sp, #0
 8009e32:	60f8      	str	r0, [r7, #12]
 8009e34:	607a      	str	r2, [r7, #4]
 8009e36:	603b      	str	r3, [r7, #0]
 8009e38:	460b      	mov	r3, r1
 8009e3a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009e3c:	2300      	movs	r3, #0
 8009e3e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009e40:	2300      	movs	r3, #0
 8009e42:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8009e44:	68fb      	ldr	r3, [r7, #12]
 8009e46:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8009e4a:	7af9      	ldrb	r1, [r7, #11]
 8009e4c:	683b      	ldr	r3, [r7, #0]
 8009e4e:	687a      	ldr	r2, [r7, #4]
 8009e50:	f7f8 fd06 	bl	8002860 <HAL_PCD_EP_Transmit>
 8009e54:	4603      	mov	r3, r0
 8009e56:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009e58:	7dfb      	ldrb	r3, [r7, #23]
 8009e5a:	4618      	mov	r0, r3
 8009e5c:	f000 f890 	bl	8009f80 <USBD_Get_USB_Status>
 8009e60:	4603      	mov	r3, r0
 8009e62:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009e64:	7dbb      	ldrb	r3, [r7, #22]
}
 8009e66:	4618      	mov	r0, r3
 8009e68:	3718      	adds	r7, #24
 8009e6a:	46bd      	mov	sp, r7
 8009e6c:	bd80      	pop	{r7, pc}

08009e6e <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009e6e:	b580      	push	{r7, lr}
 8009e70:	b086      	sub	sp, #24
 8009e72:	af00      	add	r7, sp, #0
 8009e74:	60f8      	str	r0, [r7, #12]
 8009e76:	607a      	str	r2, [r7, #4]
 8009e78:	603b      	str	r3, [r7, #0]
 8009e7a:	460b      	mov	r3, r1
 8009e7c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009e7e:	2300      	movs	r3, #0
 8009e80:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009e82:	2300      	movs	r3, #0
 8009e84:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8009e86:	68fb      	ldr	r3, [r7, #12]
 8009e88:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8009e8c:	7af9      	ldrb	r1, [r7, #11]
 8009e8e:	683b      	ldr	r3, [r7, #0]
 8009e90:	687a      	ldr	r2, [r7, #4]
 8009e92:	f7f8 fc90 	bl	80027b6 <HAL_PCD_EP_Receive>
 8009e96:	4603      	mov	r3, r0
 8009e98:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009e9a:	7dfb      	ldrb	r3, [r7, #23]
 8009e9c:	4618      	mov	r0, r3
 8009e9e:	f000 f86f 	bl	8009f80 <USBD_Get_USB_Status>
 8009ea2:	4603      	mov	r3, r0
 8009ea4:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009ea6:	7dbb      	ldrb	r3, [r7, #22]
}
 8009ea8:	4618      	mov	r0, r3
 8009eaa:	3718      	adds	r7, #24
 8009eac:	46bd      	mov	sp, r7
 8009eae:	bd80      	pop	{r7, pc}

08009eb0 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009eb0:	b580      	push	{r7, lr}
 8009eb2:	b082      	sub	sp, #8
 8009eb4:	af00      	add	r7, sp, #0
 8009eb6:	6078      	str	r0, [r7, #4]
 8009eb8:	460b      	mov	r3, r1
 8009eba:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009ec2:	78fa      	ldrb	r2, [r7, #3]
 8009ec4:	4611      	mov	r1, r2
 8009ec6:	4618      	mov	r0, r3
 8009ec8:	f7f8 fcb2 	bl	8002830 <HAL_PCD_EP_GetRxCount>
 8009ecc:	4603      	mov	r3, r0
}
 8009ece:	4618      	mov	r0, r3
 8009ed0:	3708      	adds	r7, #8
 8009ed2:	46bd      	mov	sp, r7
 8009ed4:	bd80      	pop	{r7, pc}
	...

08009ed8 <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009ed8:	b580      	push	{r7, lr}
 8009eda:	b082      	sub	sp, #8
 8009edc:	af00      	add	r7, sp, #0
 8009ede:	6078      	str	r0, [r7, #4]
 8009ee0:	460b      	mov	r3, r1
 8009ee2:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 8009ee4:	78fb      	ldrb	r3, [r7, #3]
 8009ee6:	2b00      	cmp	r3, #0
 8009ee8:	d002      	beq.n	8009ef0 <HAL_PCDEx_LPM_Callback+0x18>
 8009eea:	2b01      	cmp	r3, #1
 8009eec:	d013      	beq.n	8009f16 <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 8009eee:	e023      	b.n	8009f38 <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	699b      	ldr	r3, [r3, #24]
 8009ef4:	2b00      	cmp	r3, #0
 8009ef6:	d007      	beq.n	8009f08 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 8009ef8:	f000 f83c 	bl	8009f74 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009efc:	4b10      	ldr	r3, [pc, #64]	; (8009f40 <HAL_PCDEx_LPM_Callback+0x68>)
 8009efe:	691b      	ldr	r3, [r3, #16]
 8009f00:	4a0f      	ldr	r2, [pc, #60]	; (8009f40 <HAL_PCDEx_LPM_Callback+0x68>)
 8009f02:	f023 0306 	bic.w	r3, r3, #6
 8009f06:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8009f0e:	4618      	mov	r0, r3
 8009f10:	f7fe fc7c 	bl	800880c <USBD_LL_Resume>
    break;
 8009f14:	e010      	b.n	8009f38 <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8009f1c:	4618      	mov	r0, r3
 8009f1e:	f7fe fc5f 	bl	80087e0 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	699b      	ldr	r3, [r3, #24]
 8009f26:	2b00      	cmp	r3, #0
 8009f28:	d005      	beq.n	8009f36 <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009f2a:	4b05      	ldr	r3, [pc, #20]	; (8009f40 <HAL_PCDEx_LPM_Callback+0x68>)
 8009f2c:	691b      	ldr	r3, [r3, #16]
 8009f2e:	4a04      	ldr	r2, [pc, #16]	; (8009f40 <HAL_PCDEx_LPM_Callback+0x68>)
 8009f30:	f043 0306 	orr.w	r3, r3, #6
 8009f34:	6113      	str	r3, [r2, #16]
    break;
 8009f36:	bf00      	nop
}
 8009f38:	bf00      	nop
 8009f3a:	3708      	adds	r7, #8
 8009f3c:	46bd      	mov	sp, r7
 8009f3e:	bd80      	pop	{r7, pc}
 8009f40:	e000ed00 	.word	0xe000ed00

08009f44 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8009f44:	b480      	push	{r7}
 8009f46:	b083      	sub	sp, #12
 8009f48:	af00      	add	r7, sp, #0
 8009f4a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8009f4c:	4b03      	ldr	r3, [pc, #12]	; (8009f5c <USBD_static_malloc+0x18>)
}
 8009f4e:	4618      	mov	r0, r3
 8009f50:	370c      	adds	r7, #12
 8009f52:	46bd      	mov	sp, r7
 8009f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f58:	4770      	bx	lr
 8009f5a:	bf00      	nop
 8009f5c:	20000c8c 	.word	0x20000c8c

08009f60 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8009f60:	b480      	push	{r7}
 8009f62:	b083      	sub	sp, #12
 8009f64:	af00      	add	r7, sp, #0
 8009f66:	6078      	str	r0, [r7, #4]

}
 8009f68:	bf00      	nop
 8009f6a:	370c      	adds	r7, #12
 8009f6c:	46bd      	mov	sp, r7
 8009f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f72:	4770      	bx	lr

08009f74 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8009f74:	b580      	push	{r7, lr}
 8009f76:	af00      	add	r7, sp, #0
  SystemClock_Config();
 8009f78:	f7f6 fd05 	bl	8000986 <SystemClock_Config>
}
 8009f7c:	bf00      	nop
 8009f7e:	bd80      	pop	{r7, pc}

08009f80 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009f80:	b480      	push	{r7}
 8009f82:	b085      	sub	sp, #20
 8009f84:	af00      	add	r7, sp, #0
 8009f86:	4603      	mov	r3, r0
 8009f88:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009f8a:	2300      	movs	r3, #0
 8009f8c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8009f8e:	79fb      	ldrb	r3, [r7, #7]
 8009f90:	2b03      	cmp	r3, #3
 8009f92:	d817      	bhi.n	8009fc4 <USBD_Get_USB_Status+0x44>
 8009f94:	a201      	add	r2, pc, #4	; (adr r2, 8009f9c <USBD_Get_USB_Status+0x1c>)
 8009f96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f9a:	bf00      	nop
 8009f9c:	08009fad 	.word	0x08009fad
 8009fa0:	08009fb3 	.word	0x08009fb3
 8009fa4:	08009fb9 	.word	0x08009fb9
 8009fa8:	08009fbf 	.word	0x08009fbf
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8009fac:	2300      	movs	r3, #0
 8009fae:	73fb      	strb	r3, [r7, #15]
    break;
 8009fb0:	e00b      	b.n	8009fca <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009fb2:	2303      	movs	r3, #3
 8009fb4:	73fb      	strb	r3, [r7, #15]
    break;
 8009fb6:	e008      	b.n	8009fca <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009fb8:	2301      	movs	r3, #1
 8009fba:	73fb      	strb	r3, [r7, #15]
    break;
 8009fbc:	e005      	b.n	8009fca <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009fbe:	2303      	movs	r3, #3
 8009fc0:	73fb      	strb	r3, [r7, #15]
    break;
 8009fc2:	e002      	b.n	8009fca <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8009fc4:	2303      	movs	r3, #3
 8009fc6:	73fb      	strb	r3, [r7, #15]
    break;
 8009fc8:	bf00      	nop
  }
  return usb_status;
 8009fca:	7bfb      	ldrb	r3, [r7, #15]
}
 8009fcc:	4618      	mov	r0, r3
 8009fce:	3714      	adds	r7, #20
 8009fd0:	46bd      	mov	sp, r7
 8009fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fd6:	4770      	bx	lr

08009fd8 <__libc_init_array>:
 8009fd8:	b570      	push	{r4, r5, r6, lr}
 8009fda:	4d0d      	ldr	r5, [pc, #52]	; (800a010 <__libc_init_array+0x38>)
 8009fdc:	4c0d      	ldr	r4, [pc, #52]	; (800a014 <__libc_init_array+0x3c>)
 8009fde:	1b64      	subs	r4, r4, r5
 8009fe0:	10a4      	asrs	r4, r4, #2
 8009fe2:	2600      	movs	r6, #0
 8009fe4:	42a6      	cmp	r6, r4
 8009fe6:	d109      	bne.n	8009ffc <__libc_init_array+0x24>
 8009fe8:	4d0b      	ldr	r5, [pc, #44]	; (800a018 <__libc_init_array+0x40>)
 8009fea:	4c0c      	ldr	r4, [pc, #48]	; (800a01c <__libc_init_array+0x44>)
 8009fec:	f000 f82e 	bl	800a04c <_init>
 8009ff0:	1b64      	subs	r4, r4, r5
 8009ff2:	10a4      	asrs	r4, r4, #2
 8009ff4:	2600      	movs	r6, #0
 8009ff6:	42a6      	cmp	r6, r4
 8009ff8:	d105      	bne.n	800a006 <__libc_init_array+0x2e>
 8009ffa:	bd70      	pop	{r4, r5, r6, pc}
 8009ffc:	f855 3b04 	ldr.w	r3, [r5], #4
 800a000:	4798      	blx	r3
 800a002:	3601      	adds	r6, #1
 800a004:	e7ee      	b.n	8009fe4 <__libc_init_array+0xc>
 800a006:	f855 3b04 	ldr.w	r3, [r5], #4
 800a00a:	4798      	blx	r3
 800a00c:	3601      	adds	r6, #1
 800a00e:	e7f2      	b.n	8009ff6 <__libc_init_array+0x1e>
 800a010:	0800a100 	.word	0x0800a100
 800a014:	0800a100 	.word	0x0800a100
 800a018:	0800a100 	.word	0x0800a100
 800a01c:	0800a104 	.word	0x0800a104

0800a020 <memcpy>:
 800a020:	440a      	add	r2, r1
 800a022:	4291      	cmp	r1, r2
 800a024:	f100 33ff 	add.w	r3, r0, #4294967295
 800a028:	d100      	bne.n	800a02c <memcpy+0xc>
 800a02a:	4770      	bx	lr
 800a02c:	b510      	push	{r4, lr}
 800a02e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a032:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a036:	4291      	cmp	r1, r2
 800a038:	d1f9      	bne.n	800a02e <memcpy+0xe>
 800a03a:	bd10      	pop	{r4, pc}

0800a03c <memset>:
 800a03c:	4402      	add	r2, r0
 800a03e:	4603      	mov	r3, r0
 800a040:	4293      	cmp	r3, r2
 800a042:	d100      	bne.n	800a046 <memset+0xa>
 800a044:	4770      	bx	lr
 800a046:	f803 1b01 	strb.w	r1, [r3], #1
 800a04a:	e7f9      	b.n	800a040 <memset+0x4>

0800a04c <_init>:
 800a04c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a04e:	bf00      	nop
 800a050:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a052:	bc08      	pop	{r3}
 800a054:	469e      	mov	lr, r3
 800a056:	4770      	bx	lr

0800a058 <_fini>:
 800a058:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a05a:	bf00      	nop
 800a05c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a05e:	bc08      	pop	{r3}
 800a060:	469e      	mov	lr, r3
 800a062:	4770      	bx	lr
