
Recoil-USB-CAN-Adapter-G431.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009f24  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000094  0800a0fc  0800a0fc  0001a0fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a190  0800a190  00020184  2**0
                  CONTENTS
  4 .ARM          00000008  0800a190  0800a190  0001a190  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a198  0800a198  00020184  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a198  0800a198  0001a198  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a19c  0800a19c  0001a19c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000184  20000000  0800a1a0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000d28  20000184  0800a324  00020184  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000eac  0800a324  00020eac  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020184  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a539  00000000  00000000  000201b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000039f5  00000000  00000000  0003a6ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001220  00000000  00000000  0003e0e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000010a8  00000000  00000000  0003f308  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000215ad  00000000  00000000  000403b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018164  00000000  00000000  0006195d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c0cad  00000000  00000000  00079ac1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0013a76e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000049f4  00000000  00000000  0013a7c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000184 	.word	0x20000184
 80001f4:	00000000 	.word	0x00000000
 80001f8:	0800a0e4 	.word	0x0800a0e4

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000188 	.word	0x20000188
 8000214:	0800a0e4 	.word	0x0800a0e4

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b974 	b.w	8000518 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9d08      	ldr	r5, [sp, #32]
 800024e:	4604      	mov	r4, r0
 8000250:	468e      	mov	lr, r1
 8000252:	2b00      	cmp	r3, #0
 8000254:	d14d      	bne.n	80002f2 <__udivmoddi4+0xaa>
 8000256:	428a      	cmp	r2, r1
 8000258:	4694      	mov	ip, r2
 800025a:	d969      	bls.n	8000330 <__udivmoddi4+0xe8>
 800025c:	fab2 f282 	clz	r2, r2
 8000260:	b152      	cbz	r2, 8000278 <__udivmoddi4+0x30>
 8000262:	fa01 f302 	lsl.w	r3, r1, r2
 8000266:	f1c2 0120 	rsb	r1, r2, #32
 800026a:	fa20 f101 	lsr.w	r1, r0, r1
 800026e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000272:	ea41 0e03 	orr.w	lr, r1, r3
 8000276:	4094      	lsls	r4, r2
 8000278:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800027c:	0c21      	lsrs	r1, r4, #16
 800027e:	fbbe f6f8 	udiv	r6, lr, r8
 8000282:	fa1f f78c 	uxth.w	r7, ip
 8000286:	fb08 e316 	mls	r3, r8, r6, lr
 800028a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800028e:	fb06 f107 	mul.w	r1, r6, r7
 8000292:	4299      	cmp	r1, r3
 8000294:	d90a      	bls.n	80002ac <__udivmoddi4+0x64>
 8000296:	eb1c 0303 	adds.w	r3, ip, r3
 800029a:	f106 30ff 	add.w	r0, r6, #4294967295
 800029e:	f080 811f 	bcs.w	80004e0 <__udivmoddi4+0x298>
 80002a2:	4299      	cmp	r1, r3
 80002a4:	f240 811c 	bls.w	80004e0 <__udivmoddi4+0x298>
 80002a8:	3e02      	subs	r6, #2
 80002aa:	4463      	add	r3, ip
 80002ac:	1a5b      	subs	r3, r3, r1
 80002ae:	b2a4      	uxth	r4, r4
 80002b0:	fbb3 f0f8 	udiv	r0, r3, r8
 80002b4:	fb08 3310 	mls	r3, r8, r0, r3
 80002b8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002bc:	fb00 f707 	mul.w	r7, r0, r7
 80002c0:	42a7      	cmp	r7, r4
 80002c2:	d90a      	bls.n	80002da <__udivmoddi4+0x92>
 80002c4:	eb1c 0404 	adds.w	r4, ip, r4
 80002c8:	f100 33ff 	add.w	r3, r0, #4294967295
 80002cc:	f080 810a 	bcs.w	80004e4 <__udivmoddi4+0x29c>
 80002d0:	42a7      	cmp	r7, r4
 80002d2:	f240 8107 	bls.w	80004e4 <__udivmoddi4+0x29c>
 80002d6:	4464      	add	r4, ip
 80002d8:	3802      	subs	r0, #2
 80002da:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002de:	1be4      	subs	r4, r4, r7
 80002e0:	2600      	movs	r6, #0
 80002e2:	b11d      	cbz	r5, 80002ec <__udivmoddi4+0xa4>
 80002e4:	40d4      	lsrs	r4, r2
 80002e6:	2300      	movs	r3, #0
 80002e8:	e9c5 4300 	strd	r4, r3, [r5]
 80002ec:	4631      	mov	r1, r6
 80002ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d909      	bls.n	800030a <__udivmoddi4+0xc2>
 80002f6:	2d00      	cmp	r5, #0
 80002f8:	f000 80ef 	beq.w	80004da <__udivmoddi4+0x292>
 80002fc:	2600      	movs	r6, #0
 80002fe:	e9c5 0100 	strd	r0, r1, [r5]
 8000302:	4630      	mov	r0, r6
 8000304:	4631      	mov	r1, r6
 8000306:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030a:	fab3 f683 	clz	r6, r3
 800030e:	2e00      	cmp	r6, #0
 8000310:	d14a      	bne.n	80003a8 <__udivmoddi4+0x160>
 8000312:	428b      	cmp	r3, r1
 8000314:	d302      	bcc.n	800031c <__udivmoddi4+0xd4>
 8000316:	4282      	cmp	r2, r0
 8000318:	f200 80f9 	bhi.w	800050e <__udivmoddi4+0x2c6>
 800031c:	1a84      	subs	r4, r0, r2
 800031e:	eb61 0303 	sbc.w	r3, r1, r3
 8000322:	2001      	movs	r0, #1
 8000324:	469e      	mov	lr, r3
 8000326:	2d00      	cmp	r5, #0
 8000328:	d0e0      	beq.n	80002ec <__udivmoddi4+0xa4>
 800032a:	e9c5 4e00 	strd	r4, lr, [r5]
 800032e:	e7dd      	b.n	80002ec <__udivmoddi4+0xa4>
 8000330:	b902      	cbnz	r2, 8000334 <__udivmoddi4+0xec>
 8000332:	deff      	udf	#255	; 0xff
 8000334:	fab2 f282 	clz	r2, r2
 8000338:	2a00      	cmp	r2, #0
 800033a:	f040 8092 	bne.w	8000462 <__udivmoddi4+0x21a>
 800033e:	eba1 010c 	sub.w	r1, r1, ip
 8000342:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000346:	fa1f fe8c 	uxth.w	lr, ip
 800034a:	2601      	movs	r6, #1
 800034c:	0c20      	lsrs	r0, r4, #16
 800034e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000352:	fb07 1113 	mls	r1, r7, r3, r1
 8000356:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800035a:	fb0e f003 	mul.w	r0, lr, r3
 800035e:	4288      	cmp	r0, r1
 8000360:	d908      	bls.n	8000374 <__udivmoddi4+0x12c>
 8000362:	eb1c 0101 	adds.w	r1, ip, r1
 8000366:	f103 38ff 	add.w	r8, r3, #4294967295
 800036a:	d202      	bcs.n	8000372 <__udivmoddi4+0x12a>
 800036c:	4288      	cmp	r0, r1
 800036e:	f200 80cb 	bhi.w	8000508 <__udivmoddi4+0x2c0>
 8000372:	4643      	mov	r3, r8
 8000374:	1a09      	subs	r1, r1, r0
 8000376:	b2a4      	uxth	r4, r4
 8000378:	fbb1 f0f7 	udiv	r0, r1, r7
 800037c:	fb07 1110 	mls	r1, r7, r0, r1
 8000380:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000384:	fb0e fe00 	mul.w	lr, lr, r0
 8000388:	45a6      	cmp	lr, r4
 800038a:	d908      	bls.n	800039e <__udivmoddi4+0x156>
 800038c:	eb1c 0404 	adds.w	r4, ip, r4
 8000390:	f100 31ff 	add.w	r1, r0, #4294967295
 8000394:	d202      	bcs.n	800039c <__udivmoddi4+0x154>
 8000396:	45a6      	cmp	lr, r4
 8000398:	f200 80bb 	bhi.w	8000512 <__udivmoddi4+0x2ca>
 800039c:	4608      	mov	r0, r1
 800039e:	eba4 040e 	sub.w	r4, r4, lr
 80003a2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003a6:	e79c      	b.n	80002e2 <__udivmoddi4+0x9a>
 80003a8:	f1c6 0720 	rsb	r7, r6, #32
 80003ac:	40b3      	lsls	r3, r6
 80003ae:	fa22 fc07 	lsr.w	ip, r2, r7
 80003b2:	ea4c 0c03 	orr.w	ip, ip, r3
 80003b6:	fa20 f407 	lsr.w	r4, r0, r7
 80003ba:	fa01 f306 	lsl.w	r3, r1, r6
 80003be:	431c      	orrs	r4, r3
 80003c0:	40f9      	lsrs	r1, r7
 80003c2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003c6:	fa00 f306 	lsl.w	r3, r0, r6
 80003ca:	fbb1 f8f9 	udiv	r8, r1, r9
 80003ce:	0c20      	lsrs	r0, r4, #16
 80003d0:	fa1f fe8c 	uxth.w	lr, ip
 80003d4:	fb09 1118 	mls	r1, r9, r8, r1
 80003d8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003dc:	fb08 f00e 	mul.w	r0, r8, lr
 80003e0:	4288      	cmp	r0, r1
 80003e2:	fa02 f206 	lsl.w	r2, r2, r6
 80003e6:	d90b      	bls.n	8000400 <__udivmoddi4+0x1b8>
 80003e8:	eb1c 0101 	adds.w	r1, ip, r1
 80003ec:	f108 3aff 	add.w	sl, r8, #4294967295
 80003f0:	f080 8088 	bcs.w	8000504 <__udivmoddi4+0x2bc>
 80003f4:	4288      	cmp	r0, r1
 80003f6:	f240 8085 	bls.w	8000504 <__udivmoddi4+0x2bc>
 80003fa:	f1a8 0802 	sub.w	r8, r8, #2
 80003fe:	4461      	add	r1, ip
 8000400:	1a09      	subs	r1, r1, r0
 8000402:	b2a4      	uxth	r4, r4
 8000404:	fbb1 f0f9 	udiv	r0, r1, r9
 8000408:	fb09 1110 	mls	r1, r9, r0, r1
 800040c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000410:	fb00 fe0e 	mul.w	lr, r0, lr
 8000414:	458e      	cmp	lr, r1
 8000416:	d908      	bls.n	800042a <__udivmoddi4+0x1e2>
 8000418:	eb1c 0101 	adds.w	r1, ip, r1
 800041c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000420:	d26c      	bcs.n	80004fc <__udivmoddi4+0x2b4>
 8000422:	458e      	cmp	lr, r1
 8000424:	d96a      	bls.n	80004fc <__udivmoddi4+0x2b4>
 8000426:	3802      	subs	r0, #2
 8000428:	4461      	add	r1, ip
 800042a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800042e:	fba0 9402 	umull	r9, r4, r0, r2
 8000432:	eba1 010e 	sub.w	r1, r1, lr
 8000436:	42a1      	cmp	r1, r4
 8000438:	46c8      	mov	r8, r9
 800043a:	46a6      	mov	lr, r4
 800043c:	d356      	bcc.n	80004ec <__udivmoddi4+0x2a4>
 800043e:	d053      	beq.n	80004e8 <__udivmoddi4+0x2a0>
 8000440:	b15d      	cbz	r5, 800045a <__udivmoddi4+0x212>
 8000442:	ebb3 0208 	subs.w	r2, r3, r8
 8000446:	eb61 010e 	sbc.w	r1, r1, lr
 800044a:	fa01 f707 	lsl.w	r7, r1, r7
 800044e:	fa22 f306 	lsr.w	r3, r2, r6
 8000452:	40f1      	lsrs	r1, r6
 8000454:	431f      	orrs	r7, r3
 8000456:	e9c5 7100 	strd	r7, r1, [r5]
 800045a:	2600      	movs	r6, #0
 800045c:	4631      	mov	r1, r6
 800045e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000462:	f1c2 0320 	rsb	r3, r2, #32
 8000466:	40d8      	lsrs	r0, r3
 8000468:	fa0c fc02 	lsl.w	ip, ip, r2
 800046c:	fa21 f303 	lsr.w	r3, r1, r3
 8000470:	4091      	lsls	r1, r2
 8000472:	4301      	orrs	r1, r0
 8000474:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000478:	fa1f fe8c 	uxth.w	lr, ip
 800047c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000480:	fb07 3610 	mls	r6, r7, r0, r3
 8000484:	0c0b      	lsrs	r3, r1, #16
 8000486:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800048a:	fb00 f60e 	mul.w	r6, r0, lr
 800048e:	429e      	cmp	r6, r3
 8000490:	fa04 f402 	lsl.w	r4, r4, r2
 8000494:	d908      	bls.n	80004a8 <__udivmoddi4+0x260>
 8000496:	eb1c 0303 	adds.w	r3, ip, r3
 800049a:	f100 38ff 	add.w	r8, r0, #4294967295
 800049e:	d22f      	bcs.n	8000500 <__udivmoddi4+0x2b8>
 80004a0:	429e      	cmp	r6, r3
 80004a2:	d92d      	bls.n	8000500 <__udivmoddi4+0x2b8>
 80004a4:	3802      	subs	r0, #2
 80004a6:	4463      	add	r3, ip
 80004a8:	1b9b      	subs	r3, r3, r6
 80004aa:	b289      	uxth	r1, r1
 80004ac:	fbb3 f6f7 	udiv	r6, r3, r7
 80004b0:	fb07 3316 	mls	r3, r7, r6, r3
 80004b4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004b8:	fb06 f30e 	mul.w	r3, r6, lr
 80004bc:	428b      	cmp	r3, r1
 80004be:	d908      	bls.n	80004d2 <__udivmoddi4+0x28a>
 80004c0:	eb1c 0101 	adds.w	r1, ip, r1
 80004c4:	f106 38ff 	add.w	r8, r6, #4294967295
 80004c8:	d216      	bcs.n	80004f8 <__udivmoddi4+0x2b0>
 80004ca:	428b      	cmp	r3, r1
 80004cc:	d914      	bls.n	80004f8 <__udivmoddi4+0x2b0>
 80004ce:	3e02      	subs	r6, #2
 80004d0:	4461      	add	r1, ip
 80004d2:	1ac9      	subs	r1, r1, r3
 80004d4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004d8:	e738      	b.n	800034c <__udivmoddi4+0x104>
 80004da:	462e      	mov	r6, r5
 80004dc:	4628      	mov	r0, r5
 80004de:	e705      	b.n	80002ec <__udivmoddi4+0xa4>
 80004e0:	4606      	mov	r6, r0
 80004e2:	e6e3      	b.n	80002ac <__udivmoddi4+0x64>
 80004e4:	4618      	mov	r0, r3
 80004e6:	e6f8      	b.n	80002da <__udivmoddi4+0x92>
 80004e8:	454b      	cmp	r3, r9
 80004ea:	d2a9      	bcs.n	8000440 <__udivmoddi4+0x1f8>
 80004ec:	ebb9 0802 	subs.w	r8, r9, r2
 80004f0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004f4:	3801      	subs	r0, #1
 80004f6:	e7a3      	b.n	8000440 <__udivmoddi4+0x1f8>
 80004f8:	4646      	mov	r6, r8
 80004fa:	e7ea      	b.n	80004d2 <__udivmoddi4+0x28a>
 80004fc:	4620      	mov	r0, r4
 80004fe:	e794      	b.n	800042a <__udivmoddi4+0x1e2>
 8000500:	4640      	mov	r0, r8
 8000502:	e7d1      	b.n	80004a8 <__udivmoddi4+0x260>
 8000504:	46d0      	mov	r8, sl
 8000506:	e77b      	b.n	8000400 <__udivmoddi4+0x1b8>
 8000508:	3b02      	subs	r3, #2
 800050a:	4461      	add	r1, ip
 800050c:	e732      	b.n	8000374 <__udivmoddi4+0x12c>
 800050e:	4630      	mov	r0, r6
 8000510:	e709      	b.n	8000326 <__udivmoddi4+0xde>
 8000512:	4464      	add	r4, ip
 8000514:	3802      	subs	r0, #2
 8000516:	e742      	b.n	800039e <__udivmoddi4+0x156>

08000518 <__aeabi_idiv0>:
 8000518:	4770      	bx	lr
 800051a:	bf00      	nop

0800051c <HAL_FDCAN_RxFifo0Callback>:
CAN_Frame can_tx_frame;

uint8_t usb_evt_happened;
uint8_t can_evt_happened;

void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs) {
 800051c:	b580      	push	{r7, lr}
 800051e:	b082      	sub	sp, #8
 8000520:	af00      	add	r7, sp, #0
 8000522:	6078      	str	r0, [r7, #4]
 8000524:	6039      	str	r1, [r7, #0]
  APP_handleCANMessage();
 8000526:	f000 f86b 	bl	8000600 <APP_handleCANMessage>
}
 800052a:	bf00      	nop
 800052c:	3708      	adds	r7, #8
 800052e:	46bd      	mov	sp, r7
 8000530:	bd80      	pop	{r7, pc}
	...

08000534 <APP_handleUSBMessage>:
    HAL_UART_Transmit(&huart2, (uint8_t *)str, strlen(str), 100);
    HAL_Delay(100);
  }
}

void APP_handleUSBMessage() {
 8000534:	b580      	push	{r7, lr}
 8000536:	b082      	sub	sp, #8
 8000538:	af00      	add	r7, sp, #0
  // check if the first byte is the correct Start of Frame
  uint8_t is_valid_frame = usb_rx_buffer[0] == 0xAAU;
 800053a:	4b2d      	ldr	r3, [pc, #180]	; (80005f0 <APP_handleUSBMessage+0xbc>)
 800053c:	781b      	ldrb	r3, [r3, #0]
 800053e:	2baa      	cmp	r3, #170	; 0xaa
 8000540:	bf0c      	ite	eq
 8000542:	2301      	moveq	r3, #1
 8000544:	2300      	movne	r3, #0
 8000546:	b2db      	uxtb	r3, r3
 8000548:	717b      	strb	r3, [r7, #5]
  if (!is_valid_frame) {
 800054a:	797b      	ldrb	r3, [r7, #5]
 800054c:	2b00      	cmp	r3, #0
 800054e:	d106      	bne.n	800055e <APP_handleUSBMessage+0x2a>
    // if not, discard and continue receiving
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_SET);
 8000550:	2201      	movs	r2, #1
 8000552:	2180      	movs	r1, #128	; 0x80
 8000554:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000558:	f001 fe60 	bl	800221c <HAL_GPIO_WritePin>
    return;
 800055c:	e045      	b.n	80005ea <APP_handleUSBMessage+0xb6>
  }

  // decode the header section
  can_tx_frame.id_type = CAN_ID_STANDARD;
 800055e:	4b25      	ldr	r3, [pc, #148]	; (80005f4 <APP_handleUSBMessage+0xc0>)
 8000560:	2200      	movs	r2, #0
 8000562:	711a      	strb	r2, [r3, #4]
  can_tx_frame.frame_type = CAN_FRAME_DATA;
 8000564:	4b23      	ldr	r3, [pc, #140]	; (80005f4 <APP_handleUSBMessage+0xc0>)
 8000566:	2201      	movs	r2, #1
 8000568:	715a      	strb	r2, [r3, #5]
//  uint32_t timestamp = ((uart_rx_buffer[1])     // timestamp is not used
//      | (uart_rx_buffer[2] << 8U)
//      | (uart_rx_buffer[3] << 16U)
//      | (uart_rx_buffer[4] << 24U));
  can_tx_frame.size = usb_rx_buffer[5];
 800056a:	4b21      	ldr	r3, [pc, #132]	; (80005f0 <APP_handleUSBMessage+0xbc>)
 800056c:	795b      	ldrb	r3, [r3, #5]
 800056e:	b29a      	uxth	r2, r3
 8000570:	4b20      	ldr	r3, [pc, #128]	; (80005f4 <APP_handleUSBMessage+0xc0>)
 8000572:	80da      	strh	r2, [r3, #6]
  can_tx_frame.id = (((uint32_t)usb_rx_buffer[6] << 0U)
 8000574:	4b1e      	ldr	r3, [pc, #120]	; (80005f0 <APP_handleUSBMessage+0xbc>)
 8000576:	799b      	ldrb	r3, [r3, #6]
 8000578:	461a      	mov	r2, r3
                   | ((uint32_t)usb_rx_buffer[7] << 8U)
 800057a:	4b1d      	ldr	r3, [pc, #116]	; (80005f0 <APP_handleUSBMessage+0xbc>)
 800057c:	79db      	ldrb	r3, [r3, #7]
 800057e:	021b      	lsls	r3, r3, #8
 8000580:	431a      	orrs	r2, r3
                   | ((uint32_t)usb_rx_buffer[8] << 16U)
 8000582:	4b1b      	ldr	r3, [pc, #108]	; (80005f0 <APP_handleUSBMessage+0xbc>)
 8000584:	7a1b      	ldrb	r3, [r3, #8]
 8000586:	041b      	lsls	r3, r3, #16
 8000588:	431a      	orrs	r2, r3
                   | ((uint32_t)usb_rx_buffer[9] << 24U));
 800058a:	4b19      	ldr	r3, [pc, #100]	; (80005f0 <APP_handleUSBMessage+0xbc>)
 800058c:	7a5b      	ldrb	r3, [r3, #9]
 800058e:	061b      	lsls	r3, r3, #24
 8000590:	4313      	orrs	r3, r2
  can_tx_frame.id = (((uint32_t)usb_rx_buffer[6] << 0U)
 8000592:	4a18      	ldr	r2, [pc, #96]	; (80005f4 <APP_handleUSBMessage+0xc0>)
 8000594:	6013      	str	r3, [r2, #0]


  for (uint16_t i=0; i<can_tx_frame.size; i+=1) {
 8000596:	2300      	movs	r3, #0
 8000598:	80fb      	strh	r3, [r7, #6]
 800059a:	e00c      	b.n	80005b6 <APP_handleUSBMessage+0x82>
    can_tx_frame.data[i] = usb_rx_buffer[10+i];
 800059c:	88fb      	ldrh	r3, [r7, #6]
 800059e:	f103 020a 	add.w	r2, r3, #10
 80005a2:	88fb      	ldrh	r3, [r7, #6]
 80005a4:	4912      	ldr	r1, [pc, #72]	; (80005f0 <APP_handleUSBMessage+0xbc>)
 80005a6:	5c89      	ldrb	r1, [r1, r2]
 80005a8:	4a12      	ldr	r2, [pc, #72]	; (80005f4 <APP_handleUSBMessage+0xc0>)
 80005aa:	4413      	add	r3, r2
 80005ac:	460a      	mov	r2, r1
 80005ae:	721a      	strb	r2, [r3, #8]
  for (uint16_t i=0; i<can_tx_frame.size; i+=1) {
 80005b0:	88fb      	ldrh	r3, [r7, #6]
 80005b2:	3301      	adds	r3, #1
 80005b4:	80fb      	strh	r3, [r7, #6]
 80005b6:	4b0f      	ldr	r3, [pc, #60]	; (80005f4 <APP_handleUSBMessage+0xc0>)
 80005b8:	88db      	ldrh	r3, [r3, #6]
 80005ba:	88fa      	ldrh	r2, [r7, #6]
 80005bc:	429a      	cmp	r2, r3
 80005be:	d3ed      	bcc.n	800059c <APP_handleUSBMessage+0x68>
  }

  if (!HAL_FDCAN_GetTxFifoFreeLevel(&hfdcan1)) {
 80005c0:	480d      	ldr	r0, [pc, #52]	; (80005f8 <APP_handleUSBMessage+0xc4>)
 80005c2:	f001 f93d 	bl	8001840 <HAL_FDCAN_GetTxFifoFreeLevel>
 80005c6:	4603      	mov	r3, r0
 80005c8:	2b00      	cmp	r3, #0
 80005ca:	d107      	bne.n	80005dc <APP_handleUSBMessage+0xa8>
    uint32_t fifo_idx = HAL_FDCAN_GetLatestTxFifoQRequestBuffer(&hfdcan1);
 80005cc:	480a      	ldr	r0, [pc, #40]	; (80005f8 <APP_handleUSBMessage+0xc4>)
 80005ce:	f001 f831 	bl	8001634 <HAL_FDCAN_GetLatestTxFifoQRequestBuffer>
 80005d2:	6038      	str	r0, [r7, #0]
    HAL_FDCAN_AbortTxRequest(&hfdcan1, fifo_idx);
 80005d4:	6839      	ldr	r1, [r7, #0]
 80005d6:	4808      	ldr	r0, [pc, #32]	; (80005f8 <APP_handleUSBMessage+0xc4>)
 80005d8:	f001 f838 	bl	800164c <HAL_FDCAN_AbortTxRequest>
  }
  CAN_putTxFrame(&hfdcan1, &can_tx_frame);
 80005dc:	4905      	ldr	r1, [pc, #20]	; (80005f4 <APP_handleUSBMessage+0xc0>)
 80005de:	4806      	ldr	r0, [pc, #24]	; (80005f8 <APP_handleUSBMessage+0xc4>)
 80005e0:	f000 f95a 	bl	8000898 <CAN_putTxFrame>
  usb_evt_happened = 1;
 80005e4:	4b05      	ldr	r3, [pc, #20]	; (80005fc <APP_handleUSBMessage+0xc8>)
 80005e6:	2201      	movs	r2, #1
 80005e8:	701a      	strb	r2, [r3, #0]
}
 80005ea:	3708      	adds	r7, #8
 80005ec:	46bd      	mov	sp, r7
 80005ee:	bd80      	pop	{r7, pc}
 80005f0:	200001a4 	.word	0x200001a4
 80005f4:	200002b8 	.word	0x200002b8
 80005f8:	200002cc 	.word	0x200002cc
 80005fc:	200002c8 	.word	0x200002c8

08000600 <APP_handleCANMessage>:

void APP_handleCANMessage() {
 8000600:	b580      	push	{r7, lr}
 8000602:	b082      	sub	sp, #8
 8000604:	af00      	add	r7, sp, #0
  CAN_getRxFrame(&hfdcan1, &can_rx_frame);
 8000606:	4931      	ldr	r1, [pc, #196]	; (80006cc <APP_handleCANMessage+0xcc>)
 8000608:	4831      	ldr	r0, [pc, #196]	; (80006d0 <APP_handleCANMessage+0xd0>)
 800060a:	f000 f8c7 	bl	800079c <CAN_getRxFrame>

  // prepare the USB frame
  usb_tx_buffer[0] = PYTHONCAN_START_OF_FRAME;
 800060e:	4b31      	ldr	r3, [pc, #196]	; (80006d4 <APP_handleCANMessage+0xd4>)
 8000610:	22aa      	movs	r2, #170	; 0xaa
 8000612:	701a      	strb	r2, [r3, #0]

  usb_tx_buffer[1] = 0x00U;  // Timestamp
 8000614:	4b2f      	ldr	r3, [pc, #188]	; (80006d4 <APP_handleCANMessage+0xd4>)
 8000616:	2200      	movs	r2, #0
 8000618:	705a      	strb	r2, [r3, #1]
  usb_tx_buffer[2] = 0x00U;
 800061a:	4b2e      	ldr	r3, [pc, #184]	; (80006d4 <APP_handleCANMessage+0xd4>)
 800061c:	2200      	movs	r2, #0
 800061e:	709a      	strb	r2, [r3, #2]
  usb_tx_buffer[3] = 0x00U;
 8000620:	4b2c      	ldr	r3, [pc, #176]	; (80006d4 <APP_handleCANMessage+0xd4>)
 8000622:	2200      	movs	r2, #0
 8000624:	70da      	strb	r2, [r3, #3]
  usb_tx_buffer[4] = 0x00U;
 8000626:	4b2b      	ldr	r3, [pc, #172]	; (80006d4 <APP_handleCANMessage+0xd4>)
 8000628:	2200      	movs	r2, #0
 800062a:	711a      	strb	r2, [r3, #4]

  usb_tx_buffer[5] = can_rx_frame.size;  // DLC
 800062c:	4b27      	ldr	r3, [pc, #156]	; (80006cc <APP_handleCANMessage+0xcc>)
 800062e:	88db      	ldrh	r3, [r3, #6]
 8000630:	b2da      	uxtb	r2, r3
 8000632:	4b28      	ldr	r3, [pc, #160]	; (80006d4 <APP_handleCANMessage+0xd4>)
 8000634:	715a      	strb	r2, [r3, #5]

  usb_tx_buffer[6] = READ_BITS(can_rx_frame.id, 0xFFU);  // ID
 8000636:	4b25      	ldr	r3, [pc, #148]	; (80006cc <APP_handleCANMessage+0xcc>)
 8000638:	681b      	ldr	r3, [r3, #0]
 800063a:	b2da      	uxtb	r2, r3
 800063c:	4b25      	ldr	r3, [pc, #148]	; (80006d4 <APP_handleCANMessage+0xd4>)
 800063e:	719a      	strb	r2, [r3, #6]
  usb_tx_buffer[7] = READ_BITS(can_rx_frame.id >> 8U, 0xFFU);
 8000640:	4b22      	ldr	r3, [pc, #136]	; (80006cc <APP_handleCANMessage+0xcc>)
 8000642:	681b      	ldr	r3, [r3, #0]
 8000644:	0a1b      	lsrs	r3, r3, #8
 8000646:	b2da      	uxtb	r2, r3
 8000648:	4b22      	ldr	r3, [pc, #136]	; (80006d4 <APP_handleCANMessage+0xd4>)
 800064a:	71da      	strb	r2, [r3, #7]
  usb_tx_buffer[8] = READ_BITS(can_rx_frame.id >> 16U, 0xFFU);
 800064c:	4b1f      	ldr	r3, [pc, #124]	; (80006cc <APP_handleCANMessage+0xcc>)
 800064e:	681b      	ldr	r3, [r3, #0]
 8000650:	0c1b      	lsrs	r3, r3, #16
 8000652:	b2da      	uxtb	r2, r3
 8000654:	4b1f      	ldr	r3, [pc, #124]	; (80006d4 <APP_handleCANMessage+0xd4>)
 8000656:	721a      	strb	r2, [r3, #8]
  usb_tx_buffer[9] = READ_BITS(can_rx_frame.id >> 24U, 0xFFU);
 8000658:	4b1c      	ldr	r3, [pc, #112]	; (80006cc <APP_handleCANMessage+0xcc>)
 800065a:	681b      	ldr	r3, [r3, #0]
 800065c:	0e1b      	lsrs	r3, r3, #24
 800065e:	b2da      	uxtb	r2, r3
 8000660:	4b1c      	ldr	r3, [pc, #112]	; (80006d4 <APP_handleCANMessage+0xd4>)
 8000662:	725a      	strb	r2, [r3, #9]

  usb_tx_size = 10;
 8000664:	4b1c      	ldr	r3, [pc, #112]	; (80006d8 <APP_handleCANMessage+0xd8>)
 8000666:	220a      	movs	r2, #10
 8000668:	801a      	strh	r2, [r3, #0]

  for (uint16_t i=0; i<can_rx_frame.size; i+=1) {
 800066a:	2300      	movs	r3, #0
 800066c:	80fb      	strh	r3, [r7, #6]
 800066e:	e00a      	b.n	8000686 <APP_handleCANMessage+0x86>
    usb_tx_buffer[10+i] = can_rx_frame.data[i];
 8000670:	88fa      	ldrh	r2, [r7, #6]
 8000672:	88fb      	ldrh	r3, [r7, #6]
 8000674:	330a      	adds	r3, #10
 8000676:	4915      	ldr	r1, [pc, #84]	; (80006cc <APP_handleCANMessage+0xcc>)
 8000678:	440a      	add	r2, r1
 800067a:	7a11      	ldrb	r1, [r2, #8]
 800067c:	4a15      	ldr	r2, [pc, #84]	; (80006d4 <APP_handleCANMessage+0xd4>)
 800067e:	54d1      	strb	r1, [r2, r3]
  for (uint16_t i=0; i<can_rx_frame.size; i+=1) {
 8000680:	88fb      	ldrh	r3, [r7, #6]
 8000682:	3301      	adds	r3, #1
 8000684:	80fb      	strh	r3, [r7, #6]
 8000686:	4b11      	ldr	r3, [pc, #68]	; (80006cc <APP_handleCANMessage+0xcc>)
 8000688:	88db      	ldrh	r3, [r3, #6]
 800068a:	88fa      	ldrh	r2, [r7, #6]
 800068c:	429a      	cmp	r2, r3
 800068e:	d3ef      	bcc.n	8000670 <APP_handleCANMessage+0x70>
  }
  usb_tx_size += can_rx_frame.size + 1;
 8000690:	4b0e      	ldr	r3, [pc, #56]	; (80006cc <APP_handleCANMessage+0xcc>)
 8000692:	88da      	ldrh	r2, [r3, #6]
 8000694:	4b10      	ldr	r3, [pc, #64]	; (80006d8 <APP_handleCANMessage+0xd8>)
 8000696:	881b      	ldrh	r3, [r3, #0]
 8000698:	4413      	add	r3, r2
 800069a:	b29b      	uxth	r3, r3
 800069c:	3301      	adds	r3, #1
 800069e:	b29a      	uxth	r2, r3
 80006a0:	4b0d      	ldr	r3, [pc, #52]	; (80006d8 <APP_handleCANMessage+0xd8>)
 80006a2:	801a      	strh	r2, [r3, #0]

  usb_tx_buffer[10+can_rx_frame.size] = PYTHONCAN_END_OF_FRAME;
 80006a4:	4b09      	ldr	r3, [pc, #36]	; (80006cc <APP_handleCANMessage+0xcc>)
 80006a6:	88db      	ldrh	r3, [r3, #6]
 80006a8:	330a      	adds	r3, #10
 80006aa:	4a0a      	ldr	r2, [pc, #40]	; (80006d4 <APP_handleCANMessage+0xd4>)
 80006ac:	21bb      	movs	r1, #187	; 0xbb
 80006ae:	54d1      	strb	r1, [r2, r3]

  CDC_Transmit_FS(usb_tx_buffer, usb_tx_size);
 80006b0:	4b09      	ldr	r3, [pc, #36]	; (80006d8 <APP_handleCANMessage+0xd8>)
 80006b2:	881b      	ldrh	r3, [r3, #0]
 80006b4:	4619      	mov	r1, r3
 80006b6:	4807      	ldr	r0, [pc, #28]	; (80006d4 <APP_handleCANMessage+0xd4>)
 80006b8:	f009 f88c 	bl	80097d4 <CDC_Transmit_FS>
  can_evt_happened = 1;
 80006bc:	4b07      	ldr	r3, [pc, #28]	; (80006dc <APP_handleCANMessage+0xdc>)
 80006be:	2201      	movs	r2, #1
 80006c0:	701a      	strb	r2, [r3, #0]
}
 80006c2:	bf00      	nop
 80006c4:	3708      	adds	r7, #8
 80006c6:	46bd      	mov	sp, r7
 80006c8:	bd80      	pop	{r7, pc}
 80006ca:	bf00      	nop
 80006cc:	200002a8 	.word	0x200002a8
 80006d0:	200002cc 	.word	0x200002cc
 80006d4:	20000228 	.word	0x20000228
 80006d8:	20000224 	.word	0x20000224
 80006dc:	200002c9 	.word	0x200002c9

080006e0 <APP_init>:

void APP_init() {
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b086      	sub	sp, #24
 80006e4:	af00      	add	r7, sp, #0
  #if FIRST_TIME_BOOTUP
  APP_initFlashOption();
  #endif

  usb_evt_happened = 0;
 80006e6:	4b11      	ldr	r3, [pc, #68]	; (800072c <APP_init+0x4c>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	701a      	strb	r2, [r3, #0]
  can_evt_happened = 0;
 80006ec:	4b10      	ldr	r3, [pc, #64]	; (8000730 <APP_init+0x50>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	701a      	strb	r2, [r3, #0]

  FDCAN_FilterTypeDef filter_config;
  filter_config.IdType = FDCAN_STANDARD_ID;
 80006f2:	2300      	movs	r3, #0
 80006f4:	603b      	str	r3, [r7, #0]
  filter_config.FilterIndex = 0;
 80006f6:	2300      	movs	r3, #0
 80006f8:	607b      	str	r3, [r7, #4]
  filter_config.FilterType = FDCAN_FILTER_MASK;
 80006fa:	2302      	movs	r3, #2
 80006fc:	60bb      	str	r3, [r7, #8]
  filter_config.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 80006fe:	2301      	movs	r3, #1
 8000700:	60fb      	str	r3, [r7, #12]
  filter_config.FilterID1 = 0;
 8000702:	2300      	movs	r3, #0
 8000704:	613b      	str	r3, [r7, #16]
  filter_config.FilterID2 = 0;
 8000706:	2300      	movs	r3, #0
 8000708:	617b      	str	r3, [r7, #20]

  HAL_FDCAN_ConfigFilter(&hfdcan1, &filter_config);
 800070a:	463b      	mov	r3, r7
 800070c:	4619      	mov	r1, r3
 800070e:	4809      	ldr	r0, [pc, #36]	; (8000734 <APP_init+0x54>)
 8000710:	f000 feca 	bl	80014a8 <HAL_FDCAN_ConfigFilter>
  HAL_FDCAN_Start(&hfdcan1);
 8000714:	4807      	ldr	r0, [pc, #28]	; (8000734 <APP_init+0x54>)
 8000716:	f000 ff21 	bl	800155c <HAL_FDCAN_Start>
  HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0);
 800071a:	2200      	movs	r2, #0
 800071c:	2101      	movs	r1, #1
 800071e:	4805      	ldr	r0, [pc, #20]	; (8000734 <APP_init+0x54>)
 8000720:	f001 f8a0 	bl	8001864 <HAL_FDCAN_ActivateNotification>
}
 8000724:	bf00      	nop
 8000726:	3718      	adds	r7, #24
 8000728:	46bd      	mov	sp, r7
 800072a:	bd80      	pop	{r7, pc}
 800072c:	200002c8 	.word	0x200002c8
 8000730:	200002c9 	.word	0x200002c9
 8000734:	200002cc 	.word	0x200002cc

08000738 <APP_main>:

void APP_main() {
 8000738:	b580      	push	{r7, lr}
 800073a:	af00      	add	r7, sp, #0
  if (usb_evt_happened) {
 800073c:	4b15      	ldr	r3, [pc, #84]	; (8000794 <APP_main+0x5c>)
 800073e:	781b      	ldrb	r3, [r3, #0]
 8000740:	2b00      	cmp	r3, #0
 8000742:	d008      	beq.n	8000756 <APP_main+0x1e>
    usb_evt_happened = 0;
 8000744:	4b13      	ldr	r3, [pc, #76]	; (8000794 <APP_main+0x5c>)
 8000746:	2200      	movs	r2, #0
 8000748:	701a      	strb	r2, [r3, #0]
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET);
 800074a:	2200      	movs	r2, #0
 800074c:	2180      	movs	r1, #128	; 0x80
 800074e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000752:	f001 fd63 	bl	800221c <HAL_GPIO_WritePin>
  }
  if (can_evt_happened) {
 8000756:	4b10      	ldr	r3, [pc, #64]	; (8000798 <APP_main+0x60>)
 8000758:	781b      	ldrb	r3, [r3, #0]
 800075a:	2b00      	cmp	r3, #0
 800075c:	d008      	beq.n	8000770 <APP_main+0x38>
    can_evt_happened = 0;
 800075e:	4b0e      	ldr	r3, [pc, #56]	; (8000798 <APP_main+0x60>)
 8000760:	2200      	movs	r2, #0
 8000762:	701a      	strb	r2, [r3, #0]
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 8000764:	2200      	movs	r2, #0
 8000766:	2140      	movs	r1, #64	; 0x40
 8000768:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800076c:	f001 fd56 	bl	800221c <HAL_GPIO_WritePin>
  }
  HAL_Delay(1);
 8000770:	2001      	movs	r0, #1
 8000772:	f000 fc0d 	bl	8000f90 <HAL_Delay>

  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_SET);
 8000776:	2201      	movs	r2, #1
 8000778:	2180      	movs	r1, #128	; 0x80
 800077a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800077e:	f001 fd4d 	bl	800221c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_SET);
 8000782:	2201      	movs	r2, #1
 8000784:	2140      	movs	r1, #64	; 0x40
 8000786:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800078a:	f001 fd47 	bl	800221c <HAL_GPIO_WritePin>
}
 800078e:	bf00      	nop
 8000790:	bd80      	pop	{r7, pc}
 8000792:	bf00      	nop
 8000794:	200002c8 	.word	0x200002c8
 8000798:	200002c9 	.word	0x200002c9

0800079c <CAN_getRxFrame>:
  status |= HAL_FDCAN_ActivateNotification(hfdcan, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0);

  return status;
}

void CAN_getRxFrame(FDCAN_HandleTypeDef *hfdcan, CAN_Frame *rx_frame) {
 800079c:	b580      	push	{r7, lr}
 800079e:	b08c      	sub	sp, #48	; 0x30
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	6078      	str	r0, [r7, #4]
 80007a4:	6039      	str	r1, [r7, #0]
  FDCAN_RxHeaderTypeDef rx_header;
  HAL_FDCAN_GetRxMessage(hfdcan, FDCAN_RX_FIFO0, &rx_header, rx_frame->data);
 80007a6:	683b      	ldr	r3, [r7, #0]
 80007a8:	3308      	adds	r3, #8
 80007aa:	f107 0208 	add.w	r2, r7, #8
 80007ae:	2140      	movs	r1, #64	; 0x40
 80007b0:	6878      	ldr	r0, [r7, #4]
 80007b2:	f000 ff6b 	bl	800168c <HAL_FDCAN_GetRxMessage>

  rx_frame->id = rx_header.Identifier;
 80007b6:	68ba      	ldr	r2, [r7, #8]
 80007b8:	683b      	ldr	r3, [r7, #0]
 80007ba:	601a      	str	r2, [r3, #0]
  rx_frame->id_type = (rx_header.IdType == FDCAN_STANDARD_ID) ? CAN_ID_STANDARD : CAN_ID_EXTENDED;
 80007bc:	68fb      	ldr	r3, [r7, #12]
 80007be:	2b00      	cmp	r3, #0
 80007c0:	bf14      	ite	ne
 80007c2:	2301      	movne	r3, #1
 80007c4:	2300      	moveq	r3, #0
 80007c6:	b2db      	uxtb	r3, r3
 80007c8:	461a      	mov	r2, r3
 80007ca:	683b      	ldr	r3, [r7, #0]
 80007cc:	711a      	strb	r2, [r3, #4]
  rx_frame->frame_type = (rx_header.RxFrameType == FDCAN_DATA_FRAME) ? CAN_FRAME_DATA : CAN_FRAME_REMOTE;
 80007ce:	693b      	ldr	r3, [r7, #16]
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	d101      	bne.n	80007d8 <CAN_getRxFrame+0x3c>
 80007d4:	2201      	movs	r2, #1
 80007d6:	e000      	b.n	80007da <CAN_getRxFrame+0x3e>
 80007d8:	2200      	movs	r2, #0
 80007da:	683b      	ldr	r3, [r7, #0]
 80007dc:	715a      	strb	r2, [r3, #5]
  switch (rx_header.DataLength) {
 80007de:	697b      	ldr	r3, [r7, #20]
 80007e0:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80007e4:	d04c      	beq.n	8000880 <CAN_getRxFrame+0xe4>
 80007e6:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80007ea:	d84d      	bhi.n	8000888 <CAN_getRxFrame+0xec>
 80007ec:	f5b3 2fe0 	cmp.w	r3, #458752	; 0x70000
 80007f0:	d042      	beq.n	8000878 <CAN_getRxFrame+0xdc>
 80007f2:	f5b3 2fe0 	cmp.w	r3, #458752	; 0x70000
 80007f6:	d847      	bhi.n	8000888 <CAN_getRxFrame+0xec>
 80007f8:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 80007fc:	d038      	beq.n	8000870 <CAN_getRxFrame+0xd4>
 80007fe:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 8000802:	d841      	bhi.n	8000888 <CAN_getRxFrame+0xec>
 8000804:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000808:	d02e      	beq.n	8000868 <CAN_getRxFrame+0xcc>
 800080a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800080e:	d83b      	bhi.n	8000888 <CAN_getRxFrame+0xec>
 8000810:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8000814:	d024      	beq.n	8000860 <CAN_getRxFrame+0xc4>
 8000816:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800081a:	d835      	bhi.n	8000888 <CAN_getRxFrame+0xec>
 800081c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8000820:	d01a      	beq.n	8000858 <CAN_getRxFrame+0xbc>
 8000822:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8000826:	d82f      	bhi.n	8000888 <CAN_getRxFrame+0xec>
 8000828:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800082c:	d010      	beq.n	8000850 <CAN_getRxFrame+0xb4>
 800082e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8000832:	d829      	bhi.n	8000888 <CAN_getRxFrame+0xec>
 8000834:	2b00      	cmp	r3, #0
 8000836:	d003      	beq.n	8000840 <CAN_getRxFrame+0xa4>
 8000838:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800083c:	d004      	beq.n	8000848 <CAN_getRxFrame+0xac>
 800083e:	e023      	b.n	8000888 <CAN_getRxFrame+0xec>
    case FDCAN_DLC_BYTES_0:
      rx_frame->size = 0; break;
 8000840:	683b      	ldr	r3, [r7, #0]
 8000842:	2200      	movs	r2, #0
 8000844:	80da      	strh	r2, [r3, #6]
 8000846:	e023      	b.n	8000890 <CAN_getRxFrame+0xf4>
    case FDCAN_DLC_BYTES_1:
      rx_frame->size = 1; break;
 8000848:	683b      	ldr	r3, [r7, #0]
 800084a:	2201      	movs	r2, #1
 800084c:	80da      	strh	r2, [r3, #6]
 800084e:	e01f      	b.n	8000890 <CAN_getRxFrame+0xf4>
    case FDCAN_DLC_BYTES_2:
      rx_frame->size = 2; break;
 8000850:	683b      	ldr	r3, [r7, #0]
 8000852:	2202      	movs	r2, #2
 8000854:	80da      	strh	r2, [r3, #6]
 8000856:	e01b      	b.n	8000890 <CAN_getRxFrame+0xf4>
    case FDCAN_DLC_BYTES_3:
      rx_frame->size = 3; break;
 8000858:	683b      	ldr	r3, [r7, #0]
 800085a:	2203      	movs	r2, #3
 800085c:	80da      	strh	r2, [r3, #6]
 800085e:	e017      	b.n	8000890 <CAN_getRxFrame+0xf4>
    case FDCAN_DLC_BYTES_4:
      rx_frame->size = 4; break;
 8000860:	683b      	ldr	r3, [r7, #0]
 8000862:	2204      	movs	r2, #4
 8000864:	80da      	strh	r2, [r3, #6]
 8000866:	e013      	b.n	8000890 <CAN_getRxFrame+0xf4>
    case FDCAN_DLC_BYTES_5:
      rx_frame->size = 5; break;
 8000868:	683b      	ldr	r3, [r7, #0]
 800086a:	2205      	movs	r2, #5
 800086c:	80da      	strh	r2, [r3, #6]
 800086e:	e00f      	b.n	8000890 <CAN_getRxFrame+0xf4>
    case FDCAN_DLC_BYTES_6:
      rx_frame->size = 6; break;
 8000870:	683b      	ldr	r3, [r7, #0]
 8000872:	2206      	movs	r2, #6
 8000874:	80da      	strh	r2, [r3, #6]
 8000876:	e00b      	b.n	8000890 <CAN_getRxFrame+0xf4>
    case FDCAN_DLC_BYTES_7:
      rx_frame->size = 7; break;
 8000878:	683b      	ldr	r3, [r7, #0]
 800087a:	2207      	movs	r2, #7
 800087c:	80da      	strh	r2, [r3, #6]
 800087e:	e007      	b.n	8000890 <CAN_getRxFrame+0xf4>
    case FDCAN_DLC_BYTES_8:
      rx_frame->size = 8; break;
 8000880:	683b      	ldr	r3, [r7, #0]
 8000882:	2208      	movs	r2, #8
 8000884:	80da      	strh	r2, [r3, #6]
 8000886:	e003      	b.n	8000890 <CAN_getRxFrame+0xf4>
    default:
      rx_frame->size = 0;
 8000888:	683b      	ldr	r3, [r7, #0]
 800088a:	2200      	movs	r2, #0
 800088c:	80da      	strh	r2, [r3, #6]
  }
}
 800088e:	bf00      	nop
 8000890:	bf00      	nop
 8000892:	3730      	adds	r7, #48	; 0x30
 8000894:	46bd      	mov	sp, r7
 8000896:	bd80      	pop	{r7, pc}

08000898 <CAN_putTxFrame>:

HAL_StatusTypeDef CAN_putTxFrame(FDCAN_HandleTypeDef *hfdcan, CAN_Frame *tx_frame) {
 8000898:	b580      	push	{r7, lr}
 800089a:	b08c      	sub	sp, #48	; 0x30
 800089c:	af00      	add	r7, sp, #0
 800089e:	6078      	str	r0, [r7, #4]
 80008a0:	6039      	str	r1, [r7, #0]
  FDCAN_TxHeaderTypeDef tx_header;

  tx_header.Identifier = tx_frame->id;
 80008a2:	683b      	ldr	r3, [r7, #0]
 80008a4:	681b      	ldr	r3, [r3, #0]
 80008a6:	60fb      	str	r3, [r7, #12]
  tx_header.IdType = (tx_frame->id_type == CAN_ID_STANDARD) ? FDCAN_STANDARD_ID : FDCAN_EXTENDED_ID;
 80008a8:	683b      	ldr	r3, [r7, #0]
 80008aa:	791b      	ldrb	r3, [r3, #4]
 80008ac:	2b00      	cmp	r3, #0
 80008ae:	d101      	bne.n	80008b4 <CAN_putTxFrame+0x1c>
 80008b0:	2300      	movs	r3, #0
 80008b2:	e001      	b.n	80008b8 <CAN_putTxFrame+0x20>
 80008b4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80008b8:	613b      	str	r3, [r7, #16]
  tx_header.TxFrameType = (tx_frame->frame_type == CAN_FRAME_DATA) ? FDCAN_DATA_FRAME : FDCAN_REMOTE_FRAME;
 80008ba:	683b      	ldr	r3, [r7, #0]
 80008bc:	795b      	ldrb	r3, [r3, #5]
 80008be:	2b01      	cmp	r3, #1
 80008c0:	d101      	bne.n	80008c6 <CAN_putTxFrame+0x2e>
 80008c2:	2300      	movs	r3, #0
 80008c4:	e001      	b.n	80008ca <CAN_putTxFrame+0x32>
 80008c6:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80008ca:	617b      	str	r3, [r7, #20]
  switch (tx_frame->size) {
 80008cc:	683b      	ldr	r3, [r7, #0]
 80008ce:	88db      	ldrh	r3, [r3, #6]
 80008d0:	2b08      	cmp	r3, #8
 80008d2:	d838      	bhi.n	8000946 <CAN_putTxFrame+0xae>
 80008d4:	a201      	add	r2, pc, #4	; (adr r2, 80008dc <CAN_putTxFrame+0x44>)
 80008d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80008da:	bf00      	nop
 80008dc:	08000901 	.word	0x08000901
 80008e0:	08000907 	.word	0x08000907
 80008e4:	0800090f 	.word	0x0800090f
 80008e8:	08000917 	.word	0x08000917
 80008ec:	0800091f 	.word	0x0800091f
 80008f0:	08000927 	.word	0x08000927
 80008f4:	0800092f 	.word	0x0800092f
 80008f8:	08000937 	.word	0x08000937
 80008fc:	0800093f 	.word	0x0800093f
    case 0:
      tx_header.DataLength = FDCAN_DLC_BYTES_0; break;
 8000900:	2300      	movs	r3, #0
 8000902:	61bb      	str	r3, [r7, #24]
 8000904:	e021      	b.n	800094a <CAN_putTxFrame+0xb2>
    case 1:
      tx_header.DataLength = FDCAN_DLC_BYTES_1; break;
 8000906:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800090a:	61bb      	str	r3, [r7, #24]
 800090c:	e01d      	b.n	800094a <CAN_putTxFrame+0xb2>
    case 2:
      tx_header.DataLength = FDCAN_DLC_BYTES_2; break;
 800090e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000912:	61bb      	str	r3, [r7, #24]
 8000914:	e019      	b.n	800094a <CAN_putTxFrame+0xb2>
    case 3:
      tx_header.DataLength = FDCAN_DLC_BYTES_3; break;
 8000916:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 800091a:	61bb      	str	r3, [r7, #24]
 800091c:	e015      	b.n	800094a <CAN_putTxFrame+0xb2>
    case 4:
      tx_header.DataLength = FDCAN_DLC_BYTES_4; break;
 800091e:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8000922:	61bb      	str	r3, [r7, #24]
 8000924:	e011      	b.n	800094a <CAN_putTxFrame+0xb2>
    case 5:
      tx_header.DataLength = FDCAN_DLC_BYTES_5; break;
 8000926:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800092a:	61bb      	str	r3, [r7, #24]
 800092c:	e00d      	b.n	800094a <CAN_putTxFrame+0xb2>
    case 6:
      tx_header.DataLength = FDCAN_DLC_BYTES_6; break;
 800092e:	f44f 23c0 	mov.w	r3, #393216	; 0x60000
 8000932:	61bb      	str	r3, [r7, #24]
 8000934:	e009      	b.n	800094a <CAN_putTxFrame+0xb2>
    case 7:
      tx_header.DataLength = FDCAN_DLC_BYTES_7; break;
 8000936:	f44f 23e0 	mov.w	r3, #458752	; 0x70000
 800093a:	61bb      	str	r3, [r7, #24]
 800093c:	e005      	b.n	800094a <CAN_putTxFrame+0xb2>
    case 8:
      tx_header.DataLength = FDCAN_DLC_BYTES_8; break;
 800093e:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8000942:	61bb      	str	r3, [r7, #24]
 8000944:	e001      	b.n	800094a <CAN_putTxFrame+0xb2>
    default:
      tx_header.DataLength = FDCAN_DLC_BYTES_0;
 8000946:	2300      	movs	r3, #0
 8000948:	61bb      	str	r3, [r7, #24]
  }
  tx_header.ErrorStateIndicator = FDCAN_ESI_PASSIVE;
 800094a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800094e:	61fb      	str	r3, [r7, #28]
  tx_header.BitRateSwitch = FDCAN_BRS_OFF;
 8000950:	2300      	movs	r3, #0
 8000952:	623b      	str	r3, [r7, #32]
  tx_header.FDFormat = FDCAN_CLASSIC_CAN;
 8000954:	2300      	movs	r3, #0
 8000956:	627b      	str	r3, [r7, #36]	; 0x24
  tx_header.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 8000958:	2300      	movs	r3, #0
 800095a:	62bb      	str	r3, [r7, #40]	; 0x28
  tx_header.MessageMarker = 0;
 800095c:	2300      	movs	r3, #0
 800095e:	62fb      	str	r3, [r7, #44]	; 0x2c

  return HAL_FDCAN_AddMessageToTxFifoQ(hfdcan, &tx_header, tx_frame->data);
 8000960:	683b      	ldr	r3, [r7, #0]
 8000962:	f103 0208 	add.w	r2, r3, #8
 8000966:	f107 030c 	add.w	r3, r7, #12
 800096a:	4619      	mov	r1, r3
 800096c:	6878      	ldr	r0, [r7, #4]
 800096e:	f000 fe1d 	bl	80015ac <HAL_FDCAN_AddMessageToTxFifoQ>
 8000972:	4603      	mov	r3, r0
}
 8000974:	4618      	mov	r0, r3
 8000976:	3730      	adds	r7, #48	; 0x30
 8000978:	46bd      	mov	sp, r7
 800097a:	bd80      	pop	{r7, pc}

0800097c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000980:	f000 fa95 	bl	8000eae <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000984:	f000 f80d 	bl	80009a2 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000988:	f000 f8e8 	bl	8000b5c <MX_GPIO_Init>
  MX_FDCAN1_Init();
 800098c:	f000 f854 	bl	8000a38 <MX_FDCAN1_Init>
  MX_USART2_UART_Init();
 8000990:	f000 f898 	bl	8000ac4 <MX_USART2_UART_Init>
  MX_USB_Device_Init();
 8000994:	f008 fe42 	bl	800961c <MX_USB_Device_Init>
  /* USER CODE BEGIN 2 */
  APP_init();
 8000998:	f7ff fea2 	bl	80006e0 <APP_init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    APP_main();
 800099c:	f7ff fecc 	bl	8000738 <APP_main>
 80009a0:	e7fc      	b.n	800099c <main+0x20>

080009a2 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009a2:	b580      	push	{r7, lr}
 80009a4:	b094      	sub	sp, #80	; 0x50
 80009a6:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009a8:	f107 0318 	add.w	r3, r7, #24
 80009ac:	2238      	movs	r2, #56	; 0x38
 80009ae:	2100      	movs	r1, #0
 80009b0:	4618      	mov	r0, r3
 80009b2:	f009 fb8f 	bl	800a0d4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009b6:	1d3b      	adds	r3, r7, #4
 80009b8:	2200      	movs	r2, #0
 80009ba:	601a      	str	r2, [r3, #0]
 80009bc:	605a      	str	r2, [r3, #4]
 80009be:	609a      	str	r2, [r3, #8]
 80009c0:	60da      	str	r2, [r3, #12]
 80009c2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80009c4:	f44f 7000 	mov.w	r0, #512	; 0x200
 80009c8:	f003 f974 	bl	8003cb4 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80009cc:	2301      	movs	r3, #1
 80009ce:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80009d0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80009d4:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009d6:	2302      	movs	r3, #2
 80009d8:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80009da:	2303      	movs	r3, #3
 80009dc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 80009de:	2301      	movs	r3, #1
 80009e0:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 36;
 80009e2:	2324      	movs	r3, #36	; 0x24
 80009e4:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80009e6:	2302      	movs	r3, #2
 80009e8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV6;
 80009ea:	2306      	movs	r3, #6
 80009ec:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80009ee:	2302      	movs	r3, #2
 80009f0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009f2:	f107 0318 	add.w	r3, r7, #24
 80009f6:	4618      	mov	r0, r3
 80009f8:	f003 fa00 	bl	8003dfc <HAL_RCC_OscConfig>
 80009fc:	4603      	mov	r3, r0
 80009fe:	2b00      	cmp	r3, #0
 8000a00:	d001      	beq.n	8000a06 <SystemClock_Config+0x64>
  {
    Error_Handler();
 8000a02:	f000 f8f5 	bl	8000bf0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a06:	230f      	movs	r3, #15
 8000a08:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a0a:	2303      	movs	r3, #3
 8000a0c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a0e:	2300      	movs	r3, #0
 8000a10:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000a12:	2300      	movs	r3, #0
 8000a14:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a16:	2300      	movs	r3, #0
 8000a18:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000a1a:	1d3b      	adds	r3, r7, #4
 8000a1c:	2104      	movs	r1, #4
 8000a1e:	4618      	mov	r0, r3
 8000a20:	f003 fd04 	bl	800442c <HAL_RCC_ClockConfig>
 8000a24:	4603      	mov	r3, r0
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d001      	beq.n	8000a2e <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8000a2a:	f000 f8e1 	bl	8000bf0 <Error_Handler>
  }
}
 8000a2e:	bf00      	nop
 8000a30:	3750      	adds	r7, #80	; 0x50
 8000a32:	46bd      	mov	sp, r7
 8000a34:	bd80      	pop	{r7, pc}
	...

08000a38 <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8000a3c:	4b1f      	ldr	r3, [pc, #124]	; (8000abc <MX_FDCAN1_Init+0x84>)
 8000a3e:	4a20      	ldr	r2, [pc, #128]	; (8000ac0 <MX_FDCAN1_Init+0x88>)
 8000a40:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 8000a42:	4b1e      	ldr	r3, [pc, #120]	; (8000abc <MX_FDCAN1_Init+0x84>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000a48:	4b1c      	ldr	r3, [pc, #112]	; (8000abc <MX_FDCAN1_Init+0x84>)
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8000a4e:	4b1b      	ldr	r3, [pc, #108]	; (8000abc <MX_FDCAN1_Init+0x84>)
 8000a50:	2200      	movs	r2, #0
 8000a52:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 8000a54:	4b19      	ldr	r3, [pc, #100]	; (8000abc <MX_FDCAN1_Init+0x84>)
 8000a56:	2200      	movs	r2, #0
 8000a58:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8000a5a:	4b18      	ldr	r3, [pc, #96]	; (8000abc <MX_FDCAN1_Init+0x84>)
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8000a60:	4b16      	ldr	r3, [pc, #88]	; (8000abc <MX_FDCAN1_Init+0x84>)
 8000a62:	2200      	movs	r2, #0
 8000a64:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 36;
 8000a66:	4b15      	ldr	r3, [pc, #84]	; (8000abc <MX_FDCAN1_Init+0x84>)
 8000a68:	2224      	movs	r2, #36	; 0x24
 8000a6a:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 8000a6c:	4b13      	ldr	r3, [pc, #76]	; (8000abc <MX_FDCAN1_Init+0x84>)
 8000a6e:	2201      	movs	r2, #1
 8000a70:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 5;
 8000a72:	4b12      	ldr	r3, [pc, #72]	; (8000abc <MX_FDCAN1_Init+0x84>)
 8000a74:	2205      	movs	r2, #5
 8000a76:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 8000a78:	4b10      	ldr	r3, [pc, #64]	; (8000abc <MX_FDCAN1_Init+0x84>)
 8000a7a:	2202      	movs	r2, #2
 8000a7c:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 8000a7e:	4b0f      	ldr	r3, [pc, #60]	; (8000abc <MX_FDCAN1_Init+0x84>)
 8000a80:	2201      	movs	r2, #1
 8000a82:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 8000a84:	4b0d      	ldr	r3, [pc, #52]	; (8000abc <MX_FDCAN1_Init+0x84>)
 8000a86:	2201      	movs	r2, #1
 8000a88:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 8000a8a:	4b0c      	ldr	r3, [pc, #48]	; (8000abc <MX_FDCAN1_Init+0x84>)
 8000a8c:	2201      	movs	r2, #1
 8000a8e:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 8000a90:	4b0a      	ldr	r3, [pc, #40]	; (8000abc <MX_FDCAN1_Init+0x84>)
 8000a92:	2201      	movs	r2, #1
 8000a94:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.StdFiltersNbr = 0;
 8000a96:	4b09      	ldr	r3, [pc, #36]	; (8000abc <MX_FDCAN1_Init+0x84>)
 8000a98:	2200      	movs	r2, #0
 8000a9a:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.ExtFiltersNbr = 0;
 8000a9c:	4b07      	ldr	r3, [pc, #28]	; (8000abc <MX_FDCAN1_Init+0x84>)
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000aa2:	4b06      	ldr	r3, [pc, #24]	; (8000abc <MX_FDCAN1_Init+0x84>)
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8000aa8:	4804      	ldr	r0, [pc, #16]	; (8000abc <MX_FDCAN1_Init+0x84>)
 8000aaa:	f000 fba3 	bl	80011f4 <HAL_FDCAN_Init>
 8000aae:	4603      	mov	r3, r0
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	d001      	beq.n	8000ab8 <MX_FDCAN1_Init+0x80>
  {
    Error_Handler();
 8000ab4:	f000 f89c 	bl	8000bf0 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 8000ab8:	bf00      	nop
 8000aba:	bd80      	pop	{r7, pc}
 8000abc:	200002cc 	.word	0x200002cc
 8000ac0:	40006400 	.word	0x40006400

08000ac4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000ac8:	4b22      	ldr	r3, [pc, #136]	; (8000b54 <MX_USART2_UART_Init+0x90>)
 8000aca:	4a23      	ldr	r2, [pc, #140]	; (8000b58 <MX_USART2_UART_Init+0x94>)
 8000acc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000ace:	4b21      	ldr	r3, [pc, #132]	; (8000b54 <MX_USART2_UART_Init+0x90>)
 8000ad0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000ad4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000ad6:	4b1f      	ldr	r3, [pc, #124]	; (8000b54 <MX_USART2_UART_Init+0x90>)
 8000ad8:	2200      	movs	r2, #0
 8000ada:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000adc:	4b1d      	ldr	r3, [pc, #116]	; (8000b54 <MX_USART2_UART_Init+0x90>)
 8000ade:	2200      	movs	r2, #0
 8000ae0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000ae2:	4b1c      	ldr	r3, [pc, #112]	; (8000b54 <MX_USART2_UART_Init+0x90>)
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000ae8:	4b1a      	ldr	r3, [pc, #104]	; (8000b54 <MX_USART2_UART_Init+0x90>)
 8000aea:	220c      	movs	r2, #12
 8000aec:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000aee:	4b19      	ldr	r3, [pc, #100]	; (8000b54 <MX_USART2_UART_Init+0x90>)
 8000af0:	2200      	movs	r2, #0
 8000af2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000af4:	4b17      	ldr	r3, [pc, #92]	; (8000b54 <MX_USART2_UART_Init+0x90>)
 8000af6:	2200      	movs	r2, #0
 8000af8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000afa:	4b16      	ldr	r3, [pc, #88]	; (8000b54 <MX_USART2_UART_Init+0x90>)
 8000afc:	2200      	movs	r2, #0
 8000afe:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000b00:	4b14      	ldr	r3, [pc, #80]	; (8000b54 <MX_USART2_UART_Init+0x90>)
 8000b02:	2200      	movs	r2, #0
 8000b04:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b06:	4b13      	ldr	r3, [pc, #76]	; (8000b54 <MX_USART2_UART_Init+0x90>)
 8000b08:	2200      	movs	r2, #0
 8000b0a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000b0c:	4811      	ldr	r0, [pc, #68]	; (8000b54 <MX_USART2_UART_Init+0x90>)
 8000b0e:	f004 f899 	bl	8004c44 <HAL_UART_Init>
 8000b12:	4603      	mov	r3, r0
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	d001      	beq.n	8000b1c <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000b18:	f000 f86a 	bl	8000bf0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b1c:	2100      	movs	r1, #0
 8000b1e:	480d      	ldr	r0, [pc, #52]	; (8000b54 <MX_USART2_UART_Init+0x90>)
 8000b20:	f004 fd9a 	bl	8005658 <HAL_UARTEx_SetTxFifoThreshold>
 8000b24:	4603      	mov	r3, r0
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d001      	beq.n	8000b2e <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8000b2a:	f000 f861 	bl	8000bf0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b2e:	2100      	movs	r1, #0
 8000b30:	4808      	ldr	r0, [pc, #32]	; (8000b54 <MX_USART2_UART_Init+0x90>)
 8000b32:	f004 fdcf 	bl	80056d4 <HAL_UARTEx_SetRxFifoThreshold>
 8000b36:	4603      	mov	r3, r0
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	d001      	beq.n	8000b40 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000b3c:	f000 f858 	bl	8000bf0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000b40:	4804      	ldr	r0, [pc, #16]	; (8000b54 <MX_USART2_UART_Init+0x90>)
 8000b42:	f004 fd50 	bl	80055e6 <HAL_UARTEx_DisableFifoMode>
 8000b46:	4603      	mov	r3, r0
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d001      	beq.n	8000b50 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000b4c:	f000 f850 	bl	8000bf0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000b50:	bf00      	nop
 8000b52:	bd80      	pop	{r7, pc}
 8000b54:	20000330 	.word	0x20000330
 8000b58:	40004400 	.word	0x40004400

08000b5c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b088      	sub	sp, #32
 8000b60:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b62:	f107 030c 	add.w	r3, r7, #12
 8000b66:	2200      	movs	r2, #0
 8000b68:	601a      	str	r2, [r3, #0]
 8000b6a:	605a      	str	r2, [r3, #4]
 8000b6c:	609a      	str	r2, [r3, #8]
 8000b6e:	60da      	str	r2, [r3, #12]
 8000b70:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000b72:	4b1e      	ldr	r3, [pc, #120]	; (8000bec <MX_GPIO_Init+0x90>)
 8000b74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b76:	4a1d      	ldr	r2, [pc, #116]	; (8000bec <MX_GPIO_Init+0x90>)
 8000b78:	f043 0320 	orr.w	r3, r3, #32
 8000b7c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b7e:	4b1b      	ldr	r3, [pc, #108]	; (8000bec <MX_GPIO_Init+0x90>)
 8000b80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b82:	f003 0320 	and.w	r3, r3, #32
 8000b86:	60bb      	str	r3, [r7, #8]
 8000b88:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b8a:	4b18      	ldr	r3, [pc, #96]	; (8000bec <MX_GPIO_Init+0x90>)
 8000b8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b8e:	4a17      	ldr	r2, [pc, #92]	; (8000bec <MX_GPIO_Init+0x90>)
 8000b90:	f043 0301 	orr.w	r3, r3, #1
 8000b94:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b96:	4b15      	ldr	r3, [pc, #84]	; (8000bec <MX_GPIO_Init+0x90>)
 8000b98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b9a:	f003 0301 	and.w	r3, r3, #1
 8000b9e:	607b      	str	r3, [r7, #4]
 8000ba0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ba2:	4b12      	ldr	r3, [pc, #72]	; (8000bec <MX_GPIO_Init+0x90>)
 8000ba4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ba6:	4a11      	ldr	r2, [pc, #68]	; (8000bec <MX_GPIO_Init+0x90>)
 8000ba8:	f043 0302 	orr.w	r3, r3, #2
 8000bac:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000bae:	4b0f      	ldr	r3, [pc, #60]	; (8000bec <MX_GPIO_Init+0x90>)
 8000bb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bb2:	f003 0302 	and.w	r3, r3, #2
 8000bb6:	603b      	str	r3, [r7, #0]
 8000bb8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_SET);
 8000bba:	2201      	movs	r2, #1
 8000bbc:	21c0      	movs	r1, #192	; 0xc0
 8000bbe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bc2:	f001 fb2b 	bl	800221c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000bc6:	23c0      	movs	r3, #192	; 0xc0
 8000bc8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000bca:	2311      	movs	r3, #17
 8000bcc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bce:	2300      	movs	r3, #0
 8000bd0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000bd2:	2302      	movs	r3, #2
 8000bd4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bd6:	f107 030c 	add.w	r3, r7, #12
 8000bda:	4619      	mov	r1, r3
 8000bdc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000be0:	f001 f99a 	bl	8001f18 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000be4:	bf00      	nop
 8000be6:	3720      	adds	r7, #32
 8000be8:	46bd      	mov	sp, r7
 8000bea:	bd80      	pop	{r7, pc}
 8000bec:	40021000 	.word	0x40021000

08000bf0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bf0:	b480      	push	{r7}
 8000bf2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bf4:	b672      	cpsid	i
}
 8000bf6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000bf8:	e7fe      	b.n	8000bf8 <Error_Handler+0x8>
	...

08000bfc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	b083      	sub	sp, #12
 8000c00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c02:	4b0f      	ldr	r3, [pc, #60]	; (8000c40 <HAL_MspInit+0x44>)
 8000c04:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c06:	4a0e      	ldr	r2, [pc, #56]	; (8000c40 <HAL_MspInit+0x44>)
 8000c08:	f043 0301 	orr.w	r3, r3, #1
 8000c0c:	6613      	str	r3, [r2, #96]	; 0x60
 8000c0e:	4b0c      	ldr	r3, [pc, #48]	; (8000c40 <HAL_MspInit+0x44>)
 8000c10:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c12:	f003 0301 	and.w	r3, r3, #1
 8000c16:	607b      	str	r3, [r7, #4]
 8000c18:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c1a:	4b09      	ldr	r3, [pc, #36]	; (8000c40 <HAL_MspInit+0x44>)
 8000c1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c1e:	4a08      	ldr	r2, [pc, #32]	; (8000c40 <HAL_MspInit+0x44>)
 8000c20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c24:	6593      	str	r3, [r2, #88]	; 0x58
 8000c26:	4b06      	ldr	r3, [pc, #24]	; (8000c40 <HAL_MspInit+0x44>)
 8000c28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c2e:	603b      	str	r3, [r7, #0]
 8000c30:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c32:	bf00      	nop
 8000c34:	370c      	adds	r7, #12
 8000c36:	46bd      	mov	sp, r7
 8000c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3c:	4770      	bx	lr
 8000c3e:	bf00      	nop
 8000c40:	40021000 	.word	0x40021000

08000c44 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b09a      	sub	sp, #104	; 0x68
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c4c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000c50:	2200      	movs	r2, #0
 8000c52:	601a      	str	r2, [r3, #0]
 8000c54:	605a      	str	r2, [r3, #4]
 8000c56:	609a      	str	r2, [r3, #8]
 8000c58:	60da      	str	r2, [r3, #12]
 8000c5a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c5c:	f107 0310 	add.w	r3, r7, #16
 8000c60:	2244      	movs	r2, #68	; 0x44
 8000c62:	2100      	movs	r1, #0
 8000c64:	4618      	mov	r0, r3
 8000c66:	f009 fa35 	bl	800a0d4 <memset>
  if(hfdcan->Instance==FDCAN1)
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	4a24      	ldr	r2, [pc, #144]	; (8000d00 <HAL_FDCAN_MspInit+0xbc>)
 8000c70:	4293      	cmp	r3, r2
 8000c72:	d140      	bne.n	8000cf6 <HAL_FDCAN_MspInit+0xb2>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8000c74:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c78:	613b      	str	r3, [r7, #16]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 8000c7a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000c7e:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c80:	f107 0310 	add.w	r3, r7, #16
 8000c84:	4618      	mov	r0, r3
 8000c86:	f003 fded 	bl	8004864 <HAL_RCCEx_PeriphCLKConfig>
 8000c8a:	4603      	mov	r3, r0
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d001      	beq.n	8000c94 <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 8000c90:	f7ff ffae 	bl	8000bf0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8000c94:	4b1b      	ldr	r3, [pc, #108]	; (8000d04 <HAL_FDCAN_MspInit+0xc0>)
 8000c96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c98:	4a1a      	ldr	r2, [pc, #104]	; (8000d04 <HAL_FDCAN_MspInit+0xc0>)
 8000c9a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000c9e:	6593      	str	r3, [r2, #88]	; 0x58
 8000ca0:	4b18      	ldr	r3, [pc, #96]	; (8000d04 <HAL_FDCAN_MspInit+0xc0>)
 8000ca2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ca4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000ca8:	60fb      	str	r3, [r7, #12]
 8000caa:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cac:	4b15      	ldr	r3, [pc, #84]	; (8000d04 <HAL_FDCAN_MspInit+0xc0>)
 8000cae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cb0:	4a14      	ldr	r2, [pc, #80]	; (8000d04 <HAL_FDCAN_MspInit+0xc0>)
 8000cb2:	f043 0302 	orr.w	r3, r3, #2
 8000cb6:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000cb8:	4b12      	ldr	r3, [pc, #72]	; (8000d04 <HAL_FDCAN_MspInit+0xc0>)
 8000cba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cbc:	f003 0302 	and.w	r3, r3, #2
 8000cc0:	60bb      	str	r3, [r7, #8]
 8000cc2:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PB8-BOOT0     ------> FDCAN1_RX
    PB9     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000cc4:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000cc8:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cca:	2302      	movs	r3, #2
 8000ccc:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cce:	2300      	movs	r3, #0
 8000cd0:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8000cd6:	2309      	movs	r3, #9
 8000cd8:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cda:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000cde:	4619      	mov	r1, r3
 8000ce0:	4809      	ldr	r0, [pc, #36]	; (8000d08 <HAL_FDCAN_MspInit+0xc4>)
 8000ce2:	f001 f919 	bl	8001f18 <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 0, 0);
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	2100      	movs	r1, #0
 8000cea:	2015      	movs	r0, #21
 8000cec:	f000 fa4d 	bl	800118a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 8000cf0:	2015      	movs	r0, #21
 8000cf2:	f000 fa64 	bl	80011be <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }

}
 8000cf6:	bf00      	nop
 8000cf8:	3768      	adds	r7, #104	; 0x68
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	bd80      	pop	{r7, pc}
 8000cfe:	bf00      	nop
 8000d00:	40006400 	.word	0x40006400
 8000d04:	40021000 	.word	0x40021000
 8000d08:	48000400 	.word	0x48000400

08000d0c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b09a      	sub	sp, #104	; 0x68
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d14:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000d18:	2200      	movs	r2, #0
 8000d1a:	601a      	str	r2, [r3, #0]
 8000d1c:	605a      	str	r2, [r3, #4]
 8000d1e:	609a      	str	r2, [r3, #8]
 8000d20:	60da      	str	r2, [r3, #12]
 8000d22:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d24:	f107 0310 	add.w	r3, r7, #16
 8000d28:	2244      	movs	r2, #68	; 0x44
 8000d2a:	2100      	movs	r1, #0
 8000d2c:	4618      	mov	r0, r3
 8000d2e:	f009 f9d1 	bl	800a0d4 <memset>
  if(huart->Instance==USART2)
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	4a1f      	ldr	r2, [pc, #124]	; (8000db4 <HAL_UART_MspInit+0xa8>)
 8000d38:	4293      	cmp	r3, r2
 8000d3a:	d136      	bne.n	8000daa <HAL_UART_MspInit+0x9e>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000d3c:	2302      	movs	r3, #2
 8000d3e:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000d40:	2300      	movs	r3, #0
 8000d42:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d44:	f107 0310 	add.w	r3, r7, #16
 8000d48:	4618      	mov	r0, r3
 8000d4a:	f003 fd8b 	bl	8004864 <HAL_RCCEx_PeriphCLKConfig>
 8000d4e:	4603      	mov	r3, r0
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d001      	beq.n	8000d58 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000d54:	f7ff ff4c 	bl	8000bf0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000d58:	4b17      	ldr	r3, [pc, #92]	; (8000db8 <HAL_UART_MspInit+0xac>)
 8000d5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d5c:	4a16      	ldr	r2, [pc, #88]	; (8000db8 <HAL_UART_MspInit+0xac>)
 8000d5e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d62:	6593      	str	r3, [r2, #88]	; 0x58
 8000d64:	4b14      	ldr	r3, [pc, #80]	; (8000db8 <HAL_UART_MspInit+0xac>)
 8000d66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d68:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d6c:	60fb      	str	r3, [r7, #12]
 8000d6e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d70:	4b11      	ldr	r3, [pc, #68]	; (8000db8 <HAL_UART_MspInit+0xac>)
 8000d72:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d74:	4a10      	ldr	r2, [pc, #64]	; (8000db8 <HAL_UART_MspInit+0xac>)
 8000d76:	f043 0301 	orr.w	r3, r3, #1
 8000d7a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d7c:	4b0e      	ldr	r3, [pc, #56]	; (8000db8 <HAL_UART_MspInit+0xac>)
 8000d7e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d80:	f003 0301 	and.w	r3, r3, #1
 8000d84:	60bb      	str	r3, [r7, #8]
 8000d86:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000d88:	230c      	movs	r3, #12
 8000d8a:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d8c:	2302      	movs	r3, #2
 8000d8e:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d90:	2300      	movs	r3, #0
 8000d92:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d94:	2300      	movs	r3, #0
 8000d96:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000d98:	2307      	movs	r3, #7
 8000d9a:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d9c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000da0:	4619      	mov	r1, r3
 8000da2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000da6:	f001 f8b7 	bl	8001f18 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000daa:	bf00      	nop
 8000dac:	3768      	adds	r7, #104	; 0x68
 8000dae:	46bd      	mov	sp, r7
 8000db0:	bd80      	pop	{r7, pc}
 8000db2:	bf00      	nop
 8000db4:	40004400 	.word	0x40004400
 8000db8:	40021000 	.word	0x40021000

08000dbc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000dbc:	b480      	push	{r7}
 8000dbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000dc0:	e7fe      	b.n	8000dc0 <NMI_Handler+0x4>

08000dc2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000dc2:	b480      	push	{r7}
 8000dc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000dc6:	e7fe      	b.n	8000dc6 <HardFault_Handler+0x4>

08000dc8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000dc8:	b480      	push	{r7}
 8000dca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000dcc:	e7fe      	b.n	8000dcc <MemManage_Handler+0x4>

08000dce <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000dce:	b480      	push	{r7}
 8000dd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000dd2:	e7fe      	b.n	8000dd2 <BusFault_Handler+0x4>

08000dd4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000dd4:	b480      	push	{r7}
 8000dd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000dd8:	e7fe      	b.n	8000dd8 <UsageFault_Handler+0x4>

08000dda <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000dda:	b480      	push	{r7}
 8000ddc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000dde:	bf00      	nop
 8000de0:	46bd      	mov	sp, r7
 8000de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de6:	4770      	bx	lr

08000de8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000de8:	b480      	push	{r7}
 8000dea:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000dec:	bf00      	nop
 8000dee:	46bd      	mov	sp, r7
 8000df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df4:	4770      	bx	lr

08000df6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000df6:	b480      	push	{r7}
 8000df8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000dfa:	bf00      	nop
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e02:	4770      	bx	lr

08000e04 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e08:	f000 f8a4 	bl	8000f54 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e0c:	bf00      	nop
 8000e0e:	bd80      	pop	{r7, pc}

08000e10 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt remap.
  */
void USB_LP_IRQHandler(void)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000e14:	4802      	ldr	r0, [pc, #8]	; (8000e20 <USB_LP_IRQHandler+0x10>)
 8000e16:	f001 fb20 	bl	800245a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 8000e1a:	bf00      	nop
 8000e1c:	bd80      	pop	{r7, pc}
 8000e1e:	bf00      	nop
 8000e20:	20000998 	.word	0x20000998

08000e24 <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8000e28:	4802      	ldr	r0, [pc, #8]	; (8000e34 <FDCAN1_IT0_IRQHandler+0x10>)
 8000e2a:	f000 fe01 	bl	8001a30 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 8000e2e:	bf00      	nop
 8000e30:	bd80      	pop	{r7, pc}
 8000e32:	bf00      	nop
 8000e34:	200002cc 	.word	0x200002cc

08000e38 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000e38:	b480      	push	{r7}
 8000e3a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000e3c:	4b06      	ldr	r3, [pc, #24]	; (8000e58 <SystemInit+0x20>)
 8000e3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e42:	4a05      	ldr	r2, [pc, #20]	; (8000e58 <SystemInit+0x20>)
 8000e44:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e48:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e4c:	bf00      	nop
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e54:	4770      	bx	lr
 8000e56:	bf00      	nop
 8000e58:	e000ed00 	.word	0xe000ed00

08000e5c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000e5c:	480d      	ldr	r0, [pc, #52]	; (8000e94 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000e5e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e60:	480d      	ldr	r0, [pc, #52]	; (8000e98 <LoopForever+0x6>)
  ldr r1, =_edata
 8000e62:	490e      	ldr	r1, [pc, #56]	; (8000e9c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000e64:	4a0e      	ldr	r2, [pc, #56]	; (8000ea0 <LoopForever+0xe>)
  movs r3, #0
 8000e66:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000e68:	e002      	b.n	8000e70 <LoopCopyDataInit>

08000e6a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e6a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e6c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e6e:	3304      	adds	r3, #4

08000e70 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e70:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e72:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e74:	d3f9      	bcc.n	8000e6a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e76:	4a0b      	ldr	r2, [pc, #44]	; (8000ea4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000e78:	4c0b      	ldr	r4, [pc, #44]	; (8000ea8 <LoopForever+0x16>)
  movs r3, #0
 8000e7a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e7c:	e001      	b.n	8000e82 <LoopFillZerobss>

08000e7e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e7e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e80:	3204      	adds	r2, #4

08000e82 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e82:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e84:	d3fb      	bcc.n	8000e7e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000e86:	f7ff ffd7 	bl	8000e38 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000e8a:	f009 f8f1 	bl	800a070 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000e8e:	f7ff fd75 	bl	800097c <main>

08000e92 <LoopForever>:

LoopForever:
    b LoopForever
 8000e92:	e7fe      	b.n	8000e92 <LoopForever>
  ldr   r0, =_estack
 8000e94:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8000e98:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e9c:	20000184 	.word	0x20000184
  ldr r2, =_sidata
 8000ea0:	0800a1a0 	.word	0x0800a1a0
  ldr r2, =_sbss
 8000ea4:	20000184 	.word	0x20000184
  ldr r4, =_ebss
 8000ea8:	20000eac 	.word	0x20000eac

08000eac <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000eac:	e7fe      	b.n	8000eac <ADC1_2_IRQHandler>

08000eae <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000eae:	b580      	push	{r7, lr}
 8000eb0:	b082      	sub	sp, #8
 8000eb2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000eb8:	2003      	movs	r0, #3
 8000eba:	f000 f95b 	bl	8001174 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000ebe:	200f      	movs	r0, #15
 8000ec0:	f000 f80e 	bl	8000ee0 <HAL_InitTick>
 8000ec4:	4603      	mov	r3, r0
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d002      	beq.n	8000ed0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000eca:	2301      	movs	r3, #1
 8000ecc:	71fb      	strb	r3, [r7, #7]
 8000ece:	e001      	b.n	8000ed4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000ed0:	f7ff fe94 	bl	8000bfc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000ed4:	79fb      	ldrb	r3, [r7, #7]

}
 8000ed6:	4618      	mov	r0, r3
 8000ed8:	3708      	adds	r7, #8
 8000eda:	46bd      	mov	sp, r7
 8000edc:	bd80      	pop	{r7, pc}
	...

08000ee0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b084      	sub	sp, #16
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000ee8:	2300      	movs	r3, #0
 8000eea:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000eec:	4b16      	ldr	r3, [pc, #88]	; (8000f48 <HAL_InitTick+0x68>)
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d022      	beq.n	8000f3a <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000ef4:	4b15      	ldr	r3, [pc, #84]	; (8000f4c <HAL_InitTick+0x6c>)
 8000ef6:	681a      	ldr	r2, [r3, #0]
 8000ef8:	4b13      	ldr	r3, [pc, #76]	; (8000f48 <HAL_InitTick+0x68>)
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000f00:	fbb1 f3f3 	udiv	r3, r1, r3
 8000f04:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f08:	4618      	mov	r0, r3
 8000f0a:	f000 f966 	bl	80011da <HAL_SYSTICK_Config>
 8000f0e:	4603      	mov	r3, r0
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d10f      	bne.n	8000f34 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	2b0f      	cmp	r3, #15
 8000f18:	d809      	bhi.n	8000f2e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	6879      	ldr	r1, [r7, #4]
 8000f1e:	f04f 30ff 	mov.w	r0, #4294967295
 8000f22:	f000 f932 	bl	800118a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000f26:	4a0a      	ldr	r2, [pc, #40]	; (8000f50 <HAL_InitTick+0x70>)
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	6013      	str	r3, [r2, #0]
 8000f2c:	e007      	b.n	8000f3e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000f2e:	2301      	movs	r3, #1
 8000f30:	73fb      	strb	r3, [r7, #15]
 8000f32:	e004      	b.n	8000f3e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000f34:	2301      	movs	r3, #1
 8000f36:	73fb      	strb	r3, [r7, #15]
 8000f38:	e001      	b.n	8000f3e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000f3a:	2301      	movs	r3, #1
 8000f3c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000f3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f40:	4618      	mov	r0, r3
 8000f42:	3710      	adds	r7, #16
 8000f44:	46bd      	mov	sp, r7
 8000f46:	bd80      	pop	{r7, pc}
 8000f48:	20000008 	.word	0x20000008
 8000f4c:	20000000 	.word	0x20000000
 8000f50:	20000004 	.word	0x20000004

08000f54 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f54:	b480      	push	{r7}
 8000f56:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f58:	4b05      	ldr	r3, [pc, #20]	; (8000f70 <HAL_IncTick+0x1c>)
 8000f5a:	681a      	ldr	r2, [r3, #0]
 8000f5c:	4b05      	ldr	r3, [pc, #20]	; (8000f74 <HAL_IncTick+0x20>)
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	4413      	add	r3, r2
 8000f62:	4a03      	ldr	r2, [pc, #12]	; (8000f70 <HAL_IncTick+0x1c>)
 8000f64:	6013      	str	r3, [r2, #0]
}
 8000f66:	bf00      	nop
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6e:	4770      	bx	lr
 8000f70:	200003c0 	.word	0x200003c0
 8000f74:	20000008 	.word	0x20000008

08000f78 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	af00      	add	r7, sp, #0
  return uwTick;
 8000f7c:	4b03      	ldr	r3, [pc, #12]	; (8000f8c <HAL_GetTick+0x14>)
 8000f7e:	681b      	ldr	r3, [r3, #0]
}
 8000f80:	4618      	mov	r0, r3
 8000f82:	46bd      	mov	sp, r7
 8000f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f88:	4770      	bx	lr
 8000f8a:	bf00      	nop
 8000f8c:	200003c0 	.word	0x200003c0

08000f90 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b084      	sub	sp, #16
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f98:	f7ff ffee 	bl	8000f78 <HAL_GetTick>
 8000f9c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000fa2:	68fb      	ldr	r3, [r7, #12]
 8000fa4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000fa8:	d004      	beq.n	8000fb4 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8000faa:	4b09      	ldr	r3, [pc, #36]	; (8000fd0 <HAL_Delay+0x40>)
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	68fa      	ldr	r2, [r7, #12]
 8000fb0:	4413      	add	r3, r2
 8000fb2:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000fb4:	bf00      	nop
 8000fb6:	f7ff ffdf 	bl	8000f78 <HAL_GetTick>
 8000fba:	4602      	mov	r2, r0
 8000fbc:	68bb      	ldr	r3, [r7, #8]
 8000fbe:	1ad3      	subs	r3, r2, r3
 8000fc0:	68fa      	ldr	r2, [r7, #12]
 8000fc2:	429a      	cmp	r2, r3
 8000fc4:	d8f7      	bhi.n	8000fb6 <HAL_Delay+0x26>
  {
  }
}
 8000fc6:	bf00      	nop
 8000fc8:	bf00      	nop
 8000fca:	3710      	adds	r7, #16
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	bd80      	pop	{r7, pc}
 8000fd0:	20000008 	.word	0x20000008

08000fd4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fd4:	b480      	push	{r7}
 8000fd6:	b085      	sub	sp, #20
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	f003 0307 	and.w	r3, r3, #7
 8000fe2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000fe4:	4b0c      	ldr	r3, [pc, #48]	; (8001018 <__NVIC_SetPriorityGrouping+0x44>)
 8000fe6:	68db      	ldr	r3, [r3, #12]
 8000fe8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000fea:	68ba      	ldr	r2, [r7, #8]
 8000fec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ff0:	4013      	ands	r3, r2
 8000ff2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ff4:	68fb      	ldr	r3, [r7, #12]
 8000ff6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ff8:	68bb      	ldr	r3, [r7, #8]
 8000ffa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ffc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001000:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001004:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001006:	4a04      	ldr	r2, [pc, #16]	; (8001018 <__NVIC_SetPriorityGrouping+0x44>)
 8001008:	68bb      	ldr	r3, [r7, #8]
 800100a:	60d3      	str	r3, [r2, #12]
}
 800100c:	bf00      	nop
 800100e:	3714      	adds	r7, #20
 8001010:	46bd      	mov	sp, r7
 8001012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001016:	4770      	bx	lr
 8001018:	e000ed00 	.word	0xe000ed00

0800101c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800101c:	b480      	push	{r7}
 800101e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001020:	4b04      	ldr	r3, [pc, #16]	; (8001034 <__NVIC_GetPriorityGrouping+0x18>)
 8001022:	68db      	ldr	r3, [r3, #12]
 8001024:	0a1b      	lsrs	r3, r3, #8
 8001026:	f003 0307 	and.w	r3, r3, #7
}
 800102a:	4618      	mov	r0, r3
 800102c:	46bd      	mov	sp, r7
 800102e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001032:	4770      	bx	lr
 8001034:	e000ed00 	.word	0xe000ed00

08001038 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001038:	b480      	push	{r7}
 800103a:	b083      	sub	sp, #12
 800103c:	af00      	add	r7, sp, #0
 800103e:	4603      	mov	r3, r0
 8001040:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001042:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001046:	2b00      	cmp	r3, #0
 8001048:	db0b      	blt.n	8001062 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800104a:	79fb      	ldrb	r3, [r7, #7]
 800104c:	f003 021f 	and.w	r2, r3, #31
 8001050:	4907      	ldr	r1, [pc, #28]	; (8001070 <__NVIC_EnableIRQ+0x38>)
 8001052:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001056:	095b      	lsrs	r3, r3, #5
 8001058:	2001      	movs	r0, #1
 800105a:	fa00 f202 	lsl.w	r2, r0, r2
 800105e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001062:	bf00      	nop
 8001064:	370c      	adds	r7, #12
 8001066:	46bd      	mov	sp, r7
 8001068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106c:	4770      	bx	lr
 800106e:	bf00      	nop
 8001070:	e000e100 	.word	0xe000e100

08001074 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001074:	b480      	push	{r7}
 8001076:	b083      	sub	sp, #12
 8001078:	af00      	add	r7, sp, #0
 800107a:	4603      	mov	r3, r0
 800107c:	6039      	str	r1, [r7, #0]
 800107e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001080:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001084:	2b00      	cmp	r3, #0
 8001086:	db0a      	blt.n	800109e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001088:	683b      	ldr	r3, [r7, #0]
 800108a:	b2da      	uxtb	r2, r3
 800108c:	490c      	ldr	r1, [pc, #48]	; (80010c0 <__NVIC_SetPriority+0x4c>)
 800108e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001092:	0112      	lsls	r2, r2, #4
 8001094:	b2d2      	uxtb	r2, r2
 8001096:	440b      	add	r3, r1
 8001098:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800109c:	e00a      	b.n	80010b4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800109e:	683b      	ldr	r3, [r7, #0]
 80010a0:	b2da      	uxtb	r2, r3
 80010a2:	4908      	ldr	r1, [pc, #32]	; (80010c4 <__NVIC_SetPriority+0x50>)
 80010a4:	79fb      	ldrb	r3, [r7, #7]
 80010a6:	f003 030f 	and.w	r3, r3, #15
 80010aa:	3b04      	subs	r3, #4
 80010ac:	0112      	lsls	r2, r2, #4
 80010ae:	b2d2      	uxtb	r2, r2
 80010b0:	440b      	add	r3, r1
 80010b2:	761a      	strb	r2, [r3, #24]
}
 80010b4:	bf00      	nop
 80010b6:	370c      	adds	r7, #12
 80010b8:	46bd      	mov	sp, r7
 80010ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010be:	4770      	bx	lr
 80010c0:	e000e100 	.word	0xe000e100
 80010c4:	e000ed00 	.word	0xe000ed00

080010c8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010c8:	b480      	push	{r7}
 80010ca:	b089      	sub	sp, #36	; 0x24
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	60f8      	str	r0, [r7, #12]
 80010d0:	60b9      	str	r1, [r7, #8]
 80010d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010d4:	68fb      	ldr	r3, [r7, #12]
 80010d6:	f003 0307 	and.w	r3, r3, #7
 80010da:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010dc:	69fb      	ldr	r3, [r7, #28]
 80010de:	f1c3 0307 	rsb	r3, r3, #7
 80010e2:	2b04      	cmp	r3, #4
 80010e4:	bf28      	it	cs
 80010e6:	2304      	movcs	r3, #4
 80010e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010ea:	69fb      	ldr	r3, [r7, #28]
 80010ec:	3304      	adds	r3, #4
 80010ee:	2b06      	cmp	r3, #6
 80010f0:	d902      	bls.n	80010f8 <NVIC_EncodePriority+0x30>
 80010f2:	69fb      	ldr	r3, [r7, #28]
 80010f4:	3b03      	subs	r3, #3
 80010f6:	e000      	b.n	80010fa <NVIC_EncodePriority+0x32>
 80010f8:	2300      	movs	r3, #0
 80010fa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010fc:	f04f 32ff 	mov.w	r2, #4294967295
 8001100:	69bb      	ldr	r3, [r7, #24]
 8001102:	fa02 f303 	lsl.w	r3, r2, r3
 8001106:	43da      	mvns	r2, r3
 8001108:	68bb      	ldr	r3, [r7, #8]
 800110a:	401a      	ands	r2, r3
 800110c:	697b      	ldr	r3, [r7, #20]
 800110e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001110:	f04f 31ff 	mov.w	r1, #4294967295
 8001114:	697b      	ldr	r3, [r7, #20]
 8001116:	fa01 f303 	lsl.w	r3, r1, r3
 800111a:	43d9      	mvns	r1, r3
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001120:	4313      	orrs	r3, r2
         );
}
 8001122:	4618      	mov	r0, r3
 8001124:	3724      	adds	r7, #36	; 0x24
 8001126:	46bd      	mov	sp, r7
 8001128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112c:	4770      	bx	lr
	...

08001130 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b082      	sub	sp, #8
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	3b01      	subs	r3, #1
 800113c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001140:	d301      	bcc.n	8001146 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001142:	2301      	movs	r3, #1
 8001144:	e00f      	b.n	8001166 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001146:	4a0a      	ldr	r2, [pc, #40]	; (8001170 <SysTick_Config+0x40>)
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	3b01      	subs	r3, #1
 800114c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800114e:	210f      	movs	r1, #15
 8001150:	f04f 30ff 	mov.w	r0, #4294967295
 8001154:	f7ff ff8e 	bl	8001074 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001158:	4b05      	ldr	r3, [pc, #20]	; (8001170 <SysTick_Config+0x40>)
 800115a:	2200      	movs	r2, #0
 800115c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800115e:	4b04      	ldr	r3, [pc, #16]	; (8001170 <SysTick_Config+0x40>)
 8001160:	2207      	movs	r2, #7
 8001162:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001164:	2300      	movs	r3, #0
}
 8001166:	4618      	mov	r0, r3
 8001168:	3708      	adds	r7, #8
 800116a:	46bd      	mov	sp, r7
 800116c:	bd80      	pop	{r7, pc}
 800116e:	bf00      	nop
 8001170:	e000e010 	.word	0xe000e010

08001174 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	b082      	sub	sp, #8
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800117c:	6878      	ldr	r0, [r7, #4]
 800117e:	f7ff ff29 	bl	8000fd4 <__NVIC_SetPriorityGrouping>
}
 8001182:	bf00      	nop
 8001184:	3708      	adds	r7, #8
 8001186:	46bd      	mov	sp, r7
 8001188:	bd80      	pop	{r7, pc}

0800118a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800118a:	b580      	push	{r7, lr}
 800118c:	b086      	sub	sp, #24
 800118e:	af00      	add	r7, sp, #0
 8001190:	4603      	mov	r3, r0
 8001192:	60b9      	str	r1, [r7, #8]
 8001194:	607a      	str	r2, [r7, #4]
 8001196:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001198:	f7ff ff40 	bl	800101c <__NVIC_GetPriorityGrouping>
 800119c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800119e:	687a      	ldr	r2, [r7, #4]
 80011a0:	68b9      	ldr	r1, [r7, #8]
 80011a2:	6978      	ldr	r0, [r7, #20]
 80011a4:	f7ff ff90 	bl	80010c8 <NVIC_EncodePriority>
 80011a8:	4602      	mov	r2, r0
 80011aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011ae:	4611      	mov	r1, r2
 80011b0:	4618      	mov	r0, r3
 80011b2:	f7ff ff5f 	bl	8001074 <__NVIC_SetPriority>
}
 80011b6:	bf00      	nop
 80011b8:	3718      	adds	r7, #24
 80011ba:	46bd      	mov	sp, r7
 80011bc:	bd80      	pop	{r7, pc}

080011be <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011be:	b580      	push	{r7, lr}
 80011c0:	b082      	sub	sp, #8
 80011c2:	af00      	add	r7, sp, #0
 80011c4:	4603      	mov	r3, r0
 80011c6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80011c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011cc:	4618      	mov	r0, r3
 80011ce:	f7ff ff33 	bl	8001038 <__NVIC_EnableIRQ>
}
 80011d2:	bf00      	nop
 80011d4:	3708      	adds	r7, #8
 80011d6:	46bd      	mov	sp, r7
 80011d8:	bd80      	pop	{r7, pc}

080011da <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80011da:	b580      	push	{r7, lr}
 80011dc:	b082      	sub	sp, #8
 80011de:	af00      	add	r7, sp, #0
 80011e0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80011e2:	6878      	ldr	r0, [r7, #4]
 80011e4:	f7ff ffa4 	bl	8001130 <SysTick_Config>
 80011e8:	4603      	mov	r3, r0
}
 80011ea:	4618      	mov	r0, r3
 80011ec:	3708      	adds	r7, #8
 80011ee:	46bd      	mov	sp, r7
 80011f0:	bd80      	pop	{r7, pc}
	...

080011f4 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b084      	sub	sp, #16
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d101      	bne.n	8001206 <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 8001202:	2301      	movs	r3, #1
 8001204:	e147      	b.n	8001496 <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800120c:	b2db      	uxtb	r3, r3
 800120e:	2b00      	cmp	r3, #0
 8001210:	d106      	bne.n	8001220 <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	2200      	movs	r2, #0
 8001216:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 800121a:	6878      	ldr	r0, [r7, #4]
 800121c:	f7ff fd12 	bl	8000c44 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	699a      	ldr	r2, [r3, #24]
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	f022 0210 	bic.w	r2, r2, #16
 800122e:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001230:	f7ff fea2 	bl	8000f78 <HAL_GetTick>
 8001234:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8001236:	e012      	b.n	800125e <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8001238:	f7ff fe9e 	bl	8000f78 <HAL_GetTick>
 800123c:	4602      	mov	r2, r0
 800123e:	68fb      	ldr	r3, [r7, #12]
 8001240:	1ad3      	subs	r3, r2, r3
 8001242:	2b0a      	cmp	r3, #10
 8001244:	d90b      	bls.n	800125e <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800124a:	f043 0201 	orr.w	r2, r3, #1
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	2203      	movs	r2, #3
 8001256:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 800125a:	2301      	movs	r3, #1
 800125c:	e11b      	b.n	8001496 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	699b      	ldr	r3, [r3, #24]
 8001264:	f003 0308 	and.w	r3, r3, #8
 8001268:	2b08      	cmp	r3, #8
 800126a:	d0e5      	beq.n	8001238 <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	699a      	ldr	r2, [r3, #24]
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	f042 0201 	orr.w	r2, r2, #1
 800127a:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 800127c:	f7ff fe7c 	bl	8000f78 <HAL_GetTick>
 8001280:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8001282:	e012      	b.n	80012aa <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8001284:	f7ff fe78 	bl	8000f78 <HAL_GetTick>
 8001288:	4602      	mov	r2, r0
 800128a:	68fb      	ldr	r3, [r7, #12]
 800128c:	1ad3      	subs	r3, r2, r3
 800128e:	2b0a      	cmp	r3, #10
 8001290:	d90b      	bls.n	80012aa <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001296:	f043 0201 	orr.w	r2, r3, #1
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	2203      	movs	r2, #3
 80012a2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 80012a6:	2301      	movs	r3, #1
 80012a8:	e0f5      	b.n	8001496 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	699b      	ldr	r3, [r3, #24]
 80012b0:	f003 0301 	and.w	r3, r3, #1
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d0e5      	beq.n	8001284 <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	699a      	ldr	r2, [r3, #24]
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	f042 0202 	orr.w	r2, r2, #2
 80012c6:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	4a74      	ldr	r2, [pc, #464]	; (80014a0 <HAL_FDCAN_Init+0x2ac>)
 80012ce:	4293      	cmp	r3, r2
 80012d0:	d103      	bne.n	80012da <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 80012d2:	4a74      	ldr	r2, [pc, #464]	; (80014a4 <HAL_FDCAN_Init+0x2b0>)
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	685b      	ldr	r3, [r3, #4]
 80012d8:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	7c1b      	ldrb	r3, [r3, #16]
 80012de:	2b01      	cmp	r3, #1
 80012e0:	d108      	bne.n	80012f4 <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	699a      	ldr	r2, [r3, #24]
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80012f0:	619a      	str	r2, [r3, #24]
 80012f2:	e007      	b.n	8001304 <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	699a      	ldr	r2, [r3, #24]
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001302:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	7c5b      	ldrb	r3, [r3, #17]
 8001308:	2b01      	cmp	r3, #1
 800130a:	d108      	bne.n	800131e <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	699a      	ldr	r2, [r3, #24]
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800131a:	619a      	str	r2, [r3, #24]
 800131c:	e007      	b.n	800132e <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	699a      	ldr	r2, [r3, #24]
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800132c:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	7c9b      	ldrb	r3, [r3, #18]
 8001332:	2b01      	cmp	r3, #1
 8001334:	d108      	bne.n	8001348 <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	699a      	ldr	r2, [r3, #24]
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001344:	619a      	str	r2, [r3, #24]
 8001346:	e007      	b.n	8001358 <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	699a      	ldr	r2, [r3, #24]
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001356:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	699b      	ldr	r3, [r3, #24]
 800135e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	689a      	ldr	r2, [r3, #8]
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	430a      	orrs	r2, r1
 800136c:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	699a      	ldr	r2, [r3, #24]
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 800137c:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	691a      	ldr	r2, [r3, #16]
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	f022 0210 	bic.w	r2, r2, #16
 800138c:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	68db      	ldr	r3, [r3, #12]
 8001392:	2b01      	cmp	r3, #1
 8001394:	d108      	bne.n	80013a8 <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	699a      	ldr	r2, [r3, #24]
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	f042 0204 	orr.w	r2, r2, #4
 80013a4:	619a      	str	r2, [r3, #24]
 80013a6:	e02c      	b.n	8001402 <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	68db      	ldr	r3, [r3, #12]
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d028      	beq.n	8001402 <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	68db      	ldr	r3, [r3, #12]
 80013b4:	2b02      	cmp	r3, #2
 80013b6:	d01c      	beq.n	80013f2 <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	699a      	ldr	r2, [r3, #24]
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80013c6:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	691a      	ldr	r2, [r3, #16]
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	f042 0210 	orr.w	r2, r2, #16
 80013d6:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	68db      	ldr	r3, [r3, #12]
 80013dc:	2b03      	cmp	r3, #3
 80013de:	d110      	bne.n	8001402 <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	699a      	ldr	r2, [r3, #24]
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	f042 0220 	orr.w	r2, r2, #32
 80013ee:	619a      	str	r2, [r3, #24]
 80013f0:	e007      	b.n	8001402 <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	699a      	ldr	r2, [r3, #24]
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	f042 0220 	orr.w	r2, r2, #32
 8001400:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	699b      	ldr	r3, [r3, #24]
 8001406:	3b01      	subs	r3, #1
 8001408:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	69db      	ldr	r3, [r3, #28]
 800140e:	3b01      	subs	r3, #1
 8001410:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001412:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	6a1b      	ldr	r3, [r3, #32]
 8001418:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 800141a:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	695b      	ldr	r3, [r3, #20]
 8001422:	3b01      	subs	r3, #1
 8001424:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 800142a:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800142c:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	689b      	ldr	r3, [r3, #8]
 8001432:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001436:	d115      	bne.n	8001464 <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800143c:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001442:	3b01      	subs	r3, #1
 8001444:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8001446:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800144c:	3b01      	subs	r3, #1
 800144e:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8001450:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001458:	3b01      	subs	r3, #1
 800145a:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8001460:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8001462:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	430a      	orrs	r2, r1
 8001476:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 800147a:	6878      	ldr	r0, [r7, #4]
 800147c:	f000 fc7a 	bl	8001d74 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	2200      	movs	r2, #0
 8001484:	659a      	str	r2, [r3, #88]	; 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	2200      	movs	r2, #0
 800148a:	661a      	str	r2, [r3, #96]	; 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	2201      	movs	r2, #1
 8001490:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return HAL_OK;
 8001494:	2300      	movs	r3, #0
}
 8001496:	4618      	mov	r0, r3
 8001498:	3710      	adds	r7, #16
 800149a:	46bd      	mov	sp, r7
 800149c:	bd80      	pop	{r7, pc}
 800149e:	bf00      	nop
 80014a0:	40006400 	.word	0x40006400
 80014a4:	40006500 	.word	0x40006500

080014a8 <HAL_FDCAN_ConfigFilter>:
  * @param  sFilterConfig pointer to an FDCAN_FilterTypeDef structure that
  *         contains the filter configuration information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigFilter(FDCAN_HandleTypeDef *hfdcan, FDCAN_FilterTypeDef *sFilterConfig)
{
 80014a8:	b480      	push	{r7}
 80014aa:	b087      	sub	sp, #28
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]
 80014b0:	6039      	str	r1, [r7, #0]
  uint32_t FilterElementW1;
  uint32_t FilterElementW2;
  uint32_t *FilterAddress;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80014b8:	75fb      	strb	r3, [r7, #23]

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 80014ba:	7dfb      	ldrb	r3, [r7, #23]
 80014bc:	2b01      	cmp	r3, #1
 80014be:	d002      	beq.n	80014c6 <HAL_FDCAN_ConfigFilter+0x1e>
 80014c0:	7dfb      	ldrb	r3, [r7, #23]
 80014c2:	2b02      	cmp	r3, #2
 80014c4:	d13d      	bne.n	8001542 <HAL_FDCAN_ConfigFilter+0x9a>
  {
    /* Check function parameters */
    assert_param(IS_FDCAN_ID_TYPE(sFilterConfig->IdType));
    assert_param(IS_FDCAN_FILTER_CFG(sFilterConfig->FilterConfig));

    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 80014c6:	683b      	ldr	r3, [r7, #0]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d119      	bne.n	8001502 <HAL_FDCAN_ConfigFilter+0x5a>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x7FFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x7FFU));
      assert_param(IS_FDCAN_STD_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build filter element */
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 80014ce:	683b      	ldr	r3, [r7, #0]
 80014d0:	689b      	ldr	r3, [r3, #8]
 80014d2:	079a      	lsls	r2, r3, #30
                         (sFilterConfig->FilterConfig << 27U) |
 80014d4:	683b      	ldr	r3, [r7, #0]
 80014d6:	68db      	ldr	r3, [r3, #12]
 80014d8:	06db      	lsls	r3, r3, #27
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 80014da:	431a      	orrs	r2, r3
                         (sFilterConfig->FilterID1 << 16U)    |
 80014dc:	683b      	ldr	r3, [r7, #0]
 80014de:	691b      	ldr	r3, [r3, #16]
 80014e0:	041b      	lsls	r3, r3, #16
                         (sFilterConfig->FilterConfig << 27U) |
 80014e2:	431a      	orrs	r2, r3
                         sFilterConfig->FilterID2);
 80014e4:	683b      	ldr	r3, [r7, #0]
 80014e6:	695b      	ldr	r3, [r3, #20]
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 80014e8:	4313      	orrs	r3, r2
 80014ea:	613b      	str	r3, [r7, #16]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLS_SIZE));
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80014f0:	683b      	ldr	r3, [r7, #0]
 80014f2:	685b      	ldr	r3, [r3, #4]
 80014f4:	009b      	lsls	r3, r3, #2
 80014f6:	4413      	add	r3, r2
 80014f8:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 80014fa:	68bb      	ldr	r3, [r7, #8]
 80014fc:	693a      	ldr	r2, [r7, #16]
 80014fe:	601a      	str	r2, [r3, #0]
 8001500:	e01d      	b.n	800153e <HAL_FDCAN_ConfigFilter+0x96>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_EXT_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build first word of filter element */
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 8001502:	683b      	ldr	r3, [r7, #0]
 8001504:	68db      	ldr	r3, [r3, #12]
 8001506:	075a      	lsls	r2, r3, #29
 8001508:	683b      	ldr	r3, [r7, #0]
 800150a:	691b      	ldr	r3, [r3, #16]
 800150c:	4313      	orrs	r3, r2
 800150e:	613b      	str	r3, [r7, #16]

      /* Build second word of filter element */
      FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 8001510:	683b      	ldr	r3, [r7, #0]
 8001512:	689b      	ldr	r3, [r3, #8]
 8001514:	079a      	lsls	r2, r3, #30
 8001516:	683b      	ldr	r3, [r7, #0]
 8001518:	695b      	ldr	r3, [r3, #20]
 800151a:	4313      	orrs	r3, r2
 800151c:	60fb      	str	r3, [r7, #12]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLE_SIZE));
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001522:	683b      	ldr	r3, [r7, #0]
 8001524:	685b      	ldr	r3, [r3, #4]
 8001526:	00db      	lsls	r3, r3, #3
 8001528:	4413      	add	r3, r2
 800152a:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 800152c:	68bb      	ldr	r3, [r7, #8]
 800152e:	693a      	ldr	r2, [r7, #16]
 8001530:	601a      	str	r2, [r3, #0]
      FilterAddress++;
 8001532:	68bb      	ldr	r3, [r7, #8]
 8001534:	3304      	adds	r3, #4
 8001536:	60bb      	str	r3, [r7, #8]
      *FilterAddress = FilterElementW2;
 8001538:	68bb      	ldr	r3, [r7, #8]
 800153a:	68fa      	ldr	r2, [r7, #12]
 800153c:	601a      	str	r2, [r3, #0]
    }

    /* Return function status */
    return HAL_OK;
 800153e:	2300      	movs	r3, #0
 8001540:	e006      	b.n	8001550 <HAL_FDCAN_ConfigFilter+0xa8>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001546:	f043 0202 	orr.w	r2, r3, #2
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 800154e:	2301      	movs	r3, #1
  }
}
 8001550:	4618      	mov	r0, r3
 8001552:	371c      	adds	r7, #28
 8001554:	46bd      	mov	sp, r7
 8001556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155a:	4770      	bx	lr

0800155c <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 800155c:	b480      	push	{r7}
 800155e:	b083      	sub	sp, #12
 8001560:	af00      	add	r7, sp, #0
 8001562:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800156a:	b2db      	uxtb	r3, r3
 800156c:	2b01      	cmp	r3, #1
 800156e:	d110      	bne.n	8001592 <HAL_FDCAN_Start+0x36>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	2202      	movs	r2, #2
 8001574:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	699a      	ldr	r2, [r3, #24]
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	f022 0201 	bic.w	r2, r2, #1
 8001586:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	2200      	movs	r2, #0
 800158c:	661a      	str	r2, [r3, #96]	; 0x60

    /* Return function status */
    return HAL_OK;
 800158e:	2300      	movs	r3, #0
 8001590:	e006      	b.n	80015a0 <HAL_FDCAN_Start+0x44>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001596:	f043 0204 	orr.w	r2, r3, #4
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 800159e:	2301      	movs	r3, #1
  }
}
 80015a0:	4618      	mov	r0, r3
 80015a2:	370c      	adds	r7, #12
 80015a4:	46bd      	mov	sp, r7
 80015a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015aa:	4770      	bx	lr

080015ac <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader,
                                                uint8_t *pTxData)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b086      	sub	sp, #24
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	60f8      	str	r0, [r7, #12]
 80015b4:	60b9      	str	r1, [r7, #8]
 80015b6:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80015be:	b2db      	uxtb	r3, r3
 80015c0:	2b02      	cmp	r3, #2
 80015c2:	d12c      	bne.n	800161e <HAL_FDCAN_AddMessageToTxFifoQ+0x72>
  {
    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80015cc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d007      	beq.n	80015e4 <HAL_FDCAN_AddMessageToTxFifoQ+0x38>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80015d8:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 80015e0:	2301      	movs	r3, #1
 80015e2:	e023      	b.n	800162c <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80015ec:	0c1b      	lsrs	r3, r3, #16
 80015ee:	f003 0303 	and.w	r3, r3, #3
 80015f2:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 80015f4:	697b      	ldr	r3, [r7, #20]
 80015f6:	687a      	ldr	r2, [r7, #4]
 80015f8:	68b9      	ldr	r1, [r7, #8]
 80015fa:	68f8      	ldr	r0, [r7, #12]
 80015fc:	f000 fc10 	bl	8001e20 <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	2101      	movs	r1, #1
 8001606:	697a      	ldr	r2, [r7, #20]
 8001608:	fa01 f202 	lsl.w	r2, r1, r2
 800160c:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 8001610:	2201      	movs	r2, #1
 8001612:	697b      	ldr	r3, [r7, #20]
 8001614:	409a      	lsls	r2, r3
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	659a      	str	r2, [r3, #88]	; 0x58
    }

    /* Return function status */
    return HAL_OK;
 800161a:	2300      	movs	r3, #0
 800161c:	e006      	b.n	800162c <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 800161e:	68fb      	ldr	r3, [r7, #12]
 8001620:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001622:	f043 0208 	orr.w	r2, r3, #8
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 800162a:	2301      	movs	r3, #1
  }
}
 800162c:	4618      	mov	r0, r3
 800162e:	3718      	adds	r7, #24
 8001630:	46bd      	mov	sp, r7
 8001632:	bd80      	pop	{r7, pc}

08001634 <HAL_FDCAN_GetLatestTxFifoQRequestBuffer>:
  * @retval Tx buffer index of last Tx FIFO/Queue request
  *          - Any value of @arg FDCAN_Tx_location if Tx request has been submitted.
  *          - 0 if no Tx FIFO/Queue request have been submitted.
  */
uint32_t HAL_FDCAN_GetLatestTxFifoQRequestBuffer(FDCAN_HandleTypeDef *hfdcan)
{
 8001634:	b480      	push	{r7}
 8001636:	b083      	sub	sp, #12
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
  /* Return Last Tx FIFO/Queue Request Buffer */
  return hfdcan->LatestTxFifoQRequest;
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001640:	4618      	mov	r0, r3
 8001642:	370c      	adds	r7, #12
 8001644:	46bd      	mov	sp, r7
 8001646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164a:	4770      	bx	lr

0800164c <HAL_FDCAN_AbortTxRequest>:
  * @param  BufferIndex buffer index.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AbortTxRequest(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndex)
{
 800164c:	b480      	push	{r7}
 800164e:	b083      	sub	sp, #12
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]
 8001654:	6039      	str	r1, [r7, #0]
  /* Check function parameters */
  assert_param(IS_FDCAN_TX_LOCATION_LIST(BufferIndex));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800165c:	b2db      	uxtb	r3, r3
 800165e:	2b02      	cmp	r3, #2
 8001660:	d106      	bne.n	8001670 <HAL_FDCAN_AbortTxRequest+0x24>
  {
    /* Add cancellation request */
    hfdcan->Instance->TXBCR = BufferIndex;
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	683a      	ldr	r2, [r7, #0]
 8001668:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0

    /* Return function status */
    return HAL_OK;
 800166c:	2300      	movs	r3, #0
 800166e:	e006      	b.n	800167e <HAL_FDCAN_AbortTxRequest+0x32>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001674:	f043 0208 	orr.w	r2, r3, #8
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 800167c:	2301      	movs	r3, #1
  }
}
 800167e:	4618      	mov	r0, r3
 8001680:	370c      	adds	r7, #12
 8001682:	46bd      	mov	sp, r7
 8001684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001688:	4770      	bx	lr
	...

0800168c <HAL_FDCAN_GetRxMessage>:
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation,
                                         FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 800168c:	b480      	push	{r7}
 800168e:	b08b      	sub	sp, #44	; 0x2c
 8001690:	af00      	add	r7, sp, #0
 8001692:	60f8      	str	r0, [r7, #12]
 8001694:	60b9      	str	r1, [r7, #8]
 8001696:	607a      	str	r2, [r7, #4]
 8001698:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80016a0:	76fb      	strb	r3, [r7, #27]

  /* Check function parameters */
  assert_param(IS_FDCAN_RX_FIFO(RxLocation));

  if (state == HAL_FDCAN_STATE_BUSY)
 80016a2:	7efb      	ldrb	r3, [r7, #27]
 80016a4:	2b02      	cmp	r3, #2
 80016a6:	f040 80bc 	bne.w	8001822 <HAL_FDCAN_GetRxMessage+0x196>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 80016aa:	68bb      	ldr	r3, [r7, #8]
 80016ac:	2b40      	cmp	r3, #64	; 0x40
 80016ae:	d121      	bne.n	80016f4 <HAL_FDCAN_GetRxMessage+0x68>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80016b8:	f003 030f 	and.w	r3, r3, #15
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d107      	bne.n	80016d0 <HAL_FDCAN_GetRxMessage+0x44>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80016c4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	661a      	str	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 80016cc:	2301      	movs	r3, #1
 80016ce:	e0af      	b.n	8001830 <HAL_FDCAN_GetRxMessage+0x1a4>
      }
      else
      {
        /* Calculate Rx FIFO 0 element address */
        GetIndex = ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80016d8:	0a1b      	lsrs	r3, r3, #8
 80016da:	f003 0303 	and.w	r3, r3, #3
 80016de:	61fb      	str	r3, [r7, #28]
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * SRAMCAN_RF0_SIZE));
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	6c99      	ldr	r1, [r3, #72]	; 0x48
 80016e4:	69fa      	ldr	r2, [r7, #28]
 80016e6:	4613      	mov	r3, r2
 80016e8:	00db      	lsls	r3, r3, #3
 80016ea:	4413      	add	r3, r2
 80016ec:	00db      	lsls	r3, r3, #3
 80016ee:	440b      	add	r3, r1
 80016f0:	627b      	str	r3, [r7, #36]	; 0x24
 80016f2:	e020      	b.n	8001736 <HAL_FDCAN_GetRxMessage+0xaa>
      }
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80016fc:	f003 030f 	and.w	r3, r3, #15
 8001700:	2b00      	cmp	r3, #0
 8001702:	d107      	bne.n	8001714 <HAL_FDCAN_GetRxMessage+0x88>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001708:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	661a      	str	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 8001710:	2301      	movs	r3, #1
 8001712:	e08d      	b.n	8001830 <HAL_FDCAN_GetRxMessage+0x1a4>
      }
      else
      {
        /* Calculate Rx FIFO 1 element address */
        GetIndex = ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800171c:	0a1b      	lsrs	r3, r3, #8
 800171e:	f003 0303 	and.w	r3, r3, #3
 8001722:	61fb      	str	r3, [r7, #28]
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * SRAMCAN_RF1_SIZE));
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8001728:	69fa      	ldr	r2, [r7, #28]
 800172a:	4613      	mov	r3, r2
 800172c:	00db      	lsls	r3, r3, #3
 800172e:	4413      	add	r3, r2
 8001730:	00db      	lsls	r3, r3, #3
 8001732:	440b      	add	r3, r1
 8001734:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 8001736:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	f003 4280 	and.w	r2, r3, #1073741824	; 0x40000000
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	685b      	ldr	r3, [r3, #4]
 8001746:	2b00      	cmp	r3, #0
 8001748:	d107      	bne.n	800175a <HAL_FDCAN_GetRxMessage+0xce>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 800174a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	0c9b      	lsrs	r3, r3, #18
 8001750:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	601a      	str	r2, [r3, #0]
 8001758:	e005      	b.n	8001766 <HAL_FDCAN_GetRxMessage+0xda>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 800175a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 8001766:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	f003 5200 	and.w	r2, r3, #536870912	; 0x20000000
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 8001772:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 800177e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001780:	3304      	adds	r3, #4
 8001782:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 8001784:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	b29a      	uxth	r2, r3
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = (*RxAddress & FDCAN_ELEMENT_MASK_DLC);
 800178e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	f403 2270 	and.w	r2, r3, #983040	; 0xf0000
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 800179a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	f403 1280 	and.w	r2, r3, #1048576	; 0x100000
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 80017a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	f403 1200 	and.w	r2, r3, #2097152	; 0x200000
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 80017b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	0e1b      	lsrs	r3, r3, #24
 80017b8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 80017c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	0fda      	lsrs	r2, r3, #31
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 80017ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017cc:	3304      	adds	r3, #4
 80017ce:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 80017d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017d2:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16U]; ByteCounter++)
 80017d4:	2300      	movs	r3, #0
 80017d6:	623b      	str	r3, [r7, #32]
 80017d8:	e00a      	b.n	80017f0 <HAL_FDCAN_GetRxMessage+0x164>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 80017da:	697a      	ldr	r2, [r7, #20]
 80017dc:	6a3b      	ldr	r3, [r7, #32]
 80017de:	441a      	add	r2, r3
 80017e0:	6839      	ldr	r1, [r7, #0]
 80017e2:	6a3b      	ldr	r3, [r7, #32]
 80017e4:	440b      	add	r3, r1
 80017e6:	7812      	ldrb	r2, [r2, #0]
 80017e8:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16U]; ByteCounter++)
 80017ea:	6a3b      	ldr	r3, [r7, #32]
 80017ec:	3301      	adds	r3, #1
 80017ee:	623b      	str	r3, [r7, #32]
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	68db      	ldr	r3, [r3, #12]
 80017f4:	0c1b      	lsrs	r3, r3, #16
 80017f6:	4a11      	ldr	r2, [pc, #68]	; (800183c <HAL_FDCAN_GetRxMessage+0x1b0>)
 80017f8:	5cd3      	ldrb	r3, [r2, r3]
 80017fa:	461a      	mov	r2, r3
 80017fc:	6a3b      	ldr	r3, [r7, #32]
 80017fe:	4293      	cmp	r3, r2
 8001800:	d3eb      	bcc.n	80017da <HAL_FDCAN_GetRxMessage+0x14e>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8001802:	68bb      	ldr	r3, [r7, #8]
 8001804:	2b40      	cmp	r3, #64	; 0x40
 8001806:	d105      	bne.n	8001814 <HAL_FDCAN_GetRxMessage+0x188>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	69fa      	ldr	r2, [r7, #28]
 800180e:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
 8001812:	e004      	b.n	800181e <HAL_FDCAN_GetRxMessage+0x192>
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	69fa      	ldr	r2, [r7, #28]
 800181a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    }

    /* Return function status */
    return HAL_OK;
 800181e:	2300      	movs	r3, #0
 8001820:	e006      	b.n	8001830 <HAL_FDCAN_GetRxMessage+0x1a4>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001826:	f043 0208 	orr.w	r2, r3, #8
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 800182e:	2301      	movs	r3, #1
  }
}
 8001830:	4618      	mov	r0, r3
 8001832:	372c      	adds	r7, #44	; 0x2c
 8001834:	46bd      	mov	sp, r7
 8001836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183a:	4770      	bx	lr
 800183c:	0800a158 	.word	0x0800a158

08001840 <HAL_FDCAN_GetTxFifoFreeLevel>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval Tx FIFO free level.
  */
uint32_t HAL_FDCAN_GetTxFifoFreeLevel(FDCAN_HandleTypeDef *hfdcan)
{
 8001840:	b480      	push	{r7}
 8001842:	b085      	sub	sp, #20
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]
  uint32_t FreeLevel;

  FreeLevel = hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFFL;
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8001850:	f003 0307 	and.w	r3, r3, #7
 8001854:	60fb      	str	r3, [r7, #12]

  /* Return Tx FIFO free level */
  return FreeLevel;
 8001856:	68fb      	ldr	r3, [r7, #12]
}
 8001858:	4618      	mov	r0, r3
 800185a:	3714      	adds	r7, #20
 800185c:	46bd      	mov	sp, r7
 800185e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001862:	4770      	bx	lr

08001864 <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs,
                                                 uint32_t BufferIndexes)
{
 8001864:	b480      	push	{r7}
 8001866:	b087      	sub	sp, #28
 8001868:	af00      	add	r7, sp, #0
 800186a:	60f8      	str	r0, [r7, #12]
 800186c:	60b9      	str	r1, [r7, #8]
 800186e:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8001876:	75fb      	strb	r3, [r7, #23]
  if ((ActiveITs & (FDCAN_IT_TX_COMPLETE | FDCAN_IT_TX_ABORT_COMPLETE)) != 0U)
  {
    assert_param(IS_FDCAN_TX_LOCATION_LIST(BufferIndexes));
  }

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8001878:	7dfb      	ldrb	r3, [r7, #23]
 800187a:	2b01      	cmp	r3, #1
 800187c:	d003      	beq.n	8001886 <HAL_FDCAN_ActivateNotification+0x22>
 800187e:	7dfb      	ldrb	r3, [r7, #23]
 8001880:	2b02      	cmp	r3, #2
 8001882:	f040 80c8 	bne.w	8001a16 <HAL_FDCAN_ActivateNotification+0x1b2>
  {
    /* Get interrupts line selection */
    ITs_lines_selection = hfdcan->Instance->ILS;
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800188c:	613b      	str	r3, [r7, #16]

    /* Enable Interrupt lines */
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0) != 0U)
 800188e:	68bb      	ldr	r3, [r7, #8]
 8001890:	f003 0307 	and.w	r3, r3, #7
 8001894:	2b00      	cmp	r3, #0
 8001896:	d004      	beq.n	80018a2 <HAL_FDCAN_ActivateNotification+0x3e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 8001898:	693b      	ldr	r3, [r7, #16]
 800189a:	f003 0301 	and.w	r3, r3, #1
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d03b      	beq.n	800191a <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 80018a2:	68bb      	ldr	r3, [r7, #8]
 80018a4:	f003 0338 	and.w	r3, r3, #56	; 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d004      	beq.n	80018b6 <HAL_FDCAN_ActivateNotification+0x52>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 80018ac:	693b      	ldr	r3, [r7, #16]
 80018ae:	f003 0302 	and.w	r3, r3, #2
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d031      	beq.n	800191a <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 80018b6:	68bb      	ldr	r3, [r7, #8]
 80018b8:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d004      	beq.n	80018ca <HAL_FDCAN_ActivateNotification+0x66>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 80018c0:	693b      	ldr	r3, [r7, #16]
 80018c2:	f003 0304 	and.w	r3, r3, #4
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d027      	beq.n	800191a <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 80018ca:	68bb      	ldr	r3, [r7, #8]
 80018cc:	f403 53f0 	and.w	r3, r3, #7680	; 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d004      	beq.n	80018de <HAL_FDCAN_ActivateNotification+0x7a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 80018d4:	693b      	ldr	r3, [r7, #16]
 80018d6:	f003 0308 	and.w	r3, r3, #8
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d01d      	beq.n	800191a <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 80018de:	68bb      	ldr	r3, [r7, #8]
 80018e0:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d004      	beq.n	80018f2 <HAL_FDCAN_ActivateNotification+0x8e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 80018e8:	693b      	ldr	r3, [r7, #16]
 80018ea:	f003 0310 	and.w	r3, r3, #16
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d013      	beq.n	800191a <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 80018f2:	68bb      	ldr	r3, [r7, #8]
 80018f4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d004      	beq.n	8001906 <HAL_FDCAN_ActivateNotification+0xa2>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 80018fc:	693b      	ldr	r3, [r7, #16]
 80018fe:	f003 0320 	and.w	r3, r3, #32
 8001902:	2b00      	cmp	r3, #0
 8001904:	d009      	beq.n	800191a <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 8001906:	68bb      	ldr	r3, [r7, #8]
 8001908:	f403 037c 	and.w	r3, r3, #16515072	; 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 800190c:	2b00      	cmp	r3, #0
 800190e:	d00c      	beq.n	800192a <HAL_FDCAN_ActivateNotification+0xc6>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) == 0U)))
 8001910:	693b      	ldr	r3, [r7, #16]
 8001912:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001916:	2b00      	cmp	r3, #0
 8001918:	d107      	bne.n	800192a <HAL_FDCAN_ActivateNotification+0xc6>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	f042 0201 	orr.w	r2, r2, #1
 8001928:	65da      	str	r2, [r3, #92]	; 0x5c
    }
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0)       != 0U)
 800192a:	68bb      	ldr	r3, [r7, #8]
 800192c:	f003 0307 	and.w	r3, r3, #7
 8001930:	2b00      	cmp	r3, #0
 8001932:	d004      	beq.n	800193e <HAL_FDCAN_ActivateNotification+0xda>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 8001934:	693b      	ldr	r3, [r7, #16]
 8001936:	f003 0301 	and.w	r3, r3, #1
 800193a:	2b00      	cmp	r3, #0
 800193c:	d13b      	bne.n	80019b6 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 800193e:	68bb      	ldr	r3, [r7, #8]
 8001940:	f003 0338 	and.w	r3, r3, #56	; 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 8001944:	2b00      	cmp	r3, #0
 8001946:	d004      	beq.n	8001952 <HAL_FDCAN_ActivateNotification+0xee>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 8001948:	693b      	ldr	r3, [r7, #16]
 800194a:	f003 0302 	and.w	r3, r3, #2
 800194e:	2b00      	cmp	r3, #0
 8001950:	d131      	bne.n	80019b6 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 8001952:	68bb      	ldr	r3, [r7, #8]
 8001954:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 8001958:	2b00      	cmp	r3, #0
 800195a:	d004      	beq.n	8001966 <HAL_FDCAN_ActivateNotification+0x102>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 800195c:	693b      	ldr	r3, [r7, #16]
 800195e:	f003 0304 	and.w	r3, r3, #4
 8001962:	2b00      	cmp	r3, #0
 8001964:	d127      	bne.n	80019b6 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 8001966:	68bb      	ldr	r3, [r7, #8]
 8001968:	f403 53f0 	and.w	r3, r3, #7680	; 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 800196c:	2b00      	cmp	r3, #0
 800196e:	d004      	beq.n	800197a <HAL_FDCAN_ActivateNotification+0x116>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 8001970:	693b      	ldr	r3, [r7, #16]
 8001972:	f003 0308 	and.w	r3, r3, #8
 8001976:	2b00      	cmp	r3, #0
 8001978:	d11d      	bne.n	80019b6 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 800197a:	68bb      	ldr	r3, [r7, #8]
 800197c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 8001980:	2b00      	cmp	r3, #0
 8001982:	d004      	beq.n	800198e <HAL_FDCAN_ActivateNotification+0x12a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 8001984:	693b      	ldr	r3, [r7, #16]
 8001986:	f003 0310 	and.w	r3, r3, #16
 800198a:	2b00      	cmp	r3, #0
 800198c:	d113      	bne.n	80019b6 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 800198e:	68bb      	ldr	r3, [r7, #8]
 8001990:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 8001994:	2b00      	cmp	r3, #0
 8001996:	d004      	beq.n	80019a2 <HAL_FDCAN_ActivateNotification+0x13e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 8001998:	693b      	ldr	r3, [r7, #16]
 800199a:	f003 0320 	and.w	r3, r3, #32
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d109      	bne.n	80019b6 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 80019a2:	68bb      	ldr	r3, [r7, #8]
 80019a4:	f403 037c 	and.w	r3, r3, #16515072	; 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d00c      	beq.n	80019c6 <HAL_FDCAN_ActivateNotification+0x162>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) != 0U)))
 80019ac:	693b      	ldr	r3, [r7, #16]
 80019ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d007      	beq.n	80019c6 <HAL_FDCAN_ActivateNotification+0x162>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	f042 0202 	orr.w	r2, r2, #2
 80019c4:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 80019c6:	68bb      	ldr	r3, [r7, #8]
 80019c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d009      	beq.n	80019e4 <HAL_FDCAN_ActivateNotification+0x180>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	f8d3 10dc 	ldr.w	r1, [r3, #220]	; 0xdc
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	687a      	ldr	r2, [r7, #4]
 80019de:	430a      	orrs	r2, r1
 80019e0:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 80019e4:	68bb      	ldr	r3, [r7, #8]
 80019e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d009      	beq.n	8001a02 <HAL_FDCAN_ActivateNotification+0x19e>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	f8d3 10e0 	ldr.w	r1, [r3, #224]	; 0xe0
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	687a      	ldr	r2, [r7, #4]
 80019fc:	430a      	orrs	r2, r1
 80019fe:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	68ba      	ldr	r2, [r7, #8]
 8001a0e:	430a      	orrs	r2, r1
 8001a10:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return function status */
    return HAL_OK;
 8001a12:	2300      	movs	r3, #0
 8001a14:	e006      	b.n	8001a24 <HAL_FDCAN_ActivateNotification+0x1c0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a1a:	f043 0202 	orr.w	r2, r3, #2
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8001a22:	2301      	movs	r3, #1
  }
}
 8001a24:	4618      	mov	r0, r3
 8001a26:	371c      	adds	r7, #28
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2e:	4770      	bx	lr

08001a30 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	b08a      	sub	sp, #40	; 0x28
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]
  uint32_t Errors;
  uint32_t ErrorStatusITs;
  uint32_t TransmittedBuffers;
  uint32_t AbortedBuffers;

  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001a3e:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8001a42:	627b      	str	r3, [r7, #36]	; 0x24
  TxEventFifoITs &= hfdcan->Instance->IE;
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a4a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a4c:	4013      	ands	r3, r2
 8001a4e:	627b      	str	r3, [r7, #36]	; 0x24
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001a56:	f003 0307 	and.w	r3, r3, #7
 8001a5a:	623b      	str	r3, [r7, #32]
  RxFifo0ITs &= hfdcan->Instance->IE;
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a62:	6a3a      	ldr	r2, [r7, #32]
 8001a64:	4013      	ands	r3, r2
 8001a66:	623b      	str	r3, [r7, #32]
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001a6e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001a72:	61fb      	str	r3, [r7, #28]
  RxFifo1ITs &= hfdcan->Instance->IE;
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a7a:	69fa      	ldr	r2, [r7, #28]
 8001a7c:	4013      	ands	r3, r2
 8001a7e:	61fb      	str	r3, [r7, #28]
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001a86:	f403 0371 	and.w	r3, r3, #15794176	; 0xf10000
 8001a8a:	61bb      	str	r3, [r7, #24]
  Errors &= hfdcan->Instance->IE;
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a92:	69ba      	ldr	r2, [r7, #24]
 8001a94:	4013      	ands	r3, r2
 8001a96:	61bb      	str	r3, [r7, #24]
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001a9e:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001aa2:	617b      	str	r3, [r7, #20]
  ErrorStatusITs &= hfdcan->Instance->IE;
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001aaa:	697a      	ldr	r2, [r7, #20]
 8001aac:	4013      	ands	r3, r2
 8001aae:	617b      	str	r3, [r7, #20]

  /* High Priority Message interrupt management *******************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != 0U)
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001ab6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d00d      	beq.n	8001ada <HAL_FDCAN_IRQHandler+0xaa>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != 0U)
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ac4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d006      	beq.n	8001ada <HAL_FDCAN_IRQHandler+0xaa>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	2240      	movs	r2, #64	; 0x40
 8001ad2:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 8001ad4:	6878      	ldr	r0, [r7, #4]
 8001ad6:	f000 f92e 	bl	8001d36 <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE) != 0U)
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001ae0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d01b      	beq.n	8001b20 <HAL_FDCAN_IRQHandler+0xf0>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001aee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d014      	beq.n	8001b20 <HAL_FDCAN_IRQHandler+0xf0>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001afe:	613b      	str	r3, [r7, #16]
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b08:	693a      	ldr	r2, [r7, #16]
 8001b0a:	4013      	ands	r3, r2
 8001b0c:	613b      	str	r3, [r7, #16]

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001b16:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 8001b18:	6939      	ldr	r1, [r7, #16]
 8001b1a:	6878      	ldr	r0, [r7, #4]
 8001b1c:	f000 f8ec 	bl	8001cf8 <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 8001b20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d007      	beq.n	8001b36 <HAL_FDCAN_IRQHandler+0x106>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b2c:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 8001b2e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001b30:	6878      	ldr	r0, [r7, #4]
 8001b32:	f000 f8b6 	bl	8001ca2 <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 8001b36:	6a3b      	ldr	r3, [r7, #32]
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d007      	beq.n	8001b4c <HAL_FDCAN_IRQHandler+0x11c>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	6a3a      	ldr	r2, [r7, #32]
 8001b42:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 8001b44:	6a39      	ldr	r1, [r7, #32]
 8001b46:	6878      	ldr	r0, [r7, #4]
 8001b48:	f7fe fce8 	bl	800051c <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 8001b4c:	69fb      	ldr	r3, [r7, #28]
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d007      	beq.n	8001b62 <HAL_FDCAN_IRQHandler+0x132>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	69fa      	ldr	r2, [r7, #28]
 8001b58:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 8001b5a:	69f9      	ldr	r1, [r7, #28]
 8001b5c:	6878      	ldr	r0, [r7, #4]
 8001b5e:	f000 f8ab 	bl	8001cb8 <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY) != 0U)
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001b68:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d00e      	beq.n	8001b8e <HAL_FDCAN_IRQHandler+0x15e>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_FIFO_EMPTY) != 0U)
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b76:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d007      	beq.n	8001b8e <HAL_FDCAN_IRQHandler+0x15e>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001b86:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 8001b88:	6878      	ldr	r0, [r7, #4]
 8001b8a:	f000 f8a0 	bl	8001cce <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE) != 0U)
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001b94:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d01a      	beq.n	8001bd2 <HAL_FDCAN_IRQHandler+0x1a2>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_COMPLETE) != 0U)
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ba2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d013      	beq.n	8001bd2 <HAL_FDCAN_IRQHandler+0x1a2>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8001bb2:	60fb      	str	r3, [r7, #12]
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8001bbc:	68fa      	ldr	r2, [r7, #12]
 8001bbe:	4013      	ands	r3, r2
 8001bc0:	60fb      	str	r3, [r7, #12]

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	2280      	movs	r2, #128	; 0x80
 8001bc8:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 8001bca:	68f9      	ldr	r1, [r7, #12]
 8001bcc:	6878      	ldr	r0, [r7, #4]
 8001bce:	f000 f888 	bl	8001ce2 <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != 0U)
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001bd8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d00e      	beq.n	8001bfe <HAL_FDCAN_IRQHandler+0x1ce>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMESTAMP_WRAPAROUND) != 0U)
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001be6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d007      	beq.n	8001bfe <HAL_FDCAN_IRQHandler+0x1ce>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001bf6:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 8001bf8:	6878      	ldr	r0, [r7, #4]
 8001bfa:	f000 f888 	bl	8001d0e <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED) != 0U)
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001c04:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d00e      	beq.n	8001c2a <HAL_FDCAN_IRQHandler+0x1fa>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMEOUT_OCCURRED) != 0U)
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c12:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d007      	beq.n	8001c2a <HAL_FDCAN_IRQHandler+0x1fa>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001c22:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 8001c24:	6878      	ldr	r0, [r7, #4]
 8001c26:	f000 f87c 	bl	8001d22 <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE) != 0U)
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001c30:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d011      	beq.n	8001c5c <HAL_FDCAN_IRQHandler+0x22c>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RAM_ACCESS_FAILURE) != 0U)
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c3e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d00a      	beq.n	8001c5c <HAL_FDCAN_IRQHandler+0x22c>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001c4e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c54:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	661a      	str	r2, [r3, #96]	; 0x60
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 8001c5c:	697b      	ldr	r3, [r7, #20]
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d007      	beq.n	8001c72 <HAL_FDCAN_IRQHandler+0x242>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	697a      	ldr	r2, [r7, #20]
 8001c68:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 8001c6a:	6979      	ldr	r1, [r7, #20]
 8001c6c:	6878      	ldr	r0, [r7, #4]
 8001c6e:	f000 f876 	bl	8001d5e <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 8001c72:	69bb      	ldr	r3, [r7, #24]
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d009      	beq.n	8001c8c <HAL_FDCAN_IRQHandler+0x25c>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	69ba      	ldr	r2, [r7, #24]
 8001c7e:	651a      	str	r2, [r3, #80]	; 0x50

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001c84:	69bb      	ldr	r3, [r7, #24]
 8001c86:	431a      	orrs	r2, r3
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d002      	beq.n	8001c9a <HAL_FDCAN_IRQHandler+0x26a>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 8001c94:	6878      	ldr	r0, [r7, #4]
 8001c96:	f000 f858 	bl	8001d4a <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 8001c9a:	bf00      	nop
 8001c9c:	3728      	adds	r7, #40	; 0x28
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	bd80      	pop	{r7, pc}

08001ca2 <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signalled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 8001ca2:	b480      	push	{r7}
 8001ca4:	b083      	sub	sp, #12
 8001ca6:	af00      	add	r7, sp, #0
 8001ca8:	6078      	str	r0, [r7, #4]
 8001caa:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 8001cac:	bf00      	nop
 8001cae:	370c      	adds	r7, #12
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb6:	4770      	bx	lr

08001cb8 <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signalled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 8001cb8:	b480      	push	{r7}
 8001cba:	b083      	sub	sp, #12
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]
 8001cc0:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 8001cc2:	bf00      	nop
 8001cc4:	370c      	adds	r7, #12
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ccc:	4770      	bx	lr

08001cce <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8001cce:	b480      	push	{r7}
 8001cd0:	b083      	sub	sp, #12
 8001cd2:	af00      	add	r7, sp, #0
 8001cd4:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 8001cd6:	bf00      	nop
 8001cd8:	370c      	adds	r7, #12
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce0:	4770      	bx	lr

08001ce2 <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8001ce2:	b480      	push	{r7}
 8001ce4:	b083      	sub	sp, #12
 8001ce6:	af00      	add	r7, sp, #0
 8001ce8:	6078      	str	r0, [r7, #4]
 8001cea:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 8001cec:	bf00      	nop
 8001cee:	370c      	adds	r7, #12
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf6:	4770      	bx	lr

08001cf8 <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8001cf8:	b480      	push	{r7}
 8001cfa:	b083      	sub	sp, #12
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
 8001d00:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 8001d02:	bf00      	nop
 8001d04:	370c      	adds	r7, #12
 8001d06:	46bd      	mov	sp, r7
 8001d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0c:	4770      	bx	lr

08001d0e <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8001d0e:	b480      	push	{r7}
 8001d10:	b083      	sub	sp, #12
 8001d12:	af00      	add	r7, sp, #0
 8001d14:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 8001d16:	bf00      	nop
 8001d18:	370c      	adds	r7, #12
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d20:	4770      	bx	lr

08001d22 <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8001d22:	b480      	push	{r7}
 8001d24:	b083      	sub	sp, #12
 8001d26:	af00      	add	r7, sp, #0
 8001d28:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 8001d2a:	bf00      	nop
 8001d2c:	370c      	adds	r7, #12
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d34:	4770      	bx	lr

08001d36 <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8001d36:	b480      	push	{r7}
 8001d38:	b083      	sub	sp, #12
 8001d3a:	af00      	add	r7, sp, #0
 8001d3c:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 8001d3e:	bf00      	nop
 8001d40:	370c      	adds	r7, #12
 8001d42:	46bd      	mov	sp, r7
 8001d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d48:	4770      	bx	lr

08001d4a <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8001d4a:	b480      	push	{r7}
 8001d4c:	b083      	sub	sp, #12
 8001d4e:	af00      	add	r7, sp, #0
 8001d50:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 8001d52:	bf00      	nop
 8001d54:	370c      	adds	r7, #12
 8001d56:	46bd      	mov	sp, r7
 8001d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5c:	4770      	bx	lr

08001d5e <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 8001d5e:	b480      	push	{r7}
 8001d60:	b083      	sub	sp, #12
 8001d62:	af00      	add	r7, sp, #0
 8001d64:	6078      	str	r0, [r7, #4]
 8001d66:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 8001d68:	bf00      	nop
 8001d6a:	370c      	adds	r7, #12
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d72:	4770      	bx	lr

08001d74 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8001d74:	b480      	push	{r7}
 8001d76:	b085      	sub	sp, #20
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 8001d7c:	4b27      	ldr	r3, [pc, #156]	; (8001e1c <FDCAN_CalcultateRamBlockAddresses+0xa8>)
 8001d7e:	60bb      	str	r3, [r7, #8]
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	68ba      	ldr	r2, [r7, #8]
 8001d84:	641a      	str	r2, [r3, #64]	; 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001d8e:	f423 11f8 	bic.w	r1, r3, #2031616	; 0x1f0000
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d96:	041a      	lsls	r2, r3, #16
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	430a      	orrs	r2, r1
 8001d9e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 8001da2:	68bb      	ldr	r3, [r7, #8]
 8001da4:	f103 0270 	add.w	r2, r3, #112	; 0x70
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	645a      	str	r2, [r3, #68]	; 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001db4:	f023 6170 	bic.w	r1, r3, #251658240	; 0xf000000
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001dbc:	061a      	lsls	r2, r3, #24
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	430a      	orrs	r2, r1
 8001dc4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 8001dc8:	68bb      	ldr	r3, [r7, #8]
 8001dca:	f103 02b0 	add.w	r2, r3, #176	; 0xb0
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	649a      	str	r2, [r3, #72]	; 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 8001dd2:	68bb      	ldr	r3, [r7, #8]
 8001dd4:	f503 72c4 	add.w	r2, r3, #392	; 0x188
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 8001ddc:	68bb      	ldr	r3, [r7, #8]
 8001dde:	f503 7218 	add.w	r2, r3, #608	; 0x260
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	651a      	str	r2, [r3, #80]	; 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 8001de6:	68bb      	ldr	r3, [r7, #8]
 8001de8:	f503 721e 	add.w	r2, r3, #632	; 0x278
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	655a      	str	r2, [r3, #84]	; 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8001df0:	68bb      	ldr	r3, [r7, #8]
 8001df2:	60fb      	str	r3, [r7, #12]
 8001df4:	e005      	b.n	8001e02 <FDCAN_CalcultateRamBlockAddresses+0x8e>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	2200      	movs	r2, #0
 8001dfa:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	3304      	adds	r3, #4
 8001e00:	60fb      	str	r3, [r7, #12]
 8001e02:	68bb      	ldr	r3, [r7, #8]
 8001e04:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8001e08:	68fa      	ldr	r2, [r7, #12]
 8001e0a:	429a      	cmp	r2, r3
 8001e0c:	d3f3      	bcc.n	8001df6 <FDCAN_CalcultateRamBlockAddresses+0x82>
  }
}
 8001e0e:	bf00      	nop
 8001e10:	bf00      	nop
 8001e12:	3714      	adds	r7, #20
 8001e14:	46bd      	mov	sp, r7
 8001e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1a:	4770      	bx	lr
 8001e1c:	4000a400 	.word	0x4000a400

08001e20 <FDCAN_CopyMessageToRAM>:
  * @param  BufferIndex index of the buffer to be configured.
  * @retval none
 */
static void FDCAN_CopyMessageToRAM(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader, uint8_t *pTxData,
                                   uint32_t BufferIndex)
{
 8001e20:	b480      	push	{r7}
 8001e22:	b089      	sub	sp, #36	; 0x24
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	60f8      	str	r0, [r7, #12]
 8001e28:	60b9      	str	r1, [r7, #8]
 8001e2a:	607a      	str	r2, [r7, #4]
 8001e2c:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 8001e2e:	68bb      	ldr	r3, [r7, #8]
 8001e30:	685b      	ldr	r3, [r3, #4]
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d10a      	bne.n	8001e4c <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8001e36:	68bb      	ldr	r3, [r7, #8]
 8001e38:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 8001e3a:	68bb      	ldr	r3, [r7, #8]
 8001e3c:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 8001e3e:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18U));
 8001e40:	68bb      	ldr	r3, [r7, #8]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8001e46:	4313      	orrs	r3, r2
 8001e48:	61fb      	str	r3, [r7, #28]
 8001e4a:	e00a      	b.n	8001e62 <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8001e4c:	68bb      	ldr	r3, [r7, #8]
 8001e4e:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 8001e50:	68bb      	ldr	r3, [r7, #8]
 8001e52:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 8001e54:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 8001e56:	68bb      	ldr	r3, [r7, #8]
 8001e58:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 8001e5a:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8001e5c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001e60:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8001e62:	68bb      	ldr	r3, [r7, #8]
 8001e64:	6a1b      	ldr	r3, [r3, #32]
 8001e66:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 8001e68:	68bb      	ldr	r3, [r7, #8]
 8001e6a:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8001e6c:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 8001e6e:	68bb      	ldr	r3, [r7, #8]
 8001e70:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 8001e72:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 8001e74:	68bb      	ldr	r3, [r7, #8]
 8001e76:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 8001e78:	431a      	orrs	r2, r3
                 pTxHeader->DataLength);
 8001e7a:	68bb      	ldr	r3, [r7, #8]
 8001e7c:	68db      	ldr	r3, [r3, #12]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8001e7e:	4313      	orrs	r3, r2
 8001e80:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxFIFOQSA + (BufferIndex * SRAMCAN_TFQ_SIZE));
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8001e86:	683a      	ldr	r2, [r7, #0]
 8001e88:	4613      	mov	r3, r2
 8001e8a:	00db      	lsls	r3, r3, #3
 8001e8c:	4413      	add	r3, r2
 8001e8e:	00db      	lsls	r3, r3, #3
 8001e90:	440b      	add	r3, r1
 8001e92:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 8001e94:	69bb      	ldr	r3, [r7, #24]
 8001e96:	69fa      	ldr	r2, [r7, #28]
 8001e98:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8001e9a:	69bb      	ldr	r3, [r7, #24]
 8001e9c:	3304      	adds	r3, #4
 8001e9e:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 8001ea0:	69bb      	ldr	r3, [r7, #24]
 8001ea2:	693a      	ldr	r2, [r7, #16]
 8001ea4:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8001ea6:	69bb      	ldr	r3, [r7, #24]
 8001ea8:	3304      	adds	r3, #4
 8001eaa:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16U]; ByteCounter += 4U)
 8001eac:	2300      	movs	r3, #0
 8001eae:	617b      	str	r3, [r7, #20]
 8001eb0:	e020      	b.n	8001ef4 <FDCAN_CopyMessageToRAM+0xd4>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8001eb2:	697b      	ldr	r3, [r7, #20]
 8001eb4:	3303      	adds	r3, #3
 8001eb6:	687a      	ldr	r2, [r7, #4]
 8001eb8:	4413      	add	r3, r2
 8001eba:	781b      	ldrb	r3, [r3, #0]
 8001ebc:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8001ebe:	697b      	ldr	r3, [r7, #20]
 8001ec0:	3302      	adds	r3, #2
 8001ec2:	6879      	ldr	r1, [r7, #4]
 8001ec4:	440b      	add	r3, r1
 8001ec6:	781b      	ldrb	r3, [r3, #0]
 8001ec8:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8001eca:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8001ecc:	697b      	ldr	r3, [r7, #20]
 8001ece:	3301      	adds	r3, #1
 8001ed0:	6879      	ldr	r1, [r7, #4]
 8001ed2:	440b      	add	r3, r1
 8001ed4:	781b      	ldrb	r3, [r3, #0]
 8001ed6:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8001ed8:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 8001eda:	6879      	ldr	r1, [r7, #4]
 8001edc:	697a      	ldr	r2, [r7, #20]
 8001ede:	440a      	add	r2, r1
 8001ee0:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8001ee2:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8001ee4:	69bb      	ldr	r3, [r7, #24]
 8001ee6:	601a      	str	r2, [r3, #0]
    TxAddress++;
 8001ee8:	69bb      	ldr	r3, [r7, #24]
 8001eea:	3304      	adds	r3, #4
 8001eec:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16U]; ByteCounter += 4U)
 8001eee:	697b      	ldr	r3, [r7, #20]
 8001ef0:	3304      	adds	r3, #4
 8001ef2:	617b      	str	r3, [r7, #20]
 8001ef4:	68bb      	ldr	r3, [r7, #8]
 8001ef6:	68db      	ldr	r3, [r3, #12]
 8001ef8:	0c1b      	lsrs	r3, r3, #16
 8001efa:	4a06      	ldr	r2, [pc, #24]	; (8001f14 <FDCAN_CopyMessageToRAM+0xf4>)
 8001efc:	5cd3      	ldrb	r3, [r2, r3]
 8001efe:	461a      	mov	r2, r3
 8001f00:	697b      	ldr	r3, [r7, #20]
 8001f02:	4293      	cmp	r3, r2
 8001f04:	d3d5      	bcc.n	8001eb2 <FDCAN_CopyMessageToRAM+0x92>
  }
}
 8001f06:	bf00      	nop
 8001f08:	bf00      	nop
 8001f0a:	3724      	adds	r7, #36	; 0x24
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f12:	4770      	bx	lr
 8001f14:	0800a158 	.word	0x0800a158

08001f18 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f18:	b480      	push	{r7}
 8001f1a:	b087      	sub	sp, #28
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	6078      	str	r0, [r7, #4]
 8001f20:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001f22:	2300      	movs	r3, #0
 8001f24:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001f26:	e15a      	b.n	80021de <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001f28:	683b      	ldr	r3, [r7, #0]
 8001f2a:	681a      	ldr	r2, [r3, #0]
 8001f2c:	2101      	movs	r1, #1
 8001f2e:	697b      	ldr	r3, [r7, #20]
 8001f30:	fa01 f303 	lsl.w	r3, r1, r3
 8001f34:	4013      	ands	r3, r2
 8001f36:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	f000 814c 	beq.w	80021d8 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001f40:	683b      	ldr	r3, [r7, #0]
 8001f42:	685b      	ldr	r3, [r3, #4]
 8001f44:	f003 0303 	and.w	r3, r3, #3
 8001f48:	2b01      	cmp	r3, #1
 8001f4a:	d005      	beq.n	8001f58 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001f4c:	683b      	ldr	r3, [r7, #0]
 8001f4e:	685b      	ldr	r3, [r3, #4]
 8001f50:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001f54:	2b02      	cmp	r3, #2
 8001f56:	d130      	bne.n	8001fba <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	689b      	ldr	r3, [r3, #8]
 8001f5c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001f5e:	697b      	ldr	r3, [r7, #20]
 8001f60:	005b      	lsls	r3, r3, #1
 8001f62:	2203      	movs	r2, #3
 8001f64:	fa02 f303 	lsl.w	r3, r2, r3
 8001f68:	43db      	mvns	r3, r3
 8001f6a:	693a      	ldr	r2, [r7, #16]
 8001f6c:	4013      	ands	r3, r2
 8001f6e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001f70:	683b      	ldr	r3, [r7, #0]
 8001f72:	68da      	ldr	r2, [r3, #12]
 8001f74:	697b      	ldr	r3, [r7, #20]
 8001f76:	005b      	lsls	r3, r3, #1
 8001f78:	fa02 f303 	lsl.w	r3, r2, r3
 8001f7c:	693a      	ldr	r2, [r7, #16]
 8001f7e:	4313      	orrs	r3, r2
 8001f80:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	693a      	ldr	r2, [r7, #16]
 8001f86:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	685b      	ldr	r3, [r3, #4]
 8001f8c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001f8e:	2201      	movs	r2, #1
 8001f90:	697b      	ldr	r3, [r7, #20]
 8001f92:	fa02 f303 	lsl.w	r3, r2, r3
 8001f96:	43db      	mvns	r3, r3
 8001f98:	693a      	ldr	r2, [r7, #16]
 8001f9a:	4013      	ands	r3, r2
 8001f9c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001f9e:	683b      	ldr	r3, [r7, #0]
 8001fa0:	685b      	ldr	r3, [r3, #4]
 8001fa2:	091b      	lsrs	r3, r3, #4
 8001fa4:	f003 0201 	and.w	r2, r3, #1
 8001fa8:	697b      	ldr	r3, [r7, #20]
 8001faa:	fa02 f303 	lsl.w	r3, r2, r3
 8001fae:	693a      	ldr	r2, [r7, #16]
 8001fb0:	4313      	orrs	r3, r2
 8001fb2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	693a      	ldr	r2, [r7, #16]
 8001fb8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001fba:	683b      	ldr	r3, [r7, #0]
 8001fbc:	685b      	ldr	r3, [r3, #4]
 8001fbe:	f003 0303 	and.w	r3, r3, #3
 8001fc2:	2b03      	cmp	r3, #3
 8001fc4:	d017      	beq.n	8001ff6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	68db      	ldr	r3, [r3, #12]
 8001fca:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001fcc:	697b      	ldr	r3, [r7, #20]
 8001fce:	005b      	lsls	r3, r3, #1
 8001fd0:	2203      	movs	r2, #3
 8001fd2:	fa02 f303 	lsl.w	r3, r2, r3
 8001fd6:	43db      	mvns	r3, r3
 8001fd8:	693a      	ldr	r2, [r7, #16]
 8001fda:	4013      	ands	r3, r2
 8001fdc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001fde:	683b      	ldr	r3, [r7, #0]
 8001fe0:	689a      	ldr	r2, [r3, #8]
 8001fe2:	697b      	ldr	r3, [r7, #20]
 8001fe4:	005b      	lsls	r3, r3, #1
 8001fe6:	fa02 f303 	lsl.w	r3, r2, r3
 8001fea:	693a      	ldr	r2, [r7, #16]
 8001fec:	4313      	orrs	r3, r2
 8001fee:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	693a      	ldr	r2, [r7, #16]
 8001ff4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ff6:	683b      	ldr	r3, [r7, #0]
 8001ff8:	685b      	ldr	r3, [r3, #4]
 8001ffa:	f003 0303 	and.w	r3, r3, #3
 8001ffe:	2b02      	cmp	r3, #2
 8002000:	d123      	bne.n	800204a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002002:	697b      	ldr	r3, [r7, #20]
 8002004:	08da      	lsrs	r2, r3, #3
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	3208      	adds	r2, #8
 800200a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800200e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002010:	697b      	ldr	r3, [r7, #20]
 8002012:	f003 0307 	and.w	r3, r3, #7
 8002016:	009b      	lsls	r3, r3, #2
 8002018:	220f      	movs	r2, #15
 800201a:	fa02 f303 	lsl.w	r3, r2, r3
 800201e:	43db      	mvns	r3, r3
 8002020:	693a      	ldr	r2, [r7, #16]
 8002022:	4013      	ands	r3, r2
 8002024:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002026:	683b      	ldr	r3, [r7, #0]
 8002028:	691a      	ldr	r2, [r3, #16]
 800202a:	697b      	ldr	r3, [r7, #20]
 800202c:	f003 0307 	and.w	r3, r3, #7
 8002030:	009b      	lsls	r3, r3, #2
 8002032:	fa02 f303 	lsl.w	r3, r2, r3
 8002036:	693a      	ldr	r2, [r7, #16]
 8002038:	4313      	orrs	r3, r2
 800203a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800203c:	697b      	ldr	r3, [r7, #20]
 800203e:	08da      	lsrs	r2, r3, #3
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	3208      	adds	r2, #8
 8002044:	6939      	ldr	r1, [r7, #16]
 8002046:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002050:	697b      	ldr	r3, [r7, #20]
 8002052:	005b      	lsls	r3, r3, #1
 8002054:	2203      	movs	r2, #3
 8002056:	fa02 f303 	lsl.w	r3, r2, r3
 800205a:	43db      	mvns	r3, r3
 800205c:	693a      	ldr	r2, [r7, #16]
 800205e:	4013      	ands	r3, r2
 8002060:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002062:	683b      	ldr	r3, [r7, #0]
 8002064:	685b      	ldr	r3, [r3, #4]
 8002066:	f003 0203 	and.w	r2, r3, #3
 800206a:	697b      	ldr	r3, [r7, #20]
 800206c:	005b      	lsls	r3, r3, #1
 800206e:	fa02 f303 	lsl.w	r3, r2, r3
 8002072:	693a      	ldr	r2, [r7, #16]
 8002074:	4313      	orrs	r3, r2
 8002076:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	693a      	ldr	r2, [r7, #16]
 800207c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800207e:	683b      	ldr	r3, [r7, #0]
 8002080:	685b      	ldr	r3, [r3, #4]
 8002082:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002086:	2b00      	cmp	r3, #0
 8002088:	f000 80a6 	beq.w	80021d8 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800208c:	4b5b      	ldr	r3, [pc, #364]	; (80021fc <HAL_GPIO_Init+0x2e4>)
 800208e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002090:	4a5a      	ldr	r2, [pc, #360]	; (80021fc <HAL_GPIO_Init+0x2e4>)
 8002092:	f043 0301 	orr.w	r3, r3, #1
 8002096:	6613      	str	r3, [r2, #96]	; 0x60
 8002098:	4b58      	ldr	r3, [pc, #352]	; (80021fc <HAL_GPIO_Init+0x2e4>)
 800209a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800209c:	f003 0301 	and.w	r3, r3, #1
 80020a0:	60bb      	str	r3, [r7, #8]
 80020a2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80020a4:	4a56      	ldr	r2, [pc, #344]	; (8002200 <HAL_GPIO_Init+0x2e8>)
 80020a6:	697b      	ldr	r3, [r7, #20]
 80020a8:	089b      	lsrs	r3, r3, #2
 80020aa:	3302      	adds	r3, #2
 80020ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020b0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80020b2:	697b      	ldr	r3, [r7, #20]
 80020b4:	f003 0303 	and.w	r3, r3, #3
 80020b8:	009b      	lsls	r3, r3, #2
 80020ba:	220f      	movs	r2, #15
 80020bc:	fa02 f303 	lsl.w	r3, r2, r3
 80020c0:	43db      	mvns	r3, r3
 80020c2:	693a      	ldr	r2, [r7, #16]
 80020c4:	4013      	ands	r3, r2
 80020c6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80020ce:	d01f      	beq.n	8002110 <HAL_GPIO_Init+0x1f8>
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	4a4c      	ldr	r2, [pc, #304]	; (8002204 <HAL_GPIO_Init+0x2ec>)
 80020d4:	4293      	cmp	r3, r2
 80020d6:	d019      	beq.n	800210c <HAL_GPIO_Init+0x1f4>
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	4a4b      	ldr	r2, [pc, #300]	; (8002208 <HAL_GPIO_Init+0x2f0>)
 80020dc:	4293      	cmp	r3, r2
 80020de:	d013      	beq.n	8002108 <HAL_GPIO_Init+0x1f0>
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	4a4a      	ldr	r2, [pc, #296]	; (800220c <HAL_GPIO_Init+0x2f4>)
 80020e4:	4293      	cmp	r3, r2
 80020e6:	d00d      	beq.n	8002104 <HAL_GPIO_Init+0x1ec>
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	4a49      	ldr	r2, [pc, #292]	; (8002210 <HAL_GPIO_Init+0x2f8>)
 80020ec:	4293      	cmp	r3, r2
 80020ee:	d007      	beq.n	8002100 <HAL_GPIO_Init+0x1e8>
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	4a48      	ldr	r2, [pc, #288]	; (8002214 <HAL_GPIO_Init+0x2fc>)
 80020f4:	4293      	cmp	r3, r2
 80020f6:	d101      	bne.n	80020fc <HAL_GPIO_Init+0x1e4>
 80020f8:	2305      	movs	r3, #5
 80020fa:	e00a      	b.n	8002112 <HAL_GPIO_Init+0x1fa>
 80020fc:	2306      	movs	r3, #6
 80020fe:	e008      	b.n	8002112 <HAL_GPIO_Init+0x1fa>
 8002100:	2304      	movs	r3, #4
 8002102:	e006      	b.n	8002112 <HAL_GPIO_Init+0x1fa>
 8002104:	2303      	movs	r3, #3
 8002106:	e004      	b.n	8002112 <HAL_GPIO_Init+0x1fa>
 8002108:	2302      	movs	r3, #2
 800210a:	e002      	b.n	8002112 <HAL_GPIO_Init+0x1fa>
 800210c:	2301      	movs	r3, #1
 800210e:	e000      	b.n	8002112 <HAL_GPIO_Init+0x1fa>
 8002110:	2300      	movs	r3, #0
 8002112:	697a      	ldr	r2, [r7, #20]
 8002114:	f002 0203 	and.w	r2, r2, #3
 8002118:	0092      	lsls	r2, r2, #2
 800211a:	4093      	lsls	r3, r2
 800211c:	693a      	ldr	r2, [r7, #16]
 800211e:	4313      	orrs	r3, r2
 8002120:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002122:	4937      	ldr	r1, [pc, #220]	; (8002200 <HAL_GPIO_Init+0x2e8>)
 8002124:	697b      	ldr	r3, [r7, #20]
 8002126:	089b      	lsrs	r3, r3, #2
 8002128:	3302      	adds	r3, #2
 800212a:	693a      	ldr	r2, [r7, #16]
 800212c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002130:	4b39      	ldr	r3, [pc, #228]	; (8002218 <HAL_GPIO_Init+0x300>)
 8002132:	689b      	ldr	r3, [r3, #8]
 8002134:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	43db      	mvns	r3, r3
 800213a:	693a      	ldr	r2, [r7, #16]
 800213c:	4013      	ands	r3, r2
 800213e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002140:	683b      	ldr	r3, [r7, #0]
 8002142:	685b      	ldr	r3, [r3, #4]
 8002144:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002148:	2b00      	cmp	r3, #0
 800214a:	d003      	beq.n	8002154 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 800214c:	693a      	ldr	r2, [r7, #16]
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	4313      	orrs	r3, r2
 8002152:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002154:	4a30      	ldr	r2, [pc, #192]	; (8002218 <HAL_GPIO_Init+0x300>)
 8002156:	693b      	ldr	r3, [r7, #16]
 8002158:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800215a:	4b2f      	ldr	r3, [pc, #188]	; (8002218 <HAL_GPIO_Init+0x300>)
 800215c:	68db      	ldr	r3, [r3, #12]
 800215e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	43db      	mvns	r3, r3
 8002164:	693a      	ldr	r2, [r7, #16]
 8002166:	4013      	ands	r3, r2
 8002168:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800216a:	683b      	ldr	r3, [r7, #0]
 800216c:	685b      	ldr	r3, [r3, #4]
 800216e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002172:	2b00      	cmp	r3, #0
 8002174:	d003      	beq.n	800217e <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8002176:	693a      	ldr	r2, [r7, #16]
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	4313      	orrs	r3, r2
 800217c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800217e:	4a26      	ldr	r2, [pc, #152]	; (8002218 <HAL_GPIO_Init+0x300>)
 8002180:	693b      	ldr	r3, [r7, #16]
 8002182:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8002184:	4b24      	ldr	r3, [pc, #144]	; (8002218 <HAL_GPIO_Init+0x300>)
 8002186:	685b      	ldr	r3, [r3, #4]
 8002188:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	43db      	mvns	r3, r3
 800218e:	693a      	ldr	r2, [r7, #16]
 8002190:	4013      	ands	r3, r2
 8002192:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002194:	683b      	ldr	r3, [r7, #0]
 8002196:	685b      	ldr	r3, [r3, #4]
 8002198:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800219c:	2b00      	cmp	r3, #0
 800219e:	d003      	beq.n	80021a8 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80021a0:	693a      	ldr	r2, [r7, #16]
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	4313      	orrs	r3, r2
 80021a6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80021a8:	4a1b      	ldr	r2, [pc, #108]	; (8002218 <HAL_GPIO_Init+0x300>)
 80021aa:	693b      	ldr	r3, [r7, #16]
 80021ac:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80021ae:	4b1a      	ldr	r3, [pc, #104]	; (8002218 <HAL_GPIO_Init+0x300>)
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	43db      	mvns	r3, r3
 80021b8:	693a      	ldr	r2, [r7, #16]
 80021ba:	4013      	ands	r3, r2
 80021bc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80021be:	683b      	ldr	r3, [r7, #0]
 80021c0:	685b      	ldr	r3, [r3, #4]
 80021c2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d003      	beq.n	80021d2 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80021ca:	693a      	ldr	r2, [r7, #16]
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	4313      	orrs	r3, r2
 80021d0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80021d2:	4a11      	ldr	r2, [pc, #68]	; (8002218 <HAL_GPIO_Init+0x300>)
 80021d4:	693b      	ldr	r3, [r7, #16]
 80021d6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80021d8:	697b      	ldr	r3, [r7, #20]
 80021da:	3301      	adds	r3, #1
 80021dc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80021de:	683b      	ldr	r3, [r7, #0]
 80021e0:	681a      	ldr	r2, [r3, #0]
 80021e2:	697b      	ldr	r3, [r7, #20]
 80021e4:	fa22 f303 	lsr.w	r3, r2, r3
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	f47f ae9d 	bne.w	8001f28 <HAL_GPIO_Init+0x10>
  }
}
 80021ee:	bf00      	nop
 80021f0:	bf00      	nop
 80021f2:	371c      	adds	r7, #28
 80021f4:	46bd      	mov	sp, r7
 80021f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fa:	4770      	bx	lr
 80021fc:	40021000 	.word	0x40021000
 8002200:	40010000 	.word	0x40010000
 8002204:	48000400 	.word	0x48000400
 8002208:	48000800 	.word	0x48000800
 800220c:	48000c00 	.word	0x48000c00
 8002210:	48001000 	.word	0x48001000
 8002214:	48001400 	.word	0x48001400
 8002218:	40010400 	.word	0x40010400

0800221c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800221c:	b480      	push	{r7}
 800221e:	b083      	sub	sp, #12
 8002220:	af00      	add	r7, sp, #0
 8002222:	6078      	str	r0, [r7, #4]
 8002224:	460b      	mov	r3, r1
 8002226:	807b      	strh	r3, [r7, #2]
 8002228:	4613      	mov	r3, r2
 800222a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800222c:	787b      	ldrb	r3, [r7, #1]
 800222e:	2b00      	cmp	r3, #0
 8002230:	d003      	beq.n	800223a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002232:	887a      	ldrh	r2, [r7, #2]
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002238:	e002      	b.n	8002240 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800223a:	887a      	ldrh	r2, [r7, #2]
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002240:	bf00      	nop
 8002242:	370c      	adds	r7, #12
 8002244:	46bd      	mov	sp, r7
 8002246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224a:	4770      	bx	lr

0800224c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800224c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800224e:	b08b      	sub	sp, #44	; 0x2c
 8002250:	af06      	add	r7, sp, #24
 8002252:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	2b00      	cmp	r3, #0
 8002258:	d101      	bne.n	800225e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800225a:	2301      	movs	r3, #1
 800225c:	e0d7      	b.n	800240e <HAL_PCD_Init+0x1c2>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8002264:	b2db      	uxtb	r3, r3
 8002266:	2b00      	cmp	r3, #0
 8002268:	d106      	bne.n	8002278 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	2200      	movs	r2, #0
 800226e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002272:	6878      	ldr	r0, [r7, #4]
 8002274:	f007 fbf6 	bl	8009a64 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	2203      	movs	r2, #3
 800227c:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	4618      	mov	r0, r3
 8002286:	f003 fac8 	bl	800581a <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800228a:	2300      	movs	r3, #0
 800228c:	73fb      	strb	r3, [r7, #15]
 800228e:	e04c      	b.n	800232a <HAL_PCD_Init+0xde>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002290:	7bfb      	ldrb	r3, [r7, #15]
 8002292:	6879      	ldr	r1, [r7, #4]
 8002294:	1c5a      	adds	r2, r3, #1
 8002296:	4613      	mov	r3, r2
 8002298:	009b      	lsls	r3, r3, #2
 800229a:	4413      	add	r3, r2
 800229c:	00db      	lsls	r3, r3, #3
 800229e:	440b      	add	r3, r1
 80022a0:	3301      	adds	r3, #1
 80022a2:	2201      	movs	r2, #1
 80022a4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80022a6:	7bfb      	ldrb	r3, [r7, #15]
 80022a8:	6879      	ldr	r1, [r7, #4]
 80022aa:	1c5a      	adds	r2, r3, #1
 80022ac:	4613      	mov	r3, r2
 80022ae:	009b      	lsls	r3, r3, #2
 80022b0:	4413      	add	r3, r2
 80022b2:	00db      	lsls	r3, r3, #3
 80022b4:	440b      	add	r3, r1
 80022b6:	7bfa      	ldrb	r2, [r7, #15]
 80022b8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80022ba:	7bfa      	ldrb	r2, [r7, #15]
 80022bc:	7bfb      	ldrb	r3, [r7, #15]
 80022be:	b298      	uxth	r0, r3
 80022c0:	6879      	ldr	r1, [r7, #4]
 80022c2:	4613      	mov	r3, r2
 80022c4:	009b      	lsls	r3, r3, #2
 80022c6:	4413      	add	r3, r2
 80022c8:	00db      	lsls	r3, r3, #3
 80022ca:	440b      	add	r3, r1
 80022cc:	3336      	adds	r3, #54	; 0x36
 80022ce:	4602      	mov	r2, r0
 80022d0:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80022d2:	7bfb      	ldrb	r3, [r7, #15]
 80022d4:	6879      	ldr	r1, [r7, #4]
 80022d6:	1c5a      	adds	r2, r3, #1
 80022d8:	4613      	mov	r3, r2
 80022da:	009b      	lsls	r3, r3, #2
 80022dc:	4413      	add	r3, r2
 80022de:	00db      	lsls	r3, r3, #3
 80022e0:	440b      	add	r3, r1
 80022e2:	3303      	adds	r3, #3
 80022e4:	2200      	movs	r2, #0
 80022e6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80022e8:	7bfa      	ldrb	r2, [r7, #15]
 80022ea:	6879      	ldr	r1, [r7, #4]
 80022ec:	4613      	mov	r3, r2
 80022ee:	009b      	lsls	r3, r3, #2
 80022f0:	4413      	add	r3, r2
 80022f2:	00db      	lsls	r3, r3, #3
 80022f4:	440b      	add	r3, r1
 80022f6:	3338      	adds	r3, #56	; 0x38
 80022f8:	2200      	movs	r2, #0
 80022fa:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80022fc:	7bfa      	ldrb	r2, [r7, #15]
 80022fe:	6879      	ldr	r1, [r7, #4]
 8002300:	4613      	mov	r3, r2
 8002302:	009b      	lsls	r3, r3, #2
 8002304:	4413      	add	r3, r2
 8002306:	00db      	lsls	r3, r3, #3
 8002308:	440b      	add	r3, r1
 800230a:	333c      	adds	r3, #60	; 0x3c
 800230c:	2200      	movs	r2, #0
 800230e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002310:	7bfa      	ldrb	r2, [r7, #15]
 8002312:	6879      	ldr	r1, [r7, #4]
 8002314:	4613      	mov	r3, r2
 8002316:	009b      	lsls	r3, r3, #2
 8002318:	4413      	add	r3, r2
 800231a:	00db      	lsls	r3, r3, #3
 800231c:	440b      	add	r3, r1
 800231e:	3340      	adds	r3, #64	; 0x40
 8002320:	2200      	movs	r2, #0
 8002322:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002324:	7bfb      	ldrb	r3, [r7, #15]
 8002326:	3301      	adds	r3, #1
 8002328:	73fb      	strb	r3, [r7, #15]
 800232a:	7bfa      	ldrb	r2, [r7, #15]
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	685b      	ldr	r3, [r3, #4]
 8002330:	429a      	cmp	r2, r3
 8002332:	d3ad      	bcc.n	8002290 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002334:	2300      	movs	r3, #0
 8002336:	73fb      	strb	r3, [r7, #15]
 8002338:	e044      	b.n	80023c4 <HAL_PCD_Init+0x178>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800233a:	7bfa      	ldrb	r2, [r7, #15]
 800233c:	6879      	ldr	r1, [r7, #4]
 800233e:	4613      	mov	r3, r2
 8002340:	009b      	lsls	r3, r3, #2
 8002342:	4413      	add	r3, r2
 8002344:	00db      	lsls	r3, r3, #3
 8002346:	440b      	add	r3, r1
 8002348:	f203 1369 	addw	r3, r3, #361	; 0x169
 800234c:	2200      	movs	r2, #0
 800234e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002350:	7bfa      	ldrb	r2, [r7, #15]
 8002352:	6879      	ldr	r1, [r7, #4]
 8002354:	4613      	mov	r3, r2
 8002356:	009b      	lsls	r3, r3, #2
 8002358:	4413      	add	r3, r2
 800235a:	00db      	lsls	r3, r3, #3
 800235c:	440b      	add	r3, r1
 800235e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002362:	7bfa      	ldrb	r2, [r7, #15]
 8002364:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002366:	7bfa      	ldrb	r2, [r7, #15]
 8002368:	6879      	ldr	r1, [r7, #4]
 800236a:	4613      	mov	r3, r2
 800236c:	009b      	lsls	r3, r3, #2
 800236e:	4413      	add	r3, r2
 8002370:	00db      	lsls	r3, r3, #3
 8002372:	440b      	add	r3, r1
 8002374:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8002378:	2200      	movs	r2, #0
 800237a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800237c:	7bfa      	ldrb	r2, [r7, #15]
 800237e:	6879      	ldr	r1, [r7, #4]
 8002380:	4613      	mov	r3, r2
 8002382:	009b      	lsls	r3, r3, #2
 8002384:	4413      	add	r3, r2
 8002386:	00db      	lsls	r3, r3, #3
 8002388:	440b      	add	r3, r1
 800238a:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 800238e:	2200      	movs	r2, #0
 8002390:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002392:	7bfa      	ldrb	r2, [r7, #15]
 8002394:	6879      	ldr	r1, [r7, #4]
 8002396:	4613      	mov	r3, r2
 8002398:	009b      	lsls	r3, r3, #2
 800239a:	4413      	add	r3, r2
 800239c:	00db      	lsls	r3, r3, #3
 800239e:	440b      	add	r3, r1
 80023a0:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80023a4:	2200      	movs	r2, #0
 80023a6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80023a8:	7bfa      	ldrb	r2, [r7, #15]
 80023aa:	6879      	ldr	r1, [r7, #4]
 80023ac:	4613      	mov	r3, r2
 80023ae:	009b      	lsls	r3, r3, #2
 80023b0:	4413      	add	r3, r2
 80023b2:	00db      	lsls	r3, r3, #3
 80023b4:	440b      	add	r3, r1
 80023b6:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80023ba:	2200      	movs	r2, #0
 80023bc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80023be:	7bfb      	ldrb	r3, [r7, #15]
 80023c0:	3301      	adds	r3, #1
 80023c2:	73fb      	strb	r3, [r7, #15]
 80023c4:	7bfa      	ldrb	r2, [r7, #15]
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	685b      	ldr	r3, [r3, #4]
 80023ca:	429a      	cmp	r2, r3
 80023cc:	d3b5      	bcc.n	800233a <HAL_PCD_Init+0xee>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	603b      	str	r3, [r7, #0]
 80023d4:	687e      	ldr	r6, [r7, #4]
 80023d6:	466d      	mov	r5, sp
 80023d8:	f106 0410 	add.w	r4, r6, #16
 80023dc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80023de:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80023e0:	6823      	ldr	r3, [r4, #0]
 80023e2:	602b      	str	r3, [r5, #0]
 80023e4:	1d33      	adds	r3, r6, #4
 80023e6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80023e8:	6838      	ldr	r0, [r7, #0]
 80023ea:	f003 fa31 	bl	8005850 <USB_DevInit>

  hpcd->USB_Address = 0U;
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	2200      	movs	r2, #0
 80023f2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	2201      	movs	r2, #1
 80023fa:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	69db      	ldr	r3, [r3, #28]
 8002402:	2b01      	cmp	r3, #1
 8002404:	d102      	bne.n	800240c <HAL_PCD_Init+0x1c0>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002406:	6878      	ldr	r0, [r7, #4]
 8002408:	f001 fc29 	bl	8003c5e <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 800240c:	2300      	movs	r3, #0
}
 800240e:	4618      	mov	r0, r3
 8002410:	3714      	adds	r7, #20
 8002412:	46bd      	mov	sp, r7
 8002414:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002416 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002416:	b580      	push	{r7, lr}
 8002418:	b082      	sub	sp, #8
 800241a:	af00      	add	r7, sp, #0
 800241c:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002424:	2b01      	cmp	r3, #1
 8002426:	d101      	bne.n	800242c <HAL_PCD_Start+0x16>
 8002428:	2302      	movs	r3, #2
 800242a:	e012      	b.n	8002452 <HAL_PCD_Start+0x3c>
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	2201      	movs	r2, #1
 8002430:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	4618      	mov	r0, r3
 800243a:	f003 f9d7 	bl	80057ec <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	4618      	mov	r0, r3
 8002444:	f005 fbf0 	bl	8007c28 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	2200      	movs	r2, #0
 800244c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002450:	2300      	movs	r3, #0
}
 8002452:	4618      	mov	r0, r3
 8002454:	3708      	adds	r7, #8
 8002456:	46bd      	mov	sp, r7
 8002458:	bd80      	pop	{r7, pc}

0800245a <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800245a:	b580      	push	{r7, lr}
 800245c:	b084      	sub	sp, #16
 800245e:	af00      	add	r7, sp, #0
 8002460:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	4618      	mov	r0, r3
 8002468:	f005 fbf5 	bl	8007c56 <USB_ReadInterrupts>
 800246c:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002474:	2b00      	cmp	r3, #0
 8002476:	d003      	beq.n	8002480 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8002478:	6878      	ldr	r0, [r7, #4]
 800247a:	f000 fb26 	bl	8002aca <PCD_EP_ISR_Handler>

    return;
 800247e:	e110      	b.n	80026a2 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002486:	2b00      	cmp	r3, #0
 8002488:	d013      	beq.n	80024b2 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002492:	b29a      	uxth	r2, r3
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800249c:	b292      	uxth	r2, r2
 800249e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 80024a2:	6878      	ldr	r0, [r7, #4]
 80024a4:	f007 fb6f 	bl	8009b86 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80024a8:	2100      	movs	r1, #0
 80024aa:	6878      	ldr	r0, [r7, #4]
 80024ac:	f000 f8fc 	bl	80026a8 <HAL_PCD_SetAddress>

    return;
 80024b0:	e0f7      	b.n	80026a2 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d00c      	beq.n	80024d6 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80024c4:	b29a      	uxth	r2, r3
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80024ce:	b292      	uxth	r2, r2
 80024d0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 80024d4:	e0e5      	b.n	80026a2 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d00c      	beq.n	80024fa <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80024e8:	b29a      	uxth	r2, r3
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80024f2:	b292      	uxth	r2, r2
 80024f4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 80024f8:	e0d3      	b.n	80026a2 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002500:	2b00      	cmp	r3, #0
 8002502:	d034      	beq.n	800256e <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800250c:	b29a      	uxth	r2, r3
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f022 0204 	bic.w	r2, r2, #4
 8002516:	b292      	uxth	r2, r2
 8002518:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002524:	b29a      	uxth	r2, r3
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f022 0208 	bic.w	r2, r2, #8
 800252e:	b292      	uxth	r2, r2
 8002530:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (hpcd->LPM_State == LPM_L1)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 800253a:	2b01      	cmp	r3, #1
 800253c:	d107      	bne.n	800254e <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	2200      	movs	r2, #0
 8002542:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002546:	2100      	movs	r1, #0
 8002548:	6878      	ldr	r0, [r7, #4]
 800254a:	f007 fd11 	bl	8009f70 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 800254e:	6878      	ldr	r0, [r7, #4]
 8002550:	f007 fb52 	bl	8009bf8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800255c:	b29a      	uxth	r2, r3
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002566:	b292      	uxth	r2, r2
 8002568:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 800256c:	e099      	b.n	80026a2 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002574:	2b00      	cmp	r3, #0
 8002576:	d027      	beq.n	80025c8 <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002580:	b29a      	uxth	r2, r3
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f042 0208 	orr.w	r2, r2, #8
 800258a:	b292      	uxth	r2, r2
 800258c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002598:	b29a      	uxth	r2, r3
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80025a2:	b292      	uxth	r2, r2
 80025a4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80025b0:	b29a      	uxth	r2, r3
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f042 0204 	orr.w	r2, r2, #4
 80025ba:	b292      	uxth	r2, r2
 80025bc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 80025c0:	6878      	ldr	r0, [r7, #4]
 80025c2:	f007 faff 	bl	8009bc4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80025c6:	e06c      	b.n	80026a2 <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d040      	beq.n	8002654 <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80025da:	b29a      	uxth	r2, r3
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80025e4:	b292      	uxth	r2, r2
 80025e6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d12b      	bne.n	800264c <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80025fc:	b29a      	uxth	r2, r3
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f042 0204 	orr.w	r2, r2, #4
 8002606:	b292      	uxth	r2, r2
 8002608:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002614:	b29a      	uxth	r2, r3
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f042 0208 	orr.w	r2, r2, #8
 800261e:	b292      	uxth	r2, r2
 8002620:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      hpcd->LPM_State = LPM_L1;
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	2201      	movs	r2, #1
 8002628:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8002634:	b29b      	uxth	r3, r3
 8002636:	089b      	lsrs	r3, r3, #2
 8002638:	f003 023c 	and.w	r2, r3, #60	; 0x3c
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	f8c3 22e4 	str.w	r2, [r3, #740]	; 0x2e4
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8002642:	2101      	movs	r1, #1
 8002644:	6878      	ldr	r0, [r7, #4]
 8002646:	f007 fc93 	bl	8009f70 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 800264a:	e02a      	b.n	80026a2 <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 800264c:	6878      	ldr	r0, [r7, #4]
 800264e:	f007 fab9 	bl	8009bc4 <HAL_PCD_SuspendCallback>
    return;
 8002652:	e026      	b.n	80026a2 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800265a:	2b00      	cmp	r3, #0
 800265c:	d00f      	beq.n	800267e <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002666:	b29a      	uxth	r2, r3
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002670:	b292      	uxth	r2, r2
 8002672:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8002676:	6878      	ldr	r0, [r7, #4]
 8002678:	f007 fa77 	bl	8009b6a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 800267c:	e011      	b.n	80026a2 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002684:	2b00      	cmp	r3, #0
 8002686:	d00c      	beq.n	80026a2 <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002690:	b29a      	uxth	r2, r3
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800269a:	b292      	uxth	r2, r2
 800269c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 80026a0:	bf00      	nop
  }
}
 80026a2:	3710      	adds	r7, #16
 80026a4:	46bd      	mov	sp, r7
 80026a6:	bd80      	pop	{r7, pc}

080026a8 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	b082      	sub	sp, #8
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]
 80026b0:	460b      	mov	r3, r1
 80026b2:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80026ba:	2b01      	cmp	r3, #1
 80026bc:	d101      	bne.n	80026c2 <HAL_PCD_SetAddress+0x1a>
 80026be:	2302      	movs	r3, #2
 80026c0:	e013      	b.n	80026ea <HAL_PCD_SetAddress+0x42>
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	2201      	movs	r2, #1
 80026c6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	78fa      	ldrb	r2, [r7, #3]
 80026ce:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	78fa      	ldrb	r2, [r7, #3]
 80026d8:	4611      	mov	r1, r2
 80026da:	4618      	mov	r0, r3
 80026dc:	f005 fa90 	bl	8007c00 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	2200      	movs	r2, #0
 80026e4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80026e8:	2300      	movs	r3, #0
}
 80026ea:	4618      	mov	r0, r3
 80026ec:	3708      	adds	r7, #8
 80026ee:	46bd      	mov	sp, r7
 80026f0:	bd80      	pop	{r7, pc}

080026f2 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80026f2:	b580      	push	{r7, lr}
 80026f4:	b084      	sub	sp, #16
 80026f6:	af00      	add	r7, sp, #0
 80026f8:	6078      	str	r0, [r7, #4]
 80026fa:	4608      	mov	r0, r1
 80026fc:	4611      	mov	r1, r2
 80026fe:	461a      	mov	r2, r3
 8002700:	4603      	mov	r3, r0
 8002702:	70fb      	strb	r3, [r7, #3]
 8002704:	460b      	mov	r3, r1
 8002706:	803b      	strh	r3, [r7, #0]
 8002708:	4613      	mov	r3, r2
 800270a:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800270c:	2300      	movs	r3, #0
 800270e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002710:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002714:	2b00      	cmp	r3, #0
 8002716:	da0e      	bge.n	8002736 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002718:	78fb      	ldrb	r3, [r7, #3]
 800271a:	f003 0307 	and.w	r3, r3, #7
 800271e:	1c5a      	adds	r2, r3, #1
 8002720:	4613      	mov	r3, r2
 8002722:	009b      	lsls	r3, r3, #2
 8002724:	4413      	add	r3, r2
 8002726:	00db      	lsls	r3, r3, #3
 8002728:	687a      	ldr	r2, [r7, #4]
 800272a:	4413      	add	r3, r2
 800272c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	2201      	movs	r2, #1
 8002732:	705a      	strb	r2, [r3, #1]
 8002734:	e00e      	b.n	8002754 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002736:	78fb      	ldrb	r3, [r7, #3]
 8002738:	f003 0207 	and.w	r2, r3, #7
 800273c:	4613      	mov	r3, r2
 800273e:	009b      	lsls	r3, r3, #2
 8002740:	4413      	add	r3, r2
 8002742:	00db      	lsls	r3, r3, #3
 8002744:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002748:	687a      	ldr	r2, [r7, #4]
 800274a:	4413      	add	r3, r2
 800274c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	2200      	movs	r2, #0
 8002752:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002754:	78fb      	ldrb	r3, [r7, #3]
 8002756:	f003 0307 	and.w	r3, r3, #7
 800275a:	b2da      	uxtb	r2, r3
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002760:	883a      	ldrh	r2, [r7, #0]
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	78ba      	ldrb	r2, [r7, #2]
 800276a:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	785b      	ldrb	r3, [r3, #1]
 8002770:	2b00      	cmp	r3, #0
 8002772:	d004      	beq.n	800277e <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	781b      	ldrb	r3, [r3, #0]
 8002778:	b29a      	uxth	r2, r3
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800277e:	78bb      	ldrb	r3, [r7, #2]
 8002780:	2b02      	cmp	r3, #2
 8002782:	d102      	bne.n	800278a <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	2200      	movs	r2, #0
 8002788:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002790:	2b01      	cmp	r3, #1
 8002792:	d101      	bne.n	8002798 <HAL_PCD_EP_Open+0xa6>
 8002794:	2302      	movs	r3, #2
 8002796:	e00e      	b.n	80027b6 <HAL_PCD_EP_Open+0xc4>
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	2201      	movs	r2, #1
 800279c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	68f9      	ldr	r1, [r7, #12]
 80027a6:	4618      	mov	r0, r3
 80027a8:	f003 f874 	bl	8005894 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	2200      	movs	r2, #0
 80027b0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 80027b4:	7afb      	ldrb	r3, [r7, #11]
}
 80027b6:	4618      	mov	r0, r3
 80027b8:	3710      	adds	r7, #16
 80027ba:	46bd      	mov	sp, r7
 80027bc:	bd80      	pop	{r7, pc}

080027be <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80027be:	b580      	push	{r7, lr}
 80027c0:	b084      	sub	sp, #16
 80027c2:	af00      	add	r7, sp, #0
 80027c4:	6078      	str	r0, [r7, #4]
 80027c6:	460b      	mov	r3, r1
 80027c8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80027ca:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	da0e      	bge.n	80027f0 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80027d2:	78fb      	ldrb	r3, [r7, #3]
 80027d4:	f003 0307 	and.w	r3, r3, #7
 80027d8:	1c5a      	adds	r2, r3, #1
 80027da:	4613      	mov	r3, r2
 80027dc:	009b      	lsls	r3, r3, #2
 80027de:	4413      	add	r3, r2
 80027e0:	00db      	lsls	r3, r3, #3
 80027e2:	687a      	ldr	r2, [r7, #4]
 80027e4:	4413      	add	r3, r2
 80027e6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	2201      	movs	r2, #1
 80027ec:	705a      	strb	r2, [r3, #1]
 80027ee:	e00e      	b.n	800280e <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80027f0:	78fb      	ldrb	r3, [r7, #3]
 80027f2:	f003 0207 	and.w	r2, r3, #7
 80027f6:	4613      	mov	r3, r2
 80027f8:	009b      	lsls	r3, r3, #2
 80027fa:	4413      	add	r3, r2
 80027fc:	00db      	lsls	r3, r3, #3
 80027fe:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002802:	687a      	ldr	r2, [r7, #4]
 8002804:	4413      	add	r3, r2
 8002806:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	2200      	movs	r2, #0
 800280c:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800280e:	78fb      	ldrb	r3, [r7, #3]
 8002810:	f003 0307 	and.w	r3, r3, #7
 8002814:	b2da      	uxtb	r2, r3
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002820:	2b01      	cmp	r3, #1
 8002822:	d101      	bne.n	8002828 <HAL_PCD_EP_Close+0x6a>
 8002824:	2302      	movs	r3, #2
 8002826:	e00e      	b.n	8002846 <HAL_PCD_EP_Close+0x88>
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	2201      	movs	r2, #1
 800282c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	68f9      	ldr	r1, [r7, #12]
 8002836:	4618      	mov	r0, r3
 8002838:	f003 fbc0 	bl	8005fbc <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	2200      	movs	r2, #0
 8002840:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8002844:	2300      	movs	r3, #0
}
 8002846:	4618      	mov	r0, r3
 8002848:	3710      	adds	r7, #16
 800284a:	46bd      	mov	sp, r7
 800284c:	bd80      	pop	{r7, pc}

0800284e <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800284e:	b580      	push	{r7, lr}
 8002850:	b086      	sub	sp, #24
 8002852:	af00      	add	r7, sp, #0
 8002854:	60f8      	str	r0, [r7, #12]
 8002856:	607a      	str	r2, [r7, #4]
 8002858:	603b      	str	r3, [r7, #0]
 800285a:	460b      	mov	r3, r1
 800285c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800285e:	7afb      	ldrb	r3, [r7, #11]
 8002860:	f003 0207 	and.w	r2, r3, #7
 8002864:	4613      	mov	r3, r2
 8002866:	009b      	lsls	r3, r3, #2
 8002868:	4413      	add	r3, r2
 800286a:	00db      	lsls	r3, r3, #3
 800286c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002870:	68fa      	ldr	r2, [r7, #12]
 8002872:	4413      	add	r3, r2
 8002874:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002876:	697b      	ldr	r3, [r7, #20]
 8002878:	687a      	ldr	r2, [r7, #4]
 800287a:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800287c:	697b      	ldr	r3, [r7, #20]
 800287e:	683a      	ldr	r2, [r7, #0]
 8002880:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002882:	697b      	ldr	r3, [r7, #20]
 8002884:	2200      	movs	r2, #0
 8002886:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8002888:	697b      	ldr	r3, [r7, #20]
 800288a:	2200      	movs	r2, #0
 800288c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800288e:	7afb      	ldrb	r3, [r7, #11]
 8002890:	f003 0307 	and.w	r3, r3, #7
 8002894:	b2da      	uxtb	r2, r3
 8002896:	697b      	ldr	r3, [r7, #20]
 8002898:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800289a:	7afb      	ldrb	r3, [r7, #11]
 800289c:	f003 0307 	and.w	r3, r3, #7
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d106      	bne.n	80028b2 <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	6979      	ldr	r1, [r7, #20]
 80028aa:	4618      	mov	r0, r3
 80028ac:	f003 fd73 	bl	8006396 <USB_EPStartXfer>
 80028b0:	e005      	b.n	80028be <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	6979      	ldr	r1, [r7, #20]
 80028b8:	4618      	mov	r0, r3
 80028ba:	f003 fd6c 	bl	8006396 <USB_EPStartXfer>
  }

  return HAL_OK;
 80028be:	2300      	movs	r3, #0
}
 80028c0:	4618      	mov	r0, r3
 80028c2:	3718      	adds	r7, #24
 80028c4:	46bd      	mov	sp, r7
 80028c6:	bd80      	pop	{r7, pc}

080028c8 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80028c8:	b480      	push	{r7}
 80028ca:	b083      	sub	sp, #12
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	6078      	str	r0, [r7, #4]
 80028d0:	460b      	mov	r3, r1
 80028d2:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80028d4:	78fb      	ldrb	r3, [r7, #3]
 80028d6:	f003 0207 	and.w	r2, r3, #7
 80028da:	6879      	ldr	r1, [r7, #4]
 80028dc:	4613      	mov	r3, r2
 80028de:	009b      	lsls	r3, r3, #2
 80028e0:	4413      	add	r3, r2
 80028e2:	00db      	lsls	r3, r3, #3
 80028e4:	440b      	add	r3, r1
 80028e6:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 80028ea:	681b      	ldr	r3, [r3, #0]
}
 80028ec:	4618      	mov	r0, r3
 80028ee:	370c      	adds	r7, #12
 80028f0:	46bd      	mov	sp, r7
 80028f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f6:	4770      	bx	lr

080028f8 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80028f8:	b580      	push	{r7, lr}
 80028fa:	b086      	sub	sp, #24
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	60f8      	str	r0, [r7, #12]
 8002900:	607a      	str	r2, [r7, #4]
 8002902:	603b      	str	r3, [r7, #0]
 8002904:	460b      	mov	r3, r1
 8002906:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002908:	7afb      	ldrb	r3, [r7, #11]
 800290a:	f003 0307 	and.w	r3, r3, #7
 800290e:	1c5a      	adds	r2, r3, #1
 8002910:	4613      	mov	r3, r2
 8002912:	009b      	lsls	r3, r3, #2
 8002914:	4413      	add	r3, r2
 8002916:	00db      	lsls	r3, r3, #3
 8002918:	68fa      	ldr	r2, [r7, #12]
 800291a:	4413      	add	r3, r2
 800291c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800291e:	697b      	ldr	r3, [r7, #20]
 8002920:	687a      	ldr	r2, [r7, #4]
 8002922:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002924:	697b      	ldr	r3, [r7, #20]
 8002926:	683a      	ldr	r2, [r7, #0]
 8002928:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 800292a:	697b      	ldr	r3, [r7, #20]
 800292c:	2201      	movs	r2, #1
 800292e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8002932:	697b      	ldr	r3, [r7, #20]
 8002934:	683a      	ldr	r2, [r7, #0]
 8002936:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8002938:	697b      	ldr	r3, [r7, #20]
 800293a:	2200      	movs	r2, #0
 800293c:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 800293e:	697b      	ldr	r3, [r7, #20]
 8002940:	2201      	movs	r2, #1
 8002942:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002944:	7afb      	ldrb	r3, [r7, #11]
 8002946:	f003 0307 	and.w	r3, r3, #7
 800294a:	b2da      	uxtb	r2, r3
 800294c:	697b      	ldr	r3, [r7, #20]
 800294e:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002950:	7afb      	ldrb	r3, [r7, #11]
 8002952:	f003 0307 	and.w	r3, r3, #7
 8002956:	2b00      	cmp	r3, #0
 8002958:	d106      	bne.n	8002968 <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	6979      	ldr	r1, [r7, #20]
 8002960:	4618      	mov	r0, r3
 8002962:	f003 fd18 	bl	8006396 <USB_EPStartXfer>
 8002966:	e005      	b.n	8002974 <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	6979      	ldr	r1, [r7, #20]
 800296e:	4618      	mov	r0, r3
 8002970:	f003 fd11 	bl	8006396 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002974:	2300      	movs	r3, #0
}
 8002976:	4618      	mov	r0, r3
 8002978:	3718      	adds	r7, #24
 800297a:	46bd      	mov	sp, r7
 800297c:	bd80      	pop	{r7, pc}

0800297e <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800297e:	b580      	push	{r7, lr}
 8002980:	b084      	sub	sp, #16
 8002982:	af00      	add	r7, sp, #0
 8002984:	6078      	str	r0, [r7, #4]
 8002986:	460b      	mov	r3, r1
 8002988:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800298a:	78fb      	ldrb	r3, [r7, #3]
 800298c:	f003 0207 	and.w	r2, r3, #7
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	685b      	ldr	r3, [r3, #4]
 8002994:	429a      	cmp	r2, r3
 8002996:	d901      	bls.n	800299c <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002998:	2301      	movs	r3, #1
 800299a:	e03e      	b.n	8002a1a <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800299c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	da0e      	bge.n	80029c2 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80029a4:	78fb      	ldrb	r3, [r7, #3]
 80029a6:	f003 0307 	and.w	r3, r3, #7
 80029aa:	1c5a      	adds	r2, r3, #1
 80029ac:	4613      	mov	r3, r2
 80029ae:	009b      	lsls	r3, r3, #2
 80029b0:	4413      	add	r3, r2
 80029b2:	00db      	lsls	r3, r3, #3
 80029b4:	687a      	ldr	r2, [r7, #4]
 80029b6:	4413      	add	r3, r2
 80029b8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	2201      	movs	r2, #1
 80029be:	705a      	strb	r2, [r3, #1]
 80029c0:	e00c      	b.n	80029dc <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80029c2:	78fa      	ldrb	r2, [r7, #3]
 80029c4:	4613      	mov	r3, r2
 80029c6:	009b      	lsls	r3, r3, #2
 80029c8:	4413      	add	r3, r2
 80029ca:	00db      	lsls	r3, r3, #3
 80029cc:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80029d0:	687a      	ldr	r2, [r7, #4]
 80029d2:	4413      	add	r3, r2
 80029d4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	2200      	movs	r2, #0
 80029da:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	2201      	movs	r2, #1
 80029e0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80029e2:	78fb      	ldrb	r3, [r7, #3]
 80029e4:	f003 0307 	and.w	r3, r3, #7
 80029e8:	b2da      	uxtb	r2, r3
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80029f4:	2b01      	cmp	r3, #1
 80029f6:	d101      	bne.n	80029fc <HAL_PCD_EP_SetStall+0x7e>
 80029f8:	2302      	movs	r3, #2
 80029fa:	e00e      	b.n	8002a1a <HAL_PCD_EP_SetStall+0x9c>
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	2201      	movs	r2, #1
 8002a00:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	68f9      	ldr	r1, [r7, #12]
 8002a0a:	4618      	mov	r0, r3
 8002a0c:	f004 fff9 	bl	8007a02 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	2200      	movs	r2, #0
 8002a14:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002a18:	2300      	movs	r3, #0
}
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	3710      	adds	r7, #16
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	bd80      	pop	{r7, pc}

08002a22 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002a22:	b580      	push	{r7, lr}
 8002a24:	b084      	sub	sp, #16
 8002a26:	af00      	add	r7, sp, #0
 8002a28:	6078      	str	r0, [r7, #4]
 8002a2a:	460b      	mov	r3, r1
 8002a2c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002a2e:	78fb      	ldrb	r3, [r7, #3]
 8002a30:	f003 020f 	and.w	r2, r3, #15
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	685b      	ldr	r3, [r3, #4]
 8002a38:	429a      	cmp	r2, r3
 8002a3a:	d901      	bls.n	8002a40 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002a3c:	2301      	movs	r3, #1
 8002a3e:	e040      	b.n	8002ac2 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002a40:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	da0e      	bge.n	8002a66 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002a48:	78fb      	ldrb	r3, [r7, #3]
 8002a4a:	f003 0307 	and.w	r3, r3, #7
 8002a4e:	1c5a      	adds	r2, r3, #1
 8002a50:	4613      	mov	r3, r2
 8002a52:	009b      	lsls	r3, r3, #2
 8002a54:	4413      	add	r3, r2
 8002a56:	00db      	lsls	r3, r3, #3
 8002a58:	687a      	ldr	r2, [r7, #4]
 8002a5a:	4413      	add	r3, r2
 8002a5c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	2201      	movs	r2, #1
 8002a62:	705a      	strb	r2, [r3, #1]
 8002a64:	e00e      	b.n	8002a84 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002a66:	78fb      	ldrb	r3, [r7, #3]
 8002a68:	f003 0207 	and.w	r2, r3, #7
 8002a6c:	4613      	mov	r3, r2
 8002a6e:	009b      	lsls	r3, r3, #2
 8002a70:	4413      	add	r3, r2
 8002a72:	00db      	lsls	r3, r3, #3
 8002a74:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002a78:	687a      	ldr	r2, [r7, #4]
 8002a7a:	4413      	add	r3, r2
 8002a7c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	2200      	movs	r2, #0
 8002a82:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	2200      	movs	r2, #0
 8002a88:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002a8a:	78fb      	ldrb	r3, [r7, #3]
 8002a8c:	f003 0307 	and.w	r3, r3, #7
 8002a90:	b2da      	uxtb	r2, r3
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002a9c:	2b01      	cmp	r3, #1
 8002a9e:	d101      	bne.n	8002aa4 <HAL_PCD_EP_ClrStall+0x82>
 8002aa0:	2302      	movs	r3, #2
 8002aa2:	e00e      	b.n	8002ac2 <HAL_PCD_EP_ClrStall+0xa0>
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	2201      	movs	r2, #1
 8002aa8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	68f9      	ldr	r1, [r7, #12]
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	f004 fff6 	bl	8007aa4 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	2200      	movs	r2, #0
 8002abc:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002ac0:	2300      	movs	r3, #0
}
 8002ac2:	4618      	mov	r0, r3
 8002ac4:	3710      	adds	r7, #16
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	bd80      	pop	{r7, pc}

08002aca <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8002aca:	b580      	push	{r7, lr}
 8002acc:	b096      	sub	sp, #88	; 0x58
 8002ace:	af00      	add	r7, sp, #0
 8002ad0:	6078      	str	r0, [r7, #4]
  uint16_t wEPVal;
  uint16_t TxPctSize;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002ad2:	e39c      	b.n	800320e <PCD_EP_ISR_Handler+0x744>
  {
    wIstr = hpcd->Instance->ISTR;
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002adc:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8002ae0:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8002ae4:	b2db      	uxtb	r3, r3
 8002ae6:	f003 030f 	and.w	r3, r3, #15
 8002aea:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55

    if (epindex == 0U)
 8002aee:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	f040 815e 	bne.w	8002db4 <PCD_EP_ISR_Handler+0x2ea>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8002af8:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8002afc:	f003 0310 	and.w	r3, r3, #16
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d150      	bne.n	8002ba6 <PCD_EP_ISR_Handler+0xdc>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	881b      	ldrh	r3, [r3, #0]
 8002b0a:	b29b      	uxth	r3, r3
 8002b0c:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8002b10:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b14:	81fb      	strh	r3, [r7, #14]
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681a      	ldr	r2, [r3, #0]
 8002b1a:	89fb      	ldrh	r3, [r7, #14]
 8002b1c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002b20:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002b24:	b29b      	uxth	r3, r3
 8002b26:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	3328      	adds	r3, #40	; 0x28
 8002b2c:	64fb      	str	r3, [r7, #76]	; 0x4c

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002b36:	b29b      	uxth	r3, r3
 8002b38:	461a      	mov	r2, r3
 8002b3a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002b3c:	781b      	ldrb	r3, [r3, #0]
 8002b3e:	00db      	lsls	r3, r3, #3
 8002b40:	4413      	add	r3, r2
 8002b42:	687a      	ldr	r2, [r7, #4]
 8002b44:	6812      	ldr	r2, [r2, #0]
 8002b46:	4413      	add	r3, r2
 8002b48:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002b4c:	881b      	ldrh	r3, [r3, #0]
 8002b4e:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002b52:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002b54:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8002b56:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002b58:	695a      	ldr	r2, [r3, #20]
 8002b5a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002b5c:	69db      	ldr	r3, [r3, #28]
 8002b5e:	441a      	add	r2, r3
 8002b60:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002b62:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8002b64:	2100      	movs	r1, #0
 8002b66:	6878      	ldr	r0, [r7, #4]
 8002b68:	f006 ffe5 	bl	8009b36 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002b72:	b2db      	uxtb	r3, r3
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	f000 834a 	beq.w	800320e <PCD_EP_ISR_Handler+0x744>
 8002b7a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002b7c:	699b      	ldr	r3, [r3, #24]
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	f040 8345 	bne.w	800320e <PCD_EP_ISR_Handler+0x744>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002b8a:	b2db      	uxtb	r3, r3
 8002b8c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002b90:	b2da      	uxtb	r2, r3
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	b292      	uxth	r2, r2
 8002b98:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	2200      	movs	r2, #0
 8002ba0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002ba4:	e333      	b.n	800320e <PCD_EP_ISR_Handler+0x744>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002bac:	64fb      	str	r3, [r7, #76]	; 0x4c
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	881b      	ldrh	r3, [r3, #0]
 8002bb4:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8002bb8:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8002bbc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d032      	beq.n	8002c2a <PCD_EP_ISR_Handler+0x160>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002bcc:	b29b      	uxth	r3, r3
 8002bce:	461a      	mov	r2, r3
 8002bd0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002bd2:	781b      	ldrb	r3, [r3, #0]
 8002bd4:	00db      	lsls	r3, r3, #3
 8002bd6:	4413      	add	r3, r2
 8002bd8:	687a      	ldr	r2, [r7, #4]
 8002bda:	6812      	ldr	r2, [r2, #0]
 8002bdc:	4413      	add	r3, r2
 8002bde:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002be2:	881b      	ldrh	r3, [r3, #0]
 8002be4:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002be8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002bea:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	6818      	ldr	r0, [r3, #0]
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8002bf6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002bf8:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8002bfa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002bfc:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002bfe:	b29b      	uxth	r3, r3
 8002c00:	f005 f87b 	bl	8007cfa <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	881b      	ldrh	r3, [r3, #0]
 8002c0a:	b29a      	uxth	r2, r3
 8002c0c:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002c10:	4013      	ands	r3, r2
 8002c12:	823b      	strh	r3, [r7, #16]
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	8a3a      	ldrh	r2, [r7, #16]
 8002c1a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002c1e:	b292      	uxth	r2, r2
 8002c20:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8002c22:	6878      	ldr	r0, [r7, #4]
 8002c24:	f006 ff5a 	bl	8009adc <HAL_PCD_SetupStageCallback>
 8002c28:	e2f1      	b.n	800320e <PCD_EP_ISR_Handler+0x744>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002c2a:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	f280 82ed 	bge.w	800320e <PCD_EP_ISR_Handler+0x744>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	881b      	ldrh	r3, [r3, #0]
 8002c3a:	b29a      	uxth	r2, r3
 8002c3c:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002c40:	4013      	ands	r3, r2
 8002c42:	83fb      	strh	r3, [r7, #30]
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	8bfa      	ldrh	r2, [r7, #30]
 8002c4a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002c4e:	b292      	uxth	r2, r2
 8002c50:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002c5a:	b29b      	uxth	r3, r3
 8002c5c:	461a      	mov	r2, r3
 8002c5e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002c60:	781b      	ldrb	r3, [r3, #0]
 8002c62:	00db      	lsls	r3, r3, #3
 8002c64:	4413      	add	r3, r2
 8002c66:	687a      	ldr	r2, [r7, #4]
 8002c68:	6812      	ldr	r2, [r2, #0]
 8002c6a:	4413      	add	r3, r2
 8002c6c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002c70:	881b      	ldrh	r3, [r3, #0]
 8002c72:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002c76:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002c78:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8002c7a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002c7c:	69db      	ldr	r3, [r3, #28]
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d019      	beq.n	8002cb6 <PCD_EP_ISR_Handler+0x1ec>
 8002c82:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002c84:	695b      	ldr	r3, [r3, #20]
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d015      	beq.n	8002cb6 <PCD_EP_ISR_Handler+0x1ec>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	6818      	ldr	r0, [r3, #0]
 8002c8e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002c90:	6959      	ldr	r1, [r3, #20]
 8002c92:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002c94:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8002c96:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002c98:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002c9a:	b29b      	uxth	r3, r3
 8002c9c:	f005 f82d 	bl	8007cfa <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8002ca0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002ca2:	695a      	ldr	r2, [r3, #20]
 8002ca4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002ca6:	69db      	ldr	r3, [r3, #28]
 8002ca8:	441a      	add	r2, r3
 8002caa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002cac:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8002cae:	2100      	movs	r1, #0
 8002cb0:	6878      	ldr	r0, [r7, #4]
 8002cb2:	f006 ff25 	bl	8009b00 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	881b      	ldrh	r3, [r3, #0]
 8002cbc:	b29b      	uxth	r3, r3
 8002cbe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	f040 82a3 	bne.w	800320e <PCD_EP_ISR_Handler+0x744>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	61bb      	str	r3, [r7, #24]
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002cd6:	b29b      	uxth	r3, r3
 8002cd8:	461a      	mov	r2, r3
 8002cda:	69bb      	ldr	r3, [r7, #24]
 8002cdc:	4413      	add	r3, r2
 8002cde:	61bb      	str	r3, [r7, #24]
 8002ce0:	69bb      	ldr	r3, [r7, #24]
 8002ce2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002ce6:	617b      	str	r3, [r7, #20]
 8002ce8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002cea:	691b      	ldr	r3, [r3, #16]
 8002cec:	2b3e      	cmp	r3, #62	; 0x3e
 8002cee:	d918      	bls.n	8002d22 <PCD_EP_ISR_Handler+0x258>
 8002cf0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002cf2:	691b      	ldr	r3, [r3, #16]
 8002cf4:	095b      	lsrs	r3, r3, #5
 8002cf6:	647b      	str	r3, [r7, #68]	; 0x44
 8002cf8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002cfa:	691b      	ldr	r3, [r3, #16]
 8002cfc:	f003 031f 	and.w	r3, r3, #31
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d102      	bne.n	8002d0a <PCD_EP_ISR_Handler+0x240>
 8002d04:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002d06:	3b01      	subs	r3, #1
 8002d08:	647b      	str	r3, [r7, #68]	; 0x44
 8002d0a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002d0c:	b29b      	uxth	r3, r3
 8002d0e:	029b      	lsls	r3, r3, #10
 8002d10:	b29b      	uxth	r3, r3
 8002d12:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002d16:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002d1a:	b29a      	uxth	r2, r3
 8002d1c:	697b      	ldr	r3, [r7, #20]
 8002d1e:	801a      	strh	r2, [r3, #0]
 8002d20:	e029      	b.n	8002d76 <PCD_EP_ISR_Handler+0x2ac>
 8002d22:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002d24:	691b      	ldr	r3, [r3, #16]
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d112      	bne.n	8002d50 <PCD_EP_ISR_Handler+0x286>
 8002d2a:	697b      	ldr	r3, [r7, #20]
 8002d2c:	881b      	ldrh	r3, [r3, #0]
 8002d2e:	b29b      	uxth	r3, r3
 8002d30:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002d34:	b29a      	uxth	r2, r3
 8002d36:	697b      	ldr	r3, [r7, #20]
 8002d38:	801a      	strh	r2, [r3, #0]
 8002d3a:	697b      	ldr	r3, [r7, #20]
 8002d3c:	881b      	ldrh	r3, [r3, #0]
 8002d3e:	b29b      	uxth	r3, r3
 8002d40:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002d44:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002d48:	b29a      	uxth	r2, r3
 8002d4a:	697b      	ldr	r3, [r7, #20]
 8002d4c:	801a      	strh	r2, [r3, #0]
 8002d4e:	e012      	b.n	8002d76 <PCD_EP_ISR_Handler+0x2ac>
 8002d50:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002d52:	691b      	ldr	r3, [r3, #16]
 8002d54:	085b      	lsrs	r3, r3, #1
 8002d56:	647b      	str	r3, [r7, #68]	; 0x44
 8002d58:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002d5a:	691b      	ldr	r3, [r3, #16]
 8002d5c:	f003 0301 	and.w	r3, r3, #1
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d002      	beq.n	8002d6a <PCD_EP_ISR_Handler+0x2a0>
 8002d64:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002d66:	3301      	adds	r3, #1
 8002d68:	647b      	str	r3, [r7, #68]	; 0x44
 8002d6a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002d6c:	b29b      	uxth	r3, r3
 8002d6e:	029b      	lsls	r3, r3, #10
 8002d70:	b29a      	uxth	r2, r3
 8002d72:	697b      	ldr	r3, [r7, #20]
 8002d74:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	881b      	ldrh	r3, [r3, #0]
 8002d7c:	b29b      	uxth	r3, r3
 8002d7e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002d82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d86:	827b      	strh	r3, [r7, #18]
 8002d88:	8a7b      	ldrh	r3, [r7, #18]
 8002d8a:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8002d8e:	827b      	strh	r3, [r7, #18]
 8002d90:	8a7b      	ldrh	r3, [r7, #18]
 8002d92:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002d96:	827b      	strh	r3, [r7, #18]
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681a      	ldr	r2, [r3, #0]
 8002d9c:	8a7b      	ldrh	r3, [r7, #18]
 8002d9e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002da2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002da6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002daa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002dae:	b29b      	uxth	r3, r3
 8002db0:	8013      	strh	r3, [r2, #0]
 8002db2:	e22c      	b.n	800320e <PCD_EP_ISR_Handler+0x744>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	461a      	mov	r2, r3
 8002dba:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8002dbe:	009b      	lsls	r3, r3, #2
 8002dc0:	4413      	add	r3, r2
 8002dc2:	881b      	ldrh	r3, [r3, #0]
 8002dc4:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002dc8:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	f280 80f6 	bge.w	8002fbe <PCD_EP_ISR_Handler+0x4f4>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	461a      	mov	r2, r3
 8002dd8:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8002ddc:	009b      	lsls	r3, r3, #2
 8002dde:	4413      	add	r3, r2
 8002de0:	881b      	ldrh	r3, [r3, #0]
 8002de2:	b29a      	uxth	r2, r3
 8002de4:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002de8:	4013      	ands	r3, r2
 8002dea:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	461a      	mov	r2, r3
 8002df4:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8002df8:	009b      	lsls	r3, r3, #2
 8002dfa:	4413      	add	r3, r2
 8002dfc:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 8002e00:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002e04:	b292      	uxth	r2, r2
 8002e06:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8002e08:	f897 2055 	ldrb.w	r2, [r7, #85]	; 0x55
 8002e0c:	4613      	mov	r3, r2
 8002e0e:	009b      	lsls	r3, r3, #2
 8002e10:	4413      	add	r3, r2
 8002e12:	00db      	lsls	r3, r3, #3
 8002e14:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002e18:	687a      	ldr	r2, [r7, #4]
 8002e1a:	4413      	add	r3, r2
 8002e1c:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8002e1e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002e20:	7b1b      	ldrb	r3, [r3, #12]
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d123      	bne.n	8002e6e <PCD_EP_ISR_Handler+0x3a4>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002e2e:	b29b      	uxth	r3, r3
 8002e30:	461a      	mov	r2, r3
 8002e32:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002e34:	781b      	ldrb	r3, [r3, #0]
 8002e36:	00db      	lsls	r3, r3, #3
 8002e38:	4413      	add	r3, r2
 8002e3a:	687a      	ldr	r2, [r7, #4]
 8002e3c:	6812      	ldr	r2, [r2, #0]
 8002e3e:	4413      	add	r3, r2
 8002e40:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002e44:	881b      	ldrh	r3, [r3, #0]
 8002e46:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002e4a:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

          if (count != 0U)
 8002e4e:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	f000 808e 	beq.w	8002f74 <PCD_EP_ISR_Handler+0x4aa>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	6818      	ldr	r0, [r3, #0]
 8002e5c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002e5e:	6959      	ldr	r1, [r3, #20]
 8002e60:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002e62:	88da      	ldrh	r2, [r3, #6]
 8002e64:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8002e68:	f004 ff47 	bl	8007cfa <USB_ReadPMA>
 8002e6c:	e082      	b.n	8002f74 <PCD_EP_ISR_Handler+0x4aa>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8002e6e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002e70:	78db      	ldrb	r3, [r3, #3]
 8002e72:	2b02      	cmp	r3, #2
 8002e74:	d10a      	bne.n	8002e8c <PCD_EP_ISR_Handler+0x3c2>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8002e76:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8002e7a:	461a      	mov	r2, r3
 8002e7c:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8002e7e:	6878      	ldr	r0, [r7, #4]
 8002e80:	f000 f9d3 	bl	800322a <HAL_PCD_EP_DB_Receive>
 8002e84:	4603      	mov	r3, r0
 8002e86:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8002e8a:	e073      	b.n	8002f74 <PCD_EP_ISR_Handler+0x4aa>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	461a      	mov	r2, r3
 8002e92:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002e94:	781b      	ldrb	r3, [r3, #0]
 8002e96:	009b      	lsls	r3, r3, #2
 8002e98:	4413      	add	r3, r2
 8002e9a:	881b      	ldrh	r3, [r3, #0]
 8002e9c:	b29b      	uxth	r3, r3
 8002e9e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002ea2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ea6:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	461a      	mov	r2, r3
 8002eb0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002eb2:	781b      	ldrb	r3, [r3, #0]
 8002eb4:	009b      	lsls	r3, r3, #2
 8002eb6:	441a      	add	r2, r3
 8002eb8:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002ebc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002ec0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002ec4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002ec8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002ecc:	b29b      	uxth	r3, r3
 8002ece:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	461a      	mov	r2, r3
 8002ed6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002ed8:	781b      	ldrb	r3, [r3, #0]
 8002eda:	009b      	lsls	r3, r3, #2
 8002edc:	4413      	add	r3, r2
 8002ede:	881b      	ldrh	r3, [r3, #0]
 8002ee0:	b29b      	uxth	r3, r3
 8002ee2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d022      	beq.n	8002f30 <PCD_EP_ISR_Handler+0x466>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002ef2:	b29b      	uxth	r3, r3
 8002ef4:	461a      	mov	r2, r3
 8002ef6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002ef8:	781b      	ldrb	r3, [r3, #0]
 8002efa:	00db      	lsls	r3, r3, #3
 8002efc:	4413      	add	r3, r2
 8002efe:	687a      	ldr	r2, [r7, #4]
 8002f00:	6812      	ldr	r2, [r2, #0]
 8002f02:	4413      	add	r3, r2
 8002f04:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002f08:	881b      	ldrh	r3, [r3, #0]
 8002f0a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002f0e:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

              if (count != 0U)
 8002f12:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d02c      	beq.n	8002f74 <PCD_EP_ISR_Handler+0x4aa>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	6818      	ldr	r0, [r3, #0]
 8002f1e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f20:	6959      	ldr	r1, [r3, #20]
 8002f22:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f24:	891a      	ldrh	r2, [r3, #8]
 8002f26:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8002f2a:	f004 fee6 	bl	8007cfa <USB_ReadPMA>
 8002f2e:	e021      	b.n	8002f74 <PCD_EP_ISR_Handler+0x4aa>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002f38:	b29b      	uxth	r3, r3
 8002f3a:	461a      	mov	r2, r3
 8002f3c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f3e:	781b      	ldrb	r3, [r3, #0]
 8002f40:	00db      	lsls	r3, r3, #3
 8002f42:	4413      	add	r3, r2
 8002f44:	687a      	ldr	r2, [r7, #4]
 8002f46:	6812      	ldr	r2, [r2, #0]
 8002f48:	4413      	add	r3, r2
 8002f4a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002f4e:	881b      	ldrh	r3, [r3, #0]
 8002f50:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002f54:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

              if (count != 0U)
 8002f58:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d009      	beq.n	8002f74 <PCD_EP_ISR_Handler+0x4aa>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	6818      	ldr	r0, [r3, #0]
 8002f64:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f66:	6959      	ldr	r1, [r3, #20]
 8002f68:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f6a:	895a      	ldrh	r2, [r3, #10]
 8002f6c:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8002f70:	f004 fec3 	bl	8007cfa <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8002f74:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f76:	69da      	ldr	r2, [r3, #28]
 8002f78:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8002f7c:	441a      	add	r2, r3
 8002f7e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f80:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8002f82:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f84:	695a      	ldr	r2, [r3, #20]
 8002f86:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8002f8a:	441a      	add	r2, r3
 8002f8c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f8e:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8002f90:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f92:	699b      	ldr	r3, [r3, #24]
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d005      	beq.n	8002fa4 <PCD_EP_ISR_Handler+0x4da>
 8002f98:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8002f9c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f9e:	691b      	ldr	r3, [r3, #16]
 8002fa0:	429a      	cmp	r2, r3
 8002fa2:	d206      	bcs.n	8002fb2 <PCD_EP_ISR_Handler+0x4e8>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8002fa4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002fa6:	781b      	ldrb	r3, [r3, #0]
 8002fa8:	4619      	mov	r1, r3
 8002faa:	6878      	ldr	r0, [r7, #4]
 8002fac:	f006 fda8 	bl	8009b00 <HAL_PCD_DataOutStageCallback>
 8002fb0:	e005      	b.n	8002fbe <PCD_EP_ISR_Handler+0x4f4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8002fb8:	4618      	mov	r0, r3
 8002fba:	f003 f9ec 	bl	8006396 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8002fbe:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8002fc2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	f000 8121 	beq.w	800320e <PCD_EP_ISR_Handler+0x744>
      {
        ep = &hpcd->IN_ep[epindex];
 8002fcc:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8002fd0:	1c5a      	adds	r2, r3, #1
 8002fd2:	4613      	mov	r3, r2
 8002fd4:	009b      	lsls	r3, r3, #2
 8002fd6:	4413      	add	r3, r2
 8002fd8:	00db      	lsls	r3, r3, #3
 8002fda:	687a      	ldr	r2, [r7, #4]
 8002fdc:	4413      	add	r3, r2
 8002fde:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	461a      	mov	r2, r3
 8002fe6:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8002fea:	009b      	lsls	r3, r3, #2
 8002fec:	4413      	add	r3, r2
 8002fee:	881b      	ldrh	r3, [r3, #0]
 8002ff0:	b29b      	uxth	r3, r3
 8002ff2:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8002ff6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ffa:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	461a      	mov	r2, r3
 8003004:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8003008:	009b      	lsls	r3, r3, #2
 800300a:	441a      	add	r2, r3
 800300c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8003010:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003014:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003018:	b29b      	uxth	r3, r3
 800301a:	8013      	strh	r3, [r2, #0]

        if (ep->type != EP_TYPE_BULK)
 800301c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800301e:	78db      	ldrb	r3, [r3, #3]
 8003020:	2b02      	cmp	r3, #2
 8003022:	f000 80a2 	beq.w	800316a <PCD_EP_ISR_Handler+0x6a0>
        {
          ep->xfer_len = 0U;
 8003026:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003028:	2200      	movs	r2, #0
 800302a:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 800302c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800302e:	7b1b      	ldrb	r3, [r3, #12]
 8003030:	2b00      	cmp	r3, #0
 8003032:	f000 8093 	beq.w	800315c <PCD_EP_ISR_Handler+0x692>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003036:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800303a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800303e:	2b00      	cmp	r3, #0
 8003040:	d046      	beq.n	80030d0 <PCD_EP_ISR_Handler+0x606>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003042:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003044:	785b      	ldrb	r3, [r3, #1]
 8003046:	2b00      	cmp	r3, #0
 8003048:	d126      	bne.n	8003098 <PCD_EP_ISR_Handler+0x5ce>
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	627b      	str	r3, [r7, #36]	; 0x24
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003058:	b29b      	uxth	r3, r3
 800305a:	461a      	mov	r2, r3
 800305c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800305e:	4413      	add	r3, r2
 8003060:	627b      	str	r3, [r7, #36]	; 0x24
 8003062:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003064:	781b      	ldrb	r3, [r3, #0]
 8003066:	00da      	lsls	r2, r3, #3
 8003068:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800306a:	4413      	add	r3, r2
 800306c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003070:	623b      	str	r3, [r7, #32]
 8003072:	6a3b      	ldr	r3, [r7, #32]
 8003074:	881b      	ldrh	r3, [r3, #0]
 8003076:	b29b      	uxth	r3, r3
 8003078:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800307c:	b29a      	uxth	r2, r3
 800307e:	6a3b      	ldr	r3, [r7, #32]
 8003080:	801a      	strh	r2, [r3, #0]
 8003082:	6a3b      	ldr	r3, [r7, #32]
 8003084:	881b      	ldrh	r3, [r3, #0]
 8003086:	b29b      	uxth	r3, r3
 8003088:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800308c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003090:	b29a      	uxth	r2, r3
 8003092:	6a3b      	ldr	r3, [r7, #32]
 8003094:	801a      	strh	r2, [r3, #0]
 8003096:	e061      	b.n	800315c <PCD_EP_ISR_Handler+0x692>
 8003098:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800309a:	785b      	ldrb	r3, [r3, #1]
 800309c:	2b01      	cmp	r3, #1
 800309e:	d15d      	bne.n	800315c <PCD_EP_ISR_Handler+0x692>
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80030ae:	b29b      	uxth	r3, r3
 80030b0:	461a      	mov	r2, r3
 80030b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030b4:	4413      	add	r3, r2
 80030b6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80030b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80030ba:	781b      	ldrb	r3, [r3, #0]
 80030bc:	00da      	lsls	r2, r3, #3
 80030be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030c0:	4413      	add	r3, r2
 80030c2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80030c6:	62bb      	str	r3, [r7, #40]	; 0x28
 80030c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030ca:	2200      	movs	r2, #0
 80030cc:	801a      	strh	r2, [r3, #0]
 80030ce:	e045      	b.n	800315c <PCD_EP_ISR_Handler+0x692>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80030d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80030d8:	785b      	ldrb	r3, [r3, #1]
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d126      	bne.n	800312c <PCD_EP_ISR_Handler+0x662>
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	637b      	str	r3, [r7, #52]	; 0x34
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80030ec:	b29b      	uxth	r3, r3
 80030ee:	461a      	mov	r2, r3
 80030f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80030f2:	4413      	add	r3, r2
 80030f4:	637b      	str	r3, [r7, #52]	; 0x34
 80030f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80030f8:	781b      	ldrb	r3, [r3, #0]
 80030fa:	00da      	lsls	r2, r3, #3
 80030fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80030fe:	4413      	add	r3, r2
 8003100:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003104:	633b      	str	r3, [r7, #48]	; 0x30
 8003106:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003108:	881b      	ldrh	r3, [r3, #0]
 800310a:	b29b      	uxth	r3, r3
 800310c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003110:	b29a      	uxth	r2, r3
 8003112:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003114:	801a      	strh	r2, [r3, #0]
 8003116:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003118:	881b      	ldrh	r3, [r3, #0]
 800311a:	b29b      	uxth	r3, r3
 800311c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003120:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003124:	b29a      	uxth	r2, r3
 8003126:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003128:	801a      	strh	r2, [r3, #0]
 800312a:	e017      	b.n	800315c <PCD_EP_ISR_Handler+0x692>
 800312c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800312e:	785b      	ldrb	r3, [r3, #1]
 8003130:	2b01      	cmp	r3, #1
 8003132:	d113      	bne.n	800315c <PCD_EP_ISR_Handler+0x692>
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800313c:	b29b      	uxth	r3, r3
 800313e:	461a      	mov	r2, r3
 8003140:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003142:	4413      	add	r3, r2
 8003144:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003146:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003148:	781b      	ldrb	r3, [r3, #0]
 800314a:	00da      	lsls	r2, r3, #3
 800314c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800314e:	4413      	add	r3, r2
 8003150:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003154:	63bb      	str	r3, [r7, #56]	; 0x38
 8003156:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003158:	2200      	movs	r2, #0
 800315a:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800315c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800315e:	781b      	ldrb	r3, [r3, #0]
 8003160:	4619      	mov	r1, r3
 8003162:	6878      	ldr	r0, [r7, #4]
 8003164:	f006 fce7 	bl	8009b36 <HAL_PCD_DataInStageCallback>
 8003168:	e051      	b.n	800320e <PCD_EP_ISR_Handler+0x744>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Bulk Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 800316a:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800316e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003172:	2b00      	cmp	r3, #0
 8003174:	d144      	bne.n	8003200 <PCD_EP_ISR_Handler+0x736>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800317e:	b29b      	uxth	r3, r3
 8003180:	461a      	mov	r2, r3
 8003182:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003184:	781b      	ldrb	r3, [r3, #0]
 8003186:	00db      	lsls	r3, r3, #3
 8003188:	4413      	add	r3, r2
 800318a:	687a      	ldr	r2, [r7, #4]
 800318c:	6812      	ldr	r2, [r2, #0]
 800318e:	4413      	add	r3, r2
 8003190:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003194:	881b      	ldrh	r3, [r3, #0]
 8003196:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800319a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            if (ep->xfer_len > TxPctSize)
 800319e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80031a0:	699a      	ldr	r2, [r3, #24]
 80031a2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80031a6:	429a      	cmp	r2, r3
 80031a8:	d907      	bls.n	80031ba <PCD_EP_ISR_Handler+0x6f0>
            {
              ep->xfer_len -= TxPctSize;
 80031aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80031ac:	699a      	ldr	r2, [r3, #24]
 80031ae:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80031b2:	1ad2      	subs	r2, r2, r3
 80031b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80031b6:	619a      	str	r2, [r3, #24]
 80031b8:	e002      	b.n	80031c0 <PCD_EP_ISR_Handler+0x6f6>
            }
            else
            {
              ep->xfer_len = 0U;
 80031ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80031bc:	2200      	movs	r2, #0
 80031be:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 80031c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80031c2:	699b      	ldr	r3, [r3, #24]
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d106      	bne.n	80031d6 <PCD_EP_ISR_Handler+0x70c>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80031c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80031ca:	781b      	ldrb	r3, [r3, #0]
 80031cc:	4619      	mov	r1, r3
 80031ce:	6878      	ldr	r0, [r7, #4]
 80031d0:	f006 fcb1 	bl	8009b36 <HAL_PCD_DataInStageCallback>
 80031d4:	e01b      	b.n	800320e <PCD_EP_ISR_Handler+0x744>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 80031d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80031d8:	695a      	ldr	r2, [r3, #20]
 80031da:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80031de:	441a      	add	r2, r3
 80031e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80031e2:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 80031e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80031e6:	69da      	ldr	r2, [r3, #28]
 80031e8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80031ec:	441a      	add	r2, r3
 80031ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80031f0:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80031f8:	4618      	mov	r0, r3
 80031fa:	f003 f8cc 	bl	8006396 <USB_EPStartXfer>
 80031fe:	e006      	b.n	800320e <PCD_EP_ISR_Handler+0x744>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8003200:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8003204:	461a      	mov	r2, r3
 8003206:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8003208:	6878      	ldr	r0, [r7, #4]
 800320a:	f000 f917 	bl	800343c <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003216:	b29b      	uxth	r3, r3
 8003218:	b21b      	sxth	r3, r3
 800321a:	2b00      	cmp	r3, #0
 800321c:	f6ff ac5a 	blt.w	8002ad4 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8003220:	2300      	movs	r3, #0
}
 8003222:	4618      	mov	r0, r3
 8003224:	3758      	adds	r7, #88	; 0x58
 8003226:	46bd      	mov	sp, r7
 8003228:	bd80      	pop	{r7, pc}

0800322a <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800322a:	b580      	push	{r7, lr}
 800322c:	b088      	sub	sp, #32
 800322e:	af00      	add	r7, sp, #0
 8003230:	60f8      	str	r0, [r7, #12]
 8003232:	60b9      	str	r1, [r7, #8]
 8003234:	4613      	mov	r3, r2
 8003236:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003238:	88fb      	ldrh	r3, [r7, #6]
 800323a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800323e:	2b00      	cmp	r3, #0
 8003240:	d07c      	beq.n	800333c <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800324a:	b29b      	uxth	r3, r3
 800324c:	461a      	mov	r2, r3
 800324e:	68bb      	ldr	r3, [r7, #8]
 8003250:	781b      	ldrb	r3, [r3, #0]
 8003252:	00db      	lsls	r3, r3, #3
 8003254:	4413      	add	r3, r2
 8003256:	68fa      	ldr	r2, [r7, #12]
 8003258:	6812      	ldr	r2, [r2, #0]
 800325a:	4413      	add	r3, r2
 800325c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003260:	881b      	ldrh	r3, [r3, #0]
 8003262:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003266:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8003268:	68bb      	ldr	r3, [r7, #8]
 800326a:	699a      	ldr	r2, [r3, #24]
 800326c:	8b7b      	ldrh	r3, [r7, #26]
 800326e:	429a      	cmp	r2, r3
 8003270:	d306      	bcc.n	8003280 <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 8003272:	68bb      	ldr	r3, [r7, #8]
 8003274:	699a      	ldr	r2, [r3, #24]
 8003276:	8b7b      	ldrh	r3, [r7, #26]
 8003278:	1ad2      	subs	r2, r2, r3
 800327a:	68bb      	ldr	r3, [r7, #8]
 800327c:	619a      	str	r2, [r3, #24]
 800327e:	e002      	b.n	8003286 <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 8003280:	68bb      	ldr	r3, [r7, #8]
 8003282:	2200      	movs	r2, #0
 8003284:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8003286:	68bb      	ldr	r3, [r7, #8]
 8003288:	699b      	ldr	r3, [r3, #24]
 800328a:	2b00      	cmp	r3, #0
 800328c:	d123      	bne.n	80032d6 <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	461a      	mov	r2, r3
 8003294:	68bb      	ldr	r3, [r7, #8]
 8003296:	781b      	ldrb	r3, [r3, #0]
 8003298:	009b      	lsls	r3, r3, #2
 800329a:	4413      	add	r3, r2
 800329c:	881b      	ldrh	r3, [r3, #0]
 800329e:	b29b      	uxth	r3, r3
 80032a0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80032a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80032a8:	833b      	strh	r3, [r7, #24]
 80032aa:	8b3b      	ldrh	r3, [r7, #24]
 80032ac:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80032b0:	833b      	strh	r3, [r7, #24]
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	461a      	mov	r2, r3
 80032b8:	68bb      	ldr	r3, [r7, #8]
 80032ba:	781b      	ldrb	r3, [r3, #0]
 80032bc:	009b      	lsls	r3, r3, #2
 80032be:	441a      	add	r2, r3
 80032c0:	8b3b      	ldrh	r3, [r7, #24]
 80032c2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80032c6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80032ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80032ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80032d2:	b29b      	uxth	r3, r3
 80032d4:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80032d6:	88fb      	ldrh	r3, [r7, #6]
 80032d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d01f      	beq.n	8003320 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	461a      	mov	r2, r3
 80032e6:	68bb      	ldr	r3, [r7, #8]
 80032e8:	781b      	ldrb	r3, [r3, #0]
 80032ea:	009b      	lsls	r3, r3, #2
 80032ec:	4413      	add	r3, r2
 80032ee:	881b      	ldrh	r3, [r3, #0]
 80032f0:	b29b      	uxth	r3, r3
 80032f2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80032f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80032fa:	82fb      	strh	r3, [r7, #22]
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	461a      	mov	r2, r3
 8003302:	68bb      	ldr	r3, [r7, #8]
 8003304:	781b      	ldrb	r3, [r3, #0]
 8003306:	009b      	lsls	r3, r3, #2
 8003308:	441a      	add	r2, r3
 800330a:	8afb      	ldrh	r3, [r7, #22]
 800330c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003310:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003314:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003318:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800331c:	b29b      	uxth	r3, r3
 800331e:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8003320:	8b7b      	ldrh	r3, [r7, #26]
 8003322:	2b00      	cmp	r3, #0
 8003324:	f000 8085 	beq.w	8003432 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	6818      	ldr	r0, [r3, #0]
 800332c:	68bb      	ldr	r3, [r7, #8]
 800332e:	6959      	ldr	r1, [r3, #20]
 8003330:	68bb      	ldr	r3, [r7, #8]
 8003332:	891a      	ldrh	r2, [r3, #8]
 8003334:	8b7b      	ldrh	r3, [r7, #26]
 8003336:	f004 fce0 	bl	8007cfa <USB_ReadPMA>
 800333a:	e07a      	b.n	8003432 <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003344:	b29b      	uxth	r3, r3
 8003346:	461a      	mov	r2, r3
 8003348:	68bb      	ldr	r3, [r7, #8]
 800334a:	781b      	ldrb	r3, [r3, #0]
 800334c:	00db      	lsls	r3, r3, #3
 800334e:	4413      	add	r3, r2
 8003350:	68fa      	ldr	r2, [r7, #12]
 8003352:	6812      	ldr	r2, [r2, #0]
 8003354:	4413      	add	r3, r2
 8003356:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800335a:	881b      	ldrh	r3, [r3, #0]
 800335c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003360:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8003362:	68bb      	ldr	r3, [r7, #8]
 8003364:	699a      	ldr	r2, [r3, #24]
 8003366:	8b7b      	ldrh	r3, [r7, #26]
 8003368:	429a      	cmp	r2, r3
 800336a:	d306      	bcc.n	800337a <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 800336c:	68bb      	ldr	r3, [r7, #8]
 800336e:	699a      	ldr	r2, [r3, #24]
 8003370:	8b7b      	ldrh	r3, [r7, #26]
 8003372:	1ad2      	subs	r2, r2, r3
 8003374:	68bb      	ldr	r3, [r7, #8]
 8003376:	619a      	str	r2, [r3, #24]
 8003378:	e002      	b.n	8003380 <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 800337a:	68bb      	ldr	r3, [r7, #8]
 800337c:	2200      	movs	r2, #0
 800337e:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8003380:	68bb      	ldr	r3, [r7, #8]
 8003382:	699b      	ldr	r3, [r3, #24]
 8003384:	2b00      	cmp	r3, #0
 8003386:	d123      	bne.n	80033d0 <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	461a      	mov	r2, r3
 800338e:	68bb      	ldr	r3, [r7, #8]
 8003390:	781b      	ldrb	r3, [r3, #0]
 8003392:	009b      	lsls	r3, r3, #2
 8003394:	4413      	add	r3, r2
 8003396:	881b      	ldrh	r3, [r3, #0]
 8003398:	b29b      	uxth	r3, r3
 800339a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800339e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80033a2:	83fb      	strh	r3, [r7, #30]
 80033a4:	8bfb      	ldrh	r3, [r7, #30]
 80033a6:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80033aa:	83fb      	strh	r3, [r7, #30]
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	461a      	mov	r2, r3
 80033b2:	68bb      	ldr	r3, [r7, #8]
 80033b4:	781b      	ldrb	r3, [r3, #0]
 80033b6:	009b      	lsls	r3, r3, #2
 80033b8:	441a      	add	r2, r3
 80033ba:	8bfb      	ldrh	r3, [r7, #30]
 80033bc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80033c0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80033c4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80033c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80033cc:	b29b      	uxth	r3, r3
 80033ce:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 80033d0:	88fb      	ldrh	r3, [r7, #6]
 80033d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d11f      	bne.n	800341a <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	461a      	mov	r2, r3
 80033e0:	68bb      	ldr	r3, [r7, #8]
 80033e2:	781b      	ldrb	r3, [r3, #0]
 80033e4:	009b      	lsls	r3, r3, #2
 80033e6:	4413      	add	r3, r2
 80033e8:	881b      	ldrh	r3, [r3, #0]
 80033ea:	b29b      	uxth	r3, r3
 80033ec:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80033f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80033f4:	83bb      	strh	r3, [r7, #28]
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	461a      	mov	r2, r3
 80033fc:	68bb      	ldr	r3, [r7, #8]
 80033fe:	781b      	ldrb	r3, [r3, #0]
 8003400:	009b      	lsls	r3, r3, #2
 8003402:	441a      	add	r2, r3
 8003404:	8bbb      	ldrh	r3, [r7, #28]
 8003406:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800340a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800340e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003412:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003416:	b29b      	uxth	r3, r3
 8003418:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800341a:	8b7b      	ldrh	r3, [r7, #26]
 800341c:	2b00      	cmp	r3, #0
 800341e:	d008      	beq.n	8003432 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	6818      	ldr	r0, [r3, #0]
 8003424:	68bb      	ldr	r3, [r7, #8]
 8003426:	6959      	ldr	r1, [r3, #20]
 8003428:	68bb      	ldr	r3, [r7, #8]
 800342a:	895a      	ldrh	r2, [r3, #10]
 800342c:	8b7b      	ldrh	r3, [r7, #26]
 800342e:	f004 fc64 	bl	8007cfa <USB_ReadPMA>
    }
  }

  return count;
 8003432:	8b7b      	ldrh	r3, [r7, #26]
}
 8003434:	4618      	mov	r0, r3
 8003436:	3720      	adds	r7, #32
 8003438:	46bd      	mov	sp, r7
 800343a:	bd80      	pop	{r7, pc}

0800343c <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800343c:	b580      	push	{r7, lr}
 800343e:	b0a2      	sub	sp, #136	; 0x88
 8003440:	af00      	add	r7, sp, #0
 8003442:	60f8      	str	r0, [r7, #12]
 8003444:	60b9      	str	r1, [r7, #8]
 8003446:	4613      	mov	r3, r2
 8003448:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800344a:	88fb      	ldrh	r3, [r7, #6]
 800344c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003450:	2b00      	cmp	r3, #0
 8003452:	f000 81c5 	beq.w	80037e0 <HAL_PCD_EP_DB_Transmit+0x3a4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800345e:	b29b      	uxth	r3, r3
 8003460:	461a      	mov	r2, r3
 8003462:	68bb      	ldr	r3, [r7, #8]
 8003464:	781b      	ldrb	r3, [r3, #0]
 8003466:	00db      	lsls	r3, r3, #3
 8003468:	4413      	add	r3, r2
 800346a:	68fa      	ldr	r2, [r7, #12]
 800346c:	6812      	ldr	r2, [r2, #0]
 800346e:	4413      	add	r3, r2
 8003470:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003474:	881b      	ldrh	r3, [r3, #0]
 8003476:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800347a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxPctSize)
 800347e:	68bb      	ldr	r3, [r7, #8]
 8003480:	699a      	ldr	r2, [r3, #24]
 8003482:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003486:	429a      	cmp	r2, r3
 8003488:	d907      	bls.n	800349a <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 800348a:	68bb      	ldr	r3, [r7, #8]
 800348c:	699a      	ldr	r2, [r3, #24]
 800348e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003492:	1ad2      	subs	r2, r2, r3
 8003494:	68bb      	ldr	r3, [r7, #8]
 8003496:	619a      	str	r2, [r3, #24]
 8003498:	e002      	b.n	80034a0 <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 800349a:	68bb      	ldr	r3, [r7, #8]
 800349c:	2200      	movs	r2, #0
 800349e:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80034a0:	68bb      	ldr	r3, [r7, #8]
 80034a2:	699b      	ldr	r3, [r3, #24]
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	f040 80b9 	bne.w	800361c <HAL_PCD_EP_DB_Transmit+0x1e0>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80034aa:	68bb      	ldr	r3, [r7, #8]
 80034ac:	785b      	ldrb	r3, [r3, #1]
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d126      	bne.n	8003500 <HAL_PCD_EP_DB_Transmit+0xc4>
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	62bb      	str	r3, [r7, #40]	; 0x28
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80034c0:	b29b      	uxth	r3, r3
 80034c2:	461a      	mov	r2, r3
 80034c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034c6:	4413      	add	r3, r2
 80034c8:	62bb      	str	r3, [r7, #40]	; 0x28
 80034ca:	68bb      	ldr	r3, [r7, #8]
 80034cc:	781b      	ldrb	r3, [r3, #0]
 80034ce:	00da      	lsls	r2, r3, #3
 80034d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034d2:	4413      	add	r3, r2
 80034d4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80034d8:	627b      	str	r3, [r7, #36]	; 0x24
 80034da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034dc:	881b      	ldrh	r3, [r3, #0]
 80034de:	b29b      	uxth	r3, r3
 80034e0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80034e4:	b29a      	uxth	r2, r3
 80034e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034e8:	801a      	strh	r2, [r3, #0]
 80034ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034ec:	881b      	ldrh	r3, [r3, #0]
 80034ee:	b29b      	uxth	r3, r3
 80034f0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80034f4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80034f8:	b29a      	uxth	r2, r3
 80034fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034fc:	801a      	strh	r2, [r3, #0]
 80034fe:	e01a      	b.n	8003536 <HAL_PCD_EP_DB_Transmit+0xfa>
 8003500:	68bb      	ldr	r3, [r7, #8]
 8003502:	785b      	ldrb	r3, [r3, #1]
 8003504:	2b01      	cmp	r3, #1
 8003506:	d116      	bne.n	8003536 <HAL_PCD_EP_DB_Transmit+0xfa>
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	633b      	str	r3, [r7, #48]	; 0x30
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003516:	b29b      	uxth	r3, r3
 8003518:	461a      	mov	r2, r3
 800351a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800351c:	4413      	add	r3, r2
 800351e:	633b      	str	r3, [r7, #48]	; 0x30
 8003520:	68bb      	ldr	r3, [r7, #8]
 8003522:	781b      	ldrb	r3, [r3, #0]
 8003524:	00da      	lsls	r2, r3, #3
 8003526:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003528:	4413      	add	r3, r2
 800352a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800352e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003530:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003532:	2200      	movs	r2, #0
 8003534:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	623b      	str	r3, [r7, #32]
 800353c:	68bb      	ldr	r3, [r7, #8]
 800353e:	785b      	ldrb	r3, [r3, #1]
 8003540:	2b00      	cmp	r3, #0
 8003542:	d126      	bne.n	8003592 <HAL_PCD_EP_DB_Transmit+0x156>
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	61bb      	str	r3, [r7, #24]
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003552:	b29b      	uxth	r3, r3
 8003554:	461a      	mov	r2, r3
 8003556:	69bb      	ldr	r3, [r7, #24]
 8003558:	4413      	add	r3, r2
 800355a:	61bb      	str	r3, [r7, #24]
 800355c:	68bb      	ldr	r3, [r7, #8]
 800355e:	781b      	ldrb	r3, [r3, #0]
 8003560:	00da      	lsls	r2, r3, #3
 8003562:	69bb      	ldr	r3, [r7, #24]
 8003564:	4413      	add	r3, r2
 8003566:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800356a:	617b      	str	r3, [r7, #20]
 800356c:	697b      	ldr	r3, [r7, #20]
 800356e:	881b      	ldrh	r3, [r3, #0]
 8003570:	b29b      	uxth	r3, r3
 8003572:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003576:	b29a      	uxth	r2, r3
 8003578:	697b      	ldr	r3, [r7, #20]
 800357a:	801a      	strh	r2, [r3, #0]
 800357c:	697b      	ldr	r3, [r7, #20]
 800357e:	881b      	ldrh	r3, [r3, #0]
 8003580:	b29b      	uxth	r3, r3
 8003582:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003586:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800358a:	b29a      	uxth	r2, r3
 800358c:	697b      	ldr	r3, [r7, #20]
 800358e:	801a      	strh	r2, [r3, #0]
 8003590:	e017      	b.n	80035c2 <HAL_PCD_EP_DB_Transmit+0x186>
 8003592:	68bb      	ldr	r3, [r7, #8]
 8003594:	785b      	ldrb	r3, [r3, #1]
 8003596:	2b01      	cmp	r3, #1
 8003598:	d113      	bne.n	80035c2 <HAL_PCD_EP_DB_Transmit+0x186>
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80035a2:	b29b      	uxth	r3, r3
 80035a4:	461a      	mov	r2, r3
 80035a6:	6a3b      	ldr	r3, [r7, #32]
 80035a8:	4413      	add	r3, r2
 80035aa:	623b      	str	r3, [r7, #32]
 80035ac:	68bb      	ldr	r3, [r7, #8]
 80035ae:	781b      	ldrb	r3, [r3, #0]
 80035b0:	00da      	lsls	r2, r3, #3
 80035b2:	6a3b      	ldr	r3, [r7, #32]
 80035b4:	4413      	add	r3, r2
 80035b6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80035ba:	61fb      	str	r3, [r7, #28]
 80035bc:	69fb      	ldr	r3, [r7, #28]
 80035be:	2200      	movs	r2, #0
 80035c0:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80035c2:	68bb      	ldr	r3, [r7, #8]
 80035c4:	781b      	ldrb	r3, [r3, #0]
 80035c6:	4619      	mov	r1, r3
 80035c8:	68f8      	ldr	r0, [r7, #12]
 80035ca:	f006 fab4 	bl	8009b36 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80035ce:	88fb      	ldrh	r3, [r7, #6]
 80035d0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	f000 82d2 	beq.w	8003b7e <HAL_PCD_EP_DB_Transmit+0x742>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	461a      	mov	r2, r3
 80035e0:	68bb      	ldr	r3, [r7, #8]
 80035e2:	781b      	ldrb	r3, [r3, #0]
 80035e4:	009b      	lsls	r3, r3, #2
 80035e6:	4413      	add	r3, r2
 80035e8:	881b      	ldrh	r3, [r3, #0]
 80035ea:	b29b      	uxth	r3, r3
 80035ec:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80035f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80035f4:	827b      	strh	r3, [r7, #18]
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	461a      	mov	r2, r3
 80035fc:	68bb      	ldr	r3, [r7, #8]
 80035fe:	781b      	ldrb	r3, [r3, #0]
 8003600:	009b      	lsls	r3, r3, #2
 8003602:	441a      	add	r2, r3
 8003604:	8a7b      	ldrh	r3, [r7, #18]
 8003606:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800360a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800360e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003612:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003616:	b29b      	uxth	r3, r3
 8003618:	8013      	strh	r3, [r2, #0]
 800361a:	e2b0      	b.n	8003b7e <HAL_PCD_EP_DB_Transmit+0x742>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800361c:	88fb      	ldrh	r3, [r7, #6]
 800361e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003622:	2b00      	cmp	r3, #0
 8003624:	d021      	beq.n	800366a <HAL_PCD_EP_DB_Transmit+0x22e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	461a      	mov	r2, r3
 800362c:	68bb      	ldr	r3, [r7, #8]
 800362e:	781b      	ldrb	r3, [r3, #0]
 8003630:	009b      	lsls	r3, r3, #2
 8003632:	4413      	add	r3, r2
 8003634:	881b      	ldrh	r3, [r3, #0]
 8003636:	b29b      	uxth	r3, r3
 8003638:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800363c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003640:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	461a      	mov	r2, r3
 800364a:	68bb      	ldr	r3, [r7, #8]
 800364c:	781b      	ldrb	r3, [r3, #0]
 800364e:	009b      	lsls	r3, r3, #2
 8003650:	441a      	add	r2, r3
 8003652:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8003656:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800365a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800365e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003662:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003666:	b29b      	uxth	r3, r3
 8003668:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800366a:	68bb      	ldr	r3, [r7, #8]
 800366c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003670:	2b01      	cmp	r3, #1
 8003672:	f040 8284 	bne.w	8003b7e <HAL_PCD_EP_DB_Transmit+0x742>
      {
        ep->xfer_buff += TxPctSize;
 8003676:	68bb      	ldr	r3, [r7, #8]
 8003678:	695a      	ldr	r2, [r3, #20]
 800367a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800367e:	441a      	add	r2, r3
 8003680:	68bb      	ldr	r3, [r7, #8]
 8003682:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8003684:	68bb      	ldr	r3, [r7, #8]
 8003686:	69da      	ldr	r2, [r3, #28]
 8003688:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800368c:	441a      	add	r2, r3
 800368e:	68bb      	ldr	r3, [r7, #8]
 8003690:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8003692:	68bb      	ldr	r3, [r7, #8]
 8003694:	6a1a      	ldr	r2, [r3, #32]
 8003696:	68bb      	ldr	r3, [r7, #8]
 8003698:	691b      	ldr	r3, [r3, #16]
 800369a:	429a      	cmp	r2, r3
 800369c:	d309      	bcc.n	80036b2 <HAL_PCD_EP_DB_Transmit+0x276>
        {
          len = ep->maxpacket;
 800369e:	68bb      	ldr	r3, [r7, #8]
 80036a0:	691b      	ldr	r3, [r3, #16]
 80036a2:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 80036a4:	68bb      	ldr	r3, [r7, #8]
 80036a6:	6a1a      	ldr	r2, [r3, #32]
 80036a8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80036aa:	1ad2      	subs	r2, r2, r3
 80036ac:	68bb      	ldr	r3, [r7, #8]
 80036ae:	621a      	str	r2, [r3, #32]
 80036b0:	e015      	b.n	80036de <HAL_PCD_EP_DB_Transmit+0x2a2>
        }
        else if (ep->xfer_len_db == 0U)
 80036b2:	68bb      	ldr	r3, [r7, #8]
 80036b4:	6a1b      	ldr	r3, [r3, #32]
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d107      	bne.n	80036ca <HAL_PCD_EP_DB_Transmit+0x28e>
        {
          len = TxPctSize;
 80036ba:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80036be:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 80036c0:	68bb      	ldr	r3, [r7, #8]
 80036c2:	2200      	movs	r2, #0
 80036c4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80036c8:	e009      	b.n	80036de <HAL_PCD_EP_DB_Transmit+0x2a2>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 80036ca:	68bb      	ldr	r3, [r7, #8]
 80036cc:	2200      	movs	r2, #0
 80036ce:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 80036d2:	68bb      	ldr	r3, [r7, #8]
 80036d4:	6a1b      	ldr	r3, [r3, #32]
 80036d6:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 80036d8:	68bb      	ldr	r3, [r7, #8]
 80036da:	2200      	movs	r2, #0
 80036dc:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80036de:	68bb      	ldr	r3, [r7, #8]
 80036e0:	785b      	ldrb	r3, [r3, #1]
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d155      	bne.n	8003792 <HAL_PCD_EP_DB_Transmit+0x356>
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	63bb      	str	r3, [r7, #56]	; 0x38
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80036f4:	b29b      	uxth	r3, r3
 80036f6:	461a      	mov	r2, r3
 80036f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036fa:	4413      	add	r3, r2
 80036fc:	63bb      	str	r3, [r7, #56]	; 0x38
 80036fe:	68bb      	ldr	r3, [r7, #8]
 8003700:	781b      	ldrb	r3, [r3, #0]
 8003702:	00da      	lsls	r2, r3, #3
 8003704:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003706:	4413      	add	r3, r2
 8003708:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800370c:	637b      	str	r3, [r7, #52]	; 0x34
 800370e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003710:	2b3e      	cmp	r3, #62	; 0x3e
 8003712:	d916      	bls.n	8003742 <HAL_PCD_EP_DB_Transmit+0x306>
 8003714:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003716:	095b      	lsrs	r3, r3, #5
 8003718:	64bb      	str	r3, [r7, #72]	; 0x48
 800371a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800371c:	f003 031f 	and.w	r3, r3, #31
 8003720:	2b00      	cmp	r3, #0
 8003722:	d102      	bne.n	800372a <HAL_PCD_EP_DB_Transmit+0x2ee>
 8003724:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003726:	3b01      	subs	r3, #1
 8003728:	64bb      	str	r3, [r7, #72]	; 0x48
 800372a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800372c:	b29b      	uxth	r3, r3
 800372e:	029b      	lsls	r3, r3, #10
 8003730:	b29b      	uxth	r3, r3
 8003732:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003736:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800373a:	b29a      	uxth	r2, r3
 800373c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800373e:	801a      	strh	r2, [r3, #0]
 8003740:	e043      	b.n	80037ca <HAL_PCD_EP_DB_Transmit+0x38e>
 8003742:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003744:	2b00      	cmp	r3, #0
 8003746:	d112      	bne.n	800376e <HAL_PCD_EP_DB_Transmit+0x332>
 8003748:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800374a:	881b      	ldrh	r3, [r3, #0]
 800374c:	b29b      	uxth	r3, r3
 800374e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003752:	b29a      	uxth	r2, r3
 8003754:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003756:	801a      	strh	r2, [r3, #0]
 8003758:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800375a:	881b      	ldrh	r3, [r3, #0]
 800375c:	b29b      	uxth	r3, r3
 800375e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003762:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003766:	b29a      	uxth	r2, r3
 8003768:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800376a:	801a      	strh	r2, [r3, #0]
 800376c:	e02d      	b.n	80037ca <HAL_PCD_EP_DB_Transmit+0x38e>
 800376e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003770:	085b      	lsrs	r3, r3, #1
 8003772:	64bb      	str	r3, [r7, #72]	; 0x48
 8003774:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003776:	f003 0301 	and.w	r3, r3, #1
 800377a:	2b00      	cmp	r3, #0
 800377c:	d002      	beq.n	8003784 <HAL_PCD_EP_DB_Transmit+0x348>
 800377e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003780:	3301      	adds	r3, #1
 8003782:	64bb      	str	r3, [r7, #72]	; 0x48
 8003784:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003786:	b29b      	uxth	r3, r3
 8003788:	029b      	lsls	r3, r3, #10
 800378a:	b29a      	uxth	r2, r3
 800378c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800378e:	801a      	strh	r2, [r3, #0]
 8003790:	e01b      	b.n	80037ca <HAL_PCD_EP_DB_Transmit+0x38e>
 8003792:	68bb      	ldr	r3, [r7, #8]
 8003794:	785b      	ldrb	r3, [r3, #1]
 8003796:	2b01      	cmp	r3, #1
 8003798:	d117      	bne.n	80037ca <HAL_PCD_EP_DB_Transmit+0x38e>
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	643b      	str	r3, [r7, #64]	; 0x40
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80037a8:	b29b      	uxth	r3, r3
 80037aa:	461a      	mov	r2, r3
 80037ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80037ae:	4413      	add	r3, r2
 80037b0:	643b      	str	r3, [r7, #64]	; 0x40
 80037b2:	68bb      	ldr	r3, [r7, #8]
 80037b4:	781b      	ldrb	r3, [r3, #0]
 80037b6:	00da      	lsls	r2, r3, #3
 80037b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80037ba:	4413      	add	r3, r2
 80037bc:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80037c0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80037c2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80037c4:	b29a      	uxth	r2, r3
 80037c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80037c8:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	6818      	ldr	r0, [r3, #0]
 80037ce:	68bb      	ldr	r3, [r7, #8]
 80037d0:	6959      	ldr	r1, [r3, #20]
 80037d2:	68bb      	ldr	r3, [r7, #8]
 80037d4:	891a      	ldrh	r2, [r3, #8]
 80037d6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80037d8:	b29b      	uxth	r3, r3
 80037da:	f004 fa4c 	bl	8007c76 <USB_WritePMA>
 80037de:	e1ce      	b.n	8003b7e <HAL_PCD_EP_DB_Transmit+0x742>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80037e8:	b29b      	uxth	r3, r3
 80037ea:	461a      	mov	r2, r3
 80037ec:	68bb      	ldr	r3, [r7, #8]
 80037ee:	781b      	ldrb	r3, [r3, #0]
 80037f0:	00db      	lsls	r3, r3, #3
 80037f2:	4413      	add	r3, r2
 80037f4:	68fa      	ldr	r2, [r7, #12]
 80037f6:	6812      	ldr	r2, [r2, #0]
 80037f8:	4413      	add	r3, r2
 80037fa:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80037fe:	881b      	ldrh	r3, [r3, #0]
 8003800:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003804:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxPctSize)
 8003808:	68bb      	ldr	r3, [r7, #8]
 800380a:	699a      	ldr	r2, [r3, #24]
 800380c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003810:	429a      	cmp	r2, r3
 8003812:	d307      	bcc.n	8003824 <HAL_PCD_EP_DB_Transmit+0x3e8>
    {
      ep->xfer_len -= TxPctSize;
 8003814:	68bb      	ldr	r3, [r7, #8]
 8003816:	699a      	ldr	r2, [r3, #24]
 8003818:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800381c:	1ad2      	subs	r2, r2, r3
 800381e:	68bb      	ldr	r3, [r7, #8]
 8003820:	619a      	str	r2, [r3, #24]
 8003822:	e002      	b.n	800382a <HAL_PCD_EP_DB_Transmit+0x3ee>
    }
    else
    {
      ep->xfer_len = 0U;
 8003824:	68bb      	ldr	r3, [r7, #8]
 8003826:	2200      	movs	r2, #0
 8003828:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800382a:	68bb      	ldr	r3, [r7, #8]
 800382c:	699b      	ldr	r3, [r3, #24]
 800382e:	2b00      	cmp	r3, #0
 8003830:	f040 80c4 	bne.w	80039bc <HAL_PCD_EP_DB_Transmit+0x580>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003834:	68bb      	ldr	r3, [r7, #8]
 8003836:	785b      	ldrb	r3, [r3, #1]
 8003838:	2b00      	cmp	r3, #0
 800383a:	d126      	bne.n	800388a <HAL_PCD_EP_DB_Transmit+0x44e>
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	66bb      	str	r3, [r7, #104]	; 0x68
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800384a:	b29b      	uxth	r3, r3
 800384c:	461a      	mov	r2, r3
 800384e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003850:	4413      	add	r3, r2
 8003852:	66bb      	str	r3, [r7, #104]	; 0x68
 8003854:	68bb      	ldr	r3, [r7, #8]
 8003856:	781b      	ldrb	r3, [r3, #0]
 8003858:	00da      	lsls	r2, r3, #3
 800385a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800385c:	4413      	add	r3, r2
 800385e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003862:	667b      	str	r3, [r7, #100]	; 0x64
 8003864:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003866:	881b      	ldrh	r3, [r3, #0]
 8003868:	b29b      	uxth	r3, r3
 800386a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800386e:	b29a      	uxth	r2, r3
 8003870:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003872:	801a      	strh	r2, [r3, #0]
 8003874:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003876:	881b      	ldrh	r3, [r3, #0]
 8003878:	b29b      	uxth	r3, r3
 800387a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800387e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003882:	b29a      	uxth	r2, r3
 8003884:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003886:	801a      	strh	r2, [r3, #0]
 8003888:	e01a      	b.n	80038c0 <HAL_PCD_EP_DB_Transmit+0x484>
 800388a:	68bb      	ldr	r3, [r7, #8]
 800388c:	785b      	ldrb	r3, [r3, #1]
 800388e:	2b01      	cmp	r3, #1
 8003890:	d116      	bne.n	80038c0 <HAL_PCD_EP_DB_Transmit+0x484>
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	673b      	str	r3, [r7, #112]	; 0x70
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80038a0:	b29b      	uxth	r3, r3
 80038a2:	461a      	mov	r2, r3
 80038a4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80038a6:	4413      	add	r3, r2
 80038a8:	673b      	str	r3, [r7, #112]	; 0x70
 80038aa:	68bb      	ldr	r3, [r7, #8]
 80038ac:	781b      	ldrb	r3, [r3, #0]
 80038ae:	00da      	lsls	r2, r3, #3
 80038b0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80038b2:	4413      	add	r3, r2
 80038b4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80038b8:	66fb      	str	r3, [r7, #108]	; 0x6c
 80038ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80038bc:	2200      	movs	r2, #0
 80038be:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	67fb      	str	r3, [r7, #124]	; 0x7c
 80038c6:	68bb      	ldr	r3, [r7, #8]
 80038c8:	785b      	ldrb	r3, [r3, #1]
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d12f      	bne.n	800392e <HAL_PCD_EP_DB_Transmit+0x4f2>
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80038de:	b29b      	uxth	r3, r3
 80038e0:	461a      	mov	r2, r3
 80038e2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80038e6:	4413      	add	r3, r2
 80038e8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80038ec:	68bb      	ldr	r3, [r7, #8]
 80038ee:	781b      	ldrb	r3, [r3, #0]
 80038f0:	00da      	lsls	r2, r3, #3
 80038f2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80038f6:	4413      	add	r3, r2
 80038f8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80038fc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003900:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003904:	881b      	ldrh	r3, [r3, #0]
 8003906:	b29b      	uxth	r3, r3
 8003908:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800390c:	b29a      	uxth	r2, r3
 800390e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003912:	801a      	strh	r2, [r3, #0]
 8003914:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003918:	881b      	ldrh	r3, [r3, #0]
 800391a:	b29b      	uxth	r3, r3
 800391c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003920:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003924:	b29a      	uxth	r2, r3
 8003926:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800392a:	801a      	strh	r2, [r3, #0]
 800392c:	e017      	b.n	800395e <HAL_PCD_EP_DB_Transmit+0x522>
 800392e:	68bb      	ldr	r3, [r7, #8]
 8003930:	785b      	ldrb	r3, [r3, #1]
 8003932:	2b01      	cmp	r3, #1
 8003934:	d113      	bne.n	800395e <HAL_PCD_EP_DB_Transmit+0x522>
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800393e:	b29b      	uxth	r3, r3
 8003940:	461a      	mov	r2, r3
 8003942:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003944:	4413      	add	r3, r2
 8003946:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003948:	68bb      	ldr	r3, [r7, #8]
 800394a:	781b      	ldrb	r3, [r3, #0]
 800394c:	00da      	lsls	r2, r3, #3
 800394e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003950:	4413      	add	r3, r2
 8003952:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003956:	67bb      	str	r3, [r7, #120]	; 0x78
 8003958:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800395a:	2200      	movs	r2, #0
 800395c:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800395e:	68bb      	ldr	r3, [r7, #8]
 8003960:	781b      	ldrb	r3, [r3, #0]
 8003962:	4619      	mov	r1, r3
 8003964:	68f8      	ldr	r0, [r7, #12]
 8003966:	f006 f8e6 	bl	8009b36 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800396a:	88fb      	ldrh	r3, [r7, #6]
 800396c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003970:	2b00      	cmp	r3, #0
 8003972:	f040 8104 	bne.w	8003b7e <HAL_PCD_EP_DB_Transmit+0x742>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	461a      	mov	r2, r3
 800397c:	68bb      	ldr	r3, [r7, #8]
 800397e:	781b      	ldrb	r3, [r3, #0]
 8003980:	009b      	lsls	r3, r3, #2
 8003982:	4413      	add	r3, r2
 8003984:	881b      	ldrh	r3, [r3, #0]
 8003986:	b29b      	uxth	r3, r3
 8003988:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800398c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003990:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	461a      	mov	r2, r3
 800399a:	68bb      	ldr	r3, [r7, #8]
 800399c:	781b      	ldrb	r3, [r3, #0]
 800399e:	009b      	lsls	r3, r3, #2
 80039a0:	441a      	add	r2, r3
 80039a2:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80039a6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80039aa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80039ae:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80039b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80039b6:	b29b      	uxth	r3, r3
 80039b8:	8013      	strh	r3, [r2, #0]
 80039ba:	e0e0      	b.n	8003b7e <HAL_PCD_EP_DB_Transmit+0x742>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80039bc:	88fb      	ldrh	r3, [r7, #6]
 80039be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d121      	bne.n	8003a0a <HAL_PCD_EP_DB_Transmit+0x5ce>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	461a      	mov	r2, r3
 80039cc:	68bb      	ldr	r3, [r7, #8]
 80039ce:	781b      	ldrb	r3, [r3, #0]
 80039d0:	009b      	lsls	r3, r3, #2
 80039d2:	4413      	add	r3, r2
 80039d4:	881b      	ldrh	r3, [r3, #0]
 80039d6:	b29b      	uxth	r3, r3
 80039d8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80039dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80039e0:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	461a      	mov	r2, r3
 80039ea:	68bb      	ldr	r3, [r7, #8]
 80039ec:	781b      	ldrb	r3, [r3, #0]
 80039ee:	009b      	lsls	r3, r3, #2
 80039f0:	441a      	add	r2, r3
 80039f2:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80039f6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80039fa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80039fe:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003a02:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003a06:	b29b      	uxth	r3, r3
 8003a08:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8003a0a:	68bb      	ldr	r3, [r7, #8]
 8003a0c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003a10:	2b01      	cmp	r3, #1
 8003a12:	f040 80b4 	bne.w	8003b7e <HAL_PCD_EP_DB_Transmit+0x742>
      {
        ep->xfer_buff += TxPctSize;
 8003a16:	68bb      	ldr	r3, [r7, #8]
 8003a18:	695a      	ldr	r2, [r3, #20]
 8003a1a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003a1e:	441a      	add	r2, r3
 8003a20:	68bb      	ldr	r3, [r7, #8]
 8003a22:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8003a24:	68bb      	ldr	r3, [r7, #8]
 8003a26:	69da      	ldr	r2, [r3, #28]
 8003a28:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003a2c:	441a      	add	r2, r3
 8003a2e:	68bb      	ldr	r3, [r7, #8]
 8003a30:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8003a32:	68bb      	ldr	r3, [r7, #8]
 8003a34:	6a1a      	ldr	r2, [r3, #32]
 8003a36:	68bb      	ldr	r3, [r7, #8]
 8003a38:	691b      	ldr	r3, [r3, #16]
 8003a3a:	429a      	cmp	r2, r3
 8003a3c:	d309      	bcc.n	8003a52 <HAL_PCD_EP_DB_Transmit+0x616>
        {
          len = ep->maxpacket;
 8003a3e:	68bb      	ldr	r3, [r7, #8]
 8003a40:	691b      	ldr	r3, [r3, #16]
 8003a42:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8003a44:	68bb      	ldr	r3, [r7, #8]
 8003a46:	6a1a      	ldr	r2, [r3, #32]
 8003a48:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003a4a:	1ad2      	subs	r2, r2, r3
 8003a4c:	68bb      	ldr	r3, [r7, #8]
 8003a4e:	621a      	str	r2, [r3, #32]
 8003a50:	e015      	b.n	8003a7e <HAL_PCD_EP_DB_Transmit+0x642>
        }
        else if (ep->xfer_len_db == 0U)
 8003a52:	68bb      	ldr	r3, [r7, #8]
 8003a54:	6a1b      	ldr	r3, [r3, #32]
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d107      	bne.n	8003a6a <HAL_PCD_EP_DB_Transmit+0x62e>
        {
          len = TxPctSize;
 8003a5a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003a5e:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8003a60:	68bb      	ldr	r3, [r7, #8]
 8003a62:	2200      	movs	r2, #0
 8003a64:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8003a68:	e009      	b.n	8003a7e <HAL_PCD_EP_DB_Transmit+0x642>
        }
        else
        {
          len = ep->xfer_len_db;
 8003a6a:	68bb      	ldr	r3, [r7, #8]
 8003a6c:	6a1b      	ldr	r3, [r3, #32]
 8003a6e:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8003a70:	68bb      	ldr	r3, [r7, #8]
 8003a72:	2200      	movs	r2, #0
 8003a74:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8003a76:	68bb      	ldr	r3, [r7, #8]
 8003a78:	2200      	movs	r2, #0
 8003a7a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	663b      	str	r3, [r7, #96]	; 0x60
 8003a84:	68bb      	ldr	r3, [r7, #8]
 8003a86:	785b      	ldrb	r3, [r3, #1]
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d155      	bne.n	8003b38 <HAL_PCD_EP_DB_Transmit+0x6fc>
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	65bb      	str	r3, [r7, #88]	; 0x58
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003a9a:	b29b      	uxth	r3, r3
 8003a9c:	461a      	mov	r2, r3
 8003a9e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003aa0:	4413      	add	r3, r2
 8003aa2:	65bb      	str	r3, [r7, #88]	; 0x58
 8003aa4:	68bb      	ldr	r3, [r7, #8]
 8003aa6:	781b      	ldrb	r3, [r3, #0]
 8003aa8:	00da      	lsls	r2, r3, #3
 8003aaa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003aac:	4413      	add	r3, r2
 8003aae:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003ab2:	657b      	str	r3, [r7, #84]	; 0x54
 8003ab4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003ab6:	2b3e      	cmp	r3, #62	; 0x3e
 8003ab8:	d916      	bls.n	8003ae8 <HAL_PCD_EP_DB_Transmit+0x6ac>
 8003aba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003abc:	095b      	lsrs	r3, r3, #5
 8003abe:	677b      	str	r3, [r7, #116]	; 0x74
 8003ac0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003ac2:	f003 031f 	and.w	r3, r3, #31
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d102      	bne.n	8003ad0 <HAL_PCD_EP_DB_Transmit+0x694>
 8003aca:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003acc:	3b01      	subs	r3, #1
 8003ace:	677b      	str	r3, [r7, #116]	; 0x74
 8003ad0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003ad2:	b29b      	uxth	r3, r3
 8003ad4:	029b      	lsls	r3, r3, #10
 8003ad6:	b29b      	uxth	r3, r3
 8003ad8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003adc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003ae0:	b29a      	uxth	r2, r3
 8003ae2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003ae4:	801a      	strh	r2, [r3, #0]
 8003ae6:	e040      	b.n	8003b6a <HAL_PCD_EP_DB_Transmit+0x72e>
 8003ae8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d112      	bne.n	8003b14 <HAL_PCD_EP_DB_Transmit+0x6d8>
 8003aee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003af0:	881b      	ldrh	r3, [r3, #0]
 8003af2:	b29b      	uxth	r3, r3
 8003af4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003af8:	b29a      	uxth	r2, r3
 8003afa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003afc:	801a      	strh	r2, [r3, #0]
 8003afe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003b00:	881b      	ldrh	r3, [r3, #0]
 8003b02:	b29b      	uxth	r3, r3
 8003b04:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003b08:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003b0c:	b29a      	uxth	r2, r3
 8003b0e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003b10:	801a      	strh	r2, [r3, #0]
 8003b12:	e02a      	b.n	8003b6a <HAL_PCD_EP_DB_Transmit+0x72e>
 8003b14:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003b16:	085b      	lsrs	r3, r3, #1
 8003b18:	677b      	str	r3, [r7, #116]	; 0x74
 8003b1a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003b1c:	f003 0301 	and.w	r3, r3, #1
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d002      	beq.n	8003b2a <HAL_PCD_EP_DB_Transmit+0x6ee>
 8003b24:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003b26:	3301      	adds	r3, #1
 8003b28:	677b      	str	r3, [r7, #116]	; 0x74
 8003b2a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003b2c:	b29b      	uxth	r3, r3
 8003b2e:	029b      	lsls	r3, r3, #10
 8003b30:	b29a      	uxth	r2, r3
 8003b32:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003b34:	801a      	strh	r2, [r3, #0]
 8003b36:	e018      	b.n	8003b6a <HAL_PCD_EP_DB_Transmit+0x72e>
 8003b38:	68bb      	ldr	r3, [r7, #8]
 8003b3a:	785b      	ldrb	r3, [r3, #1]
 8003b3c:	2b01      	cmp	r3, #1
 8003b3e:	d114      	bne.n	8003b6a <HAL_PCD_EP_DB_Transmit+0x72e>
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003b48:	b29b      	uxth	r3, r3
 8003b4a:	461a      	mov	r2, r3
 8003b4c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003b4e:	4413      	add	r3, r2
 8003b50:	663b      	str	r3, [r7, #96]	; 0x60
 8003b52:	68bb      	ldr	r3, [r7, #8]
 8003b54:	781b      	ldrb	r3, [r3, #0]
 8003b56:	00da      	lsls	r2, r3, #3
 8003b58:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003b5a:	4413      	add	r3, r2
 8003b5c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003b60:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003b62:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003b64:	b29a      	uxth	r2, r3
 8003b66:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003b68:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	6818      	ldr	r0, [r3, #0]
 8003b6e:	68bb      	ldr	r3, [r7, #8]
 8003b70:	6959      	ldr	r1, [r3, #20]
 8003b72:	68bb      	ldr	r3, [r7, #8]
 8003b74:	895a      	ldrh	r2, [r3, #10]
 8003b76:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003b78:	b29b      	uxth	r3, r3
 8003b7a:	f004 f87c 	bl	8007c76 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	461a      	mov	r2, r3
 8003b84:	68bb      	ldr	r3, [r7, #8]
 8003b86:	781b      	ldrb	r3, [r3, #0]
 8003b88:	009b      	lsls	r3, r3, #2
 8003b8a:	4413      	add	r3, r2
 8003b8c:	881b      	ldrh	r3, [r3, #0]
 8003b8e:	b29b      	uxth	r3, r3
 8003b90:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003b94:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003b98:	823b      	strh	r3, [r7, #16]
 8003b9a:	8a3b      	ldrh	r3, [r7, #16]
 8003b9c:	f083 0310 	eor.w	r3, r3, #16
 8003ba0:	823b      	strh	r3, [r7, #16]
 8003ba2:	8a3b      	ldrh	r3, [r7, #16]
 8003ba4:	f083 0320 	eor.w	r3, r3, #32
 8003ba8:	823b      	strh	r3, [r7, #16]
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	461a      	mov	r2, r3
 8003bb0:	68bb      	ldr	r3, [r7, #8]
 8003bb2:	781b      	ldrb	r3, [r3, #0]
 8003bb4:	009b      	lsls	r3, r3, #2
 8003bb6:	441a      	add	r2, r3
 8003bb8:	8a3b      	ldrh	r3, [r7, #16]
 8003bba:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003bbe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003bc2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003bc6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003bca:	b29b      	uxth	r3, r3
 8003bcc:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8003bce:	2300      	movs	r3, #0
}
 8003bd0:	4618      	mov	r0, r3
 8003bd2:	3788      	adds	r7, #136	; 0x88
 8003bd4:	46bd      	mov	sp, r7
 8003bd6:	bd80      	pop	{r7, pc}

08003bd8 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8003bd8:	b480      	push	{r7}
 8003bda:	b087      	sub	sp, #28
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	60f8      	str	r0, [r7, #12]
 8003be0:	607b      	str	r3, [r7, #4]
 8003be2:	460b      	mov	r3, r1
 8003be4:	817b      	strh	r3, [r7, #10]
 8003be6:	4613      	mov	r3, r2
 8003be8:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8003bea:	897b      	ldrh	r3, [r7, #10]
 8003bec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003bf0:	b29b      	uxth	r3, r3
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d00b      	beq.n	8003c0e <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003bf6:	897b      	ldrh	r3, [r7, #10]
 8003bf8:	f003 0307 	and.w	r3, r3, #7
 8003bfc:	1c5a      	adds	r2, r3, #1
 8003bfe:	4613      	mov	r3, r2
 8003c00:	009b      	lsls	r3, r3, #2
 8003c02:	4413      	add	r3, r2
 8003c04:	00db      	lsls	r3, r3, #3
 8003c06:	68fa      	ldr	r2, [r7, #12]
 8003c08:	4413      	add	r3, r2
 8003c0a:	617b      	str	r3, [r7, #20]
 8003c0c:	e009      	b.n	8003c22 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003c0e:	897a      	ldrh	r2, [r7, #10]
 8003c10:	4613      	mov	r3, r2
 8003c12:	009b      	lsls	r3, r3, #2
 8003c14:	4413      	add	r3, r2
 8003c16:	00db      	lsls	r3, r3, #3
 8003c18:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003c1c:	68fa      	ldr	r2, [r7, #12]
 8003c1e:	4413      	add	r3, r2
 8003c20:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8003c22:	893b      	ldrh	r3, [r7, #8]
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d107      	bne.n	8003c38 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8003c28:	697b      	ldr	r3, [r7, #20]
 8003c2a:	2200      	movs	r2, #0
 8003c2c:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	b29a      	uxth	r2, r3
 8003c32:	697b      	ldr	r3, [r7, #20]
 8003c34:	80da      	strh	r2, [r3, #6]
 8003c36:	e00b      	b.n	8003c50 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8003c38:	697b      	ldr	r3, [r7, #20]
 8003c3a:	2201      	movs	r2, #1
 8003c3c:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	b29a      	uxth	r2, r3
 8003c42:	697b      	ldr	r3, [r7, #20]
 8003c44:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	0c1b      	lsrs	r3, r3, #16
 8003c4a:	b29a      	uxth	r2, r3
 8003c4c:	697b      	ldr	r3, [r7, #20]
 8003c4e:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8003c50:	2300      	movs	r3, #0
}
 8003c52:	4618      	mov	r0, r3
 8003c54:	371c      	adds	r7, #28
 8003c56:	46bd      	mov	sp, r7
 8003c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c5c:	4770      	bx	lr

08003c5e <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003c5e:	b480      	push	{r7}
 8003c60:	b085      	sub	sp, #20
 8003c62:	af00      	add	r7, sp, #0
 8003c64:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	2201      	movs	r2, #1
 8003c70:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
  hpcd->LPM_State = LPM_L0;
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	2200      	movs	r2, #0
 8003c78:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8003c82:	b29b      	uxth	r3, r3
 8003c84:	f043 0301 	orr.w	r3, r3, #1
 8003c88:	b29a      	uxth	r2, r3
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8003c96:	b29b      	uxth	r3, r3
 8003c98:	f043 0302 	orr.w	r3, r3, #2
 8003c9c:	b29a      	uxth	r2, r3
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 8003ca4:	2300      	movs	r3, #0
}
 8003ca6:	4618      	mov	r0, r3
 8003ca8:	3714      	adds	r7, #20
 8003caa:	46bd      	mov	sp, r7
 8003cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb0:	4770      	bx	lr
	...

08003cb4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003cb4:	b480      	push	{r7}
 8003cb6:	b085      	sub	sp, #20
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d141      	bne.n	8003d46 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003cc2:	4b4b      	ldr	r3, [pc, #300]	; (8003df0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003cca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003cce:	d131      	bne.n	8003d34 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003cd0:	4b47      	ldr	r3, [pc, #284]	; (8003df0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003cd2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003cd6:	4a46      	ldr	r2, [pc, #280]	; (8003df0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003cd8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003cdc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003ce0:	4b43      	ldr	r3, [pc, #268]	; (8003df0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003ce8:	4a41      	ldr	r2, [pc, #260]	; (8003df0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003cea:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003cee:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003cf0:	4b40      	ldr	r3, [pc, #256]	; (8003df4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	2232      	movs	r2, #50	; 0x32
 8003cf6:	fb02 f303 	mul.w	r3, r2, r3
 8003cfa:	4a3f      	ldr	r2, [pc, #252]	; (8003df8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003cfc:	fba2 2303 	umull	r2, r3, r2, r3
 8003d00:	0c9b      	lsrs	r3, r3, #18
 8003d02:	3301      	adds	r3, #1
 8003d04:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003d06:	e002      	b.n	8003d0e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	3b01      	subs	r3, #1
 8003d0c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003d0e:	4b38      	ldr	r3, [pc, #224]	; (8003df0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d10:	695b      	ldr	r3, [r3, #20]
 8003d12:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d16:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d1a:	d102      	bne.n	8003d22 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d1f2      	bne.n	8003d08 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003d22:	4b33      	ldr	r3, [pc, #204]	; (8003df0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d24:	695b      	ldr	r3, [r3, #20]
 8003d26:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d2a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d2e:	d158      	bne.n	8003de2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003d30:	2303      	movs	r3, #3
 8003d32:	e057      	b.n	8003de4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003d34:	4b2e      	ldr	r3, [pc, #184]	; (8003df0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d36:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003d3a:	4a2d      	ldr	r2, [pc, #180]	; (8003df0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d3c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003d40:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003d44:	e04d      	b.n	8003de2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003d4c:	d141      	bne.n	8003dd2 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003d4e:	4b28      	ldr	r3, [pc, #160]	; (8003df0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003d56:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d5a:	d131      	bne.n	8003dc0 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003d5c:	4b24      	ldr	r3, [pc, #144]	; (8003df0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d5e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003d62:	4a23      	ldr	r2, [pc, #140]	; (8003df0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d64:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d68:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003d6c:	4b20      	ldr	r3, [pc, #128]	; (8003df0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003d74:	4a1e      	ldr	r2, [pc, #120]	; (8003df0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d76:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003d7a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003d7c:	4b1d      	ldr	r3, [pc, #116]	; (8003df4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	2232      	movs	r2, #50	; 0x32
 8003d82:	fb02 f303 	mul.w	r3, r2, r3
 8003d86:	4a1c      	ldr	r2, [pc, #112]	; (8003df8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003d88:	fba2 2303 	umull	r2, r3, r2, r3
 8003d8c:	0c9b      	lsrs	r3, r3, #18
 8003d8e:	3301      	adds	r3, #1
 8003d90:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003d92:	e002      	b.n	8003d9a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	3b01      	subs	r3, #1
 8003d98:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003d9a:	4b15      	ldr	r3, [pc, #84]	; (8003df0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d9c:	695b      	ldr	r3, [r3, #20]
 8003d9e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003da2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003da6:	d102      	bne.n	8003dae <HAL_PWREx_ControlVoltageScaling+0xfa>
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d1f2      	bne.n	8003d94 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003dae:	4b10      	ldr	r3, [pc, #64]	; (8003df0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003db0:	695b      	ldr	r3, [r3, #20]
 8003db2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003db6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003dba:	d112      	bne.n	8003de2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003dbc:	2303      	movs	r3, #3
 8003dbe:	e011      	b.n	8003de4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003dc0:	4b0b      	ldr	r3, [pc, #44]	; (8003df0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003dc2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003dc6:	4a0a      	ldr	r2, [pc, #40]	; (8003df0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003dc8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003dcc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003dd0:	e007      	b.n	8003de2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003dd2:	4b07      	ldr	r3, [pc, #28]	; (8003df0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003dda:	4a05      	ldr	r2, [pc, #20]	; (8003df0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003ddc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003de0:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8003de2:	2300      	movs	r3, #0
}
 8003de4:	4618      	mov	r0, r3
 8003de6:	3714      	adds	r7, #20
 8003de8:	46bd      	mov	sp, r7
 8003dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dee:	4770      	bx	lr
 8003df0:	40007000 	.word	0x40007000
 8003df4:	20000000 	.word	0x20000000
 8003df8:	431bde83 	.word	0x431bde83

08003dfc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003dfc:	b580      	push	{r7, lr}
 8003dfe:	b088      	sub	sp, #32
 8003e00:	af00      	add	r7, sp, #0
 8003e02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d101      	bne.n	8003e0e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003e0a:	2301      	movs	r3, #1
 8003e0c:	e306      	b.n	800441c <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	f003 0301 	and.w	r3, r3, #1
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d075      	beq.n	8003f06 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003e1a:	4b97      	ldr	r3, [pc, #604]	; (8004078 <HAL_RCC_OscConfig+0x27c>)
 8003e1c:	689b      	ldr	r3, [r3, #8]
 8003e1e:	f003 030c 	and.w	r3, r3, #12
 8003e22:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003e24:	4b94      	ldr	r3, [pc, #592]	; (8004078 <HAL_RCC_OscConfig+0x27c>)
 8003e26:	68db      	ldr	r3, [r3, #12]
 8003e28:	f003 0303 	and.w	r3, r3, #3
 8003e2c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8003e2e:	69bb      	ldr	r3, [r7, #24]
 8003e30:	2b0c      	cmp	r3, #12
 8003e32:	d102      	bne.n	8003e3a <HAL_RCC_OscConfig+0x3e>
 8003e34:	697b      	ldr	r3, [r7, #20]
 8003e36:	2b03      	cmp	r3, #3
 8003e38:	d002      	beq.n	8003e40 <HAL_RCC_OscConfig+0x44>
 8003e3a:	69bb      	ldr	r3, [r7, #24]
 8003e3c:	2b08      	cmp	r3, #8
 8003e3e:	d10b      	bne.n	8003e58 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e40:	4b8d      	ldr	r3, [pc, #564]	; (8004078 <HAL_RCC_OscConfig+0x27c>)
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d05b      	beq.n	8003f04 <HAL_RCC_OscConfig+0x108>
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	685b      	ldr	r3, [r3, #4]
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d157      	bne.n	8003f04 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003e54:	2301      	movs	r3, #1
 8003e56:	e2e1      	b.n	800441c <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	685b      	ldr	r3, [r3, #4]
 8003e5c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e60:	d106      	bne.n	8003e70 <HAL_RCC_OscConfig+0x74>
 8003e62:	4b85      	ldr	r3, [pc, #532]	; (8004078 <HAL_RCC_OscConfig+0x27c>)
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	4a84      	ldr	r2, [pc, #528]	; (8004078 <HAL_RCC_OscConfig+0x27c>)
 8003e68:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e6c:	6013      	str	r3, [r2, #0]
 8003e6e:	e01d      	b.n	8003eac <HAL_RCC_OscConfig+0xb0>
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	685b      	ldr	r3, [r3, #4]
 8003e74:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003e78:	d10c      	bne.n	8003e94 <HAL_RCC_OscConfig+0x98>
 8003e7a:	4b7f      	ldr	r3, [pc, #508]	; (8004078 <HAL_RCC_OscConfig+0x27c>)
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	4a7e      	ldr	r2, [pc, #504]	; (8004078 <HAL_RCC_OscConfig+0x27c>)
 8003e80:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003e84:	6013      	str	r3, [r2, #0]
 8003e86:	4b7c      	ldr	r3, [pc, #496]	; (8004078 <HAL_RCC_OscConfig+0x27c>)
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	4a7b      	ldr	r2, [pc, #492]	; (8004078 <HAL_RCC_OscConfig+0x27c>)
 8003e8c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e90:	6013      	str	r3, [r2, #0]
 8003e92:	e00b      	b.n	8003eac <HAL_RCC_OscConfig+0xb0>
 8003e94:	4b78      	ldr	r3, [pc, #480]	; (8004078 <HAL_RCC_OscConfig+0x27c>)
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	4a77      	ldr	r2, [pc, #476]	; (8004078 <HAL_RCC_OscConfig+0x27c>)
 8003e9a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003e9e:	6013      	str	r3, [r2, #0]
 8003ea0:	4b75      	ldr	r3, [pc, #468]	; (8004078 <HAL_RCC_OscConfig+0x27c>)
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	4a74      	ldr	r2, [pc, #464]	; (8004078 <HAL_RCC_OscConfig+0x27c>)
 8003ea6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003eaa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	685b      	ldr	r3, [r3, #4]
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d013      	beq.n	8003edc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003eb4:	f7fd f860 	bl	8000f78 <HAL_GetTick>
 8003eb8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003eba:	e008      	b.n	8003ece <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003ebc:	f7fd f85c 	bl	8000f78 <HAL_GetTick>
 8003ec0:	4602      	mov	r2, r0
 8003ec2:	693b      	ldr	r3, [r7, #16]
 8003ec4:	1ad3      	subs	r3, r2, r3
 8003ec6:	2b64      	cmp	r3, #100	; 0x64
 8003ec8:	d901      	bls.n	8003ece <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003eca:	2303      	movs	r3, #3
 8003ecc:	e2a6      	b.n	800441c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003ece:	4b6a      	ldr	r3, [pc, #424]	; (8004078 <HAL_RCC_OscConfig+0x27c>)
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d0f0      	beq.n	8003ebc <HAL_RCC_OscConfig+0xc0>
 8003eda:	e014      	b.n	8003f06 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003edc:	f7fd f84c 	bl	8000f78 <HAL_GetTick>
 8003ee0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003ee2:	e008      	b.n	8003ef6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003ee4:	f7fd f848 	bl	8000f78 <HAL_GetTick>
 8003ee8:	4602      	mov	r2, r0
 8003eea:	693b      	ldr	r3, [r7, #16]
 8003eec:	1ad3      	subs	r3, r2, r3
 8003eee:	2b64      	cmp	r3, #100	; 0x64
 8003ef0:	d901      	bls.n	8003ef6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003ef2:	2303      	movs	r3, #3
 8003ef4:	e292      	b.n	800441c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003ef6:	4b60      	ldr	r3, [pc, #384]	; (8004078 <HAL_RCC_OscConfig+0x27c>)
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d1f0      	bne.n	8003ee4 <HAL_RCC_OscConfig+0xe8>
 8003f02:	e000      	b.n	8003f06 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f04:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	f003 0302 	and.w	r3, r3, #2
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d075      	beq.n	8003ffe <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003f12:	4b59      	ldr	r3, [pc, #356]	; (8004078 <HAL_RCC_OscConfig+0x27c>)
 8003f14:	689b      	ldr	r3, [r3, #8]
 8003f16:	f003 030c 	and.w	r3, r3, #12
 8003f1a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003f1c:	4b56      	ldr	r3, [pc, #344]	; (8004078 <HAL_RCC_OscConfig+0x27c>)
 8003f1e:	68db      	ldr	r3, [r3, #12]
 8003f20:	f003 0303 	and.w	r3, r3, #3
 8003f24:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8003f26:	69bb      	ldr	r3, [r7, #24]
 8003f28:	2b0c      	cmp	r3, #12
 8003f2a:	d102      	bne.n	8003f32 <HAL_RCC_OscConfig+0x136>
 8003f2c:	697b      	ldr	r3, [r7, #20]
 8003f2e:	2b02      	cmp	r3, #2
 8003f30:	d002      	beq.n	8003f38 <HAL_RCC_OscConfig+0x13c>
 8003f32:	69bb      	ldr	r3, [r7, #24]
 8003f34:	2b04      	cmp	r3, #4
 8003f36:	d11f      	bne.n	8003f78 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003f38:	4b4f      	ldr	r3, [pc, #316]	; (8004078 <HAL_RCC_OscConfig+0x27c>)
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d005      	beq.n	8003f50 <HAL_RCC_OscConfig+0x154>
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	68db      	ldr	r3, [r3, #12]
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d101      	bne.n	8003f50 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8003f4c:	2301      	movs	r3, #1
 8003f4e:	e265      	b.n	800441c <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f50:	4b49      	ldr	r3, [pc, #292]	; (8004078 <HAL_RCC_OscConfig+0x27c>)
 8003f52:	685b      	ldr	r3, [r3, #4]
 8003f54:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	691b      	ldr	r3, [r3, #16]
 8003f5c:	061b      	lsls	r3, r3, #24
 8003f5e:	4946      	ldr	r1, [pc, #280]	; (8004078 <HAL_RCC_OscConfig+0x27c>)
 8003f60:	4313      	orrs	r3, r2
 8003f62:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003f64:	4b45      	ldr	r3, [pc, #276]	; (800407c <HAL_RCC_OscConfig+0x280>)
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	4618      	mov	r0, r3
 8003f6a:	f7fc ffb9 	bl	8000ee0 <HAL_InitTick>
 8003f6e:	4603      	mov	r3, r0
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d043      	beq.n	8003ffc <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8003f74:	2301      	movs	r3, #1
 8003f76:	e251      	b.n	800441c <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	68db      	ldr	r3, [r3, #12]
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d023      	beq.n	8003fc8 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003f80:	4b3d      	ldr	r3, [pc, #244]	; (8004078 <HAL_RCC_OscConfig+0x27c>)
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	4a3c      	ldr	r2, [pc, #240]	; (8004078 <HAL_RCC_OscConfig+0x27c>)
 8003f86:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f8a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f8c:	f7fc fff4 	bl	8000f78 <HAL_GetTick>
 8003f90:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003f92:	e008      	b.n	8003fa6 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003f94:	f7fc fff0 	bl	8000f78 <HAL_GetTick>
 8003f98:	4602      	mov	r2, r0
 8003f9a:	693b      	ldr	r3, [r7, #16]
 8003f9c:	1ad3      	subs	r3, r2, r3
 8003f9e:	2b02      	cmp	r3, #2
 8003fa0:	d901      	bls.n	8003fa6 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8003fa2:	2303      	movs	r3, #3
 8003fa4:	e23a      	b.n	800441c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003fa6:	4b34      	ldr	r3, [pc, #208]	; (8004078 <HAL_RCC_OscConfig+0x27c>)
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d0f0      	beq.n	8003f94 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003fb2:	4b31      	ldr	r3, [pc, #196]	; (8004078 <HAL_RCC_OscConfig+0x27c>)
 8003fb4:	685b      	ldr	r3, [r3, #4]
 8003fb6:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	691b      	ldr	r3, [r3, #16]
 8003fbe:	061b      	lsls	r3, r3, #24
 8003fc0:	492d      	ldr	r1, [pc, #180]	; (8004078 <HAL_RCC_OscConfig+0x27c>)
 8003fc2:	4313      	orrs	r3, r2
 8003fc4:	604b      	str	r3, [r1, #4]
 8003fc6:	e01a      	b.n	8003ffe <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003fc8:	4b2b      	ldr	r3, [pc, #172]	; (8004078 <HAL_RCC_OscConfig+0x27c>)
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	4a2a      	ldr	r2, [pc, #168]	; (8004078 <HAL_RCC_OscConfig+0x27c>)
 8003fce:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003fd2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fd4:	f7fc ffd0 	bl	8000f78 <HAL_GetTick>
 8003fd8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003fda:	e008      	b.n	8003fee <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003fdc:	f7fc ffcc 	bl	8000f78 <HAL_GetTick>
 8003fe0:	4602      	mov	r2, r0
 8003fe2:	693b      	ldr	r3, [r7, #16]
 8003fe4:	1ad3      	subs	r3, r2, r3
 8003fe6:	2b02      	cmp	r3, #2
 8003fe8:	d901      	bls.n	8003fee <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8003fea:	2303      	movs	r3, #3
 8003fec:	e216      	b.n	800441c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003fee:	4b22      	ldr	r3, [pc, #136]	; (8004078 <HAL_RCC_OscConfig+0x27c>)
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d1f0      	bne.n	8003fdc <HAL_RCC_OscConfig+0x1e0>
 8003ffa:	e000      	b.n	8003ffe <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003ffc:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	f003 0308 	and.w	r3, r3, #8
 8004006:	2b00      	cmp	r3, #0
 8004008:	d041      	beq.n	800408e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	695b      	ldr	r3, [r3, #20]
 800400e:	2b00      	cmp	r3, #0
 8004010:	d01c      	beq.n	800404c <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004012:	4b19      	ldr	r3, [pc, #100]	; (8004078 <HAL_RCC_OscConfig+0x27c>)
 8004014:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004018:	4a17      	ldr	r2, [pc, #92]	; (8004078 <HAL_RCC_OscConfig+0x27c>)
 800401a:	f043 0301 	orr.w	r3, r3, #1
 800401e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004022:	f7fc ffa9 	bl	8000f78 <HAL_GetTick>
 8004026:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004028:	e008      	b.n	800403c <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800402a:	f7fc ffa5 	bl	8000f78 <HAL_GetTick>
 800402e:	4602      	mov	r2, r0
 8004030:	693b      	ldr	r3, [r7, #16]
 8004032:	1ad3      	subs	r3, r2, r3
 8004034:	2b02      	cmp	r3, #2
 8004036:	d901      	bls.n	800403c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004038:	2303      	movs	r3, #3
 800403a:	e1ef      	b.n	800441c <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800403c:	4b0e      	ldr	r3, [pc, #56]	; (8004078 <HAL_RCC_OscConfig+0x27c>)
 800403e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004042:	f003 0302 	and.w	r3, r3, #2
 8004046:	2b00      	cmp	r3, #0
 8004048:	d0ef      	beq.n	800402a <HAL_RCC_OscConfig+0x22e>
 800404a:	e020      	b.n	800408e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800404c:	4b0a      	ldr	r3, [pc, #40]	; (8004078 <HAL_RCC_OscConfig+0x27c>)
 800404e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004052:	4a09      	ldr	r2, [pc, #36]	; (8004078 <HAL_RCC_OscConfig+0x27c>)
 8004054:	f023 0301 	bic.w	r3, r3, #1
 8004058:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800405c:	f7fc ff8c 	bl	8000f78 <HAL_GetTick>
 8004060:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004062:	e00d      	b.n	8004080 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004064:	f7fc ff88 	bl	8000f78 <HAL_GetTick>
 8004068:	4602      	mov	r2, r0
 800406a:	693b      	ldr	r3, [r7, #16]
 800406c:	1ad3      	subs	r3, r2, r3
 800406e:	2b02      	cmp	r3, #2
 8004070:	d906      	bls.n	8004080 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004072:	2303      	movs	r3, #3
 8004074:	e1d2      	b.n	800441c <HAL_RCC_OscConfig+0x620>
 8004076:	bf00      	nop
 8004078:	40021000 	.word	0x40021000
 800407c:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004080:	4b8c      	ldr	r3, [pc, #560]	; (80042b4 <HAL_RCC_OscConfig+0x4b8>)
 8004082:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004086:	f003 0302 	and.w	r3, r3, #2
 800408a:	2b00      	cmp	r3, #0
 800408c:	d1ea      	bne.n	8004064 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	f003 0304 	and.w	r3, r3, #4
 8004096:	2b00      	cmp	r3, #0
 8004098:	f000 80a6 	beq.w	80041e8 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 800409c:	2300      	movs	r3, #0
 800409e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80040a0:	4b84      	ldr	r3, [pc, #528]	; (80042b4 <HAL_RCC_OscConfig+0x4b8>)
 80040a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d101      	bne.n	80040b0 <HAL_RCC_OscConfig+0x2b4>
 80040ac:	2301      	movs	r3, #1
 80040ae:	e000      	b.n	80040b2 <HAL_RCC_OscConfig+0x2b6>
 80040b0:	2300      	movs	r3, #0
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d00d      	beq.n	80040d2 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80040b6:	4b7f      	ldr	r3, [pc, #508]	; (80042b4 <HAL_RCC_OscConfig+0x4b8>)
 80040b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040ba:	4a7e      	ldr	r2, [pc, #504]	; (80042b4 <HAL_RCC_OscConfig+0x4b8>)
 80040bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80040c0:	6593      	str	r3, [r2, #88]	; 0x58
 80040c2:	4b7c      	ldr	r3, [pc, #496]	; (80042b4 <HAL_RCC_OscConfig+0x4b8>)
 80040c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040ca:	60fb      	str	r3, [r7, #12]
 80040cc:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80040ce:	2301      	movs	r3, #1
 80040d0:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80040d2:	4b79      	ldr	r3, [pc, #484]	; (80042b8 <HAL_RCC_OscConfig+0x4bc>)
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d118      	bne.n	8004110 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80040de:	4b76      	ldr	r3, [pc, #472]	; (80042b8 <HAL_RCC_OscConfig+0x4bc>)
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	4a75      	ldr	r2, [pc, #468]	; (80042b8 <HAL_RCC_OscConfig+0x4bc>)
 80040e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80040e8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80040ea:	f7fc ff45 	bl	8000f78 <HAL_GetTick>
 80040ee:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80040f0:	e008      	b.n	8004104 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80040f2:	f7fc ff41 	bl	8000f78 <HAL_GetTick>
 80040f6:	4602      	mov	r2, r0
 80040f8:	693b      	ldr	r3, [r7, #16]
 80040fa:	1ad3      	subs	r3, r2, r3
 80040fc:	2b02      	cmp	r3, #2
 80040fe:	d901      	bls.n	8004104 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8004100:	2303      	movs	r3, #3
 8004102:	e18b      	b.n	800441c <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004104:	4b6c      	ldr	r3, [pc, #432]	; (80042b8 <HAL_RCC_OscConfig+0x4bc>)
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800410c:	2b00      	cmp	r3, #0
 800410e:	d0f0      	beq.n	80040f2 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	689b      	ldr	r3, [r3, #8]
 8004114:	2b01      	cmp	r3, #1
 8004116:	d108      	bne.n	800412a <HAL_RCC_OscConfig+0x32e>
 8004118:	4b66      	ldr	r3, [pc, #408]	; (80042b4 <HAL_RCC_OscConfig+0x4b8>)
 800411a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800411e:	4a65      	ldr	r2, [pc, #404]	; (80042b4 <HAL_RCC_OscConfig+0x4b8>)
 8004120:	f043 0301 	orr.w	r3, r3, #1
 8004124:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004128:	e024      	b.n	8004174 <HAL_RCC_OscConfig+0x378>
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	689b      	ldr	r3, [r3, #8]
 800412e:	2b05      	cmp	r3, #5
 8004130:	d110      	bne.n	8004154 <HAL_RCC_OscConfig+0x358>
 8004132:	4b60      	ldr	r3, [pc, #384]	; (80042b4 <HAL_RCC_OscConfig+0x4b8>)
 8004134:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004138:	4a5e      	ldr	r2, [pc, #376]	; (80042b4 <HAL_RCC_OscConfig+0x4b8>)
 800413a:	f043 0304 	orr.w	r3, r3, #4
 800413e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004142:	4b5c      	ldr	r3, [pc, #368]	; (80042b4 <HAL_RCC_OscConfig+0x4b8>)
 8004144:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004148:	4a5a      	ldr	r2, [pc, #360]	; (80042b4 <HAL_RCC_OscConfig+0x4b8>)
 800414a:	f043 0301 	orr.w	r3, r3, #1
 800414e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004152:	e00f      	b.n	8004174 <HAL_RCC_OscConfig+0x378>
 8004154:	4b57      	ldr	r3, [pc, #348]	; (80042b4 <HAL_RCC_OscConfig+0x4b8>)
 8004156:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800415a:	4a56      	ldr	r2, [pc, #344]	; (80042b4 <HAL_RCC_OscConfig+0x4b8>)
 800415c:	f023 0301 	bic.w	r3, r3, #1
 8004160:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004164:	4b53      	ldr	r3, [pc, #332]	; (80042b4 <HAL_RCC_OscConfig+0x4b8>)
 8004166:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800416a:	4a52      	ldr	r2, [pc, #328]	; (80042b4 <HAL_RCC_OscConfig+0x4b8>)
 800416c:	f023 0304 	bic.w	r3, r3, #4
 8004170:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	689b      	ldr	r3, [r3, #8]
 8004178:	2b00      	cmp	r3, #0
 800417a:	d016      	beq.n	80041aa <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800417c:	f7fc fefc 	bl	8000f78 <HAL_GetTick>
 8004180:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004182:	e00a      	b.n	800419a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004184:	f7fc fef8 	bl	8000f78 <HAL_GetTick>
 8004188:	4602      	mov	r2, r0
 800418a:	693b      	ldr	r3, [r7, #16]
 800418c:	1ad3      	subs	r3, r2, r3
 800418e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004192:	4293      	cmp	r3, r2
 8004194:	d901      	bls.n	800419a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8004196:	2303      	movs	r3, #3
 8004198:	e140      	b.n	800441c <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800419a:	4b46      	ldr	r3, [pc, #280]	; (80042b4 <HAL_RCC_OscConfig+0x4b8>)
 800419c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041a0:	f003 0302 	and.w	r3, r3, #2
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d0ed      	beq.n	8004184 <HAL_RCC_OscConfig+0x388>
 80041a8:	e015      	b.n	80041d6 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041aa:	f7fc fee5 	bl	8000f78 <HAL_GetTick>
 80041ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80041b0:	e00a      	b.n	80041c8 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80041b2:	f7fc fee1 	bl	8000f78 <HAL_GetTick>
 80041b6:	4602      	mov	r2, r0
 80041b8:	693b      	ldr	r3, [r7, #16]
 80041ba:	1ad3      	subs	r3, r2, r3
 80041bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80041c0:	4293      	cmp	r3, r2
 80041c2:	d901      	bls.n	80041c8 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80041c4:	2303      	movs	r3, #3
 80041c6:	e129      	b.n	800441c <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80041c8:	4b3a      	ldr	r3, [pc, #232]	; (80042b4 <HAL_RCC_OscConfig+0x4b8>)
 80041ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041ce:	f003 0302 	and.w	r3, r3, #2
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d1ed      	bne.n	80041b2 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80041d6:	7ffb      	ldrb	r3, [r7, #31]
 80041d8:	2b01      	cmp	r3, #1
 80041da:	d105      	bne.n	80041e8 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80041dc:	4b35      	ldr	r3, [pc, #212]	; (80042b4 <HAL_RCC_OscConfig+0x4b8>)
 80041de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041e0:	4a34      	ldr	r2, [pc, #208]	; (80042b4 <HAL_RCC_OscConfig+0x4b8>)
 80041e2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80041e6:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	f003 0320 	and.w	r3, r3, #32
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d03c      	beq.n	800426e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	699b      	ldr	r3, [r3, #24]
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d01c      	beq.n	8004236 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80041fc:	4b2d      	ldr	r3, [pc, #180]	; (80042b4 <HAL_RCC_OscConfig+0x4b8>)
 80041fe:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004202:	4a2c      	ldr	r2, [pc, #176]	; (80042b4 <HAL_RCC_OscConfig+0x4b8>)
 8004204:	f043 0301 	orr.w	r3, r3, #1
 8004208:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800420c:	f7fc feb4 	bl	8000f78 <HAL_GetTick>
 8004210:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004212:	e008      	b.n	8004226 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004214:	f7fc feb0 	bl	8000f78 <HAL_GetTick>
 8004218:	4602      	mov	r2, r0
 800421a:	693b      	ldr	r3, [r7, #16]
 800421c:	1ad3      	subs	r3, r2, r3
 800421e:	2b02      	cmp	r3, #2
 8004220:	d901      	bls.n	8004226 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8004222:	2303      	movs	r3, #3
 8004224:	e0fa      	b.n	800441c <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004226:	4b23      	ldr	r3, [pc, #140]	; (80042b4 <HAL_RCC_OscConfig+0x4b8>)
 8004228:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800422c:	f003 0302 	and.w	r3, r3, #2
 8004230:	2b00      	cmp	r3, #0
 8004232:	d0ef      	beq.n	8004214 <HAL_RCC_OscConfig+0x418>
 8004234:	e01b      	b.n	800426e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004236:	4b1f      	ldr	r3, [pc, #124]	; (80042b4 <HAL_RCC_OscConfig+0x4b8>)
 8004238:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800423c:	4a1d      	ldr	r2, [pc, #116]	; (80042b4 <HAL_RCC_OscConfig+0x4b8>)
 800423e:	f023 0301 	bic.w	r3, r3, #1
 8004242:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004246:	f7fc fe97 	bl	8000f78 <HAL_GetTick>
 800424a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800424c:	e008      	b.n	8004260 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800424e:	f7fc fe93 	bl	8000f78 <HAL_GetTick>
 8004252:	4602      	mov	r2, r0
 8004254:	693b      	ldr	r3, [r7, #16]
 8004256:	1ad3      	subs	r3, r2, r3
 8004258:	2b02      	cmp	r3, #2
 800425a:	d901      	bls.n	8004260 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 800425c:	2303      	movs	r3, #3
 800425e:	e0dd      	b.n	800441c <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004260:	4b14      	ldr	r3, [pc, #80]	; (80042b4 <HAL_RCC_OscConfig+0x4b8>)
 8004262:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004266:	f003 0302 	and.w	r3, r3, #2
 800426a:	2b00      	cmp	r3, #0
 800426c:	d1ef      	bne.n	800424e <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	69db      	ldr	r3, [r3, #28]
 8004272:	2b00      	cmp	r3, #0
 8004274:	f000 80d1 	beq.w	800441a <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004278:	4b0e      	ldr	r3, [pc, #56]	; (80042b4 <HAL_RCC_OscConfig+0x4b8>)
 800427a:	689b      	ldr	r3, [r3, #8]
 800427c:	f003 030c 	and.w	r3, r3, #12
 8004280:	2b0c      	cmp	r3, #12
 8004282:	f000 808b 	beq.w	800439c <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	69db      	ldr	r3, [r3, #28]
 800428a:	2b02      	cmp	r3, #2
 800428c:	d15e      	bne.n	800434c <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800428e:	4b09      	ldr	r3, [pc, #36]	; (80042b4 <HAL_RCC_OscConfig+0x4b8>)
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	4a08      	ldr	r2, [pc, #32]	; (80042b4 <HAL_RCC_OscConfig+0x4b8>)
 8004294:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004298:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800429a:	f7fc fe6d 	bl	8000f78 <HAL_GetTick>
 800429e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80042a0:	e00c      	b.n	80042bc <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80042a2:	f7fc fe69 	bl	8000f78 <HAL_GetTick>
 80042a6:	4602      	mov	r2, r0
 80042a8:	693b      	ldr	r3, [r7, #16]
 80042aa:	1ad3      	subs	r3, r2, r3
 80042ac:	2b02      	cmp	r3, #2
 80042ae:	d905      	bls.n	80042bc <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80042b0:	2303      	movs	r3, #3
 80042b2:	e0b3      	b.n	800441c <HAL_RCC_OscConfig+0x620>
 80042b4:	40021000 	.word	0x40021000
 80042b8:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80042bc:	4b59      	ldr	r3, [pc, #356]	; (8004424 <HAL_RCC_OscConfig+0x628>)
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d1ec      	bne.n	80042a2 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80042c8:	4b56      	ldr	r3, [pc, #344]	; (8004424 <HAL_RCC_OscConfig+0x628>)
 80042ca:	68da      	ldr	r2, [r3, #12]
 80042cc:	4b56      	ldr	r3, [pc, #344]	; (8004428 <HAL_RCC_OscConfig+0x62c>)
 80042ce:	4013      	ands	r3, r2
 80042d0:	687a      	ldr	r2, [r7, #4]
 80042d2:	6a11      	ldr	r1, [r2, #32]
 80042d4:	687a      	ldr	r2, [r7, #4]
 80042d6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80042d8:	3a01      	subs	r2, #1
 80042da:	0112      	lsls	r2, r2, #4
 80042dc:	4311      	orrs	r1, r2
 80042de:	687a      	ldr	r2, [r7, #4]
 80042e0:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80042e2:	0212      	lsls	r2, r2, #8
 80042e4:	4311      	orrs	r1, r2
 80042e6:	687a      	ldr	r2, [r7, #4]
 80042e8:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80042ea:	0852      	lsrs	r2, r2, #1
 80042ec:	3a01      	subs	r2, #1
 80042ee:	0552      	lsls	r2, r2, #21
 80042f0:	4311      	orrs	r1, r2
 80042f2:	687a      	ldr	r2, [r7, #4]
 80042f4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80042f6:	0852      	lsrs	r2, r2, #1
 80042f8:	3a01      	subs	r2, #1
 80042fa:	0652      	lsls	r2, r2, #25
 80042fc:	4311      	orrs	r1, r2
 80042fe:	687a      	ldr	r2, [r7, #4]
 8004300:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8004302:	06d2      	lsls	r2, r2, #27
 8004304:	430a      	orrs	r2, r1
 8004306:	4947      	ldr	r1, [pc, #284]	; (8004424 <HAL_RCC_OscConfig+0x628>)
 8004308:	4313      	orrs	r3, r2
 800430a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800430c:	4b45      	ldr	r3, [pc, #276]	; (8004424 <HAL_RCC_OscConfig+0x628>)
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	4a44      	ldr	r2, [pc, #272]	; (8004424 <HAL_RCC_OscConfig+0x628>)
 8004312:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004316:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004318:	4b42      	ldr	r3, [pc, #264]	; (8004424 <HAL_RCC_OscConfig+0x628>)
 800431a:	68db      	ldr	r3, [r3, #12]
 800431c:	4a41      	ldr	r2, [pc, #260]	; (8004424 <HAL_RCC_OscConfig+0x628>)
 800431e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004322:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004324:	f7fc fe28 	bl	8000f78 <HAL_GetTick>
 8004328:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800432a:	e008      	b.n	800433e <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800432c:	f7fc fe24 	bl	8000f78 <HAL_GetTick>
 8004330:	4602      	mov	r2, r0
 8004332:	693b      	ldr	r3, [r7, #16]
 8004334:	1ad3      	subs	r3, r2, r3
 8004336:	2b02      	cmp	r3, #2
 8004338:	d901      	bls.n	800433e <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800433a:	2303      	movs	r3, #3
 800433c:	e06e      	b.n	800441c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800433e:	4b39      	ldr	r3, [pc, #228]	; (8004424 <HAL_RCC_OscConfig+0x628>)
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004346:	2b00      	cmp	r3, #0
 8004348:	d0f0      	beq.n	800432c <HAL_RCC_OscConfig+0x530>
 800434a:	e066      	b.n	800441a <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800434c:	4b35      	ldr	r3, [pc, #212]	; (8004424 <HAL_RCC_OscConfig+0x628>)
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	4a34      	ldr	r2, [pc, #208]	; (8004424 <HAL_RCC_OscConfig+0x628>)
 8004352:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004356:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8004358:	4b32      	ldr	r3, [pc, #200]	; (8004424 <HAL_RCC_OscConfig+0x628>)
 800435a:	68db      	ldr	r3, [r3, #12]
 800435c:	4a31      	ldr	r2, [pc, #196]	; (8004424 <HAL_RCC_OscConfig+0x628>)
 800435e:	f023 0303 	bic.w	r3, r3, #3
 8004362:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8004364:	4b2f      	ldr	r3, [pc, #188]	; (8004424 <HAL_RCC_OscConfig+0x628>)
 8004366:	68db      	ldr	r3, [r3, #12]
 8004368:	4a2e      	ldr	r2, [pc, #184]	; (8004424 <HAL_RCC_OscConfig+0x628>)
 800436a:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800436e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004372:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004374:	f7fc fe00 	bl	8000f78 <HAL_GetTick>
 8004378:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800437a:	e008      	b.n	800438e <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800437c:	f7fc fdfc 	bl	8000f78 <HAL_GetTick>
 8004380:	4602      	mov	r2, r0
 8004382:	693b      	ldr	r3, [r7, #16]
 8004384:	1ad3      	subs	r3, r2, r3
 8004386:	2b02      	cmp	r3, #2
 8004388:	d901      	bls.n	800438e <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 800438a:	2303      	movs	r3, #3
 800438c:	e046      	b.n	800441c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800438e:	4b25      	ldr	r3, [pc, #148]	; (8004424 <HAL_RCC_OscConfig+0x628>)
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004396:	2b00      	cmp	r3, #0
 8004398:	d1f0      	bne.n	800437c <HAL_RCC_OscConfig+0x580>
 800439a:	e03e      	b.n	800441a <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	69db      	ldr	r3, [r3, #28]
 80043a0:	2b01      	cmp	r3, #1
 80043a2:	d101      	bne.n	80043a8 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 80043a4:	2301      	movs	r3, #1
 80043a6:	e039      	b.n	800441c <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80043a8:	4b1e      	ldr	r3, [pc, #120]	; (8004424 <HAL_RCC_OscConfig+0x628>)
 80043aa:	68db      	ldr	r3, [r3, #12]
 80043ac:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80043ae:	697b      	ldr	r3, [r7, #20]
 80043b0:	f003 0203 	and.w	r2, r3, #3
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	6a1b      	ldr	r3, [r3, #32]
 80043b8:	429a      	cmp	r2, r3
 80043ba:	d12c      	bne.n	8004416 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80043bc:	697b      	ldr	r3, [r7, #20]
 80043be:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043c6:	3b01      	subs	r3, #1
 80043c8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80043ca:	429a      	cmp	r2, r3
 80043cc:	d123      	bne.n	8004416 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80043ce:	697b      	ldr	r3, [r7, #20]
 80043d0:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043d8:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80043da:	429a      	cmp	r2, r3
 80043dc:	d11b      	bne.n	8004416 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80043de:	697b      	ldr	r3, [r7, #20]
 80043e0:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043e8:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80043ea:	429a      	cmp	r2, r3
 80043ec:	d113      	bne.n	8004416 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80043ee:	697b      	ldr	r3, [r7, #20]
 80043f0:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043f8:	085b      	lsrs	r3, r3, #1
 80043fa:	3b01      	subs	r3, #1
 80043fc:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80043fe:	429a      	cmp	r2, r3
 8004400:	d109      	bne.n	8004416 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004402:	697b      	ldr	r3, [r7, #20]
 8004404:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800440c:	085b      	lsrs	r3, r3, #1
 800440e:	3b01      	subs	r3, #1
 8004410:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004412:	429a      	cmp	r2, r3
 8004414:	d001      	beq.n	800441a <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 8004416:	2301      	movs	r3, #1
 8004418:	e000      	b.n	800441c <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 800441a:	2300      	movs	r3, #0
}
 800441c:	4618      	mov	r0, r3
 800441e:	3720      	adds	r7, #32
 8004420:	46bd      	mov	sp, r7
 8004422:	bd80      	pop	{r7, pc}
 8004424:	40021000 	.word	0x40021000
 8004428:	019f800c 	.word	0x019f800c

0800442c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800442c:	b580      	push	{r7, lr}
 800442e:	b086      	sub	sp, #24
 8004430:	af00      	add	r7, sp, #0
 8004432:	6078      	str	r0, [r7, #4]
 8004434:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8004436:	2300      	movs	r3, #0
 8004438:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	2b00      	cmp	r3, #0
 800443e:	d101      	bne.n	8004444 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004440:	2301      	movs	r3, #1
 8004442:	e11e      	b.n	8004682 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004444:	4b91      	ldr	r3, [pc, #580]	; (800468c <HAL_RCC_ClockConfig+0x260>)
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	f003 030f 	and.w	r3, r3, #15
 800444c:	683a      	ldr	r2, [r7, #0]
 800444e:	429a      	cmp	r2, r3
 8004450:	d910      	bls.n	8004474 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004452:	4b8e      	ldr	r3, [pc, #568]	; (800468c <HAL_RCC_ClockConfig+0x260>)
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	f023 020f 	bic.w	r2, r3, #15
 800445a:	498c      	ldr	r1, [pc, #560]	; (800468c <HAL_RCC_ClockConfig+0x260>)
 800445c:	683b      	ldr	r3, [r7, #0]
 800445e:	4313      	orrs	r3, r2
 8004460:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004462:	4b8a      	ldr	r3, [pc, #552]	; (800468c <HAL_RCC_ClockConfig+0x260>)
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	f003 030f 	and.w	r3, r3, #15
 800446a:	683a      	ldr	r2, [r7, #0]
 800446c:	429a      	cmp	r2, r3
 800446e:	d001      	beq.n	8004474 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004470:	2301      	movs	r3, #1
 8004472:	e106      	b.n	8004682 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	f003 0301 	and.w	r3, r3, #1
 800447c:	2b00      	cmp	r3, #0
 800447e:	d073      	beq.n	8004568 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	685b      	ldr	r3, [r3, #4]
 8004484:	2b03      	cmp	r3, #3
 8004486:	d129      	bne.n	80044dc <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004488:	4b81      	ldr	r3, [pc, #516]	; (8004690 <HAL_RCC_ClockConfig+0x264>)
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004490:	2b00      	cmp	r3, #0
 8004492:	d101      	bne.n	8004498 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8004494:	2301      	movs	r3, #1
 8004496:	e0f4      	b.n	8004682 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8004498:	f000 f99e 	bl	80047d8 <RCC_GetSysClockFreqFromPLLSource>
 800449c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800449e:	693b      	ldr	r3, [r7, #16]
 80044a0:	4a7c      	ldr	r2, [pc, #496]	; (8004694 <HAL_RCC_ClockConfig+0x268>)
 80044a2:	4293      	cmp	r3, r2
 80044a4:	d93f      	bls.n	8004526 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80044a6:	4b7a      	ldr	r3, [pc, #488]	; (8004690 <HAL_RCC_ClockConfig+0x264>)
 80044a8:	689b      	ldr	r3, [r3, #8]
 80044aa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d009      	beq.n	80044c6 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d033      	beq.n	8004526 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d12f      	bne.n	8004526 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80044c6:	4b72      	ldr	r3, [pc, #456]	; (8004690 <HAL_RCC_ClockConfig+0x264>)
 80044c8:	689b      	ldr	r3, [r3, #8]
 80044ca:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80044ce:	4a70      	ldr	r2, [pc, #448]	; (8004690 <HAL_RCC_ClockConfig+0x264>)
 80044d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80044d4:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80044d6:	2380      	movs	r3, #128	; 0x80
 80044d8:	617b      	str	r3, [r7, #20]
 80044da:	e024      	b.n	8004526 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	685b      	ldr	r3, [r3, #4]
 80044e0:	2b02      	cmp	r3, #2
 80044e2:	d107      	bne.n	80044f4 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80044e4:	4b6a      	ldr	r3, [pc, #424]	; (8004690 <HAL_RCC_ClockConfig+0x264>)
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d109      	bne.n	8004504 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80044f0:	2301      	movs	r3, #1
 80044f2:	e0c6      	b.n	8004682 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80044f4:	4b66      	ldr	r3, [pc, #408]	; (8004690 <HAL_RCC_ClockConfig+0x264>)
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d101      	bne.n	8004504 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004500:	2301      	movs	r3, #1
 8004502:	e0be      	b.n	8004682 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8004504:	f000 f8ce 	bl	80046a4 <HAL_RCC_GetSysClockFreq>
 8004508:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800450a:	693b      	ldr	r3, [r7, #16]
 800450c:	4a61      	ldr	r2, [pc, #388]	; (8004694 <HAL_RCC_ClockConfig+0x268>)
 800450e:	4293      	cmp	r3, r2
 8004510:	d909      	bls.n	8004526 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004512:	4b5f      	ldr	r3, [pc, #380]	; (8004690 <HAL_RCC_ClockConfig+0x264>)
 8004514:	689b      	ldr	r3, [r3, #8]
 8004516:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800451a:	4a5d      	ldr	r2, [pc, #372]	; (8004690 <HAL_RCC_ClockConfig+0x264>)
 800451c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004520:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8004522:	2380      	movs	r3, #128	; 0x80
 8004524:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004526:	4b5a      	ldr	r3, [pc, #360]	; (8004690 <HAL_RCC_ClockConfig+0x264>)
 8004528:	689b      	ldr	r3, [r3, #8]
 800452a:	f023 0203 	bic.w	r2, r3, #3
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	685b      	ldr	r3, [r3, #4]
 8004532:	4957      	ldr	r1, [pc, #348]	; (8004690 <HAL_RCC_ClockConfig+0x264>)
 8004534:	4313      	orrs	r3, r2
 8004536:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004538:	f7fc fd1e 	bl	8000f78 <HAL_GetTick>
 800453c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800453e:	e00a      	b.n	8004556 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004540:	f7fc fd1a 	bl	8000f78 <HAL_GetTick>
 8004544:	4602      	mov	r2, r0
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	1ad3      	subs	r3, r2, r3
 800454a:	f241 3288 	movw	r2, #5000	; 0x1388
 800454e:	4293      	cmp	r3, r2
 8004550:	d901      	bls.n	8004556 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8004552:	2303      	movs	r3, #3
 8004554:	e095      	b.n	8004682 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004556:	4b4e      	ldr	r3, [pc, #312]	; (8004690 <HAL_RCC_ClockConfig+0x264>)
 8004558:	689b      	ldr	r3, [r3, #8]
 800455a:	f003 020c 	and.w	r2, r3, #12
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	685b      	ldr	r3, [r3, #4]
 8004562:	009b      	lsls	r3, r3, #2
 8004564:	429a      	cmp	r2, r3
 8004566:	d1eb      	bne.n	8004540 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	f003 0302 	and.w	r3, r3, #2
 8004570:	2b00      	cmp	r3, #0
 8004572:	d023      	beq.n	80045bc <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	f003 0304 	and.w	r3, r3, #4
 800457c:	2b00      	cmp	r3, #0
 800457e:	d005      	beq.n	800458c <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004580:	4b43      	ldr	r3, [pc, #268]	; (8004690 <HAL_RCC_ClockConfig+0x264>)
 8004582:	689b      	ldr	r3, [r3, #8]
 8004584:	4a42      	ldr	r2, [pc, #264]	; (8004690 <HAL_RCC_ClockConfig+0x264>)
 8004586:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800458a:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	f003 0308 	and.w	r3, r3, #8
 8004594:	2b00      	cmp	r3, #0
 8004596:	d007      	beq.n	80045a8 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8004598:	4b3d      	ldr	r3, [pc, #244]	; (8004690 <HAL_RCC_ClockConfig+0x264>)
 800459a:	689b      	ldr	r3, [r3, #8]
 800459c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80045a0:	4a3b      	ldr	r2, [pc, #236]	; (8004690 <HAL_RCC_ClockConfig+0x264>)
 80045a2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80045a6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80045a8:	4b39      	ldr	r3, [pc, #228]	; (8004690 <HAL_RCC_ClockConfig+0x264>)
 80045aa:	689b      	ldr	r3, [r3, #8]
 80045ac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	689b      	ldr	r3, [r3, #8]
 80045b4:	4936      	ldr	r1, [pc, #216]	; (8004690 <HAL_RCC_ClockConfig+0x264>)
 80045b6:	4313      	orrs	r3, r2
 80045b8:	608b      	str	r3, [r1, #8]
 80045ba:	e008      	b.n	80045ce <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80045bc:	697b      	ldr	r3, [r7, #20]
 80045be:	2b80      	cmp	r3, #128	; 0x80
 80045c0:	d105      	bne.n	80045ce <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80045c2:	4b33      	ldr	r3, [pc, #204]	; (8004690 <HAL_RCC_ClockConfig+0x264>)
 80045c4:	689b      	ldr	r3, [r3, #8]
 80045c6:	4a32      	ldr	r2, [pc, #200]	; (8004690 <HAL_RCC_ClockConfig+0x264>)
 80045c8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80045cc:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80045ce:	4b2f      	ldr	r3, [pc, #188]	; (800468c <HAL_RCC_ClockConfig+0x260>)
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	f003 030f 	and.w	r3, r3, #15
 80045d6:	683a      	ldr	r2, [r7, #0]
 80045d8:	429a      	cmp	r2, r3
 80045da:	d21d      	bcs.n	8004618 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80045dc:	4b2b      	ldr	r3, [pc, #172]	; (800468c <HAL_RCC_ClockConfig+0x260>)
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	f023 020f 	bic.w	r2, r3, #15
 80045e4:	4929      	ldr	r1, [pc, #164]	; (800468c <HAL_RCC_ClockConfig+0x260>)
 80045e6:	683b      	ldr	r3, [r7, #0]
 80045e8:	4313      	orrs	r3, r2
 80045ea:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80045ec:	f7fc fcc4 	bl	8000f78 <HAL_GetTick>
 80045f0:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80045f2:	e00a      	b.n	800460a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80045f4:	f7fc fcc0 	bl	8000f78 <HAL_GetTick>
 80045f8:	4602      	mov	r2, r0
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	1ad3      	subs	r3, r2, r3
 80045fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8004602:	4293      	cmp	r3, r2
 8004604:	d901      	bls.n	800460a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8004606:	2303      	movs	r3, #3
 8004608:	e03b      	b.n	8004682 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800460a:	4b20      	ldr	r3, [pc, #128]	; (800468c <HAL_RCC_ClockConfig+0x260>)
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	f003 030f 	and.w	r3, r3, #15
 8004612:	683a      	ldr	r2, [r7, #0]
 8004614:	429a      	cmp	r2, r3
 8004616:	d1ed      	bne.n	80045f4 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	f003 0304 	and.w	r3, r3, #4
 8004620:	2b00      	cmp	r3, #0
 8004622:	d008      	beq.n	8004636 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004624:	4b1a      	ldr	r3, [pc, #104]	; (8004690 <HAL_RCC_ClockConfig+0x264>)
 8004626:	689b      	ldr	r3, [r3, #8]
 8004628:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	68db      	ldr	r3, [r3, #12]
 8004630:	4917      	ldr	r1, [pc, #92]	; (8004690 <HAL_RCC_ClockConfig+0x264>)
 8004632:	4313      	orrs	r3, r2
 8004634:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	f003 0308 	and.w	r3, r3, #8
 800463e:	2b00      	cmp	r3, #0
 8004640:	d009      	beq.n	8004656 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004642:	4b13      	ldr	r3, [pc, #76]	; (8004690 <HAL_RCC_ClockConfig+0x264>)
 8004644:	689b      	ldr	r3, [r3, #8]
 8004646:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	691b      	ldr	r3, [r3, #16]
 800464e:	00db      	lsls	r3, r3, #3
 8004650:	490f      	ldr	r1, [pc, #60]	; (8004690 <HAL_RCC_ClockConfig+0x264>)
 8004652:	4313      	orrs	r3, r2
 8004654:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004656:	f000 f825 	bl	80046a4 <HAL_RCC_GetSysClockFreq>
 800465a:	4602      	mov	r2, r0
 800465c:	4b0c      	ldr	r3, [pc, #48]	; (8004690 <HAL_RCC_ClockConfig+0x264>)
 800465e:	689b      	ldr	r3, [r3, #8]
 8004660:	091b      	lsrs	r3, r3, #4
 8004662:	f003 030f 	and.w	r3, r3, #15
 8004666:	490c      	ldr	r1, [pc, #48]	; (8004698 <HAL_RCC_ClockConfig+0x26c>)
 8004668:	5ccb      	ldrb	r3, [r1, r3]
 800466a:	f003 031f 	and.w	r3, r3, #31
 800466e:	fa22 f303 	lsr.w	r3, r2, r3
 8004672:	4a0a      	ldr	r2, [pc, #40]	; (800469c <HAL_RCC_ClockConfig+0x270>)
 8004674:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8004676:	4b0a      	ldr	r3, [pc, #40]	; (80046a0 <HAL_RCC_ClockConfig+0x274>)
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	4618      	mov	r0, r3
 800467c:	f7fc fc30 	bl	8000ee0 <HAL_InitTick>
 8004680:	4603      	mov	r3, r0
}
 8004682:	4618      	mov	r0, r3
 8004684:	3718      	adds	r7, #24
 8004686:	46bd      	mov	sp, r7
 8004688:	bd80      	pop	{r7, pc}
 800468a:	bf00      	nop
 800468c:	40022000 	.word	0x40022000
 8004690:	40021000 	.word	0x40021000
 8004694:	04c4b400 	.word	0x04c4b400
 8004698:	0800a140 	.word	0x0800a140
 800469c:	20000000 	.word	0x20000000
 80046a0:	20000004 	.word	0x20000004

080046a4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80046a4:	b480      	push	{r7}
 80046a6:	b087      	sub	sp, #28
 80046a8:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80046aa:	4b2c      	ldr	r3, [pc, #176]	; (800475c <HAL_RCC_GetSysClockFreq+0xb8>)
 80046ac:	689b      	ldr	r3, [r3, #8]
 80046ae:	f003 030c 	and.w	r3, r3, #12
 80046b2:	2b04      	cmp	r3, #4
 80046b4:	d102      	bne.n	80046bc <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80046b6:	4b2a      	ldr	r3, [pc, #168]	; (8004760 <HAL_RCC_GetSysClockFreq+0xbc>)
 80046b8:	613b      	str	r3, [r7, #16]
 80046ba:	e047      	b.n	800474c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80046bc:	4b27      	ldr	r3, [pc, #156]	; (800475c <HAL_RCC_GetSysClockFreq+0xb8>)
 80046be:	689b      	ldr	r3, [r3, #8]
 80046c0:	f003 030c 	and.w	r3, r3, #12
 80046c4:	2b08      	cmp	r3, #8
 80046c6:	d102      	bne.n	80046ce <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80046c8:	4b26      	ldr	r3, [pc, #152]	; (8004764 <HAL_RCC_GetSysClockFreq+0xc0>)
 80046ca:	613b      	str	r3, [r7, #16]
 80046cc:	e03e      	b.n	800474c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80046ce:	4b23      	ldr	r3, [pc, #140]	; (800475c <HAL_RCC_GetSysClockFreq+0xb8>)
 80046d0:	689b      	ldr	r3, [r3, #8]
 80046d2:	f003 030c 	and.w	r3, r3, #12
 80046d6:	2b0c      	cmp	r3, #12
 80046d8:	d136      	bne.n	8004748 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80046da:	4b20      	ldr	r3, [pc, #128]	; (800475c <HAL_RCC_GetSysClockFreq+0xb8>)
 80046dc:	68db      	ldr	r3, [r3, #12]
 80046de:	f003 0303 	and.w	r3, r3, #3
 80046e2:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80046e4:	4b1d      	ldr	r3, [pc, #116]	; (800475c <HAL_RCC_GetSysClockFreq+0xb8>)
 80046e6:	68db      	ldr	r3, [r3, #12]
 80046e8:	091b      	lsrs	r3, r3, #4
 80046ea:	f003 030f 	and.w	r3, r3, #15
 80046ee:	3301      	adds	r3, #1
 80046f0:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	2b03      	cmp	r3, #3
 80046f6:	d10c      	bne.n	8004712 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80046f8:	4a1a      	ldr	r2, [pc, #104]	; (8004764 <HAL_RCC_GetSysClockFreq+0xc0>)
 80046fa:	68bb      	ldr	r3, [r7, #8]
 80046fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004700:	4a16      	ldr	r2, [pc, #88]	; (800475c <HAL_RCC_GetSysClockFreq+0xb8>)
 8004702:	68d2      	ldr	r2, [r2, #12]
 8004704:	0a12      	lsrs	r2, r2, #8
 8004706:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800470a:	fb02 f303 	mul.w	r3, r2, r3
 800470e:	617b      	str	r3, [r7, #20]
      break;
 8004710:	e00c      	b.n	800472c <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004712:	4a13      	ldr	r2, [pc, #76]	; (8004760 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004714:	68bb      	ldr	r3, [r7, #8]
 8004716:	fbb2 f3f3 	udiv	r3, r2, r3
 800471a:	4a10      	ldr	r2, [pc, #64]	; (800475c <HAL_RCC_GetSysClockFreq+0xb8>)
 800471c:	68d2      	ldr	r2, [r2, #12]
 800471e:	0a12      	lsrs	r2, r2, #8
 8004720:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004724:	fb02 f303 	mul.w	r3, r2, r3
 8004728:	617b      	str	r3, [r7, #20]
      break;
 800472a:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800472c:	4b0b      	ldr	r3, [pc, #44]	; (800475c <HAL_RCC_GetSysClockFreq+0xb8>)
 800472e:	68db      	ldr	r3, [r3, #12]
 8004730:	0e5b      	lsrs	r3, r3, #25
 8004732:	f003 0303 	and.w	r3, r3, #3
 8004736:	3301      	adds	r3, #1
 8004738:	005b      	lsls	r3, r3, #1
 800473a:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 800473c:	697a      	ldr	r2, [r7, #20]
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	fbb2 f3f3 	udiv	r3, r2, r3
 8004744:	613b      	str	r3, [r7, #16]
 8004746:	e001      	b.n	800474c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8004748:	2300      	movs	r3, #0
 800474a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800474c:	693b      	ldr	r3, [r7, #16]
}
 800474e:	4618      	mov	r0, r3
 8004750:	371c      	adds	r7, #28
 8004752:	46bd      	mov	sp, r7
 8004754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004758:	4770      	bx	lr
 800475a:	bf00      	nop
 800475c:	40021000 	.word	0x40021000
 8004760:	00f42400 	.word	0x00f42400
 8004764:	007a1200 	.word	0x007a1200

08004768 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004768:	b480      	push	{r7}
 800476a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800476c:	4b03      	ldr	r3, [pc, #12]	; (800477c <HAL_RCC_GetHCLKFreq+0x14>)
 800476e:	681b      	ldr	r3, [r3, #0]
}
 8004770:	4618      	mov	r0, r3
 8004772:	46bd      	mov	sp, r7
 8004774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004778:	4770      	bx	lr
 800477a:	bf00      	nop
 800477c:	20000000 	.word	0x20000000

08004780 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004780:	b580      	push	{r7, lr}
 8004782:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004784:	f7ff fff0 	bl	8004768 <HAL_RCC_GetHCLKFreq>
 8004788:	4602      	mov	r2, r0
 800478a:	4b06      	ldr	r3, [pc, #24]	; (80047a4 <HAL_RCC_GetPCLK1Freq+0x24>)
 800478c:	689b      	ldr	r3, [r3, #8]
 800478e:	0a1b      	lsrs	r3, r3, #8
 8004790:	f003 0307 	and.w	r3, r3, #7
 8004794:	4904      	ldr	r1, [pc, #16]	; (80047a8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004796:	5ccb      	ldrb	r3, [r1, r3]
 8004798:	f003 031f 	and.w	r3, r3, #31
 800479c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80047a0:	4618      	mov	r0, r3
 80047a2:	bd80      	pop	{r7, pc}
 80047a4:	40021000 	.word	0x40021000
 80047a8:	0800a150 	.word	0x0800a150

080047ac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80047ac:	b580      	push	{r7, lr}
 80047ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80047b0:	f7ff ffda 	bl	8004768 <HAL_RCC_GetHCLKFreq>
 80047b4:	4602      	mov	r2, r0
 80047b6:	4b06      	ldr	r3, [pc, #24]	; (80047d0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80047b8:	689b      	ldr	r3, [r3, #8]
 80047ba:	0adb      	lsrs	r3, r3, #11
 80047bc:	f003 0307 	and.w	r3, r3, #7
 80047c0:	4904      	ldr	r1, [pc, #16]	; (80047d4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80047c2:	5ccb      	ldrb	r3, [r1, r3]
 80047c4:	f003 031f 	and.w	r3, r3, #31
 80047c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80047cc:	4618      	mov	r0, r3
 80047ce:	bd80      	pop	{r7, pc}
 80047d0:	40021000 	.word	0x40021000
 80047d4:	0800a150 	.word	0x0800a150

080047d8 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80047d8:	b480      	push	{r7}
 80047da:	b087      	sub	sp, #28
 80047dc:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80047de:	4b1e      	ldr	r3, [pc, #120]	; (8004858 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80047e0:	68db      	ldr	r3, [r3, #12]
 80047e2:	f003 0303 	and.w	r3, r3, #3
 80047e6:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80047e8:	4b1b      	ldr	r3, [pc, #108]	; (8004858 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80047ea:	68db      	ldr	r3, [r3, #12]
 80047ec:	091b      	lsrs	r3, r3, #4
 80047ee:	f003 030f 	and.w	r3, r3, #15
 80047f2:	3301      	adds	r3, #1
 80047f4:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80047f6:	693b      	ldr	r3, [r7, #16]
 80047f8:	2b03      	cmp	r3, #3
 80047fa:	d10c      	bne.n	8004816 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80047fc:	4a17      	ldr	r2, [pc, #92]	; (800485c <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	fbb2 f3f3 	udiv	r3, r2, r3
 8004804:	4a14      	ldr	r2, [pc, #80]	; (8004858 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004806:	68d2      	ldr	r2, [r2, #12]
 8004808:	0a12      	lsrs	r2, r2, #8
 800480a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800480e:	fb02 f303 	mul.w	r3, r2, r3
 8004812:	617b      	str	r3, [r7, #20]
    break;
 8004814:	e00c      	b.n	8004830 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004816:	4a12      	ldr	r2, [pc, #72]	; (8004860 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	fbb2 f3f3 	udiv	r3, r2, r3
 800481e:	4a0e      	ldr	r2, [pc, #56]	; (8004858 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004820:	68d2      	ldr	r2, [r2, #12]
 8004822:	0a12      	lsrs	r2, r2, #8
 8004824:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004828:	fb02 f303 	mul.w	r3, r2, r3
 800482c:	617b      	str	r3, [r7, #20]
    break;
 800482e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004830:	4b09      	ldr	r3, [pc, #36]	; (8004858 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004832:	68db      	ldr	r3, [r3, #12]
 8004834:	0e5b      	lsrs	r3, r3, #25
 8004836:	f003 0303 	and.w	r3, r3, #3
 800483a:	3301      	adds	r3, #1
 800483c:	005b      	lsls	r3, r3, #1
 800483e:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8004840:	697a      	ldr	r2, [r7, #20]
 8004842:	68bb      	ldr	r3, [r7, #8]
 8004844:	fbb2 f3f3 	udiv	r3, r2, r3
 8004848:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800484a:	687b      	ldr	r3, [r7, #4]
}
 800484c:	4618      	mov	r0, r3
 800484e:	371c      	adds	r7, #28
 8004850:	46bd      	mov	sp, r7
 8004852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004856:	4770      	bx	lr
 8004858:	40021000 	.word	0x40021000
 800485c:	007a1200 	.word	0x007a1200
 8004860:	00f42400 	.word	0x00f42400

08004864 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004864:	b580      	push	{r7, lr}
 8004866:	b086      	sub	sp, #24
 8004868:	af00      	add	r7, sp, #0
 800486a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800486c:	2300      	movs	r3, #0
 800486e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004870:	2300      	movs	r3, #0
 8004872:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800487c:	2b00      	cmp	r3, #0
 800487e:	f000 8098 	beq.w	80049b2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004882:	2300      	movs	r3, #0
 8004884:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004886:	4b43      	ldr	r3, [pc, #268]	; (8004994 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004888:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800488a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800488e:	2b00      	cmp	r3, #0
 8004890:	d10d      	bne.n	80048ae <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004892:	4b40      	ldr	r3, [pc, #256]	; (8004994 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004894:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004896:	4a3f      	ldr	r2, [pc, #252]	; (8004994 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004898:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800489c:	6593      	str	r3, [r2, #88]	; 0x58
 800489e:	4b3d      	ldr	r3, [pc, #244]	; (8004994 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80048a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80048a6:	60bb      	str	r3, [r7, #8]
 80048a8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80048aa:	2301      	movs	r3, #1
 80048ac:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80048ae:	4b3a      	ldr	r3, [pc, #232]	; (8004998 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	4a39      	ldr	r2, [pc, #228]	; (8004998 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80048b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80048b8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80048ba:	f7fc fb5d 	bl	8000f78 <HAL_GetTick>
 80048be:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80048c0:	e009      	b.n	80048d6 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80048c2:	f7fc fb59 	bl	8000f78 <HAL_GetTick>
 80048c6:	4602      	mov	r2, r0
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	1ad3      	subs	r3, r2, r3
 80048cc:	2b02      	cmp	r3, #2
 80048ce:	d902      	bls.n	80048d6 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80048d0:	2303      	movs	r3, #3
 80048d2:	74fb      	strb	r3, [r7, #19]
        break;
 80048d4:	e005      	b.n	80048e2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80048d6:	4b30      	ldr	r3, [pc, #192]	; (8004998 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d0ef      	beq.n	80048c2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80048e2:	7cfb      	ldrb	r3, [r7, #19]
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d159      	bne.n	800499c <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80048e8:	4b2a      	ldr	r3, [pc, #168]	; (8004994 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80048ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80048f2:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80048f4:	697b      	ldr	r3, [r7, #20]
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d01e      	beq.n	8004938 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048fe:	697a      	ldr	r2, [r7, #20]
 8004900:	429a      	cmp	r2, r3
 8004902:	d019      	beq.n	8004938 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004904:	4b23      	ldr	r3, [pc, #140]	; (8004994 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004906:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800490a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800490e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004910:	4b20      	ldr	r3, [pc, #128]	; (8004994 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004912:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004916:	4a1f      	ldr	r2, [pc, #124]	; (8004994 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004918:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800491c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004920:	4b1c      	ldr	r3, [pc, #112]	; (8004994 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004922:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004926:	4a1b      	ldr	r2, [pc, #108]	; (8004994 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004928:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800492c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004930:	4a18      	ldr	r2, [pc, #96]	; (8004994 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004932:	697b      	ldr	r3, [r7, #20]
 8004934:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004938:	697b      	ldr	r3, [r7, #20]
 800493a:	f003 0301 	and.w	r3, r3, #1
 800493e:	2b00      	cmp	r3, #0
 8004940:	d016      	beq.n	8004970 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004942:	f7fc fb19 	bl	8000f78 <HAL_GetTick>
 8004946:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004948:	e00b      	b.n	8004962 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800494a:	f7fc fb15 	bl	8000f78 <HAL_GetTick>
 800494e:	4602      	mov	r2, r0
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	1ad3      	subs	r3, r2, r3
 8004954:	f241 3288 	movw	r2, #5000	; 0x1388
 8004958:	4293      	cmp	r3, r2
 800495a:	d902      	bls.n	8004962 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 800495c:	2303      	movs	r3, #3
 800495e:	74fb      	strb	r3, [r7, #19]
            break;
 8004960:	e006      	b.n	8004970 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004962:	4b0c      	ldr	r3, [pc, #48]	; (8004994 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004964:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004968:	f003 0302 	and.w	r3, r3, #2
 800496c:	2b00      	cmp	r3, #0
 800496e:	d0ec      	beq.n	800494a <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8004970:	7cfb      	ldrb	r3, [r7, #19]
 8004972:	2b00      	cmp	r3, #0
 8004974:	d10b      	bne.n	800498e <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004976:	4b07      	ldr	r3, [pc, #28]	; (8004994 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004978:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800497c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004984:	4903      	ldr	r1, [pc, #12]	; (8004994 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004986:	4313      	orrs	r3, r2
 8004988:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800498c:	e008      	b.n	80049a0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800498e:	7cfb      	ldrb	r3, [r7, #19]
 8004990:	74bb      	strb	r3, [r7, #18]
 8004992:	e005      	b.n	80049a0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8004994:	40021000 	.word	0x40021000
 8004998:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800499c:	7cfb      	ldrb	r3, [r7, #19]
 800499e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80049a0:	7c7b      	ldrb	r3, [r7, #17]
 80049a2:	2b01      	cmp	r3, #1
 80049a4:	d105      	bne.n	80049b2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80049a6:	4ba6      	ldr	r3, [pc, #664]	; (8004c40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80049a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049aa:	4aa5      	ldr	r2, [pc, #660]	; (8004c40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80049ac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80049b0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	f003 0301 	and.w	r3, r3, #1
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d00a      	beq.n	80049d4 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80049be:	4ba0      	ldr	r3, [pc, #640]	; (8004c40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80049c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049c4:	f023 0203 	bic.w	r2, r3, #3
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	685b      	ldr	r3, [r3, #4]
 80049cc:	499c      	ldr	r1, [pc, #624]	; (8004c40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80049ce:	4313      	orrs	r3, r2
 80049d0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	f003 0302 	and.w	r3, r3, #2
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d00a      	beq.n	80049f6 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80049e0:	4b97      	ldr	r3, [pc, #604]	; (8004c40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80049e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049e6:	f023 020c 	bic.w	r2, r3, #12
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	689b      	ldr	r3, [r3, #8]
 80049ee:	4994      	ldr	r1, [pc, #592]	; (8004c40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80049f0:	4313      	orrs	r3, r2
 80049f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	f003 0304 	and.w	r3, r3, #4
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d00a      	beq.n	8004a18 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004a02:	4b8f      	ldr	r3, [pc, #572]	; (8004c40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004a04:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a08:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	68db      	ldr	r3, [r3, #12]
 8004a10:	498b      	ldr	r1, [pc, #556]	; (8004c40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004a12:	4313      	orrs	r3, r2
 8004a14:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	f003 0308 	and.w	r3, r3, #8
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d00a      	beq.n	8004a3a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004a24:	4b86      	ldr	r3, [pc, #536]	; (8004c40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004a26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a2a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	691b      	ldr	r3, [r3, #16]
 8004a32:	4983      	ldr	r1, [pc, #524]	; (8004c40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004a34:	4313      	orrs	r3, r2
 8004a36:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	f003 0320 	and.w	r3, r3, #32
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d00a      	beq.n	8004a5c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004a46:	4b7e      	ldr	r3, [pc, #504]	; (8004c40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004a48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a4c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	695b      	ldr	r3, [r3, #20]
 8004a54:	497a      	ldr	r1, [pc, #488]	; (8004c40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004a56:	4313      	orrs	r3, r2
 8004a58:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d00a      	beq.n	8004a7e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004a68:	4b75      	ldr	r3, [pc, #468]	; (8004c40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004a6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a6e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	699b      	ldr	r3, [r3, #24]
 8004a76:	4972      	ldr	r1, [pc, #456]	; (8004c40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004a78:	4313      	orrs	r3, r2
 8004a7a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d00a      	beq.n	8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004a8a:	4b6d      	ldr	r3, [pc, #436]	; (8004c40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004a8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a90:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	69db      	ldr	r3, [r3, #28]
 8004a98:	4969      	ldr	r1, [pc, #420]	; (8004c40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004a9a:	4313      	orrs	r3, r2
 8004a9c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d00a      	beq.n	8004ac2 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004aac:	4b64      	ldr	r3, [pc, #400]	; (8004c40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004aae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ab2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	6a1b      	ldr	r3, [r3, #32]
 8004aba:	4961      	ldr	r1, [pc, #388]	; (8004c40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004abc:	4313      	orrs	r3, r2
 8004abe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d00a      	beq.n	8004ae4 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004ace:	4b5c      	ldr	r3, [pc, #368]	; (8004c40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004ad0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ad4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004adc:	4958      	ldr	r1, [pc, #352]	; (8004c40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004ade:	4313      	orrs	r3, r2
 8004ae0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d015      	beq.n	8004b1c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004af0:	4b53      	ldr	r3, [pc, #332]	; (8004c40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004af2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004af6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004afe:	4950      	ldr	r1, [pc, #320]	; (8004c40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004b00:	4313      	orrs	r3, r2
 8004b02:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b0a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004b0e:	d105      	bne.n	8004b1c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004b10:	4b4b      	ldr	r3, [pc, #300]	; (8004c40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004b12:	68db      	ldr	r3, [r3, #12]
 8004b14:	4a4a      	ldr	r2, [pc, #296]	; (8004c40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004b16:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004b1a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d015      	beq.n	8004b54 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004b28:	4b45      	ldr	r3, [pc, #276]	; (8004c40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004b2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b2e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b36:	4942      	ldr	r1, [pc, #264]	; (8004c40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004b38:	4313      	orrs	r3, r2
 8004b3a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b42:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004b46:	d105      	bne.n	8004b54 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004b48:	4b3d      	ldr	r3, [pc, #244]	; (8004c40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004b4a:	68db      	ldr	r3, [r3, #12]
 8004b4c:	4a3c      	ldr	r2, [pc, #240]	; (8004c40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004b4e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004b52:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d015      	beq.n	8004b8c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004b60:	4b37      	ldr	r3, [pc, #220]	; (8004c40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004b62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b66:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b6e:	4934      	ldr	r1, [pc, #208]	; (8004c40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004b70:	4313      	orrs	r3, r2
 8004b72:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b7a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004b7e:	d105      	bne.n	8004b8c <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004b80:	4b2f      	ldr	r3, [pc, #188]	; (8004c40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004b82:	68db      	ldr	r3, [r3, #12]
 8004b84:	4a2e      	ldr	r2, [pc, #184]	; (8004c40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004b86:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004b8a:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d015      	beq.n	8004bc4 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004b98:	4b29      	ldr	r3, [pc, #164]	; (8004c40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004b9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b9e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ba6:	4926      	ldr	r1, [pc, #152]	; (8004c40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004ba8:	4313      	orrs	r3, r2
 8004baa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004bb2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004bb6:	d105      	bne.n	8004bc4 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004bb8:	4b21      	ldr	r3, [pc, #132]	; (8004c40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004bba:	68db      	ldr	r3, [r3, #12]
 8004bbc:	4a20      	ldr	r2, [pc, #128]	; (8004c40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004bbe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004bc2:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d015      	beq.n	8004bfc <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004bd0:	4b1b      	ldr	r3, [pc, #108]	; (8004c40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004bd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bd6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bde:	4918      	ldr	r1, [pc, #96]	; (8004c40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004be0:	4313      	orrs	r3, r2
 8004be2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bea:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004bee:	d105      	bne.n	8004bfc <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004bf0:	4b13      	ldr	r3, [pc, #76]	; (8004c40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004bf2:	68db      	ldr	r3, [r3, #12]
 8004bf4:	4a12      	ldr	r2, [pc, #72]	; (8004c40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004bf6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004bfa:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d015      	beq.n	8004c34 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004c08:	4b0d      	ldr	r3, [pc, #52]	; (8004c40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004c0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c0e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c16:	490a      	ldr	r1, [pc, #40]	; (8004c40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004c18:	4313      	orrs	r3, r2
 8004c1a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c22:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004c26:	d105      	bne.n	8004c34 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004c28:	4b05      	ldr	r3, [pc, #20]	; (8004c40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004c2a:	68db      	ldr	r3, [r3, #12]
 8004c2c:	4a04      	ldr	r2, [pc, #16]	; (8004c40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004c2e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004c32:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8004c34:	7cbb      	ldrb	r3, [r7, #18]
}
 8004c36:	4618      	mov	r0, r3
 8004c38:	3718      	adds	r7, #24
 8004c3a:	46bd      	mov	sp, r7
 8004c3c:	bd80      	pop	{r7, pc}
 8004c3e:	bf00      	nop
 8004c40:	40021000 	.word	0x40021000

08004c44 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004c44:	b580      	push	{r7, lr}
 8004c46:	b082      	sub	sp, #8
 8004c48:	af00      	add	r7, sp, #0
 8004c4a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d101      	bne.n	8004c56 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004c52:	2301      	movs	r3, #1
 8004c54:	e042      	b.n	8004cdc <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d106      	bne.n	8004c6e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	2200      	movs	r2, #0
 8004c64:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004c68:	6878      	ldr	r0, [r7, #4]
 8004c6a:	f7fc f84f 	bl	8000d0c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	2224      	movs	r2, #36	; 0x24
 8004c72:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	681a      	ldr	r2, [r3, #0]
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	f022 0201 	bic.w	r2, r2, #1
 8004c84:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004c86:	6878      	ldr	r0, [r7, #4]
 8004c88:	f000 f82c 	bl	8004ce4 <UART_SetConfig>
 8004c8c:	4603      	mov	r3, r0
 8004c8e:	2b01      	cmp	r3, #1
 8004c90:	d101      	bne.n	8004c96 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8004c92:	2301      	movs	r3, #1
 8004c94:	e022      	b.n	8004cdc <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d002      	beq.n	8004ca4 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8004c9e:	6878      	ldr	r0, [r7, #4]
 8004ca0:	f000 faec 	bl	800527c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	685a      	ldr	r2, [r3, #4]
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004cb2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	689a      	ldr	r2, [r3, #8]
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004cc2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	681a      	ldr	r2, [r3, #0]
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	f042 0201 	orr.w	r2, r2, #1
 8004cd2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004cd4:	6878      	ldr	r0, [r7, #4]
 8004cd6:	f000 fb73 	bl	80053c0 <UART_CheckIdleState>
 8004cda:	4603      	mov	r3, r0
}
 8004cdc:	4618      	mov	r0, r3
 8004cde:	3708      	adds	r7, #8
 8004ce0:	46bd      	mov	sp, r7
 8004ce2:	bd80      	pop	{r7, pc}

08004ce4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004ce4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004ce8:	b08c      	sub	sp, #48	; 0x30
 8004cea:	af00      	add	r7, sp, #0
 8004cec:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004cee:	2300      	movs	r3, #0
 8004cf0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004cf4:	697b      	ldr	r3, [r7, #20]
 8004cf6:	689a      	ldr	r2, [r3, #8]
 8004cf8:	697b      	ldr	r3, [r7, #20]
 8004cfa:	691b      	ldr	r3, [r3, #16]
 8004cfc:	431a      	orrs	r2, r3
 8004cfe:	697b      	ldr	r3, [r7, #20]
 8004d00:	695b      	ldr	r3, [r3, #20]
 8004d02:	431a      	orrs	r2, r3
 8004d04:	697b      	ldr	r3, [r7, #20]
 8004d06:	69db      	ldr	r3, [r3, #28]
 8004d08:	4313      	orrs	r3, r2
 8004d0a:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004d0c:	697b      	ldr	r3, [r7, #20]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	681a      	ldr	r2, [r3, #0]
 8004d12:	4bab      	ldr	r3, [pc, #684]	; (8004fc0 <UART_SetConfig+0x2dc>)
 8004d14:	4013      	ands	r3, r2
 8004d16:	697a      	ldr	r2, [r7, #20]
 8004d18:	6812      	ldr	r2, [r2, #0]
 8004d1a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004d1c:	430b      	orrs	r3, r1
 8004d1e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004d20:	697b      	ldr	r3, [r7, #20]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	685b      	ldr	r3, [r3, #4]
 8004d26:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004d2a:	697b      	ldr	r3, [r7, #20]
 8004d2c:	68da      	ldr	r2, [r3, #12]
 8004d2e:	697b      	ldr	r3, [r7, #20]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	430a      	orrs	r2, r1
 8004d34:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004d36:	697b      	ldr	r3, [r7, #20]
 8004d38:	699b      	ldr	r3, [r3, #24]
 8004d3a:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004d3c:	697b      	ldr	r3, [r7, #20]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	4aa0      	ldr	r2, [pc, #640]	; (8004fc4 <UART_SetConfig+0x2e0>)
 8004d42:	4293      	cmp	r3, r2
 8004d44:	d004      	beq.n	8004d50 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004d46:	697b      	ldr	r3, [r7, #20]
 8004d48:	6a1b      	ldr	r3, [r3, #32]
 8004d4a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004d4c:	4313      	orrs	r3, r2
 8004d4e:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004d50:	697b      	ldr	r3, [r7, #20]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	689b      	ldr	r3, [r3, #8]
 8004d56:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8004d5a:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8004d5e:	697a      	ldr	r2, [r7, #20]
 8004d60:	6812      	ldr	r2, [r2, #0]
 8004d62:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004d64:	430b      	orrs	r3, r1
 8004d66:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004d68:	697b      	ldr	r3, [r7, #20]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d6e:	f023 010f 	bic.w	r1, r3, #15
 8004d72:	697b      	ldr	r3, [r7, #20]
 8004d74:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004d76:	697b      	ldr	r3, [r7, #20]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	430a      	orrs	r2, r1
 8004d7c:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004d7e:	697b      	ldr	r3, [r7, #20]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	4a91      	ldr	r2, [pc, #580]	; (8004fc8 <UART_SetConfig+0x2e4>)
 8004d84:	4293      	cmp	r3, r2
 8004d86:	d125      	bne.n	8004dd4 <UART_SetConfig+0xf0>
 8004d88:	4b90      	ldr	r3, [pc, #576]	; (8004fcc <UART_SetConfig+0x2e8>)
 8004d8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d8e:	f003 0303 	and.w	r3, r3, #3
 8004d92:	2b03      	cmp	r3, #3
 8004d94:	d81a      	bhi.n	8004dcc <UART_SetConfig+0xe8>
 8004d96:	a201      	add	r2, pc, #4	; (adr r2, 8004d9c <UART_SetConfig+0xb8>)
 8004d98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d9c:	08004dad 	.word	0x08004dad
 8004da0:	08004dbd 	.word	0x08004dbd
 8004da4:	08004db5 	.word	0x08004db5
 8004da8:	08004dc5 	.word	0x08004dc5
 8004dac:	2301      	movs	r3, #1
 8004dae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004db2:	e0d6      	b.n	8004f62 <UART_SetConfig+0x27e>
 8004db4:	2302      	movs	r3, #2
 8004db6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004dba:	e0d2      	b.n	8004f62 <UART_SetConfig+0x27e>
 8004dbc:	2304      	movs	r3, #4
 8004dbe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004dc2:	e0ce      	b.n	8004f62 <UART_SetConfig+0x27e>
 8004dc4:	2308      	movs	r3, #8
 8004dc6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004dca:	e0ca      	b.n	8004f62 <UART_SetConfig+0x27e>
 8004dcc:	2310      	movs	r3, #16
 8004dce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004dd2:	e0c6      	b.n	8004f62 <UART_SetConfig+0x27e>
 8004dd4:	697b      	ldr	r3, [r7, #20]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	4a7d      	ldr	r2, [pc, #500]	; (8004fd0 <UART_SetConfig+0x2ec>)
 8004dda:	4293      	cmp	r3, r2
 8004ddc:	d138      	bne.n	8004e50 <UART_SetConfig+0x16c>
 8004dde:	4b7b      	ldr	r3, [pc, #492]	; (8004fcc <UART_SetConfig+0x2e8>)
 8004de0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004de4:	f003 030c 	and.w	r3, r3, #12
 8004de8:	2b0c      	cmp	r3, #12
 8004dea:	d82d      	bhi.n	8004e48 <UART_SetConfig+0x164>
 8004dec:	a201      	add	r2, pc, #4	; (adr r2, 8004df4 <UART_SetConfig+0x110>)
 8004dee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004df2:	bf00      	nop
 8004df4:	08004e29 	.word	0x08004e29
 8004df8:	08004e49 	.word	0x08004e49
 8004dfc:	08004e49 	.word	0x08004e49
 8004e00:	08004e49 	.word	0x08004e49
 8004e04:	08004e39 	.word	0x08004e39
 8004e08:	08004e49 	.word	0x08004e49
 8004e0c:	08004e49 	.word	0x08004e49
 8004e10:	08004e49 	.word	0x08004e49
 8004e14:	08004e31 	.word	0x08004e31
 8004e18:	08004e49 	.word	0x08004e49
 8004e1c:	08004e49 	.word	0x08004e49
 8004e20:	08004e49 	.word	0x08004e49
 8004e24:	08004e41 	.word	0x08004e41
 8004e28:	2300      	movs	r3, #0
 8004e2a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004e2e:	e098      	b.n	8004f62 <UART_SetConfig+0x27e>
 8004e30:	2302      	movs	r3, #2
 8004e32:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004e36:	e094      	b.n	8004f62 <UART_SetConfig+0x27e>
 8004e38:	2304      	movs	r3, #4
 8004e3a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004e3e:	e090      	b.n	8004f62 <UART_SetConfig+0x27e>
 8004e40:	2308      	movs	r3, #8
 8004e42:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004e46:	e08c      	b.n	8004f62 <UART_SetConfig+0x27e>
 8004e48:	2310      	movs	r3, #16
 8004e4a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004e4e:	e088      	b.n	8004f62 <UART_SetConfig+0x27e>
 8004e50:	697b      	ldr	r3, [r7, #20]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	4a5f      	ldr	r2, [pc, #380]	; (8004fd4 <UART_SetConfig+0x2f0>)
 8004e56:	4293      	cmp	r3, r2
 8004e58:	d125      	bne.n	8004ea6 <UART_SetConfig+0x1c2>
 8004e5a:	4b5c      	ldr	r3, [pc, #368]	; (8004fcc <UART_SetConfig+0x2e8>)
 8004e5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e60:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004e64:	2b30      	cmp	r3, #48	; 0x30
 8004e66:	d016      	beq.n	8004e96 <UART_SetConfig+0x1b2>
 8004e68:	2b30      	cmp	r3, #48	; 0x30
 8004e6a:	d818      	bhi.n	8004e9e <UART_SetConfig+0x1ba>
 8004e6c:	2b20      	cmp	r3, #32
 8004e6e:	d00a      	beq.n	8004e86 <UART_SetConfig+0x1a2>
 8004e70:	2b20      	cmp	r3, #32
 8004e72:	d814      	bhi.n	8004e9e <UART_SetConfig+0x1ba>
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d002      	beq.n	8004e7e <UART_SetConfig+0x19a>
 8004e78:	2b10      	cmp	r3, #16
 8004e7a:	d008      	beq.n	8004e8e <UART_SetConfig+0x1aa>
 8004e7c:	e00f      	b.n	8004e9e <UART_SetConfig+0x1ba>
 8004e7e:	2300      	movs	r3, #0
 8004e80:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004e84:	e06d      	b.n	8004f62 <UART_SetConfig+0x27e>
 8004e86:	2302      	movs	r3, #2
 8004e88:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004e8c:	e069      	b.n	8004f62 <UART_SetConfig+0x27e>
 8004e8e:	2304      	movs	r3, #4
 8004e90:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004e94:	e065      	b.n	8004f62 <UART_SetConfig+0x27e>
 8004e96:	2308      	movs	r3, #8
 8004e98:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004e9c:	e061      	b.n	8004f62 <UART_SetConfig+0x27e>
 8004e9e:	2310      	movs	r3, #16
 8004ea0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004ea4:	e05d      	b.n	8004f62 <UART_SetConfig+0x27e>
 8004ea6:	697b      	ldr	r3, [r7, #20]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	4a4b      	ldr	r2, [pc, #300]	; (8004fd8 <UART_SetConfig+0x2f4>)
 8004eac:	4293      	cmp	r3, r2
 8004eae:	d125      	bne.n	8004efc <UART_SetConfig+0x218>
 8004eb0:	4b46      	ldr	r3, [pc, #280]	; (8004fcc <UART_SetConfig+0x2e8>)
 8004eb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004eb6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004eba:	2bc0      	cmp	r3, #192	; 0xc0
 8004ebc:	d016      	beq.n	8004eec <UART_SetConfig+0x208>
 8004ebe:	2bc0      	cmp	r3, #192	; 0xc0
 8004ec0:	d818      	bhi.n	8004ef4 <UART_SetConfig+0x210>
 8004ec2:	2b80      	cmp	r3, #128	; 0x80
 8004ec4:	d00a      	beq.n	8004edc <UART_SetConfig+0x1f8>
 8004ec6:	2b80      	cmp	r3, #128	; 0x80
 8004ec8:	d814      	bhi.n	8004ef4 <UART_SetConfig+0x210>
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d002      	beq.n	8004ed4 <UART_SetConfig+0x1f0>
 8004ece:	2b40      	cmp	r3, #64	; 0x40
 8004ed0:	d008      	beq.n	8004ee4 <UART_SetConfig+0x200>
 8004ed2:	e00f      	b.n	8004ef4 <UART_SetConfig+0x210>
 8004ed4:	2300      	movs	r3, #0
 8004ed6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004eda:	e042      	b.n	8004f62 <UART_SetConfig+0x27e>
 8004edc:	2302      	movs	r3, #2
 8004ede:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004ee2:	e03e      	b.n	8004f62 <UART_SetConfig+0x27e>
 8004ee4:	2304      	movs	r3, #4
 8004ee6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004eea:	e03a      	b.n	8004f62 <UART_SetConfig+0x27e>
 8004eec:	2308      	movs	r3, #8
 8004eee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004ef2:	e036      	b.n	8004f62 <UART_SetConfig+0x27e>
 8004ef4:	2310      	movs	r3, #16
 8004ef6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004efa:	e032      	b.n	8004f62 <UART_SetConfig+0x27e>
 8004efc:	697b      	ldr	r3, [r7, #20]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	4a30      	ldr	r2, [pc, #192]	; (8004fc4 <UART_SetConfig+0x2e0>)
 8004f02:	4293      	cmp	r3, r2
 8004f04:	d12a      	bne.n	8004f5c <UART_SetConfig+0x278>
 8004f06:	4b31      	ldr	r3, [pc, #196]	; (8004fcc <UART_SetConfig+0x2e8>)
 8004f08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f0c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004f10:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004f14:	d01a      	beq.n	8004f4c <UART_SetConfig+0x268>
 8004f16:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004f1a:	d81b      	bhi.n	8004f54 <UART_SetConfig+0x270>
 8004f1c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004f20:	d00c      	beq.n	8004f3c <UART_SetConfig+0x258>
 8004f22:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004f26:	d815      	bhi.n	8004f54 <UART_SetConfig+0x270>
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d003      	beq.n	8004f34 <UART_SetConfig+0x250>
 8004f2c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004f30:	d008      	beq.n	8004f44 <UART_SetConfig+0x260>
 8004f32:	e00f      	b.n	8004f54 <UART_SetConfig+0x270>
 8004f34:	2300      	movs	r3, #0
 8004f36:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004f3a:	e012      	b.n	8004f62 <UART_SetConfig+0x27e>
 8004f3c:	2302      	movs	r3, #2
 8004f3e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004f42:	e00e      	b.n	8004f62 <UART_SetConfig+0x27e>
 8004f44:	2304      	movs	r3, #4
 8004f46:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004f4a:	e00a      	b.n	8004f62 <UART_SetConfig+0x27e>
 8004f4c:	2308      	movs	r3, #8
 8004f4e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004f52:	e006      	b.n	8004f62 <UART_SetConfig+0x27e>
 8004f54:	2310      	movs	r3, #16
 8004f56:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004f5a:	e002      	b.n	8004f62 <UART_SetConfig+0x27e>
 8004f5c:	2310      	movs	r3, #16
 8004f5e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004f62:	697b      	ldr	r3, [r7, #20]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	4a17      	ldr	r2, [pc, #92]	; (8004fc4 <UART_SetConfig+0x2e0>)
 8004f68:	4293      	cmp	r3, r2
 8004f6a:	f040 80a8 	bne.w	80050be <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004f6e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004f72:	2b08      	cmp	r3, #8
 8004f74:	d834      	bhi.n	8004fe0 <UART_SetConfig+0x2fc>
 8004f76:	a201      	add	r2, pc, #4	; (adr r2, 8004f7c <UART_SetConfig+0x298>)
 8004f78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f7c:	08004fa1 	.word	0x08004fa1
 8004f80:	08004fe1 	.word	0x08004fe1
 8004f84:	08004fa9 	.word	0x08004fa9
 8004f88:	08004fe1 	.word	0x08004fe1
 8004f8c:	08004faf 	.word	0x08004faf
 8004f90:	08004fe1 	.word	0x08004fe1
 8004f94:	08004fe1 	.word	0x08004fe1
 8004f98:	08004fe1 	.word	0x08004fe1
 8004f9c:	08004fb7 	.word	0x08004fb7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004fa0:	f7ff fbee 	bl	8004780 <HAL_RCC_GetPCLK1Freq>
 8004fa4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004fa6:	e021      	b.n	8004fec <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004fa8:	4b0c      	ldr	r3, [pc, #48]	; (8004fdc <UART_SetConfig+0x2f8>)
 8004faa:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004fac:	e01e      	b.n	8004fec <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004fae:	f7ff fb79 	bl	80046a4 <HAL_RCC_GetSysClockFreq>
 8004fb2:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004fb4:	e01a      	b.n	8004fec <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004fb6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004fba:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004fbc:	e016      	b.n	8004fec <UART_SetConfig+0x308>
 8004fbe:	bf00      	nop
 8004fc0:	cfff69f3 	.word	0xcfff69f3
 8004fc4:	40008000 	.word	0x40008000
 8004fc8:	40013800 	.word	0x40013800
 8004fcc:	40021000 	.word	0x40021000
 8004fd0:	40004400 	.word	0x40004400
 8004fd4:	40004800 	.word	0x40004800
 8004fd8:	40004c00 	.word	0x40004c00
 8004fdc:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8004fe0:	2300      	movs	r3, #0
 8004fe2:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8004fe4:	2301      	movs	r3, #1
 8004fe6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8004fea:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004fec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	f000 812a 	beq.w	8005248 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004ff4:	697b      	ldr	r3, [r7, #20]
 8004ff6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ff8:	4a9e      	ldr	r2, [pc, #632]	; (8005274 <UART_SetConfig+0x590>)
 8004ffa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004ffe:	461a      	mov	r2, r3
 8005000:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005002:	fbb3 f3f2 	udiv	r3, r3, r2
 8005006:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005008:	697b      	ldr	r3, [r7, #20]
 800500a:	685a      	ldr	r2, [r3, #4]
 800500c:	4613      	mov	r3, r2
 800500e:	005b      	lsls	r3, r3, #1
 8005010:	4413      	add	r3, r2
 8005012:	69ba      	ldr	r2, [r7, #24]
 8005014:	429a      	cmp	r2, r3
 8005016:	d305      	bcc.n	8005024 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005018:	697b      	ldr	r3, [r7, #20]
 800501a:	685b      	ldr	r3, [r3, #4]
 800501c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800501e:	69ba      	ldr	r2, [r7, #24]
 8005020:	429a      	cmp	r2, r3
 8005022:	d903      	bls.n	800502c <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 8005024:	2301      	movs	r3, #1
 8005026:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800502a:	e10d      	b.n	8005248 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800502c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800502e:	2200      	movs	r2, #0
 8005030:	60bb      	str	r3, [r7, #8]
 8005032:	60fa      	str	r2, [r7, #12]
 8005034:	697b      	ldr	r3, [r7, #20]
 8005036:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005038:	4a8e      	ldr	r2, [pc, #568]	; (8005274 <UART_SetConfig+0x590>)
 800503a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800503e:	b29b      	uxth	r3, r3
 8005040:	2200      	movs	r2, #0
 8005042:	603b      	str	r3, [r7, #0]
 8005044:	607a      	str	r2, [r7, #4]
 8005046:	e9d7 2300 	ldrd	r2, r3, [r7]
 800504a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800504e:	f7fb f8e3 	bl	8000218 <__aeabi_uldivmod>
 8005052:	4602      	mov	r2, r0
 8005054:	460b      	mov	r3, r1
 8005056:	4610      	mov	r0, r2
 8005058:	4619      	mov	r1, r3
 800505a:	f04f 0200 	mov.w	r2, #0
 800505e:	f04f 0300 	mov.w	r3, #0
 8005062:	020b      	lsls	r3, r1, #8
 8005064:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005068:	0202      	lsls	r2, r0, #8
 800506a:	6979      	ldr	r1, [r7, #20]
 800506c:	6849      	ldr	r1, [r1, #4]
 800506e:	0849      	lsrs	r1, r1, #1
 8005070:	2000      	movs	r0, #0
 8005072:	460c      	mov	r4, r1
 8005074:	4605      	mov	r5, r0
 8005076:	eb12 0804 	adds.w	r8, r2, r4
 800507a:	eb43 0905 	adc.w	r9, r3, r5
 800507e:	697b      	ldr	r3, [r7, #20]
 8005080:	685b      	ldr	r3, [r3, #4]
 8005082:	2200      	movs	r2, #0
 8005084:	469a      	mov	sl, r3
 8005086:	4693      	mov	fp, r2
 8005088:	4652      	mov	r2, sl
 800508a:	465b      	mov	r3, fp
 800508c:	4640      	mov	r0, r8
 800508e:	4649      	mov	r1, r9
 8005090:	f7fb f8c2 	bl	8000218 <__aeabi_uldivmod>
 8005094:	4602      	mov	r2, r0
 8005096:	460b      	mov	r3, r1
 8005098:	4613      	mov	r3, r2
 800509a:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800509c:	6a3b      	ldr	r3, [r7, #32]
 800509e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80050a2:	d308      	bcc.n	80050b6 <UART_SetConfig+0x3d2>
 80050a4:	6a3b      	ldr	r3, [r7, #32]
 80050a6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80050aa:	d204      	bcs.n	80050b6 <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 80050ac:	697b      	ldr	r3, [r7, #20]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	6a3a      	ldr	r2, [r7, #32]
 80050b2:	60da      	str	r2, [r3, #12]
 80050b4:	e0c8      	b.n	8005248 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 80050b6:	2301      	movs	r3, #1
 80050b8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80050bc:	e0c4      	b.n	8005248 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80050be:	697b      	ldr	r3, [r7, #20]
 80050c0:	69db      	ldr	r3, [r3, #28]
 80050c2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80050c6:	d167      	bne.n	8005198 <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 80050c8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80050cc:	2b08      	cmp	r3, #8
 80050ce:	d828      	bhi.n	8005122 <UART_SetConfig+0x43e>
 80050d0:	a201      	add	r2, pc, #4	; (adr r2, 80050d8 <UART_SetConfig+0x3f4>)
 80050d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050d6:	bf00      	nop
 80050d8:	080050fd 	.word	0x080050fd
 80050dc:	08005105 	.word	0x08005105
 80050e0:	0800510d 	.word	0x0800510d
 80050e4:	08005123 	.word	0x08005123
 80050e8:	08005113 	.word	0x08005113
 80050ec:	08005123 	.word	0x08005123
 80050f0:	08005123 	.word	0x08005123
 80050f4:	08005123 	.word	0x08005123
 80050f8:	0800511b 	.word	0x0800511b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80050fc:	f7ff fb40 	bl	8004780 <HAL_RCC_GetPCLK1Freq>
 8005100:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005102:	e014      	b.n	800512e <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005104:	f7ff fb52 	bl	80047ac <HAL_RCC_GetPCLK2Freq>
 8005108:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800510a:	e010      	b.n	800512e <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800510c:	4b5a      	ldr	r3, [pc, #360]	; (8005278 <UART_SetConfig+0x594>)
 800510e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005110:	e00d      	b.n	800512e <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005112:	f7ff fac7 	bl	80046a4 <HAL_RCC_GetSysClockFreq>
 8005116:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005118:	e009      	b.n	800512e <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800511a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800511e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005120:	e005      	b.n	800512e <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 8005122:	2300      	movs	r3, #0
 8005124:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8005126:	2301      	movs	r3, #1
 8005128:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800512c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800512e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005130:	2b00      	cmp	r3, #0
 8005132:	f000 8089 	beq.w	8005248 <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005136:	697b      	ldr	r3, [r7, #20]
 8005138:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800513a:	4a4e      	ldr	r2, [pc, #312]	; (8005274 <UART_SetConfig+0x590>)
 800513c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005140:	461a      	mov	r2, r3
 8005142:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005144:	fbb3 f3f2 	udiv	r3, r3, r2
 8005148:	005a      	lsls	r2, r3, #1
 800514a:	697b      	ldr	r3, [r7, #20]
 800514c:	685b      	ldr	r3, [r3, #4]
 800514e:	085b      	lsrs	r3, r3, #1
 8005150:	441a      	add	r2, r3
 8005152:	697b      	ldr	r3, [r7, #20]
 8005154:	685b      	ldr	r3, [r3, #4]
 8005156:	fbb2 f3f3 	udiv	r3, r2, r3
 800515a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800515c:	6a3b      	ldr	r3, [r7, #32]
 800515e:	2b0f      	cmp	r3, #15
 8005160:	d916      	bls.n	8005190 <UART_SetConfig+0x4ac>
 8005162:	6a3b      	ldr	r3, [r7, #32]
 8005164:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005168:	d212      	bcs.n	8005190 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800516a:	6a3b      	ldr	r3, [r7, #32]
 800516c:	b29b      	uxth	r3, r3
 800516e:	f023 030f 	bic.w	r3, r3, #15
 8005172:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005174:	6a3b      	ldr	r3, [r7, #32]
 8005176:	085b      	lsrs	r3, r3, #1
 8005178:	b29b      	uxth	r3, r3
 800517a:	f003 0307 	and.w	r3, r3, #7
 800517e:	b29a      	uxth	r2, r3
 8005180:	8bfb      	ldrh	r3, [r7, #30]
 8005182:	4313      	orrs	r3, r2
 8005184:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8005186:	697b      	ldr	r3, [r7, #20]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	8bfa      	ldrh	r2, [r7, #30]
 800518c:	60da      	str	r2, [r3, #12]
 800518e:	e05b      	b.n	8005248 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8005190:	2301      	movs	r3, #1
 8005192:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8005196:	e057      	b.n	8005248 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005198:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800519c:	2b08      	cmp	r3, #8
 800519e:	d828      	bhi.n	80051f2 <UART_SetConfig+0x50e>
 80051a0:	a201      	add	r2, pc, #4	; (adr r2, 80051a8 <UART_SetConfig+0x4c4>)
 80051a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051a6:	bf00      	nop
 80051a8:	080051cd 	.word	0x080051cd
 80051ac:	080051d5 	.word	0x080051d5
 80051b0:	080051dd 	.word	0x080051dd
 80051b4:	080051f3 	.word	0x080051f3
 80051b8:	080051e3 	.word	0x080051e3
 80051bc:	080051f3 	.word	0x080051f3
 80051c0:	080051f3 	.word	0x080051f3
 80051c4:	080051f3 	.word	0x080051f3
 80051c8:	080051eb 	.word	0x080051eb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80051cc:	f7ff fad8 	bl	8004780 <HAL_RCC_GetPCLK1Freq>
 80051d0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80051d2:	e014      	b.n	80051fe <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80051d4:	f7ff faea 	bl	80047ac <HAL_RCC_GetPCLK2Freq>
 80051d8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80051da:	e010      	b.n	80051fe <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80051dc:	4b26      	ldr	r3, [pc, #152]	; (8005278 <UART_SetConfig+0x594>)
 80051de:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80051e0:	e00d      	b.n	80051fe <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80051e2:	f7ff fa5f 	bl	80046a4 <HAL_RCC_GetSysClockFreq>
 80051e6:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80051e8:	e009      	b.n	80051fe <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80051ea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80051ee:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80051f0:	e005      	b.n	80051fe <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 80051f2:	2300      	movs	r3, #0
 80051f4:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80051f6:	2301      	movs	r3, #1
 80051f8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80051fc:	bf00      	nop
    }

    if (pclk != 0U)
 80051fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005200:	2b00      	cmp	r3, #0
 8005202:	d021      	beq.n	8005248 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005204:	697b      	ldr	r3, [r7, #20]
 8005206:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005208:	4a1a      	ldr	r2, [pc, #104]	; (8005274 <UART_SetConfig+0x590>)
 800520a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800520e:	461a      	mov	r2, r3
 8005210:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005212:	fbb3 f2f2 	udiv	r2, r3, r2
 8005216:	697b      	ldr	r3, [r7, #20]
 8005218:	685b      	ldr	r3, [r3, #4]
 800521a:	085b      	lsrs	r3, r3, #1
 800521c:	441a      	add	r2, r3
 800521e:	697b      	ldr	r3, [r7, #20]
 8005220:	685b      	ldr	r3, [r3, #4]
 8005222:	fbb2 f3f3 	udiv	r3, r2, r3
 8005226:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005228:	6a3b      	ldr	r3, [r7, #32]
 800522a:	2b0f      	cmp	r3, #15
 800522c:	d909      	bls.n	8005242 <UART_SetConfig+0x55e>
 800522e:	6a3b      	ldr	r3, [r7, #32]
 8005230:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005234:	d205      	bcs.n	8005242 <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005236:	6a3b      	ldr	r3, [r7, #32]
 8005238:	b29a      	uxth	r2, r3
 800523a:	697b      	ldr	r3, [r7, #20]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	60da      	str	r2, [r3, #12]
 8005240:	e002      	b.n	8005248 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8005242:	2301      	movs	r3, #1
 8005244:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005248:	697b      	ldr	r3, [r7, #20]
 800524a:	2201      	movs	r2, #1
 800524c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8005250:	697b      	ldr	r3, [r7, #20]
 8005252:	2201      	movs	r2, #1
 8005254:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005258:	697b      	ldr	r3, [r7, #20]
 800525a:	2200      	movs	r2, #0
 800525c:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800525e:	697b      	ldr	r3, [r7, #20]
 8005260:	2200      	movs	r2, #0
 8005262:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8005264:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8005268:	4618      	mov	r0, r3
 800526a:	3730      	adds	r7, #48	; 0x30
 800526c:	46bd      	mov	sp, r7
 800526e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005272:	bf00      	nop
 8005274:	0800a168 	.word	0x0800a168
 8005278:	00f42400 	.word	0x00f42400

0800527c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800527c:	b480      	push	{r7}
 800527e:	b083      	sub	sp, #12
 8005280:	af00      	add	r7, sp, #0
 8005282:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005288:	f003 0301 	and.w	r3, r3, #1
 800528c:	2b00      	cmp	r3, #0
 800528e:	d00a      	beq.n	80052a6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	685b      	ldr	r3, [r3, #4]
 8005296:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	430a      	orrs	r2, r1
 80052a4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052aa:	f003 0302 	and.w	r3, r3, #2
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d00a      	beq.n	80052c8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	685b      	ldr	r3, [r3, #4]
 80052b8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	430a      	orrs	r2, r1
 80052c6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052cc:	f003 0304 	and.w	r3, r3, #4
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d00a      	beq.n	80052ea <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	685b      	ldr	r3, [r3, #4]
 80052da:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	430a      	orrs	r2, r1
 80052e8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052ee:	f003 0308 	and.w	r3, r3, #8
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d00a      	beq.n	800530c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	685b      	ldr	r3, [r3, #4]
 80052fc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	430a      	orrs	r2, r1
 800530a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005310:	f003 0310 	and.w	r3, r3, #16
 8005314:	2b00      	cmp	r3, #0
 8005316:	d00a      	beq.n	800532e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	689b      	ldr	r3, [r3, #8]
 800531e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	430a      	orrs	r2, r1
 800532c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005332:	f003 0320 	and.w	r3, r3, #32
 8005336:	2b00      	cmp	r3, #0
 8005338:	d00a      	beq.n	8005350 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	689b      	ldr	r3, [r3, #8]
 8005340:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	430a      	orrs	r2, r1
 800534e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005354:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005358:	2b00      	cmp	r3, #0
 800535a:	d01a      	beq.n	8005392 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	685b      	ldr	r3, [r3, #4]
 8005362:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	430a      	orrs	r2, r1
 8005370:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005376:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800537a:	d10a      	bne.n	8005392 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	685b      	ldr	r3, [r3, #4]
 8005382:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	430a      	orrs	r2, r1
 8005390:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005396:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800539a:	2b00      	cmp	r3, #0
 800539c:	d00a      	beq.n	80053b4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	685b      	ldr	r3, [r3, #4]
 80053a4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	430a      	orrs	r2, r1
 80053b2:	605a      	str	r2, [r3, #4]
  }
}
 80053b4:	bf00      	nop
 80053b6:	370c      	adds	r7, #12
 80053b8:	46bd      	mov	sp, r7
 80053ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053be:	4770      	bx	lr

080053c0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80053c0:	b580      	push	{r7, lr}
 80053c2:	b086      	sub	sp, #24
 80053c4:	af02      	add	r7, sp, #8
 80053c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	2200      	movs	r2, #0
 80053cc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80053d0:	f7fb fdd2 	bl	8000f78 <HAL_GetTick>
 80053d4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	f003 0308 	and.w	r3, r3, #8
 80053e0:	2b08      	cmp	r3, #8
 80053e2:	d10e      	bne.n	8005402 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80053e4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80053e8:	9300      	str	r3, [sp, #0]
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	2200      	movs	r2, #0
 80053ee:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80053f2:	6878      	ldr	r0, [r7, #4]
 80053f4:	f000 f82f 	bl	8005456 <UART_WaitOnFlagUntilTimeout>
 80053f8:	4603      	mov	r3, r0
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d001      	beq.n	8005402 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80053fe:	2303      	movs	r3, #3
 8005400:	e025      	b.n	800544e <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	f003 0304 	and.w	r3, r3, #4
 800540c:	2b04      	cmp	r3, #4
 800540e:	d10e      	bne.n	800542e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005410:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005414:	9300      	str	r3, [sp, #0]
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	2200      	movs	r2, #0
 800541a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800541e:	6878      	ldr	r0, [r7, #4]
 8005420:	f000 f819 	bl	8005456 <UART_WaitOnFlagUntilTimeout>
 8005424:	4603      	mov	r3, r0
 8005426:	2b00      	cmp	r3, #0
 8005428:	d001      	beq.n	800542e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800542a:	2303      	movs	r3, #3
 800542c:	e00f      	b.n	800544e <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	2220      	movs	r2, #32
 8005432:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	2220      	movs	r2, #32
 800543a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	2200      	movs	r2, #0
 8005442:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	2200      	movs	r2, #0
 8005448:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800544c:	2300      	movs	r3, #0
}
 800544e:	4618      	mov	r0, r3
 8005450:	3710      	adds	r7, #16
 8005452:	46bd      	mov	sp, r7
 8005454:	bd80      	pop	{r7, pc}

08005456 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005456:	b580      	push	{r7, lr}
 8005458:	b09c      	sub	sp, #112	; 0x70
 800545a:	af00      	add	r7, sp, #0
 800545c:	60f8      	str	r0, [r7, #12]
 800545e:	60b9      	str	r1, [r7, #8]
 8005460:	603b      	str	r3, [r7, #0]
 8005462:	4613      	mov	r3, r2
 8005464:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005466:	e0a9      	b.n	80055bc <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005468:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800546a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800546e:	f000 80a5 	beq.w	80055bc <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005472:	f7fb fd81 	bl	8000f78 <HAL_GetTick>
 8005476:	4602      	mov	r2, r0
 8005478:	683b      	ldr	r3, [r7, #0]
 800547a:	1ad3      	subs	r3, r2, r3
 800547c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800547e:	429a      	cmp	r2, r3
 8005480:	d302      	bcc.n	8005488 <UART_WaitOnFlagUntilTimeout+0x32>
 8005482:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005484:	2b00      	cmp	r3, #0
 8005486:	d140      	bne.n	800550a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800548e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005490:	e853 3f00 	ldrex	r3, [r3]
 8005494:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005496:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005498:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800549c:	667b      	str	r3, [r7, #100]	; 0x64
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	461a      	mov	r2, r3
 80054a4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80054a6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80054a8:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054aa:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80054ac:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80054ae:	e841 2300 	strex	r3, r2, [r1]
 80054b2:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80054b4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d1e6      	bne.n	8005488 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	3308      	adds	r3, #8
 80054c0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80054c4:	e853 3f00 	ldrex	r3, [r3]
 80054c8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80054ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054cc:	f023 0301 	bic.w	r3, r3, #1
 80054d0:	663b      	str	r3, [r7, #96]	; 0x60
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	3308      	adds	r3, #8
 80054d8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80054da:	64ba      	str	r2, [r7, #72]	; 0x48
 80054dc:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054de:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80054e0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80054e2:	e841 2300 	strex	r3, r2, [r1]
 80054e6:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80054e8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d1e5      	bne.n	80054ba <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	2220      	movs	r2, #32
 80054f2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	2220      	movs	r2, #32
 80054fa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	2200      	movs	r2, #0
 8005502:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8005506:	2303      	movs	r3, #3
 8005508:	e069      	b.n	80055de <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	f003 0304 	and.w	r3, r3, #4
 8005514:	2b00      	cmp	r3, #0
 8005516:	d051      	beq.n	80055bc <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	69db      	ldr	r3, [r3, #28]
 800551e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005522:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005526:	d149      	bne.n	80055bc <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005530:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005538:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800553a:	e853 3f00 	ldrex	r3, [r3]
 800553e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005540:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005542:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005546:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	461a      	mov	r2, r3
 800554e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005550:	637b      	str	r3, [r7, #52]	; 0x34
 8005552:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005554:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005556:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005558:	e841 2300 	strex	r3, r2, [r1]
 800555c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800555e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005560:	2b00      	cmp	r3, #0
 8005562:	d1e6      	bne.n	8005532 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	3308      	adds	r3, #8
 800556a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800556c:	697b      	ldr	r3, [r7, #20]
 800556e:	e853 3f00 	ldrex	r3, [r3]
 8005572:	613b      	str	r3, [r7, #16]
   return(result);
 8005574:	693b      	ldr	r3, [r7, #16]
 8005576:	f023 0301 	bic.w	r3, r3, #1
 800557a:	66bb      	str	r3, [r7, #104]	; 0x68
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	3308      	adds	r3, #8
 8005582:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005584:	623a      	str	r2, [r7, #32]
 8005586:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005588:	69f9      	ldr	r1, [r7, #28]
 800558a:	6a3a      	ldr	r2, [r7, #32]
 800558c:	e841 2300 	strex	r3, r2, [r1]
 8005590:	61bb      	str	r3, [r7, #24]
   return(result);
 8005592:	69bb      	ldr	r3, [r7, #24]
 8005594:	2b00      	cmp	r3, #0
 8005596:	d1e5      	bne.n	8005564 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	2220      	movs	r2, #32
 800559c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	2220      	movs	r2, #32
 80055a4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	2220      	movs	r2, #32
 80055ac:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	2200      	movs	r2, #0
 80055b4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 80055b8:	2303      	movs	r3, #3
 80055ba:	e010      	b.n	80055de <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	69da      	ldr	r2, [r3, #28]
 80055c2:	68bb      	ldr	r3, [r7, #8]
 80055c4:	4013      	ands	r3, r2
 80055c6:	68ba      	ldr	r2, [r7, #8]
 80055c8:	429a      	cmp	r2, r3
 80055ca:	bf0c      	ite	eq
 80055cc:	2301      	moveq	r3, #1
 80055ce:	2300      	movne	r3, #0
 80055d0:	b2db      	uxtb	r3, r3
 80055d2:	461a      	mov	r2, r3
 80055d4:	79fb      	ldrb	r3, [r7, #7]
 80055d6:	429a      	cmp	r2, r3
 80055d8:	f43f af46 	beq.w	8005468 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80055dc:	2300      	movs	r3, #0
}
 80055de:	4618      	mov	r0, r3
 80055e0:	3770      	adds	r7, #112	; 0x70
 80055e2:	46bd      	mov	sp, r7
 80055e4:	bd80      	pop	{r7, pc}

080055e6 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80055e6:	b480      	push	{r7}
 80055e8:	b085      	sub	sp, #20
 80055ea:	af00      	add	r7, sp, #0
 80055ec:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80055f4:	2b01      	cmp	r3, #1
 80055f6:	d101      	bne.n	80055fc <HAL_UARTEx_DisableFifoMode+0x16>
 80055f8:	2302      	movs	r3, #2
 80055fa:	e027      	b.n	800564c <HAL_UARTEx_DisableFifoMode+0x66>
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	2201      	movs	r2, #1
 8005600:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	2224      	movs	r2, #36	; 0x24
 8005608:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	681a      	ldr	r2, [r3, #0]
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	f022 0201 	bic.w	r2, r2, #1
 8005622:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800562a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	2200      	movs	r2, #0
 8005630:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	68fa      	ldr	r2, [r7, #12]
 8005638:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	2220      	movs	r2, #32
 800563e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	2200      	movs	r2, #0
 8005646:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800564a:	2300      	movs	r3, #0
}
 800564c:	4618      	mov	r0, r3
 800564e:	3714      	adds	r7, #20
 8005650:	46bd      	mov	sp, r7
 8005652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005656:	4770      	bx	lr

08005658 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005658:	b580      	push	{r7, lr}
 800565a:	b084      	sub	sp, #16
 800565c:	af00      	add	r7, sp, #0
 800565e:	6078      	str	r0, [r7, #4]
 8005660:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005668:	2b01      	cmp	r3, #1
 800566a:	d101      	bne.n	8005670 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800566c:	2302      	movs	r3, #2
 800566e:	e02d      	b.n	80056cc <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	2201      	movs	r2, #1
 8005674:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	2224      	movs	r2, #36	; 0x24
 800567c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	681a      	ldr	r2, [r3, #0]
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	f022 0201 	bic.w	r2, r2, #1
 8005696:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	689b      	ldr	r3, [r3, #8]
 800569e:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	683a      	ldr	r2, [r7, #0]
 80056a8:	430a      	orrs	r2, r1
 80056aa:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80056ac:	6878      	ldr	r0, [r7, #4]
 80056ae:	f000 f84f 	bl	8005750 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	68fa      	ldr	r2, [r7, #12]
 80056b8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	2220      	movs	r2, #32
 80056be:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	2200      	movs	r2, #0
 80056c6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80056ca:	2300      	movs	r3, #0
}
 80056cc:	4618      	mov	r0, r3
 80056ce:	3710      	adds	r7, #16
 80056d0:	46bd      	mov	sp, r7
 80056d2:	bd80      	pop	{r7, pc}

080056d4 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80056d4:	b580      	push	{r7, lr}
 80056d6:	b084      	sub	sp, #16
 80056d8:	af00      	add	r7, sp, #0
 80056da:	6078      	str	r0, [r7, #4]
 80056dc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80056e4:	2b01      	cmp	r3, #1
 80056e6:	d101      	bne.n	80056ec <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80056e8:	2302      	movs	r3, #2
 80056ea:	e02d      	b.n	8005748 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	2201      	movs	r2, #1
 80056f0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	2224      	movs	r2, #36	; 0x24
 80056f8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	681a      	ldr	r2, [r3, #0]
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	f022 0201 	bic.w	r2, r2, #1
 8005712:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	689b      	ldr	r3, [r3, #8]
 800571a:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	683a      	ldr	r2, [r7, #0]
 8005724:	430a      	orrs	r2, r1
 8005726:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005728:	6878      	ldr	r0, [r7, #4]
 800572a:	f000 f811 	bl	8005750 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	68fa      	ldr	r2, [r7, #12]
 8005734:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	2220      	movs	r2, #32
 800573a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	2200      	movs	r2, #0
 8005742:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005746:	2300      	movs	r3, #0
}
 8005748:	4618      	mov	r0, r3
 800574a:	3710      	adds	r7, #16
 800574c:	46bd      	mov	sp, r7
 800574e:	bd80      	pop	{r7, pc}

08005750 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005750:	b480      	push	{r7}
 8005752:	b085      	sub	sp, #20
 8005754:	af00      	add	r7, sp, #0
 8005756:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800575c:	2b00      	cmp	r3, #0
 800575e:	d108      	bne.n	8005772 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	2201      	movs	r2, #1
 8005764:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	2201      	movs	r2, #1
 800576c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005770:	e031      	b.n	80057d6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005772:	2308      	movs	r3, #8
 8005774:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005776:	2308      	movs	r3, #8
 8005778:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	689b      	ldr	r3, [r3, #8]
 8005780:	0e5b      	lsrs	r3, r3, #25
 8005782:	b2db      	uxtb	r3, r3
 8005784:	f003 0307 	and.w	r3, r3, #7
 8005788:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	689b      	ldr	r3, [r3, #8]
 8005790:	0f5b      	lsrs	r3, r3, #29
 8005792:	b2db      	uxtb	r3, r3
 8005794:	f003 0307 	and.w	r3, r3, #7
 8005798:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800579a:	7bbb      	ldrb	r3, [r7, #14]
 800579c:	7b3a      	ldrb	r2, [r7, #12]
 800579e:	4911      	ldr	r1, [pc, #68]	; (80057e4 <UARTEx_SetNbDataToProcess+0x94>)
 80057a0:	5c8a      	ldrb	r2, [r1, r2]
 80057a2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80057a6:	7b3a      	ldrb	r2, [r7, #12]
 80057a8:	490f      	ldr	r1, [pc, #60]	; (80057e8 <UARTEx_SetNbDataToProcess+0x98>)
 80057aa:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80057ac:	fb93 f3f2 	sdiv	r3, r3, r2
 80057b0:	b29a      	uxth	r2, r3
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80057b8:	7bfb      	ldrb	r3, [r7, #15]
 80057ba:	7b7a      	ldrb	r2, [r7, #13]
 80057bc:	4909      	ldr	r1, [pc, #36]	; (80057e4 <UARTEx_SetNbDataToProcess+0x94>)
 80057be:	5c8a      	ldrb	r2, [r1, r2]
 80057c0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80057c4:	7b7a      	ldrb	r2, [r7, #13]
 80057c6:	4908      	ldr	r1, [pc, #32]	; (80057e8 <UARTEx_SetNbDataToProcess+0x98>)
 80057c8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80057ca:	fb93 f3f2 	sdiv	r3, r3, r2
 80057ce:	b29a      	uxth	r2, r3
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80057d6:	bf00      	nop
 80057d8:	3714      	adds	r7, #20
 80057da:	46bd      	mov	sp, r7
 80057dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e0:	4770      	bx	lr
 80057e2:	bf00      	nop
 80057e4:	0800a180 	.word	0x0800a180
 80057e8:	0800a188 	.word	0x0800a188

080057ec <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 80057ec:	b480      	push	{r7}
 80057ee:	b085      	sub	sp, #20
 80057f0:	af00      	add	r7, sp, #0
 80057f2:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	2200      	movs	r2, #0
 80057f8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80057fc:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8005800:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	b29a      	uxth	r2, r3
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800580c:	2300      	movs	r3, #0
}
 800580e:	4618      	mov	r0, r3
 8005810:	3714      	adds	r7, #20
 8005812:	46bd      	mov	sp, r7
 8005814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005818:	4770      	bx	lr

0800581a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800581a:	b480      	push	{r7}
 800581c:	b085      	sub	sp, #20
 800581e:	af00      	add	r7, sp, #0
 8005820:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8005822:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8005826:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800582e:	b29a      	uxth	r2, r3
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	b29b      	uxth	r3, r3
 8005834:	43db      	mvns	r3, r3
 8005836:	b29b      	uxth	r3, r3
 8005838:	4013      	ands	r3, r2
 800583a:	b29a      	uxth	r2, r3
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005842:	2300      	movs	r3, #0
}
 8005844:	4618      	mov	r0, r3
 8005846:	3714      	adds	r7, #20
 8005848:	46bd      	mov	sp, r7
 800584a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800584e:	4770      	bx	lr

08005850 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8005850:	b084      	sub	sp, #16
 8005852:	b480      	push	{r7}
 8005854:	b083      	sub	sp, #12
 8005856:	af00      	add	r7, sp, #0
 8005858:	6078      	str	r0, [r7, #4]
 800585a:	f107 0014 	add.w	r0, r7, #20
 800585e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	2201      	movs	r2, #1
 8005866:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	2200      	movs	r2, #0
 800586e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	2200      	movs	r2, #0
 8005876:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	2200      	movs	r2, #0
 800587e:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8005882:	2300      	movs	r3, #0
}
 8005884:	4618      	mov	r0, r3
 8005886:	370c      	adds	r7, #12
 8005888:	46bd      	mov	sp, r7
 800588a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800588e:	b004      	add	sp, #16
 8005890:	4770      	bx	lr
	...

08005894 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005894:	b480      	push	{r7}
 8005896:	b09d      	sub	sp, #116	; 0x74
 8005898:	af00      	add	r7, sp, #0
 800589a:	6078      	str	r0, [r7, #4]
 800589c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800589e:	2300      	movs	r3, #0
 80058a0:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80058a4:	687a      	ldr	r2, [r7, #4]
 80058a6:	683b      	ldr	r3, [r7, #0]
 80058a8:	781b      	ldrb	r3, [r3, #0]
 80058aa:	009b      	lsls	r3, r3, #2
 80058ac:	4413      	add	r3, r2
 80058ae:	881b      	ldrh	r3, [r3, #0]
 80058b0:	b29b      	uxth	r3, r3
 80058b2:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 80058b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80058ba:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 80058be:	683b      	ldr	r3, [r7, #0]
 80058c0:	78db      	ldrb	r3, [r3, #3]
 80058c2:	2b03      	cmp	r3, #3
 80058c4:	d81f      	bhi.n	8005906 <USB_ActivateEndpoint+0x72>
 80058c6:	a201      	add	r2, pc, #4	; (adr r2, 80058cc <USB_ActivateEndpoint+0x38>)
 80058c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058cc:	080058dd 	.word	0x080058dd
 80058d0:	080058f9 	.word	0x080058f9
 80058d4:	0800590f 	.word	0x0800590f
 80058d8:	080058eb 	.word	0x080058eb
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 80058dc:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80058e0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80058e4:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 80058e8:	e012      	b.n	8005910 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 80058ea:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80058ee:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 80058f2:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 80058f6:	e00b      	b.n	8005910 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80058f8:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80058fc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005900:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8005904:	e004      	b.n	8005910 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8005906:	2301      	movs	r3, #1
 8005908:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 800590c:	e000      	b.n	8005910 <USB_ActivateEndpoint+0x7c>
      break;
 800590e:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8005910:	687a      	ldr	r2, [r7, #4]
 8005912:	683b      	ldr	r3, [r7, #0]
 8005914:	781b      	ldrb	r3, [r3, #0]
 8005916:	009b      	lsls	r3, r3, #2
 8005918:	441a      	add	r2, r3
 800591a:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800591e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005922:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005926:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800592a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800592e:	b29b      	uxth	r3, r3
 8005930:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8005932:	687a      	ldr	r2, [r7, #4]
 8005934:	683b      	ldr	r3, [r7, #0]
 8005936:	781b      	ldrb	r3, [r3, #0]
 8005938:	009b      	lsls	r3, r3, #2
 800593a:	4413      	add	r3, r2
 800593c:	881b      	ldrh	r3, [r3, #0]
 800593e:	b29b      	uxth	r3, r3
 8005940:	b21b      	sxth	r3, r3
 8005942:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005946:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800594a:	b21a      	sxth	r2, r3
 800594c:	683b      	ldr	r3, [r7, #0]
 800594e:	781b      	ldrb	r3, [r3, #0]
 8005950:	b21b      	sxth	r3, r3
 8005952:	4313      	orrs	r3, r2
 8005954:	b21b      	sxth	r3, r3
 8005956:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 800595a:	687a      	ldr	r2, [r7, #4]
 800595c:	683b      	ldr	r3, [r7, #0]
 800595e:	781b      	ldrb	r3, [r3, #0]
 8005960:	009b      	lsls	r3, r3, #2
 8005962:	441a      	add	r2, r3
 8005964:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8005968:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800596c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005970:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005974:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005978:	b29b      	uxth	r3, r3
 800597a:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 800597c:	683b      	ldr	r3, [r7, #0]
 800597e:	7b1b      	ldrb	r3, [r3, #12]
 8005980:	2b00      	cmp	r3, #0
 8005982:	f040 8149 	bne.w	8005c18 <USB_ActivateEndpoint+0x384>
  {
    if (ep->is_in != 0U)
 8005986:	683b      	ldr	r3, [r7, #0]
 8005988:	785b      	ldrb	r3, [r3, #1]
 800598a:	2b00      	cmp	r3, #0
 800598c:	f000 8084 	beq.w	8005a98 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	61bb      	str	r3, [r7, #24]
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800599a:	b29b      	uxth	r3, r3
 800599c:	461a      	mov	r2, r3
 800599e:	69bb      	ldr	r3, [r7, #24]
 80059a0:	4413      	add	r3, r2
 80059a2:	61bb      	str	r3, [r7, #24]
 80059a4:	683b      	ldr	r3, [r7, #0]
 80059a6:	781b      	ldrb	r3, [r3, #0]
 80059a8:	00da      	lsls	r2, r3, #3
 80059aa:	69bb      	ldr	r3, [r7, #24]
 80059ac:	4413      	add	r3, r2
 80059ae:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80059b2:	617b      	str	r3, [r7, #20]
 80059b4:	683b      	ldr	r3, [r7, #0]
 80059b6:	88db      	ldrh	r3, [r3, #6]
 80059b8:	085b      	lsrs	r3, r3, #1
 80059ba:	b29b      	uxth	r3, r3
 80059bc:	005b      	lsls	r3, r3, #1
 80059be:	b29a      	uxth	r2, r3
 80059c0:	697b      	ldr	r3, [r7, #20]
 80059c2:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80059c4:	687a      	ldr	r2, [r7, #4]
 80059c6:	683b      	ldr	r3, [r7, #0]
 80059c8:	781b      	ldrb	r3, [r3, #0]
 80059ca:	009b      	lsls	r3, r3, #2
 80059cc:	4413      	add	r3, r2
 80059ce:	881b      	ldrh	r3, [r3, #0]
 80059d0:	827b      	strh	r3, [r7, #18]
 80059d2:	8a7b      	ldrh	r3, [r7, #18]
 80059d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d01b      	beq.n	8005a14 <USB_ActivateEndpoint+0x180>
 80059dc:	687a      	ldr	r2, [r7, #4]
 80059de:	683b      	ldr	r3, [r7, #0]
 80059e0:	781b      	ldrb	r3, [r3, #0]
 80059e2:	009b      	lsls	r3, r3, #2
 80059e4:	4413      	add	r3, r2
 80059e6:	881b      	ldrh	r3, [r3, #0]
 80059e8:	b29b      	uxth	r3, r3
 80059ea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80059ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80059f2:	823b      	strh	r3, [r7, #16]
 80059f4:	687a      	ldr	r2, [r7, #4]
 80059f6:	683b      	ldr	r3, [r7, #0]
 80059f8:	781b      	ldrb	r3, [r3, #0]
 80059fa:	009b      	lsls	r3, r3, #2
 80059fc:	441a      	add	r2, r3
 80059fe:	8a3b      	ldrh	r3, [r7, #16]
 8005a00:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005a04:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005a08:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005a0c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005a10:	b29b      	uxth	r3, r3
 8005a12:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005a14:	683b      	ldr	r3, [r7, #0]
 8005a16:	78db      	ldrb	r3, [r3, #3]
 8005a18:	2b01      	cmp	r3, #1
 8005a1a:	d020      	beq.n	8005a5e <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005a1c:	687a      	ldr	r2, [r7, #4]
 8005a1e:	683b      	ldr	r3, [r7, #0]
 8005a20:	781b      	ldrb	r3, [r3, #0]
 8005a22:	009b      	lsls	r3, r3, #2
 8005a24:	4413      	add	r3, r2
 8005a26:	881b      	ldrh	r3, [r3, #0]
 8005a28:	b29b      	uxth	r3, r3
 8005a2a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005a2e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005a32:	81bb      	strh	r3, [r7, #12]
 8005a34:	89bb      	ldrh	r3, [r7, #12]
 8005a36:	f083 0320 	eor.w	r3, r3, #32
 8005a3a:	81bb      	strh	r3, [r7, #12]
 8005a3c:	687a      	ldr	r2, [r7, #4]
 8005a3e:	683b      	ldr	r3, [r7, #0]
 8005a40:	781b      	ldrb	r3, [r3, #0]
 8005a42:	009b      	lsls	r3, r3, #2
 8005a44:	441a      	add	r2, r3
 8005a46:	89bb      	ldrh	r3, [r7, #12]
 8005a48:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005a4c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005a50:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005a54:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005a58:	b29b      	uxth	r3, r3
 8005a5a:	8013      	strh	r3, [r2, #0]
 8005a5c:	e2a6      	b.n	8005fac <USB_ActivateEndpoint+0x718>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005a5e:	687a      	ldr	r2, [r7, #4]
 8005a60:	683b      	ldr	r3, [r7, #0]
 8005a62:	781b      	ldrb	r3, [r3, #0]
 8005a64:	009b      	lsls	r3, r3, #2
 8005a66:	4413      	add	r3, r2
 8005a68:	881b      	ldrh	r3, [r3, #0]
 8005a6a:	b29b      	uxth	r3, r3
 8005a6c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005a70:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005a74:	81fb      	strh	r3, [r7, #14]
 8005a76:	687a      	ldr	r2, [r7, #4]
 8005a78:	683b      	ldr	r3, [r7, #0]
 8005a7a:	781b      	ldrb	r3, [r3, #0]
 8005a7c:	009b      	lsls	r3, r3, #2
 8005a7e:	441a      	add	r2, r3
 8005a80:	89fb      	ldrh	r3, [r7, #14]
 8005a82:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005a86:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005a8a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005a8e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005a92:	b29b      	uxth	r3, r3
 8005a94:	8013      	strh	r3, [r2, #0]
 8005a96:	e289      	b.n	8005fac <USB_ActivateEndpoint+0x718>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	633b      	str	r3, [r7, #48]	; 0x30
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005aa2:	b29b      	uxth	r3, r3
 8005aa4:	461a      	mov	r2, r3
 8005aa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005aa8:	4413      	add	r3, r2
 8005aaa:	633b      	str	r3, [r7, #48]	; 0x30
 8005aac:	683b      	ldr	r3, [r7, #0]
 8005aae:	781b      	ldrb	r3, [r3, #0]
 8005ab0:	00da      	lsls	r2, r3, #3
 8005ab2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ab4:	4413      	add	r3, r2
 8005ab6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005aba:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005abc:	683b      	ldr	r3, [r7, #0]
 8005abe:	88db      	ldrh	r3, [r3, #6]
 8005ac0:	085b      	lsrs	r3, r3, #1
 8005ac2:	b29b      	uxth	r3, r3
 8005ac4:	005b      	lsls	r3, r3, #1
 8005ac6:	b29a      	uxth	r2, r3
 8005ac8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005aca:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	62bb      	str	r3, [r7, #40]	; 0x28
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005ad6:	b29b      	uxth	r3, r3
 8005ad8:	461a      	mov	r2, r3
 8005ada:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005adc:	4413      	add	r3, r2
 8005ade:	62bb      	str	r3, [r7, #40]	; 0x28
 8005ae0:	683b      	ldr	r3, [r7, #0]
 8005ae2:	781b      	ldrb	r3, [r3, #0]
 8005ae4:	00da      	lsls	r2, r3, #3
 8005ae6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ae8:	4413      	add	r3, r2
 8005aea:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005aee:	627b      	str	r3, [r7, #36]	; 0x24
 8005af0:	683b      	ldr	r3, [r7, #0]
 8005af2:	691b      	ldr	r3, [r3, #16]
 8005af4:	2b3e      	cmp	r3, #62	; 0x3e
 8005af6:	d918      	bls.n	8005b2a <USB_ActivateEndpoint+0x296>
 8005af8:	683b      	ldr	r3, [r7, #0]
 8005afa:	691b      	ldr	r3, [r3, #16]
 8005afc:	095b      	lsrs	r3, r3, #5
 8005afe:	66bb      	str	r3, [r7, #104]	; 0x68
 8005b00:	683b      	ldr	r3, [r7, #0]
 8005b02:	691b      	ldr	r3, [r3, #16]
 8005b04:	f003 031f 	and.w	r3, r3, #31
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d102      	bne.n	8005b12 <USB_ActivateEndpoint+0x27e>
 8005b0c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005b0e:	3b01      	subs	r3, #1
 8005b10:	66bb      	str	r3, [r7, #104]	; 0x68
 8005b12:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005b14:	b29b      	uxth	r3, r3
 8005b16:	029b      	lsls	r3, r3, #10
 8005b18:	b29b      	uxth	r3, r3
 8005b1a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005b1e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005b22:	b29a      	uxth	r2, r3
 8005b24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b26:	801a      	strh	r2, [r3, #0]
 8005b28:	e029      	b.n	8005b7e <USB_ActivateEndpoint+0x2ea>
 8005b2a:	683b      	ldr	r3, [r7, #0]
 8005b2c:	691b      	ldr	r3, [r3, #16]
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d112      	bne.n	8005b58 <USB_ActivateEndpoint+0x2c4>
 8005b32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b34:	881b      	ldrh	r3, [r3, #0]
 8005b36:	b29b      	uxth	r3, r3
 8005b38:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005b3c:	b29a      	uxth	r2, r3
 8005b3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b40:	801a      	strh	r2, [r3, #0]
 8005b42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b44:	881b      	ldrh	r3, [r3, #0]
 8005b46:	b29b      	uxth	r3, r3
 8005b48:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005b4c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005b50:	b29a      	uxth	r2, r3
 8005b52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b54:	801a      	strh	r2, [r3, #0]
 8005b56:	e012      	b.n	8005b7e <USB_ActivateEndpoint+0x2ea>
 8005b58:	683b      	ldr	r3, [r7, #0]
 8005b5a:	691b      	ldr	r3, [r3, #16]
 8005b5c:	085b      	lsrs	r3, r3, #1
 8005b5e:	66bb      	str	r3, [r7, #104]	; 0x68
 8005b60:	683b      	ldr	r3, [r7, #0]
 8005b62:	691b      	ldr	r3, [r3, #16]
 8005b64:	f003 0301 	and.w	r3, r3, #1
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d002      	beq.n	8005b72 <USB_ActivateEndpoint+0x2de>
 8005b6c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005b6e:	3301      	adds	r3, #1
 8005b70:	66bb      	str	r3, [r7, #104]	; 0x68
 8005b72:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005b74:	b29b      	uxth	r3, r3
 8005b76:	029b      	lsls	r3, r3, #10
 8005b78:	b29a      	uxth	r2, r3
 8005b7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b7c:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005b7e:	687a      	ldr	r2, [r7, #4]
 8005b80:	683b      	ldr	r3, [r7, #0]
 8005b82:	781b      	ldrb	r3, [r3, #0]
 8005b84:	009b      	lsls	r3, r3, #2
 8005b86:	4413      	add	r3, r2
 8005b88:	881b      	ldrh	r3, [r3, #0]
 8005b8a:	847b      	strh	r3, [r7, #34]	; 0x22
 8005b8c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005b8e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d01b      	beq.n	8005bce <USB_ActivateEndpoint+0x33a>
 8005b96:	687a      	ldr	r2, [r7, #4]
 8005b98:	683b      	ldr	r3, [r7, #0]
 8005b9a:	781b      	ldrb	r3, [r3, #0]
 8005b9c:	009b      	lsls	r3, r3, #2
 8005b9e:	4413      	add	r3, r2
 8005ba0:	881b      	ldrh	r3, [r3, #0]
 8005ba2:	b29b      	uxth	r3, r3
 8005ba4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005ba8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005bac:	843b      	strh	r3, [r7, #32]
 8005bae:	687a      	ldr	r2, [r7, #4]
 8005bb0:	683b      	ldr	r3, [r7, #0]
 8005bb2:	781b      	ldrb	r3, [r3, #0]
 8005bb4:	009b      	lsls	r3, r3, #2
 8005bb6:	441a      	add	r2, r3
 8005bb8:	8c3b      	ldrh	r3, [r7, #32]
 8005bba:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005bbe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005bc2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005bc6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005bca:	b29b      	uxth	r3, r3
 8005bcc:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005bce:	687a      	ldr	r2, [r7, #4]
 8005bd0:	683b      	ldr	r3, [r7, #0]
 8005bd2:	781b      	ldrb	r3, [r3, #0]
 8005bd4:	009b      	lsls	r3, r3, #2
 8005bd6:	4413      	add	r3, r2
 8005bd8:	881b      	ldrh	r3, [r3, #0]
 8005bda:	b29b      	uxth	r3, r3
 8005bdc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005be0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005be4:	83fb      	strh	r3, [r7, #30]
 8005be6:	8bfb      	ldrh	r3, [r7, #30]
 8005be8:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005bec:	83fb      	strh	r3, [r7, #30]
 8005bee:	8bfb      	ldrh	r3, [r7, #30]
 8005bf0:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005bf4:	83fb      	strh	r3, [r7, #30]
 8005bf6:	687a      	ldr	r2, [r7, #4]
 8005bf8:	683b      	ldr	r3, [r7, #0]
 8005bfa:	781b      	ldrb	r3, [r3, #0]
 8005bfc:	009b      	lsls	r3, r3, #2
 8005bfe:	441a      	add	r2, r3
 8005c00:	8bfb      	ldrh	r3, [r7, #30]
 8005c02:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005c06:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005c0a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005c0e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005c12:	b29b      	uxth	r3, r3
 8005c14:	8013      	strh	r3, [r2, #0]
 8005c16:	e1c9      	b.n	8005fac <USB_ActivateEndpoint+0x718>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8005c18:	683b      	ldr	r3, [r7, #0]
 8005c1a:	78db      	ldrb	r3, [r3, #3]
 8005c1c:	2b02      	cmp	r3, #2
 8005c1e:	d11e      	bne.n	8005c5e <USB_ActivateEndpoint+0x3ca>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8005c20:	687a      	ldr	r2, [r7, #4]
 8005c22:	683b      	ldr	r3, [r7, #0]
 8005c24:	781b      	ldrb	r3, [r3, #0]
 8005c26:	009b      	lsls	r3, r3, #2
 8005c28:	4413      	add	r3, r2
 8005c2a:	881b      	ldrh	r3, [r3, #0]
 8005c2c:	b29b      	uxth	r3, r3
 8005c2e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005c32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c36:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8005c3a:	687a      	ldr	r2, [r7, #4]
 8005c3c:	683b      	ldr	r3, [r7, #0]
 8005c3e:	781b      	ldrb	r3, [r3, #0]
 8005c40:	009b      	lsls	r3, r3, #2
 8005c42:	441a      	add	r2, r3
 8005c44:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8005c48:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005c4c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005c50:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8005c54:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005c58:	b29b      	uxth	r3, r3
 8005c5a:	8013      	strh	r3, [r2, #0]
 8005c5c:	e01d      	b.n	8005c9a <USB_ActivateEndpoint+0x406>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8005c5e:	687a      	ldr	r2, [r7, #4]
 8005c60:	683b      	ldr	r3, [r7, #0]
 8005c62:	781b      	ldrb	r3, [r3, #0]
 8005c64:	009b      	lsls	r3, r3, #2
 8005c66:	4413      	add	r3, r2
 8005c68:	881b      	ldrh	r3, [r3, #0]
 8005c6a:	b29b      	uxth	r3, r3
 8005c6c:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8005c70:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c74:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 8005c78:	687a      	ldr	r2, [r7, #4]
 8005c7a:	683b      	ldr	r3, [r7, #0]
 8005c7c:	781b      	ldrb	r3, [r3, #0]
 8005c7e:	009b      	lsls	r3, r3, #2
 8005c80:	441a      	add	r2, r3
 8005c82:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8005c86:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005c8a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005c8e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005c92:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005c96:	b29b      	uxth	r3, r3
 8005c98:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005ca4:	b29b      	uxth	r3, r3
 8005ca6:	461a      	mov	r2, r3
 8005ca8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005caa:	4413      	add	r3, r2
 8005cac:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005cae:	683b      	ldr	r3, [r7, #0]
 8005cb0:	781b      	ldrb	r3, [r3, #0]
 8005cb2:	00da      	lsls	r2, r3, #3
 8005cb4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005cb6:	4413      	add	r3, r2
 8005cb8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005cbc:	65bb      	str	r3, [r7, #88]	; 0x58
 8005cbe:	683b      	ldr	r3, [r7, #0]
 8005cc0:	891b      	ldrh	r3, [r3, #8]
 8005cc2:	085b      	lsrs	r3, r3, #1
 8005cc4:	b29b      	uxth	r3, r3
 8005cc6:	005b      	lsls	r3, r3, #1
 8005cc8:	b29a      	uxth	r2, r3
 8005cca:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005ccc:	801a      	strh	r2, [r3, #0]
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	657b      	str	r3, [r7, #84]	; 0x54
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005cd8:	b29b      	uxth	r3, r3
 8005cda:	461a      	mov	r2, r3
 8005cdc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005cde:	4413      	add	r3, r2
 8005ce0:	657b      	str	r3, [r7, #84]	; 0x54
 8005ce2:	683b      	ldr	r3, [r7, #0]
 8005ce4:	781b      	ldrb	r3, [r3, #0]
 8005ce6:	00da      	lsls	r2, r3, #3
 8005ce8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005cea:	4413      	add	r3, r2
 8005cec:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005cf0:	653b      	str	r3, [r7, #80]	; 0x50
 8005cf2:	683b      	ldr	r3, [r7, #0]
 8005cf4:	895b      	ldrh	r3, [r3, #10]
 8005cf6:	085b      	lsrs	r3, r3, #1
 8005cf8:	b29b      	uxth	r3, r3
 8005cfa:	005b      	lsls	r3, r3, #1
 8005cfc:	b29a      	uxth	r2, r3
 8005cfe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005d00:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8005d02:	683b      	ldr	r3, [r7, #0]
 8005d04:	785b      	ldrb	r3, [r3, #1]
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	f040 8093 	bne.w	8005e32 <USB_ActivateEndpoint+0x59e>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005d0c:	687a      	ldr	r2, [r7, #4]
 8005d0e:	683b      	ldr	r3, [r7, #0]
 8005d10:	781b      	ldrb	r3, [r3, #0]
 8005d12:	009b      	lsls	r3, r3, #2
 8005d14:	4413      	add	r3, r2
 8005d16:	881b      	ldrh	r3, [r3, #0]
 8005d18:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8005d1c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8005d20:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d01b      	beq.n	8005d60 <USB_ActivateEndpoint+0x4cc>
 8005d28:	687a      	ldr	r2, [r7, #4]
 8005d2a:	683b      	ldr	r3, [r7, #0]
 8005d2c:	781b      	ldrb	r3, [r3, #0]
 8005d2e:	009b      	lsls	r3, r3, #2
 8005d30:	4413      	add	r3, r2
 8005d32:	881b      	ldrh	r3, [r3, #0]
 8005d34:	b29b      	uxth	r3, r3
 8005d36:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005d3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d3e:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8005d40:	687a      	ldr	r2, [r7, #4]
 8005d42:	683b      	ldr	r3, [r7, #0]
 8005d44:	781b      	ldrb	r3, [r3, #0]
 8005d46:	009b      	lsls	r3, r3, #2
 8005d48:	441a      	add	r2, r3
 8005d4a:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8005d4c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005d50:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005d54:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005d58:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005d5c:	b29b      	uxth	r3, r3
 8005d5e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005d60:	687a      	ldr	r2, [r7, #4]
 8005d62:	683b      	ldr	r3, [r7, #0]
 8005d64:	781b      	ldrb	r3, [r3, #0]
 8005d66:	009b      	lsls	r3, r3, #2
 8005d68:	4413      	add	r3, r2
 8005d6a:	881b      	ldrh	r3, [r3, #0]
 8005d6c:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8005d6e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8005d70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d01b      	beq.n	8005db0 <USB_ActivateEndpoint+0x51c>
 8005d78:	687a      	ldr	r2, [r7, #4]
 8005d7a:	683b      	ldr	r3, [r7, #0]
 8005d7c:	781b      	ldrb	r3, [r3, #0]
 8005d7e:	009b      	lsls	r3, r3, #2
 8005d80:	4413      	add	r3, r2
 8005d82:	881b      	ldrh	r3, [r3, #0]
 8005d84:	b29b      	uxth	r3, r3
 8005d86:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005d8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d8e:	877b      	strh	r3, [r7, #58]	; 0x3a
 8005d90:	687a      	ldr	r2, [r7, #4]
 8005d92:	683b      	ldr	r3, [r7, #0]
 8005d94:	781b      	ldrb	r3, [r3, #0]
 8005d96:	009b      	lsls	r3, r3, #2
 8005d98:	441a      	add	r2, r3
 8005d9a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8005d9c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005da0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005da4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005da8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005dac:	b29b      	uxth	r3, r3
 8005dae:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005db0:	687a      	ldr	r2, [r7, #4]
 8005db2:	683b      	ldr	r3, [r7, #0]
 8005db4:	781b      	ldrb	r3, [r3, #0]
 8005db6:	009b      	lsls	r3, r3, #2
 8005db8:	4413      	add	r3, r2
 8005dba:	881b      	ldrh	r3, [r3, #0]
 8005dbc:	b29b      	uxth	r3, r3
 8005dbe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005dc2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005dc6:	873b      	strh	r3, [r7, #56]	; 0x38
 8005dc8:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005dca:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005dce:	873b      	strh	r3, [r7, #56]	; 0x38
 8005dd0:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005dd2:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005dd6:	873b      	strh	r3, [r7, #56]	; 0x38
 8005dd8:	687a      	ldr	r2, [r7, #4]
 8005dda:	683b      	ldr	r3, [r7, #0]
 8005ddc:	781b      	ldrb	r3, [r3, #0]
 8005dde:	009b      	lsls	r3, r3, #2
 8005de0:	441a      	add	r2, r3
 8005de2:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005de4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005de8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005dec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005df0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005df4:	b29b      	uxth	r3, r3
 8005df6:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005df8:	687a      	ldr	r2, [r7, #4]
 8005dfa:	683b      	ldr	r3, [r7, #0]
 8005dfc:	781b      	ldrb	r3, [r3, #0]
 8005dfe:	009b      	lsls	r3, r3, #2
 8005e00:	4413      	add	r3, r2
 8005e02:	881b      	ldrh	r3, [r3, #0]
 8005e04:	b29b      	uxth	r3, r3
 8005e06:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005e0a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005e0e:	86fb      	strh	r3, [r7, #54]	; 0x36
 8005e10:	687a      	ldr	r2, [r7, #4]
 8005e12:	683b      	ldr	r3, [r7, #0]
 8005e14:	781b      	ldrb	r3, [r3, #0]
 8005e16:	009b      	lsls	r3, r3, #2
 8005e18:	441a      	add	r2, r3
 8005e1a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005e1c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005e20:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005e24:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005e28:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005e2c:	b29b      	uxth	r3, r3
 8005e2e:	8013      	strh	r3, [r2, #0]
 8005e30:	e0bc      	b.n	8005fac <USB_ActivateEndpoint+0x718>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005e32:	687a      	ldr	r2, [r7, #4]
 8005e34:	683b      	ldr	r3, [r7, #0]
 8005e36:	781b      	ldrb	r3, [r3, #0]
 8005e38:	009b      	lsls	r3, r3, #2
 8005e3a:	4413      	add	r3, r2
 8005e3c:	881b      	ldrh	r3, [r3, #0]
 8005e3e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8005e42:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005e46:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d01d      	beq.n	8005e8a <USB_ActivateEndpoint+0x5f6>
 8005e4e:	687a      	ldr	r2, [r7, #4]
 8005e50:	683b      	ldr	r3, [r7, #0]
 8005e52:	781b      	ldrb	r3, [r3, #0]
 8005e54:	009b      	lsls	r3, r3, #2
 8005e56:	4413      	add	r3, r2
 8005e58:	881b      	ldrh	r3, [r3, #0]
 8005e5a:	b29b      	uxth	r3, r3
 8005e5c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005e60:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e64:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8005e68:	687a      	ldr	r2, [r7, #4]
 8005e6a:	683b      	ldr	r3, [r7, #0]
 8005e6c:	781b      	ldrb	r3, [r3, #0]
 8005e6e:	009b      	lsls	r3, r3, #2
 8005e70:	441a      	add	r2, r3
 8005e72:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8005e76:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005e7a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005e7e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005e82:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005e86:	b29b      	uxth	r3, r3
 8005e88:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005e8a:	687a      	ldr	r2, [r7, #4]
 8005e8c:	683b      	ldr	r3, [r7, #0]
 8005e8e:	781b      	ldrb	r3, [r3, #0]
 8005e90:	009b      	lsls	r3, r3, #2
 8005e92:	4413      	add	r3, r2
 8005e94:	881b      	ldrh	r3, [r3, #0]
 8005e96:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8005e9a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8005e9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d01d      	beq.n	8005ee2 <USB_ActivateEndpoint+0x64e>
 8005ea6:	687a      	ldr	r2, [r7, #4]
 8005ea8:	683b      	ldr	r3, [r7, #0]
 8005eaa:	781b      	ldrb	r3, [r3, #0]
 8005eac:	009b      	lsls	r3, r3, #2
 8005eae:	4413      	add	r3, r2
 8005eb0:	881b      	ldrh	r3, [r3, #0]
 8005eb2:	b29b      	uxth	r3, r3
 8005eb4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005eb8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ebc:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8005ec0:	687a      	ldr	r2, [r7, #4]
 8005ec2:	683b      	ldr	r3, [r7, #0]
 8005ec4:	781b      	ldrb	r3, [r3, #0]
 8005ec6:	009b      	lsls	r3, r3, #2
 8005ec8:	441a      	add	r2, r3
 8005eca:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8005ece:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005ed2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005ed6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005eda:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005ede:	b29b      	uxth	r3, r3
 8005ee0:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005ee2:	683b      	ldr	r3, [r7, #0]
 8005ee4:	78db      	ldrb	r3, [r3, #3]
 8005ee6:	2b01      	cmp	r3, #1
 8005ee8:	d024      	beq.n	8005f34 <USB_ActivateEndpoint+0x6a0>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005eea:	687a      	ldr	r2, [r7, #4]
 8005eec:	683b      	ldr	r3, [r7, #0]
 8005eee:	781b      	ldrb	r3, [r3, #0]
 8005ef0:	009b      	lsls	r3, r3, #2
 8005ef2:	4413      	add	r3, r2
 8005ef4:	881b      	ldrh	r3, [r3, #0]
 8005ef6:	b29b      	uxth	r3, r3
 8005ef8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005efc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005f00:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8005f04:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8005f08:	f083 0320 	eor.w	r3, r3, #32
 8005f0c:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8005f10:	687a      	ldr	r2, [r7, #4]
 8005f12:	683b      	ldr	r3, [r7, #0]
 8005f14:	781b      	ldrb	r3, [r3, #0]
 8005f16:	009b      	lsls	r3, r3, #2
 8005f18:	441a      	add	r2, r3
 8005f1a:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8005f1e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005f22:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005f26:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005f2a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005f2e:	b29b      	uxth	r3, r3
 8005f30:	8013      	strh	r3, [r2, #0]
 8005f32:	e01d      	b.n	8005f70 <USB_ActivateEndpoint+0x6dc>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005f34:	687a      	ldr	r2, [r7, #4]
 8005f36:	683b      	ldr	r3, [r7, #0]
 8005f38:	781b      	ldrb	r3, [r3, #0]
 8005f3a:	009b      	lsls	r3, r3, #2
 8005f3c:	4413      	add	r3, r2
 8005f3e:	881b      	ldrh	r3, [r3, #0]
 8005f40:	b29b      	uxth	r3, r3
 8005f42:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005f46:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005f4a:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8005f4e:	687a      	ldr	r2, [r7, #4]
 8005f50:	683b      	ldr	r3, [r7, #0]
 8005f52:	781b      	ldrb	r3, [r3, #0]
 8005f54:	009b      	lsls	r3, r3, #2
 8005f56:	441a      	add	r2, r3
 8005f58:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8005f5c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005f60:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005f64:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005f68:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005f6c:	b29b      	uxth	r3, r3
 8005f6e:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005f70:	687a      	ldr	r2, [r7, #4]
 8005f72:	683b      	ldr	r3, [r7, #0]
 8005f74:	781b      	ldrb	r3, [r3, #0]
 8005f76:	009b      	lsls	r3, r3, #2
 8005f78:	4413      	add	r3, r2
 8005f7a:	881b      	ldrh	r3, [r3, #0]
 8005f7c:	b29b      	uxth	r3, r3
 8005f7e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005f82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f86:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8005f8a:	687a      	ldr	r2, [r7, #4]
 8005f8c:	683b      	ldr	r3, [r7, #0]
 8005f8e:	781b      	ldrb	r3, [r3, #0]
 8005f90:	009b      	lsls	r3, r3, #2
 8005f92:	441a      	add	r2, r3
 8005f94:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8005f98:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005f9c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005fa0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005fa4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005fa8:	b29b      	uxth	r3, r3
 8005faa:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8005fac:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 8005fb0:	4618      	mov	r0, r3
 8005fb2:	3774      	adds	r7, #116	; 0x74
 8005fb4:	46bd      	mov	sp, r7
 8005fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fba:	4770      	bx	lr

08005fbc <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005fbc:	b480      	push	{r7}
 8005fbe:	b08d      	sub	sp, #52	; 0x34
 8005fc0:	af00      	add	r7, sp, #0
 8005fc2:	6078      	str	r0, [r7, #4]
 8005fc4:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8005fc6:	683b      	ldr	r3, [r7, #0]
 8005fc8:	7b1b      	ldrb	r3, [r3, #12]
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	f040 808e 	bne.w	80060ec <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8005fd0:	683b      	ldr	r3, [r7, #0]
 8005fd2:	785b      	ldrb	r3, [r3, #1]
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d044      	beq.n	8006062 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005fd8:	687a      	ldr	r2, [r7, #4]
 8005fda:	683b      	ldr	r3, [r7, #0]
 8005fdc:	781b      	ldrb	r3, [r3, #0]
 8005fde:	009b      	lsls	r3, r3, #2
 8005fe0:	4413      	add	r3, r2
 8005fe2:	881b      	ldrh	r3, [r3, #0]
 8005fe4:	81bb      	strh	r3, [r7, #12]
 8005fe6:	89bb      	ldrh	r3, [r7, #12]
 8005fe8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d01b      	beq.n	8006028 <USB_DeactivateEndpoint+0x6c>
 8005ff0:	687a      	ldr	r2, [r7, #4]
 8005ff2:	683b      	ldr	r3, [r7, #0]
 8005ff4:	781b      	ldrb	r3, [r3, #0]
 8005ff6:	009b      	lsls	r3, r3, #2
 8005ff8:	4413      	add	r3, r2
 8005ffa:	881b      	ldrh	r3, [r3, #0]
 8005ffc:	b29b      	uxth	r3, r3
 8005ffe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006002:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006006:	817b      	strh	r3, [r7, #10]
 8006008:	687a      	ldr	r2, [r7, #4]
 800600a:	683b      	ldr	r3, [r7, #0]
 800600c:	781b      	ldrb	r3, [r3, #0]
 800600e:	009b      	lsls	r3, r3, #2
 8006010:	441a      	add	r2, r3
 8006012:	897b      	ldrh	r3, [r7, #10]
 8006014:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006018:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800601c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006020:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006024:	b29b      	uxth	r3, r3
 8006026:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006028:	687a      	ldr	r2, [r7, #4]
 800602a:	683b      	ldr	r3, [r7, #0]
 800602c:	781b      	ldrb	r3, [r3, #0]
 800602e:	009b      	lsls	r3, r3, #2
 8006030:	4413      	add	r3, r2
 8006032:	881b      	ldrh	r3, [r3, #0]
 8006034:	b29b      	uxth	r3, r3
 8006036:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800603a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800603e:	813b      	strh	r3, [r7, #8]
 8006040:	687a      	ldr	r2, [r7, #4]
 8006042:	683b      	ldr	r3, [r7, #0]
 8006044:	781b      	ldrb	r3, [r3, #0]
 8006046:	009b      	lsls	r3, r3, #2
 8006048:	441a      	add	r2, r3
 800604a:	893b      	ldrh	r3, [r7, #8]
 800604c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006050:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006054:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006058:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800605c:	b29b      	uxth	r3, r3
 800605e:	8013      	strh	r3, [r2, #0]
 8006060:	e192      	b.n	8006388 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006062:	687a      	ldr	r2, [r7, #4]
 8006064:	683b      	ldr	r3, [r7, #0]
 8006066:	781b      	ldrb	r3, [r3, #0]
 8006068:	009b      	lsls	r3, r3, #2
 800606a:	4413      	add	r3, r2
 800606c:	881b      	ldrh	r3, [r3, #0]
 800606e:	827b      	strh	r3, [r7, #18]
 8006070:	8a7b      	ldrh	r3, [r7, #18]
 8006072:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006076:	2b00      	cmp	r3, #0
 8006078:	d01b      	beq.n	80060b2 <USB_DeactivateEndpoint+0xf6>
 800607a:	687a      	ldr	r2, [r7, #4]
 800607c:	683b      	ldr	r3, [r7, #0]
 800607e:	781b      	ldrb	r3, [r3, #0]
 8006080:	009b      	lsls	r3, r3, #2
 8006082:	4413      	add	r3, r2
 8006084:	881b      	ldrh	r3, [r3, #0]
 8006086:	b29b      	uxth	r3, r3
 8006088:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800608c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006090:	823b      	strh	r3, [r7, #16]
 8006092:	687a      	ldr	r2, [r7, #4]
 8006094:	683b      	ldr	r3, [r7, #0]
 8006096:	781b      	ldrb	r3, [r3, #0]
 8006098:	009b      	lsls	r3, r3, #2
 800609a:	441a      	add	r2, r3
 800609c:	8a3b      	ldrh	r3, [r7, #16]
 800609e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80060a2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80060a6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80060aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80060ae:	b29b      	uxth	r3, r3
 80060b0:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80060b2:	687a      	ldr	r2, [r7, #4]
 80060b4:	683b      	ldr	r3, [r7, #0]
 80060b6:	781b      	ldrb	r3, [r3, #0]
 80060b8:	009b      	lsls	r3, r3, #2
 80060ba:	4413      	add	r3, r2
 80060bc:	881b      	ldrh	r3, [r3, #0]
 80060be:	b29b      	uxth	r3, r3
 80060c0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80060c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80060c8:	81fb      	strh	r3, [r7, #14]
 80060ca:	687a      	ldr	r2, [r7, #4]
 80060cc:	683b      	ldr	r3, [r7, #0]
 80060ce:	781b      	ldrb	r3, [r3, #0]
 80060d0:	009b      	lsls	r3, r3, #2
 80060d2:	441a      	add	r2, r3
 80060d4:	89fb      	ldrh	r3, [r7, #14]
 80060d6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80060da:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80060de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80060e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80060e6:	b29b      	uxth	r3, r3
 80060e8:	8013      	strh	r3, [r2, #0]
 80060ea:	e14d      	b.n	8006388 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 80060ec:	683b      	ldr	r3, [r7, #0]
 80060ee:	785b      	ldrb	r3, [r3, #1]
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	f040 80a5 	bne.w	8006240 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80060f6:	687a      	ldr	r2, [r7, #4]
 80060f8:	683b      	ldr	r3, [r7, #0]
 80060fa:	781b      	ldrb	r3, [r3, #0]
 80060fc:	009b      	lsls	r3, r3, #2
 80060fe:	4413      	add	r3, r2
 8006100:	881b      	ldrh	r3, [r3, #0]
 8006102:	843b      	strh	r3, [r7, #32]
 8006104:	8c3b      	ldrh	r3, [r7, #32]
 8006106:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800610a:	2b00      	cmp	r3, #0
 800610c:	d01b      	beq.n	8006146 <USB_DeactivateEndpoint+0x18a>
 800610e:	687a      	ldr	r2, [r7, #4]
 8006110:	683b      	ldr	r3, [r7, #0]
 8006112:	781b      	ldrb	r3, [r3, #0]
 8006114:	009b      	lsls	r3, r3, #2
 8006116:	4413      	add	r3, r2
 8006118:	881b      	ldrh	r3, [r3, #0]
 800611a:	b29b      	uxth	r3, r3
 800611c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006120:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006124:	83fb      	strh	r3, [r7, #30]
 8006126:	687a      	ldr	r2, [r7, #4]
 8006128:	683b      	ldr	r3, [r7, #0]
 800612a:	781b      	ldrb	r3, [r3, #0]
 800612c:	009b      	lsls	r3, r3, #2
 800612e:	441a      	add	r2, r3
 8006130:	8bfb      	ldrh	r3, [r7, #30]
 8006132:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006136:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800613a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800613e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006142:	b29b      	uxth	r3, r3
 8006144:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006146:	687a      	ldr	r2, [r7, #4]
 8006148:	683b      	ldr	r3, [r7, #0]
 800614a:	781b      	ldrb	r3, [r3, #0]
 800614c:	009b      	lsls	r3, r3, #2
 800614e:	4413      	add	r3, r2
 8006150:	881b      	ldrh	r3, [r3, #0]
 8006152:	83bb      	strh	r3, [r7, #28]
 8006154:	8bbb      	ldrh	r3, [r7, #28]
 8006156:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800615a:	2b00      	cmp	r3, #0
 800615c:	d01b      	beq.n	8006196 <USB_DeactivateEndpoint+0x1da>
 800615e:	687a      	ldr	r2, [r7, #4]
 8006160:	683b      	ldr	r3, [r7, #0]
 8006162:	781b      	ldrb	r3, [r3, #0]
 8006164:	009b      	lsls	r3, r3, #2
 8006166:	4413      	add	r3, r2
 8006168:	881b      	ldrh	r3, [r3, #0]
 800616a:	b29b      	uxth	r3, r3
 800616c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006170:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006174:	837b      	strh	r3, [r7, #26]
 8006176:	687a      	ldr	r2, [r7, #4]
 8006178:	683b      	ldr	r3, [r7, #0]
 800617a:	781b      	ldrb	r3, [r3, #0]
 800617c:	009b      	lsls	r3, r3, #2
 800617e:	441a      	add	r2, r3
 8006180:	8b7b      	ldrh	r3, [r7, #26]
 8006182:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006186:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800618a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800618e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006192:	b29b      	uxth	r3, r3
 8006194:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8006196:	687a      	ldr	r2, [r7, #4]
 8006198:	683b      	ldr	r3, [r7, #0]
 800619a:	781b      	ldrb	r3, [r3, #0]
 800619c:	009b      	lsls	r3, r3, #2
 800619e:	4413      	add	r3, r2
 80061a0:	881b      	ldrh	r3, [r3, #0]
 80061a2:	b29b      	uxth	r3, r3
 80061a4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80061a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80061ac:	833b      	strh	r3, [r7, #24]
 80061ae:	687a      	ldr	r2, [r7, #4]
 80061b0:	683b      	ldr	r3, [r7, #0]
 80061b2:	781b      	ldrb	r3, [r3, #0]
 80061b4:	009b      	lsls	r3, r3, #2
 80061b6:	441a      	add	r2, r3
 80061b8:	8b3b      	ldrh	r3, [r7, #24]
 80061ba:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80061be:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80061c2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80061c6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80061ca:	b29b      	uxth	r3, r3
 80061cc:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80061ce:	687a      	ldr	r2, [r7, #4]
 80061d0:	683b      	ldr	r3, [r7, #0]
 80061d2:	781b      	ldrb	r3, [r3, #0]
 80061d4:	009b      	lsls	r3, r3, #2
 80061d6:	4413      	add	r3, r2
 80061d8:	881b      	ldrh	r3, [r3, #0]
 80061da:	b29b      	uxth	r3, r3
 80061dc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80061e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80061e4:	82fb      	strh	r3, [r7, #22]
 80061e6:	687a      	ldr	r2, [r7, #4]
 80061e8:	683b      	ldr	r3, [r7, #0]
 80061ea:	781b      	ldrb	r3, [r3, #0]
 80061ec:	009b      	lsls	r3, r3, #2
 80061ee:	441a      	add	r2, r3
 80061f0:	8afb      	ldrh	r3, [r7, #22]
 80061f2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80061f6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80061fa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80061fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006202:	b29b      	uxth	r3, r3
 8006204:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006206:	687a      	ldr	r2, [r7, #4]
 8006208:	683b      	ldr	r3, [r7, #0]
 800620a:	781b      	ldrb	r3, [r3, #0]
 800620c:	009b      	lsls	r3, r3, #2
 800620e:	4413      	add	r3, r2
 8006210:	881b      	ldrh	r3, [r3, #0]
 8006212:	b29b      	uxth	r3, r3
 8006214:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006218:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800621c:	82bb      	strh	r3, [r7, #20]
 800621e:	687a      	ldr	r2, [r7, #4]
 8006220:	683b      	ldr	r3, [r7, #0]
 8006222:	781b      	ldrb	r3, [r3, #0]
 8006224:	009b      	lsls	r3, r3, #2
 8006226:	441a      	add	r2, r3
 8006228:	8abb      	ldrh	r3, [r7, #20]
 800622a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800622e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006232:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006236:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800623a:	b29b      	uxth	r3, r3
 800623c:	8013      	strh	r3, [r2, #0]
 800623e:	e0a3      	b.n	8006388 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006240:	687a      	ldr	r2, [r7, #4]
 8006242:	683b      	ldr	r3, [r7, #0]
 8006244:	781b      	ldrb	r3, [r3, #0]
 8006246:	009b      	lsls	r3, r3, #2
 8006248:	4413      	add	r3, r2
 800624a:	881b      	ldrh	r3, [r3, #0]
 800624c:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800624e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8006250:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006254:	2b00      	cmp	r3, #0
 8006256:	d01b      	beq.n	8006290 <USB_DeactivateEndpoint+0x2d4>
 8006258:	687a      	ldr	r2, [r7, #4]
 800625a:	683b      	ldr	r3, [r7, #0]
 800625c:	781b      	ldrb	r3, [r3, #0]
 800625e:	009b      	lsls	r3, r3, #2
 8006260:	4413      	add	r3, r2
 8006262:	881b      	ldrh	r3, [r3, #0]
 8006264:	b29b      	uxth	r3, r3
 8006266:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800626a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800626e:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8006270:	687a      	ldr	r2, [r7, #4]
 8006272:	683b      	ldr	r3, [r7, #0]
 8006274:	781b      	ldrb	r3, [r3, #0]
 8006276:	009b      	lsls	r3, r3, #2
 8006278:	441a      	add	r2, r3
 800627a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800627c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006280:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006284:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006288:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800628c:	b29b      	uxth	r3, r3
 800628e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006290:	687a      	ldr	r2, [r7, #4]
 8006292:	683b      	ldr	r3, [r7, #0]
 8006294:	781b      	ldrb	r3, [r3, #0]
 8006296:	009b      	lsls	r3, r3, #2
 8006298:	4413      	add	r3, r2
 800629a:	881b      	ldrh	r3, [r3, #0]
 800629c:	857b      	strh	r3, [r7, #42]	; 0x2a
 800629e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80062a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d01b      	beq.n	80062e0 <USB_DeactivateEndpoint+0x324>
 80062a8:	687a      	ldr	r2, [r7, #4]
 80062aa:	683b      	ldr	r3, [r7, #0]
 80062ac:	781b      	ldrb	r3, [r3, #0]
 80062ae:	009b      	lsls	r3, r3, #2
 80062b0:	4413      	add	r3, r2
 80062b2:	881b      	ldrh	r3, [r3, #0]
 80062b4:	b29b      	uxth	r3, r3
 80062b6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80062ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80062be:	853b      	strh	r3, [r7, #40]	; 0x28
 80062c0:	687a      	ldr	r2, [r7, #4]
 80062c2:	683b      	ldr	r3, [r7, #0]
 80062c4:	781b      	ldrb	r3, [r3, #0]
 80062c6:	009b      	lsls	r3, r3, #2
 80062c8:	441a      	add	r2, r3
 80062ca:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80062cc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80062d0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80062d4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80062d8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80062dc:	b29b      	uxth	r3, r3
 80062de:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 80062e0:	687a      	ldr	r2, [r7, #4]
 80062e2:	683b      	ldr	r3, [r7, #0]
 80062e4:	781b      	ldrb	r3, [r3, #0]
 80062e6:	009b      	lsls	r3, r3, #2
 80062e8:	4413      	add	r3, r2
 80062ea:	881b      	ldrh	r3, [r3, #0]
 80062ec:	b29b      	uxth	r3, r3
 80062ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80062f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80062f6:	84fb      	strh	r3, [r7, #38]	; 0x26
 80062f8:	687a      	ldr	r2, [r7, #4]
 80062fa:	683b      	ldr	r3, [r7, #0]
 80062fc:	781b      	ldrb	r3, [r3, #0]
 80062fe:	009b      	lsls	r3, r3, #2
 8006300:	441a      	add	r2, r3
 8006302:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006304:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006308:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800630c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006310:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006314:	b29b      	uxth	r3, r3
 8006316:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006318:	687a      	ldr	r2, [r7, #4]
 800631a:	683b      	ldr	r3, [r7, #0]
 800631c:	781b      	ldrb	r3, [r3, #0]
 800631e:	009b      	lsls	r3, r3, #2
 8006320:	4413      	add	r3, r2
 8006322:	881b      	ldrh	r3, [r3, #0]
 8006324:	b29b      	uxth	r3, r3
 8006326:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800632a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800632e:	84bb      	strh	r3, [r7, #36]	; 0x24
 8006330:	687a      	ldr	r2, [r7, #4]
 8006332:	683b      	ldr	r3, [r7, #0]
 8006334:	781b      	ldrb	r3, [r3, #0]
 8006336:	009b      	lsls	r3, r3, #2
 8006338:	441a      	add	r2, r3
 800633a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800633c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006340:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006344:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006348:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800634c:	b29b      	uxth	r3, r3
 800634e:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006350:	687a      	ldr	r2, [r7, #4]
 8006352:	683b      	ldr	r3, [r7, #0]
 8006354:	781b      	ldrb	r3, [r3, #0]
 8006356:	009b      	lsls	r3, r3, #2
 8006358:	4413      	add	r3, r2
 800635a:	881b      	ldrh	r3, [r3, #0]
 800635c:	b29b      	uxth	r3, r3
 800635e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006362:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006366:	847b      	strh	r3, [r7, #34]	; 0x22
 8006368:	687a      	ldr	r2, [r7, #4]
 800636a:	683b      	ldr	r3, [r7, #0]
 800636c:	781b      	ldrb	r3, [r3, #0]
 800636e:	009b      	lsls	r3, r3, #2
 8006370:	441a      	add	r2, r3
 8006372:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006374:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006378:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800637c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006380:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006384:	b29b      	uxth	r3, r3
 8006386:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8006388:	2300      	movs	r3, #0
}
 800638a:	4618      	mov	r0, r3
 800638c:	3734      	adds	r7, #52	; 0x34
 800638e:	46bd      	mov	sp, r7
 8006390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006394:	4770      	bx	lr

08006396 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006396:	b580      	push	{r7, lr}
 8006398:	b0c2      	sub	sp, #264	; 0x108
 800639a:	af00      	add	r7, sp, #0
 800639c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80063a0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80063a4:	6018      	str	r0, [r3, #0]
 80063a6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80063aa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80063ae:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 80063b0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80063b4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	785b      	ldrb	r3, [r3, #1]
 80063bc:	2b01      	cmp	r3, #1
 80063be:	f040 867b 	bne.w	80070b8 <USB_EPStartXfer+0xd22>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 80063c2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80063c6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	699a      	ldr	r2, [r3, #24]
 80063ce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80063d2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	691b      	ldr	r3, [r3, #16]
 80063da:	429a      	cmp	r2, r3
 80063dc:	d908      	bls.n	80063f0 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 80063de:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80063e2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	691b      	ldr	r3, [r3, #16]
 80063ea:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80063ee:	e007      	b.n	8006400 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 80063f0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80063f4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	699b      	ldr	r3, [r3, #24]
 80063fc:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8006400:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006404:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	7b1b      	ldrb	r3, [r3, #12]
 800640c:	2b00      	cmp	r3, #0
 800640e:	d13a      	bne.n	8006486 <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8006410:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006414:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	6959      	ldr	r1, [r3, #20]
 800641c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006420:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	88da      	ldrh	r2, [r3, #6]
 8006428:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800642c:	b29b      	uxth	r3, r3
 800642e:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8006432:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8006436:	6800      	ldr	r0, [r0, #0]
 8006438:	f001 fc1d 	bl	8007c76 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800643c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006440:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	613b      	str	r3, [r7, #16]
 8006448:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800644c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006456:	b29b      	uxth	r3, r3
 8006458:	461a      	mov	r2, r3
 800645a:	693b      	ldr	r3, [r7, #16]
 800645c:	4413      	add	r3, r2
 800645e:	613b      	str	r3, [r7, #16]
 8006460:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006464:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	781b      	ldrb	r3, [r3, #0]
 800646c:	00da      	lsls	r2, r3, #3
 800646e:	693b      	ldr	r3, [r7, #16]
 8006470:	4413      	add	r3, r2
 8006472:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006476:	60fb      	str	r3, [r7, #12]
 8006478:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800647c:	b29a      	uxth	r2, r3
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	801a      	strh	r2, [r3, #0]
 8006482:	f000 bde3 	b.w	800704c <USB_EPStartXfer+0xcb6>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8006486:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800648a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	78db      	ldrb	r3, [r3, #3]
 8006492:	2b02      	cmp	r3, #2
 8006494:	f040 843a 	bne.w	8006d0c <USB_EPStartXfer+0x976>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8006498:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800649c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	6a1a      	ldr	r2, [r3, #32]
 80064a4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80064a8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	691b      	ldr	r3, [r3, #16]
 80064b0:	429a      	cmp	r2, r3
 80064b2:	f240 83b7 	bls.w	8006c24 <USB_EPStartXfer+0x88e>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80064b6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80064ba:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80064be:	681a      	ldr	r2, [r3, #0]
 80064c0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80064c4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	781b      	ldrb	r3, [r3, #0]
 80064cc:	009b      	lsls	r3, r3, #2
 80064ce:	4413      	add	r3, r2
 80064d0:	881b      	ldrh	r3, [r3, #0]
 80064d2:	b29b      	uxth	r3, r3
 80064d4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80064d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80064dc:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 80064e0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80064e4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80064e8:	681a      	ldr	r2, [r3, #0]
 80064ea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80064ee:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	781b      	ldrb	r3, [r3, #0]
 80064f6:	009b      	lsls	r3, r3, #2
 80064f8:	441a      	add	r2, r3
 80064fa:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80064fe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006502:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006506:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800650a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800650e:	b29b      	uxth	r3, r3
 8006510:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8006512:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006516:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	6a1a      	ldr	r2, [r3, #32]
 800651e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006522:	1ad2      	subs	r2, r2, r3
 8006524:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006528:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8006530:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006534:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006538:	681a      	ldr	r2, [r3, #0]
 800653a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800653e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	781b      	ldrb	r3, [r3, #0]
 8006546:	009b      	lsls	r3, r3, #2
 8006548:	4413      	add	r3, r2
 800654a:	881b      	ldrh	r3, [r3, #0]
 800654c:	b29b      	uxth	r3, r3
 800654e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006552:	2b00      	cmp	r3, #0
 8006554:	f000 81b3 	beq.w	80068be <USB_EPStartXfer+0x528>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006558:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800655c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	633b      	str	r3, [r7, #48]	; 0x30
 8006564:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006568:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	785b      	ldrb	r3, [r3, #1]
 8006570:	2b00      	cmp	r3, #0
 8006572:	d16d      	bne.n	8006650 <USB_EPStartXfer+0x2ba>
 8006574:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006578:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	62bb      	str	r3, [r7, #40]	; 0x28
 8006580:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006584:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800658e:	b29b      	uxth	r3, r3
 8006590:	461a      	mov	r2, r3
 8006592:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006594:	4413      	add	r3, r2
 8006596:	62bb      	str	r3, [r7, #40]	; 0x28
 8006598:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800659c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	781b      	ldrb	r3, [r3, #0]
 80065a4:	00da      	lsls	r2, r3, #3
 80065a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065a8:	4413      	add	r3, r2
 80065aa:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80065ae:	627b      	str	r3, [r7, #36]	; 0x24
 80065b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80065b4:	2b3e      	cmp	r3, #62	; 0x3e
 80065b6:	d91c      	bls.n	80065f2 <USB_EPStartXfer+0x25c>
 80065b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80065bc:	095b      	lsrs	r3, r3, #5
 80065be:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80065c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80065c6:	f003 031f 	and.w	r3, r3, #31
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d104      	bne.n	80065d8 <USB_EPStartXfer+0x242>
 80065ce:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80065d2:	3b01      	subs	r3, #1
 80065d4:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80065d8:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80065dc:	b29b      	uxth	r3, r3
 80065de:	029b      	lsls	r3, r3, #10
 80065e0:	b29b      	uxth	r3, r3
 80065e2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80065e6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80065ea:	b29a      	uxth	r2, r3
 80065ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065ee:	801a      	strh	r2, [r3, #0]
 80065f0:	e053      	b.n	800669a <USB_EPStartXfer+0x304>
 80065f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d112      	bne.n	8006620 <USB_EPStartXfer+0x28a>
 80065fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065fc:	881b      	ldrh	r3, [r3, #0]
 80065fe:	b29b      	uxth	r3, r3
 8006600:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006604:	b29a      	uxth	r2, r3
 8006606:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006608:	801a      	strh	r2, [r3, #0]
 800660a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800660c:	881b      	ldrh	r3, [r3, #0]
 800660e:	b29b      	uxth	r3, r3
 8006610:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006614:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006618:	b29a      	uxth	r2, r3
 800661a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800661c:	801a      	strh	r2, [r3, #0]
 800661e:	e03c      	b.n	800669a <USB_EPStartXfer+0x304>
 8006620:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006624:	085b      	lsrs	r3, r3, #1
 8006626:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800662a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800662e:	f003 0301 	and.w	r3, r3, #1
 8006632:	2b00      	cmp	r3, #0
 8006634:	d004      	beq.n	8006640 <USB_EPStartXfer+0x2aa>
 8006636:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800663a:	3301      	adds	r3, #1
 800663c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006640:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006644:	b29b      	uxth	r3, r3
 8006646:	029b      	lsls	r3, r3, #10
 8006648:	b29a      	uxth	r2, r3
 800664a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800664c:	801a      	strh	r2, [r3, #0]
 800664e:	e024      	b.n	800669a <USB_EPStartXfer+0x304>
 8006650:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006654:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	785b      	ldrb	r3, [r3, #1]
 800665c:	2b01      	cmp	r3, #1
 800665e:	d11c      	bne.n	800669a <USB_EPStartXfer+0x304>
 8006660:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006664:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800666e:	b29b      	uxth	r3, r3
 8006670:	461a      	mov	r2, r3
 8006672:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006674:	4413      	add	r3, r2
 8006676:	633b      	str	r3, [r7, #48]	; 0x30
 8006678:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800667c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	781b      	ldrb	r3, [r3, #0]
 8006684:	00da      	lsls	r2, r3, #3
 8006686:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006688:	4413      	add	r3, r2
 800668a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800668e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006690:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006694:	b29a      	uxth	r2, r3
 8006696:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006698:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800669a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800669e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	895b      	ldrh	r3, [r3, #10]
 80066a6:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80066aa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80066ae:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	6959      	ldr	r1, [r3, #20]
 80066b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80066ba:	b29b      	uxth	r3, r3
 80066bc:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80066c0:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80066c4:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80066c8:	6800      	ldr	r0, [r0, #0]
 80066ca:	f001 fad4 	bl	8007c76 <USB_WritePMA>
            ep->xfer_buff += len;
 80066ce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80066d2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	695a      	ldr	r2, [r3, #20]
 80066da:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80066de:	441a      	add	r2, r3
 80066e0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80066e4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80066ec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80066f0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	6a1a      	ldr	r2, [r3, #32]
 80066f8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80066fc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	691b      	ldr	r3, [r3, #16]
 8006704:	429a      	cmp	r2, r3
 8006706:	d90f      	bls.n	8006728 <USB_EPStartXfer+0x392>
            {
              ep->xfer_len_db -= len;
 8006708:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800670c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	6a1a      	ldr	r2, [r3, #32]
 8006714:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006718:	1ad2      	subs	r2, r2, r3
 800671a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800671e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	621a      	str	r2, [r3, #32]
 8006726:	e00e      	b.n	8006746 <USB_EPStartXfer+0x3b0>
            }
            else
            {
              len = ep->xfer_len_db;
 8006728:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800672c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	6a1b      	ldr	r3, [r3, #32]
 8006734:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8006738:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800673c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	2200      	movs	r2, #0
 8006744:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006746:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800674a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	785b      	ldrb	r3, [r3, #1]
 8006752:	2b00      	cmp	r3, #0
 8006754:	d16d      	bne.n	8006832 <USB_EPStartXfer+0x49c>
 8006756:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800675a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	61bb      	str	r3, [r7, #24]
 8006762:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006766:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006770:	b29b      	uxth	r3, r3
 8006772:	461a      	mov	r2, r3
 8006774:	69bb      	ldr	r3, [r7, #24]
 8006776:	4413      	add	r3, r2
 8006778:	61bb      	str	r3, [r7, #24]
 800677a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800677e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	781b      	ldrb	r3, [r3, #0]
 8006786:	00da      	lsls	r2, r3, #3
 8006788:	69bb      	ldr	r3, [r7, #24]
 800678a:	4413      	add	r3, r2
 800678c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006790:	617b      	str	r3, [r7, #20]
 8006792:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006796:	2b3e      	cmp	r3, #62	; 0x3e
 8006798:	d91c      	bls.n	80067d4 <USB_EPStartXfer+0x43e>
 800679a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800679e:	095b      	lsrs	r3, r3, #5
 80067a0:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80067a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80067a8:	f003 031f 	and.w	r3, r3, #31
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d104      	bne.n	80067ba <USB_EPStartXfer+0x424>
 80067b0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80067b4:	3b01      	subs	r3, #1
 80067b6:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80067ba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80067be:	b29b      	uxth	r3, r3
 80067c0:	029b      	lsls	r3, r3, #10
 80067c2:	b29b      	uxth	r3, r3
 80067c4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80067c8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80067cc:	b29a      	uxth	r2, r3
 80067ce:	697b      	ldr	r3, [r7, #20]
 80067d0:	801a      	strh	r2, [r3, #0]
 80067d2:	e059      	b.n	8006888 <USB_EPStartXfer+0x4f2>
 80067d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d112      	bne.n	8006802 <USB_EPStartXfer+0x46c>
 80067dc:	697b      	ldr	r3, [r7, #20]
 80067de:	881b      	ldrh	r3, [r3, #0]
 80067e0:	b29b      	uxth	r3, r3
 80067e2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80067e6:	b29a      	uxth	r2, r3
 80067e8:	697b      	ldr	r3, [r7, #20]
 80067ea:	801a      	strh	r2, [r3, #0]
 80067ec:	697b      	ldr	r3, [r7, #20]
 80067ee:	881b      	ldrh	r3, [r3, #0]
 80067f0:	b29b      	uxth	r3, r3
 80067f2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80067f6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80067fa:	b29a      	uxth	r2, r3
 80067fc:	697b      	ldr	r3, [r7, #20]
 80067fe:	801a      	strh	r2, [r3, #0]
 8006800:	e042      	b.n	8006888 <USB_EPStartXfer+0x4f2>
 8006802:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006806:	085b      	lsrs	r3, r3, #1
 8006808:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800680c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006810:	f003 0301 	and.w	r3, r3, #1
 8006814:	2b00      	cmp	r3, #0
 8006816:	d004      	beq.n	8006822 <USB_EPStartXfer+0x48c>
 8006818:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800681c:	3301      	adds	r3, #1
 800681e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006822:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006826:	b29b      	uxth	r3, r3
 8006828:	029b      	lsls	r3, r3, #10
 800682a:	b29a      	uxth	r2, r3
 800682c:	697b      	ldr	r3, [r7, #20]
 800682e:	801a      	strh	r2, [r3, #0]
 8006830:	e02a      	b.n	8006888 <USB_EPStartXfer+0x4f2>
 8006832:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006836:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	785b      	ldrb	r3, [r3, #1]
 800683e:	2b01      	cmp	r3, #1
 8006840:	d122      	bne.n	8006888 <USB_EPStartXfer+0x4f2>
 8006842:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006846:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	623b      	str	r3, [r7, #32]
 800684e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006852:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800685c:	b29b      	uxth	r3, r3
 800685e:	461a      	mov	r2, r3
 8006860:	6a3b      	ldr	r3, [r7, #32]
 8006862:	4413      	add	r3, r2
 8006864:	623b      	str	r3, [r7, #32]
 8006866:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800686a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	781b      	ldrb	r3, [r3, #0]
 8006872:	00da      	lsls	r2, r3, #3
 8006874:	6a3b      	ldr	r3, [r7, #32]
 8006876:	4413      	add	r3, r2
 8006878:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800687c:	61fb      	str	r3, [r7, #28]
 800687e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006882:	b29a      	uxth	r2, r3
 8006884:	69fb      	ldr	r3, [r7, #28]
 8006886:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8006888:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800688c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	891b      	ldrh	r3, [r3, #8]
 8006894:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006898:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800689c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	6959      	ldr	r1, [r3, #20]
 80068a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80068a8:	b29b      	uxth	r3, r3
 80068aa:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80068ae:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80068b2:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80068b6:	6800      	ldr	r0, [r0, #0]
 80068b8:	f001 f9dd 	bl	8007c76 <USB_WritePMA>
 80068bc:	e3c6      	b.n	800704c <USB_EPStartXfer+0xcb6>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80068be:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80068c2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	785b      	ldrb	r3, [r3, #1]
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d16d      	bne.n	80069aa <USB_EPStartXfer+0x614>
 80068ce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80068d2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	64bb      	str	r3, [r7, #72]	; 0x48
 80068da:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80068de:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80068e8:	b29b      	uxth	r3, r3
 80068ea:	461a      	mov	r2, r3
 80068ec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80068ee:	4413      	add	r3, r2
 80068f0:	64bb      	str	r3, [r7, #72]	; 0x48
 80068f2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80068f6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	781b      	ldrb	r3, [r3, #0]
 80068fe:	00da      	lsls	r2, r3, #3
 8006900:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006902:	4413      	add	r3, r2
 8006904:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006908:	647b      	str	r3, [r7, #68]	; 0x44
 800690a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800690e:	2b3e      	cmp	r3, #62	; 0x3e
 8006910:	d91c      	bls.n	800694c <USB_EPStartXfer+0x5b6>
 8006912:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006916:	095b      	lsrs	r3, r3, #5
 8006918:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800691c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006920:	f003 031f 	and.w	r3, r3, #31
 8006924:	2b00      	cmp	r3, #0
 8006926:	d104      	bne.n	8006932 <USB_EPStartXfer+0x59c>
 8006928:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800692c:	3b01      	subs	r3, #1
 800692e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006932:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006936:	b29b      	uxth	r3, r3
 8006938:	029b      	lsls	r3, r3, #10
 800693a:	b29b      	uxth	r3, r3
 800693c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006940:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006944:	b29a      	uxth	r2, r3
 8006946:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006948:	801a      	strh	r2, [r3, #0]
 800694a:	e059      	b.n	8006a00 <USB_EPStartXfer+0x66a>
 800694c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006950:	2b00      	cmp	r3, #0
 8006952:	d112      	bne.n	800697a <USB_EPStartXfer+0x5e4>
 8006954:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006956:	881b      	ldrh	r3, [r3, #0]
 8006958:	b29b      	uxth	r3, r3
 800695a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800695e:	b29a      	uxth	r2, r3
 8006960:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006962:	801a      	strh	r2, [r3, #0]
 8006964:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006966:	881b      	ldrh	r3, [r3, #0]
 8006968:	b29b      	uxth	r3, r3
 800696a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800696e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006972:	b29a      	uxth	r2, r3
 8006974:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006976:	801a      	strh	r2, [r3, #0]
 8006978:	e042      	b.n	8006a00 <USB_EPStartXfer+0x66a>
 800697a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800697e:	085b      	lsrs	r3, r3, #1
 8006980:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006984:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006988:	f003 0301 	and.w	r3, r3, #1
 800698c:	2b00      	cmp	r3, #0
 800698e:	d004      	beq.n	800699a <USB_EPStartXfer+0x604>
 8006990:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006994:	3301      	adds	r3, #1
 8006996:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800699a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800699e:	b29b      	uxth	r3, r3
 80069a0:	029b      	lsls	r3, r3, #10
 80069a2:	b29a      	uxth	r2, r3
 80069a4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80069a6:	801a      	strh	r2, [r3, #0]
 80069a8:	e02a      	b.n	8006a00 <USB_EPStartXfer+0x66a>
 80069aa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80069ae:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	785b      	ldrb	r3, [r3, #1]
 80069b6:	2b01      	cmp	r3, #1
 80069b8:	d122      	bne.n	8006a00 <USB_EPStartXfer+0x66a>
 80069ba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80069be:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	653b      	str	r3, [r7, #80]	; 0x50
 80069c6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80069ca:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80069d4:	b29b      	uxth	r3, r3
 80069d6:	461a      	mov	r2, r3
 80069d8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80069da:	4413      	add	r3, r2
 80069dc:	653b      	str	r3, [r7, #80]	; 0x50
 80069de:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80069e2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	781b      	ldrb	r3, [r3, #0]
 80069ea:	00da      	lsls	r2, r3, #3
 80069ec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80069ee:	4413      	add	r3, r2
 80069f0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80069f4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80069f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80069fa:	b29a      	uxth	r2, r3
 80069fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80069fe:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8006a00:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a04:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	891b      	ldrh	r3, [r3, #8]
 8006a0c:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006a10:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a14:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	6959      	ldr	r1, [r3, #20]
 8006a1c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006a20:	b29b      	uxth	r3, r3
 8006a22:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8006a26:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8006a2a:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8006a2e:	6800      	ldr	r0, [r0, #0]
 8006a30:	f001 f921 	bl	8007c76 <USB_WritePMA>
            ep->xfer_buff += len;
 8006a34:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a38:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	695a      	ldr	r2, [r3, #20]
 8006a40:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006a44:	441a      	add	r2, r3
 8006a46:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a4a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8006a52:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a56:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	6a1a      	ldr	r2, [r3, #32]
 8006a5e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a62:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	691b      	ldr	r3, [r3, #16]
 8006a6a:	429a      	cmp	r2, r3
 8006a6c:	d90f      	bls.n	8006a8e <USB_EPStartXfer+0x6f8>
            {
              ep->xfer_len_db -= len;
 8006a6e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a72:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	6a1a      	ldr	r2, [r3, #32]
 8006a7a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006a7e:	1ad2      	subs	r2, r2, r3
 8006a80:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a84:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	621a      	str	r2, [r3, #32]
 8006a8c:	e00e      	b.n	8006aac <USB_EPStartXfer+0x716>
            }
            else
            {
              len = ep->xfer_len_db;
 8006a8e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a92:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	6a1b      	ldr	r3, [r3, #32]
 8006a9a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8006a9e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006aa2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	2200      	movs	r2, #0
 8006aaa:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006aac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ab0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	643b      	str	r3, [r7, #64]	; 0x40
 8006ab8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006abc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	785b      	ldrb	r3, [r3, #1]
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d16d      	bne.n	8006ba4 <USB_EPStartXfer+0x80e>
 8006ac8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006acc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	63bb      	str	r3, [r7, #56]	; 0x38
 8006ad4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ad8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006ae2:	b29b      	uxth	r3, r3
 8006ae4:	461a      	mov	r2, r3
 8006ae6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ae8:	4413      	add	r3, r2
 8006aea:	63bb      	str	r3, [r7, #56]	; 0x38
 8006aec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006af0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	781b      	ldrb	r3, [r3, #0]
 8006af8:	00da      	lsls	r2, r3, #3
 8006afa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006afc:	4413      	add	r3, r2
 8006afe:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006b02:	637b      	str	r3, [r7, #52]	; 0x34
 8006b04:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006b08:	2b3e      	cmp	r3, #62	; 0x3e
 8006b0a:	d91c      	bls.n	8006b46 <USB_EPStartXfer+0x7b0>
 8006b0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006b10:	095b      	lsrs	r3, r3, #5
 8006b12:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006b16:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006b1a:	f003 031f 	and.w	r3, r3, #31
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d104      	bne.n	8006b2c <USB_EPStartXfer+0x796>
 8006b22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b26:	3b01      	subs	r3, #1
 8006b28:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006b2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b30:	b29b      	uxth	r3, r3
 8006b32:	029b      	lsls	r3, r3, #10
 8006b34:	b29b      	uxth	r3, r3
 8006b36:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006b3a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006b3e:	b29a      	uxth	r2, r3
 8006b40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b42:	801a      	strh	r2, [r3, #0]
 8006b44:	e053      	b.n	8006bee <USB_EPStartXfer+0x858>
 8006b46:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d112      	bne.n	8006b74 <USB_EPStartXfer+0x7de>
 8006b4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b50:	881b      	ldrh	r3, [r3, #0]
 8006b52:	b29b      	uxth	r3, r3
 8006b54:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006b58:	b29a      	uxth	r2, r3
 8006b5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b5c:	801a      	strh	r2, [r3, #0]
 8006b5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b60:	881b      	ldrh	r3, [r3, #0]
 8006b62:	b29b      	uxth	r3, r3
 8006b64:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006b68:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006b6c:	b29a      	uxth	r2, r3
 8006b6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b70:	801a      	strh	r2, [r3, #0]
 8006b72:	e03c      	b.n	8006bee <USB_EPStartXfer+0x858>
 8006b74:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006b78:	085b      	lsrs	r3, r3, #1
 8006b7a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006b7e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006b82:	f003 0301 	and.w	r3, r3, #1
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d004      	beq.n	8006b94 <USB_EPStartXfer+0x7fe>
 8006b8a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b8e:	3301      	adds	r3, #1
 8006b90:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006b94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b98:	b29b      	uxth	r3, r3
 8006b9a:	029b      	lsls	r3, r3, #10
 8006b9c:	b29a      	uxth	r2, r3
 8006b9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ba0:	801a      	strh	r2, [r3, #0]
 8006ba2:	e024      	b.n	8006bee <USB_EPStartXfer+0x858>
 8006ba4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ba8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	785b      	ldrb	r3, [r3, #1]
 8006bb0:	2b01      	cmp	r3, #1
 8006bb2:	d11c      	bne.n	8006bee <USB_EPStartXfer+0x858>
 8006bb4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006bb8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006bc2:	b29b      	uxth	r3, r3
 8006bc4:	461a      	mov	r2, r3
 8006bc6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006bc8:	4413      	add	r3, r2
 8006bca:	643b      	str	r3, [r7, #64]	; 0x40
 8006bcc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006bd0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	781b      	ldrb	r3, [r3, #0]
 8006bd8:	00da      	lsls	r2, r3, #3
 8006bda:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006bdc:	4413      	add	r3, r2
 8006bde:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006be2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006be4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006be8:	b29a      	uxth	r2, r3
 8006bea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006bec:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8006bee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006bf2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	895b      	ldrh	r3, [r3, #10]
 8006bfa:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006bfe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c02:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	6959      	ldr	r1, [r3, #20]
 8006c0a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006c0e:	b29b      	uxth	r3, r3
 8006c10:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8006c14:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8006c18:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8006c1c:	6800      	ldr	r0, [r0, #0]
 8006c1e:	f001 f82a 	bl	8007c76 <USB_WritePMA>
 8006c22:	e213      	b.n	800704c <USB_EPStartXfer+0xcb6>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8006c24:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c28:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	6a1b      	ldr	r3, [r3, #32]
 8006c30:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8006c34:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c38:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006c3c:	681a      	ldr	r2, [r3, #0]
 8006c3e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c42:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	781b      	ldrb	r3, [r3, #0]
 8006c4a:	009b      	lsls	r3, r3, #2
 8006c4c:	4413      	add	r3, r2
 8006c4e:	881b      	ldrh	r3, [r3, #0]
 8006c50:	b29b      	uxth	r3, r3
 8006c52:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8006c56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c5a:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8006c5e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c62:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006c66:	681a      	ldr	r2, [r3, #0]
 8006c68:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c6c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	781b      	ldrb	r3, [r3, #0]
 8006c74:	009b      	lsls	r3, r3, #2
 8006c76:	441a      	add	r2, r3
 8006c78:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8006c7c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006c80:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006c84:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006c88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006c8c:	b29b      	uxth	r3, r3
 8006c8e:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8006c90:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c94:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006c9c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ca0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006caa:	b29b      	uxth	r3, r3
 8006cac:	461a      	mov	r2, r3
 8006cae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006cb0:	4413      	add	r3, r2
 8006cb2:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006cb4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006cb8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	781b      	ldrb	r3, [r3, #0]
 8006cc0:	00da      	lsls	r2, r3, #3
 8006cc2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006cc4:	4413      	add	r3, r2
 8006cc6:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006cca:	65bb      	str	r3, [r7, #88]	; 0x58
 8006ccc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006cd0:	b29a      	uxth	r2, r3
 8006cd2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006cd4:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8006cd6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006cda:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	891b      	ldrh	r3, [r3, #8]
 8006ce2:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006ce6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006cea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	6959      	ldr	r1, [r3, #20]
 8006cf2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006cf6:	b29b      	uxth	r3, r3
 8006cf8:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8006cfc:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8006d00:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8006d04:	6800      	ldr	r0, [r0, #0]
 8006d06:	f000 ffb6 	bl	8007c76 <USB_WritePMA>
 8006d0a:	e19f      	b.n	800704c <USB_EPStartXfer+0xcb6>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8006d0c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d10:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	6a1a      	ldr	r2, [r3, #32]
 8006d18:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006d1c:	1ad2      	subs	r2, r2, r3
 8006d1e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d22:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8006d2a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d2e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006d32:	681a      	ldr	r2, [r3, #0]
 8006d34:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d38:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	781b      	ldrb	r3, [r3, #0]
 8006d40:	009b      	lsls	r3, r3, #2
 8006d42:	4413      	add	r3, r2
 8006d44:	881b      	ldrh	r3, [r3, #0]
 8006d46:	b29b      	uxth	r3, r3
 8006d48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	f000 80bc 	beq.w	8006eca <USB_EPStartXfer+0xb34>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006d52:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d56:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	673b      	str	r3, [r7, #112]	; 0x70
 8006d5e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d62:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	785b      	ldrb	r3, [r3, #1]
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d16d      	bne.n	8006e4a <USB_EPStartXfer+0xab4>
 8006d6e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d72:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	66bb      	str	r3, [r7, #104]	; 0x68
 8006d7a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d7e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006d88:	b29b      	uxth	r3, r3
 8006d8a:	461a      	mov	r2, r3
 8006d8c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006d8e:	4413      	add	r3, r2
 8006d90:	66bb      	str	r3, [r7, #104]	; 0x68
 8006d92:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d96:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	781b      	ldrb	r3, [r3, #0]
 8006d9e:	00da      	lsls	r2, r3, #3
 8006da0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006da2:	4413      	add	r3, r2
 8006da4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006da8:	667b      	str	r3, [r7, #100]	; 0x64
 8006daa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006dae:	2b3e      	cmp	r3, #62	; 0x3e
 8006db0:	d91c      	bls.n	8006dec <USB_EPStartXfer+0xa56>
 8006db2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006db6:	095b      	lsrs	r3, r3, #5
 8006db8:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006dbc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006dc0:	f003 031f 	and.w	r3, r3, #31
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d104      	bne.n	8006dd2 <USB_EPStartXfer+0xa3c>
 8006dc8:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8006dcc:	3b01      	subs	r3, #1
 8006dce:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006dd2:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8006dd6:	b29b      	uxth	r3, r3
 8006dd8:	029b      	lsls	r3, r3, #10
 8006dda:	b29b      	uxth	r3, r3
 8006ddc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006de0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006de4:	b29a      	uxth	r2, r3
 8006de6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006de8:	801a      	strh	r2, [r3, #0]
 8006dea:	e053      	b.n	8006e94 <USB_EPStartXfer+0xafe>
 8006dec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	d112      	bne.n	8006e1a <USB_EPStartXfer+0xa84>
 8006df4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006df6:	881b      	ldrh	r3, [r3, #0]
 8006df8:	b29b      	uxth	r3, r3
 8006dfa:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006dfe:	b29a      	uxth	r2, r3
 8006e00:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006e02:	801a      	strh	r2, [r3, #0]
 8006e04:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006e06:	881b      	ldrh	r3, [r3, #0]
 8006e08:	b29b      	uxth	r3, r3
 8006e0a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006e0e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006e12:	b29a      	uxth	r2, r3
 8006e14:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006e16:	801a      	strh	r2, [r3, #0]
 8006e18:	e03c      	b.n	8006e94 <USB_EPStartXfer+0xafe>
 8006e1a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006e1e:	085b      	lsrs	r3, r3, #1
 8006e20:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006e24:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006e28:	f003 0301 	and.w	r3, r3, #1
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d004      	beq.n	8006e3a <USB_EPStartXfer+0xaa4>
 8006e30:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8006e34:	3301      	adds	r3, #1
 8006e36:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006e3a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8006e3e:	b29b      	uxth	r3, r3
 8006e40:	029b      	lsls	r3, r3, #10
 8006e42:	b29a      	uxth	r2, r3
 8006e44:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006e46:	801a      	strh	r2, [r3, #0]
 8006e48:	e024      	b.n	8006e94 <USB_EPStartXfer+0xafe>
 8006e4a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e4e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	785b      	ldrb	r3, [r3, #1]
 8006e56:	2b01      	cmp	r3, #1
 8006e58:	d11c      	bne.n	8006e94 <USB_EPStartXfer+0xafe>
 8006e5a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e5e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006e68:	b29b      	uxth	r3, r3
 8006e6a:	461a      	mov	r2, r3
 8006e6c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006e6e:	4413      	add	r3, r2
 8006e70:	673b      	str	r3, [r7, #112]	; 0x70
 8006e72:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e76:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	781b      	ldrb	r3, [r3, #0]
 8006e7e:	00da      	lsls	r2, r3, #3
 8006e80:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006e82:	4413      	add	r3, r2
 8006e84:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006e88:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006e8a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006e8e:	b29a      	uxth	r2, r3
 8006e90:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006e92:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8006e94:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e98:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	895b      	ldrh	r3, [r3, #10]
 8006ea0:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006ea4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ea8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	6959      	ldr	r1, [r3, #20]
 8006eb0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006eb4:	b29b      	uxth	r3, r3
 8006eb6:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8006eba:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8006ebe:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8006ec2:	6800      	ldr	r0, [r0, #0]
 8006ec4:	f000 fed7 	bl	8007c76 <USB_WritePMA>
 8006ec8:	e0c0      	b.n	800704c <USB_EPStartXfer+0xcb6>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006eca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ece:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	785b      	ldrb	r3, [r3, #1]
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d16d      	bne.n	8006fb6 <USB_EPStartXfer+0xc20>
 8006eda:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ede:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006ee6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006eea:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006ef4:	b29b      	uxth	r3, r3
 8006ef6:	461a      	mov	r2, r3
 8006ef8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006efa:	4413      	add	r3, r2
 8006efc:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006efe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f02:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	781b      	ldrb	r3, [r3, #0]
 8006f0a:	00da      	lsls	r2, r3, #3
 8006f0c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006f0e:	4413      	add	r3, r2
 8006f10:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006f14:	67bb      	str	r3, [r7, #120]	; 0x78
 8006f16:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006f1a:	2b3e      	cmp	r3, #62	; 0x3e
 8006f1c:	d91c      	bls.n	8006f58 <USB_EPStartXfer+0xbc2>
 8006f1e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006f22:	095b      	lsrs	r3, r3, #5
 8006f24:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006f28:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006f2c:	f003 031f 	and.w	r3, r3, #31
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d104      	bne.n	8006f3e <USB_EPStartXfer+0xba8>
 8006f34:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006f38:	3b01      	subs	r3, #1
 8006f3a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006f3e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006f42:	b29b      	uxth	r3, r3
 8006f44:	029b      	lsls	r3, r3, #10
 8006f46:	b29b      	uxth	r3, r3
 8006f48:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006f4c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006f50:	b29a      	uxth	r2, r3
 8006f52:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006f54:	801a      	strh	r2, [r3, #0]
 8006f56:	e05f      	b.n	8007018 <USB_EPStartXfer+0xc82>
 8006f58:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	d112      	bne.n	8006f86 <USB_EPStartXfer+0xbf0>
 8006f60:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006f62:	881b      	ldrh	r3, [r3, #0]
 8006f64:	b29b      	uxth	r3, r3
 8006f66:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006f6a:	b29a      	uxth	r2, r3
 8006f6c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006f6e:	801a      	strh	r2, [r3, #0]
 8006f70:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006f72:	881b      	ldrh	r3, [r3, #0]
 8006f74:	b29b      	uxth	r3, r3
 8006f76:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006f7a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006f7e:	b29a      	uxth	r2, r3
 8006f80:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006f82:	801a      	strh	r2, [r3, #0]
 8006f84:	e048      	b.n	8007018 <USB_EPStartXfer+0xc82>
 8006f86:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006f8a:	085b      	lsrs	r3, r3, #1
 8006f8c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006f90:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006f94:	f003 0301 	and.w	r3, r3, #1
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d004      	beq.n	8006fa6 <USB_EPStartXfer+0xc10>
 8006f9c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006fa0:	3301      	adds	r3, #1
 8006fa2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006fa6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006faa:	b29b      	uxth	r3, r3
 8006fac:	029b      	lsls	r3, r3, #10
 8006fae:	b29a      	uxth	r2, r3
 8006fb0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006fb2:	801a      	strh	r2, [r3, #0]
 8006fb4:	e030      	b.n	8007018 <USB_EPStartXfer+0xc82>
 8006fb6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006fba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	785b      	ldrb	r3, [r3, #1]
 8006fc2:	2b01      	cmp	r3, #1
 8006fc4:	d128      	bne.n	8007018 <USB_EPStartXfer+0xc82>
 8006fc6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006fca:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006fd4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006fd8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006fe2:	b29b      	uxth	r3, r3
 8006fe4:	461a      	mov	r2, r3
 8006fe6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006fea:	4413      	add	r3, r2
 8006fec:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006ff0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ff4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	781b      	ldrb	r3, [r3, #0]
 8006ffc:	00da      	lsls	r2, r3, #3
 8006ffe:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007002:	4413      	add	r3, r2
 8007004:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007008:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800700c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007010:	b29a      	uxth	r2, r3
 8007012:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007016:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8007018:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800701c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	891b      	ldrh	r3, [r3, #8]
 8007024:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007028:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800702c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	6959      	ldr	r1, [r3, #20]
 8007034:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007038:	b29b      	uxth	r3, r3
 800703a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800703e:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8007042:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8007046:	6800      	ldr	r0, [r0, #0]
 8007048:	f000 fe15 	bl	8007c76 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800704c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007050:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007054:	681a      	ldr	r2, [r3, #0]
 8007056:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800705a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	781b      	ldrb	r3, [r3, #0]
 8007062:	009b      	lsls	r3, r3, #2
 8007064:	4413      	add	r3, r2
 8007066:	881b      	ldrh	r3, [r3, #0]
 8007068:	b29b      	uxth	r3, r3
 800706a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800706e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007072:	817b      	strh	r3, [r7, #10]
 8007074:	897b      	ldrh	r3, [r7, #10]
 8007076:	f083 0310 	eor.w	r3, r3, #16
 800707a:	817b      	strh	r3, [r7, #10]
 800707c:	897b      	ldrh	r3, [r7, #10]
 800707e:	f083 0320 	eor.w	r3, r3, #32
 8007082:	817b      	strh	r3, [r7, #10]
 8007084:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007088:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800708c:	681a      	ldr	r2, [r3, #0]
 800708e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007092:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	781b      	ldrb	r3, [r3, #0]
 800709a:	009b      	lsls	r3, r3, #2
 800709c:	441a      	add	r2, r3
 800709e:	897b      	ldrh	r3, [r7, #10]
 80070a0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80070a4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80070a8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80070ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80070b0:	b29b      	uxth	r3, r3
 80070b2:	8013      	strh	r3, [r2, #0]
 80070b4:	f000 bc9f 	b.w	80079f6 <USB_EPStartXfer+0x1660>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 80070b8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80070bc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	7b1b      	ldrb	r3, [r3, #12]
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	f040 80ae 	bne.w	8007226 <USB_EPStartXfer+0xe90>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 80070ca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80070ce:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	699a      	ldr	r2, [r3, #24]
 80070d6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80070da:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	691b      	ldr	r3, [r3, #16]
 80070e2:	429a      	cmp	r2, r3
 80070e4:	d917      	bls.n	8007116 <USB_EPStartXfer+0xd80>
      {
        len = ep->maxpacket;
 80070e6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80070ea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	691b      	ldr	r3, [r3, #16]
 80070f2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 80070f6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80070fa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	699a      	ldr	r2, [r3, #24]
 8007102:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007106:	1ad2      	subs	r2, r2, r3
 8007108:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800710c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	619a      	str	r2, [r3, #24]
 8007114:	e00e      	b.n	8007134 <USB_EPStartXfer+0xd9e>
      }
      else
      {
        len = ep->xfer_len;
 8007116:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800711a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	699b      	ldr	r3, [r3, #24]
 8007122:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 8007126:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800712a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	2200      	movs	r2, #0
 8007132:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8007134:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007138:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007142:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007146:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007150:	b29b      	uxth	r3, r3
 8007152:	461a      	mov	r2, r3
 8007154:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007158:	4413      	add	r3, r2
 800715a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800715e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007162:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	781b      	ldrb	r3, [r3, #0]
 800716a:	00da      	lsls	r2, r3, #3
 800716c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007170:	4413      	add	r3, r2
 8007172:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007176:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800717a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800717e:	2b3e      	cmp	r3, #62	; 0x3e
 8007180:	d91d      	bls.n	80071be <USB_EPStartXfer+0xe28>
 8007182:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007186:	095b      	lsrs	r3, r3, #5
 8007188:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800718c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007190:	f003 031f 	and.w	r3, r3, #31
 8007194:	2b00      	cmp	r3, #0
 8007196:	d104      	bne.n	80071a2 <USB_EPStartXfer+0xe0c>
 8007198:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800719c:	3b01      	subs	r3, #1
 800719e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80071a2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80071a6:	b29b      	uxth	r3, r3
 80071a8:	029b      	lsls	r3, r3, #10
 80071aa:	b29b      	uxth	r3, r3
 80071ac:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80071b0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80071b4:	b29a      	uxth	r2, r3
 80071b6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80071ba:	801a      	strh	r2, [r3, #0]
 80071bc:	e3e1      	b.n	8007982 <USB_EPStartXfer+0x15ec>
 80071be:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d116      	bne.n	80071f4 <USB_EPStartXfer+0xe5e>
 80071c6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80071ca:	881b      	ldrh	r3, [r3, #0]
 80071cc:	b29b      	uxth	r3, r3
 80071ce:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80071d2:	b29a      	uxth	r2, r3
 80071d4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80071d8:	801a      	strh	r2, [r3, #0]
 80071da:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80071de:	881b      	ldrh	r3, [r3, #0]
 80071e0:	b29b      	uxth	r3, r3
 80071e2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80071e6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80071ea:	b29a      	uxth	r2, r3
 80071ec:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80071f0:	801a      	strh	r2, [r3, #0]
 80071f2:	e3c6      	b.n	8007982 <USB_EPStartXfer+0x15ec>
 80071f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80071f8:	085b      	lsrs	r3, r3, #1
 80071fa:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80071fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007202:	f003 0301 	and.w	r3, r3, #1
 8007206:	2b00      	cmp	r3, #0
 8007208:	d004      	beq.n	8007214 <USB_EPStartXfer+0xe7e>
 800720a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800720e:	3301      	adds	r3, #1
 8007210:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007214:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007218:	b29b      	uxth	r3, r3
 800721a:	029b      	lsls	r3, r3, #10
 800721c:	b29a      	uxth	r2, r3
 800721e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007222:	801a      	strh	r2, [r3, #0]
 8007224:	e3ad      	b.n	8007982 <USB_EPStartXfer+0x15ec>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8007226:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800722a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	78db      	ldrb	r3, [r3, #3]
 8007232:	2b02      	cmp	r3, #2
 8007234:	f040 8200 	bne.w	8007638 <USB_EPStartXfer+0x12a2>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8007238:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800723c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	785b      	ldrb	r3, [r3, #1]
 8007244:	2b00      	cmp	r3, #0
 8007246:	f040 8091 	bne.w	800736c <USB_EPStartXfer+0xfd6>
 800724a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800724e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007258:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800725c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007266:	b29b      	uxth	r3, r3
 8007268:	461a      	mov	r2, r3
 800726a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800726e:	4413      	add	r3, r2
 8007270:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007274:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007278:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	781b      	ldrb	r3, [r3, #0]
 8007280:	00da      	lsls	r2, r3, #3
 8007282:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007286:	4413      	add	r3, r2
 8007288:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800728c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8007290:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007294:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	691b      	ldr	r3, [r3, #16]
 800729c:	2b3e      	cmp	r3, #62	; 0x3e
 800729e:	d925      	bls.n	80072ec <USB_EPStartXfer+0xf56>
 80072a0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80072a4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	691b      	ldr	r3, [r3, #16]
 80072ac:	095b      	lsrs	r3, r3, #5
 80072ae:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80072b2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80072b6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	691b      	ldr	r3, [r3, #16]
 80072be:	f003 031f 	and.w	r3, r3, #31
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d104      	bne.n	80072d0 <USB_EPStartXfer+0xf3a>
 80072c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80072ca:	3b01      	subs	r3, #1
 80072cc:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80072d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80072d4:	b29b      	uxth	r3, r3
 80072d6:	029b      	lsls	r3, r3, #10
 80072d8:	b29b      	uxth	r3, r3
 80072da:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80072de:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80072e2:	b29a      	uxth	r2, r3
 80072e4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80072e8:	801a      	strh	r2, [r3, #0]
 80072ea:	e074      	b.n	80073d6 <USB_EPStartXfer+0x1040>
 80072ec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80072f0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	691b      	ldr	r3, [r3, #16]
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	d116      	bne.n	800732a <USB_EPStartXfer+0xf94>
 80072fc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007300:	881b      	ldrh	r3, [r3, #0]
 8007302:	b29b      	uxth	r3, r3
 8007304:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007308:	b29a      	uxth	r2, r3
 800730a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800730e:	801a      	strh	r2, [r3, #0]
 8007310:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007314:	881b      	ldrh	r3, [r3, #0]
 8007316:	b29b      	uxth	r3, r3
 8007318:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800731c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007320:	b29a      	uxth	r2, r3
 8007322:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007326:	801a      	strh	r2, [r3, #0]
 8007328:	e055      	b.n	80073d6 <USB_EPStartXfer+0x1040>
 800732a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800732e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	691b      	ldr	r3, [r3, #16]
 8007336:	085b      	lsrs	r3, r3, #1
 8007338:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800733c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007340:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	691b      	ldr	r3, [r3, #16]
 8007348:	f003 0301 	and.w	r3, r3, #1
 800734c:	2b00      	cmp	r3, #0
 800734e:	d004      	beq.n	800735a <USB_EPStartXfer+0xfc4>
 8007350:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007354:	3301      	adds	r3, #1
 8007356:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800735a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800735e:	b29b      	uxth	r3, r3
 8007360:	029b      	lsls	r3, r3, #10
 8007362:	b29a      	uxth	r2, r3
 8007364:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007368:	801a      	strh	r2, [r3, #0]
 800736a:	e034      	b.n	80073d6 <USB_EPStartXfer+0x1040>
 800736c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007370:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	785b      	ldrb	r3, [r3, #1]
 8007378:	2b01      	cmp	r3, #1
 800737a:	d12c      	bne.n	80073d6 <USB_EPStartXfer+0x1040>
 800737c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007380:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800738a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800738e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007398:	b29b      	uxth	r3, r3
 800739a:	461a      	mov	r2, r3
 800739c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80073a0:	4413      	add	r3, r2
 80073a2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80073a6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80073aa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	781b      	ldrb	r3, [r3, #0]
 80073b2:	00da      	lsls	r2, r3, #3
 80073b4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80073b8:	4413      	add	r3, r2
 80073ba:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80073be:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80073c2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80073c6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	691b      	ldr	r3, [r3, #16]
 80073ce:	b29a      	uxth	r2, r3
 80073d0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80073d4:	801a      	strh	r2, [r3, #0]
 80073d6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80073da:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80073e4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80073e8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	785b      	ldrb	r3, [r3, #1]
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	f040 8091 	bne.w	8007518 <USB_EPStartXfer+0x1182>
 80073f6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80073fa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007404:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007408:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007412:	b29b      	uxth	r3, r3
 8007414:	461a      	mov	r2, r3
 8007416:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800741a:	4413      	add	r3, r2
 800741c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007420:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007424:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	781b      	ldrb	r3, [r3, #0]
 800742c:	00da      	lsls	r2, r3, #3
 800742e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007432:	4413      	add	r3, r2
 8007434:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007438:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800743c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007440:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	691b      	ldr	r3, [r3, #16]
 8007448:	2b3e      	cmp	r3, #62	; 0x3e
 800744a:	d925      	bls.n	8007498 <USB_EPStartXfer+0x1102>
 800744c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007450:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	691b      	ldr	r3, [r3, #16]
 8007458:	095b      	lsrs	r3, r3, #5
 800745a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800745e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007462:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	691b      	ldr	r3, [r3, #16]
 800746a:	f003 031f 	and.w	r3, r3, #31
 800746e:	2b00      	cmp	r3, #0
 8007470:	d104      	bne.n	800747c <USB_EPStartXfer+0x10e6>
 8007472:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007476:	3b01      	subs	r3, #1
 8007478:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800747c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007480:	b29b      	uxth	r3, r3
 8007482:	029b      	lsls	r3, r3, #10
 8007484:	b29b      	uxth	r3, r3
 8007486:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800748a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800748e:	b29a      	uxth	r2, r3
 8007490:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007494:	801a      	strh	r2, [r3, #0]
 8007496:	e06d      	b.n	8007574 <USB_EPStartXfer+0x11de>
 8007498:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800749c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	691b      	ldr	r3, [r3, #16]
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d116      	bne.n	80074d6 <USB_EPStartXfer+0x1140>
 80074a8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80074ac:	881b      	ldrh	r3, [r3, #0]
 80074ae:	b29b      	uxth	r3, r3
 80074b0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80074b4:	b29a      	uxth	r2, r3
 80074b6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80074ba:	801a      	strh	r2, [r3, #0]
 80074bc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80074c0:	881b      	ldrh	r3, [r3, #0]
 80074c2:	b29b      	uxth	r3, r3
 80074c4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80074c8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80074cc:	b29a      	uxth	r2, r3
 80074ce:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80074d2:	801a      	strh	r2, [r3, #0]
 80074d4:	e04e      	b.n	8007574 <USB_EPStartXfer+0x11de>
 80074d6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80074da:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	691b      	ldr	r3, [r3, #16]
 80074e2:	085b      	lsrs	r3, r3, #1
 80074e4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80074e8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80074ec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	691b      	ldr	r3, [r3, #16]
 80074f4:	f003 0301 	and.w	r3, r3, #1
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	d004      	beq.n	8007506 <USB_EPStartXfer+0x1170>
 80074fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007500:	3301      	adds	r3, #1
 8007502:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007506:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800750a:	b29b      	uxth	r3, r3
 800750c:	029b      	lsls	r3, r3, #10
 800750e:	b29a      	uxth	r2, r3
 8007510:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007514:	801a      	strh	r2, [r3, #0]
 8007516:	e02d      	b.n	8007574 <USB_EPStartXfer+0x11de>
 8007518:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800751c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	785b      	ldrb	r3, [r3, #1]
 8007524:	2b01      	cmp	r3, #1
 8007526:	d125      	bne.n	8007574 <USB_EPStartXfer+0x11de>
 8007528:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800752c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007536:	b29b      	uxth	r3, r3
 8007538:	461a      	mov	r2, r3
 800753a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800753e:	4413      	add	r3, r2
 8007540:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8007544:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007548:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	781b      	ldrb	r3, [r3, #0]
 8007550:	00da      	lsls	r2, r3, #3
 8007552:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8007556:	4413      	add	r3, r2
 8007558:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800755c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8007560:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007564:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	691b      	ldr	r3, [r3, #16]
 800756c:	b29a      	uxth	r2, r3
 800756e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007572:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8007574:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007578:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	69db      	ldr	r3, [r3, #28]
 8007580:	2b00      	cmp	r3, #0
 8007582:	f000 81fe 	beq.w	8007982 <USB_EPStartXfer+0x15ec>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8007586:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800758a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800758e:	681a      	ldr	r2, [r3, #0]
 8007590:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007594:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	781b      	ldrb	r3, [r3, #0]
 800759c:	009b      	lsls	r3, r3, #2
 800759e:	4413      	add	r3, r2
 80075a0:	881b      	ldrh	r3, [r3, #0]
 80075a2:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80075a6:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 80075aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	d005      	beq.n	80075be <USB_EPStartXfer+0x1228>
 80075b2:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 80075b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d10d      	bne.n	80075da <USB_EPStartXfer+0x1244>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80075be:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 80075c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	f040 81db 	bne.w	8007982 <USB_EPStartXfer+0x15ec>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80075cc:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 80075d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	f040 81d4 	bne.w	8007982 <USB_EPStartXfer+0x15ec>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 80075da:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80075de:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80075e2:	681a      	ldr	r2, [r3, #0]
 80075e4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80075e8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	781b      	ldrb	r3, [r3, #0]
 80075f0:	009b      	lsls	r3, r3, #2
 80075f2:	4413      	add	r3, r2
 80075f4:	881b      	ldrh	r3, [r3, #0]
 80075f6:	b29b      	uxth	r3, r3
 80075f8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80075fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007600:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 8007604:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007608:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800760c:	681a      	ldr	r2, [r3, #0]
 800760e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007612:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	781b      	ldrb	r3, [r3, #0]
 800761a:	009b      	lsls	r3, r3, #2
 800761c:	441a      	add	r2, r3
 800761e:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 8007622:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007626:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800762a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800762e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007632:	b29b      	uxth	r3, r3
 8007634:	8013      	strh	r3, [r2, #0]
 8007636:	e1a4      	b.n	8007982 <USB_EPStartXfer+0x15ec>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8007638:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800763c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	78db      	ldrb	r3, [r3, #3]
 8007644:	2b01      	cmp	r3, #1
 8007646:	f040 819a 	bne.w	800797e <USB_EPStartXfer+0x15e8>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800764a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800764e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	699a      	ldr	r2, [r3, #24]
 8007656:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800765a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	691b      	ldr	r3, [r3, #16]
 8007662:	429a      	cmp	r2, r3
 8007664:	d917      	bls.n	8007696 <USB_EPStartXfer+0x1300>
        {
          len = ep->maxpacket;
 8007666:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800766a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	691b      	ldr	r3, [r3, #16]
 8007672:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 8007676:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800767a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	699a      	ldr	r2, [r3, #24]
 8007682:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007686:	1ad2      	subs	r2, r2, r3
 8007688:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800768c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	619a      	str	r2, [r3, #24]
 8007694:	e00e      	b.n	80076b4 <USB_EPStartXfer+0x131e>
        }
        else
        {
          len = ep->xfer_len;
 8007696:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800769a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	699b      	ldr	r3, [r3, #24]
 80076a2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 80076a6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80076aa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	2200      	movs	r2, #0
 80076b2:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 80076b4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80076b8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	785b      	ldrb	r3, [r3, #1]
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	d178      	bne.n	80077b6 <USB_EPStartXfer+0x1420>
 80076c4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80076c8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80076d2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80076d6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80076e0:	b29b      	uxth	r3, r3
 80076e2:	461a      	mov	r2, r3
 80076e4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80076e8:	4413      	add	r3, r2
 80076ea:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80076ee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80076f2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	781b      	ldrb	r3, [r3, #0]
 80076fa:	00da      	lsls	r2, r3, #3
 80076fc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8007700:	4413      	add	r3, r2
 8007702:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007706:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800770a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800770e:	2b3e      	cmp	r3, #62	; 0x3e
 8007710:	d91d      	bls.n	800774e <USB_EPStartXfer+0x13b8>
 8007712:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007716:	095b      	lsrs	r3, r3, #5
 8007718:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800771c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007720:	f003 031f 	and.w	r3, r3, #31
 8007724:	2b00      	cmp	r3, #0
 8007726:	d104      	bne.n	8007732 <USB_EPStartXfer+0x139c>
 8007728:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800772c:	3b01      	subs	r3, #1
 800772e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8007732:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007736:	b29b      	uxth	r3, r3
 8007738:	029b      	lsls	r3, r3, #10
 800773a:	b29b      	uxth	r3, r3
 800773c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007740:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007744:	b29a      	uxth	r2, r3
 8007746:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800774a:	801a      	strh	r2, [r3, #0]
 800774c:	e064      	b.n	8007818 <USB_EPStartXfer+0x1482>
 800774e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007752:	2b00      	cmp	r3, #0
 8007754:	d116      	bne.n	8007784 <USB_EPStartXfer+0x13ee>
 8007756:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800775a:	881b      	ldrh	r3, [r3, #0]
 800775c:	b29b      	uxth	r3, r3
 800775e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007762:	b29a      	uxth	r2, r3
 8007764:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007768:	801a      	strh	r2, [r3, #0]
 800776a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800776e:	881b      	ldrh	r3, [r3, #0]
 8007770:	b29b      	uxth	r3, r3
 8007772:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007776:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800777a:	b29a      	uxth	r2, r3
 800777c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007780:	801a      	strh	r2, [r3, #0]
 8007782:	e049      	b.n	8007818 <USB_EPStartXfer+0x1482>
 8007784:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007788:	085b      	lsrs	r3, r3, #1
 800778a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800778e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007792:	f003 0301 	and.w	r3, r3, #1
 8007796:	2b00      	cmp	r3, #0
 8007798:	d004      	beq.n	80077a4 <USB_EPStartXfer+0x140e>
 800779a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800779e:	3301      	adds	r3, #1
 80077a0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80077a4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80077a8:	b29b      	uxth	r3, r3
 80077aa:	029b      	lsls	r3, r3, #10
 80077ac:	b29a      	uxth	r2, r3
 80077ae:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80077b2:	801a      	strh	r2, [r3, #0]
 80077b4:	e030      	b.n	8007818 <USB_EPStartXfer+0x1482>
 80077b6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80077ba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	785b      	ldrb	r3, [r3, #1]
 80077c2:	2b01      	cmp	r3, #1
 80077c4:	d128      	bne.n	8007818 <USB_EPStartXfer+0x1482>
 80077c6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80077ca:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80077d4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80077d8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80077e2:	b29b      	uxth	r3, r3
 80077e4:	461a      	mov	r2, r3
 80077e6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80077ea:	4413      	add	r3, r2
 80077ec:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80077f0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80077f4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	781b      	ldrb	r3, [r3, #0]
 80077fc:	00da      	lsls	r2, r3, #3
 80077fe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007802:	4413      	add	r3, r2
 8007804:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007808:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800780c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007810:	b29a      	uxth	r2, r3
 8007812:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8007816:	801a      	strh	r2, [r3, #0]
 8007818:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800781c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007826:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800782a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	785b      	ldrb	r3, [r3, #1]
 8007832:	2b00      	cmp	r3, #0
 8007834:	d178      	bne.n	8007928 <USB_EPStartXfer+0x1592>
 8007836:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800783a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8007844:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007848:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007852:	b29b      	uxth	r3, r3
 8007854:	461a      	mov	r2, r3
 8007856:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800785a:	4413      	add	r3, r2
 800785c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8007860:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007864:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	781b      	ldrb	r3, [r3, #0]
 800786c:	00da      	lsls	r2, r3, #3
 800786e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8007872:	4413      	add	r3, r2
 8007874:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007878:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800787c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007880:	2b3e      	cmp	r3, #62	; 0x3e
 8007882:	d91d      	bls.n	80078c0 <USB_EPStartXfer+0x152a>
 8007884:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007888:	095b      	lsrs	r3, r3, #5
 800788a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800788e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007892:	f003 031f 	and.w	r3, r3, #31
 8007896:	2b00      	cmp	r3, #0
 8007898:	d104      	bne.n	80078a4 <USB_EPStartXfer+0x150e>
 800789a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800789e:	3b01      	subs	r3, #1
 80078a0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80078a4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80078a8:	b29b      	uxth	r3, r3
 80078aa:	029b      	lsls	r3, r3, #10
 80078ac:	b29b      	uxth	r3, r3
 80078ae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80078b2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80078b6:	b29a      	uxth	r2, r3
 80078b8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80078bc:	801a      	strh	r2, [r3, #0]
 80078be:	e060      	b.n	8007982 <USB_EPStartXfer+0x15ec>
 80078c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	d116      	bne.n	80078f6 <USB_EPStartXfer+0x1560>
 80078c8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80078cc:	881b      	ldrh	r3, [r3, #0]
 80078ce:	b29b      	uxth	r3, r3
 80078d0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80078d4:	b29a      	uxth	r2, r3
 80078d6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80078da:	801a      	strh	r2, [r3, #0]
 80078dc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80078e0:	881b      	ldrh	r3, [r3, #0]
 80078e2:	b29b      	uxth	r3, r3
 80078e4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80078e8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80078ec:	b29a      	uxth	r2, r3
 80078ee:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80078f2:	801a      	strh	r2, [r3, #0]
 80078f4:	e045      	b.n	8007982 <USB_EPStartXfer+0x15ec>
 80078f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80078fa:	085b      	lsrs	r3, r3, #1
 80078fc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007900:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007904:	f003 0301 	and.w	r3, r3, #1
 8007908:	2b00      	cmp	r3, #0
 800790a:	d004      	beq.n	8007916 <USB_EPStartXfer+0x1580>
 800790c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007910:	3301      	adds	r3, #1
 8007912:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007916:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800791a:	b29b      	uxth	r3, r3
 800791c:	029b      	lsls	r3, r3, #10
 800791e:	b29a      	uxth	r2, r3
 8007920:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007924:	801a      	strh	r2, [r3, #0]
 8007926:	e02c      	b.n	8007982 <USB_EPStartXfer+0x15ec>
 8007928:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800792c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	785b      	ldrb	r3, [r3, #1]
 8007934:	2b01      	cmp	r3, #1
 8007936:	d124      	bne.n	8007982 <USB_EPStartXfer+0x15ec>
 8007938:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800793c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007946:	b29b      	uxth	r3, r3
 8007948:	461a      	mov	r2, r3
 800794a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800794e:	4413      	add	r3, r2
 8007950:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007954:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007958:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	781b      	ldrb	r3, [r3, #0]
 8007960:	00da      	lsls	r2, r3, #3
 8007962:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8007966:	4413      	add	r3, r2
 8007968:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800796c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007970:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007974:	b29a      	uxth	r2, r3
 8007976:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800797a:	801a      	strh	r2, [r3, #0]
 800797c:	e001      	b.n	8007982 <USB_EPStartXfer+0x15ec>
      }
      else
      {
        return HAL_ERROR;
 800797e:	2301      	movs	r3, #1
 8007980:	e03a      	b.n	80079f8 <USB_EPStartXfer+0x1662>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007982:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007986:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800798a:	681a      	ldr	r2, [r3, #0]
 800798c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007990:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	781b      	ldrb	r3, [r3, #0]
 8007998:	009b      	lsls	r3, r3, #2
 800799a:	4413      	add	r3, r2
 800799c:	881b      	ldrh	r3, [r3, #0]
 800799e:	b29b      	uxth	r3, r3
 80079a0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80079a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80079a8:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 80079ac:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80079b0:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80079b4:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 80079b8:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80079bc:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80079c0:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 80079c4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80079c8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80079cc:	681a      	ldr	r2, [r3, #0]
 80079ce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80079d2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	781b      	ldrb	r3, [r3, #0]
 80079da:	009b      	lsls	r3, r3, #2
 80079dc:	441a      	add	r2, r3
 80079de:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80079e2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80079e6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80079ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80079ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80079f2:	b29b      	uxth	r3, r3
 80079f4:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80079f6:	2300      	movs	r3, #0
}
 80079f8:	4618      	mov	r0, r3
 80079fa:	f507 7784 	add.w	r7, r7, #264	; 0x108
 80079fe:	46bd      	mov	sp, r7
 8007a00:	bd80      	pop	{r7, pc}

08007a02 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007a02:	b480      	push	{r7}
 8007a04:	b085      	sub	sp, #20
 8007a06:	af00      	add	r7, sp, #0
 8007a08:	6078      	str	r0, [r7, #4]
 8007a0a:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8007a0c:	683b      	ldr	r3, [r7, #0]
 8007a0e:	785b      	ldrb	r3, [r3, #1]
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	d020      	beq.n	8007a56 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8007a14:	687a      	ldr	r2, [r7, #4]
 8007a16:	683b      	ldr	r3, [r7, #0]
 8007a18:	781b      	ldrb	r3, [r3, #0]
 8007a1a:	009b      	lsls	r3, r3, #2
 8007a1c:	4413      	add	r3, r2
 8007a1e:	881b      	ldrh	r3, [r3, #0]
 8007a20:	b29b      	uxth	r3, r3
 8007a22:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007a26:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007a2a:	81bb      	strh	r3, [r7, #12]
 8007a2c:	89bb      	ldrh	r3, [r7, #12]
 8007a2e:	f083 0310 	eor.w	r3, r3, #16
 8007a32:	81bb      	strh	r3, [r7, #12]
 8007a34:	687a      	ldr	r2, [r7, #4]
 8007a36:	683b      	ldr	r3, [r7, #0]
 8007a38:	781b      	ldrb	r3, [r3, #0]
 8007a3a:	009b      	lsls	r3, r3, #2
 8007a3c:	441a      	add	r2, r3
 8007a3e:	89bb      	ldrh	r3, [r7, #12]
 8007a40:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007a44:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007a48:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007a4c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007a50:	b29b      	uxth	r3, r3
 8007a52:	8013      	strh	r3, [r2, #0]
 8007a54:	e01f      	b.n	8007a96 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8007a56:	687a      	ldr	r2, [r7, #4]
 8007a58:	683b      	ldr	r3, [r7, #0]
 8007a5a:	781b      	ldrb	r3, [r3, #0]
 8007a5c:	009b      	lsls	r3, r3, #2
 8007a5e:	4413      	add	r3, r2
 8007a60:	881b      	ldrh	r3, [r3, #0]
 8007a62:	b29b      	uxth	r3, r3
 8007a64:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007a68:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007a6c:	81fb      	strh	r3, [r7, #14]
 8007a6e:	89fb      	ldrh	r3, [r7, #14]
 8007a70:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8007a74:	81fb      	strh	r3, [r7, #14]
 8007a76:	687a      	ldr	r2, [r7, #4]
 8007a78:	683b      	ldr	r3, [r7, #0]
 8007a7a:	781b      	ldrb	r3, [r3, #0]
 8007a7c:	009b      	lsls	r3, r3, #2
 8007a7e:	441a      	add	r2, r3
 8007a80:	89fb      	ldrh	r3, [r7, #14]
 8007a82:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007a86:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007a8a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007a8e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007a92:	b29b      	uxth	r3, r3
 8007a94:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8007a96:	2300      	movs	r3, #0
}
 8007a98:	4618      	mov	r0, r3
 8007a9a:	3714      	adds	r7, #20
 8007a9c:	46bd      	mov	sp, r7
 8007a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aa2:	4770      	bx	lr

08007aa4 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007aa4:	b480      	push	{r7}
 8007aa6:	b087      	sub	sp, #28
 8007aa8:	af00      	add	r7, sp, #0
 8007aaa:	6078      	str	r0, [r7, #4]
 8007aac:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8007aae:	683b      	ldr	r3, [r7, #0]
 8007ab0:	7b1b      	ldrb	r3, [r3, #12]
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	f040 809d 	bne.w	8007bf2 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8007ab8:	683b      	ldr	r3, [r7, #0]
 8007aba:	785b      	ldrb	r3, [r3, #1]
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	d04c      	beq.n	8007b5a <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007ac0:	687a      	ldr	r2, [r7, #4]
 8007ac2:	683b      	ldr	r3, [r7, #0]
 8007ac4:	781b      	ldrb	r3, [r3, #0]
 8007ac6:	009b      	lsls	r3, r3, #2
 8007ac8:	4413      	add	r3, r2
 8007aca:	881b      	ldrh	r3, [r3, #0]
 8007acc:	823b      	strh	r3, [r7, #16]
 8007ace:	8a3b      	ldrh	r3, [r7, #16]
 8007ad0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	d01b      	beq.n	8007b10 <USB_EPClearStall+0x6c>
 8007ad8:	687a      	ldr	r2, [r7, #4]
 8007ada:	683b      	ldr	r3, [r7, #0]
 8007adc:	781b      	ldrb	r3, [r3, #0]
 8007ade:	009b      	lsls	r3, r3, #2
 8007ae0:	4413      	add	r3, r2
 8007ae2:	881b      	ldrh	r3, [r3, #0]
 8007ae4:	b29b      	uxth	r3, r3
 8007ae6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007aea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007aee:	81fb      	strh	r3, [r7, #14]
 8007af0:	687a      	ldr	r2, [r7, #4]
 8007af2:	683b      	ldr	r3, [r7, #0]
 8007af4:	781b      	ldrb	r3, [r3, #0]
 8007af6:	009b      	lsls	r3, r3, #2
 8007af8:	441a      	add	r2, r3
 8007afa:	89fb      	ldrh	r3, [r7, #14]
 8007afc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007b00:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007b04:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007b08:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007b0c:	b29b      	uxth	r3, r3
 8007b0e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007b10:	683b      	ldr	r3, [r7, #0]
 8007b12:	78db      	ldrb	r3, [r3, #3]
 8007b14:	2b01      	cmp	r3, #1
 8007b16:	d06c      	beq.n	8007bf2 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8007b18:	687a      	ldr	r2, [r7, #4]
 8007b1a:	683b      	ldr	r3, [r7, #0]
 8007b1c:	781b      	ldrb	r3, [r3, #0]
 8007b1e:	009b      	lsls	r3, r3, #2
 8007b20:	4413      	add	r3, r2
 8007b22:	881b      	ldrh	r3, [r3, #0]
 8007b24:	b29b      	uxth	r3, r3
 8007b26:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007b2a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007b2e:	81bb      	strh	r3, [r7, #12]
 8007b30:	89bb      	ldrh	r3, [r7, #12]
 8007b32:	f083 0320 	eor.w	r3, r3, #32
 8007b36:	81bb      	strh	r3, [r7, #12]
 8007b38:	687a      	ldr	r2, [r7, #4]
 8007b3a:	683b      	ldr	r3, [r7, #0]
 8007b3c:	781b      	ldrb	r3, [r3, #0]
 8007b3e:	009b      	lsls	r3, r3, #2
 8007b40:	441a      	add	r2, r3
 8007b42:	89bb      	ldrh	r3, [r7, #12]
 8007b44:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007b48:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007b4c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007b50:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007b54:	b29b      	uxth	r3, r3
 8007b56:	8013      	strh	r3, [r2, #0]
 8007b58:	e04b      	b.n	8007bf2 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007b5a:	687a      	ldr	r2, [r7, #4]
 8007b5c:	683b      	ldr	r3, [r7, #0]
 8007b5e:	781b      	ldrb	r3, [r3, #0]
 8007b60:	009b      	lsls	r3, r3, #2
 8007b62:	4413      	add	r3, r2
 8007b64:	881b      	ldrh	r3, [r3, #0]
 8007b66:	82fb      	strh	r3, [r7, #22]
 8007b68:	8afb      	ldrh	r3, [r7, #22]
 8007b6a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	d01b      	beq.n	8007baa <USB_EPClearStall+0x106>
 8007b72:	687a      	ldr	r2, [r7, #4]
 8007b74:	683b      	ldr	r3, [r7, #0]
 8007b76:	781b      	ldrb	r3, [r3, #0]
 8007b78:	009b      	lsls	r3, r3, #2
 8007b7a:	4413      	add	r3, r2
 8007b7c:	881b      	ldrh	r3, [r3, #0]
 8007b7e:	b29b      	uxth	r3, r3
 8007b80:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007b84:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007b88:	82bb      	strh	r3, [r7, #20]
 8007b8a:	687a      	ldr	r2, [r7, #4]
 8007b8c:	683b      	ldr	r3, [r7, #0]
 8007b8e:	781b      	ldrb	r3, [r3, #0]
 8007b90:	009b      	lsls	r3, r3, #2
 8007b92:	441a      	add	r2, r3
 8007b94:	8abb      	ldrh	r3, [r7, #20]
 8007b96:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007b9a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007b9e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007ba2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007ba6:	b29b      	uxth	r3, r3
 8007ba8:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007baa:	687a      	ldr	r2, [r7, #4]
 8007bac:	683b      	ldr	r3, [r7, #0]
 8007bae:	781b      	ldrb	r3, [r3, #0]
 8007bb0:	009b      	lsls	r3, r3, #2
 8007bb2:	4413      	add	r3, r2
 8007bb4:	881b      	ldrh	r3, [r3, #0]
 8007bb6:	b29b      	uxth	r3, r3
 8007bb8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007bbc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007bc0:	827b      	strh	r3, [r7, #18]
 8007bc2:	8a7b      	ldrh	r3, [r7, #18]
 8007bc4:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8007bc8:	827b      	strh	r3, [r7, #18]
 8007bca:	8a7b      	ldrh	r3, [r7, #18]
 8007bcc:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8007bd0:	827b      	strh	r3, [r7, #18]
 8007bd2:	687a      	ldr	r2, [r7, #4]
 8007bd4:	683b      	ldr	r3, [r7, #0]
 8007bd6:	781b      	ldrb	r3, [r3, #0]
 8007bd8:	009b      	lsls	r3, r3, #2
 8007bda:	441a      	add	r2, r3
 8007bdc:	8a7b      	ldrh	r3, [r7, #18]
 8007bde:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007be2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007be6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007bea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007bee:	b29b      	uxth	r3, r3
 8007bf0:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8007bf2:	2300      	movs	r3, #0
}
 8007bf4:	4618      	mov	r0, r3
 8007bf6:	371c      	adds	r7, #28
 8007bf8:	46bd      	mov	sp, r7
 8007bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bfe:	4770      	bx	lr

08007c00 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8007c00:	b480      	push	{r7}
 8007c02:	b083      	sub	sp, #12
 8007c04:	af00      	add	r7, sp, #0
 8007c06:	6078      	str	r0, [r7, #4]
 8007c08:	460b      	mov	r3, r1
 8007c0a:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8007c0c:	78fb      	ldrb	r3, [r7, #3]
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	d103      	bne.n	8007c1a <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	2280      	movs	r2, #128	; 0x80
 8007c16:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8007c1a:	2300      	movs	r3, #0
}
 8007c1c:	4618      	mov	r0, r3
 8007c1e:	370c      	adds	r7, #12
 8007c20:	46bd      	mov	sp, r7
 8007c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c26:	4770      	bx	lr

08007c28 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8007c28:	b480      	push	{r7}
 8007c2a:	b083      	sub	sp, #12
 8007c2c:	af00      	add	r7, sp, #0
 8007c2e:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8007c36:	b29b      	uxth	r3, r3
 8007c38:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007c3c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007c40:	b29a      	uxth	r2, r3
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 8007c48:	2300      	movs	r3, #0
}
 8007c4a:	4618      	mov	r0, r3
 8007c4c:	370c      	adds	r7, #12
 8007c4e:	46bd      	mov	sp, r7
 8007c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c54:	4770      	bx	lr

08007c56 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8007c56:	b480      	push	{r7}
 8007c58:	b085      	sub	sp, #20
 8007c5a:	af00      	add	r7, sp, #0
 8007c5c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8007c64:	b29b      	uxth	r3, r3
 8007c66:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8007c68:	68fb      	ldr	r3, [r7, #12]
}
 8007c6a:	4618      	mov	r0, r3
 8007c6c:	3714      	adds	r7, #20
 8007c6e:	46bd      	mov	sp, r7
 8007c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c74:	4770      	bx	lr

08007c76 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8007c76:	b480      	push	{r7}
 8007c78:	b08d      	sub	sp, #52	; 0x34
 8007c7a:	af00      	add	r7, sp, #0
 8007c7c:	60f8      	str	r0, [r7, #12]
 8007c7e:	60b9      	str	r1, [r7, #8]
 8007c80:	4611      	mov	r1, r2
 8007c82:	461a      	mov	r2, r3
 8007c84:	460b      	mov	r3, r1
 8007c86:	80fb      	strh	r3, [r7, #6]
 8007c88:	4613      	mov	r3, r2
 8007c8a:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8007c8c:	88bb      	ldrh	r3, [r7, #4]
 8007c8e:	3301      	adds	r3, #1
 8007c90:	085b      	lsrs	r3, r3, #1
 8007c92:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t temp1;
  uint32_t temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8007c98:	68bb      	ldr	r3, [r7, #8]
 8007c9a:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007c9c:	88fa      	ldrh	r2, [r7, #6]
 8007c9e:	69fb      	ldr	r3, [r7, #28]
 8007ca0:	4413      	add	r3, r2
 8007ca2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007ca6:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8007ca8:	6a3b      	ldr	r3, [r7, #32]
 8007caa:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007cac:	e01b      	b.n	8007ce6 <USB_WritePMA+0x70>
  {
    temp1 = *pBuf;
 8007cae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cb0:	781b      	ldrb	r3, [r3, #0]
 8007cb2:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8007cb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cb6:	3301      	adds	r3, #1
 8007cb8:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8007cba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cbc:	781b      	ldrb	r3, [r3, #0]
 8007cbe:	b29b      	uxth	r3, r3
 8007cc0:	021b      	lsls	r3, r3, #8
 8007cc2:	b29b      	uxth	r3, r3
 8007cc4:	461a      	mov	r2, r3
 8007cc6:	69bb      	ldr	r3, [r7, #24]
 8007cc8:	4313      	orrs	r3, r2
 8007cca:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8007ccc:	697b      	ldr	r3, [r7, #20]
 8007cce:	b29a      	uxth	r2, r3
 8007cd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cd2:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8007cd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cd6:	3302      	adds	r3, #2
 8007cd8:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 8007cda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cdc:	3301      	adds	r3, #1
 8007cde:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8007ce0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ce2:	3b01      	subs	r3, #1
 8007ce4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007ce6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	d1e0      	bne.n	8007cae <USB_WritePMA+0x38>
  }
}
 8007cec:	bf00      	nop
 8007cee:	bf00      	nop
 8007cf0:	3734      	adds	r7, #52	; 0x34
 8007cf2:	46bd      	mov	sp, r7
 8007cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cf8:	4770      	bx	lr

08007cfa <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8007cfa:	b480      	push	{r7}
 8007cfc:	b08b      	sub	sp, #44	; 0x2c
 8007cfe:	af00      	add	r7, sp, #0
 8007d00:	60f8      	str	r0, [r7, #12]
 8007d02:	60b9      	str	r1, [r7, #8]
 8007d04:	4611      	mov	r1, r2
 8007d06:	461a      	mov	r2, r3
 8007d08:	460b      	mov	r3, r1
 8007d0a:	80fb      	strh	r3, [r7, #6]
 8007d0c:	4613      	mov	r3, r2
 8007d0e:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8007d10:	88bb      	ldrh	r3, [r7, #4]
 8007d12:	085b      	lsrs	r3, r3, #1
 8007d14:	b29b      	uxth	r3, r3
 8007d16:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	617b      	str	r3, [r7, #20]
  uint32_t i;
  uint32_t temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8007d1c:	68bb      	ldr	r3, [r7, #8]
 8007d1e:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007d20:	88fa      	ldrh	r2, [r7, #6]
 8007d22:	697b      	ldr	r3, [r7, #20]
 8007d24:	4413      	add	r3, r2
 8007d26:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007d2a:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8007d2c:	69bb      	ldr	r3, [r7, #24]
 8007d2e:	627b      	str	r3, [r7, #36]	; 0x24
 8007d30:	e018      	b.n	8007d64 <USB_ReadPMA+0x6a>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8007d32:	6a3b      	ldr	r3, [r7, #32]
 8007d34:	881b      	ldrh	r3, [r3, #0]
 8007d36:	b29b      	uxth	r3, r3
 8007d38:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8007d3a:	6a3b      	ldr	r3, [r7, #32]
 8007d3c:	3302      	adds	r3, #2
 8007d3e:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8007d40:	693b      	ldr	r3, [r7, #16]
 8007d42:	b2da      	uxtb	r2, r3
 8007d44:	69fb      	ldr	r3, [r7, #28]
 8007d46:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8007d48:	69fb      	ldr	r3, [r7, #28]
 8007d4a:	3301      	adds	r3, #1
 8007d4c:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8007d4e:	693b      	ldr	r3, [r7, #16]
 8007d50:	0a1b      	lsrs	r3, r3, #8
 8007d52:	b2da      	uxtb	r2, r3
 8007d54:	69fb      	ldr	r3, [r7, #28]
 8007d56:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8007d58:	69fb      	ldr	r3, [r7, #28]
 8007d5a:	3301      	adds	r3, #1
 8007d5c:	61fb      	str	r3, [r7, #28]
  for (i = n; i != 0U; i--)
 8007d5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d60:	3b01      	subs	r3, #1
 8007d62:	627b      	str	r3, [r7, #36]	; 0x24
 8007d64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	d1e3      	bne.n	8007d32 <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8007d6a:	88bb      	ldrh	r3, [r7, #4]
 8007d6c:	f003 0301 	and.w	r3, r3, #1
 8007d70:	b29b      	uxth	r3, r3
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	d007      	beq.n	8007d86 <USB_ReadPMA+0x8c>
  {
    temp = *pdwVal;
 8007d76:	6a3b      	ldr	r3, [r7, #32]
 8007d78:	881b      	ldrh	r3, [r3, #0]
 8007d7a:	b29b      	uxth	r3, r3
 8007d7c:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8007d7e:	693b      	ldr	r3, [r7, #16]
 8007d80:	b2da      	uxtb	r2, r3
 8007d82:	69fb      	ldr	r3, [r7, #28]
 8007d84:	701a      	strb	r2, [r3, #0]
  }
}
 8007d86:	bf00      	nop
 8007d88:	372c      	adds	r7, #44	; 0x2c
 8007d8a:	46bd      	mov	sp, r7
 8007d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d90:	4770      	bx	lr

08007d92 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007d92:	b580      	push	{r7, lr}
 8007d94:	b084      	sub	sp, #16
 8007d96:	af00      	add	r7, sp, #0
 8007d98:	6078      	str	r0, [r7, #4]
 8007d9a:	460b      	mov	r3, r1
 8007d9c:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8007d9e:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8007da2:	f002 f91b 	bl	8009fdc <USBD_static_malloc>
 8007da6:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	d105      	bne.n	8007dba <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	2200      	movs	r2, #0
 8007db2:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8007db6:	2302      	movs	r3, #2
 8007db8:	e066      	b.n	8007e88 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	68fa      	ldr	r2, [r7, #12]
 8007dbe:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	7c1b      	ldrb	r3, [r3, #16]
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d119      	bne.n	8007dfe <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8007dca:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007dce:	2202      	movs	r2, #2
 8007dd0:	2181      	movs	r1, #129	; 0x81
 8007dd2:	6878      	ldr	r0, [r7, #4]
 8007dd4:	f001 ffa7 	bl	8009d26 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	2201      	movs	r2, #1
 8007ddc:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8007dde:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007de2:	2202      	movs	r2, #2
 8007de4:	2101      	movs	r1, #1
 8007de6:	6878      	ldr	r0, [r7, #4]
 8007de8:	f001 ff9d 	bl	8009d26 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	2201      	movs	r2, #1
 8007df0:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	2210      	movs	r2, #16
 8007df8:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8007dfc:	e016      	b.n	8007e2c <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8007dfe:	2340      	movs	r3, #64	; 0x40
 8007e00:	2202      	movs	r2, #2
 8007e02:	2181      	movs	r1, #129	; 0x81
 8007e04:	6878      	ldr	r0, [r7, #4]
 8007e06:	f001 ff8e 	bl	8009d26 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	2201      	movs	r2, #1
 8007e0e:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8007e10:	2340      	movs	r3, #64	; 0x40
 8007e12:	2202      	movs	r2, #2
 8007e14:	2101      	movs	r1, #1
 8007e16:	6878      	ldr	r0, [r7, #4]
 8007e18:	f001 ff85 	bl	8009d26 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	2201      	movs	r2, #1
 8007e20:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	2210      	movs	r2, #16
 8007e28:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8007e2c:	2308      	movs	r3, #8
 8007e2e:	2203      	movs	r2, #3
 8007e30:	2182      	movs	r1, #130	; 0x82
 8007e32:	6878      	ldr	r0, [r7, #4]
 8007e34:	f001 ff77 	bl	8009d26 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	2201      	movs	r2, #1
 8007e3c:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8007e4a:	68fb      	ldr	r3, [r7, #12]
 8007e4c:	2200      	movs	r2, #0
 8007e4e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8007e52:	68fb      	ldr	r3, [r7, #12]
 8007e54:	2200      	movs	r2, #0
 8007e56:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	7c1b      	ldrb	r3, [r3, #16]
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	d109      	bne.n	8007e76 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007e68:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007e6c:	2101      	movs	r1, #1
 8007e6e:	6878      	ldr	r0, [r7, #4]
 8007e70:	f002 f849 	bl	8009f06 <USBD_LL_PrepareReceive>
 8007e74:	e007      	b.n	8007e86 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007e76:	68fb      	ldr	r3, [r7, #12]
 8007e78:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007e7c:	2340      	movs	r3, #64	; 0x40
 8007e7e:	2101      	movs	r1, #1
 8007e80:	6878      	ldr	r0, [r7, #4]
 8007e82:	f002 f840 	bl	8009f06 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8007e86:	2300      	movs	r3, #0
}
 8007e88:	4618      	mov	r0, r3
 8007e8a:	3710      	adds	r7, #16
 8007e8c:	46bd      	mov	sp, r7
 8007e8e:	bd80      	pop	{r7, pc}

08007e90 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007e90:	b580      	push	{r7, lr}
 8007e92:	b082      	sub	sp, #8
 8007e94:	af00      	add	r7, sp, #0
 8007e96:	6078      	str	r0, [r7, #4]
 8007e98:	460b      	mov	r3, r1
 8007e9a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8007e9c:	2181      	movs	r1, #129	; 0x81
 8007e9e:	6878      	ldr	r0, [r7, #4]
 8007ea0:	f001 ff67 	bl	8009d72 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	2200      	movs	r2, #0
 8007ea8:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8007eaa:	2101      	movs	r1, #1
 8007eac:	6878      	ldr	r0, [r7, #4]
 8007eae:	f001 ff60 	bl	8009d72 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	2200      	movs	r2, #0
 8007eb6:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8007eba:	2182      	movs	r1, #130	; 0x82
 8007ebc:	6878      	ldr	r0, [r7, #4]
 8007ebe:	f001 ff58 	bl	8009d72 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	2200      	movs	r2, #0
 8007ec6:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	2200      	movs	r2, #0
 8007ece:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	d00e      	beq.n	8007efa <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007ee2:	685b      	ldr	r3, [r3, #4]
 8007ee4:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007eec:	4618      	mov	r0, r3
 8007eee:	f002 f883 	bl	8009ff8 <USBD_static_free>
    pdev->pClassData = NULL;
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	2200      	movs	r2, #0
 8007ef6:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8007efa:	2300      	movs	r3, #0
}
 8007efc:	4618      	mov	r0, r3
 8007efe:	3708      	adds	r7, #8
 8007f00:	46bd      	mov	sp, r7
 8007f02:	bd80      	pop	{r7, pc}

08007f04 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8007f04:	b580      	push	{r7, lr}
 8007f06:	b086      	sub	sp, #24
 8007f08:	af00      	add	r7, sp, #0
 8007f0a:	6078      	str	r0, [r7, #4]
 8007f0c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007f14:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8007f16:	2300      	movs	r3, #0
 8007f18:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8007f1a:	2300      	movs	r3, #0
 8007f1c:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8007f1e:	2300      	movs	r3, #0
 8007f20:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8007f22:	693b      	ldr	r3, [r7, #16]
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	d101      	bne.n	8007f2c <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 8007f28:	2303      	movs	r3, #3
 8007f2a:	e0af      	b.n	800808c <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007f2c:	683b      	ldr	r3, [r7, #0]
 8007f2e:	781b      	ldrb	r3, [r3, #0]
 8007f30:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007f34:	2b00      	cmp	r3, #0
 8007f36:	d03f      	beq.n	8007fb8 <USBD_CDC_Setup+0xb4>
 8007f38:	2b20      	cmp	r3, #32
 8007f3a:	f040 809f 	bne.w	800807c <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8007f3e:	683b      	ldr	r3, [r7, #0]
 8007f40:	88db      	ldrh	r3, [r3, #6]
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d02e      	beq.n	8007fa4 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8007f46:	683b      	ldr	r3, [r7, #0]
 8007f48:	781b      	ldrb	r3, [r3, #0]
 8007f4a:	b25b      	sxtb	r3, r3
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	da16      	bge.n	8007f7e <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007f56:	689b      	ldr	r3, [r3, #8]
 8007f58:	683a      	ldr	r2, [r7, #0]
 8007f5a:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 8007f5c:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007f5e:	683a      	ldr	r2, [r7, #0]
 8007f60:	88d2      	ldrh	r2, [r2, #6]
 8007f62:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8007f64:	683b      	ldr	r3, [r7, #0]
 8007f66:	88db      	ldrh	r3, [r3, #6]
 8007f68:	2b07      	cmp	r3, #7
 8007f6a:	bf28      	it	cs
 8007f6c:	2307      	movcs	r3, #7
 8007f6e:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8007f70:	693b      	ldr	r3, [r7, #16]
 8007f72:	89fa      	ldrh	r2, [r7, #14]
 8007f74:	4619      	mov	r1, r3
 8007f76:	6878      	ldr	r0, [r7, #4]
 8007f78:	f001 facf 	bl	800951a <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 8007f7c:	e085      	b.n	800808a <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 8007f7e:	683b      	ldr	r3, [r7, #0]
 8007f80:	785a      	ldrb	r2, [r3, #1]
 8007f82:	693b      	ldr	r3, [r7, #16]
 8007f84:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8007f88:	683b      	ldr	r3, [r7, #0]
 8007f8a:	88db      	ldrh	r3, [r3, #6]
 8007f8c:	b2da      	uxtb	r2, r3
 8007f8e:	693b      	ldr	r3, [r7, #16]
 8007f90:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8007f94:	6939      	ldr	r1, [r7, #16]
 8007f96:	683b      	ldr	r3, [r7, #0]
 8007f98:	88db      	ldrh	r3, [r3, #6]
 8007f9a:	461a      	mov	r2, r3
 8007f9c:	6878      	ldr	r0, [r7, #4]
 8007f9e:	f001 fae8 	bl	8009572 <USBD_CtlPrepareRx>
      break;
 8007fa2:	e072      	b.n	800808a <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007faa:	689b      	ldr	r3, [r3, #8]
 8007fac:	683a      	ldr	r2, [r7, #0]
 8007fae:	7850      	ldrb	r0, [r2, #1]
 8007fb0:	2200      	movs	r2, #0
 8007fb2:	6839      	ldr	r1, [r7, #0]
 8007fb4:	4798      	blx	r3
      break;
 8007fb6:	e068      	b.n	800808a <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007fb8:	683b      	ldr	r3, [r7, #0]
 8007fba:	785b      	ldrb	r3, [r3, #1]
 8007fbc:	2b0b      	cmp	r3, #11
 8007fbe:	d852      	bhi.n	8008066 <USBD_CDC_Setup+0x162>
 8007fc0:	a201      	add	r2, pc, #4	; (adr r2, 8007fc8 <USBD_CDC_Setup+0xc4>)
 8007fc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007fc6:	bf00      	nop
 8007fc8:	08007ff9 	.word	0x08007ff9
 8007fcc:	08008075 	.word	0x08008075
 8007fd0:	08008067 	.word	0x08008067
 8007fd4:	08008067 	.word	0x08008067
 8007fd8:	08008067 	.word	0x08008067
 8007fdc:	08008067 	.word	0x08008067
 8007fe0:	08008067 	.word	0x08008067
 8007fe4:	08008067 	.word	0x08008067
 8007fe8:	08008067 	.word	0x08008067
 8007fec:	08008067 	.word	0x08008067
 8007ff0:	08008023 	.word	0x08008023
 8007ff4:	0800804d 	.word	0x0800804d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007ffe:	b2db      	uxtb	r3, r3
 8008000:	2b03      	cmp	r3, #3
 8008002:	d107      	bne.n	8008014 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8008004:	f107 030a 	add.w	r3, r7, #10
 8008008:	2202      	movs	r2, #2
 800800a:	4619      	mov	r1, r3
 800800c:	6878      	ldr	r0, [r7, #4]
 800800e:	f001 fa84 	bl	800951a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008012:	e032      	b.n	800807a <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8008014:	6839      	ldr	r1, [r7, #0]
 8008016:	6878      	ldr	r0, [r7, #4]
 8008018:	f001 fa0e 	bl	8009438 <USBD_CtlError>
            ret = USBD_FAIL;
 800801c:	2303      	movs	r3, #3
 800801e:	75fb      	strb	r3, [r7, #23]
          break;
 8008020:	e02b      	b.n	800807a <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008028:	b2db      	uxtb	r3, r3
 800802a:	2b03      	cmp	r3, #3
 800802c:	d107      	bne.n	800803e <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800802e:	f107 030d 	add.w	r3, r7, #13
 8008032:	2201      	movs	r2, #1
 8008034:	4619      	mov	r1, r3
 8008036:	6878      	ldr	r0, [r7, #4]
 8008038:	f001 fa6f 	bl	800951a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800803c:	e01d      	b.n	800807a <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800803e:	6839      	ldr	r1, [r7, #0]
 8008040:	6878      	ldr	r0, [r7, #4]
 8008042:	f001 f9f9 	bl	8009438 <USBD_CtlError>
            ret = USBD_FAIL;
 8008046:	2303      	movs	r3, #3
 8008048:	75fb      	strb	r3, [r7, #23]
          break;
 800804a:	e016      	b.n	800807a <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008052:	b2db      	uxtb	r3, r3
 8008054:	2b03      	cmp	r3, #3
 8008056:	d00f      	beq.n	8008078 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 8008058:	6839      	ldr	r1, [r7, #0]
 800805a:	6878      	ldr	r0, [r7, #4]
 800805c:	f001 f9ec 	bl	8009438 <USBD_CtlError>
            ret = USBD_FAIL;
 8008060:	2303      	movs	r3, #3
 8008062:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8008064:	e008      	b.n	8008078 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8008066:	6839      	ldr	r1, [r7, #0]
 8008068:	6878      	ldr	r0, [r7, #4]
 800806a:	f001 f9e5 	bl	8009438 <USBD_CtlError>
          ret = USBD_FAIL;
 800806e:	2303      	movs	r3, #3
 8008070:	75fb      	strb	r3, [r7, #23]
          break;
 8008072:	e002      	b.n	800807a <USBD_CDC_Setup+0x176>
          break;
 8008074:	bf00      	nop
 8008076:	e008      	b.n	800808a <USBD_CDC_Setup+0x186>
          break;
 8008078:	bf00      	nop
      }
      break;
 800807a:	e006      	b.n	800808a <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 800807c:	6839      	ldr	r1, [r7, #0]
 800807e:	6878      	ldr	r0, [r7, #4]
 8008080:	f001 f9da 	bl	8009438 <USBD_CtlError>
      ret = USBD_FAIL;
 8008084:	2303      	movs	r3, #3
 8008086:	75fb      	strb	r3, [r7, #23]
      break;
 8008088:	bf00      	nop
  }

  return (uint8_t)ret;
 800808a:	7dfb      	ldrb	r3, [r7, #23]
}
 800808c:	4618      	mov	r0, r3
 800808e:	3718      	adds	r7, #24
 8008090:	46bd      	mov	sp, r7
 8008092:	bd80      	pop	{r7, pc}

08008094 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008094:	b580      	push	{r7, lr}
 8008096:	b084      	sub	sp, #16
 8008098:	af00      	add	r7, sp, #0
 800809a:	6078      	str	r0, [r7, #4]
 800809c:	460b      	mov	r3, r1
 800809e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80080a6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	d101      	bne.n	80080b6 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80080b2:	2303      	movs	r3, #3
 80080b4:	e04f      	b.n	8008156 <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80080bc:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 80080be:	78fa      	ldrb	r2, [r7, #3]
 80080c0:	6879      	ldr	r1, [r7, #4]
 80080c2:	4613      	mov	r3, r2
 80080c4:	009b      	lsls	r3, r3, #2
 80080c6:	4413      	add	r3, r2
 80080c8:	009b      	lsls	r3, r3, #2
 80080ca:	440b      	add	r3, r1
 80080cc:	3318      	adds	r3, #24
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	2b00      	cmp	r3, #0
 80080d2:	d029      	beq.n	8008128 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 80080d4:	78fa      	ldrb	r2, [r7, #3]
 80080d6:	6879      	ldr	r1, [r7, #4]
 80080d8:	4613      	mov	r3, r2
 80080da:	009b      	lsls	r3, r3, #2
 80080dc:	4413      	add	r3, r2
 80080de:	009b      	lsls	r3, r3, #2
 80080e0:	440b      	add	r3, r1
 80080e2:	3318      	adds	r3, #24
 80080e4:	681a      	ldr	r2, [r3, #0]
 80080e6:	78f9      	ldrb	r1, [r7, #3]
 80080e8:	68f8      	ldr	r0, [r7, #12]
 80080ea:	460b      	mov	r3, r1
 80080ec:	009b      	lsls	r3, r3, #2
 80080ee:	440b      	add	r3, r1
 80080f0:	00db      	lsls	r3, r3, #3
 80080f2:	4403      	add	r3, r0
 80080f4:	3338      	adds	r3, #56	; 0x38
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	fbb2 f1f3 	udiv	r1, r2, r3
 80080fc:	fb01 f303 	mul.w	r3, r1, r3
 8008100:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8008102:	2b00      	cmp	r3, #0
 8008104:	d110      	bne.n	8008128 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8008106:	78fa      	ldrb	r2, [r7, #3]
 8008108:	6879      	ldr	r1, [r7, #4]
 800810a:	4613      	mov	r3, r2
 800810c:	009b      	lsls	r3, r3, #2
 800810e:	4413      	add	r3, r2
 8008110:	009b      	lsls	r3, r3, #2
 8008112:	440b      	add	r3, r1
 8008114:	3318      	adds	r3, #24
 8008116:	2200      	movs	r2, #0
 8008118:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800811a:	78f9      	ldrb	r1, [r7, #3]
 800811c:	2300      	movs	r3, #0
 800811e:	2200      	movs	r2, #0
 8008120:	6878      	ldr	r0, [r7, #4]
 8008122:	f001 fecf 	bl	8009ec4 <USBD_LL_Transmit>
 8008126:	e015      	b.n	8008154 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 8008128:	68bb      	ldr	r3, [r7, #8]
 800812a:	2200      	movs	r2, #0
 800812c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008136:	691b      	ldr	r3, [r3, #16]
 8008138:	2b00      	cmp	r3, #0
 800813a:	d00b      	beq.n	8008154 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008142:	691b      	ldr	r3, [r3, #16]
 8008144:	68ba      	ldr	r2, [r7, #8]
 8008146:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800814a:	68ba      	ldr	r2, [r7, #8]
 800814c:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8008150:	78fa      	ldrb	r2, [r7, #3]
 8008152:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8008154:	2300      	movs	r3, #0
}
 8008156:	4618      	mov	r0, r3
 8008158:	3710      	adds	r7, #16
 800815a:	46bd      	mov	sp, r7
 800815c:	bd80      	pop	{r7, pc}

0800815e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800815e:	b580      	push	{r7, lr}
 8008160:	b084      	sub	sp, #16
 8008162:	af00      	add	r7, sp, #0
 8008164:	6078      	str	r0, [r7, #4]
 8008166:	460b      	mov	r3, r1
 8008168:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008170:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008178:	2b00      	cmp	r3, #0
 800817a:	d101      	bne.n	8008180 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800817c:	2303      	movs	r3, #3
 800817e:	e015      	b.n	80081ac <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8008180:	78fb      	ldrb	r3, [r7, #3]
 8008182:	4619      	mov	r1, r3
 8008184:	6878      	ldr	r0, [r7, #4]
 8008186:	f001 fedf 	bl	8009f48 <USBD_LL_GetRxDataSize>
 800818a:	4602      	mov	r2, r0
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008198:	68db      	ldr	r3, [r3, #12]
 800819a:	68fa      	ldr	r2, [r7, #12]
 800819c:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80081a0:	68fa      	ldr	r2, [r7, #12]
 80081a2:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80081a6:	4611      	mov	r1, r2
 80081a8:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80081aa:	2300      	movs	r3, #0
}
 80081ac:	4618      	mov	r0, r3
 80081ae:	3710      	adds	r7, #16
 80081b0:	46bd      	mov	sp, r7
 80081b2:	bd80      	pop	{r7, pc}

080081b4 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80081b4:	b580      	push	{r7, lr}
 80081b6:	b084      	sub	sp, #16
 80081b8:	af00      	add	r7, sp, #0
 80081ba:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80081c2:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80081c4:	68fb      	ldr	r3, [r7, #12]
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	d101      	bne.n	80081ce <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 80081ca:	2303      	movs	r3, #3
 80081cc:	e01b      	b.n	8008206 <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	d015      	beq.n	8008204 <USBD_CDC_EP0_RxReady+0x50>
 80081d8:	68fb      	ldr	r3, [r7, #12]
 80081da:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80081de:	2bff      	cmp	r3, #255	; 0xff
 80081e0:	d010      	beq.n	8008204 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80081e8:	689b      	ldr	r3, [r3, #8]
 80081ea:	68fa      	ldr	r2, [r7, #12]
 80081ec:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 80081f0:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 80081f2:	68fa      	ldr	r2, [r7, #12]
 80081f4:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80081f8:	b292      	uxth	r2, r2
 80081fa:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80081fc:	68fb      	ldr	r3, [r7, #12]
 80081fe:	22ff      	movs	r2, #255	; 0xff
 8008200:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8008204:	2300      	movs	r3, #0
}
 8008206:	4618      	mov	r0, r3
 8008208:	3710      	adds	r7, #16
 800820a:	46bd      	mov	sp, r7
 800820c:	bd80      	pop	{r7, pc}
	...

08008210 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8008210:	b480      	push	{r7}
 8008212:	b083      	sub	sp, #12
 8008214:	af00      	add	r7, sp, #0
 8008216:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	2243      	movs	r2, #67	; 0x43
 800821c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800821e:	4b03      	ldr	r3, [pc, #12]	; (800822c <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8008220:	4618      	mov	r0, r3
 8008222:	370c      	adds	r7, #12
 8008224:	46bd      	mov	sp, r7
 8008226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800822a:	4770      	bx	lr
 800822c:	20000094 	.word	0x20000094

08008230 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8008230:	b480      	push	{r7}
 8008232:	b083      	sub	sp, #12
 8008234:	af00      	add	r7, sp, #0
 8008236:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	2243      	movs	r2, #67	; 0x43
 800823c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800823e:	4b03      	ldr	r3, [pc, #12]	; (800824c <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8008240:	4618      	mov	r0, r3
 8008242:	370c      	adds	r7, #12
 8008244:	46bd      	mov	sp, r7
 8008246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800824a:	4770      	bx	lr
 800824c:	20000050 	.word	0x20000050

08008250 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8008250:	b480      	push	{r7}
 8008252:	b083      	sub	sp, #12
 8008254:	af00      	add	r7, sp, #0
 8008256:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	2243      	movs	r2, #67	; 0x43
 800825c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800825e:	4b03      	ldr	r3, [pc, #12]	; (800826c <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8008260:	4618      	mov	r0, r3
 8008262:	370c      	adds	r7, #12
 8008264:	46bd      	mov	sp, r7
 8008266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800826a:	4770      	bx	lr
 800826c:	200000d8 	.word	0x200000d8

08008270 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8008270:	b480      	push	{r7}
 8008272:	b083      	sub	sp, #12
 8008274:	af00      	add	r7, sp, #0
 8008276:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	220a      	movs	r2, #10
 800827c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800827e:	4b03      	ldr	r3, [pc, #12]	; (800828c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8008280:	4618      	mov	r0, r3
 8008282:	370c      	adds	r7, #12
 8008284:	46bd      	mov	sp, r7
 8008286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800828a:	4770      	bx	lr
 800828c:	2000000c 	.word	0x2000000c

08008290 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8008290:	b480      	push	{r7}
 8008292:	b083      	sub	sp, #12
 8008294:	af00      	add	r7, sp, #0
 8008296:	6078      	str	r0, [r7, #4]
 8008298:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800829a:	683b      	ldr	r3, [r7, #0]
 800829c:	2b00      	cmp	r3, #0
 800829e:	d101      	bne.n	80082a4 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80082a0:	2303      	movs	r3, #3
 80082a2:	e004      	b.n	80082ae <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	683a      	ldr	r2, [r7, #0]
 80082a8:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 80082ac:	2300      	movs	r3, #0
}
 80082ae:	4618      	mov	r0, r3
 80082b0:	370c      	adds	r7, #12
 80082b2:	46bd      	mov	sp, r7
 80082b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082b8:	4770      	bx	lr

080082ba <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80082ba:	b480      	push	{r7}
 80082bc:	b087      	sub	sp, #28
 80082be:	af00      	add	r7, sp, #0
 80082c0:	60f8      	str	r0, [r7, #12]
 80082c2:	60b9      	str	r1, [r7, #8]
 80082c4:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80082c6:	68fb      	ldr	r3, [r7, #12]
 80082c8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80082cc:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 80082ce:	697b      	ldr	r3, [r7, #20]
 80082d0:	2b00      	cmp	r3, #0
 80082d2:	d101      	bne.n	80082d8 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 80082d4:	2303      	movs	r3, #3
 80082d6:	e008      	b.n	80082ea <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 80082d8:	697b      	ldr	r3, [r7, #20]
 80082da:	68ba      	ldr	r2, [r7, #8]
 80082dc:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80082e0:	697b      	ldr	r3, [r7, #20]
 80082e2:	687a      	ldr	r2, [r7, #4]
 80082e4:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 80082e8:	2300      	movs	r3, #0
}
 80082ea:	4618      	mov	r0, r3
 80082ec:	371c      	adds	r7, #28
 80082ee:	46bd      	mov	sp, r7
 80082f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082f4:	4770      	bx	lr

080082f6 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80082f6:	b480      	push	{r7}
 80082f8:	b085      	sub	sp, #20
 80082fa:	af00      	add	r7, sp, #0
 80082fc:	6078      	str	r0, [r7, #4]
 80082fe:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008306:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8008308:	68fb      	ldr	r3, [r7, #12]
 800830a:	2b00      	cmp	r3, #0
 800830c:	d101      	bne.n	8008312 <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 800830e:	2303      	movs	r3, #3
 8008310:	e004      	b.n	800831c <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 8008312:	68fb      	ldr	r3, [r7, #12]
 8008314:	683a      	ldr	r2, [r7, #0]
 8008316:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800831a:	2300      	movs	r3, #0
}
 800831c:	4618      	mov	r0, r3
 800831e:	3714      	adds	r7, #20
 8008320:	46bd      	mov	sp, r7
 8008322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008326:	4770      	bx	lr

08008328 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8008328:	b580      	push	{r7, lr}
 800832a:	b084      	sub	sp, #16
 800832c:	af00      	add	r7, sp, #0
 800832e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008336:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8008338:	2301      	movs	r3, #1
 800833a:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008342:	2b00      	cmp	r3, #0
 8008344:	d101      	bne.n	800834a <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8008346:	2303      	movs	r3, #3
 8008348:	e01a      	b.n	8008380 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 800834a:	68bb      	ldr	r3, [r7, #8]
 800834c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8008350:	2b00      	cmp	r3, #0
 8008352:	d114      	bne.n	800837e <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8008354:	68bb      	ldr	r3, [r7, #8]
 8008356:	2201      	movs	r2, #1
 8008358:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800835c:	68bb      	ldr	r3, [r7, #8]
 800835e:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 8008366:	68bb      	ldr	r3, [r7, #8]
 8008368:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800836c:	68bb      	ldr	r3, [r7, #8]
 800836e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8008372:	2181      	movs	r1, #129	; 0x81
 8008374:	6878      	ldr	r0, [r7, #4]
 8008376:	f001 fda5 	bl	8009ec4 <USBD_LL_Transmit>

    ret = USBD_OK;
 800837a:	2300      	movs	r3, #0
 800837c:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800837e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008380:	4618      	mov	r0, r3
 8008382:	3710      	adds	r7, #16
 8008384:	46bd      	mov	sp, r7
 8008386:	bd80      	pop	{r7, pc}

08008388 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8008388:	b580      	push	{r7, lr}
 800838a:	b084      	sub	sp, #16
 800838c:	af00      	add	r7, sp, #0
 800838e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008396:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800839e:	2b00      	cmp	r3, #0
 80083a0:	d101      	bne.n	80083a6 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 80083a2:	2303      	movs	r3, #3
 80083a4:	e016      	b.n	80083d4 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	7c1b      	ldrb	r3, [r3, #16]
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	d109      	bne.n	80083c2 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80083ae:	68fb      	ldr	r3, [r7, #12]
 80083b0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80083b4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80083b8:	2101      	movs	r1, #1
 80083ba:	6878      	ldr	r0, [r7, #4]
 80083bc:	f001 fda3 	bl	8009f06 <USBD_LL_PrepareReceive>
 80083c0:	e007      	b.n	80083d2 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80083c2:	68fb      	ldr	r3, [r7, #12]
 80083c4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80083c8:	2340      	movs	r3, #64	; 0x40
 80083ca:	2101      	movs	r1, #1
 80083cc:	6878      	ldr	r0, [r7, #4]
 80083ce:	f001 fd9a 	bl	8009f06 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80083d2:	2300      	movs	r3, #0
}
 80083d4:	4618      	mov	r0, r3
 80083d6:	3710      	adds	r7, #16
 80083d8:	46bd      	mov	sp, r7
 80083da:	bd80      	pop	{r7, pc}

080083dc <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80083dc:	b580      	push	{r7, lr}
 80083de:	b086      	sub	sp, #24
 80083e0:	af00      	add	r7, sp, #0
 80083e2:	60f8      	str	r0, [r7, #12]
 80083e4:	60b9      	str	r1, [r7, #8]
 80083e6:	4613      	mov	r3, r2
 80083e8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80083ea:	68fb      	ldr	r3, [r7, #12]
 80083ec:	2b00      	cmp	r3, #0
 80083ee:	d101      	bne.n	80083f4 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80083f0:	2303      	movs	r3, #3
 80083f2:	e01f      	b.n	8008434 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 80083f4:	68fb      	ldr	r3, [r7, #12]
 80083f6:	2200      	movs	r2, #0
 80083f8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 80083fc:	68fb      	ldr	r3, [r7, #12]
 80083fe:	2200      	movs	r2, #0
 8008400:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 8008404:	68fb      	ldr	r3, [r7, #12]
 8008406:	2200      	movs	r2, #0
 8008408:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800840c:	68bb      	ldr	r3, [r7, #8]
 800840e:	2b00      	cmp	r3, #0
 8008410:	d003      	beq.n	800841a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8008412:	68fb      	ldr	r3, [r7, #12]
 8008414:	68ba      	ldr	r2, [r7, #8]
 8008416:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800841a:	68fb      	ldr	r3, [r7, #12]
 800841c:	2201      	movs	r2, #1
 800841e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8008422:	68fb      	ldr	r3, [r7, #12]
 8008424:	79fa      	ldrb	r2, [r7, #7]
 8008426:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8008428:	68f8      	ldr	r0, [r7, #12]
 800842a:	f001 fc01 	bl	8009c30 <USBD_LL_Init>
 800842e:	4603      	mov	r3, r0
 8008430:	75fb      	strb	r3, [r7, #23]

  return ret;
 8008432:	7dfb      	ldrb	r3, [r7, #23]
}
 8008434:	4618      	mov	r0, r3
 8008436:	3718      	adds	r7, #24
 8008438:	46bd      	mov	sp, r7
 800843a:	bd80      	pop	{r7, pc}

0800843c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800843c:	b580      	push	{r7, lr}
 800843e:	b084      	sub	sp, #16
 8008440:	af00      	add	r7, sp, #0
 8008442:	6078      	str	r0, [r7, #4]
 8008444:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008446:	2300      	movs	r3, #0
 8008448:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800844a:	683b      	ldr	r3, [r7, #0]
 800844c:	2b00      	cmp	r3, #0
 800844e:	d101      	bne.n	8008454 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8008450:	2303      	movs	r3, #3
 8008452:	e016      	b.n	8008482 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	683a      	ldr	r2, [r7, #0]
 8008458:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008462:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008464:	2b00      	cmp	r3, #0
 8008466:	d00b      	beq.n	8008480 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800846e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008470:	f107 020e 	add.w	r2, r7, #14
 8008474:	4610      	mov	r0, r2
 8008476:	4798      	blx	r3
 8008478:	4602      	mov	r2, r0
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8008480:	2300      	movs	r3, #0
}
 8008482:	4618      	mov	r0, r3
 8008484:	3710      	adds	r7, #16
 8008486:	46bd      	mov	sp, r7
 8008488:	bd80      	pop	{r7, pc}

0800848a <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800848a:	b580      	push	{r7, lr}
 800848c:	b082      	sub	sp, #8
 800848e:	af00      	add	r7, sp, #0
 8008490:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8008492:	6878      	ldr	r0, [r7, #4]
 8008494:	f001 fc2c 	bl	8009cf0 <USBD_LL_Start>
 8008498:	4603      	mov	r3, r0
}
 800849a:	4618      	mov	r0, r3
 800849c:	3708      	adds	r7, #8
 800849e:	46bd      	mov	sp, r7
 80084a0:	bd80      	pop	{r7, pc}

080084a2 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 80084a2:	b480      	push	{r7}
 80084a4:	b083      	sub	sp, #12
 80084a6:	af00      	add	r7, sp, #0
 80084a8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80084aa:	2300      	movs	r3, #0
}
 80084ac:	4618      	mov	r0, r3
 80084ae:	370c      	adds	r7, #12
 80084b0:	46bd      	mov	sp, r7
 80084b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084b6:	4770      	bx	lr

080084b8 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80084b8:	b580      	push	{r7, lr}
 80084ba:	b084      	sub	sp, #16
 80084bc:	af00      	add	r7, sp, #0
 80084be:	6078      	str	r0, [r7, #4]
 80084c0:	460b      	mov	r3, r1
 80084c2:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80084c4:	2303      	movs	r3, #3
 80084c6:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80084ce:	2b00      	cmp	r3, #0
 80084d0:	d009      	beq.n	80084e6 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	78fa      	ldrb	r2, [r7, #3]
 80084dc:	4611      	mov	r1, r2
 80084de:	6878      	ldr	r0, [r7, #4]
 80084e0:	4798      	blx	r3
 80084e2:	4603      	mov	r3, r0
 80084e4:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80084e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80084e8:	4618      	mov	r0, r3
 80084ea:	3710      	adds	r7, #16
 80084ec:	46bd      	mov	sp, r7
 80084ee:	bd80      	pop	{r7, pc}

080084f0 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80084f0:	b580      	push	{r7, lr}
 80084f2:	b082      	sub	sp, #8
 80084f4:	af00      	add	r7, sp, #0
 80084f6:	6078      	str	r0, [r7, #4]
 80084f8:	460b      	mov	r3, r1
 80084fa:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008502:	2b00      	cmp	r3, #0
 8008504:	d007      	beq.n	8008516 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800850c:	685b      	ldr	r3, [r3, #4]
 800850e:	78fa      	ldrb	r2, [r7, #3]
 8008510:	4611      	mov	r1, r2
 8008512:	6878      	ldr	r0, [r7, #4]
 8008514:	4798      	blx	r3
  }

  return USBD_OK;
 8008516:	2300      	movs	r3, #0
}
 8008518:	4618      	mov	r0, r3
 800851a:	3708      	adds	r7, #8
 800851c:	46bd      	mov	sp, r7
 800851e:	bd80      	pop	{r7, pc}

08008520 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8008520:	b580      	push	{r7, lr}
 8008522:	b084      	sub	sp, #16
 8008524:	af00      	add	r7, sp, #0
 8008526:	6078      	str	r0, [r7, #4]
 8008528:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008530:	6839      	ldr	r1, [r7, #0]
 8008532:	4618      	mov	r0, r3
 8008534:	f000 ff46 	bl	80093c4 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	2201      	movs	r2, #1
 800853c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8008546:	461a      	mov	r2, r3
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8008554:	f003 031f 	and.w	r3, r3, #31
 8008558:	2b02      	cmp	r3, #2
 800855a:	d01a      	beq.n	8008592 <USBD_LL_SetupStage+0x72>
 800855c:	2b02      	cmp	r3, #2
 800855e:	d822      	bhi.n	80085a6 <USBD_LL_SetupStage+0x86>
 8008560:	2b00      	cmp	r3, #0
 8008562:	d002      	beq.n	800856a <USBD_LL_SetupStage+0x4a>
 8008564:	2b01      	cmp	r3, #1
 8008566:	d00a      	beq.n	800857e <USBD_LL_SetupStage+0x5e>
 8008568:	e01d      	b.n	80085a6 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008570:	4619      	mov	r1, r3
 8008572:	6878      	ldr	r0, [r7, #4]
 8008574:	f000 f9ee 	bl	8008954 <USBD_StdDevReq>
 8008578:	4603      	mov	r3, r0
 800857a:	73fb      	strb	r3, [r7, #15]
      break;
 800857c:	e020      	b.n	80085c0 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008584:	4619      	mov	r1, r3
 8008586:	6878      	ldr	r0, [r7, #4]
 8008588:	f000 fa52 	bl	8008a30 <USBD_StdItfReq>
 800858c:	4603      	mov	r3, r0
 800858e:	73fb      	strb	r3, [r7, #15]
      break;
 8008590:	e016      	b.n	80085c0 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008598:	4619      	mov	r1, r3
 800859a:	6878      	ldr	r0, [r7, #4]
 800859c:	f000 fa91 	bl	8008ac2 <USBD_StdEPReq>
 80085a0:	4603      	mov	r3, r0
 80085a2:	73fb      	strb	r3, [r7, #15]
      break;
 80085a4:	e00c      	b.n	80085c0 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80085ac:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80085b0:	b2db      	uxtb	r3, r3
 80085b2:	4619      	mov	r1, r3
 80085b4:	6878      	ldr	r0, [r7, #4]
 80085b6:	f001 fbfb 	bl	8009db0 <USBD_LL_StallEP>
 80085ba:	4603      	mov	r3, r0
 80085bc:	73fb      	strb	r3, [r7, #15]
      break;
 80085be:	bf00      	nop
  }

  return ret;
 80085c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80085c2:	4618      	mov	r0, r3
 80085c4:	3710      	adds	r7, #16
 80085c6:	46bd      	mov	sp, r7
 80085c8:	bd80      	pop	{r7, pc}

080085ca <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80085ca:	b580      	push	{r7, lr}
 80085cc:	b086      	sub	sp, #24
 80085ce:	af00      	add	r7, sp, #0
 80085d0:	60f8      	str	r0, [r7, #12]
 80085d2:	460b      	mov	r3, r1
 80085d4:	607a      	str	r2, [r7, #4]
 80085d6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80085d8:	7afb      	ldrb	r3, [r7, #11]
 80085da:	2b00      	cmp	r3, #0
 80085dc:	d138      	bne.n	8008650 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 80085de:	68fb      	ldr	r3, [r7, #12]
 80085e0:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80085e4:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80085e6:	68fb      	ldr	r3, [r7, #12]
 80085e8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80085ec:	2b03      	cmp	r3, #3
 80085ee:	d14a      	bne.n	8008686 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 80085f0:	693b      	ldr	r3, [r7, #16]
 80085f2:	689a      	ldr	r2, [r3, #8]
 80085f4:	693b      	ldr	r3, [r7, #16]
 80085f6:	68db      	ldr	r3, [r3, #12]
 80085f8:	429a      	cmp	r2, r3
 80085fa:	d913      	bls.n	8008624 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80085fc:	693b      	ldr	r3, [r7, #16]
 80085fe:	689a      	ldr	r2, [r3, #8]
 8008600:	693b      	ldr	r3, [r7, #16]
 8008602:	68db      	ldr	r3, [r3, #12]
 8008604:	1ad2      	subs	r2, r2, r3
 8008606:	693b      	ldr	r3, [r7, #16]
 8008608:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800860a:	693b      	ldr	r3, [r7, #16]
 800860c:	68da      	ldr	r2, [r3, #12]
 800860e:	693b      	ldr	r3, [r7, #16]
 8008610:	689b      	ldr	r3, [r3, #8]
 8008612:	4293      	cmp	r3, r2
 8008614:	bf28      	it	cs
 8008616:	4613      	movcs	r3, r2
 8008618:	461a      	mov	r2, r3
 800861a:	6879      	ldr	r1, [r7, #4]
 800861c:	68f8      	ldr	r0, [r7, #12]
 800861e:	f000 ffc5 	bl	80095ac <USBD_CtlContinueRx>
 8008622:	e030      	b.n	8008686 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008624:	68fb      	ldr	r3, [r7, #12]
 8008626:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800862a:	b2db      	uxtb	r3, r3
 800862c:	2b03      	cmp	r3, #3
 800862e:	d10b      	bne.n	8008648 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 8008630:	68fb      	ldr	r3, [r7, #12]
 8008632:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008636:	691b      	ldr	r3, [r3, #16]
 8008638:	2b00      	cmp	r3, #0
 800863a:	d005      	beq.n	8008648 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 800863c:	68fb      	ldr	r3, [r7, #12]
 800863e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008642:	691b      	ldr	r3, [r3, #16]
 8008644:	68f8      	ldr	r0, [r7, #12]
 8008646:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8008648:	68f8      	ldr	r0, [r7, #12]
 800864a:	f000 ffc0 	bl	80095ce <USBD_CtlSendStatus>
 800864e:	e01a      	b.n	8008686 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008656:	b2db      	uxtb	r3, r3
 8008658:	2b03      	cmp	r3, #3
 800865a:	d114      	bne.n	8008686 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 800865c:	68fb      	ldr	r3, [r7, #12]
 800865e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008662:	699b      	ldr	r3, [r3, #24]
 8008664:	2b00      	cmp	r3, #0
 8008666:	d00e      	beq.n	8008686 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8008668:	68fb      	ldr	r3, [r7, #12]
 800866a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800866e:	699b      	ldr	r3, [r3, #24]
 8008670:	7afa      	ldrb	r2, [r7, #11]
 8008672:	4611      	mov	r1, r2
 8008674:	68f8      	ldr	r0, [r7, #12]
 8008676:	4798      	blx	r3
 8008678:	4603      	mov	r3, r0
 800867a:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800867c:	7dfb      	ldrb	r3, [r7, #23]
 800867e:	2b00      	cmp	r3, #0
 8008680:	d001      	beq.n	8008686 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 8008682:	7dfb      	ldrb	r3, [r7, #23]
 8008684:	e000      	b.n	8008688 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 8008686:	2300      	movs	r3, #0
}
 8008688:	4618      	mov	r0, r3
 800868a:	3718      	adds	r7, #24
 800868c:	46bd      	mov	sp, r7
 800868e:	bd80      	pop	{r7, pc}

08008690 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8008690:	b580      	push	{r7, lr}
 8008692:	b086      	sub	sp, #24
 8008694:	af00      	add	r7, sp, #0
 8008696:	60f8      	str	r0, [r7, #12]
 8008698:	460b      	mov	r3, r1
 800869a:	607a      	str	r2, [r7, #4]
 800869c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800869e:	7afb      	ldrb	r3, [r7, #11]
 80086a0:	2b00      	cmp	r3, #0
 80086a2:	d16b      	bne.n	800877c <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 80086a4:	68fb      	ldr	r3, [r7, #12]
 80086a6:	3314      	adds	r3, #20
 80086a8:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80086aa:	68fb      	ldr	r3, [r7, #12]
 80086ac:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80086b0:	2b02      	cmp	r3, #2
 80086b2:	d156      	bne.n	8008762 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 80086b4:	693b      	ldr	r3, [r7, #16]
 80086b6:	689a      	ldr	r2, [r3, #8]
 80086b8:	693b      	ldr	r3, [r7, #16]
 80086ba:	68db      	ldr	r3, [r3, #12]
 80086bc:	429a      	cmp	r2, r3
 80086be:	d914      	bls.n	80086ea <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80086c0:	693b      	ldr	r3, [r7, #16]
 80086c2:	689a      	ldr	r2, [r3, #8]
 80086c4:	693b      	ldr	r3, [r7, #16]
 80086c6:	68db      	ldr	r3, [r3, #12]
 80086c8:	1ad2      	subs	r2, r2, r3
 80086ca:	693b      	ldr	r3, [r7, #16]
 80086cc:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80086ce:	693b      	ldr	r3, [r7, #16]
 80086d0:	689b      	ldr	r3, [r3, #8]
 80086d2:	461a      	mov	r2, r3
 80086d4:	6879      	ldr	r1, [r7, #4]
 80086d6:	68f8      	ldr	r0, [r7, #12]
 80086d8:	f000 ff3a 	bl	8009550 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80086dc:	2300      	movs	r3, #0
 80086de:	2200      	movs	r2, #0
 80086e0:	2100      	movs	r1, #0
 80086e2:	68f8      	ldr	r0, [r7, #12]
 80086e4:	f001 fc0f 	bl	8009f06 <USBD_LL_PrepareReceive>
 80086e8:	e03b      	b.n	8008762 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80086ea:	693b      	ldr	r3, [r7, #16]
 80086ec:	68da      	ldr	r2, [r3, #12]
 80086ee:	693b      	ldr	r3, [r7, #16]
 80086f0:	689b      	ldr	r3, [r3, #8]
 80086f2:	429a      	cmp	r2, r3
 80086f4:	d11c      	bne.n	8008730 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80086f6:	693b      	ldr	r3, [r7, #16]
 80086f8:	685a      	ldr	r2, [r3, #4]
 80086fa:	693b      	ldr	r3, [r7, #16]
 80086fc:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80086fe:	429a      	cmp	r2, r3
 8008700:	d316      	bcc.n	8008730 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8008702:	693b      	ldr	r3, [r7, #16]
 8008704:	685a      	ldr	r2, [r3, #4]
 8008706:	68fb      	ldr	r3, [r7, #12]
 8008708:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800870c:	429a      	cmp	r2, r3
 800870e:	d20f      	bcs.n	8008730 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8008710:	2200      	movs	r2, #0
 8008712:	2100      	movs	r1, #0
 8008714:	68f8      	ldr	r0, [r7, #12]
 8008716:	f000 ff1b 	bl	8009550 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800871a:	68fb      	ldr	r3, [r7, #12]
 800871c:	2200      	movs	r2, #0
 800871e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008722:	2300      	movs	r3, #0
 8008724:	2200      	movs	r2, #0
 8008726:	2100      	movs	r1, #0
 8008728:	68f8      	ldr	r0, [r7, #12]
 800872a:	f001 fbec 	bl	8009f06 <USBD_LL_PrepareReceive>
 800872e:	e018      	b.n	8008762 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008730:	68fb      	ldr	r3, [r7, #12]
 8008732:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008736:	b2db      	uxtb	r3, r3
 8008738:	2b03      	cmp	r3, #3
 800873a:	d10b      	bne.n	8008754 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 800873c:	68fb      	ldr	r3, [r7, #12]
 800873e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008742:	68db      	ldr	r3, [r3, #12]
 8008744:	2b00      	cmp	r3, #0
 8008746:	d005      	beq.n	8008754 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 8008748:	68fb      	ldr	r3, [r7, #12]
 800874a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800874e:	68db      	ldr	r3, [r3, #12]
 8008750:	68f8      	ldr	r0, [r7, #12]
 8008752:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8008754:	2180      	movs	r1, #128	; 0x80
 8008756:	68f8      	ldr	r0, [r7, #12]
 8008758:	f001 fb2a 	bl	8009db0 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800875c:	68f8      	ldr	r0, [r7, #12]
 800875e:	f000 ff49 	bl	80095f4 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8008762:	68fb      	ldr	r3, [r7, #12]
 8008764:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8008768:	2b01      	cmp	r3, #1
 800876a:	d122      	bne.n	80087b2 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800876c:	68f8      	ldr	r0, [r7, #12]
 800876e:	f7ff fe98 	bl	80084a2 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8008772:	68fb      	ldr	r3, [r7, #12]
 8008774:	2200      	movs	r2, #0
 8008776:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800877a:	e01a      	b.n	80087b2 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800877c:	68fb      	ldr	r3, [r7, #12]
 800877e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008782:	b2db      	uxtb	r3, r3
 8008784:	2b03      	cmp	r3, #3
 8008786:	d114      	bne.n	80087b2 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8008788:	68fb      	ldr	r3, [r7, #12]
 800878a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800878e:	695b      	ldr	r3, [r3, #20]
 8008790:	2b00      	cmp	r3, #0
 8008792:	d00e      	beq.n	80087b2 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8008794:	68fb      	ldr	r3, [r7, #12]
 8008796:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800879a:	695b      	ldr	r3, [r3, #20]
 800879c:	7afa      	ldrb	r2, [r7, #11]
 800879e:	4611      	mov	r1, r2
 80087a0:	68f8      	ldr	r0, [r7, #12]
 80087a2:	4798      	blx	r3
 80087a4:	4603      	mov	r3, r0
 80087a6:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 80087a8:	7dfb      	ldrb	r3, [r7, #23]
 80087aa:	2b00      	cmp	r3, #0
 80087ac:	d001      	beq.n	80087b2 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 80087ae:	7dfb      	ldrb	r3, [r7, #23]
 80087b0:	e000      	b.n	80087b4 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 80087b2:	2300      	movs	r3, #0
}
 80087b4:	4618      	mov	r0, r3
 80087b6:	3718      	adds	r7, #24
 80087b8:	46bd      	mov	sp, r7
 80087ba:	bd80      	pop	{r7, pc}

080087bc <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80087bc:	b580      	push	{r7, lr}
 80087be:	b082      	sub	sp, #8
 80087c0:	af00      	add	r7, sp, #0
 80087c2:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	2201      	movs	r2, #1
 80087c8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	2200      	movs	r2, #0
 80087d0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	2200      	movs	r2, #0
 80087d8:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	2200      	movs	r2, #0
 80087de:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80087e8:	2b00      	cmp	r3, #0
 80087ea:	d101      	bne.n	80087f0 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 80087ec:	2303      	movs	r3, #3
 80087ee:	e02f      	b.n	8008850 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	d00f      	beq.n	800881a <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008800:	685b      	ldr	r3, [r3, #4]
 8008802:	2b00      	cmp	r3, #0
 8008804:	d009      	beq.n	800881a <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800880c:	685b      	ldr	r3, [r3, #4]
 800880e:	687a      	ldr	r2, [r7, #4]
 8008810:	6852      	ldr	r2, [r2, #4]
 8008812:	b2d2      	uxtb	r2, r2
 8008814:	4611      	mov	r1, r2
 8008816:	6878      	ldr	r0, [r7, #4]
 8008818:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800881a:	2340      	movs	r3, #64	; 0x40
 800881c:	2200      	movs	r2, #0
 800881e:	2100      	movs	r1, #0
 8008820:	6878      	ldr	r0, [r7, #4]
 8008822:	f001 fa80 	bl	8009d26 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	2201      	movs	r2, #1
 800882a:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	2240      	movs	r2, #64	; 0x40
 8008832:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008836:	2340      	movs	r3, #64	; 0x40
 8008838:	2200      	movs	r2, #0
 800883a:	2180      	movs	r1, #128	; 0x80
 800883c:	6878      	ldr	r0, [r7, #4]
 800883e:	f001 fa72 	bl	8009d26 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	2201      	movs	r2, #1
 8008846:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	2240      	movs	r2, #64	; 0x40
 800884c:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800884e:	2300      	movs	r3, #0
}
 8008850:	4618      	mov	r0, r3
 8008852:	3708      	adds	r7, #8
 8008854:	46bd      	mov	sp, r7
 8008856:	bd80      	pop	{r7, pc}

08008858 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8008858:	b480      	push	{r7}
 800885a:	b083      	sub	sp, #12
 800885c:	af00      	add	r7, sp, #0
 800885e:	6078      	str	r0, [r7, #4]
 8008860:	460b      	mov	r3, r1
 8008862:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	78fa      	ldrb	r2, [r7, #3]
 8008868:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800886a:	2300      	movs	r3, #0
}
 800886c:	4618      	mov	r0, r3
 800886e:	370c      	adds	r7, #12
 8008870:	46bd      	mov	sp, r7
 8008872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008876:	4770      	bx	lr

08008878 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8008878:	b480      	push	{r7}
 800887a:	b083      	sub	sp, #12
 800887c:	af00      	add	r7, sp, #0
 800887e:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008886:	b2da      	uxtb	r2, r3
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	2204      	movs	r2, #4
 8008892:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8008896:	2300      	movs	r3, #0
}
 8008898:	4618      	mov	r0, r3
 800889a:	370c      	adds	r7, #12
 800889c:	46bd      	mov	sp, r7
 800889e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088a2:	4770      	bx	lr

080088a4 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80088a4:	b480      	push	{r7}
 80088a6:	b083      	sub	sp, #12
 80088a8:	af00      	add	r7, sp, #0
 80088aa:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80088b2:	b2db      	uxtb	r3, r3
 80088b4:	2b04      	cmp	r3, #4
 80088b6:	d106      	bne.n	80088c6 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 80088be:	b2da      	uxtb	r2, r3
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80088c6:	2300      	movs	r3, #0
}
 80088c8:	4618      	mov	r0, r3
 80088ca:	370c      	adds	r7, #12
 80088cc:	46bd      	mov	sp, r7
 80088ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088d2:	4770      	bx	lr

080088d4 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80088d4:	b580      	push	{r7, lr}
 80088d6:	b082      	sub	sp, #8
 80088d8:	af00      	add	r7, sp, #0
 80088da:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80088e2:	2b00      	cmp	r3, #0
 80088e4:	d101      	bne.n	80088ea <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 80088e6:	2303      	movs	r3, #3
 80088e8:	e012      	b.n	8008910 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80088f0:	b2db      	uxtb	r3, r3
 80088f2:	2b03      	cmp	r3, #3
 80088f4:	d10b      	bne.n	800890e <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80088fc:	69db      	ldr	r3, [r3, #28]
 80088fe:	2b00      	cmp	r3, #0
 8008900:	d005      	beq.n	800890e <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008908:	69db      	ldr	r3, [r3, #28]
 800890a:	6878      	ldr	r0, [r7, #4]
 800890c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800890e:	2300      	movs	r3, #0
}
 8008910:	4618      	mov	r0, r3
 8008912:	3708      	adds	r7, #8
 8008914:	46bd      	mov	sp, r7
 8008916:	bd80      	pop	{r7, pc}

08008918 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8008918:	b480      	push	{r7}
 800891a:	b087      	sub	sp, #28
 800891c:	af00      	add	r7, sp, #0
 800891e:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8008924:	697b      	ldr	r3, [r7, #20]
 8008926:	781b      	ldrb	r3, [r3, #0]
 8008928:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800892a:	697b      	ldr	r3, [r7, #20]
 800892c:	3301      	adds	r3, #1
 800892e:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8008930:	697b      	ldr	r3, [r7, #20]
 8008932:	781b      	ldrb	r3, [r3, #0]
 8008934:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8008936:	8a3b      	ldrh	r3, [r7, #16]
 8008938:	021b      	lsls	r3, r3, #8
 800893a:	b21a      	sxth	r2, r3
 800893c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8008940:	4313      	orrs	r3, r2
 8008942:	b21b      	sxth	r3, r3
 8008944:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8008946:	89fb      	ldrh	r3, [r7, #14]
}
 8008948:	4618      	mov	r0, r3
 800894a:	371c      	adds	r7, #28
 800894c:	46bd      	mov	sp, r7
 800894e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008952:	4770      	bx	lr

08008954 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008954:	b580      	push	{r7, lr}
 8008956:	b084      	sub	sp, #16
 8008958:	af00      	add	r7, sp, #0
 800895a:	6078      	str	r0, [r7, #4]
 800895c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800895e:	2300      	movs	r3, #0
 8008960:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008962:	683b      	ldr	r3, [r7, #0]
 8008964:	781b      	ldrb	r3, [r3, #0]
 8008966:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800896a:	2b40      	cmp	r3, #64	; 0x40
 800896c:	d005      	beq.n	800897a <USBD_StdDevReq+0x26>
 800896e:	2b40      	cmp	r3, #64	; 0x40
 8008970:	d853      	bhi.n	8008a1a <USBD_StdDevReq+0xc6>
 8008972:	2b00      	cmp	r3, #0
 8008974:	d00b      	beq.n	800898e <USBD_StdDevReq+0x3a>
 8008976:	2b20      	cmp	r3, #32
 8008978:	d14f      	bne.n	8008a1a <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008980:	689b      	ldr	r3, [r3, #8]
 8008982:	6839      	ldr	r1, [r7, #0]
 8008984:	6878      	ldr	r0, [r7, #4]
 8008986:	4798      	blx	r3
 8008988:	4603      	mov	r3, r0
 800898a:	73fb      	strb	r3, [r7, #15]
      break;
 800898c:	e04a      	b.n	8008a24 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800898e:	683b      	ldr	r3, [r7, #0]
 8008990:	785b      	ldrb	r3, [r3, #1]
 8008992:	2b09      	cmp	r3, #9
 8008994:	d83b      	bhi.n	8008a0e <USBD_StdDevReq+0xba>
 8008996:	a201      	add	r2, pc, #4	; (adr r2, 800899c <USBD_StdDevReq+0x48>)
 8008998:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800899c:	080089f1 	.word	0x080089f1
 80089a0:	08008a05 	.word	0x08008a05
 80089a4:	08008a0f 	.word	0x08008a0f
 80089a8:	080089fb 	.word	0x080089fb
 80089ac:	08008a0f 	.word	0x08008a0f
 80089b0:	080089cf 	.word	0x080089cf
 80089b4:	080089c5 	.word	0x080089c5
 80089b8:	08008a0f 	.word	0x08008a0f
 80089bc:	080089e7 	.word	0x080089e7
 80089c0:	080089d9 	.word	0x080089d9
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80089c4:	6839      	ldr	r1, [r7, #0]
 80089c6:	6878      	ldr	r0, [r7, #4]
 80089c8:	f000 f9de 	bl	8008d88 <USBD_GetDescriptor>
          break;
 80089cc:	e024      	b.n	8008a18 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80089ce:	6839      	ldr	r1, [r7, #0]
 80089d0:	6878      	ldr	r0, [r7, #4]
 80089d2:	f000 fb6d 	bl	80090b0 <USBD_SetAddress>
          break;
 80089d6:	e01f      	b.n	8008a18 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80089d8:	6839      	ldr	r1, [r7, #0]
 80089da:	6878      	ldr	r0, [r7, #4]
 80089dc:	f000 fbac 	bl	8009138 <USBD_SetConfig>
 80089e0:	4603      	mov	r3, r0
 80089e2:	73fb      	strb	r3, [r7, #15]
          break;
 80089e4:	e018      	b.n	8008a18 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80089e6:	6839      	ldr	r1, [r7, #0]
 80089e8:	6878      	ldr	r0, [r7, #4]
 80089ea:	f000 fc4b 	bl	8009284 <USBD_GetConfig>
          break;
 80089ee:	e013      	b.n	8008a18 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80089f0:	6839      	ldr	r1, [r7, #0]
 80089f2:	6878      	ldr	r0, [r7, #4]
 80089f4:	f000 fc7c 	bl	80092f0 <USBD_GetStatus>
          break;
 80089f8:	e00e      	b.n	8008a18 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80089fa:	6839      	ldr	r1, [r7, #0]
 80089fc:	6878      	ldr	r0, [r7, #4]
 80089fe:	f000 fcab 	bl	8009358 <USBD_SetFeature>
          break;
 8008a02:	e009      	b.n	8008a18 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8008a04:	6839      	ldr	r1, [r7, #0]
 8008a06:	6878      	ldr	r0, [r7, #4]
 8008a08:	f000 fcba 	bl	8009380 <USBD_ClrFeature>
          break;
 8008a0c:	e004      	b.n	8008a18 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 8008a0e:	6839      	ldr	r1, [r7, #0]
 8008a10:	6878      	ldr	r0, [r7, #4]
 8008a12:	f000 fd11 	bl	8009438 <USBD_CtlError>
          break;
 8008a16:	bf00      	nop
      }
      break;
 8008a18:	e004      	b.n	8008a24 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 8008a1a:	6839      	ldr	r1, [r7, #0]
 8008a1c:	6878      	ldr	r0, [r7, #4]
 8008a1e:	f000 fd0b 	bl	8009438 <USBD_CtlError>
      break;
 8008a22:	bf00      	nop
  }

  return ret;
 8008a24:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a26:	4618      	mov	r0, r3
 8008a28:	3710      	adds	r7, #16
 8008a2a:	46bd      	mov	sp, r7
 8008a2c:	bd80      	pop	{r7, pc}
 8008a2e:	bf00      	nop

08008a30 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008a30:	b580      	push	{r7, lr}
 8008a32:	b084      	sub	sp, #16
 8008a34:	af00      	add	r7, sp, #0
 8008a36:	6078      	str	r0, [r7, #4]
 8008a38:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008a3a:	2300      	movs	r3, #0
 8008a3c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008a3e:	683b      	ldr	r3, [r7, #0]
 8008a40:	781b      	ldrb	r3, [r3, #0]
 8008a42:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008a46:	2b40      	cmp	r3, #64	; 0x40
 8008a48:	d005      	beq.n	8008a56 <USBD_StdItfReq+0x26>
 8008a4a:	2b40      	cmp	r3, #64	; 0x40
 8008a4c:	d82f      	bhi.n	8008aae <USBD_StdItfReq+0x7e>
 8008a4e:	2b00      	cmp	r3, #0
 8008a50:	d001      	beq.n	8008a56 <USBD_StdItfReq+0x26>
 8008a52:	2b20      	cmp	r3, #32
 8008a54:	d12b      	bne.n	8008aae <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008a5c:	b2db      	uxtb	r3, r3
 8008a5e:	3b01      	subs	r3, #1
 8008a60:	2b02      	cmp	r3, #2
 8008a62:	d81d      	bhi.n	8008aa0 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8008a64:	683b      	ldr	r3, [r7, #0]
 8008a66:	889b      	ldrh	r3, [r3, #4]
 8008a68:	b2db      	uxtb	r3, r3
 8008a6a:	2b01      	cmp	r3, #1
 8008a6c:	d813      	bhi.n	8008a96 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008a74:	689b      	ldr	r3, [r3, #8]
 8008a76:	6839      	ldr	r1, [r7, #0]
 8008a78:	6878      	ldr	r0, [r7, #4]
 8008a7a:	4798      	blx	r3
 8008a7c:	4603      	mov	r3, r0
 8008a7e:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8008a80:	683b      	ldr	r3, [r7, #0]
 8008a82:	88db      	ldrh	r3, [r3, #6]
 8008a84:	2b00      	cmp	r3, #0
 8008a86:	d110      	bne.n	8008aaa <USBD_StdItfReq+0x7a>
 8008a88:	7bfb      	ldrb	r3, [r7, #15]
 8008a8a:	2b00      	cmp	r3, #0
 8008a8c:	d10d      	bne.n	8008aaa <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 8008a8e:	6878      	ldr	r0, [r7, #4]
 8008a90:	f000 fd9d 	bl	80095ce <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8008a94:	e009      	b.n	8008aaa <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 8008a96:	6839      	ldr	r1, [r7, #0]
 8008a98:	6878      	ldr	r0, [r7, #4]
 8008a9a:	f000 fccd 	bl	8009438 <USBD_CtlError>
          break;
 8008a9e:	e004      	b.n	8008aaa <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 8008aa0:	6839      	ldr	r1, [r7, #0]
 8008aa2:	6878      	ldr	r0, [r7, #4]
 8008aa4:	f000 fcc8 	bl	8009438 <USBD_CtlError>
          break;
 8008aa8:	e000      	b.n	8008aac <USBD_StdItfReq+0x7c>
          break;
 8008aaa:	bf00      	nop
      }
      break;
 8008aac:	e004      	b.n	8008ab8 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 8008aae:	6839      	ldr	r1, [r7, #0]
 8008ab0:	6878      	ldr	r0, [r7, #4]
 8008ab2:	f000 fcc1 	bl	8009438 <USBD_CtlError>
      break;
 8008ab6:	bf00      	nop
  }

  return ret;
 8008ab8:	7bfb      	ldrb	r3, [r7, #15]
}
 8008aba:	4618      	mov	r0, r3
 8008abc:	3710      	adds	r7, #16
 8008abe:	46bd      	mov	sp, r7
 8008ac0:	bd80      	pop	{r7, pc}

08008ac2 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008ac2:	b580      	push	{r7, lr}
 8008ac4:	b084      	sub	sp, #16
 8008ac6:	af00      	add	r7, sp, #0
 8008ac8:	6078      	str	r0, [r7, #4]
 8008aca:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8008acc:	2300      	movs	r3, #0
 8008ace:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8008ad0:	683b      	ldr	r3, [r7, #0]
 8008ad2:	889b      	ldrh	r3, [r3, #4]
 8008ad4:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008ad6:	683b      	ldr	r3, [r7, #0]
 8008ad8:	781b      	ldrb	r3, [r3, #0]
 8008ada:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008ade:	2b40      	cmp	r3, #64	; 0x40
 8008ae0:	d007      	beq.n	8008af2 <USBD_StdEPReq+0x30>
 8008ae2:	2b40      	cmp	r3, #64	; 0x40
 8008ae4:	f200 8145 	bhi.w	8008d72 <USBD_StdEPReq+0x2b0>
 8008ae8:	2b00      	cmp	r3, #0
 8008aea:	d00c      	beq.n	8008b06 <USBD_StdEPReq+0x44>
 8008aec:	2b20      	cmp	r3, #32
 8008aee:	f040 8140 	bne.w	8008d72 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008af8:	689b      	ldr	r3, [r3, #8]
 8008afa:	6839      	ldr	r1, [r7, #0]
 8008afc:	6878      	ldr	r0, [r7, #4]
 8008afe:	4798      	blx	r3
 8008b00:	4603      	mov	r3, r0
 8008b02:	73fb      	strb	r3, [r7, #15]
      break;
 8008b04:	e13a      	b.n	8008d7c <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008b06:	683b      	ldr	r3, [r7, #0]
 8008b08:	785b      	ldrb	r3, [r3, #1]
 8008b0a:	2b03      	cmp	r3, #3
 8008b0c:	d007      	beq.n	8008b1e <USBD_StdEPReq+0x5c>
 8008b0e:	2b03      	cmp	r3, #3
 8008b10:	f300 8129 	bgt.w	8008d66 <USBD_StdEPReq+0x2a4>
 8008b14:	2b00      	cmp	r3, #0
 8008b16:	d07f      	beq.n	8008c18 <USBD_StdEPReq+0x156>
 8008b18:	2b01      	cmp	r3, #1
 8008b1a:	d03c      	beq.n	8008b96 <USBD_StdEPReq+0xd4>
 8008b1c:	e123      	b.n	8008d66 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008b24:	b2db      	uxtb	r3, r3
 8008b26:	2b02      	cmp	r3, #2
 8008b28:	d002      	beq.n	8008b30 <USBD_StdEPReq+0x6e>
 8008b2a:	2b03      	cmp	r3, #3
 8008b2c:	d016      	beq.n	8008b5c <USBD_StdEPReq+0x9a>
 8008b2e:	e02c      	b.n	8008b8a <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008b30:	7bbb      	ldrb	r3, [r7, #14]
 8008b32:	2b00      	cmp	r3, #0
 8008b34:	d00d      	beq.n	8008b52 <USBD_StdEPReq+0x90>
 8008b36:	7bbb      	ldrb	r3, [r7, #14]
 8008b38:	2b80      	cmp	r3, #128	; 0x80
 8008b3a:	d00a      	beq.n	8008b52 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008b3c:	7bbb      	ldrb	r3, [r7, #14]
 8008b3e:	4619      	mov	r1, r3
 8008b40:	6878      	ldr	r0, [r7, #4]
 8008b42:	f001 f935 	bl	8009db0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8008b46:	2180      	movs	r1, #128	; 0x80
 8008b48:	6878      	ldr	r0, [r7, #4]
 8008b4a:	f001 f931 	bl	8009db0 <USBD_LL_StallEP>
 8008b4e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008b50:	e020      	b.n	8008b94 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 8008b52:	6839      	ldr	r1, [r7, #0]
 8008b54:	6878      	ldr	r0, [r7, #4]
 8008b56:	f000 fc6f 	bl	8009438 <USBD_CtlError>
              break;
 8008b5a:	e01b      	b.n	8008b94 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008b5c:	683b      	ldr	r3, [r7, #0]
 8008b5e:	885b      	ldrh	r3, [r3, #2]
 8008b60:	2b00      	cmp	r3, #0
 8008b62:	d10e      	bne.n	8008b82 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8008b64:	7bbb      	ldrb	r3, [r7, #14]
 8008b66:	2b00      	cmp	r3, #0
 8008b68:	d00b      	beq.n	8008b82 <USBD_StdEPReq+0xc0>
 8008b6a:	7bbb      	ldrb	r3, [r7, #14]
 8008b6c:	2b80      	cmp	r3, #128	; 0x80
 8008b6e:	d008      	beq.n	8008b82 <USBD_StdEPReq+0xc0>
 8008b70:	683b      	ldr	r3, [r7, #0]
 8008b72:	88db      	ldrh	r3, [r3, #6]
 8008b74:	2b00      	cmp	r3, #0
 8008b76:	d104      	bne.n	8008b82 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8008b78:	7bbb      	ldrb	r3, [r7, #14]
 8008b7a:	4619      	mov	r1, r3
 8008b7c:	6878      	ldr	r0, [r7, #4]
 8008b7e:	f001 f917 	bl	8009db0 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8008b82:	6878      	ldr	r0, [r7, #4]
 8008b84:	f000 fd23 	bl	80095ce <USBD_CtlSendStatus>

              break;
 8008b88:	e004      	b.n	8008b94 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 8008b8a:	6839      	ldr	r1, [r7, #0]
 8008b8c:	6878      	ldr	r0, [r7, #4]
 8008b8e:	f000 fc53 	bl	8009438 <USBD_CtlError>
              break;
 8008b92:	bf00      	nop
          }
          break;
 8008b94:	e0ec      	b.n	8008d70 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008b9c:	b2db      	uxtb	r3, r3
 8008b9e:	2b02      	cmp	r3, #2
 8008ba0:	d002      	beq.n	8008ba8 <USBD_StdEPReq+0xe6>
 8008ba2:	2b03      	cmp	r3, #3
 8008ba4:	d016      	beq.n	8008bd4 <USBD_StdEPReq+0x112>
 8008ba6:	e030      	b.n	8008c0a <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008ba8:	7bbb      	ldrb	r3, [r7, #14]
 8008baa:	2b00      	cmp	r3, #0
 8008bac:	d00d      	beq.n	8008bca <USBD_StdEPReq+0x108>
 8008bae:	7bbb      	ldrb	r3, [r7, #14]
 8008bb0:	2b80      	cmp	r3, #128	; 0x80
 8008bb2:	d00a      	beq.n	8008bca <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008bb4:	7bbb      	ldrb	r3, [r7, #14]
 8008bb6:	4619      	mov	r1, r3
 8008bb8:	6878      	ldr	r0, [r7, #4]
 8008bba:	f001 f8f9 	bl	8009db0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8008bbe:	2180      	movs	r1, #128	; 0x80
 8008bc0:	6878      	ldr	r0, [r7, #4]
 8008bc2:	f001 f8f5 	bl	8009db0 <USBD_LL_StallEP>
 8008bc6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008bc8:	e025      	b.n	8008c16 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 8008bca:	6839      	ldr	r1, [r7, #0]
 8008bcc:	6878      	ldr	r0, [r7, #4]
 8008bce:	f000 fc33 	bl	8009438 <USBD_CtlError>
              break;
 8008bd2:	e020      	b.n	8008c16 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008bd4:	683b      	ldr	r3, [r7, #0]
 8008bd6:	885b      	ldrh	r3, [r3, #2]
 8008bd8:	2b00      	cmp	r3, #0
 8008bda:	d11b      	bne.n	8008c14 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8008bdc:	7bbb      	ldrb	r3, [r7, #14]
 8008bde:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008be2:	2b00      	cmp	r3, #0
 8008be4:	d004      	beq.n	8008bf0 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8008be6:	7bbb      	ldrb	r3, [r7, #14]
 8008be8:	4619      	mov	r1, r3
 8008bea:	6878      	ldr	r0, [r7, #4]
 8008bec:	f001 f8ff 	bl	8009dee <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8008bf0:	6878      	ldr	r0, [r7, #4]
 8008bf2:	f000 fcec 	bl	80095ce <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008bfc:	689b      	ldr	r3, [r3, #8]
 8008bfe:	6839      	ldr	r1, [r7, #0]
 8008c00:	6878      	ldr	r0, [r7, #4]
 8008c02:	4798      	blx	r3
 8008c04:	4603      	mov	r3, r0
 8008c06:	73fb      	strb	r3, [r7, #15]
              }
              break;
 8008c08:	e004      	b.n	8008c14 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 8008c0a:	6839      	ldr	r1, [r7, #0]
 8008c0c:	6878      	ldr	r0, [r7, #4]
 8008c0e:	f000 fc13 	bl	8009438 <USBD_CtlError>
              break;
 8008c12:	e000      	b.n	8008c16 <USBD_StdEPReq+0x154>
              break;
 8008c14:	bf00      	nop
          }
          break;
 8008c16:	e0ab      	b.n	8008d70 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008c1e:	b2db      	uxtb	r3, r3
 8008c20:	2b02      	cmp	r3, #2
 8008c22:	d002      	beq.n	8008c2a <USBD_StdEPReq+0x168>
 8008c24:	2b03      	cmp	r3, #3
 8008c26:	d032      	beq.n	8008c8e <USBD_StdEPReq+0x1cc>
 8008c28:	e097      	b.n	8008d5a <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008c2a:	7bbb      	ldrb	r3, [r7, #14]
 8008c2c:	2b00      	cmp	r3, #0
 8008c2e:	d007      	beq.n	8008c40 <USBD_StdEPReq+0x17e>
 8008c30:	7bbb      	ldrb	r3, [r7, #14]
 8008c32:	2b80      	cmp	r3, #128	; 0x80
 8008c34:	d004      	beq.n	8008c40 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 8008c36:	6839      	ldr	r1, [r7, #0]
 8008c38:	6878      	ldr	r0, [r7, #4]
 8008c3a:	f000 fbfd 	bl	8009438 <USBD_CtlError>
                break;
 8008c3e:	e091      	b.n	8008d64 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008c40:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008c44:	2b00      	cmp	r3, #0
 8008c46:	da0b      	bge.n	8008c60 <USBD_StdEPReq+0x19e>
 8008c48:	7bbb      	ldrb	r3, [r7, #14]
 8008c4a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008c4e:	4613      	mov	r3, r2
 8008c50:	009b      	lsls	r3, r3, #2
 8008c52:	4413      	add	r3, r2
 8008c54:	009b      	lsls	r3, r3, #2
 8008c56:	3310      	adds	r3, #16
 8008c58:	687a      	ldr	r2, [r7, #4]
 8008c5a:	4413      	add	r3, r2
 8008c5c:	3304      	adds	r3, #4
 8008c5e:	e00b      	b.n	8008c78 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008c60:	7bbb      	ldrb	r3, [r7, #14]
 8008c62:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008c66:	4613      	mov	r3, r2
 8008c68:	009b      	lsls	r3, r3, #2
 8008c6a:	4413      	add	r3, r2
 8008c6c:	009b      	lsls	r3, r3, #2
 8008c6e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008c72:	687a      	ldr	r2, [r7, #4]
 8008c74:	4413      	add	r3, r2
 8008c76:	3304      	adds	r3, #4
 8008c78:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8008c7a:	68bb      	ldr	r3, [r7, #8]
 8008c7c:	2200      	movs	r2, #0
 8008c7e:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008c80:	68bb      	ldr	r3, [r7, #8]
 8008c82:	2202      	movs	r2, #2
 8008c84:	4619      	mov	r1, r3
 8008c86:	6878      	ldr	r0, [r7, #4]
 8008c88:	f000 fc47 	bl	800951a <USBD_CtlSendData>
              break;
 8008c8c:	e06a      	b.n	8008d64 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8008c8e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008c92:	2b00      	cmp	r3, #0
 8008c94:	da11      	bge.n	8008cba <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8008c96:	7bbb      	ldrb	r3, [r7, #14]
 8008c98:	f003 020f 	and.w	r2, r3, #15
 8008c9c:	6879      	ldr	r1, [r7, #4]
 8008c9e:	4613      	mov	r3, r2
 8008ca0:	009b      	lsls	r3, r3, #2
 8008ca2:	4413      	add	r3, r2
 8008ca4:	009b      	lsls	r3, r3, #2
 8008ca6:	440b      	add	r3, r1
 8008ca8:	3324      	adds	r3, #36	; 0x24
 8008caa:	881b      	ldrh	r3, [r3, #0]
 8008cac:	2b00      	cmp	r3, #0
 8008cae:	d117      	bne.n	8008ce0 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8008cb0:	6839      	ldr	r1, [r7, #0]
 8008cb2:	6878      	ldr	r0, [r7, #4]
 8008cb4:	f000 fbc0 	bl	8009438 <USBD_CtlError>
                  break;
 8008cb8:	e054      	b.n	8008d64 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8008cba:	7bbb      	ldrb	r3, [r7, #14]
 8008cbc:	f003 020f 	and.w	r2, r3, #15
 8008cc0:	6879      	ldr	r1, [r7, #4]
 8008cc2:	4613      	mov	r3, r2
 8008cc4:	009b      	lsls	r3, r3, #2
 8008cc6:	4413      	add	r3, r2
 8008cc8:	009b      	lsls	r3, r3, #2
 8008cca:	440b      	add	r3, r1
 8008ccc:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8008cd0:	881b      	ldrh	r3, [r3, #0]
 8008cd2:	2b00      	cmp	r3, #0
 8008cd4:	d104      	bne.n	8008ce0 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8008cd6:	6839      	ldr	r1, [r7, #0]
 8008cd8:	6878      	ldr	r0, [r7, #4]
 8008cda:	f000 fbad 	bl	8009438 <USBD_CtlError>
                  break;
 8008cde:	e041      	b.n	8008d64 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008ce0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008ce4:	2b00      	cmp	r3, #0
 8008ce6:	da0b      	bge.n	8008d00 <USBD_StdEPReq+0x23e>
 8008ce8:	7bbb      	ldrb	r3, [r7, #14]
 8008cea:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008cee:	4613      	mov	r3, r2
 8008cf0:	009b      	lsls	r3, r3, #2
 8008cf2:	4413      	add	r3, r2
 8008cf4:	009b      	lsls	r3, r3, #2
 8008cf6:	3310      	adds	r3, #16
 8008cf8:	687a      	ldr	r2, [r7, #4]
 8008cfa:	4413      	add	r3, r2
 8008cfc:	3304      	adds	r3, #4
 8008cfe:	e00b      	b.n	8008d18 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008d00:	7bbb      	ldrb	r3, [r7, #14]
 8008d02:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008d06:	4613      	mov	r3, r2
 8008d08:	009b      	lsls	r3, r3, #2
 8008d0a:	4413      	add	r3, r2
 8008d0c:	009b      	lsls	r3, r3, #2
 8008d0e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008d12:	687a      	ldr	r2, [r7, #4]
 8008d14:	4413      	add	r3, r2
 8008d16:	3304      	adds	r3, #4
 8008d18:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8008d1a:	7bbb      	ldrb	r3, [r7, #14]
 8008d1c:	2b00      	cmp	r3, #0
 8008d1e:	d002      	beq.n	8008d26 <USBD_StdEPReq+0x264>
 8008d20:	7bbb      	ldrb	r3, [r7, #14]
 8008d22:	2b80      	cmp	r3, #128	; 0x80
 8008d24:	d103      	bne.n	8008d2e <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 8008d26:	68bb      	ldr	r3, [r7, #8]
 8008d28:	2200      	movs	r2, #0
 8008d2a:	601a      	str	r2, [r3, #0]
 8008d2c:	e00e      	b.n	8008d4c <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8008d2e:	7bbb      	ldrb	r3, [r7, #14]
 8008d30:	4619      	mov	r1, r3
 8008d32:	6878      	ldr	r0, [r7, #4]
 8008d34:	f001 f87a 	bl	8009e2c <USBD_LL_IsStallEP>
 8008d38:	4603      	mov	r3, r0
 8008d3a:	2b00      	cmp	r3, #0
 8008d3c:	d003      	beq.n	8008d46 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 8008d3e:	68bb      	ldr	r3, [r7, #8]
 8008d40:	2201      	movs	r2, #1
 8008d42:	601a      	str	r2, [r3, #0]
 8008d44:	e002      	b.n	8008d4c <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 8008d46:	68bb      	ldr	r3, [r7, #8]
 8008d48:	2200      	movs	r2, #0
 8008d4a:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008d4c:	68bb      	ldr	r3, [r7, #8]
 8008d4e:	2202      	movs	r2, #2
 8008d50:	4619      	mov	r1, r3
 8008d52:	6878      	ldr	r0, [r7, #4]
 8008d54:	f000 fbe1 	bl	800951a <USBD_CtlSendData>
              break;
 8008d58:	e004      	b.n	8008d64 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 8008d5a:	6839      	ldr	r1, [r7, #0]
 8008d5c:	6878      	ldr	r0, [r7, #4]
 8008d5e:	f000 fb6b 	bl	8009438 <USBD_CtlError>
              break;
 8008d62:	bf00      	nop
          }
          break;
 8008d64:	e004      	b.n	8008d70 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 8008d66:	6839      	ldr	r1, [r7, #0]
 8008d68:	6878      	ldr	r0, [r7, #4]
 8008d6a:	f000 fb65 	bl	8009438 <USBD_CtlError>
          break;
 8008d6e:	bf00      	nop
      }
      break;
 8008d70:	e004      	b.n	8008d7c <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 8008d72:	6839      	ldr	r1, [r7, #0]
 8008d74:	6878      	ldr	r0, [r7, #4]
 8008d76:	f000 fb5f 	bl	8009438 <USBD_CtlError>
      break;
 8008d7a:	bf00      	nop
  }

  return ret;
 8008d7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d7e:	4618      	mov	r0, r3
 8008d80:	3710      	adds	r7, #16
 8008d82:	46bd      	mov	sp, r7
 8008d84:	bd80      	pop	{r7, pc}
	...

08008d88 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008d88:	b580      	push	{r7, lr}
 8008d8a:	b084      	sub	sp, #16
 8008d8c:	af00      	add	r7, sp, #0
 8008d8e:	6078      	str	r0, [r7, #4]
 8008d90:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008d92:	2300      	movs	r3, #0
 8008d94:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8008d96:	2300      	movs	r3, #0
 8008d98:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8008d9a:	2300      	movs	r3, #0
 8008d9c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8008d9e:	683b      	ldr	r3, [r7, #0]
 8008da0:	885b      	ldrh	r3, [r3, #2]
 8008da2:	0a1b      	lsrs	r3, r3, #8
 8008da4:	b29b      	uxth	r3, r3
 8008da6:	3b01      	subs	r3, #1
 8008da8:	2b0e      	cmp	r3, #14
 8008daa:	f200 8152 	bhi.w	8009052 <USBD_GetDescriptor+0x2ca>
 8008dae:	a201      	add	r2, pc, #4	; (adr r2, 8008db4 <USBD_GetDescriptor+0x2c>)
 8008db0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008db4:	08008e25 	.word	0x08008e25
 8008db8:	08008e3d 	.word	0x08008e3d
 8008dbc:	08008e7d 	.word	0x08008e7d
 8008dc0:	08009053 	.word	0x08009053
 8008dc4:	08009053 	.word	0x08009053
 8008dc8:	08008ff3 	.word	0x08008ff3
 8008dcc:	0800901f 	.word	0x0800901f
 8008dd0:	08009053 	.word	0x08009053
 8008dd4:	08009053 	.word	0x08009053
 8008dd8:	08009053 	.word	0x08009053
 8008ddc:	08009053 	.word	0x08009053
 8008de0:	08009053 	.word	0x08009053
 8008de4:	08009053 	.word	0x08009053
 8008de8:	08009053 	.word	0x08009053
 8008dec:	08008df1 	.word	0x08008df1
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008df6:	69db      	ldr	r3, [r3, #28]
 8008df8:	2b00      	cmp	r3, #0
 8008dfa:	d00b      	beq.n	8008e14 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008e02:	69db      	ldr	r3, [r3, #28]
 8008e04:	687a      	ldr	r2, [r7, #4]
 8008e06:	7c12      	ldrb	r2, [r2, #16]
 8008e08:	f107 0108 	add.w	r1, r7, #8
 8008e0c:	4610      	mov	r0, r2
 8008e0e:	4798      	blx	r3
 8008e10:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008e12:	e126      	b.n	8009062 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8008e14:	6839      	ldr	r1, [r7, #0]
 8008e16:	6878      	ldr	r0, [r7, #4]
 8008e18:	f000 fb0e 	bl	8009438 <USBD_CtlError>
        err++;
 8008e1c:	7afb      	ldrb	r3, [r7, #11]
 8008e1e:	3301      	adds	r3, #1
 8008e20:	72fb      	strb	r3, [r7, #11]
      break;
 8008e22:	e11e      	b.n	8009062 <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	687a      	ldr	r2, [r7, #4]
 8008e2e:	7c12      	ldrb	r2, [r2, #16]
 8008e30:	f107 0108 	add.w	r1, r7, #8
 8008e34:	4610      	mov	r0, r2
 8008e36:	4798      	blx	r3
 8008e38:	60f8      	str	r0, [r7, #12]
      break;
 8008e3a:	e112      	b.n	8009062 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	7c1b      	ldrb	r3, [r3, #16]
 8008e40:	2b00      	cmp	r3, #0
 8008e42:	d10d      	bne.n	8008e60 <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008e4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e4c:	f107 0208 	add.w	r2, r7, #8
 8008e50:	4610      	mov	r0, r2
 8008e52:	4798      	blx	r3
 8008e54:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008e56:	68fb      	ldr	r3, [r7, #12]
 8008e58:	3301      	adds	r3, #1
 8008e5a:	2202      	movs	r2, #2
 8008e5c:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8008e5e:	e100      	b.n	8009062 <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008e66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e68:	f107 0208 	add.w	r2, r7, #8
 8008e6c:	4610      	mov	r0, r2
 8008e6e:	4798      	blx	r3
 8008e70:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008e72:	68fb      	ldr	r3, [r7, #12]
 8008e74:	3301      	adds	r3, #1
 8008e76:	2202      	movs	r2, #2
 8008e78:	701a      	strb	r2, [r3, #0]
      break;
 8008e7a:	e0f2      	b.n	8009062 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8008e7c:	683b      	ldr	r3, [r7, #0]
 8008e7e:	885b      	ldrh	r3, [r3, #2]
 8008e80:	b2db      	uxtb	r3, r3
 8008e82:	2b05      	cmp	r3, #5
 8008e84:	f200 80ac 	bhi.w	8008fe0 <USBD_GetDescriptor+0x258>
 8008e88:	a201      	add	r2, pc, #4	; (adr r2, 8008e90 <USBD_GetDescriptor+0x108>)
 8008e8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e8e:	bf00      	nop
 8008e90:	08008ea9 	.word	0x08008ea9
 8008e94:	08008edd 	.word	0x08008edd
 8008e98:	08008f11 	.word	0x08008f11
 8008e9c:	08008f45 	.word	0x08008f45
 8008ea0:	08008f79 	.word	0x08008f79
 8008ea4:	08008fad 	.word	0x08008fad
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008eae:	685b      	ldr	r3, [r3, #4]
 8008eb0:	2b00      	cmp	r3, #0
 8008eb2:	d00b      	beq.n	8008ecc <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008eba:	685b      	ldr	r3, [r3, #4]
 8008ebc:	687a      	ldr	r2, [r7, #4]
 8008ebe:	7c12      	ldrb	r2, [r2, #16]
 8008ec0:	f107 0108 	add.w	r1, r7, #8
 8008ec4:	4610      	mov	r0, r2
 8008ec6:	4798      	blx	r3
 8008ec8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008eca:	e091      	b.n	8008ff0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008ecc:	6839      	ldr	r1, [r7, #0]
 8008ece:	6878      	ldr	r0, [r7, #4]
 8008ed0:	f000 fab2 	bl	8009438 <USBD_CtlError>
            err++;
 8008ed4:	7afb      	ldrb	r3, [r7, #11]
 8008ed6:	3301      	adds	r3, #1
 8008ed8:	72fb      	strb	r3, [r7, #11]
          break;
 8008eda:	e089      	b.n	8008ff0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008ee2:	689b      	ldr	r3, [r3, #8]
 8008ee4:	2b00      	cmp	r3, #0
 8008ee6:	d00b      	beq.n	8008f00 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008eee:	689b      	ldr	r3, [r3, #8]
 8008ef0:	687a      	ldr	r2, [r7, #4]
 8008ef2:	7c12      	ldrb	r2, [r2, #16]
 8008ef4:	f107 0108 	add.w	r1, r7, #8
 8008ef8:	4610      	mov	r0, r2
 8008efa:	4798      	blx	r3
 8008efc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008efe:	e077      	b.n	8008ff0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008f00:	6839      	ldr	r1, [r7, #0]
 8008f02:	6878      	ldr	r0, [r7, #4]
 8008f04:	f000 fa98 	bl	8009438 <USBD_CtlError>
            err++;
 8008f08:	7afb      	ldrb	r3, [r7, #11]
 8008f0a:	3301      	adds	r3, #1
 8008f0c:	72fb      	strb	r3, [r7, #11]
          break;
 8008f0e:	e06f      	b.n	8008ff0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008f16:	68db      	ldr	r3, [r3, #12]
 8008f18:	2b00      	cmp	r3, #0
 8008f1a:	d00b      	beq.n	8008f34 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008f22:	68db      	ldr	r3, [r3, #12]
 8008f24:	687a      	ldr	r2, [r7, #4]
 8008f26:	7c12      	ldrb	r2, [r2, #16]
 8008f28:	f107 0108 	add.w	r1, r7, #8
 8008f2c:	4610      	mov	r0, r2
 8008f2e:	4798      	blx	r3
 8008f30:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008f32:	e05d      	b.n	8008ff0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008f34:	6839      	ldr	r1, [r7, #0]
 8008f36:	6878      	ldr	r0, [r7, #4]
 8008f38:	f000 fa7e 	bl	8009438 <USBD_CtlError>
            err++;
 8008f3c:	7afb      	ldrb	r3, [r7, #11]
 8008f3e:	3301      	adds	r3, #1
 8008f40:	72fb      	strb	r3, [r7, #11]
          break;
 8008f42:	e055      	b.n	8008ff0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008f4a:	691b      	ldr	r3, [r3, #16]
 8008f4c:	2b00      	cmp	r3, #0
 8008f4e:	d00b      	beq.n	8008f68 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008f56:	691b      	ldr	r3, [r3, #16]
 8008f58:	687a      	ldr	r2, [r7, #4]
 8008f5a:	7c12      	ldrb	r2, [r2, #16]
 8008f5c:	f107 0108 	add.w	r1, r7, #8
 8008f60:	4610      	mov	r0, r2
 8008f62:	4798      	blx	r3
 8008f64:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008f66:	e043      	b.n	8008ff0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008f68:	6839      	ldr	r1, [r7, #0]
 8008f6a:	6878      	ldr	r0, [r7, #4]
 8008f6c:	f000 fa64 	bl	8009438 <USBD_CtlError>
            err++;
 8008f70:	7afb      	ldrb	r3, [r7, #11]
 8008f72:	3301      	adds	r3, #1
 8008f74:	72fb      	strb	r3, [r7, #11]
          break;
 8008f76:	e03b      	b.n	8008ff0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008f7e:	695b      	ldr	r3, [r3, #20]
 8008f80:	2b00      	cmp	r3, #0
 8008f82:	d00b      	beq.n	8008f9c <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008f8a:	695b      	ldr	r3, [r3, #20]
 8008f8c:	687a      	ldr	r2, [r7, #4]
 8008f8e:	7c12      	ldrb	r2, [r2, #16]
 8008f90:	f107 0108 	add.w	r1, r7, #8
 8008f94:	4610      	mov	r0, r2
 8008f96:	4798      	blx	r3
 8008f98:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008f9a:	e029      	b.n	8008ff0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008f9c:	6839      	ldr	r1, [r7, #0]
 8008f9e:	6878      	ldr	r0, [r7, #4]
 8008fa0:	f000 fa4a 	bl	8009438 <USBD_CtlError>
            err++;
 8008fa4:	7afb      	ldrb	r3, [r7, #11]
 8008fa6:	3301      	adds	r3, #1
 8008fa8:	72fb      	strb	r3, [r7, #11]
          break;
 8008faa:	e021      	b.n	8008ff0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008fb2:	699b      	ldr	r3, [r3, #24]
 8008fb4:	2b00      	cmp	r3, #0
 8008fb6:	d00b      	beq.n	8008fd0 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008fbe:	699b      	ldr	r3, [r3, #24]
 8008fc0:	687a      	ldr	r2, [r7, #4]
 8008fc2:	7c12      	ldrb	r2, [r2, #16]
 8008fc4:	f107 0108 	add.w	r1, r7, #8
 8008fc8:	4610      	mov	r0, r2
 8008fca:	4798      	blx	r3
 8008fcc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008fce:	e00f      	b.n	8008ff0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008fd0:	6839      	ldr	r1, [r7, #0]
 8008fd2:	6878      	ldr	r0, [r7, #4]
 8008fd4:	f000 fa30 	bl	8009438 <USBD_CtlError>
            err++;
 8008fd8:	7afb      	ldrb	r3, [r7, #11]
 8008fda:	3301      	adds	r3, #1
 8008fdc:	72fb      	strb	r3, [r7, #11]
          break;
 8008fde:	e007      	b.n	8008ff0 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8008fe0:	6839      	ldr	r1, [r7, #0]
 8008fe2:	6878      	ldr	r0, [r7, #4]
 8008fe4:	f000 fa28 	bl	8009438 <USBD_CtlError>
          err++;
 8008fe8:	7afb      	ldrb	r3, [r7, #11]
 8008fea:	3301      	adds	r3, #1
 8008fec:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 8008fee:	bf00      	nop
      }
      break;
 8008ff0:	e037      	b.n	8009062 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	7c1b      	ldrb	r3, [r3, #16]
 8008ff6:	2b00      	cmp	r3, #0
 8008ff8:	d109      	bne.n	800900e <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009000:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009002:	f107 0208 	add.w	r2, r7, #8
 8009006:	4610      	mov	r0, r2
 8009008:	4798      	blx	r3
 800900a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800900c:	e029      	b.n	8009062 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800900e:	6839      	ldr	r1, [r7, #0]
 8009010:	6878      	ldr	r0, [r7, #4]
 8009012:	f000 fa11 	bl	8009438 <USBD_CtlError>
        err++;
 8009016:	7afb      	ldrb	r3, [r7, #11]
 8009018:	3301      	adds	r3, #1
 800901a:	72fb      	strb	r3, [r7, #11]
      break;
 800901c:	e021      	b.n	8009062 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	7c1b      	ldrb	r3, [r3, #16]
 8009022:	2b00      	cmp	r3, #0
 8009024:	d10d      	bne.n	8009042 <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800902c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800902e:	f107 0208 	add.w	r2, r7, #8
 8009032:	4610      	mov	r0, r2
 8009034:	4798      	blx	r3
 8009036:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8009038:	68fb      	ldr	r3, [r7, #12]
 800903a:	3301      	adds	r3, #1
 800903c:	2207      	movs	r2, #7
 800903e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009040:	e00f      	b.n	8009062 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8009042:	6839      	ldr	r1, [r7, #0]
 8009044:	6878      	ldr	r0, [r7, #4]
 8009046:	f000 f9f7 	bl	8009438 <USBD_CtlError>
        err++;
 800904a:	7afb      	ldrb	r3, [r7, #11]
 800904c:	3301      	adds	r3, #1
 800904e:	72fb      	strb	r3, [r7, #11]
      break;
 8009050:	e007      	b.n	8009062 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 8009052:	6839      	ldr	r1, [r7, #0]
 8009054:	6878      	ldr	r0, [r7, #4]
 8009056:	f000 f9ef 	bl	8009438 <USBD_CtlError>
      err++;
 800905a:	7afb      	ldrb	r3, [r7, #11]
 800905c:	3301      	adds	r3, #1
 800905e:	72fb      	strb	r3, [r7, #11]
      break;
 8009060:	bf00      	nop
  }

  if (err != 0U)
 8009062:	7afb      	ldrb	r3, [r7, #11]
 8009064:	2b00      	cmp	r3, #0
 8009066:	d11e      	bne.n	80090a6 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 8009068:	683b      	ldr	r3, [r7, #0]
 800906a:	88db      	ldrh	r3, [r3, #6]
 800906c:	2b00      	cmp	r3, #0
 800906e:	d016      	beq.n	800909e <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 8009070:	893b      	ldrh	r3, [r7, #8]
 8009072:	2b00      	cmp	r3, #0
 8009074:	d00e      	beq.n	8009094 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 8009076:	683b      	ldr	r3, [r7, #0]
 8009078:	88da      	ldrh	r2, [r3, #6]
 800907a:	893b      	ldrh	r3, [r7, #8]
 800907c:	4293      	cmp	r3, r2
 800907e:	bf28      	it	cs
 8009080:	4613      	movcs	r3, r2
 8009082:	b29b      	uxth	r3, r3
 8009084:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8009086:	893b      	ldrh	r3, [r7, #8]
 8009088:	461a      	mov	r2, r3
 800908a:	68f9      	ldr	r1, [r7, #12]
 800908c:	6878      	ldr	r0, [r7, #4]
 800908e:	f000 fa44 	bl	800951a <USBD_CtlSendData>
 8009092:	e009      	b.n	80090a8 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8009094:	6839      	ldr	r1, [r7, #0]
 8009096:	6878      	ldr	r0, [r7, #4]
 8009098:	f000 f9ce 	bl	8009438 <USBD_CtlError>
 800909c:	e004      	b.n	80090a8 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800909e:	6878      	ldr	r0, [r7, #4]
 80090a0:	f000 fa95 	bl	80095ce <USBD_CtlSendStatus>
 80090a4:	e000      	b.n	80090a8 <USBD_GetDescriptor+0x320>
    return;
 80090a6:	bf00      	nop
  }
}
 80090a8:	3710      	adds	r7, #16
 80090aa:	46bd      	mov	sp, r7
 80090ac:	bd80      	pop	{r7, pc}
 80090ae:	bf00      	nop

080090b0 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80090b0:	b580      	push	{r7, lr}
 80090b2:	b084      	sub	sp, #16
 80090b4:	af00      	add	r7, sp, #0
 80090b6:	6078      	str	r0, [r7, #4]
 80090b8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80090ba:	683b      	ldr	r3, [r7, #0]
 80090bc:	889b      	ldrh	r3, [r3, #4]
 80090be:	2b00      	cmp	r3, #0
 80090c0:	d131      	bne.n	8009126 <USBD_SetAddress+0x76>
 80090c2:	683b      	ldr	r3, [r7, #0]
 80090c4:	88db      	ldrh	r3, [r3, #6]
 80090c6:	2b00      	cmp	r3, #0
 80090c8:	d12d      	bne.n	8009126 <USBD_SetAddress+0x76>
 80090ca:	683b      	ldr	r3, [r7, #0]
 80090cc:	885b      	ldrh	r3, [r3, #2]
 80090ce:	2b7f      	cmp	r3, #127	; 0x7f
 80090d0:	d829      	bhi.n	8009126 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80090d2:	683b      	ldr	r3, [r7, #0]
 80090d4:	885b      	ldrh	r3, [r3, #2]
 80090d6:	b2db      	uxtb	r3, r3
 80090d8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80090dc:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80090e4:	b2db      	uxtb	r3, r3
 80090e6:	2b03      	cmp	r3, #3
 80090e8:	d104      	bne.n	80090f4 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80090ea:	6839      	ldr	r1, [r7, #0]
 80090ec:	6878      	ldr	r0, [r7, #4]
 80090ee:	f000 f9a3 	bl	8009438 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80090f2:	e01d      	b.n	8009130 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	7bfa      	ldrb	r2, [r7, #15]
 80090f8:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80090fc:	7bfb      	ldrb	r3, [r7, #15]
 80090fe:	4619      	mov	r1, r3
 8009100:	6878      	ldr	r0, [r7, #4]
 8009102:	f000 fec0 	bl	8009e86 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8009106:	6878      	ldr	r0, [r7, #4]
 8009108:	f000 fa61 	bl	80095ce <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800910c:	7bfb      	ldrb	r3, [r7, #15]
 800910e:	2b00      	cmp	r3, #0
 8009110:	d004      	beq.n	800911c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	2202      	movs	r2, #2
 8009116:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800911a:	e009      	b.n	8009130 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	2201      	movs	r2, #1
 8009120:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009124:	e004      	b.n	8009130 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8009126:	6839      	ldr	r1, [r7, #0]
 8009128:	6878      	ldr	r0, [r7, #4]
 800912a:	f000 f985 	bl	8009438 <USBD_CtlError>
  }
}
 800912e:	bf00      	nop
 8009130:	bf00      	nop
 8009132:	3710      	adds	r7, #16
 8009134:	46bd      	mov	sp, r7
 8009136:	bd80      	pop	{r7, pc}

08009138 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009138:	b580      	push	{r7, lr}
 800913a:	b084      	sub	sp, #16
 800913c:	af00      	add	r7, sp, #0
 800913e:	6078      	str	r0, [r7, #4]
 8009140:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009142:	2300      	movs	r3, #0
 8009144:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8009146:	683b      	ldr	r3, [r7, #0]
 8009148:	885b      	ldrh	r3, [r3, #2]
 800914a:	b2da      	uxtb	r2, r3
 800914c:	4b4c      	ldr	r3, [pc, #304]	; (8009280 <USBD_SetConfig+0x148>)
 800914e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8009150:	4b4b      	ldr	r3, [pc, #300]	; (8009280 <USBD_SetConfig+0x148>)
 8009152:	781b      	ldrb	r3, [r3, #0]
 8009154:	2b01      	cmp	r3, #1
 8009156:	d905      	bls.n	8009164 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8009158:	6839      	ldr	r1, [r7, #0]
 800915a:	6878      	ldr	r0, [r7, #4]
 800915c:	f000 f96c 	bl	8009438 <USBD_CtlError>
    return USBD_FAIL;
 8009160:	2303      	movs	r3, #3
 8009162:	e088      	b.n	8009276 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800916a:	b2db      	uxtb	r3, r3
 800916c:	2b02      	cmp	r3, #2
 800916e:	d002      	beq.n	8009176 <USBD_SetConfig+0x3e>
 8009170:	2b03      	cmp	r3, #3
 8009172:	d025      	beq.n	80091c0 <USBD_SetConfig+0x88>
 8009174:	e071      	b.n	800925a <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8009176:	4b42      	ldr	r3, [pc, #264]	; (8009280 <USBD_SetConfig+0x148>)
 8009178:	781b      	ldrb	r3, [r3, #0]
 800917a:	2b00      	cmp	r3, #0
 800917c:	d01c      	beq.n	80091b8 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800917e:	4b40      	ldr	r3, [pc, #256]	; (8009280 <USBD_SetConfig+0x148>)
 8009180:	781b      	ldrb	r3, [r3, #0]
 8009182:	461a      	mov	r2, r3
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8009188:	4b3d      	ldr	r3, [pc, #244]	; (8009280 <USBD_SetConfig+0x148>)
 800918a:	781b      	ldrb	r3, [r3, #0]
 800918c:	4619      	mov	r1, r3
 800918e:	6878      	ldr	r0, [r7, #4]
 8009190:	f7ff f992 	bl	80084b8 <USBD_SetClassConfig>
 8009194:	4603      	mov	r3, r0
 8009196:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8009198:	7bfb      	ldrb	r3, [r7, #15]
 800919a:	2b00      	cmp	r3, #0
 800919c:	d004      	beq.n	80091a8 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800919e:	6839      	ldr	r1, [r7, #0]
 80091a0:	6878      	ldr	r0, [r7, #4]
 80091a2:	f000 f949 	bl	8009438 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80091a6:	e065      	b.n	8009274 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 80091a8:	6878      	ldr	r0, [r7, #4]
 80091aa:	f000 fa10 	bl	80095ce <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	2203      	movs	r2, #3
 80091b2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80091b6:	e05d      	b.n	8009274 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 80091b8:	6878      	ldr	r0, [r7, #4]
 80091ba:	f000 fa08 	bl	80095ce <USBD_CtlSendStatus>
      break;
 80091be:	e059      	b.n	8009274 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80091c0:	4b2f      	ldr	r3, [pc, #188]	; (8009280 <USBD_SetConfig+0x148>)
 80091c2:	781b      	ldrb	r3, [r3, #0]
 80091c4:	2b00      	cmp	r3, #0
 80091c6:	d112      	bne.n	80091ee <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	2202      	movs	r2, #2
 80091cc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 80091d0:	4b2b      	ldr	r3, [pc, #172]	; (8009280 <USBD_SetConfig+0x148>)
 80091d2:	781b      	ldrb	r3, [r3, #0]
 80091d4:	461a      	mov	r2, r3
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80091da:	4b29      	ldr	r3, [pc, #164]	; (8009280 <USBD_SetConfig+0x148>)
 80091dc:	781b      	ldrb	r3, [r3, #0]
 80091de:	4619      	mov	r1, r3
 80091e0:	6878      	ldr	r0, [r7, #4]
 80091e2:	f7ff f985 	bl	80084f0 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80091e6:	6878      	ldr	r0, [r7, #4]
 80091e8:	f000 f9f1 	bl	80095ce <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80091ec:	e042      	b.n	8009274 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 80091ee:	4b24      	ldr	r3, [pc, #144]	; (8009280 <USBD_SetConfig+0x148>)
 80091f0:	781b      	ldrb	r3, [r3, #0]
 80091f2:	461a      	mov	r2, r3
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	685b      	ldr	r3, [r3, #4]
 80091f8:	429a      	cmp	r2, r3
 80091fa:	d02a      	beq.n	8009252 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	685b      	ldr	r3, [r3, #4]
 8009200:	b2db      	uxtb	r3, r3
 8009202:	4619      	mov	r1, r3
 8009204:	6878      	ldr	r0, [r7, #4]
 8009206:	f7ff f973 	bl	80084f0 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800920a:	4b1d      	ldr	r3, [pc, #116]	; (8009280 <USBD_SetConfig+0x148>)
 800920c:	781b      	ldrb	r3, [r3, #0]
 800920e:	461a      	mov	r2, r3
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8009214:	4b1a      	ldr	r3, [pc, #104]	; (8009280 <USBD_SetConfig+0x148>)
 8009216:	781b      	ldrb	r3, [r3, #0]
 8009218:	4619      	mov	r1, r3
 800921a:	6878      	ldr	r0, [r7, #4]
 800921c:	f7ff f94c 	bl	80084b8 <USBD_SetClassConfig>
 8009220:	4603      	mov	r3, r0
 8009222:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8009224:	7bfb      	ldrb	r3, [r7, #15]
 8009226:	2b00      	cmp	r3, #0
 8009228:	d00f      	beq.n	800924a <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800922a:	6839      	ldr	r1, [r7, #0]
 800922c:	6878      	ldr	r0, [r7, #4]
 800922e:	f000 f903 	bl	8009438 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	685b      	ldr	r3, [r3, #4]
 8009236:	b2db      	uxtb	r3, r3
 8009238:	4619      	mov	r1, r3
 800923a:	6878      	ldr	r0, [r7, #4]
 800923c:	f7ff f958 	bl	80084f0 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	2202      	movs	r2, #2
 8009244:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8009248:	e014      	b.n	8009274 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800924a:	6878      	ldr	r0, [r7, #4]
 800924c:	f000 f9bf 	bl	80095ce <USBD_CtlSendStatus>
      break;
 8009250:	e010      	b.n	8009274 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8009252:	6878      	ldr	r0, [r7, #4]
 8009254:	f000 f9bb 	bl	80095ce <USBD_CtlSendStatus>
      break;
 8009258:	e00c      	b.n	8009274 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800925a:	6839      	ldr	r1, [r7, #0]
 800925c:	6878      	ldr	r0, [r7, #4]
 800925e:	f000 f8eb 	bl	8009438 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8009262:	4b07      	ldr	r3, [pc, #28]	; (8009280 <USBD_SetConfig+0x148>)
 8009264:	781b      	ldrb	r3, [r3, #0]
 8009266:	4619      	mov	r1, r3
 8009268:	6878      	ldr	r0, [r7, #4]
 800926a:	f7ff f941 	bl	80084f0 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800926e:	2303      	movs	r3, #3
 8009270:	73fb      	strb	r3, [r7, #15]
      break;
 8009272:	bf00      	nop
  }

  return ret;
 8009274:	7bfb      	ldrb	r3, [r7, #15]
}
 8009276:	4618      	mov	r0, r3
 8009278:	3710      	adds	r7, #16
 800927a:	46bd      	mov	sp, r7
 800927c:	bd80      	pop	{r7, pc}
 800927e:	bf00      	nop
 8009280:	200003c4 	.word	0x200003c4

08009284 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009284:	b580      	push	{r7, lr}
 8009286:	b082      	sub	sp, #8
 8009288:	af00      	add	r7, sp, #0
 800928a:	6078      	str	r0, [r7, #4]
 800928c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800928e:	683b      	ldr	r3, [r7, #0]
 8009290:	88db      	ldrh	r3, [r3, #6]
 8009292:	2b01      	cmp	r3, #1
 8009294:	d004      	beq.n	80092a0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8009296:	6839      	ldr	r1, [r7, #0]
 8009298:	6878      	ldr	r0, [r7, #4]
 800929a:	f000 f8cd 	bl	8009438 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800929e:	e023      	b.n	80092e8 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80092a6:	b2db      	uxtb	r3, r3
 80092a8:	2b02      	cmp	r3, #2
 80092aa:	dc02      	bgt.n	80092b2 <USBD_GetConfig+0x2e>
 80092ac:	2b00      	cmp	r3, #0
 80092ae:	dc03      	bgt.n	80092b8 <USBD_GetConfig+0x34>
 80092b0:	e015      	b.n	80092de <USBD_GetConfig+0x5a>
 80092b2:	2b03      	cmp	r3, #3
 80092b4:	d00b      	beq.n	80092ce <USBD_GetConfig+0x4a>
 80092b6:	e012      	b.n	80092de <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	2200      	movs	r2, #0
 80092bc:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	3308      	adds	r3, #8
 80092c2:	2201      	movs	r2, #1
 80092c4:	4619      	mov	r1, r3
 80092c6:	6878      	ldr	r0, [r7, #4]
 80092c8:	f000 f927 	bl	800951a <USBD_CtlSendData>
        break;
 80092cc:	e00c      	b.n	80092e8 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	3304      	adds	r3, #4
 80092d2:	2201      	movs	r2, #1
 80092d4:	4619      	mov	r1, r3
 80092d6:	6878      	ldr	r0, [r7, #4]
 80092d8:	f000 f91f 	bl	800951a <USBD_CtlSendData>
        break;
 80092dc:	e004      	b.n	80092e8 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 80092de:	6839      	ldr	r1, [r7, #0]
 80092e0:	6878      	ldr	r0, [r7, #4]
 80092e2:	f000 f8a9 	bl	8009438 <USBD_CtlError>
        break;
 80092e6:	bf00      	nop
}
 80092e8:	bf00      	nop
 80092ea:	3708      	adds	r7, #8
 80092ec:	46bd      	mov	sp, r7
 80092ee:	bd80      	pop	{r7, pc}

080092f0 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80092f0:	b580      	push	{r7, lr}
 80092f2:	b082      	sub	sp, #8
 80092f4:	af00      	add	r7, sp, #0
 80092f6:	6078      	str	r0, [r7, #4]
 80092f8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009300:	b2db      	uxtb	r3, r3
 8009302:	3b01      	subs	r3, #1
 8009304:	2b02      	cmp	r3, #2
 8009306:	d81e      	bhi.n	8009346 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8009308:	683b      	ldr	r3, [r7, #0]
 800930a:	88db      	ldrh	r3, [r3, #6]
 800930c:	2b02      	cmp	r3, #2
 800930e:	d004      	beq.n	800931a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8009310:	6839      	ldr	r1, [r7, #0]
 8009312:	6878      	ldr	r0, [r7, #4]
 8009314:	f000 f890 	bl	8009438 <USBD_CtlError>
        break;
 8009318:	e01a      	b.n	8009350 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
#else
      pdev->dev_config_status = 0U;
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	2200      	movs	r2, #0
 800931e:	60da      	str	r2, [r3, #12]
#endif

      if (pdev->dev_remote_wakeup != 0U)
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8009326:	2b00      	cmp	r3, #0
 8009328:	d005      	beq.n	8009336 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	68db      	ldr	r3, [r3, #12]
 800932e:	f043 0202 	orr.w	r2, r3, #2
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	330c      	adds	r3, #12
 800933a:	2202      	movs	r2, #2
 800933c:	4619      	mov	r1, r3
 800933e:	6878      	ldr	r0, [r7, #4]
 8009340:	f000 f8eb 	bl	800951a <USBD_CtlSendData>
      break;
 8009344:	e004      	b.n	8009350 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8009346:	6839      	ldr	r1, [r7, #0]
 8009348:	6878      	ldr	r0, [r7, #4]
 800934a:	f000 f875 	bl	8009438 <USBD_CtlError>
      break;
 800934e:	bf00      	nop
  }
}
 8009350:	bf00      	nop
 8009352:	3708      	adds	r7, #8
 8009354:	46bd      	mov	sp, r7
 8009356:	bd80      	pop	{r7, pc}

08009358 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009358:	b580      	push	{r7, lr}
 800935a:	b082      	sub	sp, #8
 800935c:	af00      	add	r7, sp, #0
 800935e:	6078      	str	r0, [r7, #4]
 8009360:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009362:	683b      	ldr	r3, [r7, #0]
 8009364:	885b      	ldrh	r3, [r3, #2]
 8009366:	2b01      	cmp	r3, #1
 8009368:	d106      	bne.n	8009378 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	2201      	movs	r2, #1
 800936e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8009372:	6878      	ldr	r0, [r7, #4]
 8009374:	f000 f92b 	bl	80095ce <USBD_CtlSendStatus>
  }
}
 8009378:	bf00      	nop
 800937a:	3708      	adds	r7, #8
 800937c:	46bd      	mov	sp, r7
 800937e:	bd80      	pop	{r7, pc}

08009380 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009380:	b580      	push	{r7, lr}
 8009382:	b082      	sub	sp, #8
 8009384:	af00      	add	r7, sp, #0
 8009386:	6078      	str	r0, [r7, #4]
 8009388:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009390:	b2db      	uxtb	r3, r3
 8009392:	3b01      	subs	r3, #1
 8009394:	2b02      	cmp	r3, #2
 8009396:	d80b      	bhi.n	80093b0 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009398:	683b      	ldr	r3, [r7, #0]
 800939a:	885b      	ldrh	r3, [r3, #2]
 800939c:	2b01      	cmp	r3, #1
 800939e:	d10c      	bne.n	80093ba <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	2200      	movs	r2, #0
 80093a4:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80093a8:	6878      	ldr	r0, [r7, #4]
 80093aa:	f000 f910 	bl	80095ce <USBD_CtlSendStatus>
      }
      break;
 80093ae:	e004      	b.n	80093ba <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 80093b0:	6839      	ldr	r1, [r7, #0]
 80093b2:	6878      	ldr	r0, [r7, #4]
 80093b4:	f000 f840 	bl	8009438 <USBD_CtlError>
      break;
 80093b8:	e000      	b.n	80093bc <USBD_ClrFeature+0x3c>
      break;
 80093ba:	bf00      	nop
  }
}
 80093bc:	bf00      	nop
 80093be:	3708      	adds	r7, #8
 80093c0:	46bd      	mov	sp, r7
 80093c2:	bd80      	pop	{r7, pc}

080093c4 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80093c4:	b580      	push	{r7, lr}
 80093c6:	b084      	sub	sp, #16
 80093c8:	af00      	add	r7, sp, #0
 80093ca:	6078      	str	r0, [r7, #4]
 80093cc:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80093ce:	683b      	ldr	r3, [r7, #0]
 80093d0:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80093d2:	68fb      	ldr	r3, [r7, #12]
 80093d4:	781a      	ldrb	r2, [r3, #0]
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80093da:	68fb      	ldr	r3, [r7, #12]
 80093dc:	3301      	adds	r3, #1
 80093de:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80093e0:	68fb      	ldr	r3, [r7, #12]
 80093e2:	781a      	ldrb	r2, [r3, #0]
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80093e8:	68fb      	ldr	r3, [r7, #12]
 80093ea:	3301      	adds	r3, #1
 80093ec:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80093ee:	68f8      	ldr	r0, [r7, #12]
 80093f0:	f7ff fa92 	bl	8008918 <SWAPBYTE>
 80093f4:	4603      	mov	r3, r0
 80093f6:	461a      	mov	r2, r3
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80093fc:	68fb      	ldr	r3, [r7, #12]
 80093fe:	3301      	adds	r3, #1
 8009400:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009402:	68fb      	ldr	r3, [r7, #12]
 8009404:	3301      	adds	r3, #1
 8009406:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8009408:	68f8      	ldr	r0, [r7, #12]
 800940a:	f7ff fa85 	bl	8008918 <SWAPBYTE>
 800940e:	4603      	mov	r3, r0
 8009410:	461a      	mov	r2, r3
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8009416:	68fb      	ldr	r3, [r7, #12]
 8009418:	3301      	adds	r3, #1
 800941a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800941c:	68fb      	ldr	r3, [r7, #12]
 800941e:	3301      	adds	r3, #1
 8009420:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8009422:	68f8      	ldr	r0, [r7, #12]
 8009424:	f7ff fa78 	bl	8008918 <SWAPBYTE>
 8009428:	4603      	mov	r3, r0
 800942a:	461a      	mov	r2, r3
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	80da      	strh	r2, [r3, #6]
}
 8009430:	bf00      	nop
 8009432:	3710      	adds	r7, #16
 8009434:	46bd      	mov	sp, r7
 8009436:	bd80      	pop	{r7, pc}

08009438 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009438:	b580      	push	{r7, lr}
 800943a:	b082      	sub	sp, #8
 800943c:	af00      	add	r7, sp, #0
 800943e:	6078      	str	r0, [r7, #4]
 8009440:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8009442:	2180      	movs	r1, #128	; 0x80
 8009444:	6878      	ldr	r0, [r7, #4]
 8009446:	f000 fcb3 	bl	8009db0 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800944a:	2100      	movs	r1, #0
 800944c:	6878      	ldr	r0, [r7, #4]
 800944e:	f000 fcaf 	bl	8009db0 <USBD_LL_StallEP>
}
 8009452:	bf00      	nop
 8009454:	3708      	adds	r7, #8
 8009456:	46bd      	mov	sp, r7
 8009458:	bd80      	pop	{r7, pc}

0800945a <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800945a:	b580      	push	{r7, lr}
 800945c:	b086      	sub	sp, #24
 800945e:	af00      	add	r7, sp, #0
 8009460:	60f8      	str	r0, [r7, #12]
 8009462:	60b9      	str	r1, [r7, #8]
 8009464:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8009466:	2300      	movs	r3, #0
 8009468:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800946a:	68fb      	ldr	r3, [r7, #12]
 800946c:	2b00      	cmp	r3, #0
 800946e:	d036      	beq.n	80094de <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8009470:	68fb      	ldr	r3, [r7, #12]
 8009472:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8009474:	6938      	ldr	r0, [r7, #16]
 8009476:	f000 f836 	bl	80094e6 <USBD_GetLen>
 800947a:	4603      	mov	r3, r0
 800947c:	3301      	adds	r3, #1
 800947e:	b29b      	uxth	r3, r3
 8009480:	005b      	lsls	r3, r3, #1
 8009482:	b29a      	uxth	r2, r3
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8009488:	7dfb      	ldrb	r3, [r7, #23]
 800948a:	68ba      	ldr	r2, [r7, #8]
 800948c:	4413      	add	r3, r2
 800948e:	687a      	ldr	r2, [r7, #4]
 8009490:	7812      	ldrb	r2, [r2, #0]
 8009492:	701a      	strb	r2, [r3, #0]
  idx++;
 8009494:	7dfb      	ldrb	r3, [r7, #23]
 8009496:	3301      	adds	r3, #1
 8009498:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800949a:	7dfb      	ldrb	r3, [r7, #23]
 800949c:	68ba      	ldr	r2, [r7, #8]
 800949e:	4413      	add	r3, r2
 80094a0:	2203      	movs	r2, #3
 80094a2:	701a      	strb	r2, [r3, #0]
  idx++;
 80094a4:	7dfb      	ldrb	r3, [r7, #23]
 80094a6:	3301      	adds	r3, #1
 80094a8:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80094aa:	e013      	b.n	80094d4 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 80094ac:	7dfb      	ldrb	r3, [r7, #23]
 80094ae:	68ba      	ldr	r2, [r7, #8]
 80094b0:	4413      	add	r3, r2
 80094b2:	693a      	ldr	r2, [r7, #16]
 80094b4:	7812      	ldrb	r2, [r2, #0]
 80094b6:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80094b8:	693b      	ldr	r3, [r7, #16]
 80094ba:	3301      	adds	r3, #1
 80094bc:	613b      	str	r3, [r7, #16]
    idx++;
 80094be:	7dfb      	ldrb	r3, [r7, #23]
 80094c0:	3301      	adds	r3, #1
 80094c2:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80094c4:	7dfb      	ldrb	r3, [r7, #23]
 80094c6:	68ba      	ldr	r2, [r7, #8]
 80094c8:	4413      	add	r3, r2
 80094ca:	2200      	movs	r2, #0
 80094cc:	701a      	strb	r2, [r3, #0]
    idx++;
 80094ce:	7dfb      	ldrb	r3, [r7, #23]
 80094d0:	3301      	adds	r3, #1
 80094d2:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80094d4:	693b      	ldr	r3, [r7, #16]
 80094d6:	781b      	ldrb	r3, [r3, #0]
 80094d8:	2b00      	cmp	r3, #0
 80094da:	d1e7      	bne.n	80094ac <USBD_GetString+0x52>
 80094dc:	e000      	b.n	80094e0 <USBD_GetString+0x86>
    return;
 80094de:	bf00      	nop
  }
}
 80094e0:	3718      	adds	r7, #24
 80094e2:	46bd      	mov	sp, r7
 80094e4:	bd80      	pop	{r7, pc}

080094e6 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80094e6:	b480      	push	{r7}
 80094e8:	b085      	sub	sp, #20
 80094ea:	af00      	add	r7, sp, #0
 80094ec:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80094ee:	2300      	movs	r3, #0
 80094f0:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80094f6:	e005      	b.n	8009504 <USBD_GetLen+0x1e>
  {
    len++;
 80094f8:	7bfb      	ldrb	r3, [r7, #15]
 80094fa:	3301      	adds	r3, #1
 80094fc:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80094fe:	68bb      	ldr	r3, [r7, #8]
 8009500:	3301      	adds	r3, #1
 8009502:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8009504:	68bb      	ldr	r3, [r7, #8]
 8009506:	781b      	ldrb	r3, [r3, #0]
 8009508:	2b00      	cmp	r3, #0
 800950a:	d1f5      	bne.n	80094f8 <USBD_GetLen+0x12>
  }

  return len;
 800950c:	7bfb      	ldrb	r3, [r7, #15]
}
 800950e:	4618      	mov	r0, r3
 8009510:	3714      	adds	r7, #20
 8009512:	46bd      	mov	sp, r7
 8009514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009518:	4770      	bx	lr

0800951a <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800951a:	b580      	push	{r7, lr}
 800951c:	b084      	sub	sp, #16
 800951e:	af00      	add	r7, sp, #0
 8009520:	60f8      	str	r0, [r7, #12]
 8009522:	60b9      	str	r1, [r7, #8]
 8009524:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8009526:	68fb      	ldr	r3, [r7, #12]
 8009528:	2202      	movs	r2, #2
 800952a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800952e:	68fb      	ldr	r3, [r7, #12]
 8009530:	687a      	ldr	r2, [r7, #4]
 8009532:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8009534:	68fb      	ldr	r3, [r7, #12]
 8009536:	687a      	ldr	r2, [r7, #4]
 8009538:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	68ba      	ldr	r2, [r7, #8]
 800953e:	2100      	movs	r1, #0
 8009540:	68f8      	ldr	r0, [r7, #12]
 8009542:	f000 fcbf 	bl	8009ec4 <USBD_LL_Transmit>

  return USBD_OK;
 8009546:	2300      	movs	r3, #0
}
 8009548:	4618      	mov	r0, r3
 800954a:	3710      	adds	r7, #16
 800954c:	46bd      	mov	sp, r7
 800954e:	bd80      	pop	{r7, pc}

08009550 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8009550:	b580      	push	{r7, lr}
 8009552:	b084      	sub	sp, #16
 8009554:	af00      	add	r7, sp, #0
 8009556:	60f8      	str	r0, [r7, #12]
 8009558:	60b9      	str	r1, [r7, #8]
 800955a:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	68ba      	ldr	r2, [r7, #8]
 8009560:	2100      	movs	r1, #0
 8009562:	68f8      	ldr	r0, [r7, #12]
 8009564:	f000 fcae 	bl	8009ec4 <USBD_LL_Transmit>

  return USBD_OK;
 8009568:	2300      	movs	r3, #0
}
 800956a:	4618      	mov	r0, r3
 800956c:	3710      	adds	r7, #16
 800956e:	46bd      	mov	sp, r7
 8009570:	bd80      	pop	{r7, pc}

08009572 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8009572:	b580      	push	{r7, lr}
 8009574:	b084      	sub	sp, #16
 8009576:	af00      	add	r7, sp, #0
 8009578:	60f8      	str	r0, [r7, #12]
 800957a:	60b9      	str	r1, [r7, #8]
 800957c:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800957e:	68fb      	ldr	r3, [r7, #12]
 8009580:	2203      	movs	r2, #3
 8009582:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8009586:	68fb      	ldr	r3, [r7, #12]
 8009588:	687a      	ldr	r2, [r7, #4]
 800958a:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800958e:	68fb      	ldr	r3, [r7, #12]
 8009590:	687a      	ldr	r2, [r7, #4]
 8009592:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	68ba      	ldr	r2, [r7, #8]
 800959a:	2100      	movs	r1, #0
 800959c:	68f8      	ldr	r0, [r7, #12]
 800959e:	f000 fcb2 	bl	8009f06 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80095a2:	2300      	movs	r3, #0
}
 80095a4:	4618      	mov	r0, r3
 80095a6:	3710      	adds	r7, #16
 80095a8:	46bd      	mov	sp, r7
 80095aa:	bd80      	pop	{r7, pc}

080095ac <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80095ac:	b580      	push	{r7, lr}
 80095ae:	b084      	sub	sp, #16
 80095b0:	af00      	add	r7, sp, #0
 80095b2:	60f8      	str	r0, [r7, #12]
 80095b4:	60b9      	str	r1, [r7, #8]
 80095b6:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	68ba      	ldr	r2, [r7, #8]
 80095bc:	2100      	movs	r1, #0
 80095be:	68f8      	ldr	r0, [r7, #12]
 80095c0:	f000 fca1 	bl	8009f06 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80095c4:	2300      	movs	r3, #0
}
 80095c6:	4618      	mov	r0, r3
 80095c8:	3710      	adds	r7, #16
 80095ca:	46bd      	mov	sp, r7
 80095cc:	bd80      	pop	{r7, pc}

080095ce <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80095ce:	b580      	push	{r7, lr}
 80095d0:	b082      	sub	sp, #8
 80095d2:	af00      	add	r7, sp, #0
 80095d4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	2204      	movs	r2, #4
 80095da:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80095de:	2300      	movs	r3, #0
 80095e0:	2200      	movs	r2, #0
 80095e2:	2100      	movs	r1, #0
 80095e4:	6878      	ldr	r0, [r7, #4]
 80095e6:	f000 fc6d 	bl	8009ec4 <USBD_LL_Transmit>

  return USBD_OK;
 80095ea:	2300      	movs	r3, #0
}
 80095ec:	4618      	mov	r0, r3
 80095ee:	3708      	adds	r7, #8
 80095f0:	46bd      	mov	sp, r7
 80095f2:	bd80      	pop	{r7, pc}

080095f4 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80095f4:	b580      	push	{r7, lr}
 80095f6:	b082      	sub	sp, #8
 80095f8:	af00      	add	r7, sp, #0
 80095fa:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	2205      	movs	r2, #5
 8009600:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009604:	2300      	movs	r3, #0
 8009606:	2200      	movs	r2, #0
 8009608:	2100      	movs	r1, #0
 800960a:	6878      	ldr	r0, [r7, #4]
 800960c:	f000 fc7b 	bl	8009f06 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009610:	2300      	movs	r3, #0
}
 8009612:	4618      	mov	r0, r3
 8009614:	3708      	adds	r7, #8
 8009616:	46bd      	mov	sp, r7
 8009618:	bd80      	pop	{r7, pc}
	...

0800961c <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 800961c:	b580      	push	{r7, lr}
 800961e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 8009620:	2200      	movs	r2, #0
 8009622:	4912      	ldr	r1, [pc, #72]	; (800966c <MX_USB_Device_Init+0x50>)
 8009624:	4812      	ldr	r0, [pc, #72]	; (8009670 <MX_USB_Device_Init+0x54>)
 8009626:	f7fe fed9 	bl	80083dc <USBD_Init>
 800962a:	4603      	mov	r3, r0
 800962c:	2b00      	cmp	r3, #0
 800962e:	d001      	beq.n	8009634 <MX_USB_Device_Init+0x18>
    Error_Handler();
 8009630:	f7f7 fade 	bl	8000bf0 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 8009634:	490f      	ldr	r1, [pc, #60]	; (8009674 <MX_USB_Device_Init+0x58>)
 8009636:	480e      	ldr	r0, [pc, #56]	; (8009670 <MX_USB_Device_Init+0x54>)
 8009638:	f7fe ff00 	bl	800843c <USBD_RegisterClass>
 800963c:	4603      	mov	r3, r0
 800963e:	2b00      	cmp	r3, #0
 8009640:	d001      	beq.n	8009646 <MX_USB_Device_Init+0x2a>
    Error_Handler();
 8009642:	f7f7 fad5 	bl	8000bf0 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 8009646:	490c      	ldr	r1, [pc, #48]	; (8009678 <MX_USB_Device_Init+0x5c>)
 8009648:	4809      	ldr	r0, [pc, #36]	; (8009670 <MX_USB_Device_Init+0x54>)
 800964a:	f7fe fe21 	bl	8008290 <USBD_CDC_RegisterInterface>
 800964e:	4603      	mov	r3, r0
 8009650:	2b00      	cmp	r3, #0
 8009652:	d001      	beq.n	8009658 <MX_USB_Device_Init+0x3c>
    Error_Handler();
 8009654:	f7f7 facc 	bl	8000bf0 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 8009658:	4805      	ldr	r0, [pc, #20]	; (8009670 <MX_USB_Device_Init+0x54>)
 800965a:	f7fe ff16 	bl	800848a <USBD_Start>
 800965e:	4603      	mov	r3, r0
 8009660:	2b00      	cmp	r3, #0
 8009662:	d001      	beq.n	8009668 <MX_USB_Device_Init+0x4c>
    Error_Handler();
 8009664:	f7f7 fac4 	bl	8000bf0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 8009668:	bf00      	nop
 800966a:	bd80      	pop	{r7, pc}
 800966c:	20000130 	.word	0x20000130
 8009670:	200003c8 	.word	0x200003c8
 8009674:	20000018 	.word	0x20000018
 8009678:	2000011c 	.word	0x2000011c

0800967c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800967c:	b580      	push	{r7, lr}
 800967e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8009680:	2200      	movs	r2, #0
 8009682:	4905      	ldr	r1, [pc, #20]	; (8009698 <CDC_Init_FS+0x1c>)
 8009684:	4805      	ldr	r0, [pc, #20]	; (800969c <CDC_Init_FS+0x20>)
 8009686:	f7fe fe18 	bl	80082ba <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800968a:	4905      	ldr	r1, [pc, #20]	; (80096a0 <CDC_Init_FS+0x24>)
 800968c:	4803      	ldr	r0, [pc, #12]	; (800969c <CDC_Init_FS+0x20>)
 800968e:	f7fe fe32 	bl	80082f6 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8009692:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8009694:	4618      	mov	r0, r3
 8009696:	bd80      	pop	{r7, pc}
 8009698:	20000718 	.word	0x20000718
 800969c:	200003c8 	.word	0x200003c8
 80096a0:	20000698 	.word	0x20000698

080096a4 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80096a4:	b480      	push	{r7}
 80096a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80096a8:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80096aa:	4618      	mov	r0, r3
 80096ac:	46bd      	mov	sp, r7
 80096ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096b2:	4770      	bx	lr

080096b4 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80096b4:	b480      	push	{r7}
 80096b6:	b083      	sub	sp, #12
 80096b8:	af00      	add	r7, sp, #0
 80096ba:	4603      	mov	r3, r0
 80096bc:	6039      	str	r1, [r7, #0]
 80096be:	71fb      	strb	r3, [r7, #7]
 80096c0:	4613      	mov	r3, r2
 80096c2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80096c4:	79fb      	ldrb	r3, [r7, #7]
 80096c6:	2b23      	cmp	r3, #35	; 0x23
 80096c8:	d84a      	bhi.n	8009760 <CDC_Control_FS+0xac>
 80096ca:	a201      	add	r2, pc, #4	; (adr r2, 80096d0 <CDC_Control_FS+0x1c>)
 80096cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80096d0:	08009761 	.word	0x08009761
 80096d4:	08009761 	.word	0x08009761
 80096d8:	08009761 	.word	0x08009761
 80096dc:	08009761 	.word	0x08009761
 80096e0:	08009761 	.word	0x08009761
 80096e4:	08009761 	.word	0x08009761
 80096e8:	08009761 	.word	0x08009761
 80096ec:	08009761 	.word	0x08009761
 80096f0:	08009761 	.word	0x08009761
 80096f4:	08009761 	.word	0x08009761
 80096f8:	08009761 	.word	0x08009761
 80096fc:	08009761 	.word	0x08009761
 8009700:	08009761 	.word	0x08009761
 8009704:	08009761 	.word	0x08009761
 8009708:	08009761 	.word	0x08009761
 800970c:	08009761 	.word	0x08009761
 8009710:	08009761 	.word	0x08009761
 8009714:	08009761 	.word	0x08009761
 8009718:	08009761 	.word	0x08009761
 800971c:	08009761 	.word	0x08009761
 8009720:	08009761 	.word	0x08009761
 8009724:	08009761 	.word	0x08009761
 8009728:	08009761 	.word	0x08009761
 800972c:	08009761 	.word	0x08009761
 8009730:	08009761 	.word	0x08009761
 8009734:	08009761 	.word	0x08009761
 8009738:	08009761 	.word	0x08009761
 800973c:	08009761 	.word	0x08009761
 8009740:	08009761 	.word	0x08009761
 8009744:	08009761 	.word	0x08009761
 8009748:	08009761 	.word	0x08009761
 800974c:	08009761 	.word	0x08009761
 8009750:	08009761 	.word	0x08009761
 8009754:	08009761 	.word	0x08009761
 8009758:	08009761 	.word	0x08009761
 800975c:	08009761 	.word	0x08009761
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8009760:	bf00      	nop
  }

  return (USBD_OK);
 8009762:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8009764:	4618      	mov	r0, r3
 8009766:	370c      	adds	r7, #12
 8009768:	46bd      	mov	sp, r7
 800976a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800976e:	4770      	bx	lr

08009770 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8009770:	b580      	push	{r7, lr}
 8009772:	b082      	sub	sp, #8
 8009774:	af00      	add	r7, sp, #0
 8009776:	6078      	str	r0, [r7, #4]
 8009778:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800977a:	6879      	ldr	r1, [r7, #4]
 800977c:	4812      	ldr	r0, [pc, #72]	; (80097c8 <CDC_Receive_FS+0x58>)
 800977e:	f7fe fdba 	bl	80082f6 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8009782:	4811      	ldr	r0, [pc, #68]	; (80097c8 <CDC_Receive_FS+0x58>)
 8009784:	f7fe fe00 	bl	8008388 <USBD_CDC_ReceivePacket>

  usb_rx_size = (uint16_t) *Len;
 8009788:	683b      	ldr	r3, [r7, #0]
 800978a:	681b      	ldr	r3, [r3, #0]
 800978c:	b29a      	uxth	r2, r3
 800978e:	4b0f      	ldr	r3, [pc, #60]	; (80097cc <CDC_Receive_FS+0x5c>)
 8009790:	801a      	strh	r2, [r3, #0]

  // clear the receive buffer
  memset(usb_rx_buffer, 0, USB_BUFFER_SIZE);
 8009792:	2280      	movs	r2, #128	; 0x80
 8009794:	2100      	movs	r1, #0
 8009796:	480e      	ldr	r0, [pc, #56]	; (80097d0 <CDC_Receive_FS+0x60>)
 8009798:	f000 fc9c 	bl	800a0d4 <memset>

  // copy the received data to the receive buffer
  memcpy(usb_rx_buffer, Buf, usb_rx_size);
 800979c:	4b0b      	ldr	r3, [pc, #44]	; (80097cc <CDC_Receive_FS+0x5c>)
 800979e:	881b      	ldrh	r3, [r3, #0]
 80097a0:	461a      	mov	r2, r3
 80097a2:	6879      	ldr	r1, [r7, #4]
 80097a4:	480a      	ldr	r0, [pc, #40]	; (80097d0 <CDC_Receive_FS+0x60>)
 80097a6:	f000 fc87 	bl	800a0b8 <memcpy>

  // clear the original buffer
  memset(Buf, 0, usb_rx_size);
 80097aa:	4b08      	ldr	r3, [pc, #32]	; (80097cc <CDC_Receive_FS+0x5c>)
 80097ac:	881b      	ldrh	r3, [r3, #0]
 80097ae:	461a      	mov	r2, r3
 80097b0:	2100      	movs	r1, #0
 80097b2:	6878      	ldr	r0, [r7, #4]
 80097b4:	f000 fc8e 	bl	800a0d4 <memset>

  APP_handleUSBMessage();
 80097b8:	f7f6 febc 	bl	8000534 <APP_handleUSBMessage>

  return (USBD_OK);
 80097bc:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80097be:	4618      	mov	r0, r3
 80097c0:	3708      	adds	r7, #8
 80097c2:	46bd      	mov	sp, r7
 80097c4:	bd80      	pop	{r7, pc}
 80097c6:	bf00      	nop
 80097c8:	200003c8 	.word	0x200003c8
 80097cc:	200001a0 	.word	0x200001a0
 80097d0:	200001a4 	.word	0x200001a4

080097d4 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 80097d4:	b580      	push	{r7, lr}
 80097d6:	b084      	sub	sp, #16
 80097d8:	af00      	add	r7, sp, #0
 80097da:	6078      	str	r0, [r7, #4]
 80097dc:	460b      	mov	r3, r1
 80097de:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 80097e0:	2300      	movs	r3, #0
 80097e2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 80097e4:	4b0d      	ldr	r3, [pc, #52]	; (800981c <CDC_Transmit_FS+0x48>)
 80097e6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80097ea:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 80097ec:	68bb      	ldr	r3, [r7, #8]
 80097ee:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80097f2:	2b00      	cmp	r3, #0
 80097f4:	d001      	beq.n	80097fa <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 80097f6:	2301      	movs	r3, #1
 80097f8:	e00b      	b.n	8009812 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 80097fa:	887b      	ldrh	r3, [r7, #2]
 80097fc:	461a      	mov	r2, r3
 80097fe:	6879      	ldr	r1, [r7, #4]
 8009800:	4806      	ldr	r0, [pc, #24]	; (800981c <CDC_Transmit_FS+0x48>)
 8009802:	f7fe fd5a 	bl	80082ba <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8009806:	4805      	ldr	r0, [pc, #20]	; (800981c <CDC_Transmit_FS+0x48>)
 8009808:	f7fe fd8e 	bl	8008328 <USBD_CDC_TransmitPacket>
 800980c:	4603      	mov	r3, r0
 800980e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8009810:	7bfb      	ldrb	r3, [r7, #15]
}
 8009812:	4618      	mov	r0, r3
 8009814:	3710      	adds	r7, #16
 8009816:	46bd      	mov	sp, r7
 8009818:	bd80      	pop	{r7, pc}
 800981a:	bf00      	nop
 800981c:	200003c8 	.word	0x200003c8

08009820 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8009820:	b480      	push	{r7}
 8009822:	b087      	sub	sp, #28
 8009824:	af00      	add	r7, sp, #0
 8009826:	60f8      	str	r0, [r7, #12]
 8009828:	60b9      	str	r1, [r7, #8]
 800982a:	4613      	mov	r3, r2
 800982c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800982e:	2300      	movs	r3, #0
 8009830:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8009832:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009836:	4618      	mov	r0, r3
 8009838:	371c      	adds	r7, #28
 800983a:	46bd      	mov	sp, r7
 800983c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009840:	4770      	bx	lr
	...

08009844 <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009844:	b480      	push	{r7}
 8009846:	b083      	sub	sp, #12
 8009848:	af00      	add	r7, sp, #0
 800984a:	4603      	mov	r3, r0
 800984c:	6039      	str	r1, [r7, #0]
 800984e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 8009850:	683b      	ldr	r3, [r7, #0]
 8009852:	2212      	movs	r2, #18
 8009854:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 8009856:	4b03      	ldr	r3, [pc, #12]	; (8009864 <USBD_CDC_DeviceDescriptor+0x20>)
}
 8009858:	4618      	mov	r0, r3
 800985a:	370c      	adds	r7, #12
 800985c:	46bd      	mov	sp, r7
 800985e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009862:	4770      	bx	lr
 8009864:	20000150 	.word	0x20000150

08009868 <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009868:	b480      	push	{r7}
 800986a:	b083      	sub	sp, #12
 800986c:	af00      	add	r7, sp, #0
 800986e:	4603      	mov	r3, r0
 8009870:	6039      	str	r1, [r7, #0]
 8009872:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8009874:	683b      	ldr	r3, [r7, #0]
 8009876:	2204      	movs	r2, #4
 8009878:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800987a:	4b03      	ldr	r3, [pc, #12]	; (8009888 <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 800987c:	4618      	mov	r0, r3
 800987e:	370c      	adds	r7, #12
 8009880:	46bd      	mov	sp, r7
 8009882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009886:	4770      	bx	lr
 8009888:	20000164 	.word	0x20000164

0800988c <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800988c:	b580      	push	{r7, lr}
 800988e:	b082      	sub	sp, #8
 8009890:	af00      	add	r7, sp, #0
 8009892:	4603      	mov	r3, r0
 8009894:	6039      	str	r1, [r7, #0]
 8009896:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009898:	79fb      	ldrb	r3, [r7, #7]
 800989a:	2b00      	cmp	r3, #0
 800989c:	d105      	bne.n	80098aa <USBD_CDC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800989e:	683a      	ldr	r2, [r7, #0]
 80098a0:	4907      	ldr	r1, [pc, #28]	; (80098c0 <USBD_CDC_ProductStrDescriptor+0x34>)
 80098a2:	4808      	ldr	r0, [pc, #32]	; (80098c4 <USBD_CDC_ProductStrDescriptor+0x38>)
 80098a4:	f7ff fdd9 	bl	800945a <USBD_GetString>
 80098a8:	e004      	b.n	80098b4 <USBD_CDC_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 80098aa:	683a      	ldr	r2, [r7, #0]
 80098ac:	4904      	ldr	r1, [pc, #16]	; (80098c0 <USBD_CDC_ProductStrDescriptor+0x34>)
 80098ae:	4805      	ldr	r0, [pc, #20]	; (80098c4 <USBD_CDC_ProductStrDescriptor+0x38>)
 80098b0:	f7ff fdd3 	bl	800945a <USBD_GetString>
  }
  return USBD_StrDesc;
 80098b4:	4b02      	ldr	r3, [pc, #8]	; (80098c0 <USBD_CDC_ProductStrDescriptor+0x34>)
}
 80098b6:	4618      	mov	r0, r3
 80098b8:	3708      	adds	r7, #8
 80098ba:	46bd      	mov	sp, r7
 80098bc:	bd80      	pop	{r7, pc}
 80098be:	bf00      	nop
 80098c0:	20000798 	.word	0x20000798
 80098c4:	0800a0fc 	.word	0x0800a0fc

080098c8 <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80098c8:	b580      	push	{r7, lr}
 80098ca:	b082      	sub	sp, #8
 80098cc:	af00      	add	r7, sp, #0
 80098ce:	4603      	mov	r3, r0
 80098d0:	6039      	str	r1, [r7, #0]
 80098d2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80098d4:	683a      	ldr	r2, [r7, #0]
 80098d6:	4904      	ldr	r1, [pc, #16]	; (80098e8 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 80098d8:	4804      	ldr	r0, [pc, #16]	; (80098ec <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 80098da:	f7ff fdbe 	bl	800945a <USBD_GetString>
  return USBD_StrDesc;
 80098de:	4b02      	ldr	r3, [pc, #8]	; (80098e8 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
}
 80098e0:	4618      	mov	r0, r3
 80098e2:	3708      	adds	r7, #8
 80098e4:	46bd      	mov	sp, r7
 80098e6:	bd80      	pop	{r7, pc}
 80098e8:	20000798 	.word	0x20000798
 80098ec:	0800a114 	.word	0x0800a114

080098f0 <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80098f0:	b580      	push	{r7, lr}
 80098f2:	b082      	sub	sp, #8
 80098f4:	af00      	add	r7, sp, #0
 80098f6:	4603      	mov	r3, r0
 80098f8:	6039      	str	r1, [r7, #0]
 80098fa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80098fc:	683b      	ldr	r3, [r7, #0]
 80098fe:	221a      	movs	r2, #26
 8009900:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8009902:	f000 f843 	bl	800998c <Get_SerialNum>

  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */

  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 8009906:	4b02      	ldr	r3, [pc, #8]	; (8009910 <USBD_CDC_SerialStrDescriptor+0x20>)
}
 8009908:	4618      	mov	r0, r3
 800990a:	3708      	adds	r7, #8
 800990c:	46bd      	mov	sp, r7
 800990e:	bd80      	pop	{r7, pc}
 8009910:	20000168 	.word	0x20000168

08009914 <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009914:	b580      	push	{r7, lr}
 8009916:	b082      	sub	sp, #8
 8009918:	af00      	add	r7, sp, #0
 800991a:	4603      	mov	r3, r0
 800991c:	6039      	str	r1, [r7, #0]
 800991e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8009920:	79fb      	ldrb	r3, [r7, #7]
 8009922:	2b00      	cmp	r3, #0
 8009924:	d105      	bne.n	8009932 <USBD_CDC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 8009926:	683a      	ldr	r2, [r7, #0]
 8009928:	4907      	ldr	r1, [pc, #28]	; (8009948 <USBD_CDC_ConfigStrDescriptor+0x34>)
 800992a:	4808      	ldr	r0, [pc, #32]	; (800994c <USBD_CDC_ConfigStrDescriptor+0x38>)
 800992c:	f7ff fd95 	bl	800945a <USBD_GetString>
 8009930:	e004      	b.n	800993c <USBD_CDC_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 8009932:	683a      	ldr	r2, [r7, #0]
 8009934:	4904      	ldr	r1, [pc, #16]	; (8009948 <USBD_CDC_ConfigStrDescriptor+0x34>)
 8009936:	4805      	ldr	r0, [pc, #20]	; (800994c <USBD_CDC_ConfigStrDescriptor+0x38>)
 8009938:	f7ff fd8f 	bl	800945a <USBD_GetString>
  }
  return USBD_StrDesc;
 800993c:	4b02      	ldr	r3, [pc, #8]	; (8009948 <USBD_CDC_ConfigStrDescriptor+0x34>)
}
 800993e:	4618      	mov	r0, r3
 8009940:	3708      	adds	r7, #8
 8009942:	46bd      	mov	sp, r7
 8009944:	bd80      	pop	{r7, pc}
 8009946:	bf00      	nop
 8009948:	20000798 	.word	0x20000798
 800994c:	0800a124 	.word	0x0800a124

08009950 <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009950:	b580      	push	{r7, lr}
 8009952:	b082      	sub	sp, #8
 8009954:	af00      	add	r7, sp, #0
 8009956:	4603      	mov	r3, r0
 8009958:	6039      	str	r1, [r7, #0]
 800995a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800995c:	79fb      	ldrb	r3, [r7, #7]
 800995e:	2b00      	cmp	r3, #0
 8009960:	d105      	bne.n	800996e <USBD_CDC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 8009962:	683a      	ldr	r2, [r7, #0]
 8009964:	4907      	ldr	r1, [pc, #28]	; (8009984 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 8009966:	4808      	ldr	r0, [pc, #32]	; (8009988 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 8009968:	f7ff fd77 	bl	800945a <USBD_GetString>
 800996c:	e004      	b.n	8009978 <USBD_CDC_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800996e:	683a      	ldr	r2, [r7, #0]
 8009970:	4904      	ldr	r1, [pc, #16]	; (8009984 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 8009972:	4805      	ldr	r0, [pc, #20]	; (8009988 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 8009974:	f7ff fd71 	bl	800945a <USBD_GetString>
  }
  return USBD_StrDesc;
 8009978:	4b02      	ldr	r3, [pc, #8]	; (8009984 <USBD_CDC_InterfaceStrDescriptor+0x34>)
}
 800997a:	4618      	mov	r0, r3
 800997c:	3708      	adds	r7, #8
 800997e:	46bd      	mov	sp, r7
 8009980:	bd80      	pop	{r7, pc}
 8009982:	bf00      	nop
 8009984:	20000798 	.word	0x20000798
 8009988:	0800a130 	.word	0x0800a130

0800998c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800998c:	b580      	push	{r7, lr}
 800998e:	b084      	sub	sp, #16
 8009990:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8009992:	4b0f      	ldr	r3, [pc, #60]	; (80099d0 <Get_SerialNum+0x44>)
 8009994:	681b      	ldr	r3, [r3, #0]
 8009996:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8009998:	4b0e      	ldr	r3, [pc, #56]	; (80099d4 <Get_SerialNum+0x48>)
 800999a:	681b      	ldr	r3, [r3, #0]
 800999c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800999e:	4b0e      	ldr	r3, [pc, #56]	; (80099d8 <Get_SerialNum+0x4c>)
 80099a0:	681b      	ldr	r3, [r3, #0]
 80099a2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80099a4:	68fa      	ldr	r2, [r7, #12]
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	4413      	add	r3, r2
 80099aa:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80099ac:	68fb      	ldr	r3, [r7, #12]
 80099ae:	2b00      	cmp	r3, #0
 80099b0:	d009      	beq.n	80099c6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80099b2:	2208      	movs	r2, #8
 80099b4:	4909      	ldr	r1, [pc, #36]	; (80099dc <Get_SerialNum+0x50>)
 80099b6:	68f8      	ldr	r0, [r7, #12]
 80099b8:	f000 f814 	bl	80099e4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80099bc:	2204      	movs	r2, #4
 80099be:	4908      	ldr	r1, [pc, #32]	; (80099e0 <Get_SerialNum+0x54>)
 80099c0:	68b8      	ldr	r0, [r7, #8]
 80099c2:	f000 f80f 	bl	80099e4 <IntToUnicode>
  }
}
 80099c6:	bf00      	nop
 80099c8:	3710      	adds	r7, #16
 80099ca:	46bd      	mov	sp, r7
 80099cc:	bd80      	pop	{r7, pc}
 80099ce:	bf00      	nop
 80099d0:	1fff7590 	.word	0x1fff7590
 80099d4:	1fff7594 	.word	0x1fff7594
 80099d8:	1fff7598 	.word	0x1fff7598
 80099dc:	2000016a 	.word	0x2000016a
 80099e0:	2000017a 	.word	0x2000017a

080099e4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80099e4:	b480      	push	{r7}
 80099e6:	b087      	sub	sp, #28
 80099e8:	af00      	add	r7, sp, #0
 80099ea:	60f8      	str	r0, [r7, #12]
 80099ec:	60b9      	str	r1, [r7, #8]
 80099ee:	4613      	mov	r3, r2
 80099f0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80099f2:	2300      	movs	r3, #0
 80099f4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80099f6:	2300      	movs	r3, #0
 80099f8:	75fb      	strb	r3, [r7, #23]
 80099fa:	e027      	b.n	8009a4c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80099fc:	68fb      	ldr	r3, [r7, #12]
 80099fe:	0f1b      	lsrs	r3, r3, #28
 8009a00:	2b09      	cmp	r3, #9
 8009a02:	d80b      	bhi.n	8009a1c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8009a04:	68fb      	ldr	r3, [r7, #12]
 8009a06:	0f1b      	lsrs	r3, r3, #28
 8009a08:	b2da      	uxtb	r2, r3
 8009a0a:	7dfb      	ldrb	r3, [r7, #23]
 8009a0c:	005b      	lsls	r3, r3, #1
 8009a0e:	4619      	mov	r1, r3
 8009a10:	68bb      	ldr	r3, [r7, #8]
 8009a12:	440b      	add	r3, r1
 8009a14:	3230      	adds	r2, #48	; 0x30
 8009a16:	b2d2      	uxtb	r2, r2
 8009a18:	701a      	strb	r2, [r3, #0]
 8009a1a:	e00a      	b.n	8009a32 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8009a1c:	68fb      	ldr	r3, [r7, #12]
 8009a1e:	0f1b      	lsrs	r3, r3, #28
 8009a20:	b2da      	uxtb	r2, r3
 8009a22:	7dfb      	ldrb	r3, [r7, #23]
 8009a24:	005b      	lsls	r3, r3, #1
 8009a26:	4619      	mov	r1, r3
 8009a28:	68bb      	ldr	r3, [r7, #8]
 8009a2a:	440b      	add	r3, r1
 8009a2c:	3237      	adds	r2, #55	; 0x37
 8009a2e:	b2d2      	uxtb	r2, r2
 8009a30:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8009a32:	68fb      	ldr	r3, [r7, #12]
 8009a34:	011b      	lsls	r3, r3, #4
 8009a36:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8009a38:	7dfb      	ldrb	r3, [r7, #23]
 8009a3a:	005b      	lsls	r3, r3, #1
 8009a3c:	3301      	adds	r3, #1
 8009a3e:	68ba      	ldr	r2, [r7, #8]
 8009a40:	4413      	add	r3, r2
 8009a42:	2200      	movs	r2, #0
 8009a44:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8009a46:	7dfb      	ldrb	r3, [r7, #23]
 8009a48:	3301      	adds	r3, #1
 8009a4a:	75fb      	strb	r3, [r7, #23]
 8009a4c:	7dfa      	ldrb	r2, [r7, #23]
 8009a4e:	79fb      	ldrb	r3, [r7, #7]
 8009a50:	429a      	cmp	r2, r3
 8009a52:	d3d3      	bcc.n	80099fc <IntToUnicode+0x18>
  }
}
 8009a54:	bf00      	nop
 8009a56:	bf00      	nop
 8009a58:	371c      	adds	r7, #28
 8009a5a:	46bd      	mov	sp, r7
 8009a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a60:	4770      	bx	lr
	...

08009a64 <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009a64:	b580      	push	{r7, lr}
 8009a66:	b094      	sub	sp, #80	; 0x50
 8009a68:	af00      	add	r7, sp, #0
 8009a6a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8009a6c:	f107 030c 	add.w	r3, r7, #12
 8009a70:	2244      	movs	r2, #68	; 0x44
 8009a72:	2100      	movs	r1, #0
 8009a74:	4618      	mov	r0, r3
 8009a76:	f000 fb2d 	bl	800a0d4 <memset>
  if(pcdHandle->Instance==USB)
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	681b      	ldr	r3, [r3, #0]
 8009a7e:	4a15      	ldr	r2, [pc, #84]	; (8009ad4 <HAL_PCD_MspInit+0x70>)
 8009a80:	4293      	cmp	r3, r2
 8009a82:	d123      	bne.n	8009acc <HAL_PCD_MspInit+0x68>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8009a84:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8009a88:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8009a8a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8009a8e:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8009a90:	f107 030c 	add.w	r3, r7, #12
 8009a94:	4618      	mov	r0, r3
 8009a96:	f7fa fee5 	bl	8004864 <HAL_RCCEx_PeriphCLKConfig>
 8009a9a:	4603      	mov	r3, r0
 8009a9c:	2b00      	cmp	r3, #0
 8009a9e:	d001      	beq.n	8009aa4 <HAL_PCD_MspInit+0x40>
    {
      Error_Handler();
 8009aa0:	f7f7 f8a6 	bl	8000bf0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8009aa4:	4b0c      	ldr	r3, [pc, #48]	; (8009ad8 <HAL_PCD_MspInit+0x74>)
 8009aa6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009aa8:	4a0b      	ldr	r2, [pc, #44]	; (8009ad8 <HAL_PCD_MspInit+0x74>)
 8009aaa:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8009aae:	6593      	str	r3, [r2, #88]	; 0x58
 8009ab0:	4b09      	ldr	r3, [pc, #36]	; (8009ad8 <HAL_PCD_MspInit+0x74>)
 8009ab2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009ab4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009ab8:	60bb      	str	r3, [r7, #8]
 8009aba:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 8009abc:	2200      	movs	r2, #0
 8009abe:	2100      	movs	r1, #0
 8009ac0:	2014      	movs	r0, #20
 8009ac2:	f7f7 fb62 	bl	800118a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 8009ac6:	2014      	movs	r0, #20
 8009ac8:	f7f7 fb79 	bl	80011be <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8009acc:	bf00      	nop
 8009ace:	3750      	adds	r7, #80	; 0x50
 8009ad0:	46bd      	mov	sp, r7
 8009ad2:	bd80      	pop	{r7, pc}
 8009ad4:	40005c00 	.word	0x40005c00
 8009ad8:	40021000 	.word	0x40021000

08009adc <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009adc:	b580      	push	{r7, lr}
 8009ade:	b082      	sub	sp, #8
 8009ae0:	af00      	add	r7, sp, #0
 8009ae2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	f8d3 22f0 	ldr.w	r2, [r3, #752]	; 0x2f0
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8009af0:	4619      	mov	r1, r3
 8009af2:	4610      	mov	r0, r2
 8009af4:	f7fe fd14 	bl	8008520 <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 8009af8:	bf00      	nop
 8009afa:	3708      	adds	r7, #8
 8009afc:	46bd      	mov	sp, r7
 8009afe:	bd80      	pop	{r7, pc}

08009b00 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009b00:	b580      	push	{r7, lr}
 8009b02:	b082      	sub	sp, #8
 8009b04:	af00      	add	r7, sp, #0
 8009b06:	6078      	str	r0, [r7, #4]
 8009b08:	460b      	mov	r3, r1
 8009b0a:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	f8d3 02f0 	ldr.w	r0, [r3, #752]	; 0x2f0
 8009b12:	78fa      	ldrb	r2, [r7, #3]
 8009b14:	6879      	ldr	r1, [r7, #4]
 8009b16:	4613      	mov	r3, r2
 8009b18:	009b      	lsls	r3, r3, #2
 8009b1a:	4413      	add	r3, r2
 8009b1c:	00db      	lsls	r3, r3, #3
 8009b1e:	440b      	add	r3, r1
 8009b20:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8009b24:	681a      	ldr	r2, [r3, #0]
 8009b26:	78fb      	ldrb	r3, [r7, #3]
 8009b28:	4619      	mov	r1, r3
 8009b2a:	f7fe fd4e 	bl	80085ca <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 8009b2e:	bf00      	nop
 8009b30:	3708      	adds	r7, #8
 8009b32:	46bd      	mov	sp, r7
 8009b34:	bd80      	pop	{r7, pc}

08009b36 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009b36:	b580      	push	{r7, lr}
 8009b38:	b082      	sub	sp, #8
 8009b3a:	af00      	add	r7, sp, #0
 8009b3c:	6078      	str	r0, [r7, #4]
 8009b3e:	460b      	mov	r3, r1
 8009b40:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	f8d3 02f0 	ldr.w	r0, [r3, #752]	; 0x2f0
 8009b48:	78fa      	ldrb	r2, [r7, #3]
 8009b4a:	6879      	ldr	r1, [r7, #4]
 8009b4c:	4613      	mov	r3, r2
 8009b4e:	009b      	lsls	r3, r3, #2
 8009b50:	4413      	add	r3, r2
 8009b52:	00db      	lsls	r3, r3, #3
 8009b54:	440b      	add	r3, r1
 8009b56:	333c      	adds	r3, #60	; 0x3c
 8009b58:	681a      	ldr	r2, [r3, #0]
 8009b5a:	78fb      	ldrb	r3, [r7, #3]
 8009b5c:	4619      	mov	r1, r3
 8009b5e:	f7fe fd97 	bl	8008690 <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 8009b62:	bf00      	nop
 8009b64:	3708      	adds	r7, #8
 8009b66:	46bd      	mov	sp, r7
 8009b68:	bd80      	pop	{r7, pc}

08009b6a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009b6a:	b580      	push	{r7, lr}
 8009b6c:	b082      	sub	sp, #8
 8009b6e:	af00      	add	r7, sp, #0
 8009b70:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8009b78:	4618      	mov	r0, r3
 8009b7a:	f7fe feab 	bl	80088d4 <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 8009b7e:	bf00      	nop
 8009b80:	3708      	adds	r7, #8
 8009b82:	46bd      	mov	sp, r7
 8009b84:	bd80      	pop	{r7, pc}

08009b86 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009b86:	b580      	push	{r7, lr}
 8009b88:	b084      	sub	sp, #16
 8009b8a:	af00      	add	r7, sp, #0
 8009b8c:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8009b8e:	2301      	movs	r3, #1
 8009b90:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	689b      	ldr	r3, [r3, #8]
 8009b96:	2b02      	cmp	r3, #2
 8009b98:	d001      	beq.n	8009b9e <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8009b9a:	f7f7 f829 	bl	8000bf0 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8009ba4:	7bfa      	ldrb	r2, [r7, #15]
 8009ba6:	4611      	mov	r1, r2
 8009ba8:	4618      	mov	r0, r3
 8009baa:	f7fe fe55 	bl	8008858 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8009bb4:	4618      	mov	r0, r3
 8009bb6:	f7fe fe01 	bl	80087bc <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 8009bba:	bf00      	nop
 8009bbc:	3710      	adds	r7, #16
 8009bbe:	46bd      	mov	sp, r7
 8009bc0:	bd80      	pop	{r7, pc}
	...

08009bc4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009bc4:	b580      	push	{r7, lr}
 8009bc6:	b082      	sub	sp, #8
 8009bc8:	af00      	add	r7, sp, #0
 8009bca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8009bd2:	4618      	mov	r0, r3
 8009bd4:	f7fe fe50 	bl	8008878 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	699b      	ldr	r3, [r3, #24]
 8009bdc:	2b00      	cmp	r3, #0
 8009bde:	d005      	beq.n	8009bec <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009be0:	4b04      	ldr	r3, [pc, #16]	; (8009bf4 <HAL_PCD_SuspendCallback+0x30>)
 8009be2:	691b      	ldr	r3, [r3, #16]
 8009be4:	4a03      	ldr	r2, [pc, #12]	; (8009bf4 <HAL_PCD_SuspendCallback+0x30>)
 8009be6:	f043 0306 	orr.w	r3, r3, #6
 8009bea:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 8009bec:	bf00      	nop
 8009bee:	3708      	adds	r7, #8
 8009bf0:	46bd      	mov	sp, r7
 8009bf2:	bd80      	pop	{r7, pc}
 8009bf4:	e000ed00 	.word	0xe000ed00

08009bf8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009bf8:	b580      	push	{r7, lr}
 8009bfa:	b082      	sub	sp, #8
 8009bfc:	af00      	add	r7, sp, #0
 8009bfe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	699b      	ldr	r3, [r3, #24]
 8009c04:	2b00      	cmp	r3, #0
 8009c06:	d007      	beq.n	8009c18 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009c08:	4b08      	ldr	r3, [pc, #32]	; (8009c2c <HAL_PCD_ResumeCallback+0x34>)
 8009c0a:	691b      	ldr	r3, [r3, #16]
 8009c0c:	4a07      	ldr	r2, [pc, #28]	; (8009c2c <HAL_PCD_ResumeCallback+0x34>)
 8009c0e:	f023 0306 	bic.w	r3, r3, #6
 8009c12:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 8009c14:	f000 f9fa 	bl	800a00c <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8009c1e:	4618      	mov	r0, r3
 8009c20:	f7fe fe40 	bl	80088a4 <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 8009c24:	bf00      	nop
 8009c26:	3708      	adds	r7, #8
 8009c28:	46bd      	mov	sp, r7
 8009c2a:	bd80      	pop	{r7, pc}
 8009c2c:	e000ed00 	.word	0xe000ed00

08009c30 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8009c30:	b580      	push	{r7, lr}
 8009c32:	b082      	sub	sp, #8
 8009c34:	af00      	add	r7, sp, #0
 8009c36:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 8009c38:	4a2b      	ldr	r2, [pc, #172]	; (8009ce8 <USBD_LL_Init+0xb8>)
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	f8c2 32f0 	str.w	r3, [r2, #752]	; 0x2f0
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	4a29      	ldr	r2, [pc, #164]	; (8009ce8 <USBD_LL_Init+0xb8>)
 8009c44:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_FS.Instance = USB;
 8009c48:	4b27      	ldr	r3, [pc, #156]	; (8009ce8 <USBD_LL_Init+0xb8>)
 8009c4a:	4a28      	ldr	r2, [pc, #160]	; (8009cec <USBD_LL_Init+0xbc>)
 8009c4c:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8009c4e:	4b26      	ldr	r3, [pc, #152]	; (8009ce8 <USBD_LL_Init+0xb8>)
 8009c50:	2208      	movs	r2, #8
 8009c52:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8009c54:	4b24      	ldr	r3, [pc, #144]	; (8009ce8 <USBD_LL_Init+0xb8>)
 8009c56:	2202      	movs	r2, #2
 8009c58:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8009c5a:	4b23      	ldr	r3, [pc, #140]	; (8009ce8 <USBD_LL_Init+0xb8>)
 8009c5c:	2202      	movs	r2, #2
 8009c5e:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8009c60:	4b21      	ldr	r3, [pc, #132]	; (8009ce8 <USBD_LL_Init+0xb8>)
 8009c62:	2200      	movs	r2, #0
 8009c64:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8009c66:	4b20      	ldr	r3, [pc, #128]	; (8009ce8 <USBD_LL_Init+0xb8>)
 8009c68:	2200      	movs	r2, #0
 8009c6a:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8009c6c:	4b1e      	ldr	r3, [pc, #120]	; (8009ce8 <USBD_LL_Init+0xb8>)
 8009c6e:	2200      	movs	r2, #0
 8009c70:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8009c72:	4b1d      	ldr	r3, [pc, #116]	; (8009ce8 <USBD_LL_Init+0xb8>)
 8009c74:	2200      	movs	r2, #0
 8009c76:	621a      	str	r2, [r3, #32]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8009c78:	481b      	ldr	r0, [pc, #108]	; (8009ce8 <USBD_LL_Init+0xb8>)
 8009c7a:	f7f8 fae7 	bl	800224c <HAL_PCD_Init>
 8009c7e:	4603      	mov	r3, r0
 8009c80:	2b00      	cmp	r3, #0
 8009c82:	d001      	beq.n	8009c88 <USBD_LL_Init+0x58>
  {
    Error_Handler( );
 8009c84:	f7f6 ffb4 	bl	8000bf0 <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8009c8e:	2318      	movs	r3, #24
 8009c90:	2200      	movs	r2, #0
 8009c92:	2100      	movs	r1, #0
 8009c94:	f7f9 ffa0 	bl	8003bd8 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8009c9e:	2358      	movs	r3, #88	; 0x58
 8009ca0:	2200      	movs	r2, #0
 8009ca2:	2180      	movs	r1, #128	; 0x80
 8009ca4:	f7f9 ff98 	bl	8003bd8 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8009cae:	23c0      	movs	r3, #192	; 0xc0
 8009cb0:	2200      	movs	r2, #0
 8009cb2:	2181      	movs	r1, #129	; 0x81
 8009cb4:	f7f9 ff90 	bl	8003bd8 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8009cbe:	f44f 7388 	mov.w	r3, #272	; 0x110
 8009cc2:	2200      	movs	r2, #0
 8009cc4:	2101      	movs	r1, #1
 8009cc6:	f7f9 ff87 	bl	8003bd8 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8009cd0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009cd4:	2200      	movs	r2, #0
 8009cd6:	2182      	movs	r1, #130	; 0x82
 8009cd8:	f7f9 ff7e 	bl	8003bd8 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8009cdc:	2300      	movs	r3, #0
}
 8009cde:	4618      	mov	r0, r3
 8009ce0:	3708      	adds	r7, #8
 8009ce2:	46bd      	mov	sp, r7
 8009ce4:	bd80      	pop	{r7, pc}
 8009ce6:	bf00      	nop
 8009ce8:	20000998 	.word	0x20000998
 8009cec:	40005c00 	.word	0x40005c00

08009cf0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8009cf0:	b580      	push	{r7, lr}
 8009cf2:	b084      	sub	sp, #16
 8009cf4:	af00      	add	r7, sp, #0
 8009cf6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009cf8:	2300      	movs	r3, #0
 8009cfa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009cfc:	2300      	movs	r3, #0
 8009cfe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009d06:	4618      	mov	r0, r3
 8009d08:	f7f8 fb85 	bl	8002416 <HAL_PCD_Start>
 8009d0c:	4603      	mov	r3, r0
 8009d0e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009d10:	7bfb      	ldrb	r3, [r7, #15]
 8009d12:	4618      	mov	r0, r3
 8009d14:	f000 f980 	bl	800a018 <USBD_Get_USB_Status>
 8009d18:	4603      	mov	r3, r0
 8009d1a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009d1c:	7bbb      	ldrb	r3, [r7, #14]
}
 8009d1e:	4618      	mov	r0, r3
 8009d20:	3710      	adds	r7, #16
 8009d22:	46bd      	mov	sp, r7
 8009d24:	bd80      	pop	{r7, pc}

08009d26 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8009d26:	b580      	push	{r7, lr}
 8009d28:	b084      	sub	sp, #16
 8009d2a:	af00      	add	r7, sp, #0
 8009d2c:	6078      	str	r0, [r7, #4]
 8009d2e:	4608      	mov	r0, r1
 8009d30:	4611      	mov	r1, r2
 8009d32:	461a      	mov	r2, r3
 8009d34:	4603      	mov	r3, r0
 8009d36:	70fb      	strb	r3, [r7, #3]
 8009d38:	460b      	mov	r3, r1
 8009d3a:	70bb      	strb	r3, [r7, #2]
 8009d3c:	4613      	mov	r3, r2
 8009d3e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009d40:	2300      	movs	r3, #0
 8009d42:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009d44:	2300      	movs	r3, #0
 8009d46:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8009d4e:	78bb      	ldrb	r3, [r7, #2]
 8009d50:	883a      	ldrh	r2, [r7, #0]
 8009d52:	78f9      	ldrb	r1, [r7, #3]
 8009d54:	f7f8 fccd 	bl	80026f2 <HAL_PCD_EP_Open>
 8009d58:	4603      	mov	r3, r0
 8009d5a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009d5c:	7bfb      	ldrb	r3, [r7, #15]
 8009d5e:	4618      	mov	r0, r3
 8009d60:	f000 f95a 	bl	800a018 <USBD_Get_USB_Status>
 8009d64:	4603      	mov	r3, r0
 8009d66:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009d68:	7bbb      	ldrb	r3, [r7, #14]
}
 8009d6a:	4618      	mov	r0, r3
 8009d6c:	3710      	adds	r7, #16
 8009d6e:	46bd      	mov	sp, r7
 8009d70:	bd80      	pop	{r7, pc}

08009d72 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009d72:	b580      	push	{r7, lr}
 8009d74:	b084      	sub	sp, #16
 8009d76:	af00      	add	r7, sp, #0
 8009d78:	6078      	str	r0, [r7, #4]
 8009d7a:	460b      	mov	r3, r1
 8009d7c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009d7e:	2300      	movs	r3, #0
 8009d80:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009d82:	2300      	movs	r3, #0
 8009d84:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009d8c:	78fa      	ldrb	r2, [r7, #3]
 8009d8e:	4611      	mov	r1, r2
 8009d90:	4618      	mov	r0, r3
 8009d92:	f7f8 fd14 	bl	80027be <HAL_PCD_EP_Close>
 8009d96:	4603      	mov	r3, r0
 8009d98:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009d9a:	7bfb      	ldrb	r3, [r7, #15]
 8009d9c:	4618      	mov	r0, r3
 8009d9e:	f000 f93b 	bl	800a018 <USBD_Get_USB_Status>
 8009da2:	4603      	mov	r3, r0
 8009da4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009da6:	7bbb      	ldrb	r3, [r7, #14]
}
 8009da8:	4618      	mov	r0, r3
 8009daa:	3710      	adds	r7, #16
 8009dac:	46bd      	mov	sp, r7
 8009dae:	bd80      	pop	{r7, pc}

08009db0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009db0:	b580      	push	{r7, lr}
 8009db2:	b084      	sub	sp, #16
 8009db4:	af00      	add	r7, sp, #0
 8009db6:	6078      	str	r0, [r7, #4]
 8009db8:	460b      	mov	r3, r1
 8009dba:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009dbc:	2300      	movs	r3, #0
 8009dbe:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009dc0:	2300      	movs	r3, #0
 8009dc2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009dca:	78fa      	ldrb	r2, [r7, #3]
 8009dcc:	4611      	mov	r1, r2
 8009dce:	4618      	mov	r0, r3
 8009dd0:	f7f8 fdd5 	bl	800297e <HAL_PCD_EP_SetStall>
 8009dd4:	4603      	mov	r3, r0
 8009dd6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009dd8:	7bfb      	ldrb	r3, [r7, #15]
 8009dda:	4618      	mov	r0, r3
 8009ddc:	f000 f91c 	bl	800a018 <USBD_Get_USB_Status>
 8009de0:	4603      	mov	r3, r0
 8009de2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009de4:	7bbb      	ldrb	r3, [r7, #14]
}
 8009de6:	4618      	mov	r0, r3
 8009de8:	3710      	adds	r7, #16
 8009dea:	46bd      	mov	sp, r7
 8009dec:	bd80      	pop	{r7, pc}

08009dee <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009dee:	b580      	push	{r7, lr}
 8009df0:	b084      	sub	sp, #16
 8009df2:	af00      	add	r7, sp, #0
 8009df4:	6078      	str	r0, [r7, #4]
 8009df6:	460b      	mov	r3, r1
 8009df8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009dfa:	2300      	movs	r3, #0
 8009dfc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009dfe:	2300      	movs	r3, #0
 8009e00:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009e08:	78fa      	ldrb	r2, [r7, #3]
 8009e0a:	4611      	mov	r1, r2
 8009e0c:	4618      	mov	r0, r3
 8009e0e:	f7f8 fe08 	bl	8002a22 <HAL_PCD_EP_ClrStall>
 8009e12:	4603      	mov	r3, r0
 8009e14:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009e16:	7bfb      	ldrb	r3, [r7, #15]
 8009e18:	4618      	mov	r0, r3
 8009e1a:	f000 f8fd 	bl	800a018 <USBD_Get_USB_Status>
 8009e1e:	4603      	mov	r3, r0
 8009e20:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009e22:	7bbb      	ldrb	r3, [r7, #14]
}
 8009e24:	4618      	mov	r0, r3
 8009e26:	3710      	adds	r7, #16
 8009e28:	46bd      	mov	sp, r7
 8009e2a:	bd80      	pop	{r7, pc}

08009e2c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009e2c:	b480      	push	{r7}
 8009e2e:	b085      	sub	sp, #20
 8009e30:	af00      	add	r7, sp, #0
 8009e32:	6078      	str	r0, [r7, #4]
 8009e34:	460b      	mov	r3, r1
 8009e36:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009e3e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8009e40:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009e44:	2b00      	cmp	r3, #0
 8009e46:	da0c      	bge.n	8009e62 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8009e48:	78fb      	ldrb	r3, [r7, #3]
 8009e4a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009e4e:	68f9      	ldr	r1, [r7, #12]
 8009e50:	1c5a      	adds	r2, r3, #1
 8009e52:	4613      	mov	r3, r2
 8009e54:	009b      	lsls	r3, r3, #2
 8009e56:	4413      	add	r3, r2
 8009e58:	00db      	lsls	r3, r3, #3
 8009e5a:	440b      	add	r3, r1
 8009e5c:	3302      	adds	r3, #2
 8009e5e:	781b      	ldrb	r3, [r3, #0]
 8009e60:	e00b      	b.n	8009e7a <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8009e62:	78fb      	ldrb	r3, [r7, #3]
 8009e64:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009e68:	68f9      	ldr	r1, [r7, #12]
 8009e6a:	4613      	mov	r3, r2
 8009e6c:	009b      	lsls	r3, r3, #2
 8009e6e:	4413      	add	r3, r2
 8009e70:	00db      	lsls	r3, r3, #3
 8009e72:	440b      	add	r3, r1
 8009e74:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 8009e78:	781b      	ldrb	r3, [r3, #0]
  }
}
 8009e7a:	4618      	mov	r0, r3
 8009e7c:	3714      	adds	r7, #20
 8009e7e:	46bd      	mov	sp, r7
 8009e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e84:	4770      	bx	lr

08009e86 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8009e86:	b580      	push	{r7, lr}
 8009e88:	b084      	sub	sp, #16
 8009e8a:	af00      	add	r7, sp, #0
 8009e8c:	6078      	str	r0, [r7, #4]
 8009e8e:	460b      	mov	r3, r1
 8009e90:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009e92:	2300      	movs	r3, #0
 8009e94:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009e96:	2300      	movs	r3, #0
 8009e98:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009ea0:	78fa      	ldrb	r2, [r7, #3]
 8009ea2:	4611      	mov	r1, r2
 8009ea4:	4618      	mov	r0, r3
 8009ea6:	f7f8 fbff 	bl	80026a8 <HAL_PCD_SetAddress>
 8009eaa:	4603      	mov	r3, r0
 8009eac:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009eae:	7bfb      	ldrb	r3, [r7, #15]
 8009eb0:	4618      	mov	r0, r3
 8009eb2:	f000 f8b1 	bl	800a018 <USBD_Get_USB_Status>
 8009eb6:	4603      	mov	r3, r0
 8009eb8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009eba:	7bbb      	ldrb	r3, [r7, #14]
}
 8009ebc:	4618      	mov	r0, r3
 8009ebe:	3710      	adds	r7, #16
 8009ec0:	46bd      	mov	sp, r7
 8009ec2:	bd80      	pop	{r7, pc}

08009ec4 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009ec4:	b580      	push	{r7, lr}
 8009ec6:	b086      	sub	sp, #24
 8009ec8:	af00      	add	r7, sp, #0
 8009eca:	60f8      	str	r0, [r7, #12]
 8009ecc:	607a      	str	r2, [r7, #4]
 8009ece:	603b      	str	r3, [r7, #0]
 8009ed0:	460b      	mov	r3, r1
 8009ed2:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009ed4:	2300      	movs	r3, #0
 8009ed6:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009ed8:	2300      	movs	r3, #0
 8009eda:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8009edc:	68fb      	ldr	r3, [r7, #12]
 8009ede:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8009ee2:	7af9      	ldrb	r1, [r7, #11]
 8009ee4:	683b      	ldr	r3, [r7, #0]
 8009ee6:	687a      	ldr	r2, [r7, #4]
 8009ee8:	f7f8 fd06 	bl	80028f8 <HAL_PCD_EP_Transmit>
 8009eec:	4603      	mov	r3, r0
 8009eee:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009ef0:	7dfb      	ldrb	r3, [r7, #23]
 8009ef2:	4618      	mov	r0, r3
 8009ef4:	f000 f890 	bl	800a018 <USBD_Get_USB_Status>
 8009ef8:	4603      	mov	r3, r0
 8009efa:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009efc:	7dbb      	ldrb	r3, [r7, #22]
}
 8009efe:	4618      	mov	r0, r3
 8009f00:	3718      	adds	r7, #24
 8009f02:	46bd      	mov	sp, r7
 8009f04:	bd80      	pop	{r7, pc}

08009f06 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009f06:	b580      	push	{r7, lr}
 8009f08:	b086      	sub	sp, #24
 8009f0a:	af00      	add	r7, sp, #0
 8009f0c:	60f8      	str	r0, [r7, #12]
 8009f0e:	607a      	str	r2, [r7, #4]
 8009f10:	603b      	str	r3, [r7, #0]
 8009f12:	460b      	mov	r3, r1
 8009f14:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009f16:	2300      	movs	r3, #0
 8009f18:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009f1a:	2300      	movs	r3, #0
 8009f1c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8009f1e:	68fb      	ldr	r3, [r7, #12]
 8009f20:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8009f24:	7af9      	ldrb	r1, [r7, #11]
 8009f26:	683b      	ldr	r3, [r7, #0]
 8009f28:	687a      	ldr	r2, [r7, #4]
 8009f2a:	f7f8 fc90 	bl	800284e <HAL_PCD_EP_Receive>
 8009f2e:	4603      	mov	r3, r0
 8009f30:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009f32:	7dfb      	ldrb	r3, [r7, #23]
 8009f34:	4618      	mov	r0, r3
 8009f36:	f000 f86f 	bl	800a018 <USBD_Get_USB_Status>
 8009f3a:	4603      	mov	r3, r0
 8009f3c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009f3e:	7dbb      	ldrb	r3, [r7, #22]
}
 8009f40:	4618      	mov	r0, r3
 8009f42:	3718      	adds	r7, #24
 8009f44:	46bd      	mov	sp, r7
 8009f46:	bd80      	pop	{r7, pc}

08009f48 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009f48:	b580      	push	{r7, lr}
 8009f4a:	b082      	sub	sp, #8
 8009f4c:	af00      	add	r7, sp, #0
 8009f4e:	6078      	str	r0, [r7, #4]
 8009f50:	460b      	mov	r3, r1
 8009f52:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009f5a:	78fa      	ldrb	r2, [r7, #3]
 8009f5c:	4611      	mov	r1, r2
 8009f5e:	4618      	mov	r0, r3
 8009f60:	f7f8 fcb2 	bl	80028c8 <HAL_PCD_EP_GetRxCount>
 8009f64:	4603      	mov	r3, r0
}
 8009f66:	4618      	mov	r0, r3
 8009f68:	3708      	adds	r7, #8
 8009f6a:	46bd      	mov	sp, r7
 8009f6c:	bd80      	pop	{r7, pc}
	...

08009f70 <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009f70:	b580      	push	{r7, lr}
 8009f72:	b082      	sub	sp, #8
 8009f74:	af00      	add	r7, sp, #0
 8009f76:	6078      	str	r0, [r7, #4]
 8009f78:	460b      	mov	r3, r1
 8009f7a:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 8009f7c:	78fb      	ldrb	r3, [r7, #3]
 8009f7e:	2b00      	cmp	r3, #0
 8009f80:	d002      	beq.n	8009f88 <HAL_PCDEx_LPM_Callback+0x18>
 8009f82:	2b01      	cmp	r3, #1
 8009f84:	d013      	beq.n	8009fae <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 8009f86:	e023      	b.n	8009fd0 <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	699b      	ldr	r3, [r3, #24]
 8009f8c:	2b00      	cmp	r3, #0
 8009f8e:	d007      	beq.n	8009fa0 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 8009f90:	f000 f83c 	bl	800a00c <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009f94:	4b10      	ldr	r3, [pc, #64]	; (8009fd8 <HAL_PCDEx_LPM_Callback+0x68>)
 8009f96:	691b      	ldr	r3, [r3, #16]
 8009f98:	4a0f      	ldr	r2, [pc, #60]	; (8009fd8 <HAL_PCDEx_LPM_Callback+0x68>)
 8009f9a:	f023 0306 	bic.w	r3, r3, #6
 8009f9e:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8009fa6:	4618      	mov	r0, r3
 8009fa8:	f7fe fc7c 	bl	80088a4 <USBD_LL_Resume>
    break;
 8009fac:	e010      	b.n	8009fd0 <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8009fb4:	4618      	mov	r0, r3
 8009fb6:	f7fe fc5f 	bl	8008878 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	699b      	ldr	r3, [r3, #24]
 8009fbe:	2b00      	cmp	r3, #0
 8009fc0:	d005      	beq.n	8009fce <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009fc2:	4b05      	ldr	r3, [pc, #20]	; (8009fd8 <HAL_PCDEx_LPM_Callback+0x68>)
 8009fc4:	691b      	ldr	r3, [r3, #16]
 8009fc6:	4a04      	ldr	r2, [pc, #16]	; (8009fd8 <HAL_PCDEx_LPM_Callback+0x68>)
 8009fc8:	f043 0306 	orr.w	r3, r3, #6
 8009fcc:	6113      	str	r3, [r2, #16]
    break;
 8009fce:	bf00      	nop
}
 8009fd0:	bf00      	nop
 8009fd2:	3708      	adds	r7, #8
 8009fd4:	46bd      	mov	sp, r7
 8009fd6:	bd80      	pop	{r7, pc}
 8009fd8:	e000ed00 	.word	0xe000ed00

08009fdc <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8009fdc:	b480      	push	{r7}
 8009fde:	b083      	sub	sp, #12
 8009fe0:	af00      	add	r7, sp, #0
 8009fe2:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8009fe4:	4b03      	ldr	r3, [pc, #12]	; (8009ff4 <USBD_static_malloc+0x18>)
}
 8009fe6:	4618      	mov	r0, r3
 8009fe8:	370c      	adds	r7, #12
 8009fea:	46bd      	mov	sp, r7
 8009fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ff0:	4770      	bx	lr
 8009ff2:	bf00      	nop
 8009ff4:	20000c8c 	.word	0x20000c8c

08009ff8 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8009ff8:	b480      	push	{r7}
 8009ffa:	b083      	sub	sp, #12
 8009ffc:	af00      	add	r7, sp, #0
 8009ffe:	6078      	str	r0, [r7, #4]

}
 800a000:	bf00      	nop
 800a002:	370c      	adds	r7, #12
 800a004:	46bd      	mov	sp, r7
 800a006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a00a:	4770      	bx	lr

0800a00c <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800a00c:	b580      	push	{r7, lr}
 800a00e:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800a010:	f7f6 fcc7 	bl	80009a2 <SystemClock_Config>
}
 800a014:	bf00      	nop
 800a016:	bd80      	pop	{r7, pc}

0800a018 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800a018:	b480      	push	{r7}
 800a01a:	b085      	sub	sp, #20
 800a01c:	af00      	add	r7, sp, #0
 800a01e:	4603      	mov	r3, r0
 800a020:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a022:	2300      	movs	r3, #0
 800a024:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800a026:	79fb      	ldrb	r3, [r7, #7]
 800a028:	2b03      	cmp	r3, #3
 800a02a:	d817      	bhi.n	800a05c <USBD_Get_USB_Status+0x44>
 800a02c:	a201      	add	r2, pc, #4	; (adr r2, 800a034 <USBD_Get_USB_Status+0x1c>)
 800a02e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a032:	bf00      	nop
 800a034:	0800a045 	.word	0x0800a045
 800a038:	0800a04b 	.word	0x0800a04b
 800a03c:	0800a051 	.word	0x0800a051
 800a040:	0800a057 	.word	0x0800a057
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800a044:	2300      	movs	r3, #0
 800a046:	73fb      	strb	r3, [r7, #15]
    break;
 800a048:	e00b      	b.n	800a062 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a04a:	2303      	movs	r3, #3
 800a04c:	73fb      	strb	r3, [r7, #15]
    break;
 800a04e:	e008      	b.n	800a062 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a050:	2301      	movs	r3, #1
 800a052:	73fb      	strb	r3, [r7, #15]
    break;
 800a054:	e005      	b.n	800a062 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a056:	2303      	movs	r3, #3
 800a058:	73fb      	strb	r3, [r7, #15]
    break;
 800a05a:	e002      	b.n	800a062 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800a05c:	2303      	movs	r3, #3
 800a05e:	73fb      	strb	r3, [r7, #15]
    break;
 800a060:	bf00      	nop
  }
  return usb_status;
 800a062:	7bfb      	ldrb	r3, [r7, #15]
}
 800a064:	4618      	mov	r0, r3
 800a066:	3714      	adds	r7, #20
 800a068:	46bd      	mov	sp, r7
 800a06a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a06e:	4770      	bx	lr

0800a070 <__libc_init_array>:
 800a070:	b570      	push	{r4, r5, r6, lr}
 800a072:	4d0d      	ldr	r5, [pc, #52]	; (800a0a8 <__libc_init_array+0x38>)
 800a074:	4c0d      	ldr	r4, [pc, #52]	; (800a0ac <__libc_init_array+0x3c>)
 800a076:	1b64      	subs	r4, r4, r5
 800a078:	10a4      	asrs	r4, r4, #2
 800a07a:	2600      	movs	r6, #0
 800a07c:	42a6      	cmp	r6, r4
 800a07e:	d109      	bne.n	800a094 <__libc_init_array+0x24>
 800a080:	4d0b      	ldr	r5, [pc, #44]	; (800a0b0 <__libc_init_array+0x40>)
 800a082:	4c0c      	ldr	r4, [pc, #48]	; (800a0b4 <__libc_init_array+0x44>)
 800a084:	f000 f82e 	bl	800a0e4 <_init>
 800a088:	1b64      	subs	r4, r4, r5
 800a08a:	10a4      	asrs	r4, r4, #2
 800a08c:	2600      	movs	r6, #0
 800a08e:	42a6      	cmp	r6, r4
 800a090:	d105      	bne.n	800a09e <__libc_init_array+0x2e>
 800a092:	bd70      	pop	{r4, r5, r6, pc}
 800a094:	f855 3b04 	ldr.w	r3, [r5], #4
 800a098:	4798      	blx	r3
 800a09a:	3601      	adds	r6, #1
 800a09c:	e7ee      	b.n	800a07c <__libc_init_array+0xc>
 800a09e:	f855 3b04 	ldr.w	r3, [r5], #4
 800a0a2:	4798      	blx	r3
 800a0a4:	3601      	adds	r6, #1
 800a0a6:	e7f2      	b.n	800a08e <__libc_init_array+0x1e>
 800a0a8:	0800a198 	.word	0x0800a198
 800a0ac:	0800a198 	.word	0x0800a198
 800a0b0:	0800a198 	.word	0x0800a198
 800a0b4:	0800a19c 	.word	0x0800a19c

0800a0b8 <memcpy>:
 800a0b8:	440a      	add	r2, r1
 800a0ba:	4291      	cmp	r1, r2
 800a0bc:	f100 33ff 	add.w	r3, r0, #4294967295
 800a0c0:	d100      	bne.n	800a0c4 <memcpy+0xc>
 800a0c2:	4770      	bx	lr
 800a0c4:	b510      	push	{r4, lr}
 800a0c6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a0ca:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a0ce:	4291      	cmp	r1, r2
 800a0d0:	d1f9      	bne.n	800a0c6 <memcpy+0xe>
 800a0d2:	bd10      	pop	{r4, pc}

0800a0d4 <memset>:
 800a0d4:	4402      	add	r2, r0
 800a0d6:	4603      	mov	r3, r0
 800a0d8:	4293      	cmp	r3, r2
 800a0da:	d100      	bne.n	800a0de <memset+0xa>
 800a0dc:	4770      	bx	lr
 800a0de:	f803 1b01 	strb.w	r1, [r3], #1
 800a0e2:	e7f9      	b.n	800a0d8 <memset+0x4>

0800a0e4 <_init>:
 800a0e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a0e6:	bf00      	nop
 800a0e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a0ea:	bc08      	pop	{r3}
 800a0ec:	469e      	mov	lr, r3
 800a0ee:	4770      	bx	lr

0800a0f0 <_fini>:
 800a0f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a0f2:	bf00      	nop
 800a0f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a0f6:	bc08      	pop	{r3}
 800a0f8:	469e      	mov	lr, r3
 800a0fa:	4770      	bx	lr
