
Recoil-USB-CAN-Adapter-G431.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a980  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000110  0800ab60  0800ab60  0001ab60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ac70  0800ac70  000201e8  2**0
                  CONTENTS
  4 .ARM          00000008  0800ac70  0800ac70  0001ac70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ac78  0800ac78  000201e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ac78  0800ac78  0001ac78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ac7c  0800ac7c  0001ac7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e8  20000000  0800ac80  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000d38  200001e8  0800ae68  000201e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000f20  0800ae68  00020f20  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a644  00000000  00000000  00020218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003a8d  00000000  00000000  0003a85c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001240  00000000  00000000  0003e2f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000010b8  00000000  00000000  0003f530  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000218e7  00000000  00000000  000405e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018633  00000000  00000000  00061ecf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c115c  00000000  00000000  0007a502  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0013b65e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004e1c  00000000  00000000  0013b6b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200001e8 	.word	0x200001e8
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800ab48 	.word	0x0800ab48

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200001ec 	.word	0x200001ec
 800021c:	0800ab48 	.word	0x0800ab48

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_uldivmod>:
 80002d0:	b953      	cbnz	r3, 80002e8 <__aeabi_uldivmod+0x18>
 80002d2:	b94a      	cbnz	r2, 80002e8 <__aeabi_uldivmod+0x18>
 80002d4:	2900      	cmp	r1, #0
 80002d6:	bf08      	it	eq
 80002d8:	2800      	cmpeq	r0, #0
 80002da:	bf1c      	itt	ne
 80002dc:	f04f 31ff 	movne.w	r1, #4294967295
 80002e0:	f04f 30ff 	movne.w	r0, #4294967295
 80002e4:	f000 b974 	b.w	80005d0 <__aeabi_idiv0>
 80002e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f0:	f000 f806 	bl	8000300 <__udivmoddi4>
 80002f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002fc:	b004      	add	sp, #16
 80002fe:	4770      	bx	lr

08000300 <__udivmoddi4>:
 8000300:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000304:	9d08      	ldr	r5, [sp, #32]
 8000306:	4604      	mov	r4, r0
 8000308:	468e      	mov	lr, r1
 800030a:	2b00      	cmp	r3, #0
 800030c:	d14d      	bne.n	80003aa <__udivmoddi4+0xaa>
 800030e:	428a      	cmp	r2, r1
 8000310:	4694      	mov	ip, r2
 8000312:	d969      	bls.n	80003e8 <__udivmoddi4+0xe8>
 8000314:	fab2 f282 	clz	r2, r2
 8000318:	b152      	cbz	r2, 8000330 <__udivmoddi4+0x30>
 800031a:	fa01 f302 	lsl.w	r3, r1, r2
 800031e:	f1c2 0120 	rsb	r1, r2, #32
 8000322:	fa20 f101 	lsr.w	r1, r0, r1
 8000326:	fa0c fc02 	lsl.w	ip, ip, r2
 800032a:	ea41 0e03 	orr.w	lr, r1, r3
 800032e:	4094      	lsls	r4, r2
 8000330:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000334:	0c21      	lsrs	r1, r4, #16
 8000336:	fbbe f6f8 	udiv	r6, lr, r8
 800033a:	fa1f f78c 	uxth.w	r7, ip
 800033e:	fb08 e316 	mls	r3, r8, r6, lr
 8000342:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000346:	fb06 f107 	mul.w	r1, r6, r7
 800034a:	4299      	cmp	r1, r3
 800034c:	d90a      	bls.n	8000364 <__udivmoddi4+0x64>
 800034e:	eb1c 0303 	adds.w	r3, ip, r3
 8000352:	f106 30ff 	add.w	r0, r6, #4294967295
 8000356:	f080 811f 	bcs.w	8000598 <__udivmoddi4+0x298>
 800035a:	4299      	cmp	r1, r3
 800035c:	f240 811c 	bls.w	8000598 <__udivmoddi4+0x298>
 8000360:	3e02      	subs	r6, #2
 8000362:	4463      	add	r3, ip
 8000364:	1a5b      	subs	r3, r3, r1
 8000366:	b2a4      	uxth	r4, r4
 8000368:	fbb3 f0f8 	udiv	r0, r3, r8
 800036c:	fb08 3310 	mls	r3, r8, r0, r3
 8000370:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000374:	fb00 f707 	mul.w	r7, r0, r7
 8000378:	42a7      	cmp	r7, r4
 800037a:	d90a      	bls.n	8000392 <__udivmoddi4+0x92>
 800037c:	eb1c 0404 	adds.w	r4, ip, r4
 8000380:	f100 33ff 	add.w	r3, r0, #4294967295
 8000384:	f080 810a 	bcs.w	800059c <__udivmoddi4+0x29c>
 8000388:	42a7      	cmp	r7, r4
 800038a:	f240 8107 	bls.w	800059c <__udivmoddi4+0x29c>
 800038e:	4464      	add	r4, ip
 8000390:	3802      	subs	r0, #2
 8000392:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000396:	1be4      	subs	r4, r4, r7
 8000398:	2600      	movs	r6, #0
 800039a:	b11d      	cbz	r5, 80003a4 <__udivmoddi4+0xa4>
 800039c:	40d4      	lsrs	r4, r2
 800039e:	2300      	movs	r3, #0
 80003a0:	e9c5 4300 	strd	r4, r3, [r5]
 80003a4:	4631      	mov	r1, r6
 80003a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d909      	bls.n	80003c2 <__udivmoddi4+0xc2>
 80003ae:	2d00      	cmp	r5, #0
 80003b0:	f000 80ef 	beq.w	8000592 <__udivmoddi4+0x292>
 80003b4:	2600      	movs	r6, #0
 80003b6:	e9c5 0100 	strd	r0, r1, [r5]
 80003ba:	4630      	mov	r0, r6
 80003bc:	4631      	mov	r1, r6
 80003be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c2:	fab3 f683 	clz	r6, r3
 80003c6:	2e00      	cmp	r6, #0
 80003c8:	d14a      	bne.n	8000460 <__udivmoddi4+0x160>
 80003ca:	428b      	cmp	r3, r1
 80003cc:	d302      	bcc.n	80003d4 <__udivmoddi4+0xd4>
 80003ce:	4282      	cmp	r2, r0
 80003d0:	f200 80f9 	bhi.w	80005c6 <__udivmoddi4+0x2c6>
 80003d4:	1a84      	subs	r4, r0, r2
 80003d6:	eb61 0303 	sbc.w	r3, r1, r3
 80003da:	2001      	movs	r0, #1
 80003dc:	469e      	mov	lr, r3
 80003de:	2d00      	cmp	r5, #0
 80003e0:	d0e0      	beq.n	80003a4 <__udivmoddi4+0xa4>
 80003e2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003e6:	e7dd      	b.n	80003a4 <__udivmoddi4+0xa4>
 80003e8:	b902      	cbnz	r2, 80003ec <__udivmoddi4+0xec>
 80003ea:	deff      	udf	#255	; 0xff
 80003ec:	fab2 f282 	clz	r2, r2
 80003f0:	2a00      	cmp	r2, #0
 80003f2:	f040 8092 	bne.w	800051a <__udivmoddi4+0x21a>
 80003f6:	eba1 010c 	sub.w	r1, r1, ip
 80003fa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003fe:	fa1f fe8c 	uxth.w	lr, ip
 8000402:	2601      	movs	r6, #1
 8000404:	0c20      	lsrs	r0, r4, #16
 8000406:	fbb1 f3f7 	udiv	r3, r1, r7
 800040a:	fb07 1113 	mls	r1, r7, r3, r1
 800040e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000412:	fb0e f003 	mul.w	r0, lr, r3
 8000416:	4288      	cmp	r0, r1
 8000418:	d908      	bls.n	800042c <__udivmoddi4+0x12c>
 800041a:	eb1c 0101 	adds.w	r1, ip, r1
 800041e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x12a>
 8000424:	4288      	cmp	r0, r1
 8000426:	f200 80cb 	bhi.w	80005c0 <__udivmoddi4+0x2c0>
 800042a:	4643      	mov	r3, r8
 800042c:	1a09      	subs	r1, r1, r0
 800042e:	b2a4      	uxth	r4, r4
 8000430:	fbb1 f0f7 	udiv	r0, r1, r7
 8000434:	fb07 1110 	mls	r1, r7, r0, r1
 8000438:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800043c:	fb0e fe00 	mul.w	lr, lr, r0
 8000440:	45a6      	cmp	lr, r4
 8000442:	d908      	bls.n	8000456 <__udivmoddi4+0x156>
 8000444:	eb1c 0404 	adds.w	r4, ip, r4
 8000448:	f100 31ff 	add.w	r1, r0, #4294967295
 800044c:	d202      	bcs.n	8000454 <__udivmoddi4+0x154>
 800044e:	45a6      	cmp	lr, r4
 8000450:	f200 80bb 	bhi.w	80005ca <__udivmoddi4+0x2ca>
 8000454:	4608      	mov	r0, r1
 8000456:	eba4 040e 	sub.w	r4, r4, lr
 800045a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800045e:	e79c      	b.n	800039a <__udivmoddi4+0x9a>
 8000460:	f1c6 0720 	rsb	r7, r6, #32
 8000464:	40b3      	lsls	r3, r6
 8000466:	fa22 fc07 	lsr.w	ip, r2, r7
 800046a:	ea4c 0c03 	orr.w	ip, ip, r3
 800046e:	fa20 f407 	lsr.w	r4, r0, r7
 8000472:	fa01 f306 	lsl.w	r3, r1, r6
 8000476:	431c      	orrs	r4, r3
 8000478:	40f9      	lsrs	r1, r7
 800047a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800047e:	fa00 f306 	lsl.w	r3, r0, r6
 8000482:	fbb1 f8f9 	udiv	r8, r1, r9
 8000486:	0c20      	lsrs	r0, r4, #16
 8000488:	fa1f fe8c 	uxth.w	lr, ip
 800048c:	fb09 1118 	mls	r1, r9, r8, r1
 8000490:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000494:	fb08 f00e 	mul.w	r0, r8, lr
 8000498:	4288      	cmp	r0, r1
 800049a:	fa02 f206 	lsl.w	r2, r2, r6
 800049e:	d90b      	bls.n	80004b8 <__udivmoddi4+0x1b8>
 80004a0:	eb1c 0101 	adds.w	r1, ip, r1
 80004a4:	f108 3aff 	add.w	sl, r8, #4294967295
 80004a8:	f080 8088 	bcs.w	80005bc <__udivmoddi4+0x2bc>
 80004ac:	4288      	cmp	r0, r1
 80004ae:	f240 8085 	bls.w	80005bc <__udivmoddi4+0x2bc>
 80004b2:	f1a8 0802 	sub.w	r8, r8, #2
 80004b6:	4461      	add	r1, ip
 80004b8:	1a09      	subs	r1, r1, r0
 80004ba:	b2a4      	uxth	r4, r4
 80004bc:	fbb1 f0f9 	udiv	r0, r1, r9
 80004c0:	fb09 1110 	mls	r1, r9, r0, r1
 80004c4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004c8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004cc:	458e      	cmp	lr, r1
 80004ce:	d908      	bls.n	80004e2 <__udivmoddi4+0x1e2>
 80004d0:	eb1c 0101 	adds.w	r1, ip, r1
 80004d4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004d8:	d26c      	bcs.n	80005b4 <__udivmoddi4+0x2b4>
 80004da:	458e      	cmp	lr, r1
 80004dc:	d96a      	bls.n	80005b4 <__udivmoddi4+0x2b4>
 80004de:	3802      	subs	r0, #2
 80004e0:	4461      	add	r1, ip
 80004e2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004e6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ea:	eba1 010e 	sub.w	r1, r1, lr
 80004ee:	42a1      	cmp	r1, r4
 80004f0:	46c8      	mov	r8, r9
 80004f2:	46a6      	mov	lr, r4
 80004f4:	d356      	bcc.n	80005a4 <__udivmoddi4+0x2a4>
 80004f6:	d053      	beq.n	80005a0 <__udivmoddi4+0x2a0>
 80004f8:	b15d      	cbz	r5, 8000512 <__udivmoddi4+0x212>
 80004fa:	ebb3 0208 	subs.w	r2, r3, r8
 80004fe:	eb61 010e 	sbc.w	r1, r1, lr
 8000502:	fa01 f707 	lsl.w	r7, r1, r7
 8000506:	fa22 f306 	lsr.w	r3, r2, r6
 800050a:	40f1      	lsrs	r1, r6
 800050c:	431f      	orrs	r7, r3
 800050e:	e9c5 7100 	strd	r7, r1, [r5]
 8000512:	2600      	movs	r6, #0
 8000514:	4631      	mov	r1, r6
 8000516:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800051a:	f1c2 0320 	rsb	r3, r2, #32
 800051e:	40d8      	lsrs	r0, r3
 8000520:	fa0c fc02 	lsl.w	ip, ip, r2
 8000524:	fa21 f303 	lsr.w	r3, r1, r3
 8000528:	4091      	lsls	r1, r2
 800052a:	4301      	orrs	r1, r0
 800052c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000530:	fa1f fe8c 	uxth.w	lr, ip
 8000534:	fbb3 f0f7 	udiv	r0, r3, r7
 8000538:	fb07 3610 	mls	r6, r7, r0, r3
 800053c:	0c0b      	lsrs	r3, r1, #16
 800053e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000542:	fb00 f60e 	mul.w	r6, r0, lr
 8000546:	429e      	cmp	r6, r3
 8000548:	fa04 f402 	lsl.w	r4, r4, r2
 800054c:	d908      	bls.n	8000560 <__udivmoddi4+0x260>
 800054e:	eb1c 0303 	adds.w	r3, ip, r3
 8000552:	f100 38ff 	add.w	r8, r0, #4294967295
 8000556:	d22f      	bcs.n	80005b8 <__udivmoddi4+0x2b8>
 8000558:	429e      	cmp	r6, r3
 800055a:	d92d      	bls.n	80005b8 <__udivmoddi4+0x2b8>
 800055c:	3802      	subs	r0, #2
 800055e:	4463      	add	r3, ip
 8000560:	1b9b      	subs	r3, r3, r6
 8000562:	b289      	uxth	r1, r1
 8000564:	fbb3 f6f7 	udiv	r6, r3, r7
 8000568:	fb07 3316 	mls	r3, r7, r6, r3
 800056c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000570:	fb06 f30e 	mul.w	r3, r6, lr
 8000574:	428b      	cmp	r3, r1
 8000576:	d908      	bls.n	800058a <__udivmoddi4+0x28a>
 8000578:	eb1c 0101 	adds.w	r1, ip, r1
 800057c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000580:	d216      	bcs.n	80005b0 <__udivmoddi4+0x2b0>
 8000582:	428b      	cmp	r3, r1
 8000584:	d914      	bls.n	80005b0 <__udivmoddi4+0x2b0>
 8000586:	3e02      	subs	r6, #2
 8000588:	4461      	add	r1, ip
 800058a:	1ac9      	subs	r1, r1, r3
 800058c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000590:	e738      	b.n	8000404 <__udivmoddi4+0x104>
 8000592:	462e      	mov	r6, r5
 8000594:	4628      	mov	r0, r5
 8000596:	e705      	b.n	80003a4 <__udivmoddi4+0xa4>
 8000598:	4606      	mov	r6, r0
 800059a:	e6e3      	b.n	8000364 <__udivmoddi4+0x64>
 800059c:	4618      	mov	r0, r3
 800059e:	e6f8      	b.n	8000392 <__udivmoddi4+0x92>
 80005a0:	454b      	cmp	r3, r9
 80005a2:	d2a9      	bcs.n	80004f8 <__udivmoddi4+0x1f8>
 80005a4:	ebb9 0802 	subs.w	r8, r9, r2
 80005a8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005ac:	3801      	subs	r0, #1
 80005ae:	e7a3      	b.n	80004f8 <__udivmoddi4+0x1f8>
 80005b0:	4646      	mov	r6, r8
 80005b2:	e7ea      	b.n	800058a <__udivmoddi4+0x28a>
 80005b4:	4620      	mov	r0, r4
 80005b6:	e794      	b.n	80004e2 <__udivmoddi4+0x1e2>
 80005b8:	4640      	mov	r0, r8
 80005ba:	e7d1      	b.n	8000560 <__udivmoddi4+0x260>
 80005bc:	46d0      	mov	r8, sl
 80005be:	e77b      	b.n	80004b8 <__udivmoddi4+0x1b8>
 80005c0:	3b02      	subs	r3, #2
 80005c2:	4461      	add	r1, ip
 80005c4:	e732      	b.n	800042c <__udivmoddi4+0x12c>
 80005c6:	4630      	mov	r0, r6
 80005c8:	e709      	b.n	80003de <__udivmoddi4+0xde>
 80005ca:	4464      	add	r4, ip
 80005cc:	3802      	subs	r0, #2
 80005ce:	e742      	b.n	8000456 <__udivmoddi4+0x156>

080005d0 <__aeabi_idiv0>:
 80005d0:	4770      	bx	lr
 80005d2:	bf00      	nop

080005d4 <HAL_FDCAN_RxFifo0Callback>:
uint8_t   usb_tx_buffer[USB_BUFFER_SIZE];

CAN_Frame can_rx_frame;
CAN_Frame can_tx_frame;

void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs) {
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b082      	sub	sp, #8
 80005d8:	af00      	add	r7, sp, #0
 80005da:	6078      	str	r0, [r7, #4]
 80005dc:	6039      	str	r1, [r7, #0]
  APP_handleCANMessage();
 80005de:	f000 f865 	bl	80006ac <APP_handleCANMessage>
}
 80005e2:	bf00      	nop
 80005e4:	3708      	adds	r7, #8
 80005e6:	46bd      	mov	sp, r7
 80005e8:	bd80      	pop	{r7, pc}
	...

080005ec <APP_handleUSBMessage>:
    HAL_UART_Transmit(&huart2, (uint8_t *)str, strlen(str), 100);
    HAL_Delay(100);
  }
}

void APP_handleUSBMessage() {
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b082      	sub	sp, #8
 80005f0:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 80005f2:	2200      	movs	r2, #0
 80005f4:	2140      	movs	r1, #64	; 0x40
 80005f6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005fa:	f001 fe45 	bl	8002288 <HAL_GPIO_WritePin>

  // check if the first byte is the correct Start of Frame
  uint8_t is_valid_frame = usb_rx_buffer[0] == 0xAAU;
 80005fe:	4b28      	ldr	r3, [pc, #160]	; (80006a0 <APP_handleUSBMessage+0xb4>)
 8000600:	781b      	ldrb	r3, [r3, #0]
 8000602:	2baa      	cmp	r3, #170	; 0xaa
 8000604:	bf0c      	ite	eq
 8000606:	2301      	moveq	r3, #1
 8000608:	2300      	movne	r3, #0
 800060a:	b2db      	uxtb	r3, r3
 800060c:	717b      	strb	r3, [r7, #5]
  if (!is_valid_frame) {
 800060e:	797b      	ldrb	r3, [r7, #5]
 8000610:	2b00      	cmp	r3, #0
 8000612:	d106      	bne.n	8000622 <APP_handleUSBMessage+0x36>
    // if not, discard and continue receiving
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_SET);
 8000614:	2201      	movs	r2, #1
 8000616:	2140      	movs	r1, #64	; 0x40
 8000618:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800061c:	f001 fe34 	bl	8002288 <HAL_GPIO_WritePin>
    return;
 8000620:	e03a      	b.n	8000698 <APP_handleUSBMessage+0xac>
  }

  // decode the header section
  can_tx_frame.id_type = CAN_ID_STANDARD;
 8000622:	4b20      	ldr	r3, [pc, #128]	; (80006a4 <APP_handleUSBMessage+0xb8>)
 8000624:	2200      	movs	r2, #0
 8000626:	711a      	strb	r2, [r3, #4]
  can_tx_frame.frame_type = CAN_FRAME_DATA;
 8000628:	4b1e      	ldr	r3, [pc, #120]	; (80006a4 <APP_handleUSBMessage+0xb8>)
 800062a:	2201      	movs	r2, #1
 800062c:	715a      	strb	r2, [r3, #5]
//  uint32_t timestamp = ((uart_rx_buffer[1])     // timestamp is not used
//      | (uart_rx_buffer[2] << 8U)
//      | (uart_rx_buffer[3] << 16U)
//      | (uart_rx_buffer[4] << 24U));
  can_tx_frame.size = usb_rx_buffer[5];
 800062e:	4b1c      	ldr	r3, [pc, #112]	; (80006a0 <APP_handleUSBMessage+0xb4>)
 8000630:	795b      	ldrb	r3, [r3, #5]
 8000632:	b29a      	uxth	r2, r3
 8000634:	4b1b      	ldr	r3, [pc, #108]	; (80006a4 <APP_handleUSBMessage+0xb8>)
 8000636:	80da      	strh	r2, [r3, #6]
  can_tx_frame.id = (((uint32_t)usb_rx_buffer[6] << 0U)
 8000638:	4b19      	ldr	r3, [pc, #100]	; (80006a0 <APP_handleUSBMessage+0xb4>)
 800063a:	799b      	ldrb	r3, [r3, #6]
 800063c:	461a      	mov	r2, r3
                   | ((uint32_t)usb_rx_buffer[7] << 8U)
 800063e:	4b18      	ldr	r3, [pc, #96]	; (80006a0 <APP_handleUSBMessage+0xb4>)
 8000640:	79db      	ldrb	r3, [r3, #7]
 8000642:	021b      	lsls	r3, r3, #8
 8000644:	431a      	orrs	r2, r3
                   | ((uint32_t)usb_rx_buffer[8] << 16U)
 8000646:	4b16      	ldr	r3, [pc, #88]	; (80006a0 <APP_handleUSBMessage+0xb4>)
 8000648:	7a1b      	ldrb	r3, [r3, #8]
 800064a:	041b      	lsls	r3, r3, #16
 800064c:	431a      	orrs	r2, r3
                   | ((uint32_t)usb_rx_buffer[9] << 24U));
 800064e:	4b14      	ldr	r3, [pc, #80]	; (80006a0 <APP_handleUSBMessage+0xb4>)
 8000650:	7a5b      	ldrb	r3, [r3, #9]
 8000652:	061b      	lsls	r3, r3, #24
 8000654:	4313      	orrs	r3, r2
  can_tx_frame.id = (((uint32_t)usb_rx_buffer[6] << 0U)
 8000656:	4a13      	ldr	r2, [pc, #76]	; (80006a4 <APP_handleUSBMessage+0xb8>)
 8000658:	6013      	str	r3, [r2, #0]


  for (uint16_t i=0; i<can_tx_frame.size; i+=1) {
 800065a:	2300      	movs	r3, #0
 800065c:	80fb      	strh	r3, [r7, #6]
 800065e:	e00c      	b.n	800067a <APP_handleUSBMessage+0x8e>
    can_tx_frame.data[i] = usb_rx_buffer[10+i];
 8000660:	88fb      	ldrh	r3, [r7, #6]
 8000662:	f103 020a 	add.w	r2, r3, #10
 8000666:	88fb      	ldrh	r3, [r7, #6]
 8000668:	490d      	ldr	r1, [pc, #52]	; (80006a0 <APP_handleUSBMessage+0xb4>)
 800066a:	5c89      	ldrb	r1, [r1, r2]
 800066c:	4a0d      	ldr	r2, [pc, #52]	; (80006a4 <APP_handleUSBMessage+0xb8>)
 800066e:	4413      	add	r3, r2
 8000670:	460a      	mov	r2, r1
 8000672:	721a      	strb	r2, [r3, #8]
  for (uint16_t i=0; i<can_tx_frame.size; i+=1) {
 8000674:	88fb      	ldrh	r3, [r7, #6]
 8000676:	3301      	adds	r3, #1
 8000678:	80fb      	strh	r3, [r7, #6]
 800067a:	4b0a      	ldr	r3, [pc, #40]	; (80006a4 <APP_handleUSBMessage+0xb8>)
 800067c:	88db      	ldrh	r3, [r3, #6]
 800067e:	88fa      	ldrh	r2, [r7, #6]
 8000680:	429a      	cmp	r2, r3
 8000682:	d3ed      	bcc.n	8000660 <APP_handleUSBMessage+0x74>
  }

  CAN_putTxFrame(&hfdcan1, &can_tx_frame);
 8000684:	4907      	ldr	r1, [pc, #28]	; (80006a4 <APP_handleUSBMessage+0xb8>)
 8000686:	4808      	ldr	r0, [pc, #32]	; (80006a8 <APP_handleUSBMessage+0xbc>)
 8000688:	f000 f944 	bl	8000914 <CAN_putTxFrame>

  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_SET);
 800068c:	2201      	movs	r2, #1
 800068e:	2140      	movs	r1, #64	; 0x40
 8000690:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000694:	f001 fdf8 	bl	8002288 <HAL_GPIO_WritePin>
}
 8000698:	3708      	adds	r7, #8
 800069a:	46bd      	mov	sp, r7
 800069c:	bd80      	pop	{r7, pc}
 800069e:	bf00      	nop
 80006a0:	20000208 	.word	0x20000208
 80006a4:	2000031c 	.word	0x2000031c
 80006a8:	2000032c 	.word	0x2000032c

080006ac <APP_handleCANMessage>:

void APP_handleCANMessage() {
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b082      	sub	sp, #8
 80006b0:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET);
 80006b2:	2200      	movs	r2, #0
 80006b4:	2180      	movs	r1, #128	; 0x80
 80006b6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006ba:	f001 fde5 	bl	8002288 <HAL_GPIO_WritePin>
  CAN_getRxFrame(&hfdcan1, &can_rx_frame);
 80006be:	4932      	ldr	r1, [pc, #200]	; (8000788 <APP_handleCANMessage+0xdc>)
 80006c0:	4832      	ldr	r0, [pc, #200]	; (800078c <APP_handleCANMessage+0xe0>)
 80006c2:	f000 f8a9 	bl	8000818 <CAN_getRxFrame>

  // prepare the USB frame
  usb_tx_buffer[0] = PYTHONCAN_START_OF_FRAME;
 80006c6:	4b32      	ldr	r3, [pc, #200]	; (8000790 <APP_handleCANMessage+0xe4>)
 80006c8:	22aa      	movs	r2, #170	; 0xaa
 80006ca:	701a      	strb	r2, [r3, #0]

  usb_tx_buffer[1] = 0x00U;  // Timestamp
 80006cc:	4b30      	ldr	r3, [pc, #192]	; (8000790 <APP_handleCANMessage+0xe4>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	705a      	strb	r2, [r3, #1]
  usb_tx_buffer[2] = 0x00U;
 80006d2:	4b2f      	ldr	r3, [pc, #188]	; (8000790 <APP_handleCANMessage+0xe4>)
 80006d4:	2200      	movs	r2, #0
 80006d6:	709a      	strb	r2, [r3, #2]
  usb_tx_buffer[3] = 0x00U;
 80006d8:	4b2d      	ldr	r3, [pc, #180]	; (8000790 <APP_handleCANMessage+0xe4>)
 80006da:	2200      	movs	r2, #0
 80006dc:	70da      	strb	r2, [r3, #3]
  usb_tx_buffer[4] = 0x00U;
 80006de:	4b2c      	ldr	r3, [pc, #176]	; (8000790 <APP_handleCANMessage+0xe4>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	711a      	strb	r2, [r3, #4]

  usb_tx_buffer[5] = can_rx_frame.size;  // DLC
 80006e4:	4b28      	ldr	r3, [pc, #160]	; (8000788 <APP_handleCANMessage+0xdc>)
 80006e6:	88db      	ldrh	r3, [r3, #6]
 80006e8:	b2da      	uxtb	r2, r3
 80006ea:	4b29      	ldr	r3, [pc, #164]	; (8000790 <APP_handleCANMessage+0xe4>)
 80006ec:	715a      	strb	r2, [r3, #5]

  usb_tx_buffer[6] = READ_BITS(can_rx_frame.id, 0xFFU);  // ID
 80006ee:	4b26      	ldr	r3, [pc, #152]	; (8000788 <APP_handleCANMessage+0xdc>)
 80006f0:	681b      	ldr	r3, [r3, #0]
 80006f2:	b2da      	uxtb	r2, r3
 80006f4:	4b26      	ldr	r3, [pc, #152]	; (8000790 <APP_handleCANMessage+0xe4>)
 80006f6:	719a      	strb	r2, [r3, #6]
  usb_tx_buffer[7] = READ_BITS(can_rx_frame.id >> 8U, 0xFFU);
 80006f8:	4b23      	ldr	r3, [pc, #140]	; (8000788 <APP_handleCANMessage+0xdc>)
 80006fa:	681b      	ldr	r3, [r3, #0]
 80006fc:	0a1b      	lsrs	r3, r3, #8
 80006fe:	b2da      	uxtb	r2, r3
 8000700:	4b23      	ldr	r3, [pc, #140]	; (8000790 <APP_handleCANMessage+0xe4>)
 8000702:	71da      	strb	r2, [r3, #7]
  usb_tx_buffer[8] = READ_BITS(can_rx_frame.id >> 16U, 0xFFU);
 8000704:	4b20      	ldr	r3, [pc, #128]	; (8000788 <APP_handleCANMessage+0xdc>)
 8000706:	681b      	ldr	r3, [r3, #0]
 8000708:	0c1b      	lsrs	r3, r3, #16
 800070a:	b2da      	uxtb	r2, r3
 800070c:	4b20      	ldr	r3, [pc, #128]	; (8000790 <APP_handleCANMessage+0xe4>)
 800070e:	721a      	strb	r2, [r3, #8]
  usb_tx_buffer[9] = READ_BITS(can_rx_frame.id >> 24U, 0xFFU);
 8000710:	4b1d      	ldr	r3, [pc, #116]	; (8000788 <APP_handleCANMessage+0xdc>)
 8000712:	681b      	ldr	r3, [r3, #0]
 8000714:	0e1b      	lsrs	r3, r3, #24
 8000716:	b2da      	uxtb	r2, r3
 8000718:	4b1d      	ldr	r3, [pc, #116]	; (8000790 <APP_handleCANMessage+0xe4>)
 800071a:	725a      	strb	r2, [r3, #9]

  usb_tx_size = 10;
 800071c:	4b1d      	ldr	r3, [pc, #116]	; (8000794 <APP_handleCANMessage+0xe8>)
 800071e:	220a      	movs	r2, #10
 8000720:	801a      	strh	r2, [r3, #0]

  for (uint16_t i=0; i<can_rx_frame.size; i+=1) {
 8000722:	2300      	movs	r3, #0
 8000724:	80fb      	strh	r3, [r7, #6]
 8000726:	e00a      	b.n	800073e <APP_handleCANMessage+0x92>
    usb_tx_buffer[10+i] = can_rx_frame.data[i];
 8000728:	88fa      	ldrh	r2, [r7, #6]
 800072a:	88fb      	ldrh	r3, [r7, #6]
 800072c:	330a      	adds	r3, #10
 800072e:	4916      	ldr	r1, [pc, #88]	; (8000788 <APP_handleCANMessage+0xdc>)
 8000730:	440a      	add	r2, r1
 8000732:	7a11      	ldrb	r1, [r2, #8]
 8000734:	4a16      	ldr	r2, [pc, #88]	; (8000790 <APP_handleCANMessage+0xe4>)
 8000736:	54d1      	strb	r1, [r2, r3]
  for (uint16_t i=0; i<can_rx_frame.size; i+=1) {
 8000738:	88fb      	ldrh	r3, [r7, #6]
 800073a:	3301      	adds	r3, #1
 800073c:	80fb      	strh	r3, [r7, #6]
 800073e:	4b12      	ldr	r3, [pc, #72]	; (8000788 <APP_handleCANMessage+0xdc>)
 8000740:	88db      	ldrh	r3, [r3, #6]
 8000742:	88fa      	ldrh	r2, [r7, #6]
 8000744:	429a      	cmp	r2, r3
 8000746:	d3ef      	bcc.n	8000728 <APP_handleCANMessage+0x7c>
  }
  usb_tx_size += can_rx_frame.size + 1;
 8000748:	4b0f      	ldr	r3, [pc, #60]	; (8000788 <APP_handleCANMessage+0xdc>)
 800074a:	88da      	ldrh	r2, [r3, #6]
 800074c:	4b11      	ldr	r3, [pc, #68]	; (8000794 <APP_handleCANMessage+0xe8>)
 800074e:	881b      	ldrh	r3, [r3, #0]
 8000750:	4413      	add	r3, r2
 8000752:	b29b      	uxth	r3, r3
 8000754:	3301      	adds	r3, #1
 8000756:	b29a      	uxth	r2, r3
 8000758:	4b0e      	ldr	r3, [pc, #56]	; (8000794 <APP_handleCANMessage+0xe8>)
 800075a:	801a      	strh	r2, [r3, #0]

  usb_tx_buffer[10+can_rx_frame.size] = PYTHONCAN_END_OF_FRAME;
 800075c:	4b0a      	ldr	r3, [pc, #40]	; (8000788 <APP_handleCANMessage+0xdc>)
 800075e:	88db      	ldrh	r3, [r3, #6]
 8000760:	330a      	adds	r3, #10
 8000762:	4a0b      	ldr	r2, [pc, #44]	; (8000790 <APP_handleCANMessage+0xe4>)
 8000764:	21bb      	movs	r1, #187	; 0xbb
 8000766:	54d1      	strb	r1, [r2, r3]

  CDC_Transmit_FS(usb_tx_buffer, usb_tx_size);
 8000768:	4b0a      	ldr	r3, [pc, #40]	; (8000794 <APP_handleCANMessage+0xe8>)
 800076a:	881b      	ldrh	r3, [r3, #0]
 800076c:	4619      	mov	r1, r3
 800076e:	4808      	ldr	r0, [pc, #32]	; (8000790 <APP_handleCANMessage+0xe4>)
 8000770:	f009 f8fc 	bl	800996c <CDC_Transmit_FS>

  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_SET);
 8000774:	2201      	movs	r2, #1
 8000776:	2180      	movs	r1, #128	; 0x80
 8000778:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800077c:	f001 fd84 	bl	8002288 <HAL_GPIO_WritePin>
}
 8000780:	bf00      	nop
 8000782:	3708      	adds	r7, #8
 8000784:	46bd      	mov	sp, r7
 8000786:	bd80      	pop	{r7, pc}
 8000788:	2000030c 	.word	0x2000030c
 800078c:	2000032c 	.word	0x2000032c
 8000790:	2000028c 	.word	0x2000028c
 8000794:	20000288 	.word	0x20000288

08000798 <APP_init>:

void APP_init() {
 8000798:	b580      	push	{r7, lr}
 800079a:	b086      	sub	sp, #24
 800079c:	af00      	add	r7, sp, #0
  #if FIRST_TIME_BOOTUP
  APP_initFlashOption();
  #endif

  FDCAN_FilterTypeDef filter_config;
  filter_config.IdType = FDCAN_STANDARD_ID;
 800079e:	2300      	movs	r3, #0
 80007a0:	603b      	str	r3, [r7, #0]
  filter_config.FilterIndex = 0;
 80007a2:	2300      	movs	r3, #0
 80007a4:	607b      	str	r3, [r7, #4]
  filter_config.FilterType = FDCAN_FILTER_MASK;
 80007a6:	2302      	movs	r3, #2
 80007a8:	60bb      	str	r3, [r7, #8]
  filter_config.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 80007aa:	2301      	movs	r3, #1
 80007ac:	60fb      	str	r3, [r7, #12]
  filter_config.FilterID1 = 0;
 80007ae:	2300      	movs	r3, #0
 80007b0:	613b      	str	r3, [r7, #16]
  filter_config.FilterID2 = 0;
 80007b2:	2300      	movs	r3, #0
 80007b4:	617b      	str	r3, [r7, #20]

  HAL_FDCAN_ConfigFilter(&hfdcan1, &filter_config);
 80007b6:	463b      	mov	r3, r7
 80007b8:	4619      	mov	r1, r3
 80007ba:	4807      	ldr	r0, [pc, #28]	; (80007d8 <APP_init+0x40>)
 80007bc:	f000 fee8 	bl	8001590 <HAL_FDCAN_ConfigFilter>
  HAL_FDCAN_Start(&hfdcan1);
 80007c0:	4805      	ldr	r0, [pc, #20]	; (80007d8 <APP_init+0x40>)
 80007c2:	f000 ff3f 	bl	8001644 <HAL_FDCAN_Start>
  HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0);
 80007c6:	2200      	movs	r2, #0
 80007c8:	2101      	movs	r1, #1
 80007ca:	4803      	ldr	r0, [pc, #12]	; (80007d8 <APP_init+0x40>)
 80007cc:	f001 f880 	bl	80018d0 <HAL_FDCAN_ActivateNotification>
}
 80007d0:	bf00      	nop
 80007d2:	3718      	adds	r7, #24
 80007d4:	46bd      	mov	sp, r7
 80007d6:	bd80      	pop	{r7, pc}
 80007d8:	2000032c 	.word	0x2000032c

080007dc <APP_main>:

void APP_main() {
 80007dc:	b580      	push	{r7, lr}
 80007de:	b0a0      	sub	sp, #128	; 0x80
 80007e0:	af00      	add	r7, sp, #0
  char str[128];
  sprintf(str, "hello\n");
 80007e2:	463b      	mov	r3, r7
 80007e4:	490a      	ldr	r1, [pc, #40]	; (8000810 <APP_main+0x34>)
 80007e6:	4618      	mov	r0, r3
 80007e8:	f009 fd4e 	bl	800a288 <siprintf>
  HAL_UART_Transmit(&huart2, (uint8_t *)str, strlen(str), 100);
 80007ec:	463b      	mov	r3, r7
 80007ee:	4618      	mov	r0, r3
 80007f0:	f7ff fd16 	bl	8000220 <strlen>
 80007f4:	4603      	mov	r3, r0
 80007f6:	b29a      	uxth	r2, r3
 80007f8:	4639      	mov	r1, r7
 80007fa:	2364      	movs	r3, #100	; 0x64
 80007fc:	4805      	ldr	r0, [pc, #20]	; (8000814 <APP_main+0x38>)
 80007fe:	f004 faa7 	bl	8004d50 <HAL_UART_Transmit>

  HAL_Delay(100);
 8000802:	2064      	movs	r0, #100	; 0x64
 8000804:	f000 fc38 	bl	8001078 <HAL_Delay>
}
 8000808:	bf00      	nop
 800080a:	3780      	adds	r7, #128	; 0x80
 800080c:	46bd      	mov	sp, r7
 800080e:	bd80      	pop	{r7, pc}
 8000810:	0800aba0 	.word	0x0800aba0
 8000814:	20000390 	.word	0x20000390

08000818 <CAN_getRxFrame>:
  status |= HAL_FDCAN_ActivateNotification(hfdcan, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0);

  return status;
}

void CAN_getRxFrame(FDCAN_HandleTypeDef *hfdcan, CAN_Frame *rx_frame) {
 8000818:	b580      	push	{r7, lr}
 800081a:	b08c      	sub	sp, #48	; 0x30
 800081c:	af00      	add	r7, sp, #0
 800081e:	6078      	str	r0, [r7, #4]
 8000820:	6039      	str	r1, [r7, #0]
  FDCAN_RxHeaderTypeDef rx_header;
  HAL_FDCAN_GetRxMessage(hfdcan, FDCAN_RX_FIFO0, &rx_header, rx_frame->data);
 8000822:	683b      	ldr	r3, [r7, #0]
 8000824:	3308      	adds	r3, #8
 8000826:	f107 0208 	add.w	r2, r7, #8
 800082a:	2140      	movs	r1, #64	; 0x40
 800082c:	6878      	ldr	r0, [r7, #4]
 800082e:	f000 ff75 	bl	800171c <HAL_FDCAN_GetRxMessage>

  rx_frame->id = rx_header.Identifier;
 8000832:	68ba      	ldr	r2, [r7, #8]
 8000834:	683b      	ldr	r3, [r7, #0]
 8000836:	601a      	str	r2, [r3, #0]
  rx_frame->id_type = (rx_header.IdType == FDCAN_STANDARD_ID) ? CAN_ID_STANDARD : CAN_ID_EXTENDED;
 8000838:	68fb      	ldr	r3, [r7, #12]
 800083a:	2b00      	cmp	r3, #0
 800083c:	bf14      	ite	ne
 800083e:	2301      	movne	r3, #1
 8000840:	2300      	moveq	r3, #0
 8000842:	b2db      	uxtb	r3, r3
 8000844:	461a      	mov	r2, r3
 8000846:	683b      	ldr	r3, [r7, #0]
 8000848:	711a      	strb	r2, [r3, #4]
  rx_frame->frame_type = (rx_header.RxFrameType == FDCAN_DATA_FRAME) ? CAN_FRAME_DATA : CAN_FRAME_REMOTE;
 800084a:	693b      	ldr	r3, [r7, #16]
 800084c:	2b00      	cmp	r3, #0
 800084e:	d101      	bne.n	8000854 <CAN_getRxFrame+0x3c>
 8000850:	2201      	movs	r2, #1
 8000852:	e000      	b.n	8000856 <CAN_getRxFrame+0x3e>
 8000854:	2200      	movs	r2, #0
 8000856:	683b      	ldr	r3, [r7, #0]
 8000858:	715a      	strb	r2, [r3, #5]
  switch (rx_header.DataLength) {
 800085a:	697b      	ldr	r3, [r7, #20]
 800085c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8000860:	d04c      	beq.n	80008fc <CAN_getRxFrame+0xe4>
 8000862:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8000866:	d84d      	bhi.n	8000904 <CAN_getRxFrame+0xec>
 8000868:	f5b3 2fe0 	cmp.w	r3, #458752	; 0x70000
 800086c:	d042      	beq.n	80008f4 <CAN_getRxFrame+0xdc>
 800086e:	f5b3 2fe0 	cmp.w	r3, #458752	; 0x70000
 8000872:	d847      	bhi.n	8000904 <CAN_getRxFrame+0xec>
 8000874:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 8000878:	d038      	beq.n	80008ec <CAN_getRxFrame+0xd4>
 800087a:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 800087e:	d841      	bhi.n	8000904 <CAN_getRxFrame+0xec>
 8000880:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000884:	d02e      	beq.n	80008e4 <CAN_getRxFrame+0xcc>
 8000886:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800088a:	d83b      	bhi.n	8000904 <CAN_getRxFrame+0xec>
 800088c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8000890:	d024      	beq.n	80008dc <CAN_getRxFrame+0xc4>
 8000892:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8000896:	d835      	bhi.n	8000904 <CAN_getRxFrame+0xec>
 8000898:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800089c:	d01a      	beq.n	80008d4 <CAN_getRxFrame+0xbc>
 800089e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80008a2:	d82f      	bhi.n	8000904 <CAN_getRxFrame+0xec>
 80008a4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80008a8:	d010      	beq.n	80008cc <CAN_getRxFrame+0xb4>
 80008aa:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80008ae:	d829      	bhi.n	8000904 <CAN_getRxFrame+0xec>
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	d003      	beq.n	80008bc <CAN_getRxFrame+0xa4>
 80008b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80008b8:	d004      	beq.n	80008c4 <CAN_getRxFrame+0xac>
 80008ba:	e023      	b.n	8000904 <CAN_getRxFrame+0xec>
    case FDCAN_DLC_BYTES_0:
      rx_frame->size = 0; break;
 80008bc:	683b      	ldr	r3, [r7, #0]
 80008be:	2200      	movs	r2, #0
 80008c0:	80da      	strh	r2, [r3, #6]
 80008c2:	e023      	b.n	800090c <CAN_getRxFrame+0xf4>
    case FDCAN_DLC_BYTES_1:
      rx_frame->size = 1; break;
 80008c4:	683b      	ldr	r3, [r7, #0]
 80008c6:	2201      	movs	r2, #1
 80008c8:	80da      	strh	r2, [r3, #6]
 80008ca:	e01f      	b.n	800090c <CAN_getRxFrame+0xf4>
    case FDCAN_DLC_BYTES_2:
      rx_frame->size = 2; break;
 80008cc:	683b      	ldr	r3, [r7, #0]
 80008ce:	2202      	movs	r2, #2
 80008d0:	80da      	strh	r2, [r3, #6]
 80008d2:	e01b      	b.n	800090c <CAN_getRxFrame+0xf4>
    case FDCAN_DLC_BYTES_3:
      rx_frame->size = 3; break;
 80008d4:	683b      	ldr	r3, [r7, #0]
 80008d6:	2203      	movs	r2, #3
 80008d8:	80da      	strh	r2, [r3, #6]
 80008da:	e017      	b.n	800090c <CAN_getRxFrame+0xf4>
    case FDCAN_DLC_BYTES_4:
      rx_frame->size = 4; break;
 80008dc:	683b      	ldr	r3, [r7, #0]
 80008de:	2204      	movs	r2, #4
 80008e0:	80da      	strh	r2, [r3, #6]
 80008e2:	e013      	b.n	800090c <CAN_getRxFrame+0xf4>
    case FDCAN_DLC_BYTES_5:
      rx_frame->size = 5; break;
 80008e4:	683b      	ldr	r3, [r7, #0]
 80008e6:	2205      	movs	r2, #5
 80008e8:	80da      	strh	r2, [r3, #6]
 80008ea:	e00f      	b.n	800090c <CAN_getRxFrame+0xf4>
    case FDCAN_DLC_BYTES_6:
      rx_frame->size = 6; break;
 80008ec:	683b      	ldr	r3, [r7, #0]
 80008ee:	2206      	movs	r2, #6
 80008f0:	80da      	strh	r2, [r3, #6]
 80008f2:	e00b      	b.n	800090c <CAN_getRxFrame+0xf4>
    case FDCAN_DLC_BYTES_7:
      rx_frame->size = 7; break;
 80008f4:	683b      	ldr	r3, [r7, #0]
 80008f6:	2207      	movs	r2, #7
 80008f8:	80da      	strh	r2, [r3, #6]
 80008fa:	e007      	b.n	800090c <CAN_getRxFrame+0xf4>
    case FDCAN_DLC_BYTES_8:
      rx_frame->size = 8; break;
 80008fc:	683b      	ldr	r3, [r7, #0]
 80008fe:	2208      	movs	r2, #8
 8000900:	80da      	strh	r2, [r3, #6]
 8000902:	e003      	b.n	800090c <CAN_getRxFrame+0xf4>
    default:
      rx_frame->size = 0;
 8000904:	683b      	ldr	r3, [r7, #0]
 8000906:	2200      	movs	r2, #0
 8000908:	80da      	strh	r2, [r3, #6]
  }
}
 800090a:	bf00      	nop
 800090c:	bf00      	nop
 800090e:	3730      	adds	r7, #48	; 0x30
 8000910:	46bd      	mov	sp, r7
 8000912:	bd80      	pop	{r7, pc}

08000914 <CAN_putTxFrame>:

HAL_StatusTypeDef CAN_putTxFrame(FDCAN_HandleTypeDef *hfdcan, CAN_Frame *tx_frame) {
 8000914:	b580      	push	{r7, lr}
 8000916:	b08c      	sub	sp, #48	; 0x30
 8000918:	af00      	add	r7, sp, #0
 800091a:	6078      	str	r0, [r7, #4]
 800091c:	6039      	str	r1, [r7, #0]
  FDCAN_TxHeaderTypeDef tx_header;

  tx_header.Identifier = tx_frame->id;
 800091e:	683b      	ldr	r3, [r7, #0]
 8000920:	681b      	ldr	r3, [r3, #0]
 8000922:	60fb      	str	r3, [r7, #12]
  tx_header.IdType = (tx_frame->id_type == CAN_ID_STANDARD) ? FDCAN_STANDARD_ID : FDCAN_EXTENDED_ID;
 8000924:	683b      	ldr	r3, [r7, #0]
 8000926:	791b      	ldrb	r3, [r3, #4]
 8000928:	2b00      	cmp	r3, #0
 800092a:	d101      	bne.n	8000930 <CAN_putTxFrame+0x1c>
 800092c:	2300      	movs	r3, #0
 800092e:	e001      	b.n	8000934 <CAN_putTxFrame+0x20>
 8000930:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000934:	613b      	str	r3, [r7, #16]
  tx_header.TxFrameType = (tx_frame->frame_type == CAN_FRAME_DATA) ? FDCAN_DATA_FRAME : FDCAN_REMOTE_FRAME;
 8000936:	683b      	ldr	r3, [r7, #0]
 8000938:	795b      	ldrb	r3, [r3, #5]
 800093a:	2b01      	cmp	r3, #1
 800093c:	d101      	bne.n	8000942 <CAN_putTxFrame+0x2e>
 800093e:	2300      	movs	r3, #0
 8000940:	e001      	b.n	8000946 <CAN_putTxFrame+0x32>
 8000942:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8000946:	617b      	str	r3, [r7, #20]
  switch (tx_frame->size) {
 8000948:	683b      	ldr	r3, [r7, #0]
 800094a:	88db      	ldrh	r3, [r3, #6]
 800094c:	2b08      	cmp	r3, #8
 800094e:	d838      	bhi.n	80009c2 <CAN_putTxFrame+0xae>
 8000950:	a201      	add	r2, pc, #4	; (adr r2, 8000958 <CAN_putTxFrame+0x44>)
 8000952:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000956:	bf00      	nop
 8000958:	0800097d 	.word	0x0800097d
 800095c:	08000983 	.word	0x08000983
 8000960:	0800098b 	.word	0x0800098b
 8000964:	08000993 	.word	0x08000993
 8000968:	0800099b 	.word	0x0800099b
 800096c:	080009a3 	.word	0x080009a3
 8000970:	080009ab 	.word	0x080009ab
 8000974:	080009b3 	.word	0x080009b3
 8000978:	080009bb 	.word	0x080009bb
    case 0:
      tx_header.DataLength = FDCAN_DLC_BYTES_0; break;
 800097c:	2300      	movs	r3, #0
 800097e:	61bb      	str	r3, [r7, #24]
 8000980:	e021      	b.n	80009c6 <CAN_putTxFrame+0xb2>
    case 1:
      tx_header.DataLength = FDCAN_DLC_BYTES_1; break;
 8000982:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000986:	61bb      	str	r3, [r7, #24]
 8000988:	e01d      	b.n	80009c6 <CAN_putTxFrame+0xb2>
    case 2:
      tx_header.DataLength = FDCAN_DLC_BYTES_2; break;
 800098a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800098e:	61bb      	str	r3, [r7, #24]
 8000990:	e019      	b.n	80009c6 <CAN_putTxFrame+0xb2>
    case 3:
      tx_header.DataLength = FDCAN_DLC_BYTES_3; break;
 8000992:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8000996:	61bb      	str	r3, [r7, #24]
 8000998:	e015      	b.n	80009c6 <CAN_putTxFrame+0xb2>
    case 4:
      tx_header.DataLength = FDCAN_DLC_BYTES_4; break;
 800099a:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800099e:	61bb      	str	r3, [r7, #24]
 80009a0:	e011      	b.n	80009c6 <CAN_putTxFrame+0xb2>
    case 5:
      tx_header.DataLength = FDCAN_DLC_BYTES_5; break;
 80009a2:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80009a6:	61bb      	str	r3, [r7, #24]
 80009a8:	e00d      	b.n	80009c6 <CAN_putTxFrame+0xb2>
    case 6:
      tx_header.DataLength = FDCAN_DLC_BYTES_6; break;
 80009aa:	f44f 23c0 	mov.w	r3, #393216	; 0x60000
 80009ae:	61bb      	str	r3, [r7, #24]
 80009b0:	e009      	b.n	80009c6 <CAN_putTxFrame+0xb2>
    case 7:
      tx_header.DataLength = FDCAN_DLC_BYTES_7; break;
 80009b2:	f44f 23e0 	mov.w	r3, #458752	; 0x70000
 80009b6:	61bb      	str	r3, [r7, #24]
 80009b8:	e005      	b.n	80009c6 <CAN_putTxFrame+0xb2>
    case 8:
      tx_header.DataLength = FDCAN_DLC_BYTES_8; break;
 80009ba:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80009be:	61bb      	str	r3, [r7, #24]
 80009c0:	e001      	b.n	80009c6 <CAN_putTxFrame+0xb2>
    default:
      tx_header.DataLength = FDCAN_DLC_BYTES_0;
 80009c2:	2300      	movs	r3, #0
 80009c4:	61bb      	str	r3, [r7, #24]
  }
  tx_header.ErrorStateIndicator = FDCAN_ESI_PASSIVE;
 80009c6:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80009ca:	61fb      	str	r3, [r7, #28]
  tx_header.BitRateSwitch = FDCAN_BRS_OFF;
 80009cc:	2300      	movs	r3, #0
 80009ce:	623b      	str	r3, [r7, #32]
  tx_header.FDFormat = FDCAN_CLASSIC_CAN;
 80009d0:	2300      	movs	r3, #0
 80009d2:	627b      	str	r3, [r7, #36]	; 0x24
  tx_header.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 80009d4:	2300      	movs	r3, #0
 80009d6:	62bb      	str	r3, [r7, #40]	; 0x28
  tx_header.MessageMarker = 0;
 80009d8:	2300      	movs	r3, #0
 80009da:	62fb      	str	r3, [r7, #44]	; 0x2c

  return HAL_FDCAN_AddMessageToTxFifoQ(hfdcan, &tx_header, tx_frame->data);
 80009dc:	683b      	ldr	r3, [r7, #0]
 80009de:	f103 0208 	add.w	r2, r3, #8
 80009e2:	f107 030c 	add.w	r3, r7, #12
 80009e6:	4619      	mov	r1, r3
 80009e8:	6878      	ldr	r0, [r7, #4]
 80009ea:	f000 fe53 	bl	8001694 <HAL_FDCAN_AddMessageToTxFifoQ>
 80009ee:	4603      	mov	r3, r0
}
 80009f0:	4618      	mov	r0, r3
 80009f2:	3730      	adds	r7, #48	; 0x30
 80009f4:	46bd      	mov	sp, r7
 80009f6:	bd80      	pop	{r7, pc}

080009f8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009fc:	f000 facb 	bl	8000f96 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a00:	f000 f80d 	bl	8000a1e <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a04:	f000 f8e8 	bl	8000bd8 <MX_GPIO_Init>
  MX_FDCAN1_Init();
 8000a08:	f000 f854 	bl	8000ab4 <MX_FDCAN1_Init>
  MX_USART2_UART_Init();
 8000a0c:	f000 f898 	bl	8000b40 <MX_USART2_UART_Init>
  MX_USB_Device_Init();
 8000a10:	f008 fed0 	bl	80097b4 <MX_USB_Device_Init>
  /* USER CODE BEGIN 2 */
  APP_init();
 8000a14:	f7ff fec0 	bl	8000798 <APP_init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    APP_main();
 8000a18:	f7ff fee0 	bl	80007dc <APP_main>
 8000a1c:	e7fc      	b.n	8000a18 <main+0x20>

08000a1e <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a1e:	b580      	push	{r7, lr}
 8000a20:	b094      	sub	sp, #80	; 0x50
 8000a22:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a24:	f107 0318 	add.w	r3, r7, #24
 8000a28:	2238      	movs	r2, #56	; 0x38
 8000a2a:	2100      	movs	r1, #0
 8000a2c:	4618      	mov	r0, r3
 8000a2e:	f009 fc23 	bl	800a278 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a32:	1d3b      	adds	r3, r7, #4
 8000a34:	2200      	movs	r2, #0
 8000a36:	601a      	str	r2, [r3, #0]
 8000a38:	605a      	str	r2, [r3, #4]
 8000a3a:	609a      	str	r2, [r3, #8]
 8000a3c:	60da      	str	r2, [r3, #12]
 8000a3e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000a40:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000a44:	f003 f96c 	bl	8003d20 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000a48:	2301      	movs	r3, #1
 8000a4a:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000a4c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000a50:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a52:	2302      	movs	r3, #2
 8000a54:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000a56:	2303      	movs	r3, #3
 8000a58:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8000a5a:	2301      	movs	r3, #1
 8000a5c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 36;
 8000a5e:	2324      	movs	r3, #36	; 0x24
 8000a60:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000a62:	2302      	movs	r3, #2
 8000a64:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV6;
 8000a66:	2306      	movs	r3, #6
 8000a68:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000a6a:	2302      	movs	r3, #2
 8000a6c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a6e:	f107 0318 	add.w	r3, r7, #24
 8000a72:	4618      	mov	r0, r3
 8000a74:	f003 f9f8 	bl	8003e68 <HAL_RCC_OscConfig>
 8000a78:	4603      	mov	r3, r0
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	d001      	beq.n	8000a82 <SystemClock_Config+0x64>
  {
    Error_Handler();
 8000a7e:	f000 f8f5 	bl	8000c6c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a82:	230f      	movs	r3, #15
 8000a84:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a86:	2303      	movs	r3, #3
 8000a88:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000a8e:	2300      	movs	r3, #0
 8000a90:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a92:	2300      	movs	r3, #0
 8000a94:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000a96:	1d3b      	adds	r3, r7, #4
 8000a98:	2104      	movs	r1, #4
 8000a9a:	4618      	mov	r0, r3
 8000a9c:	f003 fcfc 	bl	8004498 <HAL_RCC_ClockConfig>
 8000aa0:	4603      	mov	r3, r0
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	d001      	beq.n	8000aaa <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8000aa6:	f000 f8e1 	bl	8000c6c <Error_Handler>
  }
}
 8000aaa:	bf00      	nop
 8000aac:	3750      	adds	r7, #80	; 0x50
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	bd80      	pop	{r7, pc}
	...

08000ab4 <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8000ab8:	4b1f      	ldr	r3, [pc, #124]	; (8000b38 <MX_FDCAN1_Init+0x84>)
 8000aba:	4a20      	ldr	r2, [pc, #128]	; (8000b3c <MX_FDCAN1_Init+0x88>)
 8000abc:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 8000abe:	4b1e      	ldr	r3, [pc, #120]	; (8000b38 <MX_FDCAN1_Init+0x84>)
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000ac4:	4b1c      	ldr	r3, [pc, #112]	; (8000b38 <MX_FDCAN1_Init+0x84>)
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8000aca:	4b1b      	ldr	r3, [pc, #108]	; (8000b38 <MX_FDCAN1_Init+0x84>)
 8000acc:	2200      	movs	r2, #0
 8000ace:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 8000ad0:	4b19      	ldr	r3, [pc, #100]	; (8000b38 <MX_FDCAN1_Init+0x84>)
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8000ad6:	4b18      	ldr	r3, [pc, #96]	; (8000b38 <MX_FDCAN1_Init+0x84>)
 8000ad8:	2200      	movs	r2, #0
 8000ada:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8000adc:	4b16      	ldr	r3, [pc, #88]	; (8000b38 <MX_FDCAN1_Init+0x84>)
 8000ade:	2200      	movs	r2, #0
 8000ae0:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 36;
 8000ae2:	4b15      	ldr	r3, [pc, #84]	; (8000b38 <MX_FDCAN1_Init+0x84>)
 8000ae4:	2224      	movs	r2, #36	; 0x24
 8000ae6:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 8000ae8:	4b13      	ldr	r3, [pc, #76]	; (8000b38 <MX_FDCAN1_Init+0x84>)
 8000aea:	2201      	movs	r2, #1
 8000aec:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 5;
 8000aee:	4b12      	ldr	r3, [pc, #72]	; (8000b38 <MX_FDCAN1_Init+0x84>)
 8000af0:	2205      	movs	r2, #5
 8000af2:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 8000af4:	4b10      	ldr	r3, [pc, #64]	; (8000b38 <MX_FDCAN1_Init+0x84>)
 8000af6:	2202      	movs	r2, #2
 8000af8:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 8000afa:	4b0f      	ldr	r3, [pc, #60]	; (8000b38 <MX_FDCAN1_Init+0x84>)
 8000afc:	2201      	movs	r2, #1
 8000afe:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 8000b00:	4b0d      	ldr	r3, [pc, #52]	; (8000b38 <MX_FDCAN1_Init+0x84>)
 8000b02:	2201      	movs	r2, #1
 8000b04:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 8000b06:	4b0c      	ldr	r3, [pc, #48]	; (8000b38 <MX_FDCAN1_Init+0x84>)
 8000b08:	2201      	movs	r2, #1
 8000b0a:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 8000b0c:	4b0a      	ldr	r3, [pc, #40]	; (8000b38 <MX_FDCAN1_Init+0x84>)
 8000b0e:	2201      	movs	r2, #1
 8000b10:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.StdFiltersNbr = 0;
 8000b12:	4b09      	ldr	r3, [pc, #36]	; (8000b38 <MX_FDCAN1_Init+0x84>)
 8000b14:	2200      	movs	r2, #0
 8000b16:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.ExtFiltersNbr = 0;
 8000b18:	4b07      	ldr	r3, [pc, #28]	; (8000b38 <MX_FDCAN1_Init+0x84>)
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000b1e:	4b06      	ldr	r3, [pc, #24]	; (8000b38 <MX_FDCAN1_Init+0x84>)
 8000b20:	2200      	movs	r2, #0
 8000b22:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8000b24:	4804      	ldr	r0, [pc, #16]	; (8000b38 <MX_FDCAN1_Init+0x84>)
 8000b26:	f000 fbd9 	bl	80012dc <HAL_FDCAN_Init>
 8000b2a:	4603      	mov	r3, r0
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d001      	beq.n	8000b34 <MX_FDCAN1_Init+0x80>
  {
    Error_Handler();
 8000b30:	f000 f89c 	bl	8000c6c <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 8000b34:	bf00      	nop
 8000b36:	bd80      	pop	{r7, pc}
 8000b38:	2000032c 	.word	0x2000032c
 8000b3c:	40006400 	.word	0x40006400

08000b40 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000b44:	4b22      	ldr	r3, [pc, #136]	; (8000bd0 <MX_USART2_UART_Init+0x90>)
 8000b46:	4a23      	ldr	r2, [pc, #140]	; (8000bd4 <MX_USART2_UART_Init+0x94>)
 8000b48:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000b4a:	4b21      	ldr	r3, [pc, #132]	; (8000bd0 <MX_USART2_UART_Init+0x90>)
 8000b4c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b50:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000b52:	4b1f      	ldr	r3, [pc, #124]	; (8000bd0 <MX_USART2_UART_Init+0x90>)
 8000b54:	2200      	movs	r2, #0
 8000b56:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000b58:	4b1d      	ldr	r3, [pc, #116]	; (8000bd0 <MX_USART2_UART_Init+0x90>)
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000b5e:	4b1c      	ldr	r3, [pc, #112]	; (8000bd0 <MX_USART2_UART_Init+0x90>)
 8000b60:	2200      	movs	r2, #0
 8000b62:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000b64:	4b1a      	ldr	r3, [pc, #104]	; (8000bd0 <MX_USART2_UART_Init+0x90>)
 8000b66:	220c      	movs	r2, #12
 8000b68:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b6a:	4b19      	ldr	r3, [pc, #100]	; (8000bd0 <MX_USART2_UART_Init+0x90>)
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b70:	4b17      	ldr	r3, [pc, #92]	; (8000bd0 <MX_USART2_UART_Init+0x90>)
 8000b72:	2200      	movs	r2, #0
 8000b74:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b76:	4b16      	ldr	r3, [pc, #88]	; (8000bd0 <MX_USART2_UART_Init+0x90>)
 8000b78:	2200      	movs	r2, #0
 8000b7a:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000b7c:	4b14      	ldr	r3, [pc, #80]	; (8000bd0 <MX_USART2_UART_Init+0x90>)
 8000b7e:	2200      	movs	r2, #0
 8000b80:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b82:	4b13      	ldr	r3, [pc, #76]	; (8000bd0 <MX_USART2_UART_Init+0x90>)
 8000b84:	2200      	movs	r2, #0
 8000b86:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000b88:	4811      	ldr	r0, [pc, #68]	; (8000bd0 <MX_USART2_UART_Init+0x90>)
 8000b8a:	f004 f891 	bl	8004cb0 <HAL_UART_Init>
 8000b8e:	4603      	mov	r3, r0
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	d001      	beq.n	8000b98 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000b94:	f000 f86a 	bl	8000c6c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b98:	2100      	movs	r1, #0
 8000b9a:	480d      	ldr	r0, [pc, #52]	; (8000bd0 <MX_USART2_UART_Init+0x90>)
 8000b9c:	f004 fe28 	bl	80057f0 <HAL_UARTEx_SetTxFifoThreshold>
 8000ba0:	4603      	mov	r3, r0
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d001      	beq.n	8000baa <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8000ba6:	f000 f861 	bl	8000c6c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000baa:	2100      	movs	r1, #0
 8000bac:	4808      	ldr	r0, [pc, #32]	; (8000bd0 <MX_USART2_UART_Init+0x90>)
 8000bae:	f004 fe5d 	bl	800586c <HAL_UARTEx_SetRxFifoThreshold>
 8000bb2:	4603      	mov	r3, r0
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d001      	beq.n	8000bbc <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000bb8:	f000 f858 	bl	8000c6c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000bbc:	4804      	ldr	r0, [pc, #16]	; (8000bd0 <MX_USART2_UART_Init+0x90>)
 8000bbe:	f004 fdde 	bl	800577e <HAL_UARTEx_DisableFifoMode>
 8000bc2:	4603      	mov	r3, r0
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	d001      	beq.n	8000bcc <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000bc8:	f000 f850 	bl	8000c6c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000bcc:	bf00      	nop
 8000bce:	bd80      	pop	{r7, pc}
 8000bd0:	20000390 	.word	0x20000390
 8000bd4:	40004400 	.word	0x40004400

08000bd8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b088      	sub	sp, #32
 8000bdc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bde:	f107 030c 	add.w	r3, r7, #12
 8000be2:	2200      	movs	r2, #0
 8000be4:	601a      	str	r2, [r3, #0]
 8000be6:	605a      	str	r2, [r3, #4]
 8000be8:	609a      	str	r2, [r3, #8]
 8000bea:	60da      	str	r2, [r3, #12]
 8000bec:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000bee:	4b1e      	ldr	r3, [pc, #120]	; (8000c68 <MX_GPIO_Init+0x90>)
 8000bf0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bf2:	4a1d      	ldr	r2, [pc, #116]	; (8000c68 <MX_GPIO_Init+0x90>)
 8000bf4:	f043 0320 	orr.w	r3, r3, #32
 8000bf8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000bfa:	4b1b      	ldr	r3, [pc, #108]	; (8000c68 <MX_GPIO_Init+0x90>)
 8000bfc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bfe:	f003 0320 	and.w	r3, r3, #32
 8000c02:	60bb      	str	r3, [r7, #8]
 8000c04:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c06:	4b18      	ldr	r3, [pc, #96]	; (8000c68 <MX_GPIO_Init+0x90>)
 8000c08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c0a:	4a17      	ldr	r2, [pc, #92]	; (8000c68 <MX_GPIO_Init+0x90>)
 8000c0c:	f043 0301 	orr.w	r3, r3, #1
 8000c10:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c12:	4b15      	ldr	r3, [pc, #84]	; (8000c68 <MX_GPIO_Init+0x90>)
 8000c14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c16:	f003 0301 	and.w	r3, r3, #1
 8000c1a:	607b      	str	r3, [r7, #4]
 8000c1c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c1e:	4b12      	ldr	r3, [pc, #72]	; (8000c68 <MX_GPIO_Init+0x90>)
 8000c20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c22:	4a11      	ldr	r2, [pc, #68]	; (8000c68 <MX_GPIO_Init+0x90>)
 8000c24:	f043 0302 	orr.w	r3, r3, #2
 8000c28:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c2a:	4b0f      	ldr	r3, [pc, #60]	; (8000c68 <MX_GPIO_Init+0x90>)
 8000c2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c2e:	f003 0302 	and.w	r3, r3, #2
 8000c32:	603b      	str	r3, [r7, #0]
 8000c34:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_SET);
 8000c36:	2201      	movs	r2, #1
 8000c38:	21c0      	movs	r1, #192	; 0xc0
 8000c3a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c3e:	f001 fb23 	bl	8002288 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000c42:	23c0      	movs	r3, #192	; 0xc0
 8000c44:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000c46:	2311      	movs	r3, #17
 8000c48:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c4e:	2300      	movs	r3, #0
 8000c50:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c52:	f107 030c 	add.w	r3, r7, #12
 8000c56:	4619      	mov	r1, r3
 8000c58:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c5c:	f001 f992 	bl	8001f84 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000c60:	bf00      	nop
 8000c62:	3720      	adds	r7, #32
 8000c64:	46bd      	mov	sp, r7
 8000c66:	bd80      	pop	{r7, pc}
 8000c68:	40021000 	.word	0x40021000

08000c6c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c6c:	b480      	push	{r7}
 8000c6e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c70:	b672      	cpsid	i
}
 8000c72:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c74:	e7fe      	b.n	8000c74 <Error_Handler+0x8>
	...

08000c78 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c78:	b480      	push	{r7}
 8000c7a:	b083      	sub	sp, #12
 8000c7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c7e:	4b0f      	ldr	r3, [pc, #60]	; (8000cbc <HAL_MspInit+0x44>)
 8000c80:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c82:	4a0e      	ldr	r2, [pc, #56]	; (8000cbc <HAL_MspInit+0x44>)
 8000c84:	f043 0301 	orr.w	r3, r3, #1
 8000c88:	6613      	str	r3, [r2, #96]	; 0x60
 8000c8a:	4b0c      	ldr	r3, [pc, #48]	; (8000cbc <HAL_MspInit+0x44>)
 8000c8c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c8e:	f003 0301 	and.w	r3, r3, #1
 8000c92:	607b      	str	r3, [r7, #4]
 8000c94:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c96:	4b09      	ldr	r3, [pc, #36]	; (8000cbc <HAL_MspInit+0x44>)
 8000c98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c9a:	4a08      	ldr	r2, [pc, #32]	; (8000cbc <HAL_MspInit+0x44>)
 8000c9c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ca0:	6593      	str	r3, [r2, #88]	; 0x58
 8000ca2:	4b06      	ldr	r3, [pc, #24]	; (8000cbc <HAL_MspInit+0x44>)
 8000ca4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ca6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000caa:	603b      	str	r3, [r7, #0]
 8000cac:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cae:	bf00      	nop
 8000cb0:	370c      	adds	r7, #12
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb8:	4770      	bx	lr
 8000cba:	bf00      	nop
 8000cbc:	40021000 	.word	0x40021000

08000cc0 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b09a      	sub	sp, #104	; 0x68
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cc8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000ccc:	2200      	movs	r2, #0
 8000cce:	601a      	str	r2, [r3, #0]
 8000cd0:	605a      	str	r2, [r3, #4]
 8000cd2:	609a      	str	r2, [r3, #8]
 8000cd4:	60da      	str	r2, [r3, #12]
 8000cd6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000cd8:	f107 0310 	add.w	r3, r7, #16
 8000cdc:	2244      	movs	r2, #68	; 0x44
 8000cde:	2100      	movs	r1, #0
 8000ce0:	4618      	mov	r0, r3
 8000ce2:	f009 fac9 	bl	800a278 <memset>
  if(hfdcan->Instance==FDCAN1)
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	4a24      	ldr	r2, [pc, #144]	; (8000d7c <HAL_FDCAN_MspInit+0xbc>)
 8000cec:	4293      	cmp	r3, r2
 8000cee:	d140      	bne.n	8000d72 <HAL_FDCAN_MspInit+0xb2>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8000cf0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000cf4:	613b      	str	r3, [r7, #16]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 8000cf6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000cfa:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000cfc:	f107 0310 	add.w	r3, r7, #16
 8000d00:	4618      	mov	r0, r3
 8000d02:	f003 fde5 	bl	80048d0 <HAL_RCCEx_PeriphCLKConfig>
 8000d06:	4603      	mov	r3, r0
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d001      	beq.n	8000d10 <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 8000d0c:	f7ff ffae 	bl	8000c6c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8000d10:	4b1b      	ldr	r3, [pc, #108]	; (8000d80 <HAL_FDCAN_MspInit+0xc0>)
 8000d12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d14:	4a1a      	ldr	r2, [pc, #104]	; (8000d80 <HAL_FDCAN_MspInit+0xc0>)
 8000d16:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000d1a:	6593      	str	r3, [r2, #88]	; 0x58
 8000d1c:	4b18      	ldr	r3, [pc, #96]	; (8000d80 <HAL_FDCAN_MspInit+0xc0>)
 8000d1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d20:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000d24:	60fb      	str	r3, [r7, #12]
 8000d26:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d28:	4b15      	ldr	r3, [pc, #84]	; (8000d80 <HAL_FDCAN_MspInit+0xc0>)
 8000d2a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d2c:	4a14      	ldr	r2, [pc, #80]	; (8000d80 <HAL_FDCAN_MspInit+0xc0>)
 8000d2e:	f043 0302 	orr.w	r3, r3, #2
 8000d32:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d34:	4b12      	ldr	r3, [pc, #72]	; (8000d80 <HAL_FDCAN_MspInit+0xc0>)
 8000d36:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d38:	f003 0302 	and.w	r3, r3, #2
 8000d3c:	60bb      	str	r3, [r7, #8]
 8000d3e:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PB8-BOOT0     ------> FDCAN1_RX
    PB9     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000d40:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000d44:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d46:	2302      	movs	r3, #2
 8000d48:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d4e:	2300      	movs	r3, #0
 8000d50:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8000d52:	2309      	movs	r3, #9
 8000d54:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d56:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000d5a:	4619      	mov	r1, r3
 8000d5c:	4809      	ldr	r0, [pc, #36]	; (8000d84 <HAL_FDCAN_MspInit+0xc4>)
 8000d5e:	f001 f911 	bl	8001f84 <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 0, 0);
 8000d62:	2200      	movs	r2, #0
 8000d64:	2100      	movs	r1, #0
 8000d66:	2015      	movs	r0, #21
 8000d68:	f000 fa83 	bl	8001272 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 8000d6c:	2015      	movs	r0, #21
 8000d6e:	f000 fa9a 	bl	80012a6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }

}
 8000d72:	bf00      	nop
 8000d74:	3768      	adds	r7, #104	; 0x68
 8000d76:	46bd      	mov	sp, r7
 8000d78:	bd80      	pop	{r7, pc}
 8000d7a:	bf00      	nop
 8000d7c:	40006400 	.word	0x40006400
 8000d80:	40021000 	.word	0x40021000
 8000d84:	48000400 	.word	0x48000400

08000d88 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b09a      	sub	sp, #104	; 0x68
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d90:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000d94:	2200      	movs	r2, #0
 8000d96:	601a      	str	r2, [r3, #0]
 8000d98:	605a      	str	r2, [r3, #4]
 8000d9a:	609a      	str	r2, [r3, #8]
 8000d9c:	60da      	str	r2, [r3, #12]
 8000d9e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000da0:	f107 0310 	add.w	r3, r7, #16
 8000da4:	2244      	movs	r2, #68	; 0x44
 8000da6:	2100      	movs	r1, #0
 8000da8:	4618      	mov	r0, r3
 8000daa:	f009 fa65 	bl	800a278 <memset>
  if(huart->Instance==USART2)
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	4a1f      	ldr	r2, [pc, #124]	; (8000e30 <HAL_UART_MspInit+0xa8>)
 8000db4:	4293      	cmp	r3, r2
 8000db6:	d136      	bne.n	8000e26 <HAL_UART_MspInit+0x9e>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000db8:	2302      	movs	r3, #2
 8000dba:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000dc0:	f107 0310 	add.w	r3, r7, #16
 8000dc4:	4618      	mov	r0, r3
 8000dc6:	f003 fd83 	bl	80048d0 <HAL_RCCEx_PeriphCLKConfig>
 8000dca:	4603      	mov	r3, r0
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d001      	beq.n	8000dd4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000dd0:	f7ff ff4c 	bl	8000c6c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000dd4:	4b17      	ldr	r3, [pc, #92]	; (8000e34 <HAL_UART_MspInit+0xac>)
 8000dd6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000dd8:	4a16      	ldr	r2, [pc, #88]	; (8000e34 <HAL_UART_MspInit+0xac>)
 8000dda:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000dde:	6593      	str	r3, [r2, #88]	; 0x58
 8000de0:	4b14      	ldr	r3, [pc, #80]	; (8000e34 <HAL_UART_MspInit+0xac>)
 8000de2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000de4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000de8:	60fb      	str	r3, [r7, #12]
 8000dea:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dec:	4b11      	ldr	r3, [pc, #68]	; (8000e34 <HAL_UART_MspInit+0xac>)
 8000dee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000df0:	4a10      	ldr	r2, [pc, #64]	; (8000e34 <HAL_UART_MspInit+0xac>)
 8000df2:	f043 0301 	orr.w	r3, r3, #1
 8000df6:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000df8:	4b0e      	ldr	r3, [pc, #56]	; (8000e34 <HAL_UART_MspInit+0xac>)
 8000dfa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dfc:	f003 0301 	and.w	r3, r3, #1
 8000e00:	60bb      	str	r3, [r7, #8]
 8000e02:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000e04:	230c      	movs	r3, #12
 8000e06:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e08:	2302      	movs	r3, #2
 8000e0a:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e10:	2300      	movs	r3, #0
 8000e12:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000e14:	2307      	movs	r3, #7
 8000e16:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e18:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000e1c:	4619      	mov	r1, r3
 8000e1e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e22:	f001 f8af 	bl	8001f84 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000e26:	bf00      	nop
 8000e28:	3768      	adds	r7, #104	; 0x68
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	bd80      	pop	{r7, pc}
 8000e2e:	bf00      	nop
 8000e30:	40004400 	.word	0x40004400
 8000e34:	40021000 	.word	0x40021000

08000e38 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e38:	b480      	push	{r7}
 8000e3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e3c:	e7fe      	b.n	8000e3c <NMI_Handler+0x4>

08000e3e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e3e:	b480      	push	{r7}
 8000e40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e42:	e7fe      	b.n	8000e42 <HardFault_Handler+0x4>

08000e44 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e44:	b480      	push	{r7}
 8000e46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e48:	e7fe      	b.n	8000e48 <MemManage_Handler+0x4>

08000e4a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e4a:	b480      	push	{r7}
 8000e4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e4e:	e7fe      	b.n	8000e4e <BusFault_Handler+0x4>

08000e50 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e50:	b480      	push	{r7}
 8000e52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e54:	e7fe      	b.n	8000e54 <UsageFault_Handler+0x4>

08000e56 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e56:	b480      	push	{r7}
 8000e58:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e5a:	bf00      	nop
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e62:	4770      	bx	lr

08000e64 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e64:	b480      	push	{r7}
 8000e66:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e68:	bf00      	nop
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e70:	4770      	bx	lr

08000e72 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e72:	b480      	push	{r7}
 8000e74:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e76:	bf00      	nop
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7e:	4770      	bx	lr

08000e80 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e84:	f000 f8da 	bl	800103c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e88:	bf00      	nop
 8000e8a:	bd80      	pop	{r7, pc}

08000e8c <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt remap.
  */
void USB_LP_IRQHandler(void)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000e90:	4802      	ldr	r0, [pc, #8]	; (8000e9c <USB_LP_IRQHandler+0x10>)
 8000e92:	f001 fb18 	bl	80024c6 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 8000e96:	bf00      	nop
 8000e98:	bd80      	pop	{r7, pc}
 8000e9a:	bf00      	nop
 8000e9c:	200009fc 	.word	0x200009fc

08000ea0 <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8000ea4:	4802      	ldr	r0, [pc, #8]	; (8000eb0 <FDCAN1_IT0_IRQHandler+0x10>)
 8000ea6:	f000 fdf9 	bl	8001a9c <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 8000eaa:	bf00      	nop
 8000eac:	bd80      	pop	{r7, pc}
 8000eae:	bf00      	nop
 8000eb0:	2000032c 	.word	0x2000032c

08000eb4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b086      	sub	sp, #24
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ebc:	4a14      	ldr	r2, [pc, #80]	; (8000f10 <_sbrk+0x5c>)
 8000ebe:	4b15      	ldr	r3, [pc, #84]	; (8000f14 <_sbrk+0x60>)
 8000ec0:	1ad3      	subs	r3, r2, r3
 8000ec2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ec4:	697b      	ldr	r3, [r7, #20]
 8000ec6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ec8:	4b13      	ldr	r3, [pc, #76]	; (8000f18 <_sbrk+0x64>)
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d102      	bne.n	8000ed6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ed0:	4b11      	ldr	r3, [pc, #68]	; (8000f18 <_sbrk+0x64>)
 8000ed2:	4a12      	ldr	r2, [pc, #72]	; (8000f1c <_sbrk+0x68>)
 8000ed4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000ed6:	4b10      	ldr	r3, [pc, #64]	; (8000f18 <_sbrk+0x64>)
 8000ed8:	681a      	ldr	r2, [r3, #0]
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	4413      	add	r3, r2
 8000ede:	693a      	ldr	r2, [r7, #16]
 8000ee0:	429a      	cmp	r2, r3
 8000ee2:	d207      	bcs.n	8000ef4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ee4:	f009 f990 	bl	800a208 <__errno>
 8000ee8:	4603      	mov	r3, r0
 8000eea:	220c      	movs	r2, #12
 8000eec:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000eee:	f04f 33ff 	mov.w	r3, #4294967295
 8000ef2:	e009      	b.n	8000f08 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ef4:	4b08      	ldr	r3, [pc, #32]	; (8000f18 <_sbrk+0x64>)
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000efa:	4b07      	ldr	r3, [pc, #28]	; (8000f18 <_sbrk+0x64>)
 8000efc:	681a      	ldr	r2, [r3, #0]
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	4413      	add	r3, r2
 8000f02:	4a05      	ldr	r2, [pc, #20]	; (8000f18 <_sbrk+0x64>)
 8000f04:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f06:	68fb      	ldr	r3, [r7, #12]
}
 8000f08:	4618      	mov	r0, r3
 8000f0a:	3718      	adds	r7, #24
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	bd80      	pop	{r7, pc}
 8000f10:	20008000 	.word	0x20008000
 8000f14:	00000400 	.word	0x00000400
 8000f18:	20000420 	.word	0x20000420
 8000f1c:	20000f20 	.word	0x20000f20

08000f20 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000f20:	b480      	push	{r7}
 8000f22:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000f24:	4b06      	ldr	r3, [pc, #24]	; (8000f40 <SystemInit+0x20>)
 8000f26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f2a:	4a05      	ldr	r2, [pc, #20]	; (8000f40 <SystemInit+0x20>)
 8000f2c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f30:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f34:	bf00      	nop
 8000f36:	46bd      	mov	sp, r7
 8000f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3c:	4770      	bx	lr
 8000f3e:	bf00      	nop
 8000f40:	e000ed00 	.word	0xe000ed00

08000f44 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000f44:	480d      	ldr	r0, [pc, #52]	; (8000f7c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000f46:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f48:	480d      	ldr	r0, [pc, #52]	; (8000f80 <LoopForever+0x6>)
  ldr r1, =_edata
 8000f4a:	490e      	ldr	r1, [pc, #56]	; (8000f84 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000f4c:	4a0e      	ldr	r2, [pc, #56]	; (8000f88 <LoopForever+0xe>)
  movs r3, #0
 8000f4e:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000f50:	e002      	b.n	8000f58 <LoopCopyDataInit>

08000f52 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f52:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f54:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f56:	3304      	adds	r3, #4

08000f58 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f58:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f5a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f5c:	d3f9      	bcc.n	8000f52 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f5e:	4a0b      	ldr	r2, [pc, #44]	; (8000f8c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000f60:	4c0b      	ldr	r4, [pc, #44]	; (8000f90 <LoopForever+0x16>)
  movs r3, #0
 8000f62:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f64:	e001      	b.n	8000f6a <LoopFillZerobss>

08000f66 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f66:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f68:	3204      	adds	r2, #4

08000f6a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f6a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f6c:	d3fb      	bcc.n	8000f66 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000f6e:	f7ff ffd7 	bl	8000f20 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f72:	f009 f94f 	bl	800a214 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000f76:	f7ff fd3f 	bl	80009f8 <main>

08000f7a <LoopForever>:

LoopForever:
    b LoopForever
 8000f7a:	e7fe      	b.n	8000f7a <LoopForever>
  ldr   r0, =_estack
 8000f7c:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8000f80:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f84:	200001e8 	.word	0x200001e8
  ldr r2, =_sidata
 8000f88:	0800ac80 	.word	0x0800ac80
  ldr r2, =_sbss
 8000f8c:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 8000f90:	20000f20 	.word	0x20000f20

08000f94 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000f94:	e7fe      	b.n	8000f94 <ADC1_2_IRQHandler>

08000f96 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f96:	b580      	push	{r7, lr}
 8000f98:	b082      	sub	sp, #8
 8000f9a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fa0:	2003      	movs	r0, #3
 8000fa2:	f000 f95b 	bl	800125c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000fa6:	200f      	movs	r0, #15
 8000fa8:	f000 f80e 	bl	8000fc8 <HAL_InitTick>
 8000fac:	4603      	mov	r3, r0
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d002      	beq.n	8000fb8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000fb2:	2301      	movs	r3, #1
 8000fb4:	71fb      	strb	r3, [r7, #7]
 8000fb6:	e001      	b.n	8000fbc <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000fb8:	f7ff fe5e 	bl	8000c78 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000fbc:	79fb      	ldrb	r3, [r7, #7]

}
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	3708      	adds	r7, #8
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	bd80      	pop	{r7, pc}
	...

08000fc8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b084      	sub	sp, #16
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000fd4:	4b16      	ldr	r3, [pc, #88]	; (8001030 <HAL_InitTick+0x68>)
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d022      	beq.n	8001022 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000fdc:	4b15      	ldr	r3, [pc, #84]	; (8001034 <HAL_InitTick+0x6c>)
 8000fde:	681a      	ldr	r2, [r3, #0]
 8000fe0:	4b13      	ldr	r3, [pc, #76]	; (8001030 <HAL_InitTick+0x68>)
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000fe8:	fbb1 f3f3 	udiv	r3, r1, r3
 8000fec:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	f000 f966 	bl	80012c2 <HAL_SYSTICK_Config>
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d10f      	bne.n	800101c <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	2b0f      	cmp	r3, #15
 8001000:	d809      	bhi.n	8001016 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001002:	2200      	movs	r2, #0
 8001004:	6879      	ldr	r1, [r7, #4]
 8001006:	f04f 30ff 	mov.w	r0, #4294967295
 800100a:	f000 f932 	bl	8001272 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800100e:	4a0a      	ldr	r2, [pc, #40]	; (8001038 <HAL_InitTick+0x70>)
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	6013      	str	r3, [r2, #0]
 8001014:	e007      	b.n	8001026 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001016:	2301      	movs	r3, #1
 8001018:	73fb      	strb	r3, [r7, #15]
 800101a:	e004      	b.n	8001026 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 800101c:	2301      	movs	r3, #1
 800101e:	73fb      	strb	r3, [r7, #15]
 8001020:	e001      	b.n	8001026 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001022:	2301      	movs	r3, #1
 8001024:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001026:	7bfb      	ldrb	r3, [r7, #15]
}
 8001028:	4618      	mov	r0, r3
 800102a:	3710      	adds	r7, #16
 800102c:	46bd      	mov	sp, r7
 800102e:	bd80      	pop	{r7, pc}
 8001030:	20000008 	.word	0x20000008
 8001034:	20000000 	.word	0x20000000
 8001038:	20000004 	.word	0x20000004

0800103c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800103c:	b480      	push	{r7}
 800103e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001040:	4b05      	ldr	r3, [pc, #20]	; (8001058 <HAL_IncTick+0x1c>)
 8001042:	681a      	ldr	r2, [r3, #0]
 8001044:	4b05      	ldr	r3, [pc, #20]	; (800105c <HAL_IncTick+0x20>)
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	4413      	add	r3, r2
 800104a:	4a03      	ldr	r2, [pc, #12]	; (8001058 <HAL_IncTick+0x1c>)
 800104c:	6013      	str	r3, [r2, #0]
}
 800104e:	bf00      	nop
 8001050:	46bd      	mov	sp, r7
 8001052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001056:	4770      	bx	lr
 8001058:	20000424 	.word	0x20000424
 800105c:	20000008 	.word	0x20000008

08001060 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001060:	b480      	push	{r7}
 8001062:	af00      	add	r7, sp, #0
  return uwTick;
 8001064:	4b03      	ldr	r3, [pc, #12]	; (8001074 <HAL_GetTick+0x14>)
 8001066:	681b      	ldr	r3, [r3, #0]
}
 8001068:	4618      	mov	r0, r3
 800106a:	46bd      	mov	sp, r7
 800106c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001070:	4770      	bx	lr
 8001072:	bf00      	nop
 8001074:	20000424 	.word	0x20000424

08001078 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b084      	sub	sp, #16
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001080:	f7ff ffee 	bl	8001060 <HAL_GetTick>
 8001084:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800108a:	68fb      	ldr	r3, [r7, #12]
 800108c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001090:	d004      	beq.n	800109c <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8001092:	4b09      	ldr	r3, [pc, #36]	; (80010b8 <HAL_Delay+0x40>)
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	68fa      	ldr	r2, [r7, #12]
 8001098:	4413      	add	r3, r2
 800109a:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800109c:	bf00      	nop
 800109e:	f7ff ffdf 	bl	8001060 <HAL_GetTick>
 80010a2:	4602      	mov	r2, r0
 80010a4:	68bb      	ldr	r3, [r7, #8]
 80010a6:	1ad3      	subs	r3, r2, r3
 80010a8:	68fa      	ldr	r2, [r7, #12]
 80010aa:	429a      	cmp	r2, r3
 80010ac:	d8f7      	bhi.n	800109e <HAL_Delay+0x26>
  {
  }
}
 80010ae:	bf00      	nop
 80010b0:	bf00      	nop
 80010b2:	3710      	adds	r7, #16
 80010b4:	46bd      	mov	sp, r7
 80010b6:	bd80      	pop	{r7, pc}
 80010b8:	20000008 	.word	0x20000008

080010bc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010bc:	b480      	push	{r7}
 80010be:	b085      	sub	sp, #20
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	f003 0307 	and.w	r3, r3, #7
 80010ca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010cc:	4b0c      	ldr	r3, [pc, #48]	; (8001100 <__NVIC_SetPriorityGrouping+0x44>)
 80010ce:	68db      	ldr	r3, [r3, #12]
 80010d0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010d2:	68ba      	ldr	r2, [r7, #8]
 80010d4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80010d8:	4013      	ands	r3, r2
 80010da:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80010dc:	68fb      	ldr	r3, [r7, #12]
 80010de:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010e0:	68bb      	ldr	r3, [r7, #8]
 80010e2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80010e4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80010e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010ec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010ee:	4a04      	ldr	r2, [pc, #16]	; (8001100 <__NVIC_SetPriorityGrouping+0x44>)
 80010f0:	68bb      	ldr	r3, [r7, #8]
 80010f2:	60d3      	str	r3, [r2, #12]
}
 80010f4:	bf00      	nop
 80010f6:	3714      	adds	r7, #20
 80010f8:	46bd      	mov	sp, r7
 80010fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fe:	4770      	bx	lr
 8001100:	e000ed00 	.word	0xe000ed00

08001104 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001104:	b480      	push	{r7}
 8001106:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001108:	4b04      	ldr	r3, [pc, #16]	; (800111c <__NVIC_GetPriorityGrouping+0x18>)
 800110a:	68db      	ldr	r3, [r3, #12]
 800110c:	0a1b      	lsrs	r3, r3, #8
 800110e:	f003 0307 	and.w	r3, r3, #7
}
 8001112:	4618      	mov	r0, r3
 8001114:	46bd      	mov	sp, r7
 8001116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111a:	4770      	bx	lr
 800111c:	e000ed00 	.word	0xe000ed00

08001120 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001120:	b480      	push	{r7}
 8001122:	b083      	sub	sp, #12
 8001124:	af00      	add	r7, sp, #0
 8001126:	4603      	mov	r3, r0
 8001128:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800112a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800112e:	2b00      	cmp	r3, #0
 8001130:	db0b      	blt.n	800114a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001132:	79fb      	ldrb	r3, [r7, #7]
 8001134:	f003 021f 	and.w	r2, r3, #31
 8001138:	4907      	ldr	r1, [pc, #28]	; (8001158 <__NVIC_EnableIRQ+0x38>)
 800113a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800113e:	095b      	lsrs	r3, r3, #5
 8001140:	2001      	movs	r0, #1
 8001142:	fa00 f202 	lsl.w	r2, r0, r2
 8001146:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800114a:	bf00      	nop
 800114c:	370c      	adds	r7, #12
 800114e:	46bd      	mov	sp, r7
 8001150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001154:	4770      	bx	lr
 8001156:	bf00      	nop
 8001158:	e000e100 	.word	0xe000e100

0800115c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800115c:	b480      	push	{r7}
 800115e:	b083      	sub	sp, #12
 8001160:	af00      	add	r7, sp, #0
 8001162:	4603      	mov	r3, r0
 8001164:	6039      	str	r1, [r7, #0]
 8001166:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001168:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800116c:	2b00      	cmp	r3, #0
 800116e:	db0a      	blt.n	8001186 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001170:	683b      	ldr	r3, [r7, #0]
 8001172:	b2da      	uxtb	r2, r3
 8001174:	490c      	ldr	r1, [pc, #48]	; (80011a8 <__NVIC_SetPriority+0x4c>)
 8001176:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800117a:	0112      	lsls	r2, r2, #4
 800117c:	b2d2      	uxtb	r2, r2
 800117e:	440b      	add	r3, r1
 8001180:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001184:	e00a      	b.n	800119c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001186:	683b      	ldr	r3, [r7, #0]
 8001188:	b2da      	uxtb	r2, r3
 800118a:	4908      	ldr	r1, [pc, #32]	; (80011ac <__NVIC_SetPriority+0x50>)
 800118c:	79fb      	ldrb	r3, [r7, #7]
 800118e:	f003 030f 	and.w	r3, r3, #15
 8001192:	3b04      	subs	r3, #4
 8001194:	0112      	lsls	r2, r2, #4
 8001196:	b2d2      	uxtb	r2, r2
 8001198:	440b      	add	r3, r1
 800119a:	761a      	strb	r2, [r3, #24]
}
 800119c:	bf00      	nop
 800119e:	370c      	adds	r7, #12
 80011a0:	46bd      	mov	sp, r7
 80011a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a6:	4770      	bx	lr
 80011a8:	e000e100 	.word	0xe000e100
 80011ac:	e000ed00 	.word	0xe000ed00

080011b0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011b0:	b480      	push	{r7}
 80011b2:	b089      	sub	sp, #36	; 0x24
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	60f8      	str	r0, [r7, #12]
 80011b8:	60b9      	str	r1, [r7, #8]
 80011ba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	f003 0307 	and.w	r3, r3, #7
 80011c2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011c4:	69fb      	ldr	r3, [r7, #28]
 80011c6:	f1c3 0307 	rsb	r3, r3, #7
 80011ca:	2b04      	cmp	r3, #4
 80011cc:	bf28      	it	cs
 80011ce:	2304      	movcs	r3, #4
 80011d0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011d2:	69fb      	ldr	r3, [r7, #28]
 80011d4:	3304      	adds	r3, #4
 80011d6:	2b06      	cmp	r3, #6
 80011d8:	d902      	bls.n	80011e0 <NVIC_EncodePriority+0x30>
 80011da:	69fb      	ldr	r3, [r7, #28]
 80011dc:	3b03      	subs	r3, #3
 80011de:	e000      	b.n	80011e2 <NVIC_EncodePriority+0x32>
 80011e0:	2300      	movs	r3, #0
 80011e2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011e4:	f04f 32ff 	mov.w	r2, #4294967295
 80011e8:	69bb      	ldr	r3, [r7, #24]
 80011ea:	fa02 f303 	lsl.w	r3, r2, r3
 80011ee:	43da      	mvns	r2, r3
 80011f0:	68bb      	ldr	r3, [r7, #8]
 80011f2:	401a      	ands	r2, r3
 80011f4:	697b      	ldr	r3, [r7, #20]
 80011f6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011f8:	f04f 31ff 	mov.w	r1, #4294967295
 80011fc:	697b      	ldr	r3, [r7, #20]
 80011fe:	fa01 f303 	lsl.w	r3, r1, r3
 8001202:	43d9      	mvns	r1, r3
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001208:	4313      	orrs	r3, r2
         );
}
 800120a:	4618      	mov	r0, r3
 800120c:	3724      	adds	r7, #36	; 0x24
 800120e:	46bd      	mov	sp, r7
 8001210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001214:	4770      	bx	lr
	...

08001218 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b082      	sub	sp, #8
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	3b01      	subs	r3, #1
 8001224:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001228:	d301      	bcc.n	800122e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800122a:	2301      	movs	r3, #1
 800122c:	e00f      	b.n	800124e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800122e:	4a0a      	ldr	r2, [pc, #40]	; (8001258 <SysTick_Config+0x40>)
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	3b01      	subs	r3, #1
 8001234:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001236:	210f      	movs	r1, #15
 8001238:	f04f 30ff 	mov.w	r0, #4294967295
 800123c:	f7ff ff8e 	bl	800115c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001240:	4b05      	ldr	r3, [pc, #20]	; (8001258 <SysTick_Config+0x40>)
 8001242:	2200      	movs	r2, #0
 8001244:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001246:	4b04      	ldr	r3, [pc, #16]	; (8001258 <SysTick_Config+0x40>)
 8001248:	2207      	movs	r2, #7
 800124a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800124c:	2300      	movs	r3, #0
}
 800124e:	4618      	mov	r0, r3
 8001250:	3708      	adds	r7, #8
 8001252:	46bd      	mov	sp, r7
 8001254:	bd80      	pop	{r7, pc}
 8001256:	bf00      	nop
 8001258:	e000e010 	.word	0xe000e010

0800125c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	b082      	sub	sp, #8
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001264:	6878      	ldr	r0, [r7, #4]
 8001266:	f7ff ff29 	bl	80010bc <__NVIC_SetPriorityGrouping>
}
 800126a:	bf00      	nop
 800126c:	3708      	adds	r7, #8
 800126e:	46bd      	mov	sp, r7
 8001270:	bd80      	pop	{r7, pc}

08001272 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001272:	b580      	push	{r7, lr}
 8001274:	b086      	sub	sp, #24
 8001276:	af00      	add	r7, sp, #0
 8001278:	4603      	mov	r3, r0
 800127a:	60b9      	str	r1, [r7, #8]
 800127c:	607a      	str	r2, [r7, #4]
 800127e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001280:	f7ff ff40 	bl	8001104 <__NVIC_GetPriorityGrouping>
 8001284:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001286:	687a      	ldr	r2, [r7, #4]
 8001288:	68b9      	ldr	r1, [r7, #8]
 800128a:	6978      	ldr	r0, [r7, #20]
 800128c:	f7ff ff90 	bl	80011b0 <NVIC_EncodePriority>
 8001290:	4602      	mov	r2, r0
 8001292:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001296:	4611      	mov	r1, r2
 8001298:	4618      	mov	r0, r3
 800129a:	f7ff ff5f 	bl	800115c <__NVIC_SetPriority>
}
 800129e:	bf00      	nop
 80012a0:	3718      	adds	r7, #24
 80012a2:	46bd      	mov	sp, r7
 80012a4:	bd80      	pop	{r7, pc}

080012a6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012a6:	b580      	push	{r7, lr}
 80012a8:	b082      	sub	sp, #8
 80012aa:	af00      	add	r7, sp, #0
 80012ac:	4603      	mov	r3, r0
 80012ae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80012b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012b4:	4618      	mov	r0, r3
 80012b6:	f7ff ff33 	bl	8001120 <__NVIC_EnableIRQ>
}
 80012ba:	bf00      	nop
 80012bc:	3708      	adds	r7, #8
 80012be:	46bd      	mov	sp, r7
 80012c0:	bd80      	pop	{r7, pc}

080012c2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80012c2:	b580      	push	{r7, lr}
 80012c4:	b082      	sub	sp, #8
 80012c6:	af00      	add	r7, sp, #0
 80012c8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80012ca:	6878      	ldr	r0, [r7, #4]
 80012cc:	f7ff ffa4 	bl	8001218 <SysTick_Config>
 80012d0:	4603      	mov	r3, r0
}
 80012d2:	4618      	mov	r0, r3
 80012d4:	3708      	adds	r7, #8
 80012d6:	46bd      	mov	sp, r7
 80012d8:	bd80      	pop	{r7, pc}
	...

080012dc <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	b084      	sub	sp, #16
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d101      	bne.n	80012ee <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 80012ea:	2301      	movs	r3, #1
 80012ec:	e147      	b.n	800157e <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80012f4:	b2db      	uxtb	r3, r3
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d106      	bne.n	8001308 <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	2200      	movs	r2, #0
 80012fe:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8001302:	6878      	ldr	r0, [r7, #4]
 8001304:	f7ff fcdc 	bl	8000cc0 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	699a      	ldr	r2, [r3, #24]
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	f022 0210 	bic.w	r2, r2, #16
 8001316:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001318:	f7ff fea2 	bl	8001060 <HAL_GetTick>
 800131c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800131e:	e012      	b.n	8001346 <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8001320:	f7ff fe9e 	bl	8001060 <HAL_GetTick>
 8001324:	4602      	mov	r2, r0
 8001326:	68fb      	ldr	r3, [r7, #12]
 8001328:	1ad3      	subs	r3, r2, r3
 800132a:	2b0a      	cmp	r3, #10
 800132c:	d90b      	bls.n	8001346 <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001332:	f043 0201 	orr.w	r2, r3, #1
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	2203      	movs	r2, #3
 800133e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8001342:	2301      	movs	r3, #1
 8001344:	e11b      	b.n	800157e <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	699b      	ldr	r3, [r3, #24]
 800134c:	f003 0308 	and.w	r3, r3, #8
 8001350:	2b08      	cmp	r3, #8
 8001352:	d0e5      	beq.n	8001320 <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	699a      	ldr	r2, [r3, #24]
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	f042 0201 	orr.w	r2, r2, #1
 8001362:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001364:	f7ff fe7c 	bl	8001060 <HAL_GetTick>
 8001368:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800136a:	e012      	b.n	8001392 <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 800136c:	f7ff fe78 	bl	8001060 <HAL_GetTick>
 8001370:	4602      	mov	r2, r0
 8001372:	68fb      	ldr	r3, [r7, #12]
 8001374:	1ad3      	subs	r3, r2, r3
 8001376:	2b0a      	cmp	r3, #10
 8001378:	d90b      	bls.n	8001392 <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800137e:	f043 0201 	orr.w	r2, r3, #1
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	2203      	movs	r2, #3
 800138a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 800138e:	2301      	movs	r3, #1
 8001390:	e0f5      	b.n	800157e <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	699b      	ldr	r3, [r3, #24]
 8001398:	f003 0301 	and.w	r3, r3, #1
 800139c:	2b00      	cmp	r3, #0
 800139e:	d0e5      	beq.n	800136c <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	699a      	ldr	r2, [r3, #24]
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	f042 0202 	orr.w	r2, r2, #2
 80013ae:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	4a74      	ldr	r2, [pc, #464]	; (8001588 <HAL_FDCAN_Init+0x2ac>)
 80013b6:	4293      	cmp	r3, r2
 80013b8:	d103      	bne.n	80013c2 <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 80013ba:	4a74      	ldr	r2, [pc, #464]	; (800158c <HAL_FDCAN_Init+0x2b0>)
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	685b      	ldr	r3, [r3, #4]
 80013c0:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	7c1b      	ldrb	r3, [r3, #16]
 80013c6:	2b01      	cmp	r3, #1
 80013c8:	d108      	bne.n	80013dc <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	699a      	ldr	r2, [r3, #24]
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80013d8:	619a      	str	r2, [r3, #24]
 80013da:	e007      	b.n	80013ec <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	699a      	ldr	r2, [r3, #24]
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80013ea:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	7c5b      	ldrb	r3, [r3, #17]
 80013f0:	2b01      	cmp	r3, #1
 80013f2:	d108      	bne.n	8001406 <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	699a      	ldr	r2, [r3, #24]
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001402:	619a      	str	r2, [r3, #24]
 8001404:	e007      	b.n	8001416 <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	699a      	ldr	r2, [r3, #24]
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001414:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	7c9b      	ldrb	r3, [r3, #18]
 800141a:	2b01      	cmp	r3, #1
 800141c:	d108      	bne.n	8001430 <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	699a      	ldr	r2, [r3, #24]
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800142c:	619a      	str	r2, [r3, #24]
 800142e:	e007      	b.n	8001440 <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	699a      	ldr	r2, [r3, #24]
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800143e:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	699b      	ldr	r3, [r3, #24]
 8001446:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	689a      	ldr	r2, [r3, #8]
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	430a      	orrs	r2, r1
 8001454:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	699a      	ldr	r2, [r3, #24]
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 8001464:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	691a      	ldr	r2, [r3, #16]
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	f022 0210 	bic.w	r2, r2, #16
 8001474:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	68db      	ldr	r3, [r3, #12]
 800147a:	2b01      	cmp	r3, #1
 800147c:	d108      	bne.n	8001490 <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	699a      	ldr	r2, [r3, #24]
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	f042 0204 	orr.w	r2, r2, #4
 800148c:	619a      	str	r2, [r3, #24]
 800148e:	e02c      	b.n	80014ea <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	68db      	ldr	r3, [r3, #12]
 8001494:	2b00      	cmp	r3, #0
 8001496:	d028      	beq.n	80014ea <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	68db      	ldr	r3, [r3, #12]
 800149c:	2b02      	cmp	r3, #2
 800149e:	d01c      	beq.n	80014da <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	699a      	ldr	r2, [r3, #24]
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80014ae:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	691a      	ldr	r2, [r3, #16]
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	f042 0210 	orr.w	r2, r2, #16
 80014be:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	68db      	ldr	r3, [r3, #12]
 80014c4:	2b03      	cmp	r3, #3
 80014c6:	d110      	bne.n	80014ea <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	699a      	ldr	r2, [r3, #24]
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	f042 0220 	orr.w	r2, r2, #32
 80014d6:	619a      	str	r2, [r3, #24]
 80014d8:	e007      	b.n	80014ea <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	699a      	ldr	r2, [r3, #24]
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	f042 0220 	orr.w	r2, r2, #32
 80014e8:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	699b      	ldr	r3, [r3, #24]
 80014ee:	3b01      	subs	r3, #1
 80014f0:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	69db      	ldr	r3, [r3, #28]
 80014f6:	3b01      	subs	r3, #1
 80014f8:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80014fa:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	6a1b      	ldr	r3, [r3, #32]
 8001500:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8001502:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	695b      	ldr	r3, [r3, #20]
 800150a:	3b01      	subs	r3, #1
 800150c:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8001512:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001514:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	689b      	ldr	r3, [r3, #8]
 800151a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800151e:	d115      	bne.n	800154c <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001524:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800152a:	3b01      	subs	r3, #1
 800152c:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800152e:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001534:	3b01      	subs	r3, #1
 8001536:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8001538:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001540:	3b01      	subs	r3, #1
 8001542:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8001548:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800154a:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	430a      	orrs	r2, r1
 800155e:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8001562:	6878      	ldr	r0, [r7, #4]
 8001564:	f000 fc3c 	bl	8001de0 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	2200      	movs	r2, #0
 800156c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	2200      	movs	r2, #0
 8001572:	661a      	str	r2, [r3, #96]	; 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	2201      	movs	r2, #1
 8001578:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return HAL_OK;
 800157c:	2300      	movs	r3, #0
}
 800157e:	4618      	mov	r0, r3
 8001580:	3710      	adds	r7, #16
 8001582:	46bd      	mov	sp, r7
 8001584:	bd80      	pop	{r7, pc}
 8001586:	bf00      	nop
 8001588:	40006400 	.word	0x40006400
 800158c:	40006500 	.word	0x40006500

08001590 <HAL_FDCAN_ConfigFilter>:
  * @param  sFilterConfig pointer to an FDCAN_FilterTypeDef structure that
  *         contains the filter configuration information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigFilter(FDCAN_HandleTypeDef *hfdcan, FDCAN_FilterTypeDef *sFilterConfig)
{
 8001590:	b480      	push	{r7}
 8001592:	b087      	sub	sp, #28
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]
 8001598:	6039      	str	r1, [r7, #0]
  uint32_t FilterElementW1;
  uint32_t FilterElementW2;
  uint32_t *FilterAddress;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80015a0:	75fb      	strb	r3, [r7, #23]

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 80015a2:	7dfb      	ldrb	r3, [r7, #23]
 80015a4:	2b01      	cmp	r3, #1
 80015a6:	d002      	beq.n	80015ae <HAL_FDCAN_ConfigFilter+0x1e>
 80015a8:	7dfb      	ldrb	r3, [r7, #23]
 80015aa:	2b02      	cmp	r3, #2
 80015ac:	d13d      	bne.n	800162a <HAL_FDCAN_ConfigFilter+0x9a>
  {
    /* Check function parameters */
    assert_param(IS_FDCAN_ID_TYPE(sFilterConfig->IdType));
    assert_param(IS_FDCAN_FILTER_CFG(sFilterConfig->FilterConfig));

    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 80015ae:	683b      	ldr	r3, [r7, #0]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d119      	bne.n	80015ea <HAL_FDCAN_ConfigFilter+0x5a>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x7FFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x7FFU));
      assert_param(IS_FDCAN_STD_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build filter element */
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 80015b6:	683b      	ldr	r3, [r7, #0]
 80015b8:	689b      	ldr	r3, [r3, #8]
 80015ba:	079a      	lsls	r2, r3, #30
                         (sFilterConfig->FilterConfig << 27U) |
 80015bc:	683b      	ldr	r3, [r7, #0]
 80015be:	68db      	ldr	r3, [r3, #12]
 80015c0:	06db      	lsls	r3, r3, #27
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 80015c2:	431a      	orrs	r2, r3
                         (sFilterConfig->FilterID1 << 16U)    |
 80015c4:	683b      	ldr	r3, [r7, #0]
 80015c6:	691b      	ldr	r3, [r3, #16]
 80015c8:	041b      	lsls	r3, r3, #16
                         (sFilterConfig->FilterConfig << 27U) |
 80015ca:	431a      	orrs	r2, r3
                         sFilterConfig->FilterID2);
 80015cc:	683b      	ldr	r3, [r7, #0]
 80015ce:	695b      	ldr	r3, [r3, #20]
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 80015d0:	4313      	orrs	r3, r2
 80015d2:	613b      	str	r3, [r7, #16]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLS_SIZE));
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80015d8:	683b      	ldr	r3, [r7, #0]
 80015da:	685b      	ldr	r3, [r3, #4]
 80015dc:	009b      	lsls	r3, r3, #2
 80015de:	4413      	add	r3, r2
 80015e0:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 80015e2:	68bb      	ldr	r3, [r7, #8]
 80015e4:	693a      	ldr	r2, [r7, #16]
 80015e6:	601a      	str	r2, [r3, #0]
 80015e8:	e01d      	b.n	8001626 <HAL_FDCAN_ConfigFilter+0x96>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_EXT_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build first word of filter element */
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 80015ea:	683b      	ldr	r3, [r7, #0]
 80015ec:	68db      	ldr	r3, [r3, #12]
 80015ee:	075a      	lsls	r2, r3, #29
 80015f0:	683b      	ldr	r3, [r7, #0]
 80015f2:	691b      	ldr	r3, [r3, #16]
 80015f4:	4313      	orrs	r3, r2
 80015f6:	613b      	str	r3, [r7, #16]

      /* Build second word of filter element */
      FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 80015f8:	683b      	ldr	r3, [r7, #0]
 80015fa:	689b      	ldr	r3, [r3, #8]
 80015fc:	079a      	lsls	r2, r3, #30
 80015fe:	683b      	ldr	r3, [r7, #0]
 8001600:	695b      	ldr	r3, [r3, #20]
 8001602:	4313      	orrs	r3, r2
 8001604:	60fb      	str	r3, [r7, #12]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLE_SIZE));
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800160a:	683b      	ldr	r3, [r7, #0]
 800160c:	685b      	ldr	r3, [r3, #4]
 800160e:	00db      	lsls	r3, r3, #3
 8001610:	4413      	add	r3, r2
 8001612:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8001614:	68bb      	ldr	r3, [r7, #8]
 8001616:	693a      	ldr	r2, [r7, #16]
 8001618:	601a      	str	r2, [r3, #0]
      FilterAddress++;
 800161a:	68bb      	ldr	r3, [r7, #8]
 800161c:	3304      	adds	r3, #4
 800161e:	60bb      	str	r3, [r7, #8]
      *FilterAddress = FilterElementW2;
 8001620:	68bb      	ldr	r3, [r7, #8]
 8001622:	68fa      	ldr	r2, [r7, #12]
 8001624:	601a      	str	r2, [r3, #0]
    }

    /* Return function status */
    return HAL_OK;
 8001626:	2300      	movs	r3, #0
 8001628:	e006      	b.n	8001638 <HAL_FDCAN_ConfigFilter+0xa8>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800162e:	f043 0202 	orr.w	r2, r3, #2
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8001636:	2301      	movs	r3, #1
  }
}
 8001638:	4618      	mov	r0, r3
 800163a:	371c      	adds	r7, #28
 800163c:	46bd      	mov	sp, r7
 800163e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001642:	4770      	bx	lr

08001644 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 8001644:	b480      	push	{r7}
 8001646:	b083      	sub	sp, #12
 8001648:	af00      	add	r7, sp, #0
 800164a:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8001652:	b2db      	uxtb	r3, r3
 8001654:	2b01      	cmp	r3, #1
 8001656:	d110      	bne.n	800167a <HAL_FDCAN_Start+0x36>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	2202      	movs	r2, #2
 800165c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	699a      	ldr	r2, [r3, #24]
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	f022 0201 	bic.w	r2, r2, #1
 800166e:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	2200      	movs	r2, #0
 8001674:	661a      	str	r2, [r3, #96]	; 0x60

    /* Return function status */
    return HAL_OK;
 8001676:	2300      	movs	r3, #0
 8001678:	e006      	b.n	8001688 <HAL_FDCAN_Start+0x44>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800167e:	f043 0204 	orr.w	r2, r3, #4
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8001686:	2301      	movs	r3, #1
  }
}
 8001688:	4618      	mov	r0, r3
 800168a:	370c      	adds	r7, #12
 800168c:	46bd      	mov	sp, r7
 800168e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001692:	4770      	bx	lr

08001694 <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader,
                                                uint8_t *pTxData)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	b086      	sub	sp, #24
 8001698:	af00      	add	r7, sp, #0
 800169a:	60f8      	str	r0, [r7, #12]
 800169c:	60b9      	str	r1, [r7, #8]
 800169e:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80016a6:	b2db      	uxtb	r3, r3
 80016a8:	2b02      	cmp	r3, #2
 80016aa:	d12c      	bne.n	8001706 <HAL_FDCAN_AddMessageToTxFifoQ+0x72>
  {
    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80016b4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d007      	beq.n	80016cc <HAL_FDCAN_AddMessageToTxFifoQ+0x38>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80016c0:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 80016c8:	2301      	movs	r3, #1
 80016ca:	e023      	b.n	8001714 <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80016d4:	0c1b      	lsrs	r3, r3, #16
 80016d6:	f003 0303 	and.w	r3, r3, #3
 80016da:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 80016dc:	697b      	ldr	r3, [r7, #20]
 80016de:	687a      	ldr	r2, [r7, #4]
 80016e0:	68b9      	ldr	r1, [r7, #8]
 80016e2:	68f8      	ldr	r0, [r7, #12]
 80016e4:	f000 fbd2 	bl	8001e8c <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	2101      	movs	r1, #1
 80016ee:	697a      	ldr	r2, [r7, #20]
 80016f0:	fa01 f202 	lsl.w	r2, r1, r2
 80016f4:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 80016f8:	2201      	movs	r2, #1
 80016fa:	697b      	ldr	r3, [r7, #20]
 80016fc:	409a      	lsls	r2, r3
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	659a      	str	r2, [r3, #88]	; 0x58
    }

    /* Return function status */
    return HAL_OK;
 8001702:	2300      	movs	r3, #0
 8001704:	e006      	b.n	8001714 <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800170a:	f043 0208 	orr.w	r2, r3, #8
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8001712:	2301      	movs	r3, #1
  }
}
 8001714:	4618      	mov	r0, r3
 8001716:	3718      	adds	r7, #24
 8001718:	46bd      	mov	sp, r7
 800171a:	bd80      	pop	{r7, pc}

0800171c <HAL_FDCAN_GetRxMessage>:
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation,
                                         FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 800171c:	b480      	push	{r7}
 800171e:	b08b      	sub	sp, #44	; 0x2c
 8001720:	af00      	add	r7, sp, #0
 8001722:	60f8      	str	r0, [r7, #12]
 8001724:	60b9      	str	r1, [r7, #8]
 8001726:	607a      	str	r2, [r7, #4]
 8001728:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8001730:	76fb      	strb	r3, [r7, #27]

  /* Check function parameters */
  assert_param(IS_FDCAN_RX_FIFO(RxLocation));

  if (state == HAL_FDCAN_STATE_BUSY)
 8001732:	7efb      	ldrb	r3, [r7, #27]
 8001734:	2b02      	cmp	r3, #2
 8001736:	f040 80bc 	bne.w	80018b2 <HAL_FDCAN_GetRxMessage+0x196>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 800173a:	68bb      	ldr	r3, [r7, #8]
 800173c:	2b40      	cmp	r3, #64	; 0x40
 800173e:	d121      	bne.n	8001784 <HAL_FDCAN_GetRxMessage+0x68>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001748:	f003 030f 	and.w	r3, r3, #15
 800174c:	2b00      	cmp	r3, #0
 800174e:	d107      	bne.n	8001760 <HAL_FDCAN_GetRxMessage+0x44>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001754:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	661a      	str	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 800175c:	2301      	movs	r3, #1
 800175e:	e0af      	b.n	80018c0 <HAL_FDCAN_GetRxMessage+0x1a4>
      }
      else
      {
        /* Calculate Rx FIFO 0 element address */
        GetIndex = ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001768:	0a1b      	lsrs	r3, r3, #8
 800176a:	f003 0303 	and.w	r3, r3, #3
 800176e:	61fb      	str	r3, [r7, #28]
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * SRAMCAN_RF0_SIZE));
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	6c99      	ldr	r1, [r3, #72]	; 0x48
 8001774:	69fa      	ldr	r2, [r7, #28]
 8001776:	4613      	mov	r3, r2
 8001778:	00db      	lsls	r3, r3, #3
 800177a:	4413      	add	r3, r2
 800177c:	00db      	lsls	r3, r3, #3
 800177e:	440b      	add	r3, r1
 8001780:	627b      	str	r3, [r7, #36]	; 0x24
 8001782:	e020      	b.n	80017c6 <HAL_FDCAN_GetRxMessage+0xaa>
      }
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800178c:	f003 030f 	and.w	r3, r3, #15
 8001790:	2b00      	cmp	r3, #0
 8001792:	d107      	bne.n	80017a4 <HAL_FDCAN_GetRxMessage+0x88>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001798:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	661a      	str	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 80017a0:	2301      	movs	r3, #1
 80017a2:	e08d      	b.n	80018c0 <HAL_FDCAN_GetRxMessage+0x1a4>
      }
      else
      {
        /* Calculate Rx FIFO 1 element address */
        GetIndex = ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80017ac:	0a1b      	lsrs	r3, r3, #8
 80017ae:	f003 0303 	and.w	r3, r3, #3
 80017b2:	61fb      	str	r3, [r7, #28]
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * SRAMCAN_RF1_SIZE));
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 80017b8:	69fa      	ldr	r2, [r7, #28]
 80017ba:	4613      	mov	r3, r2
 80017bc:	00db      	lsls	r3, r3, #3
 80017be:	4413      	add	r3, r2
 80017c0:	00db      	lsls	r3, r3, #3
 80017c2:	440b      	add	r3, r1
 80017c4:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 80017c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	f003 4280 	and.w	r2, r3, #1073741824	; 0x40000000
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	685b      	ldr	r3, [r3, #4]
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d107      	bne.n	80017ea <HAL_FDCAN_GetRxMessage+0xce>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 80017da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	0c9b      	lsrs	r3, r3, #18
 80017e0:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	601a      	str	r2, [r3, #0]
 80017e8:	e005      	b.n	80017f6 <HAL_FDCAN_GetRxMessage+0xda>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 80017ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 80017f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	f003 5200 	and.w	r2, r3, #536870912	; 0x20000000
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 8001802:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 800180e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001810:	3304      	adds	r3, #4
 8001812:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 8001814:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	b29a      	uxth	r2, r3
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = (*RxAddress & FDCAN_ELEMENT_MASK_DLC);
 800181e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	f403 2270 	and.w	r2, r3, #983040	; 0xf0000
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 800182a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	f403 1280 	and.w	r2, r3, #1048576	; 0x100000
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 8001836:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	f403 1200 	and.w	r2, r3, #2097152	; 0x200000
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 8001842:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	0e1b      	lsrs	r3, r3, #24
 8001848:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 8001850:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	0fda      	lsrs	r2, r3, #31
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	625a      	str	r2, [r3, #36]	; 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 800185a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800185c:	3304      	adds	r3, #4
 800185e:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 8001860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001862:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16U]; ByteCounter++)
 8001864:	2300      	movs	r3, #0
 8001866:	623b      	str	r3, [r7, #32]
 8001868:	e00a      	b.n	8001880 <HAL_FDCAN_GetRxMessage+0x164>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 800186a:	697a      	ldr	r2, [r7, #20]
 800186c:	6a3b      	ldr	r3, [r7, #32]
 800186e:	441a      	add	r2, r3
 8001870:	6839      	ldr	r1, [r7, #0]
 8001872:	6a3b      	ldr	r3, [r7, #32]
 8001874:	440b      	add	r3, r1
 8001876:	7812      	ldrb	r2, [r2, #0]
 8001878:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16U]; ByteCounter++)
 800187a:	6a3b      	ldr	r3, [r7, #32]
 800187c:	3301      	adds	r3, #1
 800187e:	623b      	str	r3, [r7, #32]
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	68db      	ldr	r3, [r3, #12]
 8001884:	0c1b      	lsrs	r3, r3, #16
 8001886:	4a11      	ldr	r2, [pc, #68]	; (80018cc <HAL_FDCAN_GetRxMessage+0x1b0>)
 8001888:	5cd3      	ldrb	r3, [r2, r3]
 800188a:	461a      	mov	r2, r3
 800188c:	6a3b      	ldr	r3, [r7, #32]
 800188e:	4293      	cmp	r3, r2
 8001890:	d3eb      	bcc.n	800186a <HAL_FDCAN_GetRxMessage+0x14e>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8001892:	68bb      	ldr	r3, [r7, #8]
 8001894:	2b40      	cmp	r3, #64	; 0x40
 8001896:	d105      	bne.n	80018a4 <HAL_FDCAN_GetRxMessage+0x188>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	69fa      	ldr	r2, [r7, #28]
 800189e:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
 80018a2:	e004      	b.n	80018ae <HAL_FDCAN_GetRxMessage+0x192>
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	69fa      	ldr	r2, [r7, #28]
 80018aa:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    }

    /* Return function status */
    return HAL_OK;
 80018ae:	2300      	movs	r3, #0
 80018b0:	e006      	b.n	80018c0 <HAL_FDCAN_GetRxMessage+0x1a4>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80018b6:	f043 0208 	orr.w	r2, r3, #8
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 80018be:	2301      	movs	r3, #1
  }
}
 80018c0:	4618      	mov	r0, r3
 80018c2:	372c      	adds	r7, #44	; 0x2c
 80018c4:	46bd      	mov	sp, r7
 80018c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ca:	4770      	bx	lr
 80018cc:	0800ac04 	.word	0x0800ac04

080018d0 <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs,
                                                 uint32_t BufferIndexes)
{
 80018d0:	b480      	push	{r7}
 80018d2:	b087      	sub	sp, #28
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	60f8      	str	r0, [r7, #12]
 80018d8:	60b9      	str	r1, [r7, #8]
 80018da:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80018e2:	75fb      	strb	r3, [r7, #23]
  if ((ActiveITs & (FDCAN_IT_TX_COMPLETE | FDCAN_IT_TX_ABORT_COMPLETE)) != 0U)
  {
    assert_param(IS_FDCAN_TX_LOCATION_LIST(BufferIndexes));
  }

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 80018e4:	7dfb      	ldrb	r3, [r7, #23]
 80018e6:	2b01      	cmp	r3, #1
 80018e8:	d003      	beq.n	80018f2 <HAL_FDCAN_ActivateNotification+0x22>
 80018ea:	7dfb      	ldrb	r3, [r7, #23]
 80018ec:	2b02      	cmp	r3, #2
 80018ee:	f040 80c8 	bne.w	8001a82 <HAL_FDCAN_ActivateNotification+0x1b2>
  {
    /* Get interrupts line selection */
    ITs_lines_selection = hfdcan->Instance->ILS;
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018f8:	613b      	str	r3, [r7, #16]

    /* Enable Interrupt lines */
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0) != 0U)
 80018fa:	68bb      	ldr	r3, [r7, #8]
 80018fc:	f003 0307 	and.w	r3, r3, #7
 8001900:	2b00      	cmp	r3, #0
 8001902:	d004      	beq.n	800190e <HAL_FDCAN_ActivateNotification+0x3e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 8001904:	693b      	ldr	r3, [r7, #16]
 8001906:	f003 0301 	and.w	r3, r3, #1
 800190a:	2b00      	cmp	r3, #0
 800190c:	d03b      	beq.n	8001986 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 800190e:	68bb      	ldr	r3, [r7, #8]
 8001910:	f003 0338 	and.w	r3, r3, #56	; 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 8001914:	2b00      	cmp	r3, #0
 8001916:	d004      	beq.n	8001922 <HAL_FDCAN_ActivateNotification+0x52>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 8001918:	693b      	ldr	r3, [r7, #16]
 800191a:	f003 0302 	and.w	r3, r3, #2
 800191e:	2b00      	cmp	r3, #0
 8001920:	d031      	beq.n	8001986 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 8001922:	68bb      	ldr	r3, [r7, #8]
 8001924:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 8001928:	2b00      	cmp	r3, #0
 800192a:	d004      	beq.n	8001936 <HAL_FDCAN_ActivateNotification+0x66>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 800192c:	693b      	ldr	r3, [r7, #16]
 800192e:	f003 0304 	and.w	r3, r3, #4
 8001932:	2b00      	cmp	r3, #0
 8001934:	d027      	beq.n	8001986 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 8001936:	68bb      	ldr	r3, [r7, #8]
 8001938:	f403 53f0 	and.w	r3, r3, #7680	; 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 800193c:	2b00      	cmp	r3, #0
 800193e:	d004      	beq.n	800194a <HAL_FDCAN_ActivateNotification+0x7a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 8001940:	693b      	ldr	r3, [r7, #16]
 8001942:	f003 0308 	and.w	r3, r3, #8
 8001946:	2b00      	cmp	r3, #0
 8001948:	d01d      	beq.n	8001986 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 800194a:	68bb      	ldr	r3, [r7, #8]
 800194c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 8001950:	2b00      	cmp	r3, #0
 8001952:	d004      	beq.n	800195e <HAL_FDCAN_ActivateNotification+0x8e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 8001954:	693b      	ldr	r3, [r7, #16]
 8001956:	f003 0310 	and.w	r3, r3, #16
 800195a:	2b00      	cmp	r3, #0
 800195c:	d013      	beq.n	8001986 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 800195e:	68bb      	ldr	r3, [r7, #8]
 8001960:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 8001964:	2b00      	cmp	r3, #0
 8001966:	d004      	beq.n	8001972 <HAL_FDCAN_ActivateNotification+0xa2>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 8001968:	693b      	ldr	r3, [r7, #16]
 800196a:	f003 0320 	and.w	r3, r3, #32
 800196e:	2b00      	cmp	r3, #0
 8001970:	d009      	beq.n	8001986 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 8001972:	68bb      	ldr	r3, [r7, #8]
 8001974:	f403 037c 	and.w	r3, r3, #16515072	; 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 8001978:	2b00      	cmp	r3, #0
 800197a:	d00c      	beq.n	8001996 <HAL_FDCAN_ActivateNotification+0xc6>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) == 0U)))
 800197c:	693b      	ldr	r3, [r7, #16]
 800197e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001982:	2b00      	cmp	r3, #0
 8001984:	d107      	bne.n	8001996 <HAL_FDCAN_ActivateNotification+0xc6>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	f042 0201 	orr.w	r2, r2, #1
 8001994:	65da      	str	r2, [r3, #92]	; 0x5c
    }
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0)       != 0U)
 8001996:	68bb      	ldr	r3, [r7, #8]
 8001998:	f003 0307 	and.w	r3, r3, #7
 800199c:	2b00      	cmp	r3, #0
 800199e:	d004      	beq.n	80019aa <HAL_FDCAN_ActivateNotification+0xda>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 80019a0:	693b      	ldr	r3, [r7, #16]
 80019a2:	f003 0301 	and.w	r3, r3, #1
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d13b      	bne.n	8001a22 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 80019aa:	68bb      	ldr	r3, [r7, #8]
 80019ac:	f003 0338 	and.w	r3, r3, #56	; 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d004      	beq.n	80019be <HAL_FDCAN_ActivateNotification+0xee>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 80019b4:	693b      	ldr	r3, [r7, #16]
 80019b6:	f003 0302 	and.w	r3, r3, #2
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d131      	bne.n	8001a22 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 80019be:	68bb      	ldr	r3, [r7, #8]
 80019c0:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d004      	beq.n	80019d2 <HAL_FDCAN_ActivateNotification+0x102>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 80019c8:	693b      	ldr	r3, [r7, #16]
 80019ca:	f003 0304 	and.w	r3, r3, #4
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d127      	bne.n	8001a22 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 80019d2:	68bb      	ldr	r3, [r7, #8]
 80019d4:	f403 53f0 	and.w	r3, r3, #7680	; 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d004      	beq.n	80019e6 <HAL_FDCAN_ActivateNotification+0x116>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 80019dc:	693b      	ldr	r3, [r7, #16]
 80019de:	f003 0308 	and.w	r3, r3, #8
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d11d      	bne.n	8001a22 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 80019e6:	68bb      	ldr	r3, [r7, #8]
 80019e8:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d004      	beq.n	80019fa <HAL_FDCAN_ActivateNotification+0x12a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 80019f0:	693b      	ldr	r3, [r7, #16]
 80019f2:	f003 0310 	and.w	r3, r3, #16
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d113      	bne.n	8001a22 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 80019fa:	68bb      	ldr	r3, [r7, #8]
 80019fc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d004      	beq.n	8001a0e <HAL_FDCAN_ActivateNotification+0x13e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 8001a04:	693b      	ldr	r3, [r7, #16]
 8001a06:	f003 0320 	and.w	r3, r3, #32
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d109      	bne.n	8001a22 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 8001a0e:	68bb      	ldr	r3, [r7, #8]
 8001a10:	f403 037c 	and.w	r3, r3, #16515072	; 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d00c      	beq.n	8001a32 <HAL_FDCAN_ActivateNotification+0x162>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) != 0U)))
 8001a18:	693b      	ldr	r3, [r7, #16]
 8001a1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d007      	beq.n	8001a32 <HAL_FDCAN_ActivateNotification+0x162>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	f042 0202 	orr.w	r2, r2, #2
 8001a30:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 8001a32:	68bb      	ldr	r3, [r7, #8]
 8001a34:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d009      	beq.n	8001a50 <HAL_FDCAN_ActivateNotification+0x180>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	f8d3 10dc 	ldr.w	r1, [r3, #220]	; 0xdc
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	687a      	ldr	r2, [r7, #4]
 8001a4a:	430a      	orrs	r2, r1
 8001a4c:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8001a50:	68bb      	ldr	r3, [r7, #8]
 8001a52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d009      	beq.n	8001a6e <HAL_FDCAN_ActivateNotification+0x19e>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	f8d3 10e0 	ldr.w	r1, [r3, #224]	; 0xe0
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	687a      	ldr	r2, [r7, #4]
 8001a68:	430a      	orrs	r2, r1
 8001a6a:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	68ba      	ldr	r2, [r7, #8]
 8001a7a:	430a      	orrs	r2, r1
 8001a7c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return function status */
    return HAL_OK;
 8001a7e:	2300      	movs	r3, #0
 8001a80:	e006      	b.n	8001a90 <HAL_FDCAN_ActivateNotification+0x1c0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a86:	f043 0202 	orr.w	r2, r3, #2
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8001a8e:	2301      	movs	r3, #1
  }
}
 8001a90:	4618      	mov	r0, r3
 8001a92:	371c      	adds	r7, #28
 8001a94:	46bd      	mov	sp, r7
 8001a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9a:	4770      	bx	lr

08001a9c <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b08a      	sub	sp, #40	; 0x28
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
  uint32_t Errors;
  uint32_t ErrorStatusITs;
  uint32_t TransmittedBuffers;
  uint32_t AbortedBuffers;

  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001aaa:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8001aae:	627b      	str	r3, [r7, #36]	; 0x24
  TxEventFifoITs &= hfdcan->Instance->IE;
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ab6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ab8:	4013      	ands	r3, r2
 8001aba:	627b      	str	r3, [r7, #36]	; 0x24
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001ac2:	f003 0307 	and.w	r3, r3, #7
 8001ac6:	623b      	str	r3, [r7, #32]
  RxFifo0ITs &= hfdcan->Instance->IE;
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ace:	6a3a      	ldr	r2, [r7, #32]
 8001ad0:	4013      	ands	r3, r2
 8001ad2:	623b      	str	r3, [r7, #32]
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001ada:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001ade:	61fb      	str	r3, [r7, #28]
  RxFifo1ITs &= hfdcan->Instance->IE;
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ae6:	69fa      	ldr	r2, [r7, #28]
 8001ae8:	4013      	ands	r3, r2
 8001aea:	61fb      	str	r3, [r7, #28]
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001af2:	f403 0371 	and.w	r3, r3, #15794176	; 0xf10000
 8001af6:	61bb      	str	r3, [r7, #24]
  Errors &= hfdcan->Instance->IE;
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001afe:	69ba      	ldr	r2, [r7, #24]
 8001b00:	4013      	ands	r3, r2
 8001b02:	61bb      	str	r3, [r7, #24]
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001b0a:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001b0e:	617b      	str	r3, [r7, #20]
  ErrorStatusITs &= hfdcan->Instance->IE;
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b16:	697a      	ldr	r2, [r7, #20]
 8001b18:	4013      	ands	r3, r2
 8001b1a:	617b      	str	r3, [r7, #20]

  /* High Priority Message interrupt management *******************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != 0U)
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001b22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d00d      	beq.n	8001b46 <HAL_FDCAN_IRQHandler+0xaa>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != 0U)
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d006      	beq.n	8001b46 <HAL_FDCAN_IRQHandler+0xaa>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	2240      	movs	r2, #64	; 0x40
 8001b3e:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 8001b40:	6878      	ldr	r0, [r7, #4]
 8001b42:	f000 f92e 	bl	8001da2 <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE) != 0U)
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001b4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d01b      	beq.n	8001b8c <HAL_FDCAN_IRQHandler+0xf0>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d014      	beq.n	8001b8c <HAL_FDCAN_IRQHandler+0xf0>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001b6a:	613b      	str	r3, [r7, #16]
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b74:	693a      	ldr	r2, [r7, #16]
 8001b76:	4013      	ands	r3, r2
 8001b78:	613b      	str	r3, [r7, #16]

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001b82:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 8001b84:	6939      	ldr	r1, [r7, #16]
 8001b86:	6878      	ldr	r0, [r7, #4]
 8001b88:	f000 f8ec 	bl	8001d64 <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 8001b8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d007      	beq.n	8001ba2 <HAL_FDCAN_IRQHandler+0x106>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b98:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 8001b9a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001b9c:	6878      	ldr	r0, [r7, #4]
 8001b9e:	f000 f8b6 	bl	8001d0e <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 8001ba2:	6a3b      	ldr	r3, [r7, #32]
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d007      	beq.n	8001bb8 <HAL_FDCAN_IRQHandler+0x11c>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	6a3a      	ldr	r2, [r7, #32]
 8001bae:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 8001bb0:	6a39      	ldr	r1, [r7, #32]
 8001bb2:	6878      	ldr	r0, [r7, #4]
 8001bb4:	f7fe fd0e 	bl	80005d4 <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 8001bb8:	69fb      	ldr	r3, [r7, #28]
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d007      	beq.n	8001bce <HAL_FDCAN_IRQHandler+0x132>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	69fa      	ldr	r2, [r7, #28]
 8001bc4:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 8001bc6:	69f9      	ldr	r1, [r7, #28]
 8001bc8:	6878      	ldr	r0, [r7, #4]
 8001bca:	f000 f8ab 	bl	8001d24 <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY) != 0U)
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001bd4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d00e      	beq.n	8001bfa <HAL_FDCAN_IRQHandler+0x15e>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_FIFO_EMPTY) != 0U)
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001be2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d007      	beq.n	8001bfa <HAL_FDCAN_IRQHandler+0x15e>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001bf2:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 8001bf4:	6878      	ldr	r0, [r7, #4]
 8001bf6:	f000 f8a0 	bl	8001d3a <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE) != 0U)
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001c00:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d01a      	beq.n	8001c3e <HAL_FDCAN_IRQHandler+0x1a2>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_COMPLETE) != 0U)
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d013      	beq.n	8001c3e <HAL_FDCAN_IRQHandler+0x1a2>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8001c1e:	60fb      	str	r3, [r7, #12]
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8001c28:	68fa      	ldr	r2, [r7, #12]
 8001c2a:	4013      	ands	r3, r2
 8001c2c:	60fb      	str	r3, [r7, #12]

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	2280      	movs	r2, #128	; 0x80
 8001c34:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 8001c36:	68f9      	ldr	r1, [r7, #12]
 8001c38:	6878      	ldr	r0, [r7, #4]
 8001c3a:	f000 f888 	bl	8001d4e <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != 0U)
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001c44:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d00e      	beq.n	8001c6a <HAL_FDCAN_IRQHandler+0x1ce>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMESTAMP_WRAPAROUND) != 0U)
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c52:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d007      	beq.n	8001c6a <HAL_FDCAN_IRQHandler+0x1ce>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001c62:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 8001c64:	6878      	ldr	r0, [r7, #4]
 8001c66:	f000 f888 	bl	8001d7a <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED) != 0U)
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001c70:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d00e      	beq.n	8001c96 <HAL_FDCAN_IRQHandler+0x1fa>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMEOUT_OCCURRED) != 0U)
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c7e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d007      	beq.n	8001c96 <HAL_FDCAN_IRQHandler+0x1fa>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001c8e:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 8001c90:	6878      	ldr	r0, [r7, #4]
 8001c92:	f000 f87c 	bl	8001d8e <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE) != 0U)
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001c9c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d011      	beq.n	8001cc8 <HAL_FDCAN_IRQHandler+0x22c>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RAM_ACCESS_FAILURE) != 0U)
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001caa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d00a      	beq.n	8001cc8 <HAL_FDCAN_IRQHandler+0x22c>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001cba:	651a      	str	r2, [r3, #80]	; 0x50

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001cc0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	661a      	str	r2, [r3, #96]	; 0x60
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 8001cc8:	697b      	ldr	r3, [r7, #20]
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d007      	beq.n	8001cde <HAL_FDCAN_IRQHandler+0x242>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	697a      	ldr	r2, [r7, #20]
 8001cd4:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 8001cd6:	6979      	ldr	r1, [r7, #20]
 8001cd8:	6878      	ldr	r0, [r7, #4]
 8001cda:	f000 f876 	bl	8001dca <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 8001cde:	69bb      	ldr	r3, [r7, #24]
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d009      	beq.n	8001cf8 <HAL_FDCAN_IRQHandler+0x25c>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	69ba      	ldr	r2, [r7, #24]
 8001cea:	651a      	str	r2, [r3, #80]	; 0x50

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001cf0:	69bb      	ldr	r3, [r7, #24]
 8001cf2:	431a      	orrs	r2, r3
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d002      	beq.n	8001d06 <HAL_FDCAN_IRQHandler+0x26a>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 8001d00:	6878      	ldr	r0, [r7, #4]
 8001d02:	f000 f858 	bl	8001db6 <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 8001d06:	bf00      	nop
 8001d08:	3728      	adds	r7, #40	; 0x28
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	bd80      	pop	{r7, pc}

08001d0e <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signalled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 8001d0e:	b480      	push	{r7}
 8001d10:	b083      	sub	sp, #12
 8001d12:	af00      	add	r7, sp, #0
 8001d14:	6078      	str	r0, [r7, #4]
 8001d16:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 8001d18:	bf00      	nop
 8001d1a:	370c      	adds	r7, #12
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d22:	4770      	bx	lr

08001d24 <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signalled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 8001d24:	b480      	push	{r7}
 8001d26:	b083      	sub	sp, #12
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]
 8001d2c:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 8001d2e:	bf00      	nop
 8001d30:	370c      	adds	r7, #12
 8001d32:	46bd      	mov	sp, r7
 8001d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d38:	4770      	bx	lr

08001d3a <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8001d3a:	b480      	push	{r7}
 8001d3c:	b083      	sub	sp, #12
 8001d3e:	af00      	add	r7, sp, #0
 8001d40:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 8001d42:	bf00      	nop
 8001d44:	370c      	adds	r7, #12
 8001d46:	46bd      	mov	sp, r7
 8001d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4c:	4770      	bx	lr

08001d4e <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8001d4e:	b480      	push	{r7}
 8001d50:	b083      	sub	sp, #12
 8001d52:	af00      	add	r7, sp, #0
 8001d54:	6078      	str	r0, [r7, #4]
 8001d56:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 8001d58:	bf00      	nop
 8001d5a:	370c      	adds	r7, #12
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d62:	4770      	bx	lr

08001d64 <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8001d64:	b480      	push	{r7}
 8001d66:	b083      	sub	sp, #12
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]
 8001d6c:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 8001d6e:	bf00      	nop
 8001d70:	370c      	adds	r7, #12
 8001d72:	46bd      	mov	sp, r7
 8001d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d78:	4770      	bx	lr

08001d7a <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8001d7a:	b480      	push	{r7}
 8001d7c:	b083      	sub	sp, #12
 8001d7e:	af00      	add	r7, sp, #0
 8001d80:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 8001d82:	bf00      	nop
 8001d84:	370c      	adds	r7, #12
 8001d86:	46bd      	mov	sp, r7
 8001d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8c:	4770      	bx	lr

08001d8e <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8001d8e:	b480      	push	{r7}
 8001d90:	b083      	sub	sp, #12
 8001d92:	af00      	add	r7, sp, #0
 8001d94:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 8001d96:	bf00      	nop
 8001d98:	370c      	adds	r7, #12
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da0:	4770      	bx	lr

08001da2 <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8001da2:	b480      	push	{r7}
 8001da4:	b083      	sub	sp, #12
 8001da6:	af00      	add	r7, sp, #0
 8001da8:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 8001daa:	bf00      	nop
 8001dac:	370c      	adds	r7, #12
 8001dae:	46bd      	mov	sp, r7
 8001db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db4:	4770      	bx	lr

08001db6 <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8001db6:	b480      	push	{r7}
 8001db8:	b083      	sub	sp, #12
 8001dba:	af00      	add	r7, sp, #0
 8001dbc:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 8001dbe:	bf00      	nop
 8001dc0:	370c      	adds	r7, #12
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc8:	4770      	bx	lr

08001dca <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 8001dca:	b480      	push	{r7}
 8001dcc:	b083      	sub	sp, #12
 8001dce:	af00      	add	r7, sp, #0
 8001dd0:	6078      	str	r0, [r7, #4]
 8001dd2:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 8001dd4:	bf00      	nop
 8001dd6:	370c      	adds	r7, #12
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dde:	4770      	bx	lr

08001de0 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8001de0:	b480      	push	{r7}
 8001de2:	b085      	sub	sp, #20
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 8001de8:	4b27      	ldr	r3, [pc, #156]	; (8001e88 <FDCAN_CalcultateRamBlockAddresses+0xa8>)
 8001dea:	60bb      	str	r3, [r7, #8]
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	68ba      	ldr	r2, [r7, #8]
 8001df0:	641a      	str	r2, [r3, #64]	; 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001dfa:	f423 11f8 	bic.w	r1, r3, #2031616	; 0x1f0000
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e02:	041a      	lsls	r2, r3, #16
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	430a      	orrs	r2, r1
 8001e0a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 8001e0e:	68bb      	ldr	r3, [r7, #8]
 8001e10:	f103 0270 	add.w	r2, r3, #112	; 0x70
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	645a      	str	r2, [r3, #68]	; 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001e20:	f023 6170 	bic.w	r1, r3, #251658240	; 0xf000000
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e28:	061a      	lsls	r2, r3, #24
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	430a      	orrs	r2, r1
 8001e30:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 8001e34:	68bb      	ldr	r3, [r7, #8]
 8001e36:	f103 02b0 	add.w	r2, r3, #176	; 0xb0
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	649a      	str	r2, [r3, #72]	; 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 8001e3e:	68bb      	ldr	r3, [r7, #8]
 8001e40:	f503 72c4 	add.w	r2, r3, #392	; 0x188
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 8001e48:	68bb      	ldr	r3, [r7, #8]
 8001e4a:	f503 7218 	add.w	r2, r3, #608	; 0x260
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	651a      	str	r2, [r3, #80]	; 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 8001e52:	68bb      	ldr	r3, [r7, #8]
 8001e54:	f503 721e 	add.w	r2, r3, #632	; 0x278
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8001e5c:	68bb      	ldr	r3, [r7, #8]
 8001e5e:	60fb      	str	r3, [r7, #12]
 8001e60:	e005      	b.n	8001e6e <FDCAN_CalcultateRamBlockAddresses+0x8e>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	2200      	movs	r2, #0
 8001e66:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	3304      	adds	r3, #4
 8001e6c:	60fb      	str	r3, [r7, #12]
 8001e6e:	68bb      	ldr	r3, [r7, #8]
 8001e70:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8001e74:	68fa      	ldr	r2, [r7, #12]
 8001e76:	429a      	cmp	r2, r3
 8001e78:	d3f3      	bcc.n	8001e62 <FDCAN_CalcultateRamBlockAddresses+0x82>
  }
}
 8001e7a:	bf00      	nop
 8001e7c:	bf00      	nop
 8001e7e:	3714      	adds	r7, #20
 8001e80:	46bd      	mov	sp, r7
 8001e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e86:	4770      	bx	lr
 8001e88:	4000a400 	.word	0x4000a400

08001e8c <FDCAN_CopyMessageToRAM>:
  * @param  BufferIndex index of the buffer to be configured.
  * @retval none
 */
static void FDCAN_CopyMessageToRAM(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader, uint8_t *pTxData,
                                   uint32_t BufferIndex)
{
 8001e8c:	b480      	push	{r7}
 8001e8e:	b089      	sub	sp, #36	; 0x24
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	60f8      	str	r0, [r7, #12]
 8001e94:	60b9      	str	r1, [r7, #8]
 8001e96:	607a      	str	r2, [r7, #4]
 8001e98:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 8001e9a:	68bb      	ldr	r3, [r7, #8]
 8001e9c:	685b      	ldr	r3, [r3, #4]
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d10a      	bne.n	8001eb8 <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8001ea2:	68bb      	ldr	r3, [r7, #8]
 8001ea4:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 8001ea6:	68bb      	ldr	r3, [r7, #8]
 8001ea8:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 8001eaa:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18U));
 8001eac:	68bb      	ldr	r3, [r7, #8]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8001eb2:	4313      	orrs	r3, r2
 8001eb4:	61fb      	str	r3, [r7, #28]
 8001eb6:	e00a      	b.n	8001ece <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8001eb8:	68bb      	ldr	r3, [r7, #8]
 8001eba:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 8001ebc:	68bb      	ldr	r3, [r7, #8]
 8001ebe:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 8001ec0:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 8001ec2:	68bb      	ldr	r3, [r7, #8]
 8001ec4:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 8001ec6:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8001ec8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001ecc:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8001ece:	68bb      	ldr	r3, [r7, #8]
 8001ed0:	6a1b      	ldr	r3, [r3, #32]
 8001ed2:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 8001ed4:	68bb      	ldr	r3, [r7, #8]
 8001ed6:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8001ed8:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 8001eda:	68bb      	ldr	r3, [r7, #8]
 8001edc:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 8001ede:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 8001ee0:	68bb      	ldr	r3, [r7, #8]
 8001ee2:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 8001ee4:	431a      	orrs	r2, r3
                 pTxHeader->DataLength);
 8001ee6:	68bb      	ldr	r3, [r7, #8]
 8001ee8:	68db      	ldr	r3, [r3, #12]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8001eea:	4313      	orrs	r3, r2
 8001eec:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxFIFOQSA + (BufferIndex * SRAMCAN_TFQ_SIZE));
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8001ef2:	683a      	ldr	r2, [r7, #0]
 8001ef4:	4613      	mov	r3, r2
 8001ef6:	00db      	lsls	r3, r3, #3
 8001ef8:	4413      	add	r3, r2
 8001efa:	00db      	lsls	r3, r3, #3
 8001efc:	440b      	add	r3, r1
 8001efe:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 8001f00:	69bb      	ldr	r3, [r7, #24]
 8001f02:	69fa      	ldr	r2, [r7, #28]
 8001f04:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8001f06:	69bb      	ldr	r3, [r7, #24]
 8001f08:	3304      	adds	r3, #4
 8001f0a:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 8001f0c:	69bb      	ldr	r3, [r7, #24]
 8001f0e:	693a      	ldr	r2, [r7, #16]
 8001f10:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8001f12:	69bb      	ldr	r3, [r7, #24]
 8001f14:	3304      	adds	r3, #4
 8001f16:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16U]; ByteCounter += 4U)
 8001f18:	2300      	movs	r3, #0
 8001f1a:	617b      	str	r3, [r7, #20]
 8001f1c:	e020      	b.n	8001f60 <FDCAN_CopyMessageToRAM+0xd4>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8001f1e:	697b      	ldr	r3, [r7, #20]
 8001f20:	3303      	adds	r3, #3
 8001f22:	687a      	ldr	r2, [r7, #4]
 8001f24:	4413      	add	r3, r2
 8001f26:	781b      	ldrb	r3, [r3, #0]
 8001f28:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8001f2a:	697b      	ldr	r3, [r7, #20]
 8001f2c:	3302      	adds	r3, #2
 8001f2e:	6879      	ldr	r1, [r7, #4]
 8001f30:	440b      	add	r3, r1
 8001f32:	781b      	ldrb	r3, [r3, #0]
 8001f34:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8001f36:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8001f38:	697b      	ldr	r3, [r7, #20]
 8001f3a:	3301      	adds	r3, #1
 8001f3c:	6879      	ldr	r1, [r7, #4]
 8001f3e:	440b      	add	r3, r1
 8001f40:	781b      	ldrb	r3, [r3, #0]
 8001f42:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8001f44:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 8001f46:	6879      	ldr	r1, [r7, #4]
 8001f48:	697a      	ldr	r2, [r7, #20]
 8001f4a:	440a      	add	r2, r1
 8001f4c:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8001f4e:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8001f50:	69bb      	ldr	r3, [r7, #24]
 8001f52:	601a      	str	r2, [r3, #0]
    TxAddress++;
 8001f54:	69bb      	ldr	r3, [r7, #24]
 8001f56:	3304      	adds	r3, #4
 8001f58:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16U]; ByteCounter += 4U)
 8001f5a:	697b      	ldr	r3, [r7, #20]
 8001f5c:	3304      	adds	r3, #4
 8001f5e:	617b      	str	r3, [r7, #20]
 8001f60:	68bb      	ldr	r3, [r7, #8]
 8001f62:	68db      	ldr	r3, [r3, #12]
 8001f64:	0c1b      	lsrs	r3, r3, #16
 8001f66:	4a06      	ldr	r2, [pc, #24]	; (8001f80 <FDCAN_CopyMessageToRAM+0xf4>)
 8001f68:	5cd3      	ldrb	r3, [r2, r3]
 8001f6a:	461a      	mov	r2, r3
 8001f6c:	697b      	ldr	r3, [r7, #20]
 8001f6e:	4293      	cmp	r3, r2
 8001f70:	d3d5      	bcc.n	8001f1e <FDCAN_CopyMessageToRAM+0x92>
  }
}
 8001f72:	bf00      	nop
 8001f74:	bf00      	nop
 8001f76:	3724      	adds	r7, #36	; 0x24
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7e:	4770      	bx	lr
 8001f80:	0800ac04 	.word	0x0800ac04

08001f84 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f84:	b480      	push	{r7}
 8001f86:	b087      	sub	sp, #28
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]
 8001f8c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001f8e:	2300      	movs	r3, #0
 8001f90:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001f92:	e15a      	b.n	800224a <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001f94:	683b      	ldr	r3, [r7, #0]
 8001f96:	681a      	ldr	r2, [r3, #0]
 8001f98:	2101      	movs	r1, #1
 8001f9a:	697b      	ldr	r3, [r7, #20]
 8001f9c:	fa01 f303 	lsl.w	r3, r1, r3
 8001fa0:	4013      	ands	r3, r2
 8001fa2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	f000 814c 	beq.w	8002244 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001fac:	683b      	ldr	r3, [r7, #0]
 8001fae:	685b      	ldr	r3, [r3, #4]
 8001fb0:	f003 0303 	and.w	r3, r3, #3
 8001fb4:	2b01      	cmp	r3, #1
 8001fb6:	d005      	beq.n	8001fc4 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001fb8:	683b      	ldr	r3, [r7, #0]
 8001fba:	685b      	ldr	r3, [r3, #4]
 8001fbc:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001fc0:	2b02      	cmp	r3, #2
 8001fc2:	d130      	bne.n	8002026 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	689b      	ldr	r3, [r3, #8]
 8001fc8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001fca:	697b      	ldr	r3, [r7, #20]
 8001fcc:	005b      	lsls	r3, r3, #1
 8001fce:	2203      	movs	r2, #3
 8001fd0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fd4:	43db      	mvns	r3, r3
 8001fd6:	693a      	ldr	r2, [r7, #16]
 8001fd8:	4013      	ands	r3, r2
 8001fda:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001fdc:	683b      	ldr	r3, [r7, #0]
 8001fde:	68da      	ldr	r2, [r3, #12]
 8001fe0:	697b      	ldr	r3, [r7, #20]
 8001fe2:	005b      	lsls	r3, r3, #1
 8001fe4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fe8:	693a      	ldr	r2, [r7, #16]
 8001fea:	4313      	orrs	r3, r2
 8001fec:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	693a      	ldr	r2, [r7, #16]
 8001ff2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	685b      	ldr	r3, [r3, #4]
 8001ff8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001ffa:	2201      	movs	r2, #1
 8001ffc:	697b      	ldr	r3, [r7, #20]
 8001ffe:	fa02 f303 	lsl.w	r3, r2, r3
 8002002:	43db      	mvns	r3, r3
 8002004:	693a      	ldr	r2, [r7, #16]
 8002006:	4013      	ands	r3, r2
 8002008:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800200a:	683b      	ldr	r3, [r7, #0]
 800200c:	685b      	ldr	r3, [r3, #4]
 800200e:	091b      	lsrs	r3, r3, #4
 8002010:	f003 0201 	and.w	r2, r3, #1
 8002014:	697b      	ldr	r3, [r7, #20]
 8002016:	fa02 f303 	lsl.w	r3, r2, r3
 800201a:	693a      	ldr	r2, [r7, #16]
 800201c:	4313      	orrs	r3, r2
 800201e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	693a      	ldr	r2, [r7, #16]
 8002024:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002026:	683b      	ldr	r3, [r7, #0]
 8002028:	685b      	ldr	r3, [r3, #4]
 800202a:	f003 0303 	and.w	r3, r3, #3
 800202e:	2b03      	cmp	r3, #3
 8002030:	d017      	beq.n	8002062 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	68db      	ldr	r3, [r3, #12]
 8002036:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002038:	697b      	ldr	r3, [r7, #20]
 800203a:	005b      	lsls	r3, r3, #1
 800203c:	2203      	movs	r2, #3
 800203e:	fa02 f303 	lsl.w	r3, r2, r3
 8002042:	43db      	mvns	r3, r3
 8002044:	693a      	ldr	r2, [r7, #16]
 8002046:	4013      	ands	r3, r2
 8002048:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800204a:	683b      	ldr	r3, [r7, #0]
 800204c:	689a      	ldr	r2, [r3, #8]
 800204e:	697b      	ldr	r3, [r7, #20]
 8002050:	005b      	lsls	r3, r3, #1
 8002052:	fa02 f303 	lsl.w	r3, r2, r3
 8002056:	693a      	ldr	r2, [r7, #16]
 8002058:	4313      	orrs	r3, r2
 800205a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	693a      	ldr	r2, [r7, #16]
 8002060:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002062:	683b      	ldr	r3, [r7, #0]
 8002064:	685b      	ldr	r3, [r3, #4]
 8002066:	f003 0303 	and.w	r3, r3, #3
 800206a:	2b02      	cmp	r3, #2
 800206c:	d123      	bne.n	80020b6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800206e:	697b      	ldr	r3, [r7, #20]
 8002070:	08da      	lsrs	r2, r3, #3
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	3208      	adds	r2, #8
 8002076:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800207a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800207c:	697b      	ldr	r3, [r7, #20]
 800207e:	f003 0307 	and.w	r3, r3, #7
 8002082:	009b      	lsls	r3, r3, #2
 8002084:	220f      	movs	r2, #15
 8002086:	fa02 f303 	lsl.w	r3, r2, r3
 800208a:	43db      	mvns	r3, r3
 800208c:	693a      	ldr	r2, [r7, #16]
 800208e:	4013      	ands	r3, r2
 8002090:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002092:	683b      	ldr	r3, [r7, #0]
 8002094:	691a      	ldr	r2, [r3, #16]
 8002096:	697b      	ldr	r3, [r7, #20]
 8002098:	f003 0307 	and.w	r3, r3, #7
 800209c:	009b      	lsls	r3, r3, #2
 800209e:	fa02 f303 	lsl.w	r3, r2, r3
 80020a2:	693a      	ldr	r2, [r7, #16]
 80020a4:	4313      	orrs	r3, r2
 80020a6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80020a8:	697b      	ldr	r3, [r7, #20]
 80020aa:	08da      	lsrs	r2, r3, #3
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	3208      	adds	r2, #8
 80020b0:	6939      	ldr	r1, [r7, #16]
 80020b2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80020bc:	697b      	ldr	r3, [r7, #20]
 80020be:	005b      	lsls	r3, r3, #1
 80020c0:	2203      	movs	r2, #3
 80020c2:	fa02 f303 	lsl.w	r3, r2, r3
 80020c6:	43db      	mvns	r3, r3
 80020c8:	693a      	ldr	r2, [r7, #16]
 80020ca:	4013      	ands	r3, r2
 80020cc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80020ce:	683b      	ldr	r3, [r7, #0]
 80020d0:	685b      	ldr	r3, [r3, #4]
 80020d2:	f003 0203 	and.w	r2, r3, #3
 80020d6:	697b      	ldr	r3, [r7, #20]
 80020d8:	005b      	lsls	r3, r3, #1
 80020da:	fa02 f303 	lsl.w	r3, r2, r3
 80020de:	693a      	ldr	r2, [r7, #16]
 80020e0:	4313      	orrs	r3, r2
 80020e2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	693a      	ldr	r2, [r7, #16]
 80020e8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80020ea:	683b      	ldr	r3, [r7, #0]
 80020ec:	685b      	ldr	r3, [r3, #4]
 80020ee:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	f000 80a6 	beq.w	8002244 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80020f8:	4b5b      	ldr	r3, [pc, #364]	; (8002268 <HAL_GPIO_Init+0x2e4>)
 80020fa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80020fc:	4a5a      	ldr	r2, [pc, #360]	; (8002268 <HAL_GPIO_Init+0x2e4>)
 80020fe:	f043 0301 	orr.w	r3, r3, #1
 8002102:	6613      	str	r3, [r2, #96]	; 0x60
 8002104:	4b58      	ldr	r3, [pc, #352]	; (8002268 <HAL_GPIO_Init+0x2e4>)
 8002106:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002108:	f003 0301 	and.w	r3, r3, #1
 800210c:	60bb      	str	r3, [r7, #8]
 800210e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002110:	4a56      	ldr	r2, [pc, #344]	; (800226c <HAL_GPIO_Init+0x2e8>)
 8002112:	697b      	ldr	r3, [r7, #20]
 8002114:	089b      	lsrs	r3, r3, #2
 8002116:	3302      	adds	r3, #2
 8002118:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800211c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800211e:	697b      	ldr	r3, [r7, #20]
 8002120:	f003 0303 	and.w	r3, r3, #3
 8002124:	009b      	lsls	r3, r3, #2
 8002126:	220f      	movs	r2, #15
 8002128:	fa02 f303 	lsl.w	r3, r2, r3
 800212c:	43db      	mvns	r3, r3
 800212e:	693a      	ldr	r2, [r7, #16]
 8002130:	4013      	ands	r3, r2
 8002132:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800213a:	d01f      	beq.n	800217c <HAL_GPIO_Init+0x1f8>
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	4a4c      	ldr	r2, [pc, #304]	; (8002270 <HAL_GPIO_Init+0x2ec>)
 8002140:	4293      	cmp	r3, r2
 8002142:	d019      	beq.n	8002178 <HAL_GPIO_Init+0x1f4>
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	4a4b      	ldr	r2, [pc, #300]	; (8002274 <HAL_GPIO_Init+0x2f0>)
 8002148:	4293      	cmp	r3, r2
 800214a:	d013      	beq.n	8002174 <HAL_GPIO_Init+0x1f0>
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	4a4a      	ldr	r2, [pc, #296]	; (8002278 <HAL_GPIO_Init+0x2f4>)
 8002150:	4293      	cmp	r3, r2
 8002152:	d00d      	beq.n	8002170 <HAL_GPIO_Init+0x1ec>
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	4a49      	ldr	r2, [pc, #292]	; (800227c <HAL_GPIO_Init+0x2f8>)
 8002158:	4293      	cmp	r3, r2
 800215a:	d007      	beq.n	800216c <HAL_GPIO_Init+0x1e8>
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	4a48      	ldr	r2, [pc, #288]	; (8002280 <HAL_GPIO_Init+0x2fc>)
 8002160:	4293      	cmp	r3, r2
 8002162:	d101      	bne.n	8002168 <HAL_GPIO_Init+0x1e4>
 8002164:	2305      	movs	r3, #5
 8002166:	e00a      	b.n	800217e <HAL_GPIO_Init+0x1fa>
 8002168:	2306      	movs	r3, #6
 800216a:	e008      	b.n	800217e <HAL_GPIO_Init+0x1fa>
 800216c:	2304      	movs	r3, #4
 800216e:	e006      	b.n	800217e <HAL_GPIO_Init+0x1fa>
 8002170:	2303      	movs	r3, #3
 8002172:	e004      	b.n	800217e <HAL_GPIO_Init+0x1fa>
 8002174:	2302      	movs	r3, #2
 8002176:	e002      	b.n	800217e <HAL_GPIO_Init+0x1fa>
 8002178:	2301      	movs	r3, #1
 800217a:	e000      	b.n	800217e <HAL_GPIO_Init+0x1fa>
 800217c:	2300      	movs	r3, #0
 800217e:	697a      	ldr	r2, [r7, #20]
 8002180:	f002 0203 	and.w	r2, r2, #3
 8002184:	0092      	lsls	r2, r2, #2
 8002186:	4093      	lsls	r3, r2
 8002188:	693a      	ldr	r2, [r7, #16]
 800218a:	4313      	orrs	r3, r2
 800218c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800218e:	4937      	ldr	r1, [pc, #220]	; (800226c <HAL_GPIO_Init+0x2e8>)
 8002190:	697b      	ldr	r3, [r7, #20]
 8002192:	089b      	lsrs	r3, r3, #2
 8002194:	3302      	adds	r3, #2
 8002196:	693a      	ldr	r2, [r7, #16]
 8002198:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800219c:	4b39      	ldr	r3, [pc, #228]	; (8002284 <HAL_GPIO_Init+0x300>)
 800219e:	689b      	ldr	r3, [r3, #8]
 80021a0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	43db      	mvns	r3, r3
 80021a6:	693a      	ldr	r2, [r7, #16]
 80021a8:	4013      	ands	r3, r2
 80021aa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80021ac:	683b      	ldr	r3, [r7, #0]
 80021ae:	685b      	ldr	r3, [r3, #4]
 80021b0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d003      	beq.n	80021c0 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80021b8:	693a      	ldr	r2, [r7, #16]
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	4313      	orrs	r3, r2
 80021be:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80021c0:	4a30      	ldr	r2, [pc, #192]	; (8002284 <HAL_GPIO_Init+0x300>)
 80021c2:	693b      	ldr	r3, [r7, #16]
 80021c4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80021c6:	4b2f      	ldr	r3, [pc, #188]	; (8002284 <HAL_GPIO_Init+0x300>)
 80021c8:	68db      	ldr	r3, [r3, #12]
 80021ca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	43db      	mvns	r3, r3
 80021d0:	693a      	ldr	r2, [r7, #16]
 80021d2:	4013      	ands	r3, r2
 80021d4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80021d6:	683b      	ldr	r3, [r7, #0]
 80021d8:	685b      	ldr	r3, [r3, #4]
 80021da:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d003      	beq.n	80021ea <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80021e2:	693a      	ldr	r2, [r7, #16]
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	4313      	orrs	r3, r2
 80021e8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80021ea:	4a26      	ldr	r2, [pc, #152]	; (8002284 <HAL_GPIO_Init+0x300>)
 80021ec:	693b      	ldr	r3, [r7, #16]
 80021ee:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80021f0:	4b24      	ldr	r3, [pc, #144]	; (8002284 <HAL_GPIO_Init+0x300>)
 80021f2:	685b      	ldr	r3, [r3, #4]
 80021f4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	43db      	mvns	r3, r3
 80021fa:	693a      	ldr	r2, [r7, #16]
 80021fc:	4013      	ands	r3, r2
 80021fe:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002200:	683b      	ldr	r3, [r7, #0]
 8002202:	685b      	ldr	r3, [r3, #4]
 8002204:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002208:	2b00      	cmp	r3, #0
 800220a:	d003      	beq.n	8002214 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 800220c:	693a      	ldr	r2, [r7, #16]
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	4313      	orrs	r3, r2
 8002212:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002214:	4a1b      	ldr	r2, [pc, #108]	; (8002284 <HAL_GPIO_Init+0x300>)
 8002216:	693b      	ldr	r3, [r7, #16]
 8002218:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800221a:	4b1a      	ldr	r3, [pc, #104]	; (8002284 <HAL_GPIO_Init+0x300>)
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	43db      	mvns	r3, r3
 8002224:	693a      	ldr	r2, [r7, #16]
 8002226:	4013      	ands	r3, r2
 8002228:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800222a:	683b      	ldr	r3, [r7, #0]
 800222c:	685b      	ldr	r3, [r3, #4]
 800222e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002232:	2b00      	cmp	r3, #0
 8002234:	d003      	beq.n	800223e <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8002236:	693a      	ldr	r2, [r7, #16]
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	4313      	orrs	r3, r2
 800223c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800223e:	4a11      	ldr	r2, [pc, #68]	; (8002284 <HAL_GPIO_Init+0x300>)
 8002240:	693b      	ldr	r3, [r7, #16]
 8002242:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002244:	697b      	ldr	r3, [r7, #20]
 8002246:	3301      	adds	r3, #1
 8002248:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800224a:	683b      	ldr	r3, [r7, #0]
 800224c:	681a      	ldr	r2, [r3, #0]
 800224e:	697b      	ldr	r3, [r7, #20]
 8002250:	fa22 f303 	lsr.w	r3, r2, r3
 8002254:	2b00      	cmp	r3, #0
 8002256:	f47f ae9d 	bne.w	8001f94 <HAL_GPIO_Init+0x10>
  }
}
 800225a:	bf00      	nop
 800225c:	bf00      	nop
 800225e:	371c      	adds	r7, #28
 8002260:	46bd      	mov	sp, r7
 8002262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002266:	4770      	bx	lr
 8002268:	40021000 	.word	0x40021000
 800226c:	40010000 	.word	0x40010000
 8002270:	48000400 	.word	0x48000400
 8002274:	48000800 	.word	0x48000800
 8002278:	48000c00 	.word	0x48000c00
 800227c:	48001000 	.word	0x48001000
 8002280:	48001400 	.word	0x48001400
 8002284:	40010400 	.word	0x40010400

08002288 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002288:	b480      	push	{r7}
 800228a:	b083      	sub	sp, #12
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]
 8002290:	460b      	mov	r3, r1
 8002292:	807b      	strh	r3, [r7, #2]
 8002294:	4613      	mov	r3, r2
 8002296:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002298:	787b      	ldrb	r3, [r7, #1]
 800229a:	2b00      	cmp	r3, #0
 800229c:	d003      	beq.n	80022a6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800229e:	887a      	ldrh	r2, [r7, #2]
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80022a4:	e002      	b.n	80022ac <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80022a6:	887a      	ldrh	r2, [r7, #2]
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	629a      	str	r2, [r3, #40]	; 0x28
}
 80022ac:	bf00      	nop
 80022ae:	370c      	adds	r7, #12
 80022b0:	46bd      	mov	sp, r7
 80022b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b6:	4770      	bx	lr

080022b8 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80022b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80022ba:	b08b      	sub	sp, #44	; 0x2c
 80022bc:	af06      	add	r7, sp, #24
 80022be:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d101      	bne.n	80022ca <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80022c6:	2301      	movs	r3, #1
 80022c8:	e0d7      	b.n	800247a <HAL_PCD_Init+0x1c2>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 80022d0:	b2db      	uxtb	r3, r3
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d106      	bne.n	80022e4 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	2200      	movs	r2, #0
 80022da:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80022de:	6878      	ldr	r0, [r7, #4]
 80022e0:	f007 fc8c 	bl	8009bfc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	2203      	movs	r2, #3
 80022e8:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	4618      	mov	r0, r3
 80022f2:	f003 fb5e 	bl	80059b2 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80022f6:	2300      	movs	r3, #0
 80022f8:	73fb      	strb	r3, [r7, #15]
 80022fa:	e04c      	b.n	8002396 <HAL_PCD_Init+0xde>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80022fc:	7bfb      	ldrb	r3, [r7, #15]
 80022fe:	6879      	ldr	r1, [r7, #4]
 8002300:	1c5a      	adds	r2, r3, #1
 8002302:	4613      	mov	r3, r2
 8002304:	009b      	lsls	r3, r3, #2
 8002306:	4413      	add	r3, r2
 8002308:	00db      	lsls	r3, r3, #3
 800230a:	440b      	add	r3, r1
 800230c:	3301      	adds	r3, #1
 800230e:	2201      	movs	r2, #1
 8002310:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002312:	7bfb      	ldrb	r3, [r7, #15]
 8002314:	6879      	ldr	r1, [r7, #4]
 8002316:	1c5a      	adds	r2, r3, #1
 8002318:	4613      	mov	r3, r2
 800231a:	009b      	lsls	r3, r3, #2
 800231c:	4413      	add	r3, r2
 800231e:	00db      	lsls	r3, r3, #3
 8002320:	440b      	add	r3, r1
 8002322:	7bfa      	ldrb	r2, [r7, #15]
 8002324:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002326:	7bfa      	ldrb	r2, [r7, #15]
 8002328:	7bfb      	ldrb	r3, [r7, #15]
 800232a:	b298      	uxth	r0, r3
 800232c:	6879      	ldr	r1, [r7, #4]
 800232e:	4613      	mov	r3, r2
 8002330:	009b      	lsls	r3, r3, #2
 8002332:	4413      	add	r3, r2
 8002334:	00db      	lsls	r3, r3, #3
 8002336:	440b      	add	r3, r1
 8002338:	3336      	adds	r3, #54	; 0x36
 800233a:	4602      	mov	r2, r0
 800233c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800233e:	7bfb      	ldrb	r3, [r7, #15]
 8002340:	6879      	ldr	r1, [r7, #4]
 8002342:	1c5a      	adds	r2, r3, #1
 8002344:	4613      	mov	r3, r2
 8002346:	009b      	lsls	r3, r3, #2
 8002348:	4413      	add	r3, r2
 800234a:	00db      	lsls	r3, r3, #3
 800234c:	440b      	add	r3, r1
 800234e:	3303      	adds	r3, #3
 8002350:	2200      	movs	r2, #0
 8002352:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002354:	7bfa      	ldrb	r2, [r7, #15]
 8002356:	6879      	ldr	r1, [r7, #4]
 8002358:	4613      	mov	r3, r2
 800235a:	009b      	lsls	r3, r3, #2
 800235c:	4413      	add	r3, r2
 800235e:	00db      	lsls	r3, r3, #3
 8002360:	440b      	add	r3, r1
 8002362:	3338      	adds	r3, #56	; 0x38
 8002364:	2200      	movs	r2, #0
 8002366:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002368:	7bfa      	ldrb	r2, [r7, #15]
 800236a:	6879      	ldr	r1, [r7, #4]
 800236c:	4613      	mov	r3, r2
 800236e:	009b      	lsls	r3, r3, #2
 8002370:	4413      	add	r3, r2
 8002372:	00db      	lsls	r3, r3, #3
 8002374:	440b      	add	r3, r1
 8002376:	333c      	adds	r3, #60	; 0x3c
 8002378:	2200      	movs	r2, #0
 800237a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800237c:	7bfa      	ldrb	r2, [r7, #15]
 800237e:	6879      	ldr	r1, [r7, #4]
 8002380:	4613      	mov	r3, r2
 8002382:	009b      	lsls	r3, r3, #2
 8002384:	4413      	add	r3, r2
 8002386:	00db      	lsls	r3, r3, #3
 8002388:	440b      	add	r3, r1
 800238a:	3340      	adds	r3, #64	; 0x40
 800238c:	2200      	movs	r2, #0
 800238e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002390:	7bfb      	ldrb	r3, [r7, #15]
 8002392:	3301      	adds	r3, #1
 8002394:	73fb      	strb	r3, [r7, #15]
 8002396:	7bfa      	ldrb	r2, [r7, #15]
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	685b      	ldr	r3, [r3, #4]
 800239c:	429a      	cmp	r2, r3
 800239e:	d3ad      	bcc.n	80022fc <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80023a0:	2300      	movs	r3, #0
 80023a2:	73fb      	strb	r3, [r7, #15]
 80023a4:	e044      	b.n	8002430 <HAL_PCD_Init+0x178>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80023a6:	7bfa      	ldrb	r2, [r7, #15]
 80023a8:	6879      	ldr	r1, [r7, #4]
 80023aa:	4613      	mov	r3, r2
 80023ac:	009b      	lsls	r3, r3, #2
 80023ae:	4413      	add	r3, r2
 80023b0:	00db      	lsls	r3, r3, #3
 80023b2:	440b      	add	r3, r1
 80023b4:	f203 1369 	addw	r3, r3, #361	; 0x169
 80023b8:	2200      	movs	r2, #0
 80023ba:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80023bc:	7bfa      	ldrb	r2, [r7, #15]
 80023be:	6879      	ldr	r1, [r7, #4]
 80023c0:	4613      	mov	r3, r2
 80023c2:	009b      	lsls	r3, r3, #2
 80023c4:	4413      	add	r3, r2
 80023c6:	00db      	lsls	r3, r3, #3
 80023c8:	440b      	add	r3, r1
 80023ca:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80023ce:	7bfa      	ldrb	r2, [r7, #15]
 80023d0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80023d2:	7bfa      	ldrb	r2, [r7, #15]
 80023d4:	6879      	ldr	r1, [r7, #4]
 80023d6:	4613      	mov	r3, r2
 80023d8:	009b      	lsls	r3, r3, #2
 80023da:	4413      	add	r3, r2
 80023dc:	00db      	lsls	r3, r3, #3
 80023de:	440b      	add	r3, r1
 80023e0:	f203 136b 	addw	r3, r3, #363	; 0x16b
 80023e4:	2200      	movs	r2, #0
 80023e6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80023e8:	7bfa      	ldrb	r2, [r7, #15]
 80023ea:	6879      	ldr	r1, [r7, #4]
 80023ec:	4613      	mov	r3, r2
 80023ee:	009b      	lsls	r3, r3, #2
 80023f0:	4413      	add	r3, r2
 80023f2:	00db      	lsls	r3, r3, #3
 80023f4:	440b      	add	r3, r1
 80023f6:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 80023fa:	2200      	movs	r2, #0
 80023fc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80023fe:	7bfa      	ldrb	r2, [r7, #15]
 8002400:	6879      	ldr	r1, [r7, #4]
 8002402:	4613      	mov	r3, r2
 8002404:	009b      	lsls	r3, r3, #2
 8002406:	4413      	add	r3, r2
 8002408:	00db      	lsls	r3, r3, #3
 800240a:	440b      	add	r3, r1
 800240c:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8002410:	2200      	movs	r2, #0
 8002412:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002414:	7bfa      	ldrb	r2, [r7, #15]
 8002416:	6879      	ldr	r1, [r7, #4]
 8002418:	4613      	mov	r3, r2
 800241a:	009b      	lsls	r3, r3, #2
 800241c:	4413      	add	r3, r2
 800241e:	00db      	lsls	r3, r3, #3
 8002420:	440b      	add	r3, r1
 8002422:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8002426:	2200      	movs	r2, #0
 8002428:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800242a:	7bfb      	ldrb	r3, [r7, #15]
 800242c:	3301      	adds	r3, #1
 800242e:	73fb      	strb	r3, [r7, #15]
 8002430:	7bfa      	ldrb	r2, [r7, #15]
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	685b      	ldr	r3, [r3, #4]
 8002436:	429a      	cmp	r2, r3
 8002438:	d3b5      	bcc.n	80023a6 <HAL_PCD_Init+0xee>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	603b      	str	r3, [r7, #0]
 8002440:	687e      	ldr	r6, [r7, #4]
 8002442:	466d      	mov	r5, sp
 8002444:	f106 0410 	add.w	r4, r6, #16
 8002448:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800244a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800244c:	6823      	ldr	r3, [r4, #0]
 800244e:	602b      	str	r3, [r5, #0]
 8002450:	1d33      	adds	r3, r6, #4
 8002452:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002454:	6838      	ldr	r0, [r7, #0]
 8002456:	f003 fac7 	bl	80059e8 <USB_DevInit>

  hpcd->USB_Address = 0U;
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	2200      	movs	r2, #0
 800245e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	2201      	movs	r2, #1
 8002466:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	69db      	ldr	r3, [r3, #28]
 800246e:	2b01      	cmp	r3, #1
 8002470:	d102      	bne.n	8002478 <HAL_PCD_Init+0x1c0>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002472:	6878      	ldr	r0, [r7, #4]
 8002474:	f001 fc29 	bl	8003cca <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8002478:	2300      	movs	r3, #0
}
 800247a:	4618      	mov	r0, r3
 800247c:	3714      	adds	r7, #20
 800247e:	46bd      	mov	sp, r7
 8002480:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002482 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002482:	b580      	push	{r7, lr}
 8002484:	b082      	sub	sp, #8
 8002486:	af00      	add	r7, sp, #0
 8002488:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002490:	2b01      	cmp	r3, #1
 8002492:	d101      	bne.n	8002498 <HAL_PCD_Start+0x16>
 8002494:	2302      	movs	r3, #2
 8002496:	e012      	b.n	80024be <HAL_PCD_Start+0x3c>
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	2201      	movs	r2, #1
 800249c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	4618      	mov	r0, r3
 80024a6:	f003 fa6d 	bl	8005984 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	4618      	mov	r0, r3
 80024b0:	f005 fc86 	bl	8007dc0 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	2200      	movs	r2, #0
 80024b8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80024bc:	2300      	movs	r3, #0
}
 80024be:	4618      	mov	r0, r3
 80024c0:	3708      	adds	r7, #8
 80024c2:	46bd      	mov	sp, r7
 80024c4:	bd80      	pop	{r7, pc}

080024c6 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80024c6:	b580      	push	{r7, lr}
 80024c8:	b084      	sub	sp, #16
 80024ca:	af00      	add	r7, sp, #0
 80024cc:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	4618      	mov	r0, r3
 80024d4:	f005 fc8b 	bl	8007dee <USB_ReadInterrupts>
 80024d8:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d003      	beq.n	80024ec <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 80024e4:	6878      	ldr	r0, [r7, #4]
 80024e6:	f000 fb26 	bl	8002b36 <PCD_EP_ISR_Handler>

    return;
 80024ea:	e110      	b.n	800270e <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d013      	beq.n	800251e <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80024fe:	b29a      	uxth	r2, r3
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002508:	b292      	uxth	r2, r2
 800250a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 800250e:	6878      	ldr	r0, [r7, #4]
 8002510:	f007 fc05 	bl	8009d1e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8002514:	2100      	movs	r1, #0
 8002516:	6878      	ldr	r0, [r7, #4]
 8002518:	f000 f8fc 	bl	8002714 <HAL_PCD_SetAddress>

    return;
 800251c:	e0f7      	b.n	800270e <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002524:	2b00      	cmp	r3, #0
 8002526:	d00c      	beq.n	8002542 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002530:	b29a      	uxth	r2, r3
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800253a:	b292      	uxth	r2, r2
 800253c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8002540:	e0e5      	b.n	800270e <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002548:	2b00      	cmp	r3, #0
 800254a:	d00c      	beq.n	8002566 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002554:	b29a      	uxth	r2, r3
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800255e:	b292      	uxth	r2, r2
 8002560:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8002564:	e0d3      	b.n	800270e <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800256c:	2b00      	cmp	r3, #0
 800256e:	d034      	beq.n	80025da <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002578:	b29a      	uxth	r2, r3
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f022 0204 	bic.w	r2, r2, #4
 8002582:	b292      	uxth	r2, r2
 8002584:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002590:	b29a      	uxth	r2, r3
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f022 0208 	bic.w	r2, r2, #8
 800259a:	b292      	uxth	r2, r2
 800259c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (hpcd->LPM_State == LPM_L1)
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 80025a6:	2b01      	cmp	r3, #1
 80025a8:	d107      	bne.n	80025ba <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	2200      	movs	r2, #0
 80025ae:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80025b2:	2100      	movs	r1, #0
 80025b4:	6878      	ldr	r0, [r7, #4]
 80025b6:	f007 fda7 	bl	800a108 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 80025ba:	6878      	ldr	r0, [r7, #4]
 80025bc:	f007 fbe8 	bl	8009d90 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80025c8:	b29a      	uxth	r2, r3
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80025d2:	b292      	uxth	r2, r2
 80025d4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 80025d8:	e099      	b.n	800270e <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d027      	beq.n	8002634 <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80025ec:	b29a      	uxth	r2, r3
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f042 0208 	orr.w	r2, r2, #8
 80025f6:	b292      	uxth	r2, r2
 80025f8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002604:	b29a      	uxth	r2, r3
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800260e:	b292      	uxth	r2, r2
 8002610:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800261c:	b29a      	uxth	r2, r3
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f042 0204 	orr.w	r2, r2, #4
 8002626:	b292      	uxth	r2, r2
 8002628:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 800262c:	6878      	ldr	r0, [r7, #4]
 800262e:	f007 fb95 	bl	8009d5c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8002632:	e06c      	b.n	800270e <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800263a:	2b00      	cmp	r3, #0
 800263c:	d040      	beq.n	80026c0 <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002646:	b29a      	uxth	r2, r3
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002650:	b292      	uxth	r2, r2
 8002652:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 800265c:	2b00      	cmp	r3, #0
 800265e:	d12b      	bne.n	80026b8 <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002668:	b29a      	uxth	r2, r3
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f042 0204 	orr.w	r2, r2, #4
 8002672:	b292      	uxth	r2, r2
 8002674:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002680:	b29a      	uxth	r2, r3
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f042 0208 	orr.w	r2, r2, #8
 800268a:	b292      	uxth	r2, r2
 800268c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      hpcd->LPM_State = LPM_L1;
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	2201      	movs	r2, #1
 8002694:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80026a0:	b29b      	uxth	r3, r3
 80026a2:	089b      	lsrs	r3, r3, #2
 80026a4:	f003 023c 	and.w	r2, r3, #60	; 0x3c
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	f8c3 22e4 	str.w	r2, [r3, #740]	; 0x2e4
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80026ae:	2101      	movs	r1, #1
 80026b0:	6878      	ldr	r0, [r7, #4]
 80026b2:	f007 fd29 	bl	800a108 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 80026b6:	e02a      	b.n	800270e <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 80026b8:	6878      	ldr	r0, [r7, #4]
 80026ba:	f007 fb4f 	bl	8009d5c <HAL_PCD_SuspendCallback>
    return;
 80026be:	e026      	b.n	800270e <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d00f      	beq.n	80026ea <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80026d2:	b29a      	uxth	r2, r3
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80026dc:	b292      	uxth	r2, r2
 80026de:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 80026e2:	6878      	ldr	r0, [r7, #4]
 80026e4:	f007 fb0d 	bl	8009d02 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80026e8:	e011      	b.n	800270e <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d00c      	beq.n	800270e <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80026fc:	b29a      	uxth	r2, r3
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002706:	b292      	uxth	r2, r2
 8002708:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 800270c:	bf00      	nop
  }
}
 800270e:	3710      	adds	r7, #16
 8002710:	46bd      	mov	sp, r7
 8002712:	bd80      	pop	{r7, pc}

08002714 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002714:	b580      	push	{r7, lr}
 8002716:	b082      	sub	sp, #8
 8002718:	af00      	add	r7, sp, #0
 800271a:	6078      	str	r0, [r7, #4]
 800271c:	460b      	mov	r3, r1
 800271e:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002726:	2b01      	cmp	r3, #1
 8002728:	d101      	bne.n	800272e <HAL_PCD_SetAddress+0x1a>
 800272a:	2302      	movs	r3, #2
 800272c:	e013      	b.n	8002756 <HAL_PCD_SetAddress+0x42>
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	2201      	movs	r2, #1
 8002732:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	78fa      	ldrb	r2, [r7, #3]
 800273a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	78fa      	ldrb	r2, [r7, #3]
 8002744:	4611      	mov	r1, r2
 8002746:	4618      	mov	r0, r3
 8002748:	f005 fb26 	bl	8007d98 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	2200      	movs	r2, #0
 8002750:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002754:	2300      	movs	r3, #0
}
 8002756:	4618      	mov	r0, r3
 8002758:	3708      	adds	r7, #8
 800275a:	46bd      	mov	sp, r7
 800275c:	bd80      	pop	{r7, pc}

0800275e <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800275e:	b580      	push	{r7, lr}
 8002760:	b084      	sub	sp, #16
 8002762:	af00      	add	r7, sp, #0
 8002764:	6078      	str	r0, [r7, #4]
 8002766:	4608      	mov	r0, r1
 8002768:	4611      	mov	r1, r2
 800276a:	461a      	mov	r2, r3
 800276c:	4603      	mov	r3, r0
 800276e:	70fb      	strb	r3, [r7, #3]
 8002770:	460b      	mov	r3, r1
 8002772:	803b      	strh	r3, [r7, #0]
 8002774:	4613      	mov	r3, r2
 8002776:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002778:	2300      	movs	r3, #0
 800277a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800277c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002780:	2b00      	cmp	r3, #0
 8002782:	da0e      	bge.n	80027a2 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002784:	78fb      	ldrb	r3, [r7, #3]
 8002786:	f003 0307 	and.w	r3, r3, #7
 800278a:	1c5a      	adds	r2, r3, #1
 800278c:	4613      	mov	r3, r2
 800278e:	009b      	lsls	r3, r3, #2
 8002790:	4413      	add	r3, r2
 8002792:	00db      	lsls	r3, r3, #3
 8002794:	687a      	ldr	r2, [r7, #4]
 8002796:	4413      	add	r3, r2
 8002798:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	2201      	movs	r2, #1
 800279e:	705a      	strb	r2, [r3, #1]
 80027a0:	e00e      	b.n	80027c0 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80027a2:	78fb      	ldrb	r3, [r7, #3]
 80027a4:	f003 0207 	and.w	r2, r3, #7
 80027a8:	4613      	mov	r3, r2
 80027aa:	009b      	lsls	r3, r3, #2
 80027ac:	4413      	add	r3, r2
 80027ae:	00db      	lsls	r3, r3, #3
 80027b0:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80027b4:	687a      	ldr	r2, [r7, #4]
 80027b6:	4413      	add	r3, r2
 80027b8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	2200      	movs	r2, #0
 80027be:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80027c0:	78fb      	ldrb	r3, [r7, #3]
 80027c2:	f003 0307 	and.w	r3, r3, #7
 80027c6:	b2da      	uxtb	r2, r3
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80027cc:	883a      	ldrh	r2, [r7, #0]
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	78ba      	ldrb	r2, [r7, #2]
 80027d6:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	785b      	ldrb	r3, [r3, #1]
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d004      	beq.n	80027ea <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	781b      	ldrb	r3, [r3, #0]
 80027e4:	b29a      	uxth	r2, r3
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80027ea:	78bb      	ldrb	r3, [r7, #2]
 80027ec:	2b02      	cmp	r3, #2
 80027ee:	d102      	bne.n	80027f6 <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	2200      	movs	r2, #0
 80027f4:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80027fc:	2b01      	cmp	r3, #1
 80027fe:	d101      	bne.n	8002804 <HAL_PCD_EP_Open+0xa6>
 8002800:	2302      	movs	r3, #2
 8002802:	e00e      	b.n	8002822 <HAL_PCD_EP_Open+0xc4>
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	2201      	movs	r2, #1
 8002808:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	68f9      	ldr	r1, [r7, #12]
 8002812:	4618      	mov	r0, r3
 8002814:	f003 f90a 	bl	8005a2c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	2200      	movs	r2, #0
 800281c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8002820:	7afb      	ldrb	r3, [r7, #11]
}
 8002822:	4618      	mov	r0, r3
 8002824:	3710      	adds	r7, #16
 8002826:	46bd      	mov	sp, r7
 8002828:	bd80      	pop	{r7, pc}

0800282a <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800282a:	b580      	push	{r7, lr}
 800282c:	b084      	sub	sp, #16
 800282e:	af00      	add	r7, sp, #0
 8002830:	6078      	str	r0, [r7, #4]
 8002832:	460b      	mov	r3, r1
 8002834:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002836:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800283a:	2b00      	cmp	r3, #0
 800283c:	da0e      	bge.n	800285c <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800283e:	78fb      	ldrb	r3, [r7, #3]
 8002840:	f003 0307 	and.w	r3, r3, #7
 8002844:	1c5a      	adds	r2, r3, #1
 8002846:	4613      	mov	r3, r2
 8002848:	009b      	lsls	r3, r3, #2
 800284a:	4413      	add	r3, r2
 800284c:	00db      	lsls	r3, r3, #3
 800284e:	687a      	ldr	r2, [r7, #4]
 8002850:	4413      	add	r3, r2
 8002852:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	2201      	movs	r2, #1
 8002858:	705a      	strb	r2, [r3, #1]
 800285a:	e00e      	b.n	800287a <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800285c:	78fb      	ldrb	r3, [r7, #3]
 800285e:	f003 0207 	and.w	r2, r3, #7
 8002862:	4613      	mov	r3, r2
 8002864:	009b      	lsls	r3, r3, #2
 8002866:	4413      	add	r3, r2
 8002868:	00db      	lsls	r3, r3, #3
 800286a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800286e:	687a      	ldr	r2, [r7, #4]
 8002870:	4413      	add	r3, r2
 8002872:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	2200      	movs	r2, #0
 8002878:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800287a:	78fb      	ldrb	r3, [r7, #3]
 800287c:	f003 0307 	and.w	r3, r3, #7
 8002880:	b2da      	uxtb	r2, r3
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800288c:	2b01      	cmp	r3, #1
 800288e:	d101      	bne.n	8002894 <HAL_PCD_EP_Close+0x6a>
 8002890:	2302      	movs	r3, #2
 8002892:	e00e      	b.n	80028b2 <HAL_PCD_EP_Close+0x88>
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	2201      	movs	r2, #1
 8002898:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	68f9      	ldr	r1, [r7, #12]
 80028a2:	4618      	mov	r0, r3
 80028a4:	f003 fc56 	bl	8006154 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	2200      	movs	r2, #0
 80028ac:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 80028b0:	2300      	movs	r3, #0
}
 80028b2:	4618      	mov	r0, r3
 80028b4:	3710      	adds	r7, #16
 80028b6:	46bd      	mov	sp, r7
 80028b8:	bd80      	pop	{r7, pc}

080028ba <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80028ba:	b580      	push	{r7, lr}
 80028bc:	b086      	sub	sp, #24
 80028be:	af00      	add	r7, sp, #0
 80028c0:	60f8      	str	r0, [r7, #12]
 80028c2:	607a      	str	r2, [r7, #4]
 80028c4:	603b      	str	r3, [r7, #0]
 80028c6:	460b      	mov	r3, r1
 80028c8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80028ca:	7afb      	ldrb	r3, [r7, #11]
 80028cc:	f003 0207 	and.w	r2, r3, #7
 80028d0:	4613      	mov	r3, r2
 80028d2:	009b      	lsls	r3, r3, #2
 80028d4:	4413      	add	r3, r2
 80028d6:	00db      	lsls	r3, r3, #3
 80028d8:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80028dc:	68fa      	ldr	r2, [r7, #12]
 80028de:	4413      	add	r3, r2
 80028e0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80028e2:	697b      	ldr	r3, [r7, #20]
 80028e4:	687a      	ldr	r2, [r7, #4]
 80028e6:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80028e8:	697b      	ldr	r3, [r7, #20]
 80028ea:	683a      	ldr	r2, [r7, #0]
 80028ec:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80028ee:	697b      	ldr	r3, [r7, #20]
 80028f0:	2200      	movs	r2, #0
 80028f2:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 80028f4:	697b      	ldr	r3, [r7, #20]
 80028f6:	2200      	movs	r2, #0
 80028f8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80028fa:	7afb      	ldrb	r3, [r7, #11]
 80028fc:	f003 0307 	and.w	r3, r3, #7
 8002900:	b2da      	uxtb	r2, r3
 8002902:	697b      	ldr	r3, [r7, #20]
 8002904:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002906:	7afb      	ldrb	r3, [r7, #11]
 8002908:	f003 0307 	and.w	r3, r3, #7
 800290c:	2b00      	cmp	r3, #0
 800290e:	d106      	bne.n	800291e <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	6979      	ldr	r1, [r7, #20]
 8002916:	4618      	mov	r0, r3
 8002918:	f003 fe09 	bl	800652e <USB_EPStartXfer>
 800291c:	e005      	b.n	800292a <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	6979      	ldr	r1, [r7, #20]
 8002924:	4618      	mov	r0, r3
 8002926:	f003 fe02 	bl	800652e <USB_EPStartXfer>
  }

  return HAL_OK;
 800292a:	2300      	movs	r3, #0
}
 800292c:	4618      	mov	r0, r3
 800292e:	3718      	adds	r7, #24
 8002930:	46bd      	mov	sp, r7
 8002932:	bd80      	pop	{r7, pc}

08002934 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002934:	b480      	push	{r7}
 8002936:	b083      	sub	sp, #12
 8002938:	af00      	add	r7, sp, #0
 800293a:	6078      	str	r0, [r7, #4]
 800293c:	460b      	mov	r3, r1
 800293e:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002940:	78fb      	ldrb	r3, [r7, #3]
 8002942:	f003 0207 	and.w	r2, r3, #7
 8002946:	6879      	ldr	r1, [r7, #4]
 8002948:	4613      	mov	r3, r2
 800294a:	009b      	lsls	r3, r3, #2
 800294c:	4413      	add	r3, r2
 800294e:	00db      	lsls	r3, r3, #3
 8002950:	440b      	add	r3, r1
 8002952:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8002956:	681b      	ldr	r3, [r3, #0]
}
 8002958:	4618      	mov	r0, r3
 800295a:	370c      	adds	r7, #12
 800295c:	46bd      	mov	sp, r7
 800295e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002962:	4770      	bx	lr

08002964 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002964:	b580      	push	{r7, lr}
 8002966:	b086      	sub	sp, #24
 8002968:	af00      	add	r7, sp, #0
 800296a:	60f8      	str	r0, [r7, #12]
 800296c:	607a      	str	r2, [r7, #4]
 800296e:	603b      	str	r3, [r7, #0]
 8002970:	460b      	mov	r3, r1
 8002972:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002974:	7afb      	ldrb	r3, [r7, #11]
 8002976:	f003 0307 	and.w	r3, r3, #7
 800297a:	1c5a      	adds	r2, r3, #1
 800297c:	4613      	mov	r3, r2
 800297e:	009b      	lsls	r3, r3, #2
 8002980:	4413      	add	r3, r2
 8002982:	00db      	lsls	r3, r3, #3
 8002984:	68fa      	ldr	r2, [r7, #12]
 8002986:	4413      	add	r3, r2
 8002988:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800298a:	697b      	ldr	r3, [r7, #20]
 800298c:	687a      	ldr	r2, [r7, #4]
 800298e:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002990:	697b      	ldr	r3, [r7, #20]
 8002992:	683a      	ldr	r2, [r7, #0]
 8002994:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8002996:	697b      	ldr	r3, [r7, #20]
 8002998:	2201      	movs	r2, #1
 800299a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 800299e:	697b      	ldr	r3, [r7, #20]
 80029a0:	683a      	ldr	r2, [r7, #0]
 80029a2:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 80029a4:	697b      	ldr	r3, [r7, #20]
 80029a6:	2200      	movs	r2, #0
 80029a8:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 80029aa:	697b      	ldr	r3, [r7, #20]
 80029ac:	2201      	movs	r2, #1
 80029ae:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80029b0:	7afb      	ldrb	r3, [r7, #11]
 80029b2:	f003 0307 	and.w	r3, r3, #7
 80029b6:	b2da      	uxtb	r2, r3
 80029b8:	697b      	ldr	r3, [r7, #20]
 80029ba:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80029bc:	7afb      	ldrb	r3, [r7, #11]
 80029be:	f003 0307 	and.w	r3, r3, #7
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d106      	bne.n	80029d4 <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	6979      	ldr	r1, [r7, #20]
 80029cc:	4618      	mov	r0, r3
 80029ce:	f003 fdae 	bl	800652e <USB_EPStartXfer>
 80029d2:	e005      	b.n	80029e0 <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	6979      	ldr	r1, [r7, #20]
 80029da:	4618      	mov	r0, r3
 80029dc:	f003 fda7 	bl	800652e <USB_EPStartXfer>
  }

  return HAL_OK;
 80029e0:	2300      	movs	r3, #0
}
 80029e2:	4618      	mov	r0, r3
 80029e4:	3718      	adds	r7, #24
 80029e6:	46bd      	mov	sp, r7
 80029e8:	bd80      	pop	{r7, pc}

080029ea <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80029ea:	b580      	push	{r7, lr}
 80029ec:	b084      	sub	sp, #16
 80029ee:	af00      	add	r7, sp, #0
 80029f0:	6078      	str	r0, [r7, #4]
 80029f2:	460b      	mov	r3, r1
 80029f4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80029f6:	78fb      	ldrb	r3, [r7, #3]
 80029f8:	f003 0207 	and.w	r2, r3, #7
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	685b      	ldr	r3, [r3, #4]
 8002a00:	429a      	cmp	r2, r3
 8002a02:	d901      	bls.n	8002a08 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002a04:	2301      	movs	r3, #1
 8002a06:	e03e      	b.n	8002a86 <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002a08:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	da0e      	bge.n	8002a2e <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002a10:	78fb      	ldrb	r3, [r7, #3]
 8002a12:	f003 0307 	and.w	r3, r3, #7
 8002a16:	1c5a      	adds	r2, r3, #1
 8002a18:	4613      	mov	r3, r2
 8002a1a:	009b      	lsls	r3, r3, #2
 8002a1c:	4413      	add	r3, r2
 8002a1e:	00db      	lsls	r3, r3, #3
 8002a20:	687a      	ldr	r2, [r7, #4]
 8002a22:	4413      	add	r3, r2
 8002a24:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	2201      	movs	r2, #1
 8002a2a:	705a      	strb	r2, [r3, #1]
 8002a2c:	e00c      	b.n	8002a48 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002a2e:	78fa      	ldrb	r2, [r7, #3]
 8002a30:	4613      	mov	r3, r2
 8002a32:	009b      	lsls	r3, r3, #2
 8002a34:	4413      	add	r3, r2
 8002a36:	00db      	lsls	r3, r3, #3
 8002a38:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002a3c:	687a      	ldr	r2, [r7, #4]
 8002a3e:	4413      	add	r3, r2
 8002a40:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	2200      	movs	r2, #0
 8002a46:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	2201      	movs	r2, #1
 8002a4c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002a4e:	78fb      	ldrb	r3, [r7, #3]
 8002a50:	f003 0307 	and.w	r3, r3, #7
 8002a54:	b2da      	uxtb	r2, r3
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002a60:	2b01      	cmp	r3, #1
 8002a62:	d101      	bne.n	8002a68 <HAL_PCD_EP_SetStall+0x7e>
 8002a64:	2302      	movs	r3, #2
 8002a66:	e00e      	b.n	8002a86 <HAL_PCD_EP_SetStall+0x9c>
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	2201      	movs	r2, #1
 8002a6c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	68f9      	ldr	r1, [r7, #12]
 8002a76:	4618      	mov	r0, r3
 8002a78:	f005 f88f 	bl	8007b9a <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	2200      	movs	r2, #0
 8002a80:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002a84:	2300      	movs	r3, #0
}
 8002a86:	4618      	mov	r0, r3
 8002a88:	3710      	adds	r7, #16
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	bd80      	pop	{r7, pc}

08002a8e <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002a8e:	b580      	push	{r7, lr}
 8002a90:	b084      	sub	sp, #16
 8002a92:	af00      	add	r7, sp, #0
 8002a94:	6078      	str	r0, [r7, #4]
 8002a96:	460b      	mov	r3, r1
 8002a98:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002a9a:	78fb      	ldrb	r3, [r7, #3]
 8002a9c:	f003 020f 	and.w	r2, r3, #15
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	685b      	ldr	r3, [r3, #4]
 8002aa4:	429a      	cmp	r2, r3
 8002aa6:	d901      	bls.n	8002aac <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002aa8:	2301      	movs	r3, #1
 8002aaa:	e040      	b.n	8002b2e <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002aac:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	da0e      	bge.n	8002ad2 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002ab4:	78fb      	ldrb	r3, [r7, #3]
 8002ab6:	f003 0307 	and.w	r3, r3, #7
 8002aba:	1c5a      	adds	r2, r3, #1
 8002abc:	4613      	mov	r3, r2
 8002abe:	009b      	lsls	r3, r3, #2
 8002ac0:	4413      	add	r3, r2
 8002ac2:	00db      	lsls	r3, r3, #3
 8002ac4:	687a      	ldr	r2, [r7, #4]
 8002ac6:	4413      	add	r3, r2
 8002ac8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	2201      	movs	r2, #1
 8002ace:	705a      	strb	r2, [r3, #1]
 8002ad0:	e00e      	b.n	8002af0 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002ad2:	78fb      	ldrb	r3, [r7, #3]
 8002ad4:	f003 0207 	and.w	r2, r3, #7
 8002ad8:	4613      	mov	r3, r2
 8002ada:	009b      	lsls	r3, r3, #2
 8002adc:	4413      	add	r3, r2
 8002ade:	00db      	lsls	r3, r3, #3
 8002ae0:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002ae4:	687a      	ldr	r2, [r7, #4]
 8002ae6:	4413      	add	r3, r2
 8002ae8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	2200      	movs	r2, #0
 8002aee:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	2200      	movs	r2, #0
 8002af4:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002af6:	78fb      	ldrb	r3, [r7, #3]
 8002af8:	f003 0307 	and.w	r3, r3, #7
 8002afc:	b2da      	uxtb	r2, r3
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002b08:	2b01      	cmp	r3, #1
 8002b0a:	d101      	bne.n	8002b10 <HAL_PCD_EP_ClrStall+0x82>
 8002b0c:	2302      	movs	r3, #2
 8002b0e:	e00e      	b.n	8002b2e <HAL_PCD_EP_ClrStall+0xa0>
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	2201      	movs	r2, #1
 8002b14:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	68f9      	ldr	r1, [r7, #12]
 8002b1e:	4618      	mov	r0, r3
 8002b20:	f005 f88c 	bl	8007c3c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	2200      	movs	r2, #0
 8002b28:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002b2c:	2300      	movs	r3, #0
}
 8002b2e:	4618      	mov	r0, r3
 8002b30:	3710      	adds	r7, #16
 8002b32:	46bd      	mov	sp, r7
 8002b34:	bd80      	pop	{r7, pc}

08002b36 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8002b36:	b580      	push	{r7, lr}
 8002b38:	b096      	sub	sp, #88	; 0x58
 8002b3a:	af00      	add	r7, sp, #0
 8002b3c:	6078      	str	r0, [r7, #4]
  uint16_t wEPVal;
  uint16_t TxPctSize;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002b3e:	e39c      	b.n	800327a <PCD_EP_ISR_Handler+0x744>
  {
    wIstr = hpcd->Instance->ISTR;
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002b48:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8002b4c:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8002b50:	b2db      	uxtb	r3, r3
 8002b52:	f003 030f 	and.w	r3, r3, #15
 8002b56:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55

    if (epindex == 0U)
 8002b5a:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	f040 815e 	bne.w	8002e20 <PCD_EP_ISR_Handler+0x2ea>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8002b64:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8002b68:	f003 0310 	and.w	r3, r3, #16
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d150      	bne.n	8002c12 <PCD_EP_ISR_Handler+0xdc>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	881b      	ldrh	r3, [r3, #0]
 8002b76:	b29b      	uxth	r3, r3
 8002b78:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8002b7c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b80:	81fb      	strh	r3, [r7, #14]
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681a      	ldr	r2, [r3, #0]
 8002b86:	89fb      	ldrh	r3, [r7, #14]
 8002b88:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002b8c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002b90:	b29b      	uxth	r3, r3
 8002b92:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	3328      	adds	r3, #40	; 0x28
 8002b98:	64fb      	str	r3, [r7, #76]	; 0x4c

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002ba2:	b29b      	uxth	r3, r3
 8002ba4:	461a      	mov	r2, r3
 8002ba6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002ba8:	781b      	ldrb	r3, [r3, #0]
 8002baa:	00db      	lsls	r3, r3, #3
 8002bac:	4413      	add	r3, r2
 8002bae:	687a      	ldr	r2, [r7, #4]
 8002bb0:	6812      	ldr	r2, [r2, #0]
 8002bb2:	4413      	add	r3, r2
 8002bb4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002bb8:	881b      	ldrh	r3, [r3, #0]
 8002bba:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002bbe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002bc0:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8002bc2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002bc4:	695a      	ldr	r2, [r3, #20]
 8002bc6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002bc8:	69db      	ldr	r3, [r3, #28]
 8002bca:	441a      	add	r2, r3
 8002bcc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002bce:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8002bd0:	2100      	movs	r1, #0
 8002bd2:	6878      	ldr	r0, [r7, #4]
 8002bd4:	f007 f87b 	bl	8009cce <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002bde:	b2db      	uxtb	r3, r3
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	f000 834a 	beq.w	800327a <PCD_EP_ISR_Handler+0x744>
 8002be6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002be8:	699b      	ldr	r3, [r3, #24]
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	f040 8345 	bne.w	800327a <PCD_EP_ISR_Handler+0x744>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002bf6:	b2db      	uxtb	r3, r3
 8002bf8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002bfc:	b2da      	uxtb	r2, r3
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	b292      	uxth	r2, r2
 8002c04:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	2200      	movs	r2, #0
 8002c0c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002c10:	e333      	b.n	800327a <PCD_EP_ISR_Handler+0x744>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002c18:	64fb      	str	r3, [r7, #76]	; 0x4c
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	881b      	ldrh	r3, [r3, #0]
 8002c20:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8002c24:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8002c28:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d032      	beq.n	8002c96 <PCD_EP_ISR_Handler+0x160>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002c38:	b29b      	uxth	r3, r3
 8002c3a:	461a      	mov	r2, r3
 8002c3c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002c3e:	781b      	ldrb	r3, [r3, #0]
 8002c40:	00db      	lsls	r3, r3, #3
 8002c42:	4413      	add	r3, r2
 8002c44:	687a      	ldr	r2, [r7, #4]
 8002c46:	6812      	ldr	r2, [r2, #0]
 8002c48:	4413      	add	r3, r2
 8002c4a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002c4e:	881b      	ldrh	r3, [r3, #0]
 8002c50:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002c54:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002c56:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	6818      	ldr	r0, [r3, #0]
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8002c62:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002c64:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8002c66:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002c68:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002c6a:	b29b      	uxth	r3, r3
 8002c6c:	f005 f911 	bl	8007e92 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	881b      	ldrh	r3, [r3, #0]
 8002c76:	b29a      	uxth	r2, r3
 8002c78:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002c7c:	4013      	ands	r3, r2
 8002c7e:	823b      	strh	r3, [r7, #16]
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	8a3a      	ldrh	r2, [r7, #16]
 8002c86:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002c8a:	b292      	uxth	r2, r2
 8002c8c:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8002c8e:	6878      	ldr	r0, [r7, #4]
 8002c90:	f006 fff0 	bl	8009c74 <HAL_PCD_SetupStageCallback>
 8002c94:	e2f1      	b.n	800327a <PCD_EP_ISR_Handler+0x744>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002c96:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	f280 82ed 	bge.w	800327a <PCD_EP_ISR_Handler+0x744>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	881b      	ldrh	r3, [r3, #0]
 8002ca6:	b29a      	uxth	r2, r3
 8002ca8:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002cac:	4013      	ands	r3, r2
 8002cae:	83fb      	strh	r3, [r7, #30]
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	8bfa      	ldrh	r2, [r7, #30]
 8002cb6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002cba:	b292      	uxth	r2, r2
 8002cbc:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002cc6:	b29b      	uxth	r3, r3
 8002cc8:	461a      	mov	r2, r3
 8002cca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002ccc:	781b      	ldrb	r3, [r3, #0]
 8002cce:	00db      	lsls	r3, r3, #3
 8002cd0:	4413      	add	r3, r2
 8002cd2:	687a      	ldr	r2, [r7, #4]
 8002cd4:	6812      	ldr	r2, [r2, #0]
 8002cd6:	4413      	add	r3, r2
 8002cd8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002cdc:	881b      	ldrh	r3, [r3, #0]
 8002cde:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002ce2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002ce4:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8002ce6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002ce8:	69db      	ldr	r3, [r3, #28]
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d019      	beq.n	8002d22 <PCD_EP_ISR_Handler+0x1ec>
 8002cee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002cf0:	695b      	ldr	r3, [r3, #20]
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d015      	beq.n	8002d22 <PCD_EP_ISR_Handler+0x1ec>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	6818      	ldr	r0, [r3, #0]
 8002cfa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002cfc:	6959      	ldr	r1, [r3, #20]
 8002cfe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002d00:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8002d02:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002d04:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002d06:	b29b      	uxth	r3, r3
 8002d08:	f005 f8c3 	bl	8007e92 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8002d0c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002d0e:	695a      	ldr	r2, [r3, #20]
 8002d10:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002d12:	69db      	ldr	r3, [r3, #28]
 8002d14:	441a      	add	r2, r3
 8002d16:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002d18:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8002d1a:	2100      	movs	r1, #0
 8002d1c:	6878      	ldr	r0, [r7, #4]
 8002d1e:	f006 ffbb 	bl	8009c98 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	881b      	ldrh	r3, [r3, #0]
 8002d28:	b29b      	uxth	r3, r3
 8002d2a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	f040 82a3 	bne.w	800327a <PCD_EP_ISR_Handler+0x744>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	61bb      	str	r3, [r7, #24]
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002d42:	b29b      	uxth	r3, r3
 8002d44:	461a      	mov	r2, r3
 8002d46:	69bb      	ldr	r3, [r7, #24]
 8002d48:	4413      	add	r3, r2
 8002d4a:	61bb      	str	r3, [r7, #24]
 8002d4c:	69bb      	ldr	r3, [r7, #24]
 8002d4e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002d52:	617b      	str	r3, [r7, #20]
 8002d54:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002d56:	691b      	ldr	r3, [r3, #16]
 8002d58:	2b3e      	cmp	r3, #62	; 0x3e
 8002d5a:	d918      	bls.n	8002d8e <PCD_EP_ISR_Handler+0x258>
 8002d5c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002d5e:	691b      	ldr	r3, [r3, #16]
 8002d60:	095b      	lsrs	r3, r3, #5
 8002d62:	647b      	str	r3, [r7, #68]	; 0x44
 8002d64:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002d66:	691b      	ldr	r3, [r3, #16]
 8002d68:	f003 031f 	and.w	r3, r3, #31
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d102      	bne.n	8002d76 <PCD_EP_ISR_Handler+0x240>
 8002d70:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002d72:	3b01      	subs	r3, #1
 8002d74:	647b      	str	r3, [r7, #68]	; 0x44
 8002d76:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002d78:	b29b      	uxth	r3, r3
 8002d7a:	029b      	lsls	r3, r3, #10
 8002d7c:	b29b      	uxth	r3, r3
 8002d7e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002d82:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002d86:	b29a      	uxth	r2, r3
 8002d88:	697b      	ldr	r3, [r7, #20]
 8002d8a:	801a      	strh	r2, [r3, #0]
 8002d8c:	e029      	b.n	8002de2 <PCD_EP_ISR_Handler+0x2ac>
 8002d8e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002d90:	691b      	ldr	r3, [r3, #16]
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d112      	bne.n	8002dbc <PCD_EP_ISR_Handler+0x286>
 8002d96:	697b      	ldr	r3, [r7, #20]
 8002d98:	881b      	ldrh	r3, [r3, #0]
 8002d9a:	b29b      	uxth	r3, r3
 8002d9c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002da0:	b29a      	uxth	r2, r3
 8002da2:	697b      	ldr	r3, [r7, #20]
 8002da4:	801a      	strh	r2, [r3, #0]
 8002da6:	697b      	ldr	r3, [r7, #20]
 8002da8:	881b      	ldrh	r3, [r3, #0]
 8002daa:	b29b      	uxth	r3, r3
 8002dac:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002db0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002db4:	b29a      	uxth	r2, r3
 8002db6:	697b      	ldr	r3, [r7, #20]
 8002db8:	801a      	strh	r2, [r3, #0]
 8002dba:	e012      	b.n	8002de2 <PCD_EP_ISR_Handler+0x2ac>
 8002dbc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002dbe:	691b      	ldr	r3, [r3, #16]
 8002dc0:	085b      	lsrs	r3, r3, #1
 8002dc2:	647b      	str	r3, [r7, #68]	; 0x44
 8002dc4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002dc6:	691b      	ldr	r3, [r3, #16]
 8002dc8:	f003 0301 	and.w	r3, r3, #1
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d002      	beq.n	8002dd6 <PCD_EP_ISR_Handler+0x2a0>
 8002dd0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002dd2:	3301      	adds	r3, #1
 8002dd4:	647b      	str	r3, [r7, #68]	; 0x44
 8002dd6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002dd8:	b29b      	uxth	r3, r3
 8002dda:	029b      	lsls	r3, r3, #10
 8002ddc:	b29a      	uxth	r2, r3
 8002dde:	697b      	ldr	r3, [r7, #20]
 8002de0:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	881b      	ldrh	r3, [r3, #0]
 8002de8:	b29b      	uxth	r3, r3
 8002dea:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002dee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002df2:	827b      	strh	r3, [r7, #18]
 8002df4:	8a7b      	ldrh	r3, [r7, #18]
 8002df6:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8002dfa:	827b      	strh	r3, [r7, #18]
 8002dfc:	8a7b      	ldrh	r3, [r7, #18]
 8002dfe:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002e02:	827b      	strh	r3, [r7, #18]
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681a      	ldr	r2, [r3, #0]
 8002e08:	8a7b      	ldrh	r3, [r7, #18]
 8002e0a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002e0e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002e12:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002e16:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002e1a:	b29b      	uxth	r3, r3
 8002e1c:	8013      	strh	r3, [r2, #0]
 8002e1e:	e22c      	b.n	800327a <PCD_EP_ISR_Handler+0x744>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	461a      	mov	r2, r3
 8002e26:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8002e2a:	009b      	lsls	r3, r3, #2
 8002e2c:	4413      	add	r3, r2
 8002e2e:	881b      	ldrh	r3, [r3, #0]
 8002e30:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002e34:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	f280 80f6 	bge.w	800302a <PCD_EP_ISR_Handler+0x4f4>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	461a      	mov	r2, r3
 8002e44:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8002e48:	009b      	lsls	r3, r3, #2
 8002e4a:	4413      	add	r3, r2
 8002e4c:	881b      	ldrh	r3, [r3, #0]
 8002e4e:	b29a      	uxth	r2, r3
 8002e50:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002e54:	4013      	ands	r3, r2
 8002e56:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	461a      	mov	r2, r3
 8002e60:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8002e64:	009b      	lsls	r3, r3, #2
 8002e66:	4413      	add	r3, r2
 8002e68:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 8002e6c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002e70:	b292      	uxth	r2, r2
 8002e72:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8002e74:	f897 2055 	ldrb.w	r2, [r7, #85]	; 0x55
 8002e78:	4613      	mov	r3, r2
 8002e7a:	009b      	lsls	r3, r3, #2
 8002e7c:	4413      	add	r3, r2
 8002e7e:	00db      	lsls	r3, r3, #3
 8002e80:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002e84:	687a      	ldr	r2, [r7, #4]
 8002e86:	4413      	add	r3, r2
 8002e88:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8002e8a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002e8c:	7b1b      	ldrb	r3, [r3, #12]
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d123      	bne.n	8002eda <PCD_EP_ISR_Handler+0x3a4>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002e9a:	b29b      	uxth	r3, r3
 8002e9c:	461a      	mov	r2, r3
 8002e9e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002ea0:	781b      	ldrb	r3, [r3, #0]
 8002ea2:	00db      	lsls	r3, r3, #3
 8002ea4:	4413      	add	r3, r2
 8002ea6:	687a      	ldr	r2, [r7, #4]
 8002ea8:	6812      	ldr	r2, [r2, #0]
 8002eaa:	4413      	add	r3, r2
 8002eac:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002eb0:	881b      	ldrh	r3, [r3, #0]
 8002eb2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002eb6:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

          if (count != 0U)
 8002eba:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	f000 808e 	beq.w	8002fe0 <PCD_EP_ISR_Handler+0x4aa>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	6818      	ldr	r0, [r3, #0]
 8002ec8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002eca:	6959      	ldr	r1, [r3, #20]
 8002ecc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002ece:	88da      	ldrh	r2, [r3, #6]
 8002ed0:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8002ed4:	f004 ffdd 	bl	8007e92 <USB_ReadPMA>
 8002ed8:	e082      	b.n	8002fe0 <PCD_EP_ISR_Handler+0x4aa>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8002eda:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002edc:	78db      	ldrb	r3, [r3, #3]
 8002ede:	2b02      	cmp	r3, #2
 8002ee0:	d10a      	bne.n	8002ef8 <PCD_EP_ISR_Handler+0x3c2>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8002ee2:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8002ee6:	461a      	mov	r2, r3
 8002ee8:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8002eea:	6878      	ldr	r0, [r7, #4]
 8002eec:	f000 f9d3 	bl	8003296 <HAL_PCD_EP_DB_Receive>
 8002ef0:	4603      	mov	r3, r0
 8002ef2:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8002ef6:	e073      	b.n	8002fe0 <PCD_EP_ISR_Handler+0x4aa>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	461a      	mov	r2, r3
 8002efe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f00:	781b      	ldrb	r3, [r3, #0]
 8002f02:	009b      	lsls	r3, r3, #2
 8002f04:	4413      	add	r3, r2
 8002f06:	881b      	ldrh	r3, [r3, #0]
 8002f08:	b29b      	uxth	r3, r3
 8002f0a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002f0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f12:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	461a      	mov	r2, r3
 8002f1c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f1e:	781b      	ldrb	r3, [r3, #0]
 8002f20:	009b      	lsls	r3, r3, #2
 8002f22:	441a      	add	r2, r3
 8002f24:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002f28:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002f2c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002f30:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002f34:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002f38:	b29b      	uxth	r3, r3
 8002f3a:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	461a      	mov	r2, r3
 8002f42:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f44:	781b      	ldrb	r3, [r3, #0]
 8002f46:	009b      	lsls	r3, r3, #2
 8002f48:	4413      	add	r3, r2
 8002f4a:	881b      	ldrh	r3, [r3, #0]
 8002f4c:	b29b      	uxth	r3, r3
 8002f4e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d022      	beq.n	8002f9c <PCD_EP_ISR_Handler+0x466>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002f5e:	b29b      	uxth	r3, r3
 8002f60:	461a      	mov	r2, r3
 8002f62:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f64:	781b      	ldrb	r3, [r3, #0]
 8002f66:	00db      	lsls	r3, r3, #3
 8002f68:	4413      	add	r3, r2
 8002f6a:	687a      	ldr	r2, [r7, #4]
 8002f6c:	6812      	ldr	r2, [r2, #0]
 8002f6e:	4413      	add	r3, r2
 8002f70:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002f74:	881b      	ldrh	r3, [r3, #0]
 8002f76:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002f7a:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

              if (count != 0U)
 8002f7e:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d02c      	beq.n	8002fe0 <PCD_EP_ISR_Handler+0x4aa>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	6818      	ldr	r0, [r3, #0]
 8002f8a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f8c:	6959      	ldr	r1, [r3, #20]
 8002f8e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f90:	891a      	ldrh	r2, [r3, #8]
 8002f92:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8002f96:	f004 ff7c 	bl	8007e92 <USB_ReadPMA>
 8002f9a:	e021      	b.n	8002fe0 <PCD_EP_ISR_Handler+0x4aa>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002fa4:	b29b      	uxth	r3, r3
 8002fa6:	461a      	mov	r2, r3
 8002fa8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002faa:	781b      	ldrb	r3, [r3, #0]
 8002fac:	00db      	lsls	r3, r3, #3
 8002fae:	4413      	add	r3, r2
 8002fb0:	687a      	ldr	r2, [r7, #4]
 8002fb2:	6812      	ldr	r2, [r2, #0]
 8002fb4:	4413      	add	r3, r2
 8002fb6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002fba:	881b      	ldrh	r3, [r3, #0]
 8002fbc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002fc0:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

              if (count != 0U)
 8002fc4:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d009      	beq.n	8002fe0 <PCD_EP_ISR_Handler+0x4aa>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	6818      	ldr	r0, [r3, #0]
 8002fd0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002fd2:	6959      	ldr	r1, [r3, #20]
 8002fd4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002fd6:	895a      	ldrh	r2, [r3, #10]
 8002fd8:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8002fdc:	f004 ff59 	bl	8007e92 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8002fe0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002fe2:	69da      	ldr	r2, [r3, #28]
 8002fe4:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8002fe8:	441a      	add	r2, r3
 8002fea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002fec:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8002fee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002ff0:	695a      	ldr	r2, [r3, #20]
 8002ff2:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8002ff6:	441a      	add	r2, r3
 8002ff8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002ffa:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8002ffc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002ffe:	699b      	ldr	r3, [r3, #24]
 8003000:	2b00      	cmp	r3, #0
 8003002:	d005      	beq.n	8003010 <PCD_EP_ISR_Handler+0x4da>
 8003004:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8003008:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800300a:	691b      	ldr	r3, [r3, #16]
 800300c:	429a      	cmp	r2, r3
 800300e:	d206      	bcs.n	800301e <PCD_EP_ISR_Handler+0x4e8>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8003010:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003012:	781b      	ldrb	r3, [r3, #0]
 8003014:	4619      	mov	r1, r3
 8003016:	6878      	ldr	r0, [r7, #4]
 8003018:	f006 fe3e 	bl	8009c98 <HAL_PCD_DataOutStageCallback>
 800301c:	e005      	b.n	800302a <PCD_EP_ISR_Handler+0x4f4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8003024:	4618      	mov	r0, r3
 8003026:	f003 fa82 	bl	800652e <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 800302a:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800302e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003032:	2b00      	cmp	r3, #0
 8003034:	f000 8121 	beq.w	800327a <PCD_EP_ISR_Handler+0x744>
      {
        ep = &hpcd->IN_ep[epindex];
 8003038:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 800303c:	1c5a      	adds	r2, r3, #1
 800303e:	4613      	mov	r3, r2
 8003040:	009b      	lsls	r3, r3, #2
 8003042:	4413      	add	r3, r2
 8003044:	00db      	lsls	r3, r3, #3
 8003046:	687a      	ldr	r2, [r7, #4]
 8003048:	4413      	add	r3, r2
 800304a:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	461a      	mov	r2, r3
 8003052:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8003056:	009b      	lsls	r3, r3, #2
 8003058:	4413      	add	r3, r2
 800305a:	881b      	ldrh	r3, [r3, #0]
 800305c:	b29b      	uxth	r3, r3
 800305e:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8003062:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003066:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	461a      	mov	r2, r3
 8003070:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8003074:	009b      	lsls	r3, r3, #2
 8003076:	441a      	add	r2, r3
 8003078:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800307c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003080:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003084:	b29b      	uxth	r3, r3
 8003086:	8013      	strh	r3, [r2, #0]

        if (ep->type != EP_TYPE_BULK)
 8003088:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800308a:	78db      	ldrb	r3, [r3, #3]
 800308c:	2b02      	cmp	r3, #2
 800308e:	f000 80a2 	beq.w	80031d6 <PCD_EP_ISR_Handler+0x6a0>
        {
          ep->xfer_len = 0U;
 8003092:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003094:	2200      	movs	r2, #0
 8003096:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8003098:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800309a:	7b1b      	ldrb	r3, [r3, #12]
 800309c:	2b00      	cmp	r3, #0
 800309e:	f000 8093 	beq.w	80031c8 <PCD_EP_ISR_Handler+0x692>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80030a2:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80030a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d046      	beq.n	800313c <PCD_EP_ISR_Handler+0x606>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80030ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80030b0:	785b      	ldrb	r3, [r3, #1]
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d126      	bne.n	8003104 <PCD_EP_ISR_Handler+0x5ce>
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	627b      	str	r3, [r7, #36]	; 0x24
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80030c4:	b29b      	uxth	r3, r3
 80030c6:	461a      	mov	r2, r3
 80030c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030ca:	4413      	add	r3, r2
 80030cc:	627b      	str	r3, [r7, #36]	; 0x24
 80030ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80030d0:	781b      	ldrb	r3, [r3, #0]
 80030d2:	00da      	lsls	r2, r3, #3
 80030d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030d6:	4413      	add	r3, r2
 80030d8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80030dc:	623b      	str	r3, [r7, #32]
 80030de:	6a3b      	ldr	r3, [r7, #32]
 80030e0:	881b      	ldrh	r3, [r3, #0]
 80030e2:	b29b      	uxth	r3, r3
 80030e4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80030e8:	b29a      	uxth	r2, r3
 80030ea:	6a3b      	ldr	r3, [r7, #32]
 80030ec:	801a      	strh	r2, [r3, #0]
 80030ee:	6a3b      	ldr	r3, [r7, #32]
 80030f0:	881b      	ldrh	r3, [r3, #0]
 80030f2:	b29b      	uxth	r3, r3
 80030f4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80030f8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80030fc:	b29a      	uxth	r2, r3
 80030fe:	6a3b      	ldr	r3, [r7, #32]
 8003100:	801a      	strh	r2, [r3, #0]
 8003102:	e061      	b.n	80031c8 <PCD_EP_ISR_Handler+0x692>
 8003104:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003106:	785b      	ldrb	r3, [r3, #1]
 8003108:	2b01      	cmp	r3, #1
 800310a:	d15d      	bne.n	80031c8 <PCD_EP_ISR_Handler+0x692>
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800311a:	b29b      	uxth	r3, r3
 800311c:	461a      	mov	r2, r3
 800311e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003120:	4413      	add	r3, r2
 8003122:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003124:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003126:	781b      	ldrb	r3, [r3, #0]
 8003128:	00da      	lsls	r2, r3, #3
 800312a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800312c:	4413      	add	r3, r2
 800312e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003132:	62bb      	str	r3, [r7, #40]	; 0x28
 8003134:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003136:	2200      	movs	r2, #0
 8003138:	801a      	strh	r2, [r3, #0]
 800313a:	e045      	b.n	80031c8 <PCD_EP_ISR_Handler+0x692>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003142:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003144:	785b      	ldrb	r3, [r3, #1]
 8003146:	2b00      	cmp	r3, #0
 8003148:	d126      	bne.n	8003198 <PCD_EP_ISR_Handler+0x662>
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	637b      	str	r3, [r7, #52]	; 0x34
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003158:	b29b      	uxth	r3, r3
 800315a:	461a      	mov	r2, r3
 800315c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800315e:	4413      	add	r3, r2
 8003160:	637b      	str	r3, [r7, #52]	; 0x34
 8003162:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003164:	781b      	ldrb	r3, [r3, #0]
 8003166:	00da      	lsls	r2, r3, #3
 8003168:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800316a:	4413      	add	r3, r2
 800316c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003170:	633b      	str	r3, [r7, #48]	; 0x30
 8003172:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003174:	881b      	ldrh	r3, [r3, #0]
 8003176:	b29b      	uxth	r3, r3
 8003178:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800317c:	b29a      	uxth	r2, r3
 800317e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003180:	801a      	strh	r2, [r3, #0]
 8003182:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003184:	881b      	ldrh	r3, [r3, #0]
 8003186:	b29b      	uxth	r3, r3
 8003188:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800318c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003190:	b29a      	uxth	r2, r3
 8003192:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003194:	801a      	strh	r2, [r3, #0]
 8003196:	e017      	b.n	80031c8 <PCD_EP_ISR_Handler+0x692>
 8003198:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800319a:	785b      	ldrb	r3, [r3, #1]
 800319c:	2b01      	cmp	r3, #1
 800319e:	d113      	bne.n	80031c8 <PCD_EP_ISR_Handler+0x692>
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80031a8:	b29b      	uxth	r3, r3
 80031aa:	461a      	mov	r2, r3
 80031ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80031ae:	4413      	add	r3, r2
 80031b0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80031b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80031b4:	781b      	ldrb	r3, [r3, #0]
 80031b6:	00da      	lsls	r2, r3, #3
 80031b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80031ba:	4413      	add	r3, r2
 80031bc:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80031c0:	63bb      	str	r3, [r7, #56]	; 0x38
 80031c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031c4:	2200      	movs	r2, #0
 80031c6:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80031c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80031ca:	781b      	ldrb	r3, [r3, #0]
 80031cc:	4619      	mov	r1, r3
 80031ce:	6878      	ldr	r0, [r7, #4]
 80031d0:	f006 fd7d 	bl	8009cce <HAL_PCD_DataInStageCallback>
 80031d4:	e051      	b.n	800327a <PCD_EP_ISR_Handler+0x744>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Bulk Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 80031d6:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80031da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d144      	bne.n	800326c <PCD_EP_ISR_Handler+0x736>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80031ea:	b29b      	uxth	r3, r3
 80031ec:	461a      	mov	r2, r3
 80031ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80031f0:	781b      	ldrb	r3, [r3, #0]
 80031f2:	00db      	lsls	r3, r3, #3
 80031f4:	4413      	add	r3, r2
 80031f6:	687a      	ldr	r2, [r7, #4]
 80031f8:	6812      	ldr	r2, [r2, #0]
 80031fa:	4413      	add	r3, r2
 80031fc:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003200:	881b      	ldrh	r3, [r3, #0]
 8003202:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003206:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            if (ep->xfer_len > TxPctSize)
 800320a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800320c:	699a      	ldr	r2, [r3, #24]
 800320e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8003212:	429a      	cmp	r2, r3
 8003214:	d907      	bls.n	8003226 <PCD_EP_ISR_Handler+0x6f0>
            {
              ep->xfer_len -= TxPctSize;
 8003216:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003218:	699a      	ldr	r2, [r3, #24]
 800321a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800321e:	1ad2      	subs	r2, r2, r3
 8003220:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003222:	619a      	str	r2, [r3, #24]
 8003224:	e002      	b.n	800322c <PCD_EP_ISR_Handler+0x6f6>
            }
            else
            {
              ep->xfer_len = 0U;
 8003226:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003228:	2200      	movs	r2, #0
 800322a:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 800322c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800322e:	699b      	ldr	r3, [r3, #24]
 8003230:	2b00      	cmp	r3, #0
 8003232:	d106      	bne.n	8003242 <PCD_EP_ISR_Handler+0x70c>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003234:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003236:	781b      	ldrb	r3, [r3, #0]
 8003238:	4619      	mov	r1, r3
 800323a:	6878      	ldr	r0, [r7, #4]
 800323c:	f006 fd47 	bl	8009cce <HAL_PCD_DataInStageCallback>
 8003240:	e01b      	b.n	800327a <PCD_EP_ISR_Handler+0x744>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8003242:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003244:	695a      	ldr	r2, [r3, #20]
 8003246:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800324a:	441a      	add	r2, r3
 800324c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800324e:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8003250:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003252:	69da      	ldr	r2, [r3, #28]
 8003254:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8003258:	441a      	add	r2, r3
 800325a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800325c:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8003264:	4618      	mov	r0, r3
 8003266:	f003 f962 	bl	800652e <USB_EPStartXfer>
 800326a:	e006      	b.n	800327a <PCD_EP_ISR_Handler+0x744>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 800326c:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8003270:	461a      	mov	r2, r3
 8003272:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8003274:	6878      	ldr	r0, [r7, #4]
 8003276:	f000 f917 	bl	80034a8 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003282:	b29b      	uxth	r3, r3
 8003284:	b21b      	sxth	r3, r3
 8003286:	2b00      	cmp	r3, #0
 8003288:	f6ff ac5a 	blt.w	8002b40 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 800328c:	2300      	movs	r3, #0
}
 800328e:	4618      	mov	r0, r3
 8003290:	3758      	adds	r7, #88	; 0x58
 8003292:	46bd      	mov	sp, r7
 8003294:	bd80      	pop	{r7, pc}

08003296 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8003296:	b580      	push	{r7, lr}
 8003298:	b088      	sub	sp, #32
 800329a:	af00      	add	r7, sp, #0
 800329c:	60f8      	str	r0, [r7, #12]
 800329e:	60b9      	str	r1, [r7, #8]
 80032a0:	4613      	mov	r3, r2
 80032a2:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80032a4:	88fb      	ldrh	r3, [r7, #6]
 80032a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d07c      	beq.n	80033a8 <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80032b6:	b29b      	uxth	r3, r3
 80032b8:	461a      	mov	r2, r3
 80032ba:	68bb      	ldr	r3, [r7, #8]
 80032bc:	781b      	ldrb	r3, [r3, #0]
 80032be:	00db      	lsls	r3, r3, #3
 80032c0:	4413      	add	r3, r2
 80032c2:	68fa      	ldr	r2, [r7, #12]
 80032c4:	6812      	ldr	r2, [r2, #0]
 80032c6:	4413      	add	r3, r2
 80032c8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80032cc:	881b      	ldrh	r3, [r3, #0]
 80032ce:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80032d2:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80032d4:	68bb      	ldr	r3, [r7, #8]
 80032d6:	699a      	ldr	r2, [r3, #24]
 80032d8:	8b7b      	ldrh	r3, [r7, #26]
 80032da:	429a      	cmp	r2, r3
 80032dc:	d306      	bcc.n	80032ec <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 80032de:	68bb      	ldr	r3, [r7, #8]
 80032e0:	699a      	ldr	r2, [r3, #24]
 80032e2:	8b7b      	ldrh	r3, [r7, #26]
 80032e4:	1ad2      	subs	r2, r2, r3
 80032e6:	68bb      	ldr	r3, [r7, #8]
 80032e8:	619a      	str	r2, [r3, #24]
 80032ea:	e002      	b.n	80032f2 <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 80032ec:	68bb      	ldr	r3, [r7, #8]
 80032ee:	2200      	movs	r2, #0
 80032f0:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80032f2:	68bb      	ldr	r3, [r7, #8]
 80032f4:	699b      	ldr	r3, [r3, #24]
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d123      	bne.n	8003342 <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	461a      	mov	r2, r3
 8003300:	68bb      	ldr	r3, [r7, #8]
 8003302:	781b      	ldrb	r3, [r3, #0]
 8003304:	009b      	lsls	r3, r3, #2
 8003306:	4413      	add	r3, r2
 8003308:	881b      	ldrh	r3, [r3, #0]
 800330a:	b29b      	uxth	r3, r3
 800330c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003310:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003314:	833b      	strh	r3, [r7, #24]
 8003316:	8b3b      	ldrh	r3, [r7, #24]
 8003318:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800331c:	833b      	strh	r3, [r7, #24]
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	461a      	mov	r2, r3
 8003324:	68bb      	ldr	r3, [r7, #8]
 8003326:	781b      	ldrb	r3, [r3, #0]
 8003328:	009b      	lsls	r3, r3, #2
 800332a:	441a      	add	r2, r3
 800332c:	8b3b      	ldrh	r3, [r7, #24]
 800332e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003332:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003336:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800333a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800333e:	b29b      	uxth	r3, r3
 8003340:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003342:	88fb      	ldrh	r3, [r7, #6]
 8003344:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003348:	2b00      	cmp	r3, #0
 800334a:	d01f      	beq.n	800338c <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	461a      	mov	r2, r3
 8003352:	68bb      	ldr	r3, [r7, #8]
 8003354:	781b      	ldrb	r3, [r3, #0]
 8003356:	009b      	lsls	r3, r3, #2
 8003358:	4413      	add	r3, r2
 800335a:	881b      	ldrh	r3, [r3, #0]
 800335c:	b29b      	uxth	r3, r3
 800335e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003362:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003366:	82fb      	strh	r3, [r7, #22]
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	461a      	mov	r2, r3
 800336e:	68bb      	ldr	r3, [r7, #8]
 8003370:	781b      	ldrb	r3, [r3, #0]
 8003372:	009b      	lsls	r3, r3, #2
 8003374:	441a      	add	r2, r3
 8003376:	8afb      	ldrh	r3, [r7, #22]
 8003378:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800337c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003380:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003384:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003388:	b29b      	uxth	r3, r3
 800338a:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800338c:	8b7b      	ldrh	r3, [r7, #26]
 800338e:	2b00      	cmp	r3, #0
 8003390:	f000 8085 	beq.w	800349e <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	6818      	ldr	r0, [r3, #0]
 8003398:	68bb      	ldr	r3, [r7, #8]
 800339a:	6959      	ldr	r1, [r3, #20]
 800339c:	68bb      	ldr	r3, [r7, #8]
 800339e:	891a      	ldrh	r2, [r3, #8]
 80033a0:	8b7b      	ldrh	r3, [r7, #26]
 80033a2:	f004 fd76 	bl	8007e92 <USB_ReadPMA>
 80033a6:	e07a      	b.n	800349e <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80033b0:	b29b      	uxth	r3, r3
 80033b2:	461a      	mov	r2, r3
 80033b4:	68bb      	ldr	r3, [r7, #8]
 80033b6:	781b      	ldrb	r3, [r3, #0]
 80033b8:	00db      	lsls	r3, r3, #3
 80033ba:	4413      	add	r3, r2
 80033bc:	68fa      	ldr	r2, [r7, #12]
 80033be:	6812      	ldr	r2, [r2, #0]
 80033c0:	4413      	add	r3, r2
 80033c2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80033c6:	881b      	ldrh	r3, [r3, #0]
 80033c8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80033cc:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80033ce:	68bb      	ldr	r3, [r7, #8]
 80033d0:	699a      	ldr	r2, [r3, #24]
 80033d2:	8b7b      	ldrh	r3, [r7, #26]
 80033d4:	429a      	cmp	r2, r3
 80033d6:	d306      	bcc.n	80033e6 <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 80033d8:	68bb      	ldr	r3, [r7, #8]
 80033da:	699a      	ldr	r2, [r3, #24]
 80033dc:	8b7b      	ldrh	r3, [r7, #26]
 80033de:	1ad2      	subs	r2, r2, r3
 80033e0:	68bb      	ldr	r3, [r7, #8]
 80033e2:	619a      	str	r2, [r3, #24]
 80033e4:	e002      	b.n	80033ec <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 80033e6:	68bb      	ldr	r3, [r7, #8]
 80033e8:	2200      	movs	r2, #0
 80033ea:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80033ec:	68bb      	ldr	r3, [r7, #8]
 80033ee:	699b      	ldr	r3, [r3, #24]
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d123      	bne.n	800343c <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	461a      	mov	r2, r3
 80033fa:	68bb      	ldr	r3, [r7, #8]
 80033fc:	781b      	ldrb	r3, [r3, #0]
 80033fe:	009b      	lsls	r3, r3, #2
 8003400:	4413      	add	r3, r2
 8003402:	881b      	ldrh	r3, [r3, #0]
 8003404:	b29b      	uxth	r3, r3
 8003406:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800340a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800340e:	83fb      	strh	r3, [r7, #30]
 8003410:	8bfb      	ldrh	r3, [r7, #30]
 8003412:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003416:	83fb      	strh	r3, [r7, #30]
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	461a      	mov	r2, r3
 800341e:	68bb      	ldr	r3, [r7, #8]
 8003420:	781b      	ldrb	r3, [r3, #0]
 8003422:	009b      	lsls	r3, r3, #2
 8003424:	441a      	add	r2, r3
 8003426:	8bfb      	ldrh	r3, [r7, #30]
 8003428:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800342c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003430:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003434:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003438:	b29b      	uxth	r3, r3
 800343a:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 800343c:	88fb      	ldrh	r3, [r7, #6]
 800343e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003442:	2b00      	cmp	r3, #0
 8003444:	d11f      	bne.n	8003486 <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	461a      	mov	r2, r3
 800344c:	68bb      	ldr	r3, [r7, #8]
 800344e:	781b      	ldrb	r3, [r3, #0]
 8003450:	009b      	lsls	r3, r3, #2
 8003452:	4413      	add	r3, r2
 8003454:	881b      	ldrh	r3, [r3, #0]
 8003456:	b29b      	uxth	r3, r3
 8003458:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800345c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003460:	83bb      	strh	r3, [r7, #28]
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	461a      	mov	r2, r3
 8003468:	68bb      	ldr	r3, [r7, #8]
 800346a:	781b      	ldrb	r3, [r3, #0]
 800346c:	009b      	lsls	r3, r3, #2
 800346e:	441a      	add	r2, r3
 8003470:	8bbb      	ldrh	r3, [r7, #28]
 8003472:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003476:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800347a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800347e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003482:	b29b      	uxth	r3, r3
 8003484:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8003486:	8b7b      	ldrh	r3, [r7, #26]
 8003488:	2b00      	cmp	r3, #0
 800348a:	d008      	beq.n	800349e <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	6818      	ldr	r0, [r3, #0]
 8003490:	68bb      	ldr	r3, [r7, #8]
 8003492:	6959      	ldr	r1, [r3, #20]
 8003494:	68bb      	ldr	r3, [r7, #8]
 8003496:	895a      	ldrh	r2, [r3, #10]
 8003498:	8b7b      	ldrh	r3, [r7, #26]
 800349a:	f004 fcfa 	bl	8007e92 <USB_ReadPMA>
    }
  }

  return count;
 800349e:	8b7b      	ldrh	r3, [r7, #26]
}
 80034a0:	4618      	mov	r0, r3
 80034a2:	3720      	adds	r7, #32
 80034a4:	46bd      	mov	sp, r7
 80034a6:	bd80      	pop	{r7, pc}

080034a8 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80034a8:	b580      	push	{r7, lr}
 80034aa:	b0a2      	sub	sp, #136	; 0x88
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	60f8      	str	r0, [r7, #12]
 80034b0:	60b9      	str	r1, [r7, #8]
 80034b2:	4613      	mov	r3, r2
 80034b4:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80034b6:	88fb      	ldrh	r3, [r7, #6]
 80034b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034bc:	2b00      	cmp	r3, #0
 80034be:	f000 81c5 	beq.w	800384c <HAL_PCD_EP_DB_Transmit+0x3a4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80034ca:	b29b      	uxth	r3, r3
 80034cc:	461a      	mov	r2, r3
 80034ce:	68bb      	ldr	r3, [r7, #8]
 80034d0:	781b      	ldrb	r3, [r3, #0]
 80034d2:	00db      	lsls	r3, r3, #3
 80034d4:	4413      	add	r3, r2
 80034d6:	68fa      	ldr	r2, [r7, #12]
 80034d8:	6812      	ldr	r2, [r2, #0]
 80034da:	4413      	add	r3, r2
 80034dc:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80034e0:	881b      	ldrh	r3, [r3, #0]
 80034e2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80034e6:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxPctSize)
 80034ea:	68bb      	ldr	r3, [r7, #8]
 80034ec:	699a      	ldr	r2, [r3, #24]
 80034ee:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80034f2:	429a      	cmp	r2, r3
 80034f4:	d907      	bls.n	8003506 <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 80034f6:	68bb      	ldr	r3, [r7, #8]
 80034f8:	699a      	ldr	r2, [r3, #24]
 80034fa:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80034fe:	1ad2      	subs	r2, r2, r3
 8003500:	68bb      	ldr	r3, [r7, #8]
 8003502:	619a      	str	r2, [r3, #24]
 8003504:	e002      	b.n	800350c <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 8003506:	68bb      	ldr	r3, [r7, #8]
 8003508:	2200      	movs	r2, #0
 800350a:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800350c:	68bb      	ldr	r3, [r7, #8]
 800350e:	699b      	ldr	r3, [r3, #24]
 8003510:	2b00      	cmp	r3, #0
 8003512:	f040 80b9 	bne.w	8003688 <HAL_PCD_EP_DB_Transmit+0x1e0>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003516:	68bb      	ldr	r3, [r7, #8]
 8003518:	785b      	ldrb	r3, [r3, #1]
 800351a:	2b00      	cmp	r3, #0
 800351c:	d126      	bne.n	800356c <HAL_PCD_EP_DB_Transmit+0xc4>
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	62bb      	str	r3, [r7, #40]	; 0x28
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800352c:	b29b      	uxth	r3, r3
 800352e:	461a      	mov	r2, r3
 8003530:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003532:	4413      	add	r3, r2
 8003534:	62bb      	str	r3, [r7, #40]	; 0x28
 8003536:	68bb      	ldr	r3, [r7, #8]
 8003538:	781b      	ldrb	r3, [r3, #0]
 800353a:	00da      	lsls	r2, r3, #3
 800353c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800353e:	4413      	add	r3, r2
 8003540:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003544:	627b      	str	r3, [r7, #36]	; 0x24
 8003546:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003548:	881b      	ldrh	r3, [r3, #0]
 800354a:	b29b      	uxth	r3, r3
 800354c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003550:	b29a      	uxth	r2, r3
 8003552:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003554:	801a      	strh	r2, [r3, #0]
 8003556:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003558:	881b      	ldrh	r3, [r3, #0]
 800355a:	b29b      	uxth	r3, r3
 800355c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003560:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003564:	b29a      	uxth	r2, r3
 8003566:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003568:	801a      	strh	r2, [r3, #0]
 800356a:	e01a      	b.n	80035a2 <HAL_PCD_EP_DB_Transmit+0xfa>
 800356c:	68bb      	ldr	r3, [r7, #8]
 800356e:	785b      	ldrb	r3, [r3, #1]
 8003570:	2b01      	cmp	r3, #1
 8003572:	d116      	bne.n	80035a2 <HAL_PCD_EP_DB_Transmit+0xfa>
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	633b      	str	r3, [r7, #48]	; 0x30
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003582:	b29b      	uxth	r3, r3
 8003584:	461a      	mov	r2, r3
 8003586:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003588:	4413      	add	r3, r2
 800358a:	633b      	str	r3, [r7, #48]	; 0x30
 800358c:	68bb      	ldr	r3, [r7, #8]
 800358e:	781b      	ldrb	r3, [r3, #0]
 8003590:	00da      	lsls	r2, r3, #3
 8003592:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003594:	4413      	add	r3, r2
 8003596:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800359a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800359c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800359e:	2200      	movs	r2, #0
 80035a0:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	623b      	str	r3, [r7, #32]
 80035a8:	68bb      	ldr	r3, [r7, #8]
 80035aa:	785b      	ldrb	r3, [r3, #1]
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d126      	bne.n	80035fe <HAL_PCD_EP_DB_Transmit+0x156>
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	61bb      	str	r3, [r7, #24]
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80035be:	b29b      	uxth	r3, r3
 80035c0:	461a      	mov	r2, r3
 80035c2:	69bb      	ldr	r3, [r7, #24]
 80035c4:	4413      	add	r3, r2
 80035c6:	61bb      	str	r3, [r7, #24]
 80035c8:	68bb      	ldr	r3, [r7, #8]
 80035ca:	781b      	ldrb	r3, [r3, #0]
 80035cc:	00da      	lsls	r2, r3, #3
 80035ce:	69bb      	ldr	r3, [r7, #24]
 80035d0:	4413      	add	r3, r2
 80035d2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80035d6:	617b      	str	r3, [r7, #20]
 80035d8:	697b      	ldr	r3, [r7, #20]
 80035da:	881b      	ldrh	r3, [r3, #0]
 80035dc:	b29b      	uxth	r3, r3
 80035de:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80035e2:	b29a      	uxth	r2, r3
 80035e4:	697b      	ldr	r3, [r7, #20]
 80035e6:	801a      	strh	r2, [r3, #0]
 80035e8:	697b      	ldr	r3, [r7, #20]
 80035ea:	881b      	ldrh	r3, [r3, #0]
 80035ec:	b29b      	uxth	r3, r3
 80035ee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80035f2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80035f6:	b29a      	uxth	r2, r3
 80035f8:	697b      	ldr	r3, [r7, #20]
 80035fa:	801a      	strh	r2, [r3, #0]
 80035fc:	e017      	b.n	800362e <HAL_PCD_EP_DB_Transmit+0x186>
 80035fe:	68bb      	ldr	r3, [r7, #8]
 8003600:	785b      	ldrb	r3, [r3, #1]
 8003602:	2b01      	cmp	r3, #1
 8003604:	d113      	bne.n	800362e <HAL_PCD_EP_DB_Transmit+0x186>
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800360e:	b29b      	uxth	r3, r3
 8003610:	461a      	mov	r2, r3
 8003612:	6a3b      	ldr	r3, [r7, #32]
 8003614:	4413      	add	r3, r2
 8003616:	623b      	str	r3, [r7, #32]
 8003618:	68bb      	ldr	r3, [r7, #8]
 800361a:	781b      	ldrb	r3, [r3, #0]
 800361c:	00da      	lsls	r2, r3, #3
 800361e:	6a3b      	ldr	r3, [r7, #32]
 8003620:	4413      	add	r3, r2
 8003622:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003626:	61fb      	str	r3, [r7, #28]
 8003628:	69fb      	ldr	r3, [r7, #28]
 800362a:	2200      	movs	r2, #0
 800362c:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800362e:	68bb      	ldr	r3, [r7, #8]
 8003630:	781b      	ldrb	r3, [r3, #0]
 8003632:	4619      	mov	r1, r3
 8003634:	68f8      	ldr	r0, [r7, #12]
 8003636:	f006 fb4a 	bl	8009cce <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800363a:	88fb      	ldrh	r3, [r7, #6]
 800363c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003640:	2b00      	cmp	r3, #0
 8003642:	f000 82d2 	beq.w	8003bea <HAL_PCD_EP_DB_Transmit+0x742>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	461a      	mov	r2, r3
 800364c:	68bb      	ldr	r3, [r7, #8]
 800364e:	781b      	ldrb	r3, [r3, #0]
 8003650:	009b      	lsls	r3, r3, #2
 8003652:	4413      	add	r3, r2
 8003654:	881b      	ldrh	r3, [r3, #0]
 8003656:	b29b      	uxth	r3, r3
 8003658:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800365c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003660:	827b      	strh	r3, [r7, #18]
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	461a      	mov	r2, r3
 8003668:	68bb      	ldr	r3, [r7, #8]
 800366a:	781b      	ldrb	r3, [r3, #0]
 800366c:	009b      	lsls	r3, r3, #2
 800366e:	441a      	add	r2, r3
 8003670:	8a7b      	ldrh	r3, [r7, #18]
 8003672:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003676:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800367a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800367e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003682:	b29b      	uxth	r3, r3
 8003684:	8013      	strh	r3, [r2, #0]
 8003686:	e2b0      	b.n	8003bea <HAL_PCD_EP_DB_Transmit+0x742>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003688:	88fb      	ldrh	r3, [r7, #6]
 800368a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800368e:	2b00      	cmp	r3, #0
 8003690:	d021      	beq.n	80036d6 <HAL_PCD_EP_DB_Transmit+0x22e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	461a      	mov	r2, r3
 8003698:	68bb      	ldr	r3, [r7, #8]
 800369a:	781b      	ldrb	r3, [r3, #0]
 800369c:	009b      	lsls	r3, r3, #2
 800369e:	4413      	add	r3, r2
 80036a0:	881b      	ldrh	r3, [r3, #0]
 80036a2:	b29b      	uxth	r3, r3
 80036a4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80036a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80036ac:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	461a      	mov	r2, r3
 80036b6:	68bb      	ldr	r3, [r7, #8]
 80036b8:	781b      	ldrb	r3, [r3, #0]
 80036ba:	009b      	lsls	r3, r3, #2
 80036bc:	441a      	add	r2, r3
 80036be:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80036c2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80036c6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80036ca:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80036ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80036d2:	b29b      	uxth	r3, r3
 80036d4:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80036d6:	68bb      	ldr	r3, [r7, #8]
 80036d8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80036dc:	2b01      	cmp	r3, #1
 80036de:	f040 8284 	bne.w	8003bea <HAL_PCD_EP_DB_Transmit+0x742>
      {
        ep->xfer_buff += TxPctSize;
 80036e2:	68bb      	ldr	r3, [r7, #8]
 80036e4:	695a      	ldr	r2, [r3, #20]
 80036e6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80036ea:	441a      	add	r2, r3
 80036ec:	68bb      	ldr	r3, [r7, #8]
 80036ee:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80036f0:	68bb      	ldr	r3, [r7, #8]
 80036f2:	69da      	ldr	r2, [r3, #28]
 80036f4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80036f8:	441a      	add	r2, r3
 80036fa:	68bb      	ldr	r3, [r7, #8]
 80036fc:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80036fe:	68bb      	ldr	r3, [r7, #8]
 8003700:	6a1a      	ldr	r2, [r3, #32]
 8003702:	68bb      	ldr	r3, [r7, #8]
 8003704:	691b      	ldr	r3, [r3, #16]
 8003706:	429a      	cmp	r2, r3
 8003708:	d309      	bcc.n	800371e <HAL_PCD_EP_DB_Transmit+0x276>
        {
          len = ep->maxpacket;
 800370a:	68bb      	ldr	r3, [r7, #8]
 800370c:	691b      	ldr	r3, [r3, #16]
 800370e:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8003710:	68bb      	ldr	r3, [r7, #8]
 8003712:	6a1a      	ldr	r2, [r3, #32]
 8003714:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003716:	1ad2      	subs	r2, r2, r3
 8003718:	68bb      	ldr	r3, [r7, #8]
 800371a:	621a      	str	r2, [r3, #32]
 800371c:	e015      	b.n	800374a <HAL_PCD_EP_DB_Transmit+0x2a2>
        }
        else if (ep->xfer_len_db == 0U)
 800371e:	68bb      	ldr	r3, [r7, #8]
 8003720:	6a1b      	ldr	r3, [r3, #32]
 8003722:	2b00      	cmp	r3, #0
 8003724:	d107      	bne.n	8003736 <HAL_PCD_EP_DB_Transmit+0x28e>
        {
          len = TxPctSize;
 8003726:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800372a:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 800372c:	68bb      	ldr	r3, [r7, #8]
 800372e:	2200      	movs	r2, #0
 8003730:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8003734:	e009      	b.n	800374a <HAL_PCD_EP_DB_Transmit+0x2a2>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8003736:	68bb      	ldr	r3, [r7, #8]
 8003738:	2200      	movs	r2, #0
 800373a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 800373e:	68bb      	ldr	r3, [r7, #8]
 8003740:	6a1b      	ldr	r3, [r3, #32]
 8003742:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8003744:	68bb      	ldr	r3, [r7, #8]
 8003746:	2200      	movs	r2, #0
 8003748:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800374a:	68bb      	ldr	r3, [r7, #8]
 800374c:	785b      	ldrb	r3, [r3, #1]
 800374e:	2b00      	cmp	r3, #0
 8003750:	d155      	bne.n	80037fe <HAL_PCD_EP_DB_Transmit+0x356>
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	63bb      	str	r3, [r7, #56]	; 0x38
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003760:	b29b      	uxth	r3, r3
 8003762:	461a      	mov	r2, r3
 8003764:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003766:	4413      	add	r3, r2
 8003768:	63bb      	str	r3, [r7, #56]	; 0x38
 800376a:	68bb      	ldr	r3, [r7, #8]
 800376c:	781b      	ldrb	r3, [r3, #0]
 800376e:	00da      	lsls	r2, r3, #3
 8003770:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003772:	4413      	add	r3, r2
 8003774:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003778:	637b      	str	r3, [r7, #52]	; 0x34
 800377a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800377c:	2b3e      	cmp	r3, #62	; 0x3e
 800377e:	d916      	bls.n	80037ae <HAL_PCD_EP_DB_Transmit+0x306>
 8003780:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003782:	095b      	lsrs	r3, r3, #5
 8003784:	64bb      	str	r3, [r7, #72]	; 0x48
 8003786:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003788:	f003 031f 	and.w	r3, r3, #31
 800378c:	2b00      	cmp	r3, #0
 800378e:	d102      	bne.n	8003796 <HAL_PCD_EP_DB_Transmit+0x2ee>
 8003790:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003792:	3b01      	subs	r3, #1
 8003794:	64bb      	str	r3, [r7, #72]	; 0x48
 8003796:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003798:	b29b      	uxth	r3, r3
 800379a:	029b      	lsls	r3, r3, #10
 800379c:	b29b      	uxth	r3, r3
 800379e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80037a2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80037a6:	b29a      	uxth	r2, r3
 80037a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80037aa:	801a      	strh	r2, [r3, #0]
 80037ac:	e043      	b.n	8003836 <HAL_PCD_EP_DB_Transmit+0x38e>
 80037ae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d112      	bne.n	80037da <HAL_PCD_EP_DB_Transmit+0x332>
 80037b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80037b6:	881b      	ldrh	r3, [r3, #0]
 80037b8:	b29b      	uxth	r3, r3
 80037ba:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80037be:	b29a      	uxth	r2, r3
 80037c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80037c2:	801a      	strh	r2, [r3, #0]
 80037c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80037c6:	881b      	ldrh	r3, [r3, #0]
 80037c8:	b29b      	uxth	r3, r3
 80037ca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80037ce:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80037d2:	b29a      	uxth	r2, r3
 80037d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80037d6:	801a      	strh	r2, [r3, #0]
 80037d8:	e02d      	b.n	8003836 <HAL_PCD_EP_DB_Transmit+0x38e>
 80037da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80037dc:	085b      	lsrs	r3, r3, #1
 80037de:	64bb      	str	r3, [r7, #72]	; 0x48
 80037e0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80037e2:	f003 0301 	and.w	r3, r3, #1
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d002      	beq.n	80037f0 <HAL_PCD_EP_DB_Transmit+0x348>
 80037ea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80037ec:	3301      	adds	r3, #1
 80037ee:	64bb      	str	r3, [r7, #72]	; 0x48
 80037f0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80037f2:	b29b      	uxth	r3, r3
 80037f4:	029b      	lsls	r3, r3, #10
 80037f6:	b29a      	uxth	r2, r3
 80037f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80037fa:	801a      	strh	r2, [r3, #0]
 80037fc:	e01b      	b.n	8003836 <HAL_PCD_EP_DB_Transmit+0x38e>
 80037fe:	68bb      	ldr	r3, [r7, #8]
 8003800:	785b      	ldrb	r3, [r3, #1]
 8003802:	2b01      	cmp	r3, #1
 8003804:	d117      	bne.n	8003836 <HAL_PCD_EP_DB_Transmit+0x38e>
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	643b      	str	r3, [r7, #64]	; 0x40
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003814:	b29b      	uxth	r3, r3
 8003816:	461a      	mov	r2, r3
 8003818:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800381a:	4413      	add	r3, r2
 800381c:	643b      	str	r3, [r7, #64]	; 0x40
 800381e:	68bb      	ldr	r3, [r7, #8]
 8003820:	781b      	ldrb	r3, [r3, #0]
 8003822:	00da      	lsls	r2, r3, #3
 8003824:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003826:	4413      	add	r3, r2
 8003828:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800382c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800382e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003830:	b29a      	uxth	r2, r3
 8003832:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003834:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	6818      	ldr	r0, [r3, #0]
 800383a:	68bb      	ldr	r3, [r7, #8]
 800383c:	6959      	ldr	r1, [r3, #20]
 800383e:	68bb      	ldr	r3, [r7, #8]
 8003840:	891a      	ldrh	r2, [r3, #8]
 8003842:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003844:	b29b      	uxth	r3, r3
 8003846:	f004 fae2 	bl	8007e0e <USB_WritePMA>
 800384a:	e1ce      	b.n	8003bea <HAL_PCD_EP_DB_Transmit+0x742>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003854:	b29b      	uxth	r3, r3
 8003856:	461a      	mov	r2, r3
 8003858:	68bb      	ldr	r3, [r7, #8]
 800385a:	781b      	ldrb	r3, [r3, #0]
 800385c:	00db      	lsls	r3, r3, #3
 800385e:	4413      	add	r3, r2
 8003860:	68fa      	ldr	r2, [r7, #12]
 8003862:	6812      	ldr	r2, [r2, #0]
 8003864:	4413      	add	r3, r2
 8003866:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800386a:	881b      	ldrh	r3, [r3, #0]
 800386c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003870:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxPctSize)
 8003874:	68bb      	ldr	r3, [r7, #8]
 8003876:	699a      	ldr	r2, [r3, #24]
 8003878:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800387c:	429a      	cmp	r2, r3
 800387e:	d307      	bcc.n	8003890 <HAL_PCD_EP_DB_Transmit+0x3e8>
    {
      ep->xfer_len -= TxPctSize;
 8003880:	68bb      	ldr	r3, [r7, #8]
 8003882:	699a      	ldr	r2, [r3, #24]
 8003884:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003888:	1ad2      	subs	r2, r2, r3
 800388a:	68bb      	ldr	r3, [r7, #8]
 800388c:	619a      	str	r2, [r3, #24]
 800388e:	e002      	b.n	8003896 <HAL_PCD_EP_DB_Transmit+0x3ee>
    }
    else
    {
      ep->xfer_len = 0U;
 8003890:	68bb      	ldr	r3, [r7, #8]
 8003892:	2200      	movs	r2, #0
 8003894:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8003896:	68bb      	ldr	r3, [r7, #8]
 8003898:	699b      	ldr	r3, [r3, #24]
 800389a:	2b00      	cmp	r3, #0
 800389c:	f040 80c4 	bne.w	8003a28 <HAL_PCD_EP_DB_Transmit+0x580>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80038a0:	68bb      	ldr	r3, [r7, #8]
 80038a2:	785b      	ldrb	r3, [r3, #1]
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d126      	bne.n	80038f6 <HAL_PCD_EP_DB_Transmit+0x44e>
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	66bb      	str	r3, [r7, #104]	; 0x68
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80038b6:	b29b      	uxth	r3, r3
 80038b8:	461a      	mov	r2, r3
 80038ba:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80038bc:	4413      	add	r3, r2
 80038be:	66bb      	str	r3, [r7, #104]	; 0x68
 80038c0:	68bb      	ldr	r3, [r7, #8]
 80038c2:	781b      	ldrb	r3, [r3, #0]
 80038c4:	00da      	lsls	r2, r3, #3
 80038c6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80038c8:	4413      	add	r3, r2
 80038ca:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80038ce:	667b      	str	r3, [r7, #100]	; 0x64
 80038d0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80038d2:	881b      	ldrh	r3, [r3, #0]
 80038d4:	b29b      	uxth	r3, r3
 80038d6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80038da:	b29a      	uxth	r2, r3
 80038dc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80038de:	801a      	strh	r2, [r3, #0]
 80038e0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80038e2:	881b      	ldrh	r3, [r3, #0]
 80038e4:	b29b      	uxth	r3, r3
 80038e6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80038ea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80038ee:	b29a      	uxth	r2, r3
 80038f0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80038f2:	801a      	strh	r2, [r3, #0]
 80038f4:	e01a      	b.n	800392c <HAL_PCD_EP_DB_Transmit+0x484>
 80038f6:	68bb      	ldr	r3, [r7, #8]
 80038f8:	785b      	ldrb	r3, [r3, #1]
 80038fa:	2b01      	cmp	r3, #1
 80038fc:	d116      	bne.n	800392c <HAL_PCD_EP_DB_Transmit+0x484>
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	673b      	str	r3, [r7, #112]	; 0x70
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800390c:	b29b      	uxth	r3, r3
 800390e:	461a      	mov	r2, r3
 8003910:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003912:	4413      	add	r3, r2
 8003914:	673b      	str	r3, [r7, #112]	; 0x70
 8003916:	68bb      	ldr	r3, [r7, #8]
 8003918:	781b      	ldrb	r3, [r3, #0]
 800391a:	00da      	lsls	r2, r3, #3
 800391c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800391e:	4413      	add	r3, r2
 8003920:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003924:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003926:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003928:	2200      	movs	r2, #0
 800392a:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003932:	68bb      	ldr	r3, [r7, #8]
 8003934:	785b      	ldrb	r3, [r3, #1]
 8003936:	2b00      	cmp	r3, #0
 8003938:	d12f      	bne.n	800399a <HAL_PCD_EP_DB_Transmit+0x4f2>
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800394a:	b29b      	uxth	r3, r3
 800394c:	461a      	mov	r2, r3
 800394e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003952:	4413      	add	r3, r2
 8003954:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003958:	68bb      	ldr	r3, [r7, #8]
 800395a:	781b      	ldrb	r3, [r3, #0]
 800395c:	00da      	lsls	r2, r3, #3
 800395e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003962:	4413      	add	r3, r2
 8003964:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003968:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800396c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003970:	881b      	ldrh	r3, [r3, #0]
 8003972:	b29b      	uxth	r3, r3
 8003974:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003978:	b29a      	uxth	r2, r3
 800397a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800397e:	801a      	strh	r2, [r3, #0]
 8003980:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003984:	881b      	ldrh	r3, [r3, #0]
 8003986:	b29b      	uxth	r3, r3
 8003988:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800398c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003990:	b29a      	uxth	r2, r3
 8003992:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003996:	801a      	strh	r2, [r3, #0]
 8003998:	e017      	b.n	80039ca <HAL_PCD_EP_DB_Transmit+0x522>
 800399a:	68bb      	ldr	r3, [r7, #8]
 800399c:	785b      	ldrb	r3, [r3, #1]
 800399e:	2b01      	cmp	r3, #1
 80039a0:	d113      	bne.n	80039ca <HAL_PCD_EP_DB_Transmit+0x522>
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80039aa:	b29b      	uxth	r3, r3
 80039ac:	461a      	mov	r2, r3
 80039ae:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80039b0:	4413      	add	r3, r2
 80039b2:	67fb      	str	r3, [r7, #124]	; 0x7c
 80039b4:	68bb      	ldr	r3, [r7, #8]
 80039b6:	781b      	ldrb	r3, [r3, #0]
 80039b8:	00da      	lsls	r2, r3, #3
 80039ba:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80039bc:	4413      	add	r3, r2
 80039be:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80039c2:	67bb      	str	r3, [r7, #120]	; 0x78
 80039c4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80039c6:	2200      	movs	r2, #0
 80039c8:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80039ca:	68bb      	ldr	r3, [r7, #8]
 80039cc:	781b      	ldrb	r3, [r3, #0]
 80039ce:	4619      	mov	r1, r3
 80039d0:	68f8      	ldr	r0, [r7, #12]
 80039d2:	f006 f97c 	bl	8009cce <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80039d6:	88fb      	ldrh	r3, [r7, #6]
 80039d8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80039dc:	2b00      	cmp	r3, #0
 80039de:	f040 8104 	bne.w	8003bea <HAL_PCD_EP_DB_Transmit+0x742>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	461a      	mov	r2, r3
 80039e8:	68bb      	ldr	r3, [r7, #8]
 80039ea:	781b      	ldrb	r3, [r3, #0]
 80039ec:	009b      	lsls	r3, r3, #2
 80039ee:	4413      	add	r3, r2
 80039f0:	881b      	ldrh	r3, [r3, #0]
 80039f2:	b29b      	uxth	r3, r3
 80039f4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80039f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80039fc:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	461a      	mov	r2, r3
 8003a06:	68bb      	ldr	r3, [r7, #8]
 8003a08:	781b      	ldrb	r3, [r3, #0]
 8003a0a:	009b      	lsls	r3, r3, #2
 8003a0c:	441a      	add	r2, r3
 8003a0e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8003a12:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003a16:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003a1a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003a1e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003a22:	b29b      	uxth	r3, r3
 8003a24:	8013      	strh	r3, [r2, #0]
 8003a26:	e0e0      	b.n	8003bea <HAL_PCD_EP_DB_Transmit+0x742>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003a28:	88fb      	ldrh	r3, [r7, #6]
 8003a2a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d121      	bne.n	8003a76 <HAL_PCD_EP_DB_Transmit+0x5ce>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	461a      	mov	r2, r3
 8003a38:	68bb      	ldr	r3, [r7, #8]
 8003a3a:	781b      	ldrb	r3, [r3, #0]
 8003a3c:	009b      	lsls	r3, r3, #2
 8003a3e:	4413      	add	r3, r2
 8003a40:	881b      	ldrh	r3, [r3, #0]
 8003a42:	b29b      	uxth	r3, r3
 8003a44:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003a48:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a4c:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	461a      	mov	r2, r3
 8003a56:	68bb      	ldr	r3, [r7, #8]
 8003a58:	781b      	ldrb	r3, [r3, #0]
 8003a5a:	009b      	lsls	r3, r3, #2
 8003a5c:	441a      	add	r2, r3
 8003a5e:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8003a62:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003a66:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003a6a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003a6e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003a72:	b29b      	uxth	r3, r3
 8003a74:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8003a76:	68bb      	ldr	r3, [r7, #8]
 8003a78:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003a7c:	2b01      	cmp	r3, #1
 8003a7e:	f040 80b4 	bne.w	8003bea <HAL_PCD_EP_DB_Transmit+0x742>
      {
        ep->xfer_buff += TxPctSize;
 8003a82:	68bb      	ldr	r3, [r7, #8]
 8003a84:	695a      	ldr	r2, [r3, #20]
 8003a86:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003a8a:	441a      	add	r2, r3
 8003a8c:	68bb      	ldr	r3, [r7, #8]
 8003a8e:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8003a90:	68bb      	ldr	r3, [r7, #8]
 8003a92:	69da      	ldr	r2, [r3, #28]
 8003a94:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003a98:	441a      	add	r2, r3
 8003a9a:	68bb      	ldr	r3, [r7, #8]
 8003a9c:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8003a9e:	68bb      	ldr	r3, [r7, #8]
 8003aa0:	6a1a      	ldr	r2, [r3, #32]
 8003aa2:	68bb      	ldr	r3, [r7, #8]
 8003aa4:	691b      	ldr	r3, [r3, #16]
 8003aa6:	429a      	cmp	r2, r3
 8003aa8:	d309      	bcc.n	8003abe <HAL_PCD_EP_DB_Transmit+0x616>
        {
          len = ep->maxpacket;
 8003aaa:	68bb      	ldr	r3, [r7, #8]
 8003aac:	691b      	ldr	r3, [r3, #16]
 8003aae:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8003ab0:	68bb      	ldr	r3, [r7, #8]
 8003ab2:	6a1a      	ldr	r2, [r3, #32]
 8003ab4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003ab6:	1ad2      	subs	r2, r2, r3
 8003ab8:	68bb      	ldr	r3, [r7, #8]
 8003aba:	621a      	str	r2, [r3, #32]
 8003abc:	e015      	b.n	8003aea <HAL_PCD_EP_DB_Transmit+0x642>
        }
        else if (ep->xfer_len_db == 0U)
 8003abe:	68bb      	ldr	r3, [r7, #8]
 8003ac0:	6a1b      	ldr	r3, [r3, #32]
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d107      	bne.n	8003ad6 <HAL_PCD_EP_DB_Transmit+0x62e>
        {
          len = TxPctSize;
 8003ac6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003aca:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8003acc:	68bb      	ldr	r3, [r7, #8]
 8003ace:	2200      	movs	r2, #0
 8003ad0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8003ad4:	e009      	b.n	8003aea <HAL_PCD_EP_DB_Transmit+0x642>
        }
        else
        {
          len = ep->xfer_len_db;
 8003ad6:	68bb      	ldr	r3, [r7, #8]
 8003ad8:	6a1b      	ldr	r3, [r3, #32]
 8003ada:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8003adc:	68bb      	ldr	r3, [r7, #8]
 8003ade:	2200      	movs	r2, #0
 8003ae0:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8003ae2:	68bb      	ldr	r3, [r7, #8]
 8003ae4:	2200      	movs	r2, #0
 8003ae6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	663b      	str	r3, [r7, #96]	; 0x60
 8003af0:	68bb      	ldr	r3, [r7, #8]
 8003af2:	785b      	ldrb	r3, [r3, #1]
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d155      	bne.n	8003ba4 <HAL_PCD_EP_DB_Transmit+0x6fc>
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	65bb      	str	r3, [r7, #88]	; 0x58
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003b06:	b29b      	uxth	r3, r3
 8003b08:	461a      	mov	r2, r3
 8003b0a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003b0c:	4413      	add	r3, r2
 8003b0e:	65bb      	str	r3, [r7, #88]	; 0x58
 8003b10:	68bb      	ldr	r3, [r7, #8]
 8003b12:	781b      	ldrb	r3, [r3, #0]
 8003b14:	00da      	lsls	r2, r3, #3
 8003b16:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003b18:	4413      	add	r3, r2
 8003b1a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003b1e:	657b      	str	r3, [r7, #84]	; 0x54
 8003b20:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003b22:	2b3e      	cmp	r3, #62	; 0x3e
 8003b24:	d916      	bls.n	8003b54 <HAL_PCD_EP_DB_Transmit+0x6ac>
 8003b26:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003b28:	095b      	lsrs	r3, r3, #5
 8003b2a:	677b      	str	r3, [r7, #116]	; 0x74
 8003b2c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003b2e:	f003 031f 	and.w	r3, r3, #31
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d102      	bne.n	8003b3c <HAL_PCD_EP_DB_Transmit+0x694>
 8003b36:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003b38:	3b01      	subs	r3, #1
 8003b3a:	677b      	str	r3, [r7, #116]	; 0x74
 8003b3c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003b3e:	b29b      	uxth	r3, r3
 8003b40:	029b      	lsls	r3, r3, #10
 8003b42:	b29b      	uxth	r3, r3
 8003b44:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003b48:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003b4c:	b29a      	uxth	r2, r3
 8003b4e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003b50:	801a      	strh	r2, [r3, #0]
 8003b52:	e040      	b.n	8003bd6 <HAL_PCD_EP_DB_Transmit+0x72e>
 8003b54:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d112      	bne.n	8003b80 <HAL_PCD_EP_DB_Transmit+0x6d8>
 8003b5a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003b5c:	881b      	ldrh	r3, [r3, #0]
 8003b5e:	b29b      	uxth	r3, r3
 8003b60:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003b64:	b29a      	uxth	r2, r3
 8003b66:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003b68:	801a      	strh	r2, [r3, #0]
 8003b6a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003b6c:	881b      	ldrh	r3, [r3, #0]
 8003b6e:	b29b      	uxth	r3, r3
 8003b70:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003b74:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003b78:	b29a      	uxth	r2, r3
 8003b7a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003b7c:	801a      	strh	r2, [r3, #0]
 8003b7e:	e02a      	b.n	8003bd6 <HAL_PCD_EP_DB_Transmit+0x72e>
 8003b80:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003b82:	085b      	lsrs	r3, r3, #1
 8003b84:	677b      	str	r3, [r7, #116]	; 0x74
 8003b86:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003b88:	f003 0301 	and.w	r3, r3, #1
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d002      	beq.n	8003b96 <HAL_PCD_EP_DB_Transmit+0x6ee>
 8003b90:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003b92:	3301      	adds	r3, #1
 8003b94:	677b      	str	r3, [r7, #116]	; 0x74
 8003b96:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003b98:	b29b      	uxth	r3, r3
 8003b9a:	029b      	lsls	r3, r3, #10
 8003b9c:	b29a      	uxth	r2, r3
 8003b9e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003ba0:	801a      	strh	r2, [r3, #0]
 8003ba2:	e018      	b.n	8003bd6 <HAL_PCD_EP_DB_Transmit+0x72e>
 8003ba4:	68bb      	ldr	r3, [r7, #8]
 8003ba6:	785b      	ldrb	r3, [r3, #1]
 8003ba8:	2b01      	cmp	r3, #1
 8003baa:	d114      	bne.n	8003bd6 <HAL_PCD_EP_DB_Transmit+0x72e>
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003bb4:	b29b      	uxth	r3, r3
 8003bb6:	461a      	mov	r2, r3
 8003bb8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003bba:	4413      	add	r3, r2
 8003bbc:	663b      	str	r3, [r7, #96]	; 0x60
 8003bbe:	68bb      	ldr	r3, [r7, #8]
 8003bc0:	781b      	ldrb	r3, [r3, #0]
 8003bc2:	00da      	lsls	r2, r3, #3
 8003bc4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003bc6:	4413      	add	r3, r2
 8003bc8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003bcc:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003bce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003bd0:	b29a      	uxth	r2, r3
 8003bd2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003bd4:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	6818      	ldr	r0, [r3, #0]
 8003bda:	68bb      	ldr	r3, [r7, #8]
 8003bdc:	6959      	ldr	r1, [r3, #20]
 8003bde:	68bb      	ldr	r3, [r7, #8]
 8003be0:	895a      	ldrh	r2, [r3, #10]
 8003be2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003be4:	b29b      	uxth	r3, r3
 8003be6:	f004 f912 	bl	8007e0e <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	461a      	mov	r2, r3
 8003bf0:	68bb      	ldr	r3, [r7, #8]
 8003bf2:	781b      	ldrb	r3, [r3, #0]
 8003bf4:	009b      	lsls	r3, r3, #2
 8003bf6:	4413      	add	r3, r2
 8003bf8:	881b      	ldrh	r3, [r3, #0]
 8003bfa:	b29b      	uxth	r3, r3
 8003bfc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003c00:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003c04:	823b      	strh	r3, [r7, #16]
 8003c06:	8a3b      	ldrh	r3, [r7, #16]
 8003c08:	f083 0310 	eor.w	r3, r3, #16
 8003c0c:	823b      	strh	r3, [r7, #16]
 8003c0e:	8a3b      	ldrh	r3, [r7, #16]
 8003c10:	f083 0320 	eor.w	r3, r3, #32
 8003c14:	823b      	strh	r3, [r7, #16]
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	461a      	mov	r2, r3
 8003c1c:	68bb      	ldr	r3, [r7, #8]
 8003c1e:	781b      	ldrb	r3, [r3, #0]
 8003c20:	009b      	lsls	r3, r3, #2
 8003c22:	441a      	add	r2, r3
 8003c24:	8a3b      	ldrh	r3, [r7, #16]
 8003c26:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003c2a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003c2e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003c32:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003c36:	b29b      	uxth	r3, r3
 8003c38:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8003c3a:	2300      	movs	r3, #0
}
 8003c3c:	4618      	mov	r0, r3
 8003c3e:	3788      	adds	r7, #136	; 0x88
 8003c40:	46bd      	mov	sp, r7
 8003c42:	bd80      	pop	{r7, pc}

08003c44 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8003c44:	b480      	push	{r7}
 8003c46:	b087      	sub	sp, #28
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	60f8      	str	r0, [r7, #12]
 8003c4c:	607b      	str	r3, [r7, #4]
 8003c4e:	460b      	mov	r3, r1
 8003c50:	817b      	strh	r3, [r7, #10]
 8003c52:	4613      	mov	r3, r2
 8003c54:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8003c56:	897b      	ldrh	r3, [r7, #10]
 8003c58:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c5c:	b29b      	uxth	r3, r3
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d00b      	beq.n	8003c7a <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003c62:	897b      	ldrh	r3, [r7, #10]
 8003c64:	f003 0307 	and.w	r3, r3, #7
 8003c68:	1c5a      	adds	r2, r3, #1
 8003c6a:	4613      	mov	r3, r2
 8003c6c:	009b      	lsls	r3, r3, #2
 8003c6e:	4413      	add	r3, r2
 8003c70:	00db      	lsls	r3, r3, #3
 8003c72:	68fa      	ldr	r2, [r7, #12]
 8003c74:	4413      	add	r3, r2
 8003c76:	617b      	str	r3, [r7, #20]
 8003c78:	e009      	b.n	8003c8e <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003c7a:	897a      	ldrh	r2, [r7, #10]
 8003c7c:	4613      	mov	r3, r2
 8003c7e:	009b      	lsls	r3, r3, #2
 8003c80:	4413      	add	r3, r2
 8003c82:	00db      	lsls	r3, r3, #3
 8003c84:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003c88:	68fa      	ldr	r2, [r7, #12]
 8003c8a:	4413      	add	r3, r2
 8003c8c:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8003c8e:	893b      	ldrh	r3, [r7, #8]
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d107      	bne.n	8003ca4 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8003c94:	697b      	ldr	r3, [r7, #20]
 8003c96:	2200      	movs	r2, #0
 8003c98:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	b29a      	uxth	r2, r3
 8003c9e:	697b      	ldr	r3, [r7, #20]
 8003ca0:	80da      	strh	r2, [r3, #6]
 8003ca2:	e00b      	b.n	8003cbc <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8003ca4:	697b      	ldr	r3, [r7, #20]
 8003ca6:	2201      	movs	r2, #1
 8003ca8:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	b29a      	uxth	r2, r3
 8003cae:	697b      	ldr	r3, [r7, #20]
 8003cb0:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	0c1b      	lsrs	r3, r3, #16
 8003cb6:	b29a      	uxth	r2, r3
 8003cb8:	697b      	ldr	r3, [r7, #20]
 8003cba:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8003cbc:	2300      	movs	r3, #0
}
 8003cbe:	4618      	mov	r0, r3
 8003cc0:	371c      	adds	r7, #28
 8003cc2:	46bd      	mov	sp, r7
 8003cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc8:	4770      	bx	lr

08003cca <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003cca:	b480      	push	{r7}
 8003ccc:	b085      	sub	sp, #20
 8003cce:	af00      	add	r7, sp, #0
 8003cd0:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	2201      	movs	r2, #1
 8003cdc:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
  hpcd->LPM_State = LPM_L0;
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	2200      	movs	r2, #0
 8003ce4:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8003cee:	b29b      	uxth	r3, r3
 8003cf0:	f043 0301 	orr.w	r3, r3, #1
 8003cf4:	b29a      	uxth	r2, r3
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8003d02:	b29b      	uxth	r3, r3
 8003d04:	f043 0302 	orr.w	r3, r3, #2
 8003d08:	b29a      	uxth	r2, r3
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 8003d10:	2300      	movs	r3, #0
}
 8003d12:	4618      	mov	r0, r3
 8003d14:	3714      	adds	r7, #20
 8003d16:	46bd      	mov	sp, r7
 8003d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d1c:	4770      	bx	lr
	...

08003d20 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003d20:	b480      	push	{r7}
 8003d22:	b085      	sub	sp, #20
 8003d24:	af00      	add	r7, sp, #0
 8003d26:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d141      	bne.n	8003db2 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003d2e:	4b4b      	ldr	r3, [pc, #300]	; (8003e5c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003d36:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d3a:	d131      	bne.n	8003da0 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003d3c:	4b47      	ldr	r3, [pc, #284]	; (8003e5c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d3e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003d42:	4a46      	ldr	r2, [pc, #280]	; (8003e5c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d44:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003d48:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003d4c:	4b43      	ldr	r3, [pc, #268]	; (8003e5c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003d54:	4a41      	ldr	r2, [pc, #260]	; (8003e5c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d56:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003d5a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003d5c:	4b40      	ldr	r3, [pc, #256]	; (8003e60 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	2232      	movs	r2, #50	; 0x32
 8003d62:	fb02 f303 	mul.w	r3, r2, r3
 8003d66:	4a3f      	ldr	r2, [pc, #252]	; (8003e64 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003d68:	fba2 2303 	umull	r2, r3, r2, r3
 8003d6c:	0c9b      	lsrs	r3, r3, #18
 8003d6e:	3301      	adds	r3, #1
 8003d70:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003d72:	e002      	b.n	8003d7a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	3b01      	subs	r3, #1
 8003d78:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003d7a:	4b38      	ldr	r3, [pc, #224]	; (8003e5c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d7c:	695b      	ldr	r3, [r3, #20]
 8003d7e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d82:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d86:	d102      	bne.n	8003d8e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d1f2      	bne.n	8003d74 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003d8e:	4b33      	ldr	r3, [pc, #204]	; (8003e5c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d90:	695b      	ldr	r3, [r3, #20]
 8003d92:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d96:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d9a:	d158      	bne.n	8003e4e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003d9c:	2303      	movs	r3, #3
 8003d9e:	e057      	b.n	8003e50 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003da0:	4b2e      	ldr	r3, [pc, #184]	; (8003e5c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003da2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003da6:	4a2d      	ldr	r2, [pc, #180]	; (8003e5c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003da8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003dac:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003db0:	e04d      	b.n	8003e4e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003db8:	d141      	bne.n	8003e3e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003dba:	4b28      	ldr	r3, [pc, #160]	; (8003e5c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003dc2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003dc6:	d131      	bne.n	8003e2c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003dc8:	4b24      	ldr	r3, [pc, #144]	; (8003e5c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003dca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003dce:	4a23      	ldr	r2, [pc, #140]	; (8003e5c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003dd0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003dd4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003dd8:	4b20      	ldr	r3, [pc, #128]	; (8003e5c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003de0:	4a1e      	ldr	r2, [pc, #120]	; (8003e5c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003de2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003de6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003de8:	4b1d      	ldr	r3, [pc, #116]	; (8003e60 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	2232      	movs	r2, #50	; 0x32
 8003dee:	fb02 f303 	mul.w	r3, r2, r3
 8003df2:	4a1c      	ldr	r2, [pc, #112]	; (8003e64 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003df4:	fba2 2303 	umull	r2, r3, r2, r3
 8003df8:	0c9b      	lsrs	r3, r3, #18
 8003dfa:	3301      	adds	r3, #1
 8003dfc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003dfe:	e002      	b.n	8003e06 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	3b01      	subs	r3, #1
 8003e04:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003e06:	4b15      	ldr	r3, [pc, #84]	; (8003e5c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e08:	695b      	ldr	r3, [r3, #20]
 8003e0a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e0e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e12:	d102      	bne.n	8003e1a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d1f2      	bne.n	8003e00 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003e1a:	4b10      	ldr	r3, [pc, #64]	; (8003e5c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e1c:	695b      	ldr	r3, [r3, #20]
 8003e1e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e22:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e26:	d112      	bne.n	8003e4e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003e28:	2303      	movs	r3, #3
 8003e2a:	e011      	b.n	8003e50 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003e2c:	4b0b      	ldr	r3, [pc, #44]	; (8003e5c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e2e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003e32:	4a0a      	ldr	r2, [pc, #40]	; (8003e5c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e34:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e38:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003e3c:	e007      	b.n	8003e4e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003e3e:	4b07      	ldr	r3, [pc, #28]	; (8003e5c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003e46:	4a05      	ldr	r2, [pc, #20]	; (8003e5c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e48:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003e4c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8003e4e:	2300      	movs	r3, #0
}
 8003e50:	4618      	mov	r0, r3
 8003e52:	3714      	adds	r7, #20
 8003e54:	46bd      	mov	sp, r7
 8003e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e5a:	4770      	bx	lr
 8003e5c:	40007000 	.word	0x40007000
 8003e60:	20000000 	.word	0x20000000
 8003e64:	431bde83 	.word	0x431bde83

08003e68 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003e68:	b580      	push	{r7, lr}
 8003e6a:	b088      	sub	sp, #32
 8003e6c:	af00      	add	r7, sp, #0
 8003e6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d101      	bne.n	8003e7a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003e76:	2301      	movs	r3, #1
 8003e78:	e306      	b.n	8004488 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	f003 0301 	and.w	r3, r3, #1
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d075      	beq.n	8003f72 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003e86:	4b97      	ldr	r3, [pc, #604]	; (80040e4 <HAL_RCC_OscConfig+0x27c>)
 8003e88:	689b      	ldr	r3, [r3, #8]
 8003e8a:	f003 030c 	and.w	r3, r3, #12
 8003e8e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003e90:	4b94      	ldr	r3, [pc, #592]	; (80040e4 <HAL_RCC_OscConfig+0x27c>)
 8003e92:	68db      	ldr	r3, [r3, #12]
 8003e94:	f003 0303 	and.w	r3, r3, #3
 8003e98:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8003e9a:	69bb      	ldr	r3, [r7, #24]
 8003e9c:	2b0c      	cmp	r3, #12
 8003e9e:	d102      	bne.n	8003ea6 <HAL_RCC_OscConfig+0x3e>
 8003ea0:	697b      	ldr	r3, [r7, #20]
 8003ea2:	2b03      	cmp	r3, #3
 8003ea4:	d002      	beq.n	8003eac <HAL_RCC_OscConfig+0x44>
 8003ea6:	69bb      	ldr	r3, [r7, #24]
 8003ea8:	2b08      	cmp	r3, #8
 8003eaa:	d10b      	bne.n	8003ec4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003eac:	4b8d      	ldr	r3, [pc, #564]	; (80040e4 <HAL_RCC_OscConfig+0x27c>)
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d05b      	beq.n	8003f70 <HAL_RCC_OscConfig+0x108>
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	685b      	ldr	r3, [r3, #4]
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d157      	bne.n	8003f70 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003ec0:	2301      	movs	r3, #1
 8003ec2:	e2e1      	b.n	8004488 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	685b      	ldr	r3, [r3, #4]
 8003ec8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ecc:	d106      	bne.n	8003edc <HAL_RCC_OscConfig+0x74>
 8003ece:	4b85      	ldr	r3, [pc, #532]	; (80040e4 <HAL_RCC_OscConfig+0x27c>)
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	4a84      	ldr	r2, [pc, #528]	; (80040e4 <HAL_RCC_OscConfig+0x27c>)
 8003ed4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ed8:	6013      	str	r3, [r2, #0]
 8003eda:	e01d      	b.n	8003f18 <HAL_RCC_OscConfig+0xb0>
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	685b      	ldr	r3, [r3, #4]
 8003ee0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003ee4:	d10c      	bne.n	8003f00 <HAL_RCC_OscConfig+0x98>
 8003ee6:	4b7f      	ldr	r3, [pc, #508]	; (80040e4 <HAL_RCC_OscConfig+0x27c>)
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	4a7e      	ldr	r2, [pc, #504]	; (80040e4 <HAL_RCC_OscConfig+0x27c>)
 8003eec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003ef0:	6013      	str	r3, [r2, #0]
 8003ef2:	4b7c      	ldr	r3, [pc, #496]	; (80040e4 <HAL_RCC_OscConfig+0x27c>)
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	4a7b      	ldr	r2, [pc, #492]	; (80040e4 <HAL_RCC_OscConfig+0x27c>)
 8003ef8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003efc:	6013      	str	r3, [r2, #0]
 8003efe:	e00b      	b.n	8003f18 <HAL_RCC_OscConfig+0xb0>
 8003f00:	4b78      	ldr	r3, [pc, #480]	; (80040e4 <HAL_RCC_OscConfig+0x27c>)
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	4a77      	ldr	r2, [pc, #476]	; (80040e4 <HAL_RCC_OscConfig+0x27c>)
 8003f06:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003f0a:	6013      	str	r3, [r2, #0]
 8003f0c:	4b75      	ldr	r3, [pc, #468]	; (80040e4 <HAL_RCC_OscConfig+0x27c>)
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	4a74      	ldr	r2, [pc, #464]	; (80040e4 <HAL_RCC_OscConfig+0x27c>)
 8003f12:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003f16:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	685b      	ldr	r3, [r3, #4]
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d013      	beq.n	8003f48 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f20:	f7fd f89e 	bl	8001060 <HAL_GetTick>
 8003f24:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003f26:	e008      	b.n	8003f3a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003f28:	f7fd f89a 	bl	8001060 <HAL_GetTick>
 8003f2c:	4602      	mov	r2, r0
 8003f2e:	693b      	ldr	r3, [r7, #16]
 8003f30:	1ad3      	subs	r3, r2, r3
 8003f32:	2b64      	cmp	r3, #100	; 0x64
 8003f34:	d901      	bls.n	8003f3a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003f36:	2303      	movs	r3, #3
 8003f38:	e2a6      	b.n	8004488 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003f3a:	4b6a      	ldr	r3, [pc, #424]	; (80040e4 <HAL_RCC_OscConfig+0x27c>)
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d0f0      	beq.n	8003f28 <HAL_RCC_OscConfig+0xc0>
 8003f46:	e014      	b.n	8003f72 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f48:	f7fd f88a 	bl	8001060 <HAL_GetTick>
 8003f4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003f4e:	e008      	b.n	8003f62 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003f50:	f7fd f886 	bl	8001060 <HAL_GetTick>
 8003f54:	4602      	mov	r2, r0
 8003f56:	693b      	ldr	r3, [r7, #16]
 8003f58:	1ad3      	subs	r3, r2, r3
 8003f5a:	2b64      	cmp	r3, #100	; 0x64
 8003f5c:	d901      	bls.n	8003f62 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003f5e:	2303      	movs	r3, #3
 8003f60:	e292      	b.n	8004488 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003f62:	4b60      	ldr	r3, [pc, #384]	; (80040e4 <HAL_RCC_OscConfig+0x27c>)
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d1f0      	bne.n	8003f50 <HAL_RCC_OscConfig+0xe8>
 8003f6e:	e000      	b.n	8003f72 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f70:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	f003 0302 	and.w	r3, r3, #2
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d075      	beq.n	800406a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003f7e:	4b59      	ldr	r3, [pc, #356]	; (80040e4 <HAL_RCC_OscConfig+0x27c>)
 8003f80:	689b      	ldr	r3, [r3, #8]
 8003f82:	f003 030c 	and.w	r3, r3, #12
 8003f86:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003f88:	4b56      	ldr	r3, [pc, #344]	; (80040e4 <HAL_RCC_OscConfig+0x27c>)
 8003f8a:	68db      	ldr	r3, [r3, #12]
 8003f8c:	f003 0303 	and.w	r3, r3, #3
 8003f90:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8003f92:	69bb      	ldr	r3, [r7, #24]
 8003f94:	2b0c      	cmp	r3, #12
 8003f96:	d102      	bne.n	8003f9e <HAL_RCC_OscConfig+0x136>
 8003f98:	697b      	ldr	r3, [r7, #20]
 8003f9a:	2b02      	cmp	r3, #2
 8003f9c:	d002      	beq.n	8003fa4 <HAL_RCC_OscConfig+0x13c>
 8003f9e:	69bb      	ldr	r3, [r7, #24]
 8003fa0:	2b04      	cmp	r3, #4
 8003fa2:	d11f      	bne.n	8003fe4 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003fa4:	4b4f      	ldr	r3, [pc, #316]	; (80040e4 <HAL_RCC_OscConfig+0x27c>)
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d005      	beq.n	8003fbc <HAL_RCC_OscConfig+0x154>
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	68db      	ldr	r3, [r3, #12]
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d101      	bne.n	8003fbc <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8003fb8:	2301      	movs	r3, #1
 8003fba:	e265      	b.n	8004488 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003fbc:	4b49      	ldr	r3, [pc, #292]	; (80040e4 <HAL_RCC_OscConfig+0x27c>)
 8003fbe:	685b      	ldr	r3, [r3, #4]
 8003fc0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	691b      	ldr	r3, [r3, #16]
 8003fc8:	061b      	lsls	r3, r3, #24
 8003fca:	4946      	ldr	r1, [pc, #280]	; (80040e4 <HAL_RCC_OscConfig+0x27c>)
 8003fcc:	4313      	orrs	r3, r2
 8003fce:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003fd0:	4b45      	ldr	r3, [pc, #276]	; (80040e8 <HAL_RCC_OscConfig+0x280>)
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	4618      	mov	r0, r3
 8003fd6:	f7fc fff7 	bl	8000fc8 <HAL_InitTick>
 8003fda:	4603      	mov	r3, r0
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d043      	beq.n	8004068 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8003fe0:	2301      	movs	r3, #1
 8003fe2:	e251      	b.n	8004488 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	68db      	ldr	r3, [r3, #12]
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d023      	beq.n	8004034 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003fec:	4b3d      	ldr	r3, [pc, #244]	; (80040e4 <HAL_RCC_OscConfig+0x27c>)
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	4a3c      	ldr	r2, [pc, #240]	; (80040e4 <HAL_RCC_OscConfig+0x27c>)
 8003ff2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ff6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ff8:	f7fd f832 	bl	8001060 <HAL_GetTick>
 8003ffc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003ffe:	e008      	b.n	8004012 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004000:	f7fd f82e 	bl	8001060 <HAL_GetTick>
 8004004:	4602      	mov	r2, r0
 8004006:	693b      	ldr	r3, [r7, #16]
 8004008:	1ad3      	subs	r3, r2, r3
 800400a:	2b02      	cmp	r3, #2
 800400c:	d901      	bls.n	8004012 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800400e:	2303      	movs	r3, #3
 8004010:	e23a      	b.n	8004488 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004012:	4b34      	ldr	r3, [pc, #208]	; (80040e4 <HAL_RCC_OscConfig+0x27c>)
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800401a:	2b00      	cmp	r3, #0
 800401c:	d0f0      	beq.n	8004000 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800401e:	4b31      	ldr	r3, [pc, #196]	; (80040e4 <HAL_RCC_OscConfig+0x27c>)
 8004020:	685b      	ldr	r3, [r3, #4]
 8004022:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	691b      	ldr	r3, [r3, #16]
 800402a:	061b      	lsls	r3, r3, #24
 800402c:	492d      	ldr	r1, [pc, #180]	; (80040e4 <HAL_RCC_OscConfig+0x27c>)
 800402e:	4313      	orrs	r3, r2
 8004030:	604b      	str	r3, [r1, #4]
 8004032:	e01a      	b.n	800406a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004034:	4b2b      	ldr	r3, [pc, #172]	; (80040e4 <HAL_RCC_OscConfig+0x27c>)
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	4a2a      	ldr	r2, [pc, #168]	; (80040e4 <HAL_RCC_OscConfig+0x27c>)
 800403a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800403e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004040:	f7fd f80e 	bl	8001060 <HAL_GetTick>
 8004044:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004046:	e008      	b.n	800405a <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004048:	f7fd f80a 	bl	8001060 <HAL_GetTick>
 800404c:	4602      	mov	r2, r0
 800404e:	693b      	ldr	r3, [r7, #16]
 8004050:	1ad3      	subs	r3, r2, r3
 8004052:	2b02      	cmp	r3, #2
 8004054:	d901      	bls.n	800405a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8004056:	2303      	movs	r3, #3
 8004058:	e216      	b.n	8004488 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800405a:	4b22      	ldr	r3, [pc, #136]	; (80040e4 <HAL_RCC_OscConfig+0x27c>)
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004062:	2b00      	cmp	r3, #0
 8004064:	d1f0      	bne.n	8004048 <HAL_RCC_OscConfig+0x1e0>
 8004066:	e000      	b.n	800406a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004068:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	f003 0308 	and.w	r3, r3, #8
 8004072:	2b00      	cmp	r3, #0
 8004074:	d041      	beq.n	80040fa <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	695b      	ldr	r3, [r3, #20]
 800407a:	2b00      	cmp	r3, #0
 800407c:	d01c      	beq.n	80040b8 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800407e:	4b19      	ldr	r3, [pc, #100]	; (80040e4 <HAL_RCC_OscConfig+0x27c>)
 8004080:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004084:	4a17      	ldr	r2, [pc, #92]	; (80040e4 <HAL_RCC_OscConfig+0x27c>)
 8004086:	f043 0301 	orr.w	r3, r3, #1
 800408a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800408e:	f7fc ffe7 	bl	8001060 <HAL_GetTick>
 8004092:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004094:	e008      	b.n	80040a8 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004096:	f7fc ffe3 	bl	8001060 <HAL_GetTick>
 800409a:	4602      	mov	r2, r0
 800409c:	693b      	ldr	r3, [r7, #16]
 800409e:	1ad3      	subs	r3, r2, r3
 80040a0:	2b02      	cmp	r3, #2
 80040a2:	d901      	bls.n	80040a8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80040a4:	2303      	movs	r3, #3
 80040a6:	e1ef      	b.n	8004488 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80040a8:	4b0e      	ldr	r3, [pc, #56]	; (80040e4 <HAL_RCC_OscConfig+0x27c>)
 80040aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80040ae:	f003 0302 	and.w	r3, r3, #2
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d0ef      	beq.n	8004096 <HAL_RCC_OscConfig+0x22e>
 80040b6:	e020      	b.n	80040fa <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80040b8:	4b0a      	ldr	r3, [pc, #40]	; (80040e4 <HAL_RCC_OscConfig+0x27c>)
 80040ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80040be:	4a09      	ldr	r2, [pc, #36]	; (80040e4 <HAL_RCC_OscConfig+0x27c>)
 80040c0:	f023 0301 	bic.w	r3, r3, #1
 80040c4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040c8:	f7fc ffca 	bl	8001060 <HAL_GetTick>
 80040cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80040ce:	e00d      	b.n	80040ec <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80040d0:	f7fc ffc6 	bl	8001060 <HAL_GetTick>
 80040d4:	4602      	mov	r2, r0
 80040d6:	693b      	ldr	r3, [r7, #16]
 80040d8:	1ad3      	subs	r3, r2, r3
 80040da:	2b02      	cmp	r3, #2
 80040dc:	d906      	bls.n	80040ec <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80040de:	2303      	movs	r3, #3
 80040e0:	e1d2      	b.n	8004488 <HAL_RCC_OscConfig+0x620>
 80040e2:	bf00      	nop
 80040e4:	40021000 	.word	0x40021000
 80040e8:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80040ec:	4b8c      	ldr	r3, [pc, #560]	; (8004320 <HAL_RCC_OscConfig+0x4b8>)
 80040ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80040f2:	f003 0302 	and.w	r3, r3, #2
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d1ea      	bne.n	80040d0 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	f003 0304 	and.w	r3, r3, #4
 8004102:	2b00      	cmp	r3, #0
 8004104:	f000 80a6 	beq.w	8004254 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004108:	2300      	movs	r3, #0
 800410a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800410c:	4b84      	ldr	r3, [pc, #528]	; (8004320 <HAL_RCC_OscConfig+0x4b8>)
 800410e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004110:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004114:	2b00      	cmp	r3, #0
 8004116:	d101      	bne.n	800411c <HAL_RCC_OscConfig+0x2b4>
 8004118:	2301      	movs	r3, #1
 800411a:	e000      	b.n	800411e <HAL_RCC_OscConfig+0x2b6>
 800411c:	2300      	movs	r3, #0
 800411e:	2b00      	cmp	r3, #0
 8004120:	d00d      	beq.n	800413e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004122:	4b7f      	ldr	r3, [pc, #508]	; (8004320 <HAL_RCC_OscConfig+0x4b8>)
 8004124:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004126:	4a7e      	ldr	r2, [pc, #504]	; (8004320 <HAL_RCC_OscConfig+0x4b8>)
 8004128:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800412c:	6593      	str	r3, [r2, #88]	; 0x58
 800412e:	4b7c      	ldr	r3, [pc, #496]	; (8004320 <HAL_RCC_OscConfig+0x4b8>)
 8004130:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004132:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004136:	60fb      	str	r3, [r7, #12]
 8004138:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800413a:	2301      	movs	r3, #1
 800413c:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800413e:	4b79      	ldr	r3, [pc, #484]	; (8004324 <HAL_RCC_OscConfig+0x4bc>)
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004146:	2b00      	cmp	r3, #0
 8004148:	d118      	bne.n	800417c <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800414a:	4b76      	ldr	r3, [pc, #472]	; (8004324 <HAL_RCC_OscConfig+0x4bc>)
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	4a75      	ldr	r2, [pc, #468]	; (8004324 <HAL_RCC_OscConfig+0x4bc>)
 8004150:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004154:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004156:	f7fc ff83 	bl	8001060 <HAL_GetTick>
 800415a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800415c:	e008      	b.n	8004170 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800415e:	f7fc ff7f 	bl	8001060 <HAL_GetTick>
 8004162:	4602      	mov	r2, r0
 8004164:	693b      	ldr	r3, [r7, #16]
 8004166:	1ad3      	subs	r3, r2, r3
 8004168:	2b02      	cmp	r3, #2
 800416a:	d901      	bls.n	8004170 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 800416c:	2303      	movs	r3, #3
 800416e:	e18b      	b.n	8004488 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004170:	4b6c      	ldr	r3, [pc, #432]	; (8004324 <HAL_RCC_OscConfig+0x4bc>)
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004178:	2b00      	cmp	r3, #0
 800417a:	d0f0      	beq.n	800415e <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	689b      	ldr	r3, [r3, #8]
 8004180:	2b01      	cmp	r3, #1
 8004182:	d108      	bne.n	8004196 <HAL_RCC_OscConfig+0x32e>
 8004184:	4b66      	ldr	r3, [pc, #408]	; (8004320 <HAL_RCC_OscConfig+0x4b8>)
 8004186:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800418a:	4a65      	ldr	r2, [pc, #404]	; (8004320 <HAL_RCC_OscConfig+0x4b8>)
 800418c:	f043 0301 	orr.w	r3, r3, #1
 8004190:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004194:	e024      	b.n	80041e0 <HAL_RCC_OscConfig+0x378>
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	689b      	ldr	r3, [r3, #8]
 800419a:	2b05      	cmp	r3, #5
 800419c:	d110      	bne.n	80041c0 <HAL_RCC_OscConfig+0x358>
 800419e:	4b60      	ldr	r3, [pc, #384]	; (8004320 <HAL_RCC_OscConfig+0x4b8>)
 80041a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041a4:	4a5e      	ldr	r2, [pc, #376]	; (8004320 <HAL_RCC_OscConfig+0x4b8>)
 80041a6:	f043 0304 	orr.w	r3, r3, #4
 80041aa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80041ae:	4b5c      	ldr	r3, [pc, #368]	; (8004320 <HAL_RCC_OscConfig+0x4b8>)
 80041b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041b4:	4a5a      	ldr	r2, [pc, #360]	; (8004320 <HAL_RCC_OscConfig+0x4b8>)
 80041b6:	f043 0301 	orr.w	r3, r3, #1
 80041ba:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80041be:	e00f      	b.n	80041e0 <HAL_RCC_OscConfig+0x378>
 80041c0:	4b57      	ldr	r3, [pc, #348]	; (8004320 <HAL_RCC_OscConfig+0x4b8>)
 80041c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041c6:	4a56      	ldr	r2, [pc, #344]	; (8004320 <HAL_RCC_OscConfig+0x4b8>)
 80041c8:	f023 0301 	bic.w	r3, r3, #1
 80041cc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80041d0:	4b53      	ldr	r3, [pc, #332]	; (8004320 <HAL_RCC_OscConfig+0x4b8>)
 80041d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041d6:	4a52      	ldr	r2, [pc, #328]	; (8004320 <HAL_RCC_OscConfig+0x4b8>)
 80041d8:	f023 0304 	bic.w	r3, r3, #4
 80041dc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	689b      	ldr	r3, [r3, #8]
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d016      	beq.n	8004216 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041e8:	f7fc ff3a 	bl	8001060 <HAL_GetTick>
 80041ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80041ee:	e00a      	b.n	8004206 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80041f0:	f7fc ff36 	bl	8001060 <HAL_GetTick>
 80041f4:	4602      	mov	r2, r0
 80041f6:	693b      	ldr	r3, [r7, #16]
 80041f8:	1ad3      	subs	r3, r2, r3
 80041fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80041fe:	4293      	cmp	r3, r2
 8004200:	d901      	bls.n	8004206 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8004202:	2303      	movs	r3, #3
 8004204:	e140      	b.n	8004488 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004206:	4b46      	ldr	r3, [pc, #280]	; (8004320 <HAL_RCC_OscConfig+0x4b8>)
 8004208:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800420c:	f003 0302 	and.w	r3, r3, #2
 8004210:	2b00      	cmp	r3, #0
 8004212:	d0ed      	beq.n	80041f0 <HAL_RCC_OscConfig+0x388>
 8004214:	e015      	b.n	8004242 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004216:	f7fc ff23 	bl	8001060 <HAL_GetTick>
 800421a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800421c:	e00a      	b.n	8004234 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800421e:	f7fc ff1f 	bl	8001060 <HAL_GetTick>
 8004222:	4602      	mov	r2, r0
 8004224:	693b      	ldr	r3, [r7, #16]
 8004226:	1ad3      	subs	r3, r2, r3
 8004228:	f241 3288 	movw	r2, #5000	; 0x1388
 800422c:	4293      	cmp	r3, r2
 800422e:	d901      	bls.n	8004234 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8004230:	2303      	movs	r3, #3
 8004232:	e129      	b.n	8004488 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004234:	4b3a      	ldr	r3, [pc, #232]	; (8004320 <HAL_RCC_OscConfig+0x4b8>)
 8004236:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800423a:	f003 0302 	and.w	r3, r3, #2
 800423e:	2b00      	cmp	r3, #0
 8004240:	d1ed      	bne.n	800421e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004242:	7ffb      	ldrb	r3, [r7, #31]
 8004244:	2b01      	cmp	r3, #1
 8004246:	d105      	bne.n	8004254 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004248:	4b35      	ldr	r3, [pc, #212]	; (8004320 <HAL_RCC_OscConfig+0x4b8>)
 800424a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800424c:	4a34      	ldr	r2, [pc, #208]	; (8004320 <HAL_RCC_OscConfig+0x4b8>)
 800424e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004252:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	f003 0320 	and.w	r3, r3, #32
 800425c:	2b00      	cmp	r3, #0
 800425e:	d03c      	beq.n	80042da <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	699b      	ldr	r3, [r3, #24]
 8004264:	2b00      	cmp	r3, #0
 8004266:	d01c      	beq.n	80042a2 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004268:	4b2d      	ldr	r3, [pc, #180]	; (8004320 <HAL_RCC_OscConfig+0x4b8>)
 800426a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800426e:	4a2c      	ldr	r2, [pc, #176]	; (8004320 <HAL_RCC_OscConfig+0x4b8>)
 8004270:	f043 0301 	orr.w	r3, r3, #1
 8004274:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004278:	f7fc fef2 	bl	8001060 <HAL_GetTick>
 800427c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800427e:	e008      	b.n	8004292 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004280:	f7fc feee 	bl	8001060 <HAL_GetTick>
 8004284:	4602      	mov	r2, r0
 8004286:	693b      	ldr	r3, [r7, #16]
 8004288:	1ad3      	subs	r3, r2, r3
 800428a:	2b02      	cmp	r3, #2
 800428c:	d901      	bls.n	8004292 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800428e:	2303      	movs	r3, #3
 8004290:	e0fa      	b.n	8004488 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004292:	4b23      	ldr	r3, [pc, #140]	; (8004320 <HAL_RCC_OscConfig+0x4b8>)
 8004294:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004298:	f003 0302 	and.w	r3, r3, #2
 800429c:	2b00      	cmp	r3, #0
 800429e:	d0ef      	beq.n	8004280 <HAL_RCC_OscConfig+0x418>
 80042a0:	e01b      	b.n	80042da <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80042a2:	4b1f      	ldr	r3, [pc, #124]	; (8004320 <HAL_RCC_OscConfig+0x4b8>)
 80042a4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80042a8:	4a1d      	ldr	r2, [pc, #116]	; (8004320 <HAL_RCC_OscConfig+0x4b8>)
 80042aa:	f023 0301 	bic.w	r3, r3, #1
 80042ae:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042b2:	f7fc fed5 	bl	8001060 <HAL_GetTick>
 80042b6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80042b8:	e008      	b.n	80042cc <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80042ba:	f7fc fed1 	bl	8001060 <HAL_GetTick>
 80042be:	4602      	mov	r2, r0
 80042c0:	693b      	ldr	r3, [r7, #16]
 80042c2:	1ad3      	subs	r3, r2, r3
 80042c4:	2b02      	cmp	r3, #2
 80042c6:	d901      	bls.n	80042cc <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80042c8:	2303      	movs	r3, #3
 80042ca:	e0dd      	b.n	8004488 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80042cc:	4b14      	ldr	r3, [pc, #80]	; (8004320 <HAL_RCC_OscConfig+0x4b8>)
 80042ce:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80042d2:	f003 0302 	and.w	r3, r3, #2
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d1ef      	bne.n	80042ba <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	69db      	ldr	r3, [r3, #28]
 80042de:	2b00      	cmp	r3, #0
 80042e0:	f000 80d1 	beq.w	8004486 <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80042e4:	4b0e      	ldr	r3, [pc, #56]	; (8004320 <HAL_RCC_OscConfig+0x4b8>)
 80042e6:	689b      	ldr	r3, [r3, #8]
 80042e8:	f003 030c 	and.w	r3, r3, #12
 80042ec:	2b0c      	cmp	r3, #12
 80042ee:	f000 808b 	beq.w	8004408 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	69db      	ldr	r3, [r3, #28]
 80042f6:	2b02      	cmp	r3, #2
 80042f8:	d15e      	bne.n	80043b8 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80042fa:	4b09      	ldr	r3, [pc, #36]	; (8004320 <HAL_RCC_OscConfig+0x4b8>)
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	4a08      	ldr	r2, [pc, #32]	; (8004320 <HAL_RCC_OscConfig+0x4b8>)
 8004300:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004304:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004306:	f7fc feab 	bl	8001060 <HAL_GetTick>
 800430a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800430c:	e00c      	b.n	8004328 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800430e:	f7fc fea7 	bl	8001060 <HAL_GetTick>
 8004312:	4602      	mov	r2, r0
 8004314:	693b      	ldr	r3, [r7, #16]
 8004316:	1ad3      	subs	r3, r2, r3
 8004318:	2b02      	cmp	r3, #2
 800431a:	d905      	bls.n	8004328 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 800431c:	2303      	movs	r3, #3
 800431e:	e0b3      	b.n	8004488 <HAL_RCC_OscConfig+0x620>
 8004320:	40021000 	.word	0x40021000
 8004324:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004328:	4b59      	ldr	r3, [pc, #356]	; (8004490 <HAL_RCC_OscConfig+0x628>)
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004330:	2b00      	cmp	r3, #0
 8004332:	d1ec      	bne.n	800430e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004334:	4b56      	ldr	r3, [pc, #344]	; (8004490 <HAL_RCC_OscConfig+0x628>)
 8004336:	68da      	ldr	r2, [r3, #12]
 8004338:	4b56      	ldr	r3, [pc, #344]	; (8004494 <HAL_RCC_OscConfig+0x62c>)
 800433a:	4013      	ands	r3, r2
 800433c:	687a      	ldr	r2, [r7, #4]
 800433e:	6a11      	ldr	r1, [r2, #32]
 8004340:	687a      	ldr	r2, [r7, #4]
 8004342:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004344:	3a01      	subs	r2, #1
 8004346:	0112      	lsls	r2, r2, #4
 8004348:	4311      	orrs	r1, r2
 800434a:	687a      	ldr	r2, [r7, #4]
 800434c:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800434e:	0212      	lsls	r2, r2, #8
 8004350:	4311      	orrs	r1, r2
 8004352:	687a      	ldr	r2, [r7, #4]
 8004354:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004356:	0852      	lsrs	r2, r2, #1
 8004358:	3a01      	subs	r2, #1
 800435a:	0552      	lsls	r2, r2, #21
 800435c:	4311      	orrs	r1, r2
 800435e:	687a      	ldr	r2, [r7, #4]
 8004360:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004362:	0852      	lsrs	r2, r2, #1
 8004364:	3a01      	subs	r2, #1
 8004366:	0652      	lsls	r2, r2, #25
 8004368:	4311      	orrs	r1, r2
 800436a:	687a      	ldr	r2, [r7, #4]
 800436c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800436e:	06d2      	lsls	r2, r2, #27
 8004370:	430a      	orrs	r2, r1
 8004372:	4947      	ldr	r1, [pc, #284]	; (8004490 <HAL_RCC_OscConfig+0x628>)
 8004374:	4313      	orrs	r3, r2
 8004376:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004378:	4b45      	ldr	r3, [pc, #276]	; (8004490 <HAL_RCC_OscConfig+0x628>)
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	4a44      	ldr	r2, [pc, #272]	; (8004490 <HAL_RCC_OscConfig+0x628>)
 800437e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004382:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004384:	4b42      	ldr	r3, [pc, #264]	; (8004490 <HAL_RCC_OscConfig+0x628>)
 8004386:	68db      	ldr	r3, [r3, #12]
 8004388:	4a41      	ldr	r2, [pc, #260]	; (8004490 <HAL_RCC_OscConfig+0x628>)
 800438a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800438e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004390:	f7fc fe66 	bl	8001060 <HAL_GetTick>
 8004394:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004396:	e008      	b.n	80043aa <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004398:	f7fc fe62 	bl	8001060 <HAL_GetTick>
 800439c:	4602      	mov	r2, r0
 800439e:	693b      	ldr	r3, [r7, #16]
 80043a0:	1ad3      	subs	r3, r2, r3
 80043a2:	2b02      	cmp	r3, #2
 80043a4:	d901      	bls.n	80043aa <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80043a6:	2303      	movs	r3, #3
 80043a8:	e06e      	b.n	8004488 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80043aa:	4b39      	ldr	r3, [pc, #228]	; (8004490 <HAL_RCC_OscConfig+0x628>)
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d0f0      	beq.n	8004398 <HAL_RCC_OscConfig+0x530>
 80043b6:	e066      	b.n	8004486 <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80043b8:	4b35      	ldr	r3, [pc, #212]	; (8004490 <HAL_RCC_OscConfig+0x628>)
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	4a34      	ldr	r2, [pc, #208]	; (8004490 <HAL_RCC_OscConfig+0x628>)
 80043be:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80043c2:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80043c4:	4b32      	ldr	r3, [pc, #200]	; (8004490 <HAL_RCC_OscConfig+0x628>)
 80043c6:	68db      	ldr	r3, [r3, #12]
 80043c8:	4a31      	ldr	r2, [pc, #196]	; (8004490 <HAL_RCC_OscConfig+0x628>)
 80043ca:	f023 0303 	bic.w	r3, r3, #3
 80043ce:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80043d0:	4b2f      	ldr	r3, [pc, #188]	; (8004490 <HAL_RCC_OscConfig+0x628>)
 80043d2:	68db      	ldr	r3, [r3, #12]
 80043d4:	4a2e      	ldr	r2, [pc, #184]	; (8004490 <HAL_RCC_OscConfig+0x628>)
 80043d6:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80043da:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80043de:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043e0:	f7fc fe3e 	bl	8001060 <HAL_GetTick>
 80043e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80043e6:	e008      	b.n	80043fa <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80043e8:	f7fc fe3a 	bl	8001060 <HAL_GetTick>
 80043ec:	4602      	mov	r2, r0
 80043ee:	693b      	ldr	r3, [r7, #16]
 80043f0:	1ad3      	subs	r3, r2, r3
 80043f2:	2b02      	cmp	r3, #2
 80043f4:	d901      	bls.n	80043fa <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 80043f6:	2303      	movs	r3, #3
 80043f8:	e046      	b.n	8004488 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80043fa:	4b25      	ldr	r3, [pc, #148]	; (8004490 <HAL_RCC_OscConfig+0x628>)
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004402:	2b00      	cmp	r3, #0
 8004404:	d1f0      	bne.n	80043e8 <HAL_RCC_OscConfig+0x580>
 8004406:	e03e      	b.n	8004486 <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	69db      	ldr	r3, [r3, #28]
 800440c:	2b01      	cmp	r3, #1
 800440e:	d101      	bne.n	8004414 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 8004410:	2301      	movs	r3, #1
 8004412:	e039      	b.n	8004488 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8004414:	4b1e      	ldr	r3, [pc, #120]	; (8004490 <HAL_RCC_OscConfig+0x628>)
 8004416:	68db      	ldr	r3, [r3, #12]
 8004418:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800441a:	697b      	ldr	r3, [r7, #20]
 800441c:	f003 0203 	and.w	r2, r3, #3
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	6a1b      	ldr	r3, [r3, #32]
 8004424:	429a      	cmp	r2, r3
 8004426:	d12c      	bne.n	8004482 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004428:	697b      	ldr	r3, [r7, #20]
 800442a:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004432:	3b01      	subs	r3, #1
 8004434:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004436:	429a      	cmp	r2, r3
 8004438:	d123      	bne.n	8004482 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800443a:	697b      	ldr	r3, [r7, #20]
 800443c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004444:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004446:	429a      	cmp	r2, r3
 8004448:	d11b      	bne.n	8004482 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800444a:	697b      	ldr	r3, [r7, #20]
 800444c:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004454:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004456:	429a      	cmp	r2, r3
 8004458:	d113      	bne.n	8004482 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800445a:	697b      	ldr	r3, [r7, #20]
 800445c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004464:	085b      	lsrs	r3, r3, #1
 8004466:	3b01      	subs	r3, #1
 8004468:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800446a:	429a      	cmp	r2, r3
 800446c:	d109      	bne.n	8004482 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800446e:	697b      	ldr	r3, [r7, #20]
 8004470:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004478:	085b      	lsrs	r3, r3, #1
 800447a:	3b01      	subs	r3, #1
 800447c:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800447e:	429a      	cmp	r2, r3
 8004480:	d001      	beq.n	8004486 <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 8004482:	2301      	movs	r3, #1
 8004484:	e000      	b.n	8004488 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 8004486:	2300      	movs	r3, #0
}
 8004488:	4618      	mov	r0, r3
 800448a:	3720      	adds	r7, #32
 800448c:	46bd      	mov	sp, r7
 800448e:	bd80      	pop	{r7, pc}
 8004490:	40021000 	.word	0x40021000
 8004494:	019f800c 	.word	0x019f800c

08004498 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004498:	b580      	push	{r7, lr}
 800449a:	b086      	sub	sp, #24
 800449c:	af00      	add	r7, sp, #0
 800449e:	6078      	str	r0, [r7, #4]
 80044a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80044a2:	2300      	movs	r3, #0
 80044a4:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d101      	bne.n	80044b0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80044ac:	2301      	movs	r3, #1
 80044ae:	e11e      	b.n	80046ee <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80044b0:	4b91      	ldr	r3, [pc, #580]	; (80046f8 <HAL_RCC_ClockConfig+0x260>)
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	f003 030f 	and.w	r3, r3, #15
 80044b8:	683a      	ldr	r2, [r7, #0]
 80044ba:	429a      	cmp	r2, r3
 80044bc:	d910      	bls.n	80044e0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80044be:	4b8e      	ldr	r3, [pc, #568]	; (80046f8 <HAL_RCC_ClockConfig+0x260>)
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	f023 020f 	bic.w	r2, r3, #15
 80044c6:	498c      	ldr	r1, [pc, #560]	; (80046f8 <HAL_RCC_ClockConfig+0x260>)
 80044c8:	683b      	ldr	r3, [r7, #0]
 80044ca:	4313      	orrs	r3, r2
 80044cc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80044ce:	4b8a      	ldr	r3, [pc, #552]	; (80046f8 <HAL_RCC_ClockConfig+0x260>)
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	f003 030f 	and.w	r3, r3, #15
 80044d6:	683a      	ldr	r2, [r7, #0]
 80044d8:	429a      	cmp	r2, r3
 80044da:	d001      	beq.n	80044e0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80044dc:	2301      	movs	r3, #1
 80044de:	e106      	b.n	80046ee <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	f003 0301 	and.w	r3, r3, #1
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d073      	beq.n	80045d4 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	685b      	ldr	r3, [r3, #4]
 80044f0:	2b03      	cmp	r3, #3
 80044f2:	d129      	bne.n	8004548 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80044f4:	4b81      	ldr	r3, [pc, #516]	; (80046fc <HAL_RCC_ClockConfig+0x264>)
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d101      	bne.n	8004504 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8004500:	2301      	movs	r3, #1
 8004502:	e0f4      	b.n	80046ee <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8004504:	f000 f99e 	bl	8004844 <RCC_GetSysClockFreqFromPLLSource>
 8004508:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800450a:	693b      	ldr	r3, [r7, #16]
 800450c:	4a7c      	ldr	r2, [pc, #496]	; (8004700 <HAL_RCC_ClockConfig+0x268>)
 800450e:	4293      	cmp	r3, r2
 8004510:	d93f      	bls.n	8004592 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004512:	4b7a      	ldr	r3, [pc, #488]	; (80046fc <HAL_RCC_ClockConfig+0x264>)
 8004514:	689b      	ldr	r3, [r3, #8]
 8004516:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800451a:	2b00      	cmp	r3, #0
 800451c:	d009      	beq.n	8004532 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004526:	2b00      	cmp	r3, #0
 8004528:	d033      	beq.n	8004592 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800452e:	2b00      	cmp	r3, #0
 8004530:	d12f      	bne.n	8004592 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004532:	4b72      	ldr	r3, [pc, #456]	; (80046fc <HAL_RCC_ClockConfig+0x264>)
 8004534:	689b      	ldr	r3, [r3, #8]
 8004536:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800453a:	4a70      	ldr	r2, [pc, #448]	; (80046fc <HAL_RCC_ClockConfig+0x264>)
 800453c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004540:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004542:	2380      	movs	r3, #128	; 0x80
 8004544:	617b      	str	r3, [r7, #20]
 8004546:	e024      	b.n	8004592 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	685b      	ldr	r3, [r3, #4]
 800454c:	2b02      	cmp	r3, #2
 800454e:	d107      	bne.n	8004560 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004550:	4b6a      	ldr	r3, [pc, #424]	; (80046fc <HAL_RCC_ClockConfig+0x264>)
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004558:	2b00      	cmp	r3, #0
 800455a:	d109      	bne.n	8004570 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800455c:	2301      	movs	r3, #1
 800455e:	e0c6      	b.n	80046ee <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004560:	4b66      	ldr	r3, [pc, #408]	; (80046fc <HAL_RCC_ClockConfig+0x264>)
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004568:	2b00      	cmp	r3, #0
 800456a:	d101      	bne.n	8004570 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800456c:	2301      	movs	r3, #1
 800456e:	e0be      	b.n	80046ee <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8004570:	f000 f8ce 	bl	8004710 <HAL_RCC_GetSysClockFreq>
 8004574:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8004576:	693b      	ldr	r3, [r7, #16]
 8004578:	4a61      	ldr	r2, [pc, #388]	; (8004700 <HAL_RCC_ClockConfig+0x268>)
 800457a:	4293      	cmp	r3, r2
 800457c:	d909      	bls.n	8004592 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800457e:	4b5f      	ldr	r3, [pc, #380]	; (80046fc <HAL_RCC_ClockConfig+0x264>)
 8004580:	689b      	ldr	r3, [r3, #8]
 8004582:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004586:	4a5d      	ldr	r2, [pc, #372]	; (80046fc <HAL_RCC_ClockConfig+0x264>)
 8004588:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800458c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800458e:	2380      	movs	r3, #128	; 0x80
 8004590:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004592:	4b5a      	ldr	r3, [pc, #360]	; (80046fc <HAL_RCC_ClockConfig+0x264>)
 8004594:	689b      	ldr	r3, [r3, #8]
 8004596:	f023 0203 	bic.w	r2, r3, #3
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	685b      	ldr	r3, [r3, #4]
 800459e:	4957      	ldr	r1, [pc, #348]	; (80046fc <HAL_RCC_ClockConfig+0x264>)
 80045a0:	4313      	orrs	r3, r2
 80045a2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80045a4:	f7fc fd5c 	bl	8001060 <HAL_GetTick>
 80045a8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80045aa:	e00a      	b.n	80045c2 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80045ac:	f7fc fd58 	bl	8001060 <HAL_GetTick>
 80045b0:	4602      	mov	r2, r0
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	1ad3      	subs	r3, r2, r3
 80045b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80045ba:	4293      	cmp	r3, r2
 80045bc:	d901      	bls.n	80045c2 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80045be:	2303      	movs	r3, #3
 80045c0:	e095      	b.n	80046ee <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80045c2:	4b4e      	ldr	r3, [pc, #312]	; (80046fc <HAL_RCC_ClockConfig+0x264>)
 80045c4:	689b      	ldr	r3, [r3, #8]
 80045c6:	f003 020c 	and.w	r2, r3, #12
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	685b      	ldr	r3, [r3, #4]
 80045ce:	009b      	lsls	r3, r3, #2
 80045d0:	429a      	cmp	r2, r3
 80045d2:	d1eb      	bne.n	80045ac <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	f003 0302 	and.w	r3, r3, #2
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d023      	beq.n	8004628 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	f003 0304 	and.w	r3, r3, #4
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d005      	beq.n	80045f8 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80045ec:	4b43      	ldr	r3, [pc, #268]	; (80046fc <HAL_RCC_ClockConfig+0x264>)
 80045ee:	689b      	ldr	r3, [r3, #8]
 80045f0:	4a42      	ldr	r2, [pc, #264]	; (80046fc <HAL_RCC_ClockConfig+0x264>)
 80045f2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80045f6:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	f003 0308 	and.w	r3, r3, #8
 8004600:	2b00      	cmp	r3, #0
 8004602:	d007      	beq.n	8004614 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8004604:	4b3d      	ldr	r3, [pc, #244]	; (80046fc <HAL_RCC_ClockConfig+0x264>)
 8004606:	689b      	ldr	r3, [r3, #8]
 8004608:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800460c:	4a3b      	ldr	r2, [pc, #236]	; (80046fc <HAL_RCC_ClockConfig+0x264>)
 800460e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004612:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004614:	4b39      	ldr	r3, [pc, #228]	; (80046fc <HAL_RCC_ClockConfig+0x264>)
 8004616:	689b      	ldr	r3, [r3, #8]
 8004618:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	689b      	ldr	r3, [r3, #8]
 8004620:	4936      	ldr	r1, [pc, #216]	; (80046fc <HAL_RCC_ClockConfig+0x264>)
 8004622:	4313      	orrs	r3, r2
 8004624:	608b      	str	r3, [r1, #8]
 8004626:	e008      	b.n	800463a <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8004628:	697b      	ldr	r3, [r7, #20]
 800462a:	2b80      	cmp	r3, #128	; 0x80
 800462c:	d105      	bne.n	800463a <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800462e:	4b33      	ldr	r3, [pc, #204]	; (80046fc <HAL_RCC_ClockConfig+0x264>)
 8004630:	689b      	ldr	r3, [r3, #8]
 8004632:	4a32      	ldr	r2, [pc, #200]	; (80046fc <HAL_RCC_ClockConfig+0x264>)
 8004634:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004638:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800463a:	4b2f      	ldr	r3, [pc, #188]	; (80046f8 <HAL_RCC_ClockConfig+0x260>)
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	f003 030f 	and.w	r3, r3, #15
 8004642:	683a      	ldr	r2, [r7, #0]
 8004644:	429a      	cmp	r2, r3
 8004646:	d21d      	bcs.n	8004684 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004648:	4b2b      	ldr	r3, [pc, #172]	; (80046f8 <HAL_RCC_ClockConfig+0x260>)
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	f023 020f 	bic.w	r2, r3, #15
 8004650:	4929      	ldr	r1, [pc, #164]	; (80046f8 <HAL_RCC_ClockConfig+0x260>)
 8004652:	683b      	ldr	r3, [r7, #0]
 8004654:	4313      	orrs	r3, r2
 8004656:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004658:	f7fc fd02 	bl	8001060 <HAL_GetTick>
 800465c:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800465e:	e00a      	b.n	8004676 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004660:	f7fc fcfe 	bl	8001060 <HAL_GetTick>
 8004664:	4602      	mov	r2, r0
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	1ad3      	subs	r3, r2, r3
 800466a:	f241 3288 	movw	r2, #5000	; 0x1388
 800466e:	4293      	cmp	r3, r2
 8004670:	d901      	bls.n	8004676 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8004672:	2303      	movs	r3, #3
 8004674:	e03b      	b.n	80046ee <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004676:	4b20      	ldr	r3, [pc, #128]	; (80046f8 <HAL_RCC_ClockConfig+0x260>)
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	f003 030f 	and.w	r3, r3, #15
 800467e:	683a      	ldr	r2, [r7, #0]
 8004680:	429a      	cmp	r2, r3
 8004682:	d1ed      	bne.n	8004660 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	f003 0304 	and.w	r3, r3, #4
 800468c:	2b00      	cmp	r3, #0
 800468e:	d008      	beq.n	80046a2 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004690:	4b1a      	ldr	r3, [pc, #104]	; (80046fc <HAL_RCC_ClockConfig+0x264>)
 8004692:	689b      	ldr	r3, [r3, #8]
 8004694:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	68db      	ldr	r3, [r3, #12]
 800469c:	4917      	ldr	r1, [pc, #92]	; (80046fc <HAL_RCC_ClockConfig+0x264>)
 800469e:	4313      	orrs	r3, r2
 80046a0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	f003 0308 	and.w	r3, r3, #8
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d009      	beq.n	80046c2 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80046ae:	4b13      	ldr	r3, [pc, #76]	; (80046fc <HAL_RCC_ClockConfig+0x264>)
 80046b0:	689b      	ldr	r3, [r3, #8]
 80046b2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	691b      	ldr	r3, [r3, #16]
 80046ba:	00db      	lsls	r3, r3, #3
 80046bc:	490f      	ldr	r1, [pc, #60]	; (80046fc <HAL_RCC_ClockConfig+0x264>)
 80046be:	4313      	orrs	r3, r2
 80046c0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80046c2:	f000 f825 	bl	8004710 <HAL_RCC_GetSysClockFreq>
 80046c6:	4602      	mov	r2, r0
 80046c8:	4b0c      	ldr	r3, [pc, #48]	; (80046fc <HAL_RCC_ClockConfig+0x264>)
 80046ca:	689b      	ldr	r3, [r3, #8]
 80046cc:	091b      	lsrs	r3, r3, #4
 80046ce:	f003 030f 	and.w	r3, r3, #15
 80046d2:	490c      	ldr	r1, [pc, #48]	; (8004704 <HAL_RCC_ClockConfig+0x26c>)
 80046d4:	5ccb      	ldrb	r3, [r1, r3]
 80046d6:	f003 031f 	and.w	r3, r3, #31
 80046da:	fa22 f303 	lsr.w	r3, r2, r3
 80046de:	4a0a      	ldr	r2, [pc, #40]	; (8004708 <HAL_RCC_ClockConfig+0x270>)
 80046e0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80046e2:	4b0a      	ldr	r3, [pc, #40]	; (800470c <HAL_RCC_ClockConfig+0x274>)
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	4618      	mov	r0, r3
 80046e8:	f7fc fc6e 	bl	8000fc8 <HAL_InitTick>
 80046ec:	4603      	mov	r3, r0
}
 80046ee:	4618      	mov	r0, r3
 80046f0:	3718      	adds	r7, #24
 80046f2:	46bd      	mov	sp, r7
 80046f4:	bd80      	pop	{r7, pc}
 80046f6:	bf00      	nop
 80046f8:	40022000 	.word	0x40022000
 80046fc:	40021000 	.word	0x40021000
 8004700:	04c4b400 	.word	0x04c4b400
 8004704:	0800abec 	.word	0x0800abec
 8004708:	20000000 	.word	0x20000000
 800470c:	20000004 	.word	0x20000004

08004710 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004710:	b480      	push	{r7}
 8004712:	b087      	sub	sp, #28
 8004714:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8004716:	4b2c      	ldr	r3, [pc, #176]	; (80047c8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004718:	689b      	ldr	r3, [r3, #8]
 800471a:	f003 030c 	and.w	r3, r3, #12
 800471e:	2b04      	cmp	r3, #4
 8004720:	d102      	bne.n	8004728 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004722:	4b2a      	ldr	r3, [pc, #168]	; (80047cc <HAL_RCC_GetSysClockFreq+0xbc>)
 8004724:	613b      	str	r3, [r7, #16]
 8004726:	e047      	b.n	80047b8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8004728:	4b27      	ldr	r3, [pc, #156]	; (80047c8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800472a:	689b      	ldr	r3, [r3, #8]
 800472c:	f003 030c 	and.w	r3, r3, #12
 8004730:	2b08      	cmp	r3, #8
 8004732:	d102      	bne.n	800473a <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004734:	4b26      	ldr	r3, [pc, #152]	; (80047d0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004736:	613b      	str	r3, [r7, #16]
 8004738:	e03e      	b.n	80047b8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800473a:	4b23      	ldr	r3, [pc, #140]	; (80047c8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800473c:	689b      	ldr	r3, [r3, #8]
 800473e:	f003 030c 	and.w	r3, r3, #12
 8004742:	2b0c      	cmp	r3, #12
 8004744:	d136      	bne.n	80047b4 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004746:	4b20      	ldr	r3, [pc, #128]	; (80047c8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004748:	68db      	ldr	r3, [r3, #12]
 800474a:	f003 0303 	and.w	r3, r3, #3
 800474e:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004750:	4b1d      	ldr	r3, [pc, #116]	; (80047c8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004752:	68db      	ldr	r3, [r3, #12]
 8004754:	091b      	lsrs	r3, r3, #4
 8004756:	f003 030f 	and.w	r3, r3, #15
 800475a:	3301      	adds	r3, #1
 800475c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	2b03      	cmp	r3, #3
 8004762:	d10c      	bne.n	800477e <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004764:	4a1a      	ldr	r2, [pc, #104]	; (80047d0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004766:	68bb      	ldr	r3, [r7, #8]
 8004768:	fbb2 f3f3 	udiv	r3, r2, r3
 800476c:	4a16      	ldr	r2, [pc, #88]	; (80047c8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800476e:	68d2      	ldr	r2, [r2, #12]
 8004770:	0a12      	lsrs	r2, r2, #8
 8004772:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004776:	fb02 f303 	mul.w	r3, r2, r3
 800477a:	617b      	str	r3, [r7, #20]
      break;
 800477c:	e00c      	b.n	8004798 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800477e:	4a13      	ldr	r2, [pc, #76]	; (80047cc <HAL_RCC_GetSysClockFreq+0xbc>)
 8004780:	68bb      	ldr	r3, [r7, #8]
 8004782:	fbb2 f3f3 	udiv	r3, r2, r3
 8004786:	4a10      	ldr	r2, [pc, #64]	; (80047c8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004788:	68d2      	ldr	r2, [r2, #12]
 800478a:	0a12      	lsrs	r2, r2, #8
 800478c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004790:	fb02 f303 	mul.w	r3, r2, r3
 8004794:	617b      	str	r3, [r7, #20]
      break;
 8004796:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004798:	4b0b      	ldr	r3, [pc, #44]	; (80047c8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800479a:	68db      	ldr	r3, [r3, #12]
 800479c:	0e5b      	lsrs	r3, r3, #25
 800479e:	f003 0303 	and.w	r3, r3, #3
 80047a2:	3301      	adds	r3, #1
 80047a4:	005b      	lsls	r3, r3, #1
 80047a6:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80047a8:	697a      	ldr	r2, [r7, #20]
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80047b0:	613b      	str	r3, [r7, #16]
 80047b2:	e001      	b.n	80047b8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80047b4:	2300      	movs	r3, #0
 80047b6:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80047b8:	693b      	ldr	r3, [r7, #16]
}
 80047ba:	4618      	mov	r0, r3
 80047bc:	371c      	adds	r7, #28
 80047be:	46bd      	mov	sp, r7
 80047c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c4:	4770      	bx	lr
 80047c6:	bf00      	nop
 80047c8:	40021000 	.word	0x40021000
 80047cc:	00f42400 	.word	0x00f42400
 80047d0:	007a1200 	.word	0x007a1200

080047d4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80047d4:	b480      	push	{r7}
 80047d6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80047d8:	4b03      	ldr	r3, [pc, #12]	; (80047e8 <HAL_RCC_GetHCLKFreq+0x14>)
 80047da:	681b      	ldr	r3, [r3, #0]
}
 80047dc:	4618      	mov	r0, r3
 80047de:	46bd      	mov	sp, r7
 80047e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e4:	4770      	bx	lr
 80047e6:	bf00      	nop
 80047e8:	20000000 	.word	0x20000000

080047ec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80047ec:	b580      	push	{r7, lr}
 80047ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80047f0:	f7ff fff0 	bl	80047d4 <HAL_RCC_GetHCLKFreq>
 80047f4:	4602      	mov	r2, r0
 80047f6:	4b06      	ldr	r3, [pc, #24]	; (8004810 <HAL_RCC_GetPCLK1Freq+0x24>)
 80047f8:	689b      	ldr	r3, [r3, #8]
 80047fa:	0a1b      	lsrs	r3, r3, #8
 80047fc:	f003 0307 	and.w	r3, r3, #7
 8004800:	4904      	ldr	r1, [pc, #16]	; (8004814 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004802:	5ccb      	ldrb	r3, [r1, r3]
 8004804:	f003 031f 	and.w	r3, r3, #31
 8004808:	fa22 f303 	lsr.w	r3, r2, r3
}
 800480c:	4618      	mov	r0, r3
 800480e:	bd80      	pop	{r7, pc}
 8004810:	40021000 	.word	0x40021000
 8004814:	0800abfc 	.word	0x0800abfc

08004818 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004818:	b580      	push	{r7, lr}
 800481a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800481c:	f7ff ffda 	bl	80047d4 <HAL_RCC_GetHCLKFreq>
 8004820:	4602      	mov	r2, r0
 8004822:	4b06      	ldr	r3, [pc, #24]	; (800483c <HAL_RCC_GetPCLK2Freq+0x24>)
 8004824:	689b      	ldr	r3, [r3, #8]
 8004826:	0adb      	lsrs	r3, r3, #11
 8004828:	f003 0307 	and.w	r3, r3, #7
 800482c:	4904      	ldr	r1, [pc, #16]	; (8004840 <HAL_RCC_GetPCLK2Freq+0x28>)
 800482e:	5ccb      	ldrb	r3, [r1, r3]
 8004830:	f003 031f 	and.w	r3, r3, #31
 8004834:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004838:	4618      	mov	r0, r3
 800483a:	bd80      	pop	{r7, pc}
 800483c:	40021000 	.word	0x40021000
 8004840:	0800abfc 	.word	0x0800abfc

08004844 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8004844:	b480      	push	{r7}
 8004846:	b087      	sub	sp, #28
 8004848:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800484a:	4b1e      	ldr	r3, [pc, #120]	; (80048c4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800484c:	68db      	ldr	r3, [r3, #12]
 800484e:	f003 0303 	and.w	r3, r3, #3
 8004852:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004854:	4b1b      	ldr	r3, [pc, #108]	; (80048c4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004856:	68db      	ldr	r3, [r3, #12]
 8004858:	091b      	lsrs	r3, r3, #4
 800485a:	f003 030f 	and.w	r3, r3, #15
 800485e:	3301      	adds	r3, #1
 8004860:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8004862:	693b      	ldr	r3, [r7, #16]
 8004864:	2b03      	cmp	r3, #3
 8004866:	d10c      	bne.n	8004882 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004868:	4a17      	ldr	r2, [pc, #92]	; (80048c8 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004870:	4a14      	ldr	r2, [pc, #80]	; (80048c4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004872:	68d2      	ldr	r2, [r2, #12]
 8004874:	0a12      	lsrs	r2, r2, #8
 8004876:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800487a:	fb02 f303 	mul.w	r3, r2, r3
 800487e:	617b      	str	r3, [r7, #20]
    break;
 8004880:	e00c      	b.n	800489c <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004882:	4a12      	ldr	r2, [pc, #72]	; (80048cc <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	fbb2 f3f3 	udiv	r3, r2, r3
 800488a:	4a0e      	ldr	r2, [pc, #56]	; (80048c4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800488c:	68d2      	ldr	r2, [r2, #12]
 800488e:	0a12      	lsrs	r2, r2, #8
 8004890:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004894:	fb02 f303 	mul.w	r3, r2, r3
 8004898:	617b      	str	r3, [r7, #20]
    break;
 800489a:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800489c:	4b09      	ldr	r3, [pc, #36]	; (80048c4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800489e:	68db      	ldr	r3, [r3, #12]
 80048a0:	0e5b      	lsrs	r3, r3, #25
 80048a2:	f003 0303 	and.w	r3, r3, #3
 80048a6:	3301      	adds	r3, #1
 80048a8:	005b      	lsls	r3, r3, #1
 80048aa:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80048ac:	697a      	ldr	r2, [r7, #20]
 80048ae:	68bb      	ldr	r3, [r7, #8]
 80048b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80048b4:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80048b6:	687b      	ldr	r3, [r7, #4]
}
 80048b8:	4618      	mov	r0, r3
 80048ba:	371c      	adds	r7, #28
 80048bc:	46bd      	mov	sp, r7
 80048be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c2:	4770      	bx	lr
 80048c4:	40021000 	.word	0x40021000
 80048c8:	007a1200 	.word	0x007a1200
 80048cc:	00f42400 	.word	0x00f42400

080048d0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80048d0:	b580      	push	{r7, lr}
 80048d2:	b086      	sub	sp, #24
 80048d4:	af00      	add	r7, sp, #0
 80048d6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80048d8:	2300      	movs	r3, #0
 80048da:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80048dc:	2300      	movs	r3, #0
 80048de:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	f000 8098 	beq.w	8004a1e <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80048ee:	2300      	movs	r3, #0
 80048f0:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80048f2:	4b43      	ldr	r3, [pc, #268]	; (8004a00 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80048f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d10d      	bne.n	800491a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80048fe:	4b40      	ldr	r3, [pc, #256]	; (8004a00 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004900:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004902:	4a3f      	ldr	r2, [pc, #252]	; (8004a00 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004904:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004908:	6593      	str	r3, [r2, #88]	; 0x58
 800490a:	4b3d      	ldr	r3, [pc, #244]	; (8004a00 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800490c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800490e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004912:	60bb      	str	r3, [r7, #8]
 8004914:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004916:	2301      	movs	r3, #1
 8004918:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800491a:	4b3a      	ldr	r3, [pc, #232]	; (8004a04 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	4a39      	ldr	r2, [pc, #228]	; (8004a04 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004920:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004924:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004926:	f7fc fb9b 	bl	8001060 <HAL_GetTick>
 800492a:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800492c:	e009      	b.n	8004942 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800492e:	f7fc fb97 	bl	8001060 <HAL_GetTick>
 8004932:	4602      	mov	r2, r0
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	1ad3      	subs	r3, r2, r3
 8004938:	2b02      	cmp	r3, #2
 800493a:	d902      	bls.n	8004942 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 800493c:	2303      	movs	r3, #3
 800493e:	74fb      	strb	r3, [r7, #19]
        break;
 8004940:	e005      	b.n	800494e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004942:	4b30      	ldr	r3, [pc, #192]	; (8004a04 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800494a:	2b00      	cmp	r3, #0
 800494c:	d0ef      	beq.n	800492e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800494e:	7cfb      	ldrb	r3, [r7, #19]
 8004950:	2b00      	cmp	r3, #0
 8004952:	d159      	bne.n	8004a08 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004954:	4b2a      	ldr	r3, [pc, #168]	; (8004a00 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004956:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800495a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800495e:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004960:	697b      	ldr	r3, [r7, #20]
 8004962:	2b00      	cmp	r3, #0
 8004964:	d01e      	beq.n	80049a4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800496a:	697a      	ldr	r2, [r7, #20]
 800496c:	429a      	cmp	r2, r3
 800496e:	d019      	beq.n	80049a4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004970:	4b23      	ldr	r3, [pc, #140]	; (8004a00 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004972:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004976:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800497a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800497c:	4b20      	ldr	r3, [pc, #128]	; (8004a00 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800497e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004982:	4a1f      	ldr	r2, [pc, #124]	; (8004a00 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004984:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004988:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800498c:	4b1c      	ldr	r3, [pc, #112]	; (8004a00 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800498e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004992:	4a1b      	ldr	r2, [pc, #108]	; (8004a00 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004994:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004998:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800499c:	4a18      	ldr	r2, [pc, #96]	; (8004a00 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800499e:	697b      	ldr	r3, [r7, #20]
 80049a0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80049a4:	697b      	ldr	r3, [r7, #20]
 80049a6:	f003 0301 	and.w	r3, r3, #1
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d016      	beq.n	80049dc <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049ae:	f7fc fb57 	bl	8001060 <HAL_GetTick>
 80049b2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80049b4:	e00b      	b.n	80049ce <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80049b6:	f7fc fb53 	bl	8001060 <HAL_GetTick>
 80049ba:	4602      	mov	r2, r0
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	1ad3      	subs	r3, r2, r3
 80049c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80049c4:	4293      	cmp	r3, r2
 80049c6:	d902      	bls.n	80049ce <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80049c8:	2303      	movs	r3, #3
 80049ca:	74fb      	strb	r3, [r7, #19]
            break;
 80049cc:	e006      	b.n	80049dc <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80049ce:	4b0c      	ldr	r3, [pc, #48]	; (8004a00 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80049d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049d4:	f003 0302 	and.w	r3, r3, #2
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d0ec      	beq.n	80049b6 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80049dc:	7cfb      	ldrb	r3, [r7, #19]
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d10b      	bne.n	80049fa <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80049e2:	4b07      	ldr	r3, [pc, #28]	; (8004a00 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80049e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049e8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049f0:	4903      	ldr	r1, [pc, #12]	; (8004a00 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80049f2:	4313      	orrs	r3, r2
 80049f4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80049f8:	e008      	b.n	8004a0c <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80049fa:	7cfb      	ldrb	r3, [r7, #19]
 80049fc:	74bb      	strb	r3, [r7, #18]
 80049fe:	e005      	b.n	8004a0c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8004a00:	40021000 	.word	0x40021000
 8004a04:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a08:	7cfb      	ldrb	r3, [r7, #19]
 8004a0a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004a0c:	7c7b      	ldrb	r3, [r7, #17]
 8004a0e:	2b01      	cmp	r3, #1
 8004a10:	d105      	bne.n	8004a1e <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004a12:	4ba6      	ldr	r3, [pc, #664]	; (8004cac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004a14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a16:	4aa5      	ldr	r2, [pc, #660]	; (8004cac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004a18:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004a1c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	f003 0301 	and.w	r3, r3, #1
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d00a      	beq.n	8004a40 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004a2a:	4ba0      	ldr	r3, [pc, #640]	; (8004cac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004a2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a30:	f023 0203 	bic.w	r2, r3, #3
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	685b      	ldr	r3, [r3, #4]
 8004a38:	499c      	ldr	r1, [pc, #624]	; (8004cac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004a3a:	4313      	orrs	r3, r2
 8004a3c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	f003 0302 	and.w	r3, r3, #2
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d00a      	beq.n	8004a62 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004a4c:	4b97      	ldr	r3, [pc, #604]	; (8004cac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004a4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a52:	f023 020c 	bic.w	r2, r3, #12
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	689b      	ldr	r3, [r3, #8]
 8004a5a:	4994      	ldr	r1, [pc, #592]	; (8004cac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004a5c:	4313      	orrs	r3, r2
 8004a5e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	f003 0304 	and.w	r3, r3, #4
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d00a      	beq.n	8004a84 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004a6e:	4b8f      	ldr	r3, [pc, #572]	; (8004cac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004a70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a74:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	68db      	ldr	r3, [r3, #12]
 8004a7c:	498b      	ldr	r1, [pc, #556]	; (8004cac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004a7e:	4313      	orrs	r3, r2
 8004a80:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	f003 0308 	and.w	r3, r3, #8
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d00a      	beq.n	8004aa6 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004a90:	4b86      	ldr	r3, [pc, #536]	; (8004cac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004a92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a96:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	691b      	ldr	r3, [r3, #16]
 8004a9e:	4983      	ldr	r1, [pc, #524]	; (8004cac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004aa0:	4313      	orrs	r3, r2
 8004aa2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	f003 0320 	and.w	r3, r3, #32
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d00a      	beq.n	8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004ab2:	4b7e      	ldr	r3, [pc, #504]	; (8004cac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004ab4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ab8:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	695b      	ldr	r3, [r3, #20]
 8004ac0:	497a      	ldr	r1, [pc, #488]	; (8004cac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004ac2:	4313      	orrs	r3, r2
 8004ac4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d00a      	beq.n	8004aea <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004ad4:	4b75      	ldr	r3, [pc, #468]	; (8004cac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004ad6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ada:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	699b      	ldr	r3, [r3, #24]
 8004ae2:	4972      	ldr	r1, [pc, #456]	; (8004cac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004ae4:	4313      	orrs	r3, r2
 8004ae6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d00a      	beq.n	8004b0c <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004af6:	4b6d      	ldr	r3, [pc, #436]	; (8004cac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004af8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004afc:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	69db      	ldr	r3, [r3, #28]
 8004b04:	4969      	ldr	r1, [pc, #420]	; (8004cac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004b06:	4313      	orrs	r3, r2
 8004b08:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d00a      	beq.n	8004b2e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004b18:	4b64      	ldr	r3, [pc, #400]	; (8004cac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004b1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b1e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	6a1b      	ldr	r3, [r3, #32]
 8004b26:	4961      	ldr	r1, [pc, #388]	; (8004cac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004b28:	4313      	orrs	r3, r2
 8004b2a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d00a      	beq.n	8004b50 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004b3a:	4b5c      	ldr	r3, [pc, #368]	; (8004cac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004b3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b40:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b48:	4958      	ldr	r1, [pc, #352]	; (8004cac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004b4a:	4313      	orrs	r3, r2
 8004b4c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d015      	beq.n	8004b88 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004b5c:	4b53      	ldr	r3, [pc, #332]	; (8004cac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004b5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b62:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b6a:	4950      	ldr	r1, [pc, #320]	; (8004cac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004b6c:	4313      	orrs	r3, r2
 8004b6e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b76:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004b7a:	d105      	bne.n	8004b88 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004b7c:	4b4b      	ldr	r3, [pc, #300]	; (8004cac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004b7e:	68db      	ldr	r3, [r3, #12]
 8004b80:	4a4a      	ldr	r2, [pc, #296]	; (8004cac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004b82:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004b86:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d015      	beq.n	8004bc0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004b94:	4b45      	ldr	r3, [pc, #276]	; (8004cac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004b96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b9a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ba2:	4942      	ldr	r1, [pc, #264]	; (8004cac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004ba4:	4313      	orrs	r3, r2
 8004ba6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bae:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004bb2:	d105      	bne.n	8004bc0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004bb4:	4b3d      	ldr	r3, [pc, #244]	; (8004cac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004bb6:	68db      	ldr	r3, [r3, #12]
 8004bb8:	4a3c      	ldr	r2, [pc, #240]	; (8004cac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004bba:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004bbe:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d015      	beq.n	8004bf8 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004bcc:	4b37      	ldr	r3, [pc, #220]	; (8004cac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004bce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bd2:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bda:	4934      	ldr	r1, [pc, #208]	; (8004cac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004bdc:	4313      	orrs	r3, r2
 8004bde:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004be6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004bea:	d105      	bne.n	8004bf8 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004bec:	4b2f      	ldr	r3, [pc, #188]	; (8004cac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004bee:	68db      	ldr	r3, [r3, #12]
 8004bf0:	4a2e      	ldr	r2, [pc, #184]	; (8004cac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004bf2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004bf6:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d015      	beq.n	8004c30 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004c04:	4b29      	ldr	r3, [pc, #164]	; (8004cac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004c06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c0a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c12:	4926      	ldr	r1, [pc, #152]	; (8004cac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004c14:	4313      	orrs	r3, r2
 8004c16:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c1e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004c22:	d105      	bne.n	8004c30 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004c24:	4b21      	ldr	r3, [pc, #132]	; (8004cac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004c26:	68db      	ldr	r3, [r3, #12]
 8004c28:	4a20      	ldr	r2, [pc, #128]	; (8004cac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004c2a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004c2e:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d015      	beq.n	8004c68 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004c3c:	4b1b      	ldr	r3, [pc, #108]	; (8004cac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004c3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c42:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c4a:	4918      	ldr	r1, [pc, #96]	; (8004cac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004c4c:	4313      	orrs	r3, r2
 8004c4e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c56:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004c5a:	d105      	bne.n	8004c68 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004c5c:	4b13      	ldr	r3, [pc, #76]	; (8004cac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004c5e:	68db      	ldr	r3, [r3, #12]
 8004c60:	4a12      	ldr	r2, [pc, #72]	; (8004cac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004c62:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004c66:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d015      	beq.n	8004ca0 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004c74:	4b0d      	ldr	r3, [pc, #52]	; (8004cac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004c76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c7a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c82:	490a      	ldr	r1, [pc, #40]	; (8004cac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004c84:	4313      	orrs	r3, r2
 8004c86:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c8e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004c92:	d105      	bne.n	8004ca0 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004c94:	4b05      	ldr	r3, [pc, #20]	; (8004cac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004c96:	68db      	ldr	r3, [r3, #12]
 8004c98:	4a04      	ldr	r2, [pc, #16]	; (8004cac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004c9a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004c9e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8004ca0:	7cbb      	ldrb	r3, [r7, #18]
}
 8004ca2:	4618      	mov	r0, r3
 8004ca4:	3718      	adds	r7, #24
 8004ca6:	46bd      	mov	sp, r7
 8004ca8:	bd80      	pop	{r7, pc}
 8004caa:	bf00      	nop
 8004cac:	40021000 	.word	0x40021000

08004cb0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004cb0:	b580      	push	{r7, lr}
 8004cb2:	b082      	sub	sp, #8
 8004cb4:	af00      	add	r7, sp, #0
 8004cb6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d101      	bne.n	8004cc2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004cbe:	2301      	movs	r3, #1
 8004cc0:	e042      	b.n	8004d48 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d106      	bne.n	8004cda <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	2200      	movs	r2, #0
 8004cd0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004cd4:	6878      	ldr	r0, [r7, #4]
 8004cd6:	f7fc f857 	bl	8000d88 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	2224      	movs	r2, #36	; 0x24
 8004cde:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	681a      	ldr	r2, [r3, #0]
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	f022 0201 	bic.w	r2, r2, #1
 8004cf0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004cf2:	6878      	ldr	r0, [r7, #4]
 8004cf4:	f000 f8c2 	bl	8004e7c <UART_SetConfig>
 8004cf8:	4603      	mov	r3, r0
 8004cfa:	2b01      	cmp	r3, #1
 8004cfc:	d101      	bne.n	8004d02 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8004cfe:	2301      	movs	r3, #1
 8004d00:	e022      	b.n	8004d48 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d002      	beq.n	8004d10 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8004d0a:	6878      	ldr	r0, [r7, #4]
 8004d0c:	f000 fb82 	bl	8005414 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	685a      	ldr	r2, [r3, #4]
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004d1e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	689a      	ldr	r2, [r3, #8]
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004d2e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	681a      	ldr	r2, [r3, #0]
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	f042 0201 	orr.w	r2, r2, #1
 8004d3e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004d40:	6878      	ldr	r0, [r7, #4]
 8004d42:	f000 fc09 	bl	8005558 <UART_CheckIdleState>
 8004d46:	4603      	mov	r3, r0
}
 8004d48:	4618      	mov	r0, r3
 8004d4a:	3708      	adds	r7, #8
 8004d4c:	46bd      	mov	sp, r7
 8004d4e:	bd80      	pop	{r7, pc}

08004d50 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004d50:	b580      	push	{r7, lr}
 8004d52:	b08a      	sub	sp, #40	; 0x28
 8004d54:	af02      	add	r7, sp, #8
 8004d56:	60f8      	str	r0, [r7, #12]
 8004d58:	60b9      	str	r1, [r7, #8]
 8004d5a:	603b      	str	r3, [r7, #0]
 8004d5c:	4613      	mov	r3, r2
 8004d5e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004d66:	2b20      	cmp	r3, #32
 8004d68:	f040 8083 	bne.w	8004e72 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8004d6c:	68bb      	ldr	r3, [r7, #8]
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d002      	beq.n	8004d78 <HAL_UART_Transmit+0x28>
 8004d72:	88fb      	ldrh	r3, [r7, #6]
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d101      	bne.n	8004d7c <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8004d78:	2301      	movs	r3, #1
 8004d7a:	e07b      	b.n	8004e74 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004d82:	2b01      	cmp	r3, #1
 8004d84:	d101      	bne.n	8004d8a <HAL_UART_Transmit+0x3a>
 8004d86:	2302      	movs	r3, #2
 8004d88:	e074      	b.n	8004e74 <HAL_UART_Transmit+0x124>
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	2201      	movs	r2, #1
 8004d8e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	2200      	movs	r2, #0
 8004d96:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	2221      	movs	r2, #33	; 0x21
 8004d9e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004da2:	f7fc f95d 	bl	8001060 <HAL_GetTick>
 8004da6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	88fa      	ldrh	r2, [r7, #6]
 8004dac:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	88fa      	ldrh	r2, [r7, #6]
 8004db4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	689b      	ldr	r3, [r3, #8]
 8004dbc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004dc0:	d108      	bne.n	8004dd4 <HAL_UART_Transmit+0x84>
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	691b      	ldr	r3, [r3, #16]
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d104      	bne.n	8004dd4 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8004dca:	2300      	movs	r3, #0
 8004dcc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004dce:	68bb      	ldr	r3, [r7, #8]
 8004dd0:	61bb      	str	r3, [r7, #24]
 8004dd2:	e003      	b.n	8004ddc <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8004dd4:	68bb      	ldr	r3, [r7, #8]
 8004dd6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004dd8:	2300      	movs	r3, #0
 8004dda:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	2200      	movs	r2, #0
 8004de0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8004de4:	e02c      	b.n	8004e40 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004de6:	683b      	ldr	r3, [r7, #0]
 8004de8:	9300      	str	r3, [sp, #0]
 8004dea:	697b      	ldr	r3, [r7, #20]
 8004dec:	2200      	movs	r2, #0
 8004dee:	2180      	movs	r1, #128	; 0x80
 8004df0:	68f8      	ldr	r0, [r7, #12]
 8004df2:	f000 fbfc 	bl	80055ee <UART_WaitOnFlagUntilTimeout>
 8004df6:	4603      	mov	r3, r0
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d001      	beq.n	8004e00 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8004dfc:	2303      	movs	r3, #3
 8004dfe:	e039      	b.n	8004e74 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8004e00:	69fb      	ldr	r3, [r7, #28]
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d10b      	bne.n	8004e1e <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004e06:	69bb      	ldr	r3, [r7, #24]
 8004e08:	881b      	ldrh	r3, [r3, #0]
 8004e0a:	461a      	mov	r2, r3
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004e14:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004e16:	69bb      	ldr	r3, [r7, #24]
 8004e18:	3302      	adds	r3, #2
 8004e1a:	61bb      	str	r3, [r7, #24]
 8004e1c:	e007      	b.n	8004e2e <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004e1e:	69fb      	ldr	r3, [r7, #28]
 8004e20:	781a      	ldrb	r2, [r3, #0]
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004e28:	69fb      	ldr	r3, [r7, #28]
 8004e2a:	3301      	adds	r3, #1
 8004e2c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8004e34:	b29b      	uxth	r3, r3
 8004e36:	3b01      	subs	r3, #1
 8004e38:	b29a      	uxth	r2, r3
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8004e46:	b29b      	uxth	r3, r3
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d1cc      	bne.n	8004de6 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004e4c:	683b      	ldr	r3, [r7, #0]
 8004e4e:	9300      	str	r3, [sp, #0]
 8004e50:	697b      	ldr	r3, [r7, #20]
 8004e52:	2200      	movs	r2, #0
 8004e54:	2140      	movs	r1, #64	; 0x40
 8004e56:	68f8      	ldr	r0, [r7, #12]
 8004e58:	f000 fbc9 	bl	80055ee <UART_WaitOnFlagUntilTimeout>
 8004e5c:	4603      	mov	r3, r0
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d001      	beq.n	8004e66 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8004e62:	2303      	movs	r3, #3
 8004e64:	e006      	b.n	8004e74 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	2220      	movs	r2, #32
 8004e6a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8004e6e:	2300      	movs	r3, #0
 8004e70:	e000      	b.n	8004e74 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8004e72:	2302      	movs	r3, #2
  }
}
 8004e74:	4618      	mov	r0, r3
 8004e76:	3720      	adds	r7, #32
 8004e78:	46bd      	mov	sp, r7
 8004e7a:	bd80      	pop	{r7, pc}

08004e7c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004e7c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004e80:	b08c      	sub	sp, #48	; 0x30
 8004e82:	af00      	add	r7, sp, #0
 8004e84:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004e86:	2300      	movs	r3, #0
 8004e88:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004e8c:	697b      	ldr	r3, [r7, #20]
 8004e8e:	689a      	ldr	r2, [r3, #8]
 8004e90:	697b      	ldr	r3, [r7, #20]
 8004e92:	691b      	ldr	r3, [r3, #16]
 8004e94:	431a      	orrs	r2, r3
 8004e96:	697b      	ldr	r3, [r7, #20]
 8004e98:	695b      	ldr	r3, [r3, #20]
 8004e9a:	431a      	orrs	r2, r3
 8004e9c:	697b      	ldr	r3, [r7, #20]
 8004e9e:	69db      	ldr	r3, [r3, #28]
 8004ea0:	4313      	orrs	r3, r2
 8004ea2:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004ea4:	697b      	ldr	r3, [r7, #20]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	681a      	ldr	r2, [r3, #0]
 8004eaa:	4bab      	ldr	r3, [pc, #684]	; (8005158 <UART_SetConfig+0x2dc>)
 8004eac:	4013      	ands	r3, r2
 8004eae:	697a      	ldr	r2, [r7, #20]
 8004eb0:	6812      	ldr	r2, [r2, #0]
 8004eb2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004eb4:	430b      	orrs	r3, r1
 8004eb6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004eb8:	697b      	ldr	r3, [r7, #20]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	685b      	ldr	r3, [r3, #4]
 8004ebe:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004ec2:	697b      	ldr	r3, [r7, #20]
 8004ec4:	68da      	ldr	r2, [r3, #12]
 8004ec6:	697b      	ldr	r3, [r7, #20]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	430a      	orrs	r2, r1
 8004ecc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004ece:	697b      	ldr	r3, [r7, #20]
 8004ed0:	699b      	ldr	r3, [r3, #24]
 8004ed2:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004ed4:	697b      	ldr	r3, [r7, #20]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	4aa0      	ldr	r2, [pc, #640]	; (800515c <UART_SetConfig+0x2e0>)
 8004eda:	4293      	cmp	r3, r2
 8004edc:	d004      	beq.n	8004ee8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004ede:	697b      	ldr	r3, [r7, #20]
 8004ee0:	6a1b      	ldr	r3, [r3, #32]
 8004ee2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004ee4:	4313      	orrs	r3, r2
 8004ee6:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004ee8:	697b      	ldr	r3, [r7, #20]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	689b      	ldr	r3, [r3, #8]
 8004eee:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8004ef2:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8004ef6:	697a      	ldr	r2, [r7, #20]
 8004ef8:	6812      	ldr	r2, [r2, #0]
 8004efa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004efc:	430b      	orrs	r3, r1
 8004efe:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004f00:	697b      	ldr	r3, [r7, #20]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f06:	f023 010f 	bic.w	r1, r3, #15
 8004f0a:	697b      	ldr	r3, [r7, #20]
 8004f0c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004f0e:	697b      	ldr	r3, [r7, #20]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	430a      	orrs	r2, r1
 8004f14:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004f16:	697b      	ldr	r3, [r7, #20]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	4a91      	ldr	r2, [pc, #580]	; (8005160 <UART_SetConfig+0x2e4>)
 8004f1c:	4293      	cmp	r3, r2
 8004f1e:	d125      	bne.n	8004f6c <UART_SetConfig+0xf0>
 8004f20:	4b90      	ldr	r3, [pc, #576]	; (8005164 <UART_SetConfig+0x2e8>)
 8004f22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f26:	f003 0303 	and.w	r3, r3, #3
 8004f2a:	2b03      	cmp	r3, #3
 8004f2c:	d81a      	bhi.n	8004f64 <UART_SetConfig+0xe8>
 8004f2e:	a201      	add	r2, pc, #4	; (adr r2, 8004f34 <UART_SetConfig+0xb8>)
 8004f30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f34:	08004f45 	.word	0x08004f45
 8004f38:	08004f55 	.word	0x08004f55
 8004f3c:	08004f4d 	.word	0x08004f4d
 8004f40:	08004f5d 	.word	0x08004f5d
 8004f44:	2301      	movs	r3, #1
 8004f46:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004f4a:	e0d6      	b.n	80050fa <UART_SetConfig+0x27e>
 8004f4c:	2302      	movs	r3, #2
 8004f4e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004f52:	e0d2      	b.n	80050fa <UART_SetConfig+0x27e>
 8004f54:	2304      	movs	r3, #4
 8004f56:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004f5a:	e0ce      	b.n	80050fa <UART_SetConfig+0x27e>
 8004f5c:	2308      	movs	r3, #8
 8004f5e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004f62:	e0ca      	b.n	80050fa <UART_SetConfig+0x27e>
 8004f64:	2310      	movs	r3, #16
 8004f66:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004f6a:	e0c6      	b.n	80050fa <UART_SetConfig+0x27e>
 8004f6c:	697b      	ldr	r3, [r7, #20]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	4a7d      	ldr	r2, [pc, #500]	; (8005168 <UART_SetConfig+0x2ec>)
 8004f72:	4293      	cmp	r3, r2
 8004f74:	d138      	bne.n	8004fe8 <UART_SetConfig+0x16c>
 8004f76:	4b7b      	ldr	r3, [pc, #492]	; (8005164 <UART_SetConfig+0x2e8>)
 8004f78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f7c:	f003 030c 	and.w	r3, r3, #12
 8004f80:	2b0c      	cmp	r3, #12
 8004f82:	d82d      	bhi.n	8004fe0 <UART_SetConfig+0x164>
 8004f84:	a201      	add	r2, pc, #4	; (adr r2, 8004f8c <UART_SetConfig+0x110>)
 8004f86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f8a:	bf00      	nop
 8004f8c:	08004fc1 	.word	0x08004fc1
 8004f90:	08004fe1 	.word	0x08004fe1
 8004f94:	08004fe1 	.word	0x08004fe1
 8004f98:	08004fe1 	.word	0x08004fe1
 8004f9c:	08004fd1 	.word	0x08004fd1
 8004fa0:	08004fe1 	.word	0x08004fe1
 8004fa4:	08004fe1 	.word	0x08004fe1
 8004fa8:	08004fe1 	.word	0x08004fe1
 8004fac:	08004fc9 	.word	0x08004fc9
 8004fb0:	08004fe1 	.word	0x08004fe1
 8004fb4:	08004fe1 	.word	0x08004fe1
 8004fb8:	08004fe1 	.word	0x08004fe1
 8004fbc:	08004fd9 	.word	0x08004fd9
 8004fc0:	2300      	movs	r3, #0
 8004fc2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004fc6:	e098      	b.n	80050fa <UART_SetConfig+0x27e>
 8004fc8:	2302      	movs	r3, #2
 8004fca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004fce:	e094      	b.n	80050fa <UART_SetConfig+0x27e>
 8004fd0:	2304      	movs	r3, #4
 8004fd2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004fd6:	e090      	b.n	80050fa <UART_SetConfig+0x27e>
 8004fd8:	2308      	movs	r3, #8
 8004fda:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004fde:	e08c      	b.n	80050fa <UART_SetConfig+0x27e>
 8004fe0:	2310      	movs	r3, #16
 8004fe2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004fe6:	e088      	b.n	80050fa <UART_SetConfig+0x27e>
 8004fe8:	697b      	ldr	r3, [r7, #20]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	4a5f      	ldr	r2, [pc, #380]	; (800516c <UART_SetConfig+0x2f0>)
 8004fee:	4293      	cmp	r3, r2
 8004ff0:	d125      	bne.n	800503e <UART_SetConfig+0x1c2>
 8004ff2:	4b5c      	ldr	r3, [pc, #368]	; (8005164 <UART_SetConfig+0x2e8>)
 8004ff4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ff8:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004ffc:	2b30      	cmp	r3, #48	; 0x30
 8004ffe:	d016      	beq.n	800502e <UART_SetConfig+0x1b2>
 8005000:	2b30      	cmp	r3, #48	; 0x30
 8005002:	d818      	bhi.n	8005036 <UART_SetConfig+0x1ba>
 8005004:	2b20      	cmp	r3, #32
 8005006:	d00a      	beq.n	800501e <UART_SetConfig+0x1a2>
 8005008:	2b20      	cmp	r3, #32
 800500a:	d814      	bhi.n	8005036 <UART_SetConfig+0x1ba>
 800500c:	2b00      	cmp	r3, #0
 800500e:	d002      	beq.n	8005016 <UART_SetConfig+0x19a>
 8005010:	2b10      	cmp	r3, #16
 8005012:	d008      	beq.n	8005026 <UART_SetConfig+0x1aa>
 8005014:	e00f      	b.n	8005036 <UART_SetConfig+0x1ba>
 8005016:	2300      	movs	r3, #0
 8005018:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800501c:	e06d      	b.n	80050fa <UART_SetConfig+0x27e>
 800501e:	2302      	movs	r3, #2
 8005020:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005024:	e069      	b.n	80050fa <UART_SetConfig+0x27e>
 8005026:	2304      	movs	r3, #4
 8005028:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800502c:	e065      	b.n	80050fa <UART_SetConfig+0x27e>
 800502e:	2308      	movs	r3, #8
 8005030:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005034:	e061      	b.n	80050fa <UART_SetConfig+0x27e>
 8005036:	2310      	movs	r3, #16
 8005038:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800503c:	e05d      	b.n	80050fa <UART_SetConfig+0x27e>
 800503e:	697b      	ldr	r3, [r7, #20]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	4a4b      	ldr	r2, [pc, #300]	; (8005170 <UART_SetConfig+0x2f4>)
 8005044:	4293      	cmp	r3, r2
 8005046:	d125      	bne.n	8005094 <UART_SetConfig+0x218>
 8005048:	4b46      	ldr	r3, [pc, #280]	; (8005164 <UART_SetConfig+0x2e8>)
 800504a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800504e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005052:	2bc0      	cmp	r3, #192	; 0xc0
 8005054:	d016      	beq.n	8005084 <UART_SetConfig+0x208>
 8005056:	2bc0      	cmp	r3, #192	; 0xc0
 8005058:	d818      	bhi.n	800508c <UART_SetConfig+0x210>
 800505a:	2b80      	cmp	r3, #128	; 0x80
 800505c:	d00a      	beq.n	8005074 <UART_SetConfig+0x1f8>
 800505e:	2b80      	cmp	r3, #128	; 0x80
 8005060:	d814      	bhi.n	800508c <UART_SetConfig+0x210>
 8005062:	2b00      	cmp	r3, #0
 8005064:	d002      	beq.n	800506c <UART_SetConfig+0x1f0>
 8005066:	2b40      	cmp	r3, #64	; 0x40
 8005068:	d008      	beq.n	800507c <UART_SetConfig+0x200>
 800506a:	e00f      	b.n	800508c <UART_SetConfig+0x210>
 800506c:	2300      	movs	r3, #0
 800506e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005072:	e042      	b.n	80050fa <UART_SetConfig+0x27e>
 8005074:	2302      	movs	r3, #2
 8005076:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800507a:	e03e      	b.n	80050fa <UART_SetConfig+0x27e>
 800507c:	2304      	movs	r3, #4
 800507e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005082:	e03a      	b.n	80050fa <UART_SetConfig+0x27e>
 8005084:	2308      	movs	r3, #8
 8005086:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800508a:	e036      	b.n	80050fa <UART_SetConfig+0x27e>
 800508c:	2310      	movs	r3, #16
 800508e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005092:	e032      	b.n	80050fa <UART_SetConfig+0x27e>
 8005094:	697b      	ldr	r3, [r7, #20]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	4a30      	ldr	r2, [pc, #192]	; (800515c <UART_SetConfig+0x2e0>)
 800509a:	4293      	cmp	r3, r2
 800509c:	d12a      	bne.n	80050f4 <UART_SetConfig+0x278>
 800509e:	4b31      	ldr	r3, [pc, #196]	; (8005164 <UART_SetConfig+0x2e8>)
 80050a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050a4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80050a8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80050ac:	d01a      	beq.n	80050e4 <UART_SetConfig+0x268>
 80050ae:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80050b2:	d81b      	bhi.n	80050ec <UART_SetConfig+0x270>
 80050b4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80050b8:	d00c      	beq.n	80050d4 <UART_SetConfig+0x258>
 80050ba:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80050be:	d815      	bhi.n	80050ec <UART_SetConfig+0x270>
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d003      	beq.n	80050cc <UART_SetConfig+0x250>
 80050c4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80050c8:	d008      	beq.n	80050dc <UART_SetConfig+0x260>
 80050ca:	e00f      	b.n	80050ec <UART_SetConfig+0x270>
 80050cc:	2300      	movs	r3, #0
 80050ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80050d2:	e012      	b.n	80050fa <UART_SetConfig+0x27e>
 80050d4:	2302      	movs	r3, #2
 80050d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80050da:	e00e      	b.n	80050fa <UART_SetConfig+0x27e>
 80050dc:	2304      	movs	r3, #4
 80050de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80050e2:	e00a      	b.n	80050fa <UART_SetConfig+0x27e>
 80050e4:	2308      	movs	r3, #8
 80050e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80050ea:	e006      	b.n	80050fa <UART_SetConfig+0x27e>
 80050ec:	2310      	movs	r3, #16
 80050ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80050f2:	e002      	b.n	80050fa <UART_SetConfig+0x27e>
 80050f4:	2310      	movs	r3, #16
 80050f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80050fa:	697b      	ldr	r3, [r7, #20]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	4a17      	ldr	r2, [pc, #92]	; (800515c <UART_SetConfig+0x2e0>)
 8005100:	4293      	cmp	r3, r2
 8005102:	f040 80a8 	bne.w	8005256 <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005106:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800510a:	2b08      	cmp	r3, #8
 800510c:	d834      	bhi.n	8005178 <UART_SetConfig+0x2fc>
 800510e:	a201      	add	r2, pc, #4	; (adr r2, 8005114 <UART_SetConfig+0x298>)
 8005110:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005114:	08005139 	.word	0x08005139
 8005118:	08005179 	.word	0x08005179
 800511c:	08005141 	.word	0x08005141
 8005120:	08005179 	.word	0x08005179
 8005124:	08005147 	.word	0x08005147
 8005128:	08005179 	.word	0x08005179
 800512c:	08005179 	.word	0x08005179
 8005130:	08005179 	.word	0x08005179
 8005134:	0800514f 	.word	0x0800514f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005138:	f7ff fb58 	bl	80047ec <HAL_RCC_GetPCLK1Freq>
 800513c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800513e:	e021      	b.n	8005184 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005140:	4b0c      	ldr	r3, [pc, #48]	; (8005174 <UART_SetConfig+0x2f8>)
 8005142:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005144:	e01e      	b.n	8005184 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005146:	f7ff fae3 	bl	8004710 <HAL_RCC_GetSysClockFreq>
 800514a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800514c:	e01a      	b.n	8005184 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800514e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005152:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005154:	e016      	b.n	8005184 <UART_SetConfig+0x308>
 8005156:	bf00      	nop
 8005158:	cfff69f3 	.word	0xcfff69f3
 800515c:	40008000 	.word	0x40008000
 8005160:	40013800 	.word	0x40013800
 8005164:	40021000 	.word	0x40021000
 8005168:	40004400 	.word	0x40004400
 800516c:	40004800 	.word	0x40004800
 8005170:	40004c00 	.word	0x40004c00
 8005174:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8005178:	2300      	movs	r3, #0
 800517a:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800517c:	2301      	movs	r3, #1
 800517e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8005182:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005184:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005186:	2b00      	cmp	r3, #0
 8005188:	f000 812a 	beq.w	80053e0 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800518c:	697b      	ldr	r3, [r7, #20]
 800518e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005190:	4a9e      	ldr	r2, [pc, #632]	; (800540c <UART_SetConfig+0x590>)
 8005192:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005196:	461a      	mov	r2, r3
 8005198:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800519a:	fbb3 f3f2 	udiv	r3, r3, r2
 800519e:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80051a0:	697b      	ldr	r3, [r7, #20]
 80051a2:	685a      	ldr	r2, [r3, #4]
 80051a4:	4613      	mov	r3, r2
 80051a6:	005b      	lsls	r3, r3, #1
 80051a8:	4413      	add	r3, r2
 80051aa:	69ba      	ldr	r2, [r7, #24]
 80051ac:	429a      	cmp	r2, r3
 80051ae:	d305      	bcc.n	80051bc <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80051b0:	697b      	ldr	r3, [r7, #20]
 80051b2:	685b      	ldr	r3, [r3, #4]
 80051b4:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80051b6:	69ba      	ldr	r2, [r7, #24]
 80051b8:	429a      	cmp	r2, r3
 80051ba:	d903      	bls.n	80051c4 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 80051bc:	2301      	movs	r3, #1
 80051be:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80051c2:	e10d      	b.n	80053e0 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80051c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051c6:	2200      	movs	r2, #0
 80051c8:	60bb      	str	r3, [r7, #8]
 80051ca:	60fa      	str	r2, [r7, #12]
 80051cc:	697b      	ldr	r3, [r7, #20]
 80051ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051d0:	4a8e      	ldr	r2, [pc, #568]	; (800540c <UART_SetConfig+0x590>)
 80051d2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80051d6:	b29b      	uxth	r3, r3
 80051d8:	2200      	movs	r2, #0
 80051da:	603b      	str	r3, [r7, #0]
 80051dc:	607a      	str	r2, [r7, #4]
 80051de:	e9d7 2300 	ldrd	r2, r3, [r7]
 80051e2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80051e6:	f7fb f873 	bl	80002d0 <__aeabi_uldivmod>
 80051ea:	4602      	mov	r2, r0
 80051ec:	460b      	mov	r3, r1
 80051ee:	4610      	mov	r0, r2
 80051f0:	4619      	mov	r1, r3
 80051f2:	f04f 0200 	mov.w	r2, #0
 80051f6:	f04f 0300 	mov.w	r3, #0
 80051fa:	020b      	lsls	r3, r1, #8
 80051fc:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005200:	0202      	lsls	r2, r0, #8
 8005202:	6979      	ldr	r1, [r7, #20]
 8005204:	6849      	ldr	r1, [r1, #4]
 8005206:	0849      	lsrs	r1, r1, #1
 8005208:	2000      	movs	r0, #0
 800520a:	460c      	mov	r4, r1
 800520c:	4605      	mov	r5, r0
 800520e:	eb12 0804 	adds.w	r8, r2, r4
 8005212:	eb43 0905 	adc.w	r9, r3, r5
 8005216:	697b      	ldr	r3, [r7, #20]
 8005218:	685b      	ldr	r3, [r3, #4]
 800521a:	2200      	movs	r2, #0
 800521c:	469a      	mov	sl, r3
 800521e:	4693      	mov	fp, r2
 8005220:	4652      	mov	r2, sl
 8005222:	465b      	mov	r3, fp
 8005224:	4640      	mov	r0, r8
 8005226:	4649      	mov	r1, r9
 8005228:	f7fb f852 	bl	80002d0 <__aeabi_uldivmod>
 800522c:	4602      	mov	r2, r0
 800522e:	460b      	mov	r3, r1
 8005230:	4613      	mov	r3, r2
 8005232:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005234:	6a3b      	ldr	r3, [r7, #32]
 8005236:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800523a:	d308      	bcc.n	800524e <UART_SetConfig+0x3d2>
 800523c:	6a3b      	ldr	r3, [r7, #32]
 800523e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005242:	d204      	bcs.n	800524e <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 8005244:	697b      	ldr	r3, [r7, #20]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	6a3a      	ldr	r2, [r7, #32]
 800524a:	60da      	str	r2, [r3, #12]
 800524c:	e0c8      	b.n	80053e0 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 800524e:	2301      	movs	r3, #1
 8005250:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8005254:	e0c4      	b.n	80053e0 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005256:	697b      	ldr	r3, [r7, #20]
 8005258:	69db      	ldr	r3, [r3, #28]
 800525a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800525e:	d167      	bne.n	8005330 <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 8005260:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005264:	2b08      	cmp	r3, #8
 8005266:	d828      	bhi.n	80052ba <UART_SetConfig+0x43e>
 8005268:	a201      	add	r2, pc, #4	; (adr r2, 8005270 <UART_SetConfig+0x3f4>)
 800526a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800526e:	bf00      	nop
 8005270:	08005295 	.word	0x08005295
 8005274:	0800529d 	.word	0x0800529d
 8005278:	080052a5 	.word	0x080052a5
 800527c:	080052bb 	.word	0x080052bb
 8005280:	080052ab 	.word	0x080052ab
 8005284:	080052bb 	.word	0x080052bb
 8005288:	080052bb 	.word	0x080052bb
 800528c:	080052bb 	.word	0x080052bb
 8005290:	080052b3 	.word	0x080052b3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005294:	f7ff faaa 	bl	80047ec <HAL_RCC_GetPCLK1Freq>
 8005298:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800529a:	e014      	b.n	80052c6 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800529c:	f7ff fabc 	bl	8004818 <HAL_RCC_GetPCLK2Freq>
 80052a0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80052a2:	e010      	b.n	80052c6 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80052a4:	4b5a      	ldr	r3, [pc, #360]	; (8005410 <UART_SetConfig+0x594>)
 80052a6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80052a8:	e00d      	b.n	80052c6 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80052aa:	f7ff fa31 	bl	8004710 <HAL_RCC_GetSysClockFreq>
 80052ae:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80052b0:	e009      	b.n	80052c6 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80052b2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80052b6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80052b8:	e005      	b.n	80052c6 <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 80052ba:	2300      	movs	r3, #0
 80052bc:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80052be:	2301      	movs	r3, #1
 80052c0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80052c4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80052c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	f000 8089 	beq.w	80053e0 <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80052ce:	697b      	ldr	r3, [r7, #20]
 80052d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052d2:	4a4e      	ldr	r2, [pc, #312]	; (800540c <UART_SetConfig+0x590>)
 80052d4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80052d8:	461a      	mov	r2, r3
 80052da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052dc:	fbb3 f3f2 	udiv	r3, r3, r2
 80052e0:	005a      	lsls	r2, r3, #1
 80052e2:	697b      	ldr	r3, [r7, #20]
 80052e4:	685b      	ldr	r3, [r3, #4]
 80052e6:	085b      	lsrs	r3, r3, #1
 80052e8:	441a      	add	r2, r3
 80052ea:	697b      	ldr	r3, [r7, #20]
 80052ec:	685b      	ldr	r3, [r3, #4]
 80052ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80052f2:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80052f4:	6a3b      	ldr	r3, [r7, #32]
 80052f6:	2b0f      	cmp	r3, #15
 80052f8:	d916      	bls.n	8005328 <UART_SetConfig+0x4ac>
 80052fa:	6a3b      	ldr	r3, [r7, #32]
 80052fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005300:	d212      	bcs.n	8005328 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005302:	6a3b      	ldr	r3, [r7, #32]
 8005304:	b29b      	uxth	r3, r3
 8005306:	f023 030f 	bic.w	r3, r3, #15
 800530a:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800530c:	6a3b      	ldr	r3, [r7, #32]
 800530e:	085b      	lsrs	r3, r3, #1
 8005310:	b29b      	uxth	r3, r3
 8005312:	f003 0307 	and.w	r3, r3, #7
 8005316:	b29a      	uxth	r2, r3
 8005318:	8bfb      	ldrh	r3, [r7, #30]
 800531a:	4313      	orrs	r3, r2
 800531c:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800531e:	697b      	ldr	r3, [r7, #20]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	8bfa      	ldrh	r2, [r7, #30]
 8005324:	60da      	str	r2, [r3, #12]
 8005326:	e05b      	b.n	80053e0 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8005328:	2301      	movs	r3, #1
 800532a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800532e:	e057      	b.n	80053e0 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005330:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005334:	2b08      	cmp	r3, #8
 8005336:	d828      	bhi.n	800538a <UART_SetConfig+0x50e>
 8005338:	a201      	add	r2, pc, #4	; (adr r2, 8005340 <UART_SetConfig+0x4c4>)
 800533a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800533e:	bf00      	nop
 8005340:	08005365 	.word	0x08005365
 8005344:	0800536d 	.word	0x0800536d
 8005348:	08005375 	.word	0x08005375
 800534c:	0800538b 	.word	0x0800538b
 8005350:	0800537b 	.word	0x0800537b
 8005354:	0800538b 	.word	0x0800538b
 8005358:	0800538b 	.word	0x0800538b
 800535c:	0800538b 	.word	0x0800538b
 8005360:	08005383 	.word	0x08005383
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005364:	f7ff fa42 	bl	80047ec <HAL_RCC_GetPCLK1Freq>
 8005368:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800536a:	e014      	b.n	8005396 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800536c:	f7ff fa54 	bl	8004818 <HAL_RCC_GetPCLK2Freq>
 8005370:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005372:	e010      	b.n	8005396 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005374:	4b26      	ldr	r3, [pc, #152]	; (8005410 <UART_SetConfig+0x594>)
 8005376:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005378:	e00d      	b.n	8005396 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800537a:	f7ff f9c9 	bl	8004710 <HAL_RCC_GetSysClockFreq>
 800537e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005380:	e009      	b.n	8005396 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005382:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005386:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005388:	e005      	b.n	8005396 <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 800538a:	2300      	movs	r3, #0
 800538c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800538e:	2301      	movs	r3, #1
 8005390:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8005394:	bf00      	nop
    }

    if (pclk != 0U)
 8005396:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005398:	2b00      	cmp	r3, #0
 800539a:	d021      	beq.n	80053e0 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800539c:	697b      	ldr	r3, [r7, #20]
 800539e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053a0:	4a1a      	ldr	r2, [pc, #104]	; (800540c <UART_SetConfig+0x590>)
 80053a2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80053a6:	461a      	mov	r2, r3
 80053a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053aa:	fbb3 f2f2 	udiv	r2, r3, r2
 80053ae:	697b      	ldr	r3, [r7, #20]
 80053b0:	685b      	ldr	r3, [r3, #4]
 80053b2:	085b      	lsrs	r3, r3, #1
 80053b4:	441a      	add	r2, r3
 80053b6:	697b      	ldr	r3, [r7, #20]
 80053b8:	685b      	ldr	r3, [r3, #4]
 80053ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80053be:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80053c0:	6a3b      	ldr	r3, [r7, #32]
 80053c2:	2b0f      	cmp	r3, #15
 80053c4:	d909      	bls.n	80053da <UART_SetConfig+0x55e>
 80053c6:	6a3b      	ldr	r3, [r7, #32]
 80053c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80053cc:	d205      	bcs.n	80053da <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80053ce:	6a3b      	ldr	r3, [r7, #32]
 80053d0:	b29a      	uxth	r2, r3
 80053d2:	697b      	ldr	r3, [r7, #20]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	60da      	str	r2, [r3, #12]
 80053d8:	e002      	b.n	80053e0 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 80053da:	2301      	movs	r3, #1
 80053dc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80053e0:	697b      	ldr	r3, [r7, #20]
 80053e2:	2201      	movs	r2, #1
 80053e4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80053e8:	697b      	ldr	r3, [r7, #20]
 80053ea:	2201      	movs	r2, #1
 80053ec:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80053f0:	697b      	ldr	r3, [r7, #20]
 80053f2:	2200      	movs	r2, #0
 80053f4:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 80053f6:	697b      	ldr	r3, [r7, #20]
 80053f8:	2200      	movs	r2, #0
 80053fa:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 80053fc:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8005400:	4618      	mov	r0, r3
 8005402:	3730      	adds	r7, #48	; 0x30
 8005404:	46bd      	mov	sp, r7
 8005406:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800540a:	bf00      	nop
 800540c:	0800ac14 	.word	0x0800ac14
 8005410:	00f42400 	.word	0x00f42400

08005414 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005414:	b480      	push	{r7}
 8005416:	b083      	sub	sp, #12
 8005418:	af00      	add	r7, sp, #0
 800541a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005420:	f003 0301 	and.w	r3, r3, #1
 8005424:	2b00      	cmp	r3, #0
 8005426:	d00a      	beq.n	800543e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	685b      	ldr	r3, [r3, #4]
 800542e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	430a      	orrs	r2, r1
 800543c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005442:	f003 0302 	and.w	r3, r3, #2
 8005446:	2b00      	cmp	r3, #0
 8005448:	d00a      	beq.n	8005460 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	685b      	ldr	r3, [r3, #4]
 8005450:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	430a      	orrs	r2, r1
 800545e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005464:	f003 0304 	and.w	r3, r3, #4
 8005468:	2b00      	cmp	r3, #0
 800546a:	d00a      	beq.n	8005482 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	685b      	ldr	r3, [r3, #4]
 8005472:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	430a      	orrs	r2, r1
 8005480:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005486:	f003 0308 	and.w	r3, r3, #8
 800548a:	2b00      	cmp	r3, #0
 800548c:	d00a      	beq.n	80054a4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	685b      	ldr	r3, [r3, #4]
 8005494:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	430a      	orrs	r2, r1
 80054a2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054a8:	f003 0310 	and.w	r3, r3, #16
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d00a      	beq.n	80054c6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	689b      	ldr	r3, [r3, #8]
 80054b6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	430a      	orrs	r2, r1
 80054c4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054ca:	f003 0320 	and.w	r3, r3, #32
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d00a      	beq.n	80054e8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	689b      	ldr	r3, [r3, #8]
 80054d8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	430a      	orrs	r2, r1
 80054e6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d01a      	beq.n	800552a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	685b      	ldr	r3, [r3, #4]
 80054fa:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	430a      	orrs	r2, r1
 8005508:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800550e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005512:	d10a      	bne.n	800552a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	685b      	ldr	r3, [r3, #4]
 800551a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	430a      	orrs	r2, r1
 8005528:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800552e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005532:	2b00      	cmp	r3, #0
 8005534:	d00a      	beq.n	800554c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	685b      	ldr	r3, [r3, #4]
 800553c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	430a      	orrs	r2, r1
 800554a:	605a      	str	r2, [r3, #4]
  }
}
 800554c:	bf00      	nop
 800554e:	370c      	adds	r7, #12
 8005550:	46bd      	mov	sp, r7
 8005552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005556:	4770      	bx	lr

08005558 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005558:	b580      	push	{r7, lr}
 800555a:	b086      	sub	sp, #24
 800555c:	af02      	add	r7, sp, #8
 800555e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	2200      	movs	r2, #0
 8005564:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005568:	f7fb fd7a 	bl	8001060 <HAL_GetTick>
 800556c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	f003 0308 	and.w	r3, r3, #8
 8005578:	2b08      	cmp	r3, #8
 800557a:	d10e      	bne.n	800559a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800557c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005580:	9300      	str	r3, [sp, #0]
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	2200      	movs	r2, #0
 8005586:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800558a:	6878      	ldr	r0, [r7, #4]
 800558c:	f000 f82f 	bl	80055ee <UART_WaitOnFlagUntilTimeout>
 8005590:	4603      	mov	r3, r0
 8005592:	2b00      	cmp	r3, #0
 8005594:	d001      	beq.n	800559a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005596:	2303      	movs	r3, #3
 8005598:	e025      	b.n	80055e6 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	f003 0304 	and.w	r3, r3, #4
 80055a4:	2b04      	cmp	r3, #4
 80055a6:	d10e      	bne.n	80055c6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80055a8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80055ac:	9300      	str	r3, [sp, #0]
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	2200      	movs	r2, #0
 80055b2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80055b6:	6878      	ldr	r0, [r7, #4]
 80055b8:	f000 f819 	bl	80055ee <UART_WaitOnFlagUntilTimeout>
 80055bc:	4603      	mov	r3, r0
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d001      	beq.n	80055c6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80055c2:	2303      	movs	r3, #3
 80055c4:	e00f      	b.n	80055e6 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	2220      	movs	r2, #32
 80055ca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	2220      	movs	r2, #32
 80055d2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	2200      	movs	r2, #0
 80055da:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	2200      	movs	r2, #0
 80055e0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80055e4:	2300      	movs	r3, #0
}
 80055e6:	4618      	mov	r0, r3
 80055e8:	3710      	adds	r7, #16
 80055ea:	46bd      	mov	sp, r7
 80055ec:	bd80      	pop	{r7, pc}

080055ee <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80055ee:	b580      	push	{r7, lr}
 80055f0:	b09c      	sub	sp, #112	; 0x70
 80055f2:	af00      	add	r7, sp, #0
 80055f4:	60f8      	str	r0, [r7, #12]
 80055f6:	60b9      	str	r1, [r7, #8]
 80055f8:	603b      	str	r3, [r7, #0]
 80055fa:	4613      	mov	r3, r2
 80055fc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80055fe:	e0a9      	b.n	8005754 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005600:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005602:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005606:	f000 80a5 	beq.w	8005754 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800560a:	f7fb fd29 	bl	8001060 <HAL_GetTick>
 800560e:	4602      	mov	r2, r0
 8005610:	683b      	ldr	r3, [r7, #0]
 8005612:	1ad3      	subs	r3, r2, r3
 8005614:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8005616:	429a      	cmp	r2, r3
 8005618:	d302      	bcc.n	8005620 <UART_WaitOnFlagUntilTimeout+0x32>
 800561a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800561c:	2b00      	cmp	r3, #0
 800561e:	d140      	bne.n	80056a2 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005626:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005628:	e853 3f00 	ldrex	r3, [r3]
 800562c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800562e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005630:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005634:	667b      	str	r3, [r7, #100]	; 0x64
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	461a      	mov	r2, r3
 800563c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800563e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005640:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005642:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005644:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005646:	e841 2300 	strex	r3, r2, [r1]
 800564a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800564c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800564e:	2b00      	cmp	r3, #0
 8005650:	d1e6      	bne.n	8005620 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	3308      	adds	r3, #8
 8005658:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800565a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800565c:	e853 3f00 	ldrex	r3, [r3]
 8005660:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005662:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005664:	f023 0301 	bic.w	r3, r3, #1
 8005668:	663b      	str	r3, [r7, #96]	; 0x60
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	3308      	adds	r3, #8
 8005670:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005672:	64ba      	str	r2, [r7, #72]	; 0x48
 8005674:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005676:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005678:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800567a:	e841 2300 	strex	r3, r2, [r1]
 800567e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005680:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005682:	2b00      	cmp	r3, #0
 8005684:	d1e5      	bne.n	8005652 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	2220      	movs	r2, #32
 800568a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	2220      	movs	r2, #32
 8005692:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	2200      	movs	r2, #0
 800569a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800569e:	2303      	movs	r3, #3
 80056a0:	e069      	b.n	8005776 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	f003 0304 	and.w	r3, r3, #4
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d051      	beq.n	8005754 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	69db      	ldr	r3, [r3, #28]
 80056b6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80056ba:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80056be:	d149      	bne.n	8005754 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80056c8:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056d2:	e853 3f00 	ldrex	r3, [r3]
 80056d6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80056d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056da:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80056de:	66fb      	str	r3, [r7, #108]	; 0x6c
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	461a      	mov	r2, r3
 80056e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80056e8:	637b      	str	r3, [r7, #52]	; 0x34
 80056ea:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056ec:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80056ee:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80056f0:	e841 2300 	strex	r3, r2, [r1]
 80056f4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80056f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d1e6      	bne.n	80056ca <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	3308      	adds	r3, #8
 8005702:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005704:	697b      	ldr	r3, [r7, #20]
 8005706:	e853 3f00 	ldrex	r3, [r3]
 800570a:	613b      	str	r3, [r7, #16]
   return(result);
 800570c:	693b      	ldr	r3, [r7, #16]
 800570e:	f023 0301 	bic.w	r3, r3, #1
 8005712:	66bb      	str	r3, [r7, #104]	; 0x68
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	3308      	adds	r3, #8
 800571a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800571c:	623a      	str	r2, [r7, #32]
 800571e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005720:	69f9      	ldr	r1, [r7, #28]
 8005722:	6a3a      	ldr	r2, [r7, #32]
 8005724:	e841 2300 	strex	r3, r2, [r1]
 8005728:	61bb      	str	r3, [r7, #24]
   return(result);
 800572a:	69bb      	ldr	r3, [r7, #24]
 800572c:	2b00      	cmp	r3, #0
 800572e:	d1e5      	bne.n	80056fc <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	2220      	movs	r2, #32
 8005734:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	2220      	movs	r2, #32
 800573c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	2220      	movs	r2, #32
 8005744:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	2200      	movs	r2, #0
 800574c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8005750:	2303      	movs	r3, #3
 8005752:	e010      	b.n	8005776 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	69da      	ldr	r2, [r3, #28]
 800575a:	68bb      	ldr	r3, [r7, #8]
 800575c:	4013      	ands	r3, r2
 800575e:	68ba      	ldr	r2, [r7, #8]
 8005760:	429a      	cmp	r2, r3
 8005762:	bf0c      	ite	eq
 8005764:	2301      	moveq	r3, #1
 8005766:	2300      	movne	r3, #0
 8005768:	b2db      	uxtb	r3, r3
 800576a:	461a      	mov	r2, r3
 800576c:	79fb      	ldrb	r3, [r7, #7]
 800576e:	429a      	cmp	r2, r3
 8005770:	f43f af46 	beq.w	8005600 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005774:	2300      	movs	r3, #0
}
 8005776:	4618      	mov	r0, r3
 8005778:	3770      	adds	r7, #112	; 0x70
 800577a:	46bd      	mov	sp, r7
 800577c:	bd80      	pop	{r7, pc}

0800577e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800577e:	b480      	push	{r7}
 8005780:	b085      	sub	sp, #20
 8005782:	af00      	add	r7, sp, #0
 8005784:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800578c:	2b01      	cmp	r3, #1
 800578e:	d101      	bne.n	8005794 <HAL_UARTEx_DisableFifoMode+0x16>
 8005790:	2302      	movs	r3, #2
 8005792:	e027      	b.n	80057e4 <HAL_UARTEx_DisableFifoMode+0x66>
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	2201      	movs	r2, #1
 8005798:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	2224      	movs	r2, #36	; 0x24
 80057a0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	681a      	ldr	r2, [r3, #0]
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	f022 0201 	bic.w	r2, r2, #1
 80057ba:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80057c2:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	2200      	movs	r2, #0
 80057c8:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	68fa      	ldr	r2, [r7, #12]
 80057d0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	2220      	movs	r2, #32
 80057d6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	2200      	movs	r2, #0
 80057de:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80057e2:	2300      	movs	r3, #0
}
 80057e4:	4618      	mov	r0, r3
 80057e6:	3714      	adds	r7, #20
 80057e8:	46bd      	mov	sp, r7
 80057ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ee:	4770      	bx	lr

080057f0 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80057f0:	b580      	push	{r7, lr}
 80057f2:	b084      	sub	sp, #16
 80057f4:	af00      	add	r7, sp, #0
 80057f6:	6078      	str	r0, [r7, #4]
 80057f8:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005800:	2b01      	cmp	r3, #1
 8005802:	d101      	bne.n	8005808 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005804:	2302      	movs	r3, #2
 8005806:	e02d      	b.n	8005864 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	2201      	movs	r2, #1
 800580c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	2224      	movs	r2, #36	; 0x24
 8005814:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	681a      	ldr	r2, [r3, #0]
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	f022 0201 	bic.w	r2, r2, #1
 800582e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	689b      	ldr	r3, [r3, #8]
 8005836:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	683a      	ldr	r2, [r7, #0]
 8005840:	430a      	orrs	r2, r1
 8005842:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005844:	6878      	ldr	r0, [r7, #4]
 8005846:	f000 f84f 	bl	80058e8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	68fa      	ldr	r2, [r7, #12]
 8005850:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	2220      	movs	r2, #32
 8005856:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	2200      	movs	r2, #0
 800585e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005862:	2300      	movs	r3, #0
}
 8005864:	4618      	mov	r0, r3
 8005866:	3710      	adds	r7, #16
 8005868:	46bd      	mov	sp, r7
 800586a:	bd80      	pop	{r7, pc}

0800586c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800586c:	b580      	push	{r7, lr}
 800586e:	b084      	sub	sp, #16
 8005870:	af00      	add	r7, sp, #0
 8005872:	6078      	str	r0, [r7, #4]
 8005874:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800587c:	2b01      	cmp	r3, #1
 800587e:	d101      	bne.n	8005884 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005880:	2302      	movs	r3, #2
 8005882:	e02d      	b.n	80058e0 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	2201      	movs	r2, #1
 8005888:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	2224      	movs	r2, #36	; 0x24
 8005890:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	681a      	ldr	r2, [r3, #0]
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	f022 0201 	bic.w	r2, r2, #1
 80058aa:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	689b      	ldr	r3, [r3, #8]
 80058b2:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	683a      	ldr	r2, [r7, #0]
 80058bc:	430a      	orrs	r2, r1
 80058be:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80058c0:	6878      	ldr	r0, [r7, #4]
 80058c2:	f000 f811 	bl	80058e8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	68fa      	ldr	r2, [r7, #12]
 80058cc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	2220      	movs	r2, #32
 80058d2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	2200      	movs	r2, #0
 80058da:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80058de:	2300      	movs	r3, #0
}
 80058e0:	4618      	mov	r0, r3
 80058e2:	3710      	adds	r7, #16
 80058e4:	46bd      	mov	sp, r7
 80058e6:	bd80      	pop	{r7, pc}

080058e8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80058e8:	b480      	push	{r7}
 80058ea:	b085      	sub	sp, #20
 80058ec:	af00      	add	r7, sp, #0
 80058ee:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d108      	bne.n	800590a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	2201      	movs	r2, #1
 80058fc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	2201      	movs	r2, #1
 8005904:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005908:	e031      	b.n	800596e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800590a:	2308      	movs	r3, #8
 800590c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800590e:	2308      	movs	r3, #8
 8005910:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	689b      	ldr	r3, [r3, #8]
 8005918:	0e5b      	lsrs	r3, r3, #25
 800591a:	b2db      	uxtb	r3, r3
 800591c:	f003 0307 	and.w	r3, r3, #7
 8005920:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	689b      	ldr	r3, [r3, #8]
 8005928:	0f5b      	lsrs	r3, r3, #29
 800592a:	b2db      	uxtb	r3, r3
 800592c:	f003 0307 	and.w	r3, r3, #7
 8005930:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005932:	7bbb      	ldrb	r3, [r7, #14]
 8005934:	7b3a      	ldrb	r2, [r7, #12]
 8005936:	4911      	ldr	r1, [pc, #68]	; (800597c <UARTEx_SetNbDataToProcess+0x94>)
 8005938:	5c8a      	ldrb	r2, [r1, r2]
 800593a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800593e:	7b3a      	ldrb	r2, [r7, #12]
 8005940:	490f      	ldr	r1, [pc, #60]	; (8005980 <UARTEx_SetNbDataToProcess+0x98>)
 8005942:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005944:	fb93 f3f2 	sdiv	r3, r3, r2
 8005948:	b29a      	uxth	r2, r3
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005950:	7bfb      	ldrb	r3, [r7, #15]
 8005952:	7b7a      	ldrb	r2, [r7, #13]
 8005954:	4909      	ldr	r1, [pc, #36]	; (800597c <UARTEx_SetNbDataToProcess+0x94>)
 8005956:	5c8a      	ldrb	r2, [r1, r2]
 8005958:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800595c:	7b7a      	ldrb	r2, [r7, #13]
 800595e:	4908      	ldr	r1, [pc, #32]	; (8005980 <UARTEx_SetNbDataToProcess+0x98>)
 8005960:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005962:	fb93 f3f2 	sdiv	r3, r3, r2
 8005966:	b29a      	uxth	r2, r3
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800596e:	bf00      	nop
 8005970:	3714      	adds	r7, #20
 8005972:	46bd      	mov	sp, r7
 8005974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005978:	4770      	bx	lr
 800597a:	bf00      	nop
 800597c:	0800ac2c 	.word	0x0800ac2c
 8005980:	0800ac34 	.word	0x0800ac34

08005984 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8005984:	b480      	push	{r7}
 8005986:	b085      	sub	sp, #20
 8005988:	af00      	add	r7, sp, #0
 800598a:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	2200      	movs	r2, #0
 8005990:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8005994:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8005998:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	b29a      	uxth	r2, r3
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80059a4:	2300      	movs	r3, #0
}
 80059a6:	4618      	mov	r0, r3
 80059a8:	3714      	adds	r7, #20
 80059aa:	46bd      	mov	sp, r7
 80059ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b0:	4770      	bx	lr

080059b2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80059b2:	b480      	push	{r7}
 80059b4:	b085      	sub	sp, #20
 80059b6:	af00      	add	r7, sp, #0
 80059b8:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80059ba:	f64b 7380 	movw	r3, #49024	; 0xbf80
 80059be:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80059c6:	b29a      	uxth	r2, r3
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	b29b      	uxth	r3, r3
 80059cc:	43db      	mvns	r3, r3
 80059ce:	b29b      	uxth	r3, r3
 80059d0:	4013      	ands	r3, r2
 80059d2:	b29a      	uxth	r2, r3
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80059da:	2300      	movs	r3, #0
}
 80059dc:	4618      	mov	r0, r3
 80059de:	3714      	adds	r7, #20
 80059e0:	46bd      	mov	sp, r7
 80059e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e6:	4770      	bx	lr

080059e8 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80059e8:	b084      	sub	sp, #16
 80059ea:	b480      	push	{r7}
 80059ec:	b083      	sub	sp, #12
 80059ee:	af00      	add	r7, sp, #0
 80059f0:	6078      	str	r0, [r7, #4]
 80059f2:	f107 0014 	add.w	r0, r7, #20
 80059f6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	2201      	movs	r2, #1
 80059fe:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	2200      	movs	r2, #0
 8005a06:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	2200      	movs	r2, #0
 8005a0e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	2200      	movs	r2, #0
 8005a16:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8005a1a:	2300      	movs	r3, #0
}
 8005a1c:	4618      	mov	r0, r3
 8005a1e:	370c      	adds	r7, #12
 8005a20:	46bd      	mov	sp, r7
 8005a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a26:	b004      	add	sp, #16
 8005a28:	4770      	bx	lr
	...

08005a2c <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005a2c:	b480      	push	{r7}
 8005a2e:	b09d      	sub	sp, #116	; 0x74
 8005a30:	af00      	add	r7, sp, #0
 8005a32:	6078      	str	r0, [r7, #4]
 8005a34:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8005a36:	2300      	movs	r3, #0
 8005a38:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8005a3c:	687a      	ldr	r2, [r7, #4]
 8005a3e:	683b      	ldr	r3, [r7, #0]
 8005a40:	781b      	ldrb	r3, [r3, #0]
 8005a42:	009b      	lsls	r3, r3, #2
 8005a44:	4413      	add	r3, r2
 8005a46:	881b      	ldrh	r3, [r3, #0]
 8005a48:	b29b      	uxth	r3, r3
 8005a4a:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8005a4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a52:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 8005a56:	683b      	ldr	r3, [r7, #0]
 8005a58:	78db      	ldrb	r3, [r3, #3]
 8005a5a:	2b03      	cmp	r3, #3
 8005a5c:	d81f      	bhi.n	8005a9e <USB_ActivateEndpoint+0x72>
 8005a5e:	a201      	add	r2, pc, #4	; (adr r2, 8005a64 <USB_ActivateEndpoint+0x38>)
 8005a60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a64:	08005a75 	.word	0x08005a75
 8005a68:	08005a91 	.word	0x08005a91
 8005a6c:	08005aa7 	.word	0x08005aa7
 8005a70:	08005a83 	.word	0x08005a83
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8005a74:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8005a78:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005a7c:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8005a80:	e012      	b.n	8005aa8 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8005a82:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8005a86:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8005a8a:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8005a8e:	e00b      	b.n	8005aa8 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8005a90:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8005a94:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005a98:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8005a9c:	e004      	b.n	8005aa8 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8005a9e:	2301      	movs	r3, #1
 8005aa0:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 8005aa4:	e000      	b.n	8005aa8 <USB_ActivateEndpoint+0x7c>
      break;
 8005aa6:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8005aa8:	687a      	ldr	r2, [r7, #4]
 8005aaa:	683b      	ldr	r3, [r7, #0]
 8005aac:	781b      	ldrb	r3, [r3, #0]
 8005aae:	009b      	lsls	r3, r3, #2
 8005ab0:	441a      	add	r2, r3
 8005ab2:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8005ab6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005aba:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005abe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005ac2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005ac6:	b29b      	uxth	r3, r3
 8005ac8:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8005aca:	687a      	ldr	r2, [r7, #4]
 8005acc:	683b      	ldr	r3, [r7, #0]
 8005ace:	781b      	ldrb	r3, [r3, #0]
 8005ad0:	009b      	lsls	r3, r3, #2
 8005ad2:	4413      	add	r3, r2
 8005ad4:	881b      	ldrh	r3, [r3, #0]
 8005ad6:	b29b      	uxth	r3, r3
 8005ad8:	b21b      	sxth	r3, r3
 8005ada:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005ade:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ae2:	b21a      	sxth	r2, r3
 8005ae4:	683b      	ldr	r3, [r7, #0]
 8005ae6:	781b      	ldrb	r3, [r3, #0]
 8005ae8:	b21b      	sxth	r3, r3
 8005aea:	4313      	orrs	r3, r2
 8005aec:	b21b      	sxth	r3, r3
 8005aee:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8005af2:	687a      	ldr	r2, [r7, #4]
 8005af4:	683b      	ldr	r3, [r7, #0]
 8005af6:	781b      	ldrb	r3, [r3, #0]
 8005af8:	009b      	lsls	r3, r3, #2
 8005afa:	441a      	add	r2, r3
 8005afc:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8005b00:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005b04:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005b08:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005b0c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005b10:	b29b      	uxth	r3, r3
 8005b12:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8005b14:	683b      	ldr	r3, [r7, #0]
 8005b16:	7b1b      	ldrb	r3, [r3, #12]
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	f040 8149 	bne.w	8005db0 <USB_ActivateEndpoint+0x384>
  {
    if (ep->is_in != 0U)
 8005b1e:	683b      	ldr	r3, [r7, #0]
 8005b20:	785b      	ldrb	r3, [r3, #1]
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	f000 8084 	beq.w	8005c30 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	61bb      	str	r3, [r7, #24]
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005b32:	b29b      	uxth	r3, r3
 8005b34:	461a      	mov	r2, r3
 8005b36:	69bb      	ldr	r3, [r7, #24]
 8005b38:	4413      	add	r3, r2
 8005b3a:	61bb      	str	r3, [r7, #24]
 8005b3c:	683b      	ldr	r3, [r7, #0]
 8005b3e:	781b      	ldrb	r3, [r3, #0]
 8005b40:	00da      	lsls	r2, r3, #3
 8005b42:	69bb      	ldr	r3, [r7, #24]
 8005b44:	4413      	add	r3, r2
 8005b46:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005b4a:	617b      	str	r3, [r7, #20]
 8005b4c:	683b      	ldr	r3, [r7, #0]
 8005b4e:	88db      	ldrh	r3, [r3, #6]
 8005b50:	085b      	lsrs	r3, r3, #1
 8005b52:	b29b      	uxth	r3, r3
 8005b54:	005b      	lsls	r3, r3, #1
 8005b56:	b29a      	uxth	r2, r3
 8005b58:	697b      	ldr	r3, [r7, #20]
 8005b5a:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005b5c:	687a      	ldr	r2, [r7, #4]
 8005b5e:	683b      	ldr	r3, [r7, #0]
 8005b60:	781b      	ldrb	r3, [r3, #0]
 8005b62:	009b      	lsls	r3, r3, #2
 8005b64:	4413      	add	r3, r2
 8005b66:	881b      	ldrh	r3, [r3, #0]
 8005b68:	827b      	strh	r3, [r7, #18]
 8005b6a:	8a7b      	ldrh	r3, [r7, #18]
 8005b6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d01b      	beq.n	8005bac <USB_ActivateEndpoint+0x180>
 8005b74:	687a      	ldr	r2, [r7, #4]
 8005b76:	683b      	ldr	r3, [r7, #0]
 8005b78:	781b      	ldrb	r3, [r3, #0]
 8005b7a:	009b      	lsls	r3, r3, #2
 8005b7c:	4413      	add	r3, r2
 8005b7e:	881b      	ldrh	r3, [r3, #0]
 8005b80:	b29b      	uxth	r3, r3
 8005b82:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005b86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b8a:	823b      	strh	r3, [r7, #16]
 8005b8c:	687a      	ldr	r2, [r7, #4]
 8005b8e:	683b      	ldr	r3, [r7, #0]
 8005b90:	781b      	ldrb	r3, [r3, #0]
 8005b92:	009b      	lsls	r3, r3, #2
 8005b94:	441a      	add	r2, r3
 8005b96:	8a3b      	ldrh	r3, [r7, #16]
 8005b98:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005b9c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005ba0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005ba4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005ba8:	b29b      	uxth	r3, r3
 8005baa:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005bac:	683b      	ldr	r3, [r7, #0]
 8005bae:	78db      	ldrb	r3, [r3, #3]
 8005bb0:	2b01      	cmp	r3, #1
 8005bb2:	d020      	beq.n	8005bf6 <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005bb4:	687a      	ldr	r2, [r7, #4]
 8005bb6:	683b      	ldr	r3, [r7, #0]
 8005bb8:	781b      	ldrb	r3, [r3, #0]
 8005bba:	009b      	lsls	r3, r3, #2
 8005bbc:	4413      	add	r3, r2
 8005bbe:	881b      	ldrh	r3, [r3, #0]
 8005bc0:	b29b      	uxth	r3, r3
 8005bc2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005bc6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005bca:	81bb      	strh	r3, [r7, #12]
 8005bcc:	89bb      	ldrh	r3, [r7, #12]
 8005bce:	f083 0320 	eor.w	r3, r3, #32
 8005bd2:	81bb      	strh	r3, [r7, #12]
 8005bd4:	687a      	ldr	r2, [r7, #4]
 8005bd6:	683b      	ldr	r3, [r7, #0]
 8005bd8:	781b      	ldrb	r3, [r3, #0]
 8005bda:	009b      	lsls	r3, r3, #2
 8005bdc:	441a      	add	r2, r3
 8005bde:	89bb      	ldrh	r3, [r7, #12]
 8005be0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005be4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005be8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005bec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005bf0:	b29b      	uxth	r3, r3
 8005bf2:	8013      	strh	r3, [r2, #0]
 8005bf4:	e2a6      	b.n	8006144 <USB_ActivateEndpoint+0x718>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005bf6:	687a      	ldr	r2, [r7, #4]
 8005bf8:	683b      	ldr	r3, [r7, #0]
 8005bfa:	781b      	ldrb	r3, [r3, #0]
 8005bfc:	009b      	lsls	r3, r3, #2
 8005bfe:	4413      	add	r3, r2
 8005c00:	881b      	ldrh	r3, [r3, #0]
 8005c02:	b29b      	uxth	r3, r3
 8005c04:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005c08:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005c0c:	81fb      	strh	r3, [r7, #14]
 8005c0e:	687a      	ldr	r2, [r7, #4]
 8005c10:	683b      	ldr	r3, [r7, #0]
 8005c12:	781b      	ldrb	r3, [r3, #0]
 8005c14:	009b      	lsls	r3, r3, #2
 8005c16:	441a      	add	r2, r3
 8005c18:	89fb      	ldrh	r3, [r7, #14]
 8005c1a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005c1e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005c22:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005c26:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005c2a:	b29b      	uxth	r3, r3
 8005c2c:	8013      	strh	r3, [r2, #0]
 8005c2e:	e289      	b.n	8006144 <USB_ActivateEndpoint+0x718>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	633b      	str	r3, [r7, #48]	; 0x30
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005c3a:	b29b      	uxth	r3, r3
 8005c3c:	461a      	mov	r2, r3
 8005c3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c40:	4413      	add	r3, r2
 8005c42:	633b      	str	r3, [r7, #48]	; 0x30
 8005c44:	683b      	ldr	r3, [r7, #0]
 8005c46:	781b      	ldrb	r3, [r3, #0]
 8005c48:	00da      	lsls	r2, r3, #3
 8005c4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c4c:	4413      	add	r3, r2
 8005c4e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005c52:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005c54:	683b      	ldr	r3, [r7, #0]
 8005c56:	88db      	ldrh	r3, [r3, #6]
 8005c58:	085b      	lsrs	r3, r3, #1
 8005c5a:	b29b      	uxth	r3, r3
 8005c5c:	005b      	lsls	r3, r3, #1
 8005c5e:	b29a      	uxth	r2, r3
 8005c60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c62:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	62bb      	str	r3, [r7, #40]	; 0x28
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005c6e:	b29b      	uxth	r3, r3
 8005c70:	461a      	mov	r2, r3
 8005c72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c74:	4413      	add	r3, r2
 8005c76:	62bb      	str	r3, [r7, #40]	; 0x28
 8005c78:	683b      	ldr	r3, [r7, #0]
 8005c7a:	781b      	ldrb	r3, [r3, #0]
 8005c7c:	00da      	lsls	r2, r3, #3
 8005c7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c80:	4413      	add	r3, r2
 8005c82:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005c86:	627b      	str	r3, [r7, #36]	; 0x24
 8005c88:	683b      	ldr	r3, [r7, #0]
 8005c8a:	691b      	ldr	r3, [r3, #16]
 8005c8c:	2b3e      	cmp	r3, #62	; 0x3e
 8005c8e:	d918      	bls.n	8005cc2 <USB_ActivateEndpoint+0x296>
 8005c90:	683b      	ldr	r3, [r7, #0]
 8005c92:	691b      	ldr	r3, [r3, #16]
 8005c94:	095b      	lsrs	r3, r3, #5
 8005c96:	66bb      	str	r3, [r7, #104]	; 0x68
 8005c98:	683b      	ldr	r3, [r7, #0]
 8005c9a:	691b      	ldr	r3, [r3, #16]
 8005c9c:	f003 031f 	and.w	r3, r3, #31
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d102      	bne.n	8005caa <USB_ActivateEndpoint+0x27e>
 8005ca4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005ca6:	3b01      	subs	r3, #1
 8005ca8:	66bb      	str	r3, [r7, #104]	; 0x68
 8005caa:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005cac:	b29b      	uxth	r3, r3
 8005cae:	029b      	lsls	r3, r3, #10
 8005cb0:	b29b      	uxth	r3, r3
 8005cb2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005cb6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005cba:	b29a      	uxth	r2, r3
 8005cbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cbe:	801a      	strh	r2, [r3, #0]
 8005cc0:	e029      	b.n	8005d16 <USB_ActivateEndpoint+0x2ea>
 8005cc2:	683b      	ldr	r3, [r7, #0]
 8005cc4:	691b      	ldr	r3, [r3, #16]
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d112      	bne.n	8005cf0 <USB_ActivateEndpoint+0x2c4>
 8005cca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ccc:	881b      	ldrh	r3, [r3, #0]
 8005cce:	b29b      	uxth	r3, r3
 8005cd0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005cd4:	b29a      	uxth	r2, r3
 8005cd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cd8:	801a      	strh	r2, [r3, #0]
 8005cda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cdc:	881b      	ldrh	r3, [r3, #0]
 8005cde:	b29b      	uxth	r3, r3
 8005ce0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005ce4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005ce8:	b29a      	uxth	r2, r3
 8005cea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cec:	801a      	strh	r2, [r3, #0]
 8005cee:	e012      	b.n	8005d16 <USB_ActivateEndpoint+0x2ea>
 8005cf0:	683b      	ldr	r3, [r7, #0]
 8005cf2:	691b      	ldr	r3, [r3, #16]
 8005cf4:	085b      	lsrs	r3, r3, #1
 8005cf6:	66bb      	str	r3, [r7, #104]	; 0x68
 8005cf8:	683b      	ldr	r3, [r7, #0]
 8005cfa:	691b      	ldr	r3, [r3, #16]
 8005cfc:	f003 0301 	and.w	r3, r3, #1
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d002      	beq.n	8005d0a <USB_ActivateEndpoint+0x2de>
 8005d04:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005d06:	3301      	adds	r3, #1
 8005d08:	66bb      	str	r3, [r7, #104]	; 0x68
 8005d0a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005d0c:	b29b      	uxth	r3, r3
 8005d0e:	029b      	lsls	r3, r3, #10
 8005d10:	b29a      	uxth	r2, r3
 8005d12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d14:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005d16:	687a      	ldr	r2, [r7, #4]
 8005d18:	683b      	ldr	r3, [r7, #0]
 8005d1a:	781b      	ldrb	r3, [r3, #0]
 8005d1c:	009b      	lsls	r3, r3, #2
 8005d1e:	4413      	add	r3, r2
 8005d20:	881b      	ldrh	r3, [r3, #0]
 8005d22:	847b      	strh	r3, [r7, #34]	; 0x22
 8005d24:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005d26:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d01b      	beq.n	8005d66 <USB_ActivateEndpoint+0x33a>
 8005d2e:	687a      	ldr	r2, [r7, #4]
 8005d30:	683b      	ldr	r3, [r7, #0]
 8005d32:	781b      	ldrb	r3, [r3, #0]
 8005d34:	009b      	lsls	r3, r3, #2
 8005d36:	4413      	add	r3, r2
 8005d38:	881b      	ldrh	r3, [r3, #0]
 8005d3a:	b29b      	uxth	r3, r3
 8005d3c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005d40:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d44:	843b      	strh	r3, [r7, #32]
 8005d46:	687a      	ldr	r2, [r7, #4]
 8005d48:	683b      	ldr	r3, [r7, #0]
 8005d4a:	781b      	ldrb	r3, [r3, #0]
 8005d4c:	009b      	lsls	r3, r3, #2
 8005d4e:	441a      	add	r2, r3
 8005d50:	8c3b      	ldrh	r3, [r7, #32]
 8005d52:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005d56:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005d5a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005d5e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005d62:	b29b      	uxth	r3, r3
 8005d64:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005d66:	687a      	ldr	r2, [r7, #4]
 8005d68:	683b      	ldr	r3, [r7, #0]
 8005d6a:	781b      	ldrb	r3, [r3, #0]
 8005d6c:	009b      	lsls	r3, r3, #2
 8005d6e:	4413      	add	r3, r2
 8005d70:	881b      	ldrh	r3, [r3, #0]
 8005d72:	b29b      	uxth	r3, r3
 8005d74:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005d78:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d7c:	83fb      	strh	r3, [r7, #30]
 8005d7e:	8bfb      	ldrh	r3, [r7, #30]
 8005d80:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005d84:	83fb      	strh	r3, [r7, #30]
 8005d86:	8bfb      	ldrh	r3, [r7, #30]
 8005d88:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005d8c:	83fb      	strh	r3, [r7, #30]
 8005d8e:	687a      	ldr	r2, [r7, #4]
 8005d90:	683b      	ldr	r3, [r7, #0]
 8005d92:	781b      	ldrb	r3, [r3, #0]
 8005d94:	009b      	lsls	r3, r3, #2
 8005d96:	441a      	add	r2, r3
 8005d98:	8bfb      	ldrh	r3, [r7, #30]
 8005d9a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005d9e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005da2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005da6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005daa:	b29b      	uxth	r3, r3
 8005dac:	8013      	strh	r3, [r2, #0]
 8005dae:	e1c9      	b.n	8006144 <USB_ActivateEndpoint+0x718>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8005db0:	683b      	ldr	r3, [r7, #0]
 8005db2:	78db      	ldrb	r3, [r3, #3]
 8005db4:	2b02      	cmp	r3, #2
 8005db6:	d11e      	bne.n	8005df6 <USB_ActivateEndpoint+0x3ca>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8005db8:	687a      	ldr	r2, [r7, #4]
 8005dba:	683b      	ldr	r3, [r7, #0]
 8005dbc:	781b      	ldrb	r3, [r3, #0]
 8005dbe:	009b      	lsls	r3, r3, #2
 8005dc0:	4413      	add	r3, r2
 8005dc2:	881b      	ldrh	r3, [r3, #0]
 8005dc4:	b29b      	uxth	r3, r3
 8005dc6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005dca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005dce:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8005dd2:	687a      	ldr	r2, [r7, #4]
 8005dd4:	683b      	ldr	r3, [r7, #0]
 8005dd6:	781b      	ldrb	r3, [r3, #0]
 8005dd8:	009b      	lsls	r3, r3, #2
 8005dda:	441a      	add	r2, r3
 8005ddc:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8005de0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005de4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005de8:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8005dec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005df0:	b29b      	uxth	r3, r3
 8005df2:	8013      	strh	r3, [r2, #0]
 8005df4:	e01d      	b.n	8005e32 <USB_ActivateEndpoint+0x406>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8005df6:	687a      	ldr	r2, [r7, #4]
 8005df8:	683b      	ldr	r3, [r7, #0]
 8005dfa:	781b      	ldrb	r3, [r3, #0]
 8005dfc:	009b      	lsls	r3, r3, #2
 8005dfe:	4413      	add	r3, r2
 8005e00:	881b      	ldrh	r3, [r3, #0]
 8005e02:	b29b      	uxth	r3, r3
 8005e04:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8005e08:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e0c:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 8005e10:	687a      	ldr	r2, [r7, #4]
 8005e12:	683b      	ldr	r3, [r7, #0]
 8005e14:	781b      	ldrb	r3, [r3, #0]
 8005e16:	009b      	lsls	r3, r3, #2
 8005e18:	441a      	add	r2, r3
 8005e1a:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8005e1e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005e22:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005e26:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005e2a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005e2e:	b29b      	uxth	r3, r3
 8005e30:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005e3c:	b29b      	uxth	r3, r3
 8005e3e:	461a      	mov	r2, r3
 8005e40:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005e42:	4413      	add	r3, r2
 8005e44:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005e46:	683b      	ldr	r3, [r7, #0]
 8005e48:	781b      	ldrb	r3, [r3, #0]
 8005e4a:	00da      	lsls	r2, r3, #3
 8005e4c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005e4e:	4413      	add	r3, r2
 8005e50:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005e54:	65bb      	str	r3, [r7, #88]	; 0x58
 8005e56:	683b      	ldr	r3, [r7, #0]
 8005e58:	891b      	ldrh	r3, [r3, #8]
 8005e5a:	085b      	lsrs	r3, r3, #1
 8005e5c:	b29b      	uxth	r3, r3
 8005e5e:	005b      	lsls	r3, r3, #1
 8005e60:	b29a      	uxth	r2, r3
 8005e62:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005e64:	801a      	strh	r2, [r3, #0]
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	657b      	str	r3, [r7, #84]	; 0x54
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005e70:	b29b      	uxth	r3, r3
 8005e72:	461a      	mov	r2, r3
 8005e74:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005e76:	4413      	add	r3, r2
 8005e78:	657b      	str	r3, [r7, #84]	; 0x54
 8005e7a:	683b      	ldr	r3, [r7, #0]
 8005e7c:	781b      	ldrb	r3, [r3, #0]
 8005e7e:	00da      	lsls	r2, r3, #3
 8005e80:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005e82:	4413      	add	r3, r2
 8005e84:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005e88:	653b      	str	r3, [r7, #80]	; 0x50
 8005e8a:	683b      	ldr	r3, [r7, #0]
 8005e8c:	895b      	ldrh	r3, [r3, #10]
 8005e8e:	085b      	lsrs	r3, r3, #1
 8005e90:	b29b      	uxth	r3, r3
 8005e92:	005b      	lsls	r3, r3, #1
 8005e94:	b29a      	uxth	r2, r3
 8005e96:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005e98:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8005e9a:	683b      	ldr	r3, [r7, #0]
 8005e9c:	785b      	ldrb	r3, [r3, #1]
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	f040 8093 	bne.w	8005fca <USB_ActivateEndpoint+0x59e>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005ea4:	687a      	ldr	r2, [r7, #4]
 8005ea6:	683b      	ldr	r3, [r7, #0]
 8005ea8:	781b      	ldrb	r3, [r3, #0]
 8005eaa:	009b      	lsls	r3, r3, #2
 8005eac:	4413      	add	r3, r2
 8005eae:	881b      	ldrh	r3, [r3, #0]
 8005eb0:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8005eb4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8005eb8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d01b      	beq.n	8005ef8 <USB_ActivateEndpoint+0x4cc>
 8005ec0:	687a      	ldr	r2, [r7, #4]
 8005ec2:	683b      	ldr	r3, [r7, #0]
 8005ec4:	781b      	ldrb	r3, [r3, #0]
 8005ec6:	009b      	lsls	r3, r3, #2
 8005ec8:	4413      	add	r3, r2
 8005eca:	881b      	ldrh	r3, [r3, #0]
 8005ecc:	b29b      	uxth	r3, r3
 8005ece:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005ed2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ed6:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8005ed8:	687a      	ldr	r2, [r7, #4]
 8005eda:	683b      	ldr	r3, [r7, #0]
 8005edc:	781b      	ldrb	r3, [r3, #0]
 8005ede:	009b      	lsls	r3, r3, #2
 8005ee0:	441a      	add	r2, r3
 8005ee2:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8005ee4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005ee8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005eec:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005ef0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005ef4:	b29b      	uxth	r3, r3
 8005ef6:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005ef8:	687a      	ldr	r2, [r7, #4]
 8005efa:	683b      	ldr	r3, [r7, #0]
 8005efc:	781b      	ldrb	r3, [r3, #0]
 8005efe:	009b      	lsls	r3, r3, #2
 8005f00:	4413      	add	r3, r2
 8005f02:	881b      	ldrh	r3, [r3, #0]
 8005f04:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8005f06:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8005f08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d01b      	beq.n	8005f48 <USB_ActivateEndpoint+0x51c>
 8005f10:	687a      	ldr	r2, [r7, #4]
 8005f12:	683b      	ldr	r3, [r7, #0]
 8005f14:	781b      	ldrb	r3, [r3, #0]
 8005f16:	009b      	lsls	r3, r3, #2
 8005f18:	4413      	add	r3, r2
 8005f1a:	881b      	ldrh	r3, [r3, #0]
 8005f1c:	b29b      	uxth	r3, r3
 8005f1e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005f22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f26:	877b      	strh	r3, [r7, #58]	; 0x3a
 8005f28:	687a      	ldr	r2, [r7, #4]
 8005f2a:	683b      	ldr	r3, [r7, #0]
 8005f2c:	781b      	ldrb	r3, [r3, #0]
 8005f2e:	009b      	lsls	r3, r3, #2
 8005f30:	441a      	add	r2, r3
 8005f32:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8005f34:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005f38:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005f3c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005f40:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005f44:	b29b      	uxth	r3, r3
 8005f46:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005f48:	687a      	ldr	r2, [r7, #4]
 8005f4a:	683b      	ldr	r3, [r7, #0]
 8005f4c:	781b      	ldrb	r3, [r3, #0]
 8005f4e:	009b      	lsls	r3, r3, #2
 8005f50:	4413      	add	r3, r2
 8005f52:	881b      	ldrh	r3, [r3, #0]
 8005f54:	b29b      	uxth	r3, r3
 8005f56:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005f5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f5e:	873b      	strh	r3, [r7, #56]	; 0x38
 8005f60:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005f62:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005f66:	873b      	strh	r3, [r7, #56]	; 0x38
 8005f68:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005f6a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005f6e:	873b      	strh	r3, [r7, #56]	; 0x38
 8005f70:	687a      	ldr	r2, [r7, #4]
 8005f72:	683b      	ldr	r3, [r7, #0]
 8005f74:	781b      	ldrb	r3, [r3, #0]
 8005f76:	009b      	lsls	r3, r3, #2
 8005f78:	441a      	add	r2, r3
 8005f7a:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005f7c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005f80:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005f84:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005f88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005f8c:	b29b      	uxth	r3, r3
 8005f8e:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005f90:	687a      	ldr	r2, [r7, #4]
 8005f92:	683b      	ldr	r3, [r7, #0]
 8005f94:	781b      	ldrb	r3, [r3, #0]
 8005f96:	009b      	lsls	r3, r3, #2
 8005f98:	4413      	add	r3, r2
 8005f9a:	881b      	ldrh	r3, [r3, #0]
 8005f9c:	b29b      	uxth	r3, r3
 8005f9e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005fa2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005fa6:	86fb      	strh	r3, [r7, #54]	; 0x36
 8005fa8:	687a      	ldr	r2, [r7, #4]
 8005faa:	683b      	ldr	r3, [r7, #0]
 8005fac:	781b      	ldrb	r3, [r3, #0]
 8005fae:	009b      	lsls	r3, r3, #2
 8005fb0:	441a      	add	r2, r3
 8005fb2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005fb4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005fb8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005fbc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005fc0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005fc4:	b29b      	uxth	r3, r3
 8005fc6:	8013      	strh	r3, [r2, #0]
 8005fc8:	e0bc      	b.n	8006144 <USB_ActivateEndpoint+0x718>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005fca:	687a      	ldr	r2, [r7, #4]
 8005fcc:	683b      	ldr	r3, [r7, #0]
 8005fce:	781b      	ldrb	r3, [r3, #0]
 8005fd0:	009b      	lsls	r3, r3, #2
 8005fd2:	4413      	add	r3, r2
 8005fd4:	881b      	ldrh	r3, [r3, #0]
 8005fd6:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8005fda:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005fde:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d01d      	beq.n	8006022 <USB_ActivateEndpoint+0x5f6>
 8005fe6:	687a      	ldr	r2, [r7, #4]
 8005fe8:	683b      	ldr	r3, [r7, #0]
 8005fea:	781b      	ldrb	r3, [r3, #0]
 8005fec:	009b      	lsls	r3, r3, #2
 8005fee:	4413      	add	r3, r2
 8005ff0:	881b      	ldrh	r3, [r3, #0]
 8005ff2:	b29b      	uxth	r3, r3
 8005ff4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005ff8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ffc:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8006000:	687a      	ldr	r2, [r7, #4]
 8006002:	683b      	ldr	r3, [r7, #0]
 8006004:	781b      	ldrb	r3, [r3, #0]
 8006006:	009b      	lsls	r3, r3, #2
 8006008:	441a      	add	r2, r3
 800600a:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800600e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006012:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006016:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800601a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800601e:	b29b      	uxth	r3, r3
 8006020:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006022:	687a      	ldr	r2, [r7, #4]
 8006024:	683b      	ldr	r3, [r7, #0]
 8006026:	781b      	ldrb	r3, [r3, #0]
 8006028:	009b      	lsls	r3, r3, #2
 800602a:	4413      	add	r3, r2
 800602c:	881b      	ldrh	r3, [r3, #0]
 800602e:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8006032:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8006036:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800603a:	2b00      	cmp	r3, #0
 800603c:	d01d      	beq.n	800607a <USB_ActivateEndpoint+0x64e>
 800603e:	687a      	ldr	r2, [r7, #4]
 8006040:	683b      	ldr	r3, [r7, #0]
 8006042:	781b      	ldrb	r3, [r3, #0]
 8006044:	009b      	lsls	r3, r3, #2
 8006046:	4413      	add	r3, r2
 8006048:	881b      	ldrh	r3, [r3, #0]
 800604a:	b29b      	uxth	r3, r3
 800604c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006050:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006054:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8006058:	687a      	ldr	r2, [r7, #4]
 800605a:	683b      	ldr	r3, [r7, #0]
 800605c:	781b      	ldrb	r3, [r3, #0]
 800605e:	009b      	lsls	r3, r3, #2
 8006060:	441a      	add	r2, r3
 8006062:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8006066:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800606a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800606e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006072:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006076:	b29b      	uxth	r3, r3
 8006078:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800607a:	683b      	ldr	r3, [r7, #0]
 800607c:	78db      	ldrb	r3, [r3, #3]
 800607e:	2b01      	cmp	r3, #1
 8006080:	d024      	beq.n	80060cc <USB_ActivateEndpoint+0x6a0>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006082:	687a      	ldr	r2, [r7, #4]
 8006084:	683b      	ldr	r3, [r7, #0]
 8006086:	781b      	ldrb	r3, [r3, #0]
 8006088:	009b      	lsls	r3, r3, #2
 800608a:	4413      	add	r3, r2
 800608c:	881b      	ldrh	r3, [r3, #0]
 800608e:	b29b      	uxth	r3, r3
 8006090:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006094:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006098:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800609c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80060a0:	f083 0320 	eor.w	r3, r3, #32
 80060a4:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80060a8:	687a      	ldr	r2, [r7, #4]
 80060aa:	683b      	ldr	r3, [r7, #0]
 80060ac:	781b      	ldrb	r3, [r3, #0]
 80060ae:	009b      	lsls	r3, r3, #2
 80060b0:	441a      	add	r2, r3
 80060b2:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80060b6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80060ba:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80060be:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80060c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80060c6:	b29b      	uxth	r3, r3
 80060c8:	8013      	strh	r3, [r2, #0]
 80060ca:	e01d      	b.n	8006108 <USB_ActivateEndpoint+0x6dc>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80060cc:	687a      	ldr	r2, [r7, #4]
 80060ce:	683b      	ldr	r3, [r7, #0]
 80060d0:	781b      	ldrb	r3, [r3, #0]
 80060d2:	009b      	lsls	r3, r3, #2
 80060d4:	4413      	add	r3, r2
 80060d6:	881b      	ldrh	r3, [r3, #0]
 80060d8:	b29b      	uxth	r3, r3
 80060da:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80060de:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80060e2:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 80060e6:	687a      	ldr	r2, [r7, #4]
 80060e8:	683b      	ldr	r3, [r7, #0]
 80060ea:	781b      	ldrb	r3, [r3, #0]
 80060ec:	009b      	lsls	r3, r3, #2
 80060ee:	441a      	add	r2, r3
 80060f0:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80060f4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80060f8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80060fc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006100:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006104:	b29b      	uxth	r3, r3
 8006106:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006108:	687a      	ldr	r2, [r7, #4]
 800610a:	683b      	ldr	r3, [r7, #0]
 800610c:	781b      	ldrb	r3, [r3, #0]
 800610e:	009b      	lsls	r3, r3, #2
 8006110:	4413      	add	r3, r2
 8006112:	881b      	ldrh	r3, [r3, #0]
 8006114:	b29b      	uxth	r3, r3
 8006116:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800611a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800611e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8006122:	687a      	ldr	r2, [r7, #4]
 8006124:	683b      	ldr	r3, [r7, #0]
 8006126:	781b      	ldrb	r3, [r3, #0]
 8006128:	009b      	lsls	r3, r3, #2
 800612a:	441a      	add	r2, r3
 800612c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8006130:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006134:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006138:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800613c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006140:	b29b      	uxth	r3, r3
 8006142:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8006144:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 8006148:	4618      	mov	r0, r3
 800614a:	3774      	adds	r7, #116	; 0x74
 800614c:	46bd      	mov	sp, r7
 800614e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006152:	4770      	bx	lr

08006154 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006154:	b480      	push	{r7}
 8006156:	b08d      	sub	sp, #52	; 0x34
 8006158:	af00      	add	r7, sp, #0
 800615a:	6078      	str	r0, [r7, #4]
 800615c:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800615e:	683b      	ldr	r3, [r7, #0]
 8006160:	7b1b      	ldrb	r3, [r3, #12]
 8006162:	2b00      	cmp	r3, #0
 8006164:	f040 808e 	bne.w	8006284 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8006168:	683b      	ldr	r3, [r7, #0]
 800616a:	785b      	ldrb	r3, [r3, #1]
 800616c:	2b00      	cmp	r3, #0
 800616e:	d044      	beq.n	80061fa <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006170:	687a      	ldr	r2, [r7, #4]
 8006172:	683b      	ldr	r3, [r7, #0]
 8006174:	781b      	ldrb	r3, [r3, #0]
 8006176:	009b      	lsls	r3, r3, #2
 8006178:	4413      	add	r3, r2
 800617a:	881b      	ldrh	r3, [r3, #0]
 800617c:	81bb      	strh	r3, [r7, #12]
 800617e:	89bb      	ldrh	r3, [r7, #12]
 8006180:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006184:	2b00      	cmp	r3, #0
 8006186:	d01b      	beq.n	80061c0 <USB_DeactivateEndpoint+0x6c>
 8006188:	687a      	ldr	r2, [r7, #4]
 800618a:	683b      	ldr	r3, [r7, #0]
 800618c:	781b      	ldrb	r3, [r3, #0]
 800618e:	009b      	lsls	r3, r3, #2
 8006190:	4413      	add	r3, r2
 8006192:	881b      	ldrh	r3, [r3, #0]
 8006194:	b29b      	uxth	r3, r3
 8006196:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800619a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800619e:	817b      	strh	r3, [r7, #10]
 80061a0:	687a      	ldr	r2, [r7, #4]
 80061a2:	683b      	ldr	r3, [r7, #0]
 80061a4:	781b      	ldrb	r3, [r3, #0]
 80061a6:	009b      	lsls	r3, r3, #2
 80061a8:	441a      	add	r2, r3
 80061aa:	897b      	ldrh	r3, [r7, #10]
 80061ac:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80061b0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80061b4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80061b8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80061bc:	b29b      	uxth	r3, r3
 80061be:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80061c0:	687a      	ldr	r2, [r7, #4]
 80061c2:	683b      	ldr	r3, [r7, #0]
 80061c4:	781b      	ldrb	r3, [r3, #0]
 80061c6:	009b      	lsls	r3, r3, #2
 80061c8:	4413      	add	r3, r2
 80061ca:	881b      	ldrh	r3, [r3, #0]
 80061cc:	b29b      	uxth	r3, r3
 80061ce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80061d2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80061d6:	813b      	strh	r3, [r7, #8]
 80061d8:	687a      	ldr	r2, [r7, #4]
 80061da:	683b      	ldr	r3, [r7, #0]
 80061dc:	781b      	ldrb	r3, [r3, #0]
 80061de:	009b      	lsls	r3, r3, #2
 80061e0:	441a      	add	r2, r3
 80061e2:	893b      	ldrh	r3, [r7, #8]
 80061e4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80061e8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80061ec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80061f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80061f4:	b29b      	uxth	r3, r3
 80061f6:	8013      	strh	r3, [r2, #0]
 80061f8:	e192      	b.n	8006520 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80061fa:	687a      	ldr	r2, [r7, #4]
 80061fc:	683b      	ldr	r3, [r7, #0]
 80061fe:	781b      	ldrb	r3, [r3, #0]
 8006200:	009b      	lsls	r3, r3, #2
 8006202:	4413      	add	r3, r2
 8006204:	881b      	ldrh	r3, [r3, #0]
 8006206:	827b      	strh	r3, [r7, #18]
 8006208:	8a7b      	ldrh	r3, [r7, #18]
 800620a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800620e:	2b00      	cmp	r3, #0
 8006210:	d01b      	beq.n	800624a <USB_DeactivateEndpoint+0xf6>
 8006212:	687a      	ldr	r2, [r7, #4]
 8006214:	683b      	ldr	r3, [r7, #0]
 8006216:	781b      	ldrb	r3, [r3, #0]
 8006218:	009b      	lsls	r3, r3, #2
 800621a:	4413      	add	r3, r2
 800621c:	881b      	ldrh	r3, [r3, #0]
 800621e:	b29b      	uxth	r3, r3
 8006220:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006224:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006228:	823b      	strh	r3, [r7, #16]
 800622a:	687a      	ldr	r2, [r7, #4]
 800622c:	683b      	ldr	r3, [r7, #0]
 800622e:	781b      	ldrb	r3, [r3, #0]
 8006230:	009b      	lsls	r3, r3, #2
 8006232:	441a      	add	r2, r3
 8006234:	8a3b      	ldrh	r3, [r7, #16]
 8006236:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800623a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800623e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006242:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006246:	b29b      	uxth	r3, r3
 8006248:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800624a:	687a      	ldr	r2, [r7, #4]
 800624c:	683b      	ldr	r3, [r7, #0]
 800624e:	781b      	ldrb	r3, [r3, #0]
 8006250:	009b      	lsls	r3, r3, #2
 8006252:	4413      	add	r3, r2
 8006254:	881b      	ldrh	r3, [r3, #0]
 8006256:	b29b      	uxth	r3, r3
 8006258:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800625c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006260:	81fb      	strh	r3, [r7, #14]
 8006262:	687a      	ldr	r2, [r7, #4]
 8006264:	683b      	ldr	r3, [r7, #0]
 8006266:	781b      	ldrb	r3, [r3, #0]
 8006268:	009b      	lsls	r3, r3, #2
 800626a:	441a      	add	r2, r3
 800626c:	89fb      	ldrh	r3, [r7, #14]
 800626e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006272:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006276:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800627a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800627e:	b29b      	uxth	r3, r3
 8006280:	8013      	strh	r3, [r2, #0]
 8006282:	e14d      	b.n	8006520 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8006284:	683b      	ldr	r3, [r7, #0]
 8006286:	785b      	ldrb	r3, [r3, #1]
 8006288:	2b00      	cmp	r3, #0
 800628a:	f040 80a5 	bne.w	80063d8 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800628e:	687a      	ldr	r2, [r7, #4]
 8006290:	683b      	ldr	r3, [r7, #0]
 8006292:	781b      	ldrb	r3, [r3, #0]
 8006294:	009b      	lsls	r3, r3, #2
 8006296:	4413      	add	r3, r2
 8006298:	881b      	ldrh	r3, [r3, #0]
 800629a:	843b      	strh	r3, [r7, #32]
 800629c:	8c3b      	ldrh	r3, [r7, #32]
 800629e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d01b      	beq.n	80062de <USB_DeactivateEndpoint+0x18a>
 80062a6:	687a      	ldr	r2, [r7, #4]
 80062a8:	683b      	ldr	r3, [r7, #0]
 80062aa:	781b      	ldrb	r3, [r3, #0]
 80062ac:	009b      	lsls	r3, r3, #2
 80062ae:	4413      	add	r3, r2
 80062b0:	881b      	ldrh	r3, [r3, #0]
 80062b2:	b29b      	uxth	r3, r3
 80062b4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80062b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80062bc:	83fb      	strh	r3, [r7, #30]
 80062be:	687a      	ldr	r2, [r7, #4]
 80062c0:	683b      	ldr	r3, [r7, #0]
 80062c2:	781b      	ldrb	r3, [r3, #0]
 80062c4:	009b      	lsls	r3, r3, #2
 80062c6:	441a      	add	r2, r3
 80062c8:	8bfb      	ldrh	r3, [r7, #30]
 80062ca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80062ce:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80062d2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80062d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80062da:	b29b      	uxth	r3, r3
 80062dc:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80062de:	687a      	ldr	r2, [r7, #4]
 80062e0:	683b      	ldr	r3, [r7, #0]
 80062e2:	781b      	ldrb	r3, [r3, #0]
 80062e4:	009b      	lsls	r3, r3, #2
 80062e6:	4413      	add	r3, r2
 80062e8:	881b      	ldrh	r3, [r3, #0]
 80062ea:	83bb      	strh	r3, [r7, #28]
 80062ec:	8bbb      	ldrh	r3, [r7, #28]
 80062ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d01b      	beq.n	800632e <USB_DeactivateEndpoint+0x1da>
 80062f6:	687a      	ldr	r2, [r7, #4]
 80062f8:	683b      	ldr	r3, [r7, #0]
 80062fa:	781b      	ldrb	r3, [r3, #0]
 80062fc:	009b      	lsls	r3, r3, #2
 80062fe:	4413      	add	r3, r2
 8006300:	881b      	ldrh	r3, [r3, #0]
 8006302:	b29b      	uxth	r3, r3
 8006304:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006308:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800630c:	837b      	strh	r3, [r7, #26]
 800630e:	687a      	ldr	r2, [r7, #4]
 8006310:	683b      	ldr	r3, [r7, #0]
 8006312:	781b      	ldrb	r3, [r3, #0]
 8006314:	009b      	lsls	r3, r3, #2
 8006316:	441a      	add	r2, r3
 8006318:	8b7b      	ldrh	r3, [r7, #26]
 800631a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800631e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006322:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006326:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800632a:	b29b      	uxth	r3, r3
 800632c:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800632e:	687a      	ldr	r2, [r7, #4]
 8006330:	683b      	ldr	r3, [r7, #0]
 8006332:	781b      	ldrb	r3, [r3, #0]
 8006334:	009b      	lsls	r3, r3, #2
 8006336:	4413      	add	r3, r2
 8006338:	881b      	ldrh	r3, [r3, #0]
 800633a:	b29b      	uxth	r3, r3
 800633c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006340:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006344:	833b      	strh	r3, [r7, #24]
 8006346:	687a      	ldr	r2, [r7, #4]
 8006348:	683b      	ldr	r3, [r7, #0]
 800634a:	781b      	ldrb	r3, [r3, #0]
 800634c:	009b      	lsls	r3, r3, #2
 800634e:	441a      	add	r2, r3
 8006350:	8b3b      	ldrh	r3, [r7, #24]
 8006352:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006356:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800635a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800635e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006362:	b29b      	uxth	r3, r3
 8006364:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006366:	687a      	ldr	r2, [r7, #4]
 8006368:	683b      	ldr	r3, [r7, #0]
 800636a:	781b      	ldrb	r3, [r3, #0]
 800636c:	009b      	lsls	r3, r3, #2
 800636e:	4413      	add	r3, r2
 8006370:	881b      	ldrh	r3, [r3, #0]
 8006372:	b29b      	uxth	r3, r3
 8006374:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006378:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800637c:	82fb      	strh	r3, [r7, #22]
 800637e:	687a      	ldr	r2, [r7, #4]
 8006380:	683b      	ldr	r3, [r7, #0]
 8006382:	781b      	ldrb	r3, [r3, #0]
 8006384:	009b      	lsls	r3, r3, #2
 8006386:	441a      	add	r2, r3
 8006388:	8afb      	ldrh	r3, [r7, #22]
 800638a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800638e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006392:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006396:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800639a:	b29b      	uxth	r3, r3
 800639c:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800639e:	687a      	ldr	r2, [r7, #4]
 80063a0:	683b      	ldr	r3, [r7, #0]
 80063a2:	781b      	ldrb	r3, [r3, #0]
 80063a4:	009b      	lsls	r3, r3, #2
 80063a6:	4413      	add	r3, r2
 80063a8:	881b      	ldrh	r3, [r3, #0]
 80063aa:	b29b      	uxth	r3, r3
 80063ac:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80063b0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80063b4:	82bb      	strh	r3, [r7, #20]
 80063b6:	687a      	ldr	r2, [r7, #4]
 80063b8:	683b      	ldr	r3, [r7, #0]
 80063ba:	781b      	ldrb	r3, [r3, #0]
 80063bc:	009b      	lsls	r3, r3, #2
 80063be:	441a      	add	r2, r3
 80063c0:	8abb      	ldrh	r3, [r7, #20]
 80063c2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80063c6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80063ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80063ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80063d2:	b29b      	uxth	r3, r3
 80063d4:	8013      	strh	r3, [r2, #0]
 80063d6:	e0a3      	b.n	8006520 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80063d8:	687a      	ldr	r2, [r7, #4]
 80063da:	683b      	ldr	r3, [r7, #0]
 80063dc:	781b      	ldrb	r3, [r3, #0]
 80063de:	009b      	lsls	r3, r3, #2
 80063e0:	4413      	add	r3, r2
 80063e2:	881b      	ldrh	r3, [r3, #0]
 80063e4:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80063e6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80063e8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d01b      	beq.n	8006428 <USB_DeactivateEndpoint+0x2d4>
 80063f0:	687a      	ldr	r2, [r7, #4]
 80063f2:	683b      	ldr	r3, [r7, #0]
 80063f4:	781b      	ldrb	r3, [r3, #0]
 80063f6:	009b      	lsls	r3, r3, #2
 80063f8:	4413      	add	r3, r2
 80063fa:	881b      	ldrh	r3, [r3, #0]
 80063fc:	b29b      	uxth	r3, r3
 80063fe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006402:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006406:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8006408:	687a      	ldr	r2, [r7, #4]
 800640a:	683b      	ldr	r3, [r7, #0]
 800640c:	781b      	ldrb	r3, [r3, #0]
 800640e:	009b      	lsls	r3, r3, #2
 8006410:	441a      	add	r2, r3
 8006412:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8006414:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006418:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800641c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006420:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006424:	b29b      	uxth	r3, r3
 8006426:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006428:	687a      	ldr	r2, [r7, #4]
 800642a:	683b      	ldr	r3, [r7, #0]
 800642c:	781b      	ldrb	r3, [r3, #0]
 800642e:	009b      	lsls	r3, r3, #2
 8006430:	4413      	add	r3, r2
 8006432:	881b      	ldrh	r3, [r3, #0]
 8006434:	857b      	strh	r3, [r7, #42]	; 0x2a
 8006436:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8006438:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800643c:	2b00      	cmp	r3, #0
 800643e:	d01b      	beq.n	8006478 <USB_DeactivateEndpoint+0x324>
 8006440:	687a      	ldr	r2, [r7, #4]
 8006442:	683b      	ldr	r3, [r7, #0]
 8006444:	781b      	ldrb	r3, [r3, #0]
 8006446:	009b      	lsls	r3, r3, #2
 8006448:	4413      	add	r3, r2
 800644a:	881b      	ldrh	r3, [r3, #0]
 800644c:	b29b      	uxth	r3, r3
 800644e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006452:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006456:	853b      	strh	r3, [r7, #40]	; 0x28
 8006458:	687a      	ldr	r2, [r7, #4]
 800645a:	683b      	ldr	r3, [r7, #0]
 800645c:	781b      	ldrb	r3, [r3, #0]
 800645e:	009b      	lsls	r3, r3, #2
 8006460:	441a      	add	r2, r3
 8006462:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8006464:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006468:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800646c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006470:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006474:	b29b      	uxth	r3, r3
 8006476:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8006478:	687a      	ldr	r2, [r7, #4]
 800647a:	683b      	ldr	r3, [r7, #0]
 800647c:	781b      	ldrb	r3, [r3, #0]
 800647e:	009b      	lsls	r3, r3, #2
 8006480:	4413      	add	r3, r2
 8006482:	881b      	ldrh	r3, [r3, #0]
 8006484:	b29b      	uxth	r3, r3
 8006486:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800648a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800648e:	84fb      	strh	r3, [r7, #38]	; 0x26
 8006490:	687a      	ldr	r2, [r7, #4]
 8006492:	683b      	ldr	r3, [r7, #0]
 8006494:	781b      	ldrb	r3, [r3, #0]
 8006496:	009b      	lsls	r3, r3, #2
 8006498:	441a      	add	r2, r3
 800649a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800649c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80064a0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80064a4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80064a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80064ac:	b29b      	uxth	r3, r3
 80064ae:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80064b0:	687a      	ldr	r2, [r7, #4]
 80064b2:	683b      	ldr	r3, [r7, #0]
 80064b4:	781b      	ldrb	r3, [r3, #0]
 80064b6:	009b      	lsls	r3, r3, #2
 80064b8:	4413      	add	r3, r2
 80064ba:	881b      	ldrh	r3, [r3, #0]
 80064bc:	b29b      	uxth	r3, r3
 80064be:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80064c2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80064c6:	84bb      	strh	r3, [r7, #36]	; 0x24
 80064c8:	687a      	ldr	r2, [r7, #4]
 80064ca:	683b      	ldr	r3, [r7, #0]
 80064cc:	781b      	ldrb	r3, [r3, #0]
 80064ce:	009b      	lsls	r3, r3, #2
 80064d0:	441a      	add	r2, r3
 80064d2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80064d4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80064d8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80064dc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80064e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80064e4:	b29b      	uxth	r3, r3
 80064e6:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80064e8:	687a      	ldr	r2, [r7, #4]
 80064ea:	683b      	ldr	r3, [r7, #0]
 80064ec:	781b      	ldrb	r3, [r3, #0]
 80064ee:	009b      	lsls	r3, r3, #2
 80064f0:	4413      	add	r3, r2
 80064f2:	881b      	ldrh	r3, [r3, #0]
 80064f4:	b29b      	uxth	r3, r3
 80064f6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80064fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80064fe:	847b      	strh	r3, [r7, #34]	; 0x22
 8006500:	687a      	ldr	r2, [r7, #4]
 8006502:	683b      	ldr	r3, [r7, #0]
 8006504:	781b      	ldrb	r3, [r3, #0]
 8006506:	009b      	lsls	r3, r3, #2
 8006508:	441a      	add	r2, r3
 800650a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800650c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006510:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006514:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006518:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800651c:	b29b      	uxth	r3, r3
 800651e:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8006520:	2300      	movs	r3, #0
}
 8006522:	4618      	mov	r0, r3
 8006524:	3734      	adds	r7, #52	; 0x34
 8006526:	46bd      	mov	sp, r7
 8006528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800652c:	4770      	bx	lr

0800652e <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800652e:	b580      	push	{r7, lr}
 8006530:	b0c2      	sub	sp, #264	; 0x108
 8006532:	af00      	add	r7, sp, #0
 8006534:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006538:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800653c:	6018      	str	r0, [r3, #0]
 800653e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006542:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006546:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006548:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800654c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	785b      	ldrb	r3, [r3, #1]
 8006554:	2b01      	cmp	r3, #1
 8006556:	f040 867b 	bne.w	8007250 <USB_EPStartXfer+0xd22>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800655a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800655e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	699a      	ldr	r2, [r3, #24]
 8006566:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800656a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	691b      	ldr	r3, [r3, #16]
 8006572:	429a      	cmp	r2, r3
 8006574:	d908      	bls.n	8006588 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8006576:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800657a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	691b      	ldr	r3, [r3, #16]
 8006582:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8006586:	e007      	b.n	8006598 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8006588:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800658c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	699b      	ldr	r3, [r3, #24]
 8006594:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8006598:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800659c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	7b1b      	ldrb	r3, [r3, #12]
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d13a      	bne.n	800661e <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80065a8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80065ac:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	6959      	ldr	r1, [r3, #20]
 80065b4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80065b8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	88da      	ldrh	r2, [r3, #6]
 80065c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80065c4:	b29b      	uxth	r3, r3
 80065c6:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80065ca:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80065ce:	6800      	ldr	r0, [r0, #0]
 80065d0:	f001 fc1d 	bl	8007e0e <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80065d4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80065d8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	613b      	str	r3, [r7, #16]
 80065e0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80065e4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80065ee:	b29b      	uxth	r3, r3
 80065f0:	461a      	mov	r2, r3
 80065f2:	693b      	ldr	r3, [r7, #16]
 80065f4:	4413      	add	r3, r2
 80065f6:	613b      	str	r3, [r7, #16]
 80065f8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80065fc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	781b      	ldrb	r3, [r3, #0]
 8006604:	00da      	lsls	r2, r3, #3
 8006606:	693b      	ldr	r3, [r7, #16]
 8006608:	4413      	add	r3, r2
 800660a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800660e:	60fb      	str	r3, [r7, #12]
 8006610:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006614:	b29a      	uxth	r2, r3
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	801a      	strh	r2, [r3, #0]
 800661a:	f000 bde3 	b.w	80071e4 <USB_EPStartXfer+0xcb6>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 800661e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006622:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	78db      	ldrb	r3, [r3, #3]
 800662a:	2b02      	cmp	r3, #2
 800662c:	f040 843a 	bne.w	8006ea4 <USB_EPStartXfer+0x976>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8006630:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006634:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	6a1a      	ldr	r2, [r3, #32]
 800663c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006640:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	691b      	ldr	r3, [r3, #16]
 8006648:	429a      	cmp	r2, r3
 800664a:	f240 83b7 	bls.w	8006dbc <USB_EPStartXfer+0x88e>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800664e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006652:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006656:	681a      	ldr	r2, [r3, #0]
 8006658:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800665c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	781b      	ldrb	r3, [r3, #0]
 8006664:	009b      	lsls	r3, r3, #2
 8006666:	4413      	add	r3, r2
 8006668:	881b      	ldrh	r3, [r3, #0]
 800666a:	b29b      	uxth	r3, r3
 800666c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006670:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006674:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8006678:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800667c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006680:	681a      	ldr	r2, [r3, #0]
 8006682:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006686:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	781b      	ldrb	r3, [r3, #0]
 800668e:	009b      	lsls	r3, r3, #2
 8006690:	441a      	add	r2, r3
 8006692:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8006696:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800669a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800669e:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80066a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80066a6:	b29b      	uxth	r3, r3
 80066a8:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 80066aa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80066ae:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	6a1a      	ldr	r2, [r3, #32]
 80066b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80066ba:	1ad2      	subs	r2, r2, r3
 80066bc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80066c0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80066c8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80066cc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80066d0:	681a      	ldr	r2, [r3, #0]
 80066d2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80066d6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	781b      	ldrb	r3, [r3, #0]
 80066de:	009b      	lsls	r3, r3, #2
 80066e0:	4413      	add	r3, r2
 80066e2:	881b      	ldrh	r3, [r3, #0]
 80066e4:	b29b      	uxth	r3, r3
 80066e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	f000 81b3 	beq.w	8006a56 <USB_EPStartXfer+0x528>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80066f0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80066f4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	633b      	str	r3, [r7, #48]	; 0x30
 80066fc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006700:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	785b      	ldrb	r3, [r3, #1]
 8006708:	2b00      	cmp	r3, #0
 800670a:	d16d      	bne.n	80067e8 <USB_EPStartXfer+0x2ba>
 800670c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006710:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	62bb      	str	r3, [r7, #40]	; 0x28
 8006718:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800671c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006726:	b29b      	uxth	r3, r3
 8006728:	461a      	mov	r2, r3
 800672a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800672c:	4413      	add	r3, r2
 800672e:	62bb      	str	r3, [r7, #40]	; 0x28
 8006730:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006734:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	781b      	ldrb	r3, [r3, #0]
 800673c:	00da      	lsls	r2, r3, #3
 800673e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006740:	4413      	add	r3, r2
 8006742:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006746:	627b      	str	r3, [r7, #36]	; 0x24
 8006748:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800674c:	2b3e      	cmp	r3, #62	; 0x3e
 800674e:	d91c      	bls.n	800678a <USB_EPStartXfer+0x25c>
 8006750:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006754:	095b      	lsrs	r3, r3, #5
 8006756:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800675a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800675e:	f003 031f 	and.w	r3, r3, #31
 8006762:	2b00      	cmp	r3, #0
 8006764:	d104      	bne.n	8006770 <USB_EPStartXfer+0x242>
 8006766:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800676a:	3b01      	subs	r3, #1
 800676c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006770:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006774:	b29b      	uxth	r3, r3
 8006776:	029b      	lsls	r3, r3, #10
 8006778:	b29b      	uxth	r3, r3
 800677a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800677e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006782:	b29a      	uxth	r2, r3
 8006784:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006786:	801a      	strh	r2, [r3, #0]
 8006788:	e053      	b.n	8006832 <USB_EPStartXfer+0x304>
 800678a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800678e:	2b00      	cmp	r3, #0
 8006790:	d112      	bne.n	80067b8 <USB_EPStartXfer+0x28a>
 8006792:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006794:	881b      	ldrh	r3, [r3, #0]
 8006796:	b29b      	uxth	r3, r3
 8006798:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800679c:	b29a      	uxth	r2, r3
 800679e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067a0:	801a      	strh	r2, [r3, #0]
 80067a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067a4:	881b      	ldrh	r3, [r3, #0]
 80067a6:	b29b      	uxth	r3, r3
 80067a8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80067ac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80067b0:	b29a      	uxth	r2, r3
 80067b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067b4:	801a      	strh	r2, [r3, #0]
 80067b6:	e03c      	b.n	8006832 <USB_EPStartXfer+0x304>
 80067b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80067bc:	085b      	lsrs	r3, r3, #1
 80067be:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80067c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80067c6:	f003 0301 	and.w	r3, r3, #1
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d004      	beq.n	80067d8 <USB_EPStartXfer+0x2aa>
 80067ce:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80067d2:	3301      	adds	r3, #1
 80067d4:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80067d8:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80067dc:	b29b      	uxth	r3, r3
 80067de:	029b      	lsls	r3, r3, #10
 80067e0:	b29a      	uxth	r2, r3
 80067e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067e4:	801a      	strh	r2, [r3, #0]
 80067e6:	e024      	b.n	8006832 <USB_EPStartXfer+0x304>
 80067e8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80067ec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	785b      	ldrb	r3, [r3, #1]
 80067f4:	2b01      	cmp	r3, #1
 80067f6:	d11c      	bne.n	8006832 <USB_EPStartXfer+0x304>
 80067f8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80067fc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006806:	b29b      	uxth	r3, r3
 8006808:	461a      	mov	r2, r3
 800680a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800680c:	4413      	add	r3, r2
 800680e:	633b      	str	r3, [r7, #48]	; 0x30
 8006810:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006814:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	781b      	ldrb	r3, [r3, #0]
 800681c:	00da      	lsls	r2, r3, #3
 800681e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006820:	4413      	add	r3, r2
 8006822:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006826:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006828:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800682c:	b29a      	uxth	r2, r3
 800682e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006830:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8006832:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006836:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	895b      	ldrh	r3, [r3, #10]
 800683e:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006842:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006846:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	6959      	ldr	r1, [r3, #20]
 800684e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006852:	b29b      	uxth	r3, r3
 8006854:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8006858:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800685c:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8006860:	6800      	ldr	r0, [r0, #0]
 8006862:	f001 fad4 	bl	8007e0e <USB_WritePMA>
            ep->xfer_buff += len;
 8006866:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800686a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	695a      	ldr	r2, [r3, #20]
 8006872:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006876:	441a      	add	r2, r3
 8006878:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800687c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8006884:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006888:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	6a1a      	ldr	r2, [r3, #32]
 8006890:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006894:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	691b      	ldr	r3, [r3, #16]
 800689c:	429a      	cmp	r2, r3
 800689e:	d90f      	bls.n	80068c0 <USB_EPStartXfer+0x392>
            {
              ep->xfer_len_db -= len;
 80068a0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80068a4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	6a1a      	ldr	r2, [r3, #32]
 80068ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80068b0:	1ad2      	subs	r2, r2, r3
 80068b2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80068b6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	621a      	str	r2, [r3, #32]
 80068be:	e00e      	b.n	80068de <USB_EPStartXfer+0x3b0>
            }
            else
            {
              len = ep->xfer_len_db;
 80068c0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80068c4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	6a1b      	ldr	r3, [r3, #32]
 80068cc:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 80068d0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80068d4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	2200      	movs	r2, #0
 80068dc:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80068de:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80068e2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	785b      	ldrb	r3, [r3, #1]
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d16d      	bne.n	80069ca <USB_EPStartXfer+0x49c>
 80068ee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80068f2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	61bb      	str	r3, [r7, #24]
 80068fa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80068fe:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006908:	b29b      	uxth	r3, r3
 800690a:	461a      	mov	r2, r3
 800690c:	69bb      	ldr	r3, [r7, #24]
 800690e:	4413      	add	r3, r2
 8006910:	61bb      	str	r3, [r7, #24]
 8006912:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006916:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	781b      	ldrb	r3, [r3, #0]
 800691e:	00da      	lsls	r2, r3, #3
 8006920:	69bb      	ldr	r3, [r7, #24]
 8006922:	4413      	add	r3, r2
 8006924:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006928:	617b      	str	r3, [r7, #20]
 800692a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800692e:	2b3e      	cmp	r3, #62	; 0x3e
 8006930:	d91c      	bls.n	800696c <USB_EPStartXfer+0x43e>
 8006932:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006936:	095b      	lsrs	r3, r3, #5
 8006938:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800693c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006940:	f003 031f 	and.w	r3, r3, #31
 8006944:	2b00      	cmp	r3, #0
 8006946:	d104      	bne.n	8006952 <USB_EPStartXfer+0x424>
 8006948:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800694c:	3b01      	subs	r3, #1
 800694e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006952:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006956:	b29b      	uxth	r3, r3
 8006958:	029b      	lsls	r3, r3, #10
 800695a:	b29b      	uxth	r3, r3
 800695c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006960:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006964:	b29a      	uxth	r2, r3
 8006966:	697b      	ldr	r3, [r7, #20]
 8006968:	801a      	strh	r2, [r3, #0]
 800696a:	e059      	b.n	8006a20 <USB_EPStartXfer+0x4f2>
 800696c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006970:	2b00      	cmp	r3, #0
 8006972:	d112      	bne.n	800699a <USB_EPStartXfer+0x46c>
 8006974:	697b      	ldr	r3, [r7, #20]
 8006976:	881b      	ldrh	r3, [r3, #0]
 8006978:	b29b      	uxth	r3, r3
 800697a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800697e:	b29a      	uxth	r2, r3
 8006980:	697b      	ldr	r3, [r7, #20]
 8006982:	801a      	strh	r2, [r3, #0]
 8006984:	697b      	ldr	r3, [r7, #20]
 8006986:	881b      	ldrh	r3, [r3, #0]
 8006988:	b29b      	uxth	r3, r3
 800698a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800698e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006992:	b29a      	uxth	r2, r3
 8006994:	697b      	ldr	r3, [r7, #20]
 8006996:	801a      	strh	r2, [r3, #0]
 8006998:	e042      	b.n	8006a20 <USB_EPStartXfer+0x4f2>
 800699a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800699e:	085b      	lsrs	r3, r3, #1
 80069a0:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80069a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80069a8:	f003 0301 	and.w	r3, r3, #1
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d004      	beq.n	80069ba <USB_EPStartXfer+0x48c>
 80069b0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80069b4:	3301      	adds	r3, #1
 80069b6:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80069ba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80069be:	b29b      	uxth	r3, r3
 80069c0:	029b      	lsls	r3, r3, #10
 80069c2:	b29a      	uxth	r2, r3
 80069c4:	697b      	ldr	r3, [r7, #20]
 80069c6:	801a      	strh	r2, [r3, #0]
 80069c8:	e02a      	b.n	8006a20 <USB_EPStartXfer+0x4f2>
 80069ca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80069ce:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	785b      	ldrb	r3, [r3, #1]
 80069d6:	2b01      	cmp	r3, #1
 80069d8:	d122      	bne.n	8006a20 <USB_EPStartXfer+0x4f2>
 80069da:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80069de:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	623b      	str	r3, [r7, #32]
 80069e6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80069ea:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80069f4:	b29b      	uxth	r3, r3
 80069f6:	461a      	mov	r2, r3
 80069f8:	6a3b      	ldr	r3, [r7, #32]
 80069fa:	4413      	add	r3, r2
 80069fc:	623b      	str	r3, [r7, #32]
 80069fe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a02:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	781b      	ldrb	r3, [r3, #0]
 8006a0a:	00da      	lsls	r2, r3, #3
 8006a0c:	6a3b      	ldr	r3, [r7, #32]
 8006a0e:	4413      	add	r3, r2
 8006a10:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006a14:	61fb      	str	r3, [r7, #28]
 8006a16:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006a1a:	b29a      	uxth	r2, r3
 8006a1c:	69fb      	ldr	r3, [r7, #28]
 8006a1e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8006a20:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a24:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	891b      	ldrh	r3, [r3, #8]
 8006a2c:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006a30:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a34:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	6959      	ldr	r1, [r3, #20]
 8006a3c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006a40:	b29b      	uxth	r3, r3
 8006a42:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8006a46:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8006a4a:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8006a4e:	6800      	ldr	r0, [r0, #0]
 8006a50:	f001 f9dd 	bl	8007e0e <USB_WritePMA>
 8006a54:	e3c6      	b.n	80071e4 <USB_EPStartXfer+0xcb6>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006a56:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a5a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	785b      	ldrb	r3, [r3, #1]
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d16d      	bne.n	8006b42 <USB_EPStartXfer+0x614>
 8006a66:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a6a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	64bb      	str	r3, [r7, #72]	; 0x48
 8006a72:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a76:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006a80:	b29b      	uxth	r3, r3
 8006a82:	461a      	mov	r2, r3
 8006a84:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006a86:	4413      	add	r3, r2
 8006a88:	64bb      	str	r3, [r7, #72]	; 0x48
 8006a8a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a8e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	781b      	ldrb	r3, [r3, #0]
 8006a96:	00da      	lsls	r2, r3, #3
 8006a98:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006a9a:	4413      	add	r3, r2
 8006a9c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006aa0:	647b      	str	r3, [r7, #68]	; 0x44
 8006aa2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006aa6:	2b3e      	cmp	r3, #62	; 0x3e
 8006aa8:	d91c      	bls.n	8006ae4 <USB_EPStartXfer+0x5b6>
 8006aaa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006aae:	095b      	lsrs	r3, r3, #5
 8006ab0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006ab4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006ab8:	f003 031f 	and.w	r3, r3, #31
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d104      	bne.n	8006aca <USB_EPStartXfer+0x59c>
 8006ac0:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006ac4:	3b01      	subs	r3, #1
 8006ac6:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006aca:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006ace:	b29b      	uxth	r3, r3
 8006ad0:	029b      	lsls	r3, r3, #10
 8006ad2:	b29b      	uxth	r3, r3
 8006ad4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006ad8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006adc:	b29a      	uxth	r2, r3
 8006ade:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006ae0:	801a      	strh	r2, [r3, #0]
 8006ae2:	e059      	b.n	8006b98 <USB_EPStartXfer+0x66a>
 8006ae4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d112      	bne.n	8006b12 <USB_EPStartXfer+0x5e4>
 8006aec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006aee:	881b      	ldrh	r3, [r3, #0]
 8006af0:	b29b      	uxth	r3, r3
 8006af2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006af6:	b29a      	uxth	r2, r3
 8006af8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006afa:	801a      	strh	r2, [r3, #0]
 8006afc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006afe:	881b      	ldrh	r3, [r3, #0]
 8006b00:	b29b      	uxth	r3, r3
 8006b02:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006b06:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006b0a:	b29a      	uxth	r2, r3
 8006b0c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006b0e:	801a      	strh	r2, [r3, #0]
 8006b10:	e042      	b.n	8006b98 <USB_EPStartXfer+0x66a>
 8006b12:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006b16:	085b      	lsrs	r3, r3, #1
 8006b18:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006b1c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006b20:	f003 0301 	and.w	r3, r3, #1
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d004      	beq.n	8006b32 <USB_EPStartXfer+0x604>
 8006b28:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006b2c:	3301      	adds	r3, #1
 8006b2e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006b32:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006b36:	b29b      	uxth	r3, r3
 8006b38:	029b      	lsls	r3, r3, #10
 8006b3a:	b29a      	uxth	r2, r3
 8006b3c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006b3e:	801a      	strh	r2, [r3, #0]
 8006b40:	e02a      	b.n	8006b98 <USB_EPStartXfer+0x66a>
 8006b42:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b46:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	785b      	ldrb	r3, [r3, #1]
 8006b4e:	2b01      	cmp	r3, #1
 8006b50:	d122      	bne.n	8006b98 <USB_EPStartXfer+0x66a>
 8006b52:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b56:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	653b      	str	r3, [r7, #80]	; 0x50
 8006b5e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b62:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006b6c:	b29b      	uxth	r3, r3
 8006b6e:	461a      	mov	r2, r3
 8006b70:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006b72:	4413      	add	r3, r2
 8006b74:	653b      	str	r3, [r7, #80]	; 0x50
 8006b76:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b7a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	781b      	ldrb	r3, [r3, #0]
 8006b82:	00da      	lsls	r2, r3, #3
 8006b84:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006b86:	4413      	add	r3, r2
 8006b88:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006b8c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006b8e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006b92:	b29a      	uxth	r2, r3
 8006b94:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006b96:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8006b98:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b9c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	891b      	ldrh	r3, [r3, #8]
 8006ba4:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006ba8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006bac:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	6959      	ldr	r1, [r3, #20]
 8006bb4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006bb8:	b29b      	uxth	r3, r3
 8006bba:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8006bbe:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8006bc2:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8006bc6:	6800      	ldr	r0, [r0, #0]
 8006bc8:	f001 f921 	bl	8007e0e <USB_WritePMA>
            ep->xfer_buff += len;
 8006bcc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006bd0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	695a      	ldr	r2, [r3, #20]
 8006bd8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006bdc:	441a      	add	r2, r3
 8006bde:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006be2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8006bea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006bee:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	6a1a      	ldr	r2, [r3, #32]
 8006bf6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006bfa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	691b      	ldr	r3, [r3, #16]
 8006c02:	429a      	cmp	r2, r3
 8006c04:	d90f      	bls.n	8006c26 <USB_EPStartXfer+0x6f8>
            {
              ep->xfer_len_db -= len;
 8006c06:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c0a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	6a1a      	ldr	r2, [r3, #32]
 8006c12:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006c16:	1ad2      	subs	r2, r2, r3
 8006c18:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c1c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	621a      	str	r2, [r3, #32]
 8006c24:	e00e      	b.n	8006c44 <USB_EPStartXfer+0x716>
            }
            else
            {
              len = ep->xfer_len_db;
 8006c26:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c2a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	6a1b      	ldr	r3, [r3, #32]
 8006c32:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8006c36:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c3a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	2200      	movs	r2, #0
 8006c42:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006c44:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c48:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	643b      	str	r3, [r7, #64]	; 0x40
 8006c50:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c54:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	785b      	ldrb	r3, [r3, #1]
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d16d      	bne.n	8006d3c <USB_EPStartXfer+0x80e>
 8006c60:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c64:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	63bb      	str	r3, [r7, #56]	; 0x38
 8006c6c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c70:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006c7a:	b29b      	uxth	r3, r3
 8006c7c:	461a      	mov	r2, r3
 8006c7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c80:	4413      	add	r3, r2
 8006c82:	63bb      	str	r3, [r7, #56]	; 0x38
 8006c84:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c88:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	781b      	ldrb	r3, [r3, #0]
 8006c90:	00da      	lsls	r2, r3, #3
 8006c92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c94:	4413      	add	r3, r2
 8006c96:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006c9a:	637b      	str	r3, [r7, #52]	; 0x34
 8006c9c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006ca0:	2b3e      	cmp	r3, #62	; 0x3e
 8006ca2:	d91c      	bls.n	8006cde <USB_EPStartXfer+0x7b0>
 8006ca4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006ca8:	095b      	lsrs	r3, r3, #5
 8006caa:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006cae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006cb2:	f003 031f 	and.w	r3, r3, #31
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d104      	bne.n	8006cc4 <USB_EPStartXfer+0x796>
 8006cba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006cbe:	3b01      	subs	r3, #1
 8006cc0:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006cc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006cc8:	b29b      	uxth	r3, r3
 8006cca:	029b      	lsls	r3, r3, #10
 8006ccc:	b29b      	uxth	r3, r3
 8006cce:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006cd2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006cd6:	b29a      	uxth	r2, r3
 8006cd8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006cda:	801a      	strh	r2, [r3, #0]
 8006cdc:	e053      	b.n	8006d86 <USB_EPStartXfer+0x858>
 8006cde:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d112      	bne.n	8006d0c <USB_EPStartXfer+0x7de>
 8006ce6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ce8:	881b      	ldrh	r3, [r3, #0]
 8006cea:	b29b      	uxth	r3, r3
 8006cec:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006cf0:	b29a      	uxth	r2, r3
 8006cf2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006cf4:	801a      	strh	r2, [r3, #0]
 8006cf6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006cf8:	881b      	ldrh	r3, [r3, #0]
 8006cfa:	b29b      	uxth	r3, r3
 8006cfc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006d00:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006d04:	b29a      	uxth	r2, r3
 8006d06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d08:	801a      	strh	r2, [r3, #0]
 8006d0a:	e03c      	b.n	8006d86 <USB_EPStartXfer+0x858>
 8006d0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006d10:	085b      	lsrs	r3, r3, #1
 8006d12:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006d16:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006d1a:	f003 0301 	and.w	r3, r3, #1
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d004      	beq.n	8006d2c <USB_EPStartXfer+0x7fe>
 8006d22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006d26:	3301      	adds	r3, #1
 8006d28:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006d2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006d30:	b29b      	uxth	r3, r3
 8006d32:	029b      	lsls	r3, r3, #10
 8006d34:	b29a      	uxth	r2, r3
 8006d36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d38:	801a      	strh	r2, [r3, #0]
 8006d3a:	e024      	b.n	8006d86 <USB_EPStartXfer+0x858>
 8006d3c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d40:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	785b      	ldrb	r3, [r3, #1]
 8006d48:	2b01      	cmp	r3, #1
 8006d4a:	d11c      	bne.n	8006d86 <USB_EPStartXfer+0x858>
 8006d4c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d50:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006d5a:	b29b      	uxth	r3, r3
 8006d5c:	461a      	mov	r2, r3
 8006d5e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006d60:	4413      	add	r3, r2
 8006d62:	643b      	str	r3, [r7, #64]	; 0x40
 8006d64:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d68:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	781b      	ldrb	r3, [r3, #0]
 8006d70:	00da      	lsls	r2, r3, #3
 8006d72:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006d74:	4413      	add	r3, r2
 8006d76:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006d7a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006d7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006d80:	b29a      	uxth	r2, r3
 8006d82:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006d84:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8006d86:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d8a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	895b      	ldrh	r3, [r3, #10]
 8006d92:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006d96:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d9a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	6959      	ldr	r1, [r3, #20]
 8006da2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006da6:	b29b      	uxth	r3, r3
 8006da8:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8006dac:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8006db0:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8006db4:	6800      	ldr	r0, [r0, #0]
 8006db6:	f001 f82a 	bl	8007e0e <USB_WritePMA>
 8006dba:	e213      	b.n	80071e4 <USB_EPStartXfer+0xcb6>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8006dbc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006dc0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	6a1b      	ldr	r3, [r3, #32]
 8006dc8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8006dcc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006dd0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006dd4:	681a      	ldr	r2, [r3, #0]
 8006dd6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006dda:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	781b      	ldrb	r3, [r3, #0]
 8006de2:	009b      	lsls	r3, r3, #2
 8006de4:	4413      	add	r3, r2
 8006de6:	881b      	ldrh	r3, [r3, #0]
 8006de8:	b29b      	uxth	r3, r3
 8006dea:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8006dee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006df2:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8006df6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006dfa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006dfe:	681a      	ldr	r2, [r3, #0]
 8006e00:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e04:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	781b      	ldrb	r3, [r3, #0]
 8006e0c:	009b      	lsls	r3, r3, #2
 8006e0e:	441a      	add	r2, r3
 8006e10:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8006e14:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006e18:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006e1c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006e20:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006e24:	b29b      	uxth	r3, r3
 8006e26:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8006e28:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e2c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006e34:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e38:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006e42:	b29b      	uxth	r3, r3
 8006e44:	461a      	mov	r2, r3
 8006e46:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006e48:	4413      	add	r3, r2
 8006e4a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006e4c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e50:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	781b      	ldrb	r3, [r3, #0]
 8006e58:	00da      	lsls	r2, r3, #3
 8006e5a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006e5c:	4413      	add	r3, r2
 8006e5e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006e62:	65bb      	str	r3, [r7, #88]	; 0x58
 8006e64:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006e68:	b29a      	uxth	r2, r3
 8006e6a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006e6c:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8006e6e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e72:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	891b      	ldrh	r3, [r3, #8]
 8006e7a:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006e7e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e82:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	6959      	ldr	r1, [r3, #20]
 8006e8a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006e8e:	b29b      	uxth	r3, r3
 8006e90:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8006e94:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8006e98:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8006e9c:	6800      	ldr	r0, [r0, #0]
 8006e9e:	f000 ffb6 	bl	8007e0e <USB_WritePMA>
 8006ea2:	e19f      	b.n	80071e4 <USB_EPStartXfer+0xcb6>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8006ea4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ea8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	6a1a      	ldr	r2, [r3, #32]
 8006eb0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006eb4:	1ad2      	subs	r2, r2, r3
 8006eb6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006eba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8006ec2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ec6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006eca:	681a      	ldr	r2, [r3, #0]
 8006ecc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ed0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	781b      	ldrb	r3, [r3, #0]
 8006ed8:	009b      	lsls	r3, r3, #2
 8006eda:	4413      	add	r3, r2
 8006edc:	881b      	ldrh	r3, [r3, #0]
 8006ede:	b29b      	uxth	r3, r3
 8006ee0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	f000 80bc 	beq.w	8007062 <USB_EPStartXfer+0xb34>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006eea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006eee:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	673b      	str	r3, [r7, #112]	; 0x70
 8006ef6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006efa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	785b      	ldrb	r3, [r3, #1]
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d16d      	bne.n	8006fe2 <USB_EPStartXfer+0xab4>
 8006f06:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f0a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	66bb      	str	r3, [r7, #104]	; 0x68
 8006f12:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f16:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006f20:	b29b      	uxth	r3, r3
 8006f22:	461a      	mov	r2, r3
 8006f24:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006f26:	4413      	add	r3, r2
 8006f28:	66bb      	str	r3, [r7, #104]	; 0x68
 8006f2a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f2e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	781b      	ldrb	r3, [r3, #0]
 8006f36:	00da      	lsls	r2, r3, #3
 8006f38:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006f3a:	4413      	add	r3, r2
 8006f3c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006f40:	667b      	str	r3, [r7, #100]	; 0x64
 8006f42:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006f46:	2b3e      	cmp	r3, #62	; 0x3e
 8006f48:	d91c      	bls.n	8006f84 <USB_EPStartXfer+0xa56>
 8006f4a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006f4e:	095b      	lsrs	r3, r3, #5
 8006f50:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006f54:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006f58:	f003 031f 	and.w	r3, r3, #31
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	d104      	bne.n	8006f6a <USB_EPStartXfer+0xa3c>
 8006f60:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8006f64:	3b01      	subs	r3, #1
 8006f66:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006f6a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8006f6e:	b29b      	uxth	r3, r3
 8006f70:	029b      	lsls	r3, r3, #10
 8006f72:	b29b      	uxth	r3, r3
 8006f74:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006f78:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006f7c:	b29a      	uxth	r2, r3
 8006f7e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006f80:	801a      	strh	r2, [r3, #0]
 8006f82:	e053      	b.n	800702c <USB_EPStartXfer+0xafe>
 8006f84:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d112      	bne.n	8006fb2 <USB_EPStartXfer+0xa84>
 8006f8c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006f8e:	881b      	ldrh	r3, [r3, #0]
 8006f90:	b29b      	uxth	r3, r3
 8006f92:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006f96:	b29a      	uxth	r2, r3
 8006f98:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006f9a:	801a      	strh	r2, [r3, #0]
 8006f9c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006f9e:	881b      	ldrh	r3, [r3, #0]
 8006fa0:	b29b      	uxth	r3, r3
 8006fa2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006fa6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006faa:	b29a      	uxth	r2, r3
 8006fac:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006fae:	801a      	strh	r2, [r3, #0]
 8006fb0:	e03c      	b.n	800702c <USB_EPStartXfer+0xafe>
 8006fb2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006fb6:	085b      	lsrs	r3, r3, #1
 8006fb8:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006fbc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006fc0:	f003 0301 	and.w	r3, r3, #1
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d004      	beq.n	8006fd2 <USB_EPStartXfer+0xaa4>
 8006fc8:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8006fcc:	3301      	adds	r3, #1
 8006fce:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006fd2:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8006fd6:	b29b      	uxth	r3, r3
 8006fd8:	029b      	lsls	r3, r3, #10
 8006fda:	b29a      	uxth	r2, r3
 8006fdc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006fde:	801a      	strh	r2, [r3, #0]
 8006fe0:	e024      	b.n	800702c <USB_EPStartXfer+0xafe>
 8006fe2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006fe6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	785b      	ldrb	r3, [r3, #1]
 8006fee:	2b01      	cmp	r3, #1
 8006ff0:	d11c      	bne.n	800702c <USB_EPStartXfer+0xafe>
 8006ff2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ff6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007000:	b29b      	uxth	r3, r3
 8007002:	461a      	mov	r2, r3
 8007004:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007006:	4413      	add	r3, r2
 8007008:	673b      	str	r3, [r7, #112]	; 0x70
 800700a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800700e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	781b      	ldrb	r3, [r3, #0]
 8007016:	00da      	lsls	r2, r3, #3
 8007018:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800701a:	4413      	add	r3, r2
 800701c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007020:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007022:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007026:	b29a      	uxth	r2, r3
 8007028:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800702a:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800702c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007030:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	895b      	ldrh	r3, [r3, #10]
 8007038:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800703c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007040:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	6959      	ldr	r1, [r3, #20]
 8007048:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800704c:	b29b      	uxth	r3, r3
 800704e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8007052:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8007056:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800705a:	6800      	ldr	r0, [r0, #0]
 800705c:	f000 fed7 	bl	8007e0e <USB_WritePMA>
 8007060:	e0c0      	b.n	80071e4 <USB_EPStartXfer+0xcb6>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007062:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007066:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	785b      	ldrb	r3, [r3, #1]
 800706e:	2b00      	cmp	r3, #0
 8007070:	d16d      	bne.n	800714e <USB_EPStartXfer+0xc20>
 8007072:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007076:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800707e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007082:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800708c:	b29b      	uxth	r3, r3
 800708e:	461a      	mov	r2, r3
 8007090:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007092:	4413      	add	r3, r2
 8007094:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007096:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800709a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	781b      	ldrb	r3, [r3, #0]
 80070a2:	00da      	lsls	r2, r3, #3
 80070a4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80070a6:	4413      	add	r3, r2
 80070a8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80070ac:	67bb      	str	r3, [r7, #120]	; 0x78
 80070ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80070b2:	2b3e      	cmp	r3, #62	; 0x3e
 80070b4:	d91c      	bls.n	80070f0 <USB_EPStartXfer+0xbc2>
 80070b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80070ba:	095b      	lsrs	r3, r3, #5
 80070bc:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80070c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80070c4:	f003 031f 	and.w	r3, r3, #31
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d104      	bne.n	80070d6 <USB_EPStartXfer+0xba8>
 80070cc:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80070d0:	3b01      	subs	r3, #1
 80070d2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80070d6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80070da:	b29b      	uxth	r3, r3
 80070dc:	029b      	lsls	r3, r3, #10
 80070de:	b29b      	uxth	r3, r3
 80070e0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80070e4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80070e8:	b29a      	uxth	r2, r3
 80070ea:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80070ec:	801a      	strh	r2, [r3, #0]
 80070ee:	e05f      	b.n	80071b0 <USB_EPStartXfer+0xc82>
 80070f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d112      	bne.n	800711e <USB_EPStartXfer+0xbf0>
 80070f8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80070fa:	881b      	ldrh	r3, [r3, #0]
 80070fc:	b29b      	uxth	r3, r3
 80070fe:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007102:	b29a      	uxth	r2, r3
 8007104:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007106:	801a      	strh	r2, [r3, #0]
 8007108:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800710a:	881b      	ldrh	r3, [r3, #0]
 800710c:	b29b      	uxth	r3, r3
 800710e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007112:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007116:	b29a      	uxth	r2, r3
 8007118:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800711a:	801a      	strh	r2, [r3, #0]
 800711c:	e048      	b.n	80071b0 <USB_EPStartXfer+0xc82>
 800711e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007122:	085b      	lsrs	r3, r3, #1
 8007124:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8007128:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800712c:	f003 0301 	and.w	r3, r3, #1
 8007130:	2b00      	cmp	r3, #0
 8007132:	d004      	beq.n	800713e <USB_EPStartXfer+0xc10>
 8007134:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8007138:	3301      	adds	r3, #1
 800713a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800713e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8007142:	b29b      	uxth	r3, r3
 8007144:	029b      	lsls	r3, r3, #10
 8007146:	b29a      	uxth	r2, r3
 8007148:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800714a:	801a      	strh	r2, [r3, #0]
 800714c:	e030      	b.n	80071b0 <USB_EPStartXfer+0xc82>
 800714e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007152:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	785b      	ldrb	r3, [r3, #1]
 800715a:	2b01      	cmp	r3, #1
 800715c:	d128      	bne.n	80071b0 <USB_EPStartXfer+0xc82>
 800715e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007162:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800716c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007170:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800717a:	b29b      	uxth	r3, r3
 800717c:	461a      	mov	r2, r3
 800717e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007182:	4413      	add	r3, r2
 8007184:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007188:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800718c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	781b      	ldrb	r3, [r3, #0]
 8007194:	00da      	lsls	r2, r3, #3
 8007196:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800719a:	4413      	add	r3, r2
 800719c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80071a0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80071a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80071a8:	b29a      	uxth	r2, r3
 80071aa:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80071ae:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80071b0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80071b4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	891b      	ldrh	r3, [r3, #8]
 80071bc:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80071c0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80071c4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	6959      	ldr	r1, [r3, #20]
 80071cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80071d0:	b29b      	uxth	r3, r3
 80071d2:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80071d6:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80071da:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80071de:	6800      	ldr	r0, [r0, #0]
 80071e0:	f000 fe15 	bl	8007e0e <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 80071e4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80071e8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80071ec:	681a      	ldr	r2, [r3, #0]
 80071ee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80071f2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	781b      	ldrb	r3, [r3, #0]
 80071fa:	009b      	lsls	r3, r3, #2
 80071fc:	4413      	add	r3, r2
 80071fe:	881b      	ldrh	r3, [r3, #0]
 8007200:	b29b      	uxth	r3, r3
 8007202:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007206:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800720a:	817b      	strh	r3, [r7, #10]
 800720c:	897b      	ldrh	r3, [r7, #10]
 800720e:	f083 0310 	eor.w	r3, r3, #16
 8007212:	817b      	strh	r3, [r7, #10]
 8007214:	897b      	ldrh	r3, [r7, #10]
 8007216:	f083 0320 	eor.w	r3, r3, #32
 800721a:	817b      	strh	r3, [r7, #10]
 800721c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007220:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007224:	681a      	ldr	r2, [r3, #0]
 8007226:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800722a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	781b      	ldrb	r3, [r3, #0]
 8007232:	009b      	lsls	r3, r3, #2
 8007234:	441a      	add	r2, r3
 8007236:	897b      	ldrh	r3, [r7, #10]
 8007238:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800723c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007240:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007244:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007248:	b29b      	uxth	r3, r3
 800724a:	8013      	strh	r3, [r2, #0]
 800724c:	f000 bc9f 	b.w	8007b8e <USB_EPStartXfer+0x1660>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8007250:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007254:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	7b1b      	ldrb	r3, [r3, #12]
 800725c:	2b00      	cmp	r3, #0
 800725e:	f040 80ae 	bne.w	80073be <USB_EPStartXfer+0xe90>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8007262:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007266:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	699a      	ldr	r2, [r3, #24]
 800726e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007272:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	691b      	ldr	r3, [r3, #16]
 800727a:	429a      	cmp	r2, r3
 800727c:	d917      	bls.n	80072ae <USB_EPStartXfer+0xd80>
      {
        len = ep->maxpacket;
 800727e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007282:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	691b      	ldr	r3, [r3, #16]
 800728a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 800728e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007292:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	699a      	ldr	r2, [r3, #24]
 800729a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800729e:	1ad2      	subs	r2, r2, r3
 80072a0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80072a4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	619a      	str	r2, [r3, #24]
 80072ac:	e00e      	b.n	80072cc <USB_EPStartXfer+0xd9e>
      }
      else
      {
        len = ep->xfer_len;
 80072ae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80072b2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	699b      	ldr	r3, [r3, #24]
 80072ba:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 80072be:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80072c2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	2200      	movs	r2, #0
 80072ca:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 80072cc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80072d0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80072da:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80072de:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80072e8:	b29b      	uxth	r3, r3
 80072ea:	461a      	mov	r2, r3
 80072ec:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80072f0:	4413      	add	r3, r2
 80072f2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80072f6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80072fa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	781b      	ldrb	r3, [r3, #0]
 8007302:	00da      	lsls	r2, r3, #3
 8007304:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007308:	4413      	add	r3, r2
 800730a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800730e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8007312:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007316:	2b3e      	cmp	r3, #62	; 0x3e
 8007318:	d91d      	bls.n	8007356 <USB_EPStartXfer+0xe28>
 800731a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800731e:	095b      	lsrs	r3, r3, #5
 8007320:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007324:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007328:	f003 031f 	and.w	r3, r3, #31
 800732c:	2b00      	cmp	r3, #0
 800732e:	d104      	bne.n	800733a <USB_EPStartXfer+0xe0c>
 8007330:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007334:	3b01      	subs	r3, #1
 8007336:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800733a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800733e:	b29b      	uxth	r3, r3
 8007340:	029b      	lsls	r3, r3, #10
 8007342:	b29b      	uxth	r3, r3
 8007344:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007348:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800734c:	b29a      	uxth	r2, r3
 800734e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007352:	801a      	strh	r2, [r3, #0]
 8007354:	e3e1      	b.n	8007b1a <USB_EPStartXfer+0x15ec>
 8007356:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800735a:	2b00      	cmp	r3, #0
 800735c:	d116      	bne.n	800738c <USB_EPStartXfer+0xe5e>
 800735e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007362:	881b      	ldrh	r3, [r3, #0]
 8007364:	b29b      	uxth	r3, r3
 8007366:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800736a:	b29a      	uxth	r2, r3
 800736c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007370:	801a      	strh	r2, [r3, #0]
 8007372:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007376:	881b      	ldrh	r3, [r3, #0]
 8007378:	b29b      	uxth	r3, r3
 800737a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800737e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007382:	b29a      	uxth	r2, r3
 8007384:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007388:	801a      	strh	r2, [r3, #0]
 800738a:	e3c6      	b.n	8007b1a <USB_EPStartXfer+0x15ec>
 800738c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007390:	085b      	lsrs	r3, r3, #1
 8007392:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007396:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800739a:	f003 0301 	and.w	r3, r3, #1
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d004      	beq.n	80073ac <USB_EPStartXfer+0xe7e>
 80073a2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80073a6:	3301      	adds	r3, #1
 80073a8:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80073ac:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80073b0:	b29b      	uxth	r3, r3
 80073b2:	029b      	lsls	r3, r3, #10
 80073b4:	b29a      	uxth	r2, r3
 80073b6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80073ba:	801a      	strh	r2, [r3, #0]
 80073bc:	e3ad      	b.n	8007b1a <USB_EPStartXfer+0x15ec>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 80073be:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80073c2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	78db      	ldrb	r3, [r3, #3]
 80073ca:	2b02      	cmp	r3, #2
 80073cc:	f040 8200 	bne.w	80077d0 <USB_EPStartXfer+0x12a2>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 80073d0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80073d4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	785b      	ldrb	r3, [r3, #1]
 80073dc:	2b00      	cmp	r3, #0
 80073de:	f040 8091 	bne.w	8007504 <USB_EPStartXfer+0xfd6>
 80073e2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80073e6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80073f0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80073f4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80073fe:	b29b      	uxth	r3, r3
 8007400:	461a      	mov	r2, r3
 8007402:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007406:	4413      	add	r3, r2
 8007408:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800740c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007410:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	781b      	ldrb	r3, [r3, #0]
 8007418:	00da      	lsls	r2, r3, #3
 800741a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800741e:	4413      	add	r3, r2
 8007420:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007424:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8007428:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800742c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	691b      	ldr	r3, [r3, #16]
 8007434:	2b3e      	cmp	r3, #62	; 0x3e
 8007436:	d925      	bls.n	8007484 <USB_EPStartXfer+0xf56>
 8007438:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800743c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	691b      	ldr	r3, [r3, #16]
 8007444:	095b      	lsrs	r3, r3, #5
 8007446:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800744a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800744e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	691b      	ldr	r3, [r3, #16]
 8007456:	f003 031f 	and.w	r3, r3, #31
 800745a:	2b00      	cmp	r3, #0
 800745c:	d104      	bne.n	8007468 <USB_EPStartXfer+0xf3a>
 800745e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007462:	3b01      	subs	r3, #1
 8007464:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007468:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800746c:	b29b      	uxth	r3, r3
 800746e:	029b      	lsls	r3, r3, #10
 8007470:	b29b      	uxth	r3, r3
 8007472:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007476:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800747a:	b29a      	uxth	r2, r3
 800747c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007480:	801a      	strh	r2, [r3, #0]
 8007482:	e074      	b.n	800756e <USB_EPStartXfer+0x1040>
 8007484:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007488:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	691b      	ldr	r3, [r3, #16]
 8007490:	2b00      	cmp	r3, #0
 8007492:	d116      	bne.n	80074c2 <USB_EPStartXfer+0xf94>
 8007494:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007498:	881b      	ldrh	r3, [r3, #0]
 800749a:	b29b      	uxth	r3, r3
 800749c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80074a0:	b29a      	uxth	r2, r3
 80074a2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80074a6:	801a      	strh	r2, [r3, #0]
 80074a8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80074ac:	881b      	ldrh	r3, [r3, #0]
 80074ae:	b29b      	uxth	r3, r3
 80074b0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80074b4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80074b8:	b29a      	uxth	r2, r3
 80074ba:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80074be:	801a      	strh	r2, [r3, #0]
 80074c0:	e055      	b.n	800756e <USB_EPStartXfer+0x1040>
 80074c2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80074c6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	691b      	ldr	r3, [r3, #16]
 80074ce:	085b      	lsrs	r3, r3, #1
 80074d0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80074d4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80074d8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	691b      	ldr	r3, [r3, #16]
 80074e0:	f003 0301 	and.w	r3, r3, #1
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d004      	beq.n	80074f2 <USB_EPStartXfer+0xfc4>
 80074e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80074ec:	3301      	adds	r3, #1
 80074ee:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80074f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80074f6:	b29b      	uxth	r3, r3
 80074f8:	029b      	lsls	r3, r3, #10
 80074fa:	b29a      	uxth	r2, r3
 80074fc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007500:	801a      	strh	r2, [r3, #0]
 8007502:	e034      	b.n	800756e <USB_EPStartXfer+0x1040>
 8007504:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007508:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	785b      	ldrb	r3, [r3, #1]
 8007510:	2b01      	cmp	r3, #1
 8007512:	d12c      	bne.n	800756e <USB_EPStartXfer+0x1040>
 8007514:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007518:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007522:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007526:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007530:	b29b      	uxth	r3, r3
 8007532:	461a      	mov	r2, r3
 8007534:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007538:	4413      	add	r3, r2
 800753a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800753e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007542:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	781b      	ldrb	r3, [r3, #0]
 800754a:	00da      	lsls	r2, r3, #3
 800754c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007550:	4413      	add	r3, r2
 8007552:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007556:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800755a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800755e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	691b      	ldr	r3, [r3, #16]
 8007566:	b29a      	uxth	r2, r3
 8007568:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800756c:	801a      	strh	r2, [r3, #0]
 800756e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007572:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800757c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007580:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	785b      	ldrb	r3, [r3, #1]
 8007588:	2b00      	cmp	r3, #0
 800758a:	f040 8091 	bne.w	80076b0 <USB_EPStartXfer+0x1182>
 800758e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007592:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800759c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80075a0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80075aa:	b29b      	uxth	r3, r3
 80075ac:	461a      	mov	r2, r3
 80075ae:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80075b2:	4413      	add	r3, r2
 80075b4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80075b8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80075bc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	781b      	ldrb	r3, [r3, #0]
 80075c4:	00da      	lsls	r2, r3, #3
 80075c6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80075ca:	4413      	add	r3, r2
 80075cc:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80075d0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80075d4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80075d8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	691b      	ldr	r3, [r3, #16]
 80075e0:	2b3e      	cmp	r3, #62	; 0x3e
 80075e2:	d925      	bls.n	8007630 <USB_EPStartXfer+0x1102>
 80075e4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80075e8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	691b      	ldr	r3, [r3, #16]
 80075f0:	095b      	lsrs	r3, r3, #5
 80075f2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80075f6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80075fa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	691b      	ldr	r3, [r3, #16]
 8007602:	f003 031f 	and.w	r3, r3, #31
 8007606:	2b00      	cmp	r3, #0
 8007608:	d104      	bne.n	8007614 <USB_EPStartXfer+0x10e6>
 800760a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800760e:	3b01      	subs	r3, #1
 8007610:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007614:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007618:	b29b      	uxth	r3, r3
 800761a:	029b      	lsls	r3, r3, #10
 800761c:	b29b      	uxth	r3, r3
 800761e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007622:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007626:	b29a      	uxth	r2, r3
 8007628:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800762c:	801a      	strh	r2, [r3, #0]
 800762e:	e06d      	b.n	800770c <USB_EPStartXfer+0x11de>
 8007630:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007634:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	691b      	ldr	r3, [r3, #16]
 800763c:	2b00      	cmp	r3, #0
 800763e:	d116      	bne.n	800766e <USB_EPStartXfer+0x1140>
 8007640:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007644:	881b      	ldrh	r3, [r3, #0]
 8007646:	b29b      	uxth	r3, r3
 8007648:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800764c:	b29a      	uxth	r2, r3
 800764e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007652:	801a      	strh	r2, [r3, #0]
 8007654:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007658:	881b      	ldrh	r3, [r3, #0]
 800765a:	b29b      	uxth	r3, r3
 800765c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007660:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007664:	b29a      	uxth	r2, r3
 8007666:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800766a:	801a      	strh	r2, [r3, #0]
 800766c:	e04e      	b.n	800770c <USB_EPStartXfer+0x11de>
 800766e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007672:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	691b      	ldr	r3, [r3, #16]
 800767a:	085b      	lsrs	r3, r3, #1
 800767c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007680:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007684:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	691b      	ldr	r3, [r3, #16]
 800768c:	f003 0301 	and.w	r3, r3, #1
 8007690:	2b00      	cmp	r3, #0
 8007692:	d004      	beq.n	800769e <USB_EPStartXfer+0x1170>
 8007694:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007698:	3301      	adds	r3, #1
 800769a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800769e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80076a2:	b29b      	uxth	r3, r3
 80076a4:	029b      	lsls	r3, r3, #10
 80076a6:	b29a      	uxth	r2, r3
 80076a8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80076ac:	801a      	strh	r2, [r3, #0]
 80076ae:	e02d      	b.n	800770c <USB_EPStartXfer+0x11de>
 80076b0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80076b4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	785b      	ldrb	r3, [r3, #1]
 80076bc:	2b01      	cmp	r3, #1
 80076be:	d125      	bne.n	800770c <USB_EPStartXfer+0x11de>
 80076c0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80076c4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80076ce:	b29b      	uxth	r3, r3
 80076d0:	461a      	mov	r2, r3
 80076d2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80076d6:	4413      	add	r3, r2
 80076d8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80076dc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80076e0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	781b      	ldrb	r3, [r3, #0]
 80076e8:	00da      	lsls	r2, r3, #3
 80076ea:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80076ee:	4413      	add	r3, r2
 80076f0:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80076f4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80076f8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80076fc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	691b      	ldr	r3, [r3, #16]
 8007704:	b29a      	uxth	r2, r3
 8007706:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800770a:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800770c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007710:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	69db      	ldr	r3, [r3, #28]
 8007718:	2b00      	cmp	r3, #0
 800771a:	f000 81fe 	beq.w	8007b1a <USB_EPStartXfer+0x15ec>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800771e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007722:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007726:	681a      	ldr	r2, [r3, #0]
 8007728:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800772c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	781b      	ldrb	r3, [r3, #0]
 8007734:	009b      	lsls	r3, r3, #2
 8007736:	4413      	add	r3, r2
 8007738:	881b      	ldrh	r3, [r3, #0]
 800773a:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800773e:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8007742:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007746:	2b00      	cmp	r3, #0
 8007748:	d005      	beq.n	8007756 <USB_EPStartXfer+0x1228>
 800774a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800774e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007752:	2b00      	cmp	r3, #0
 8007754:	d10d      	bne.n	8007772 <USB_EPStartXfer+0x1244>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8007756:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800775a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800775e:	2b00      	cmp	r3, #0
 8007760:	f040 81db 	bne.w	8007b1a <USB_EPStartXfer+0x15ec>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8007764:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8007768:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800776c:	2b00      	cmp	r3, #0
 800776e:	f040 81d4 	bne.w	8007b1a <USB_EPStartXfer+0x15ec>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8007772:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007776:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800777a:	681a      	ldr	r2, [r3, #0]
 800777c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007780:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	781b      	ldrb	r3, [r3, #0]
 8007788:	009b      	lsls	r3, r3, #2
 800778a:	4413      	add	r3, r2
 800778c:	881b      	ldrh	r3, [r3, #0]
 800778e:	b29b      	uxth	r3, r3
 8007790:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007794:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007798:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 800779c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80077a0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80077a4:	681a      	ldr	r2, [r3, #0]
 80077a6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80077aa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	781b      	ldrb	r3, [r3, #0]
 80077b2:	009b      	lsls	r3, r3, #2
 80077b4:	441a      	add	r2, r3
 80077b6:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 80077ba:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80077be:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80077c2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80077c6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80077ca:	b29b      	uxth	r3, r3
 80077cc:	8013      	strh	r3, [r2, #0]
 80077ce:	e1a4      	b.n	8007b1a <USB_EPStartXfer+0x15ec>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 80077d0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80077d4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	78db      	ldrb	r3, [r3, #3]
 80077dc:	2b01      	cmp	r3, #1
 80077de:	f040 819a 	bne.w	8007b16 <USB_EPStartXfer+0x15e8>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 80077e2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80077e6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	699a      	ldr	r2, [r3, #24]
 80077ee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80077f2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	691b      	ldr	r3, [r3, #16]
 80077fa:	429a      	cmp	r2, r3
 80077fc:	d917      	bls.n	800782e <USB_EPStartXfer+0x1300>
        {
          len = ep->maxpacket;
 80077fe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007802:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	691b      	ldr	r3, [r3, #16]
 800780a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 800780e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007812:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	699a      	ldr	r2, [r3, #24]
 800781a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800781e:	1ad2      	subs	r2, r2, r3
 8007820:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007824:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	619a      	str	r2, [r3, #24]
 800782c:	e00e      	b.n	800784c <USB_EPStartXfer+0x131e>
        }
        else
        {
          len = ep->xfer_len;
 800782e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007832:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	699b      	ldr	r3, [r3, #24]
 800783a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 800783e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007842:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	2200      	movs	r2, #0
 800784a:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800784c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007850:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	785b      	ldrb	r3, [r3, #1]
 8007858:	2b00      	cmp	r3, #0
 800785a:	d178      	bne.n	800794e <USB_EPStartXfer+0x1420>
 800785c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007860:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800786a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800786e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007878:	b29b      	uxth	r3, r3
 800787a:	461a      	mov	r2, r3
 800787c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8007880:	4413      	add	r3, r2
 8007882:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007886:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800788a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	781b      	ldrb	r3, [r3, #0]
 8007892:	00da      	lsls	r2, r3, #3
 8007894:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8007898:	4413      	add	r3, r2
 800789a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800789e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80078a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80078a6:	2b3e      	cmp	r3, #62	; 0x3e
 80078a8:	d91d      	bls.n	80078e6 <USB_EPStartXfer+0x13b8>
 80078aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80078ae:	095b      	lsrs	r3, r3, #5
 80078b0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80078b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80078b8:	f003 031f 	and.w	r3, r3, #31
 80078bc:	2b00      	cmp	r3, #0
 80078be:	d104      	bne.n	80078ca <USB_EPStartXfer+0x139c>
 80078c0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80078c4:	3b01      	subs	r3, #1
 80078c6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80078ca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80078ce:	b29b      	uxth	r3, r3
 80078d0:	029b      	lsls	r3, r3, #10
 80078d2:	b29b      	uxth	r3, r3
 80078d4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80078d8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80078dc:	b29a      	uxth	r2, r3
 80078de:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80078e2:	801a      	strh	r2, [r3, #0]
 80078e4:	e064      	b.n	80079b0 <USB_EPStartXfer+0x1482>
 80078e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	d116      	bne.n	800791c <USB_EPStartXfer+0x13ee>
 80078ee:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80078f2:	881b      	ldrh	r3, [r3, #0]
 80078f4:	b29b      	uxth	r3, r3
 80078f6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80078fa:	b29a      	uxth	r2, r3
 80078fc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007900:	801a      	strh	r2, [r3, #0]
 8007902:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007906:	881b      	ldrh	r3, [r3, #0]
 8007908:	b29b      	uxth	r3, r3
 800790a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800790e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007912:	b29a      	uxth	r2, r3
 8007914:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007918:	801a      	strh	r2, [r3, #0]
 800791a:	e049      	b.n	80079b0 <USB_EPStartXfer+0x1482>
 800791c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007920:	085b      	lsrs	r3, r3, #1
 8007922:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8007926:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800792a:	f003 0301 	and.w	r3, r3, #1
 800792e:	2b00      	cmp	r3, #0
 8007930:	d004      	beq.n	800793c <USB_EPStartXfer+0x140e>
 8007932:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007936:	3301      	adds	r3, #1
 8007938:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800793c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007940:	b29b      	uxth	r3, r3
 8007942:	029b      	lsls	r3, r3, #10
 8007944:	b29a      	uxth	r2, r3
 8007946:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800794a:	801a      	strh	r2, [r3, #0]
 800794c:	e030      	b.n	80079b0 <USB_EPStartXfer+0x1482>
 800794e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007952:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	785b      	ldrb	r3, [r3, #1]
 800795a:	2b01      	cmp	r3, #1
 800795c:	d128      	bne.n	80079b0 <USB_EPStartXfer+0x1482>
 800795e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007962:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800796c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007970:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800797a:	b29b      	uxth	r3, r3
 800797c:	461a      	mov	r2, r3
 800797e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007982:	4413      	add	r3, r2
 8007984:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8007988:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800798c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	781b      	ldrb	r3, [r3, #0]
 8007994:	00da      	lsls	r2, r3, #3
 8007996:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800799a:	4413      	add	r3, r2
 800799c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80079a0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80079a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80079a8:	b29a      	uxth	r2, r3
 80079aa:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80079ae:	801a      	strh	r2, [r3, #0]
 80079b0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80079b4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80079be:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80079c2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	785b      	ldrb	r3, [r3, #1]
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d178      	bne.n	8007ac0 <USB_EPStartXfer+0x1592>
 80079ce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80079d2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80079dc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80079e0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80079ea:	b29b      	uxth	r3, r3
 80079ec:	461a      	mov	r2, r3
 80079ee:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80079f2:	4413      	add	r3, r2
 80079f4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80079f8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80079fc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	781b      	ldrb	r3, [r3, #0]
 8007a04:	00da      	lsls	r2, r3, #3
 8007a06:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8007a0a:	4413      	add	r3, r2
 8007a0c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007a10:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007a14:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007a18:	2b3e      	cmp	r3, #62	; 0x3e
 8007a1a:	d91d      	bls.n	8007a58 <USB_EPStartXfer+0x152a>
 8007a1c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007a20:	095b      	lsrs	r3, r3, #5
 8007a22:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007a26:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007a2a:	f003 031f 	and.w	r3, r3, #31
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d104      	bne.n	8007a3c <USB_EPStartXfer+0x150e>
 8007a32:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007a36:	3b01      	subs	r3, #1
 8007a38:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007a3c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007a40:	b29b      	uxth	r3, r3
 8007a42:	029b      	lsls	r3, r3, #10
 8007a44:	b29b      	uxth	r3, r3
 8007a46:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007a4a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007a4e:	b29a      	uxth	r2, r3
 8007a50:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007a54:	801a      	strh	r2, [r3, #0]
 8007a56:	e060      	b.n	8007b1a <USB_EPStartXfer+0x15ec>
 8007a58:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	d116      	bne.n	8007a8e <USB_EPStartXfer+0x1560>
 8007a60:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007a64:	881b      	ldrh	r3, [r3, #0]
 8007a66:	b29b      	uxth	r3, r3
 8007a68:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007a6c:	b29a      	uxth	r2, r3
 8007a6e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007a72:	801a      	strh	r2, [r3, #0]
 8007a74:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007a78:	881b      	ldrh	r3, [r3, #0]
 8007a7a:	b29b      	uxth	r3, r3
 8007a7c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007a80:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007a84:	b29a      	uxth	r2, r3
 8007a86:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007a8a:	801a      	strh	r2, [r3, #0]
 8007a8c:	e045      	b.n	8007b1a <USB_EPStartXfer+0x15ec>
 8007a8e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007a92:	085b      	lsrs	r3, r3, #1
 8007a94:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007a98:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007a9c:	f003 0301 	and.w	r3, r3, #1
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	d004      	beq.n	8007aae <USB_EPStartXfer+0x1580>
 8007aa4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007aa8:	3301      	adds	r3, #1
 8007aaa:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007aae:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007ab2:	b29b      	uxth	r3, r3
 8007ab4:	029b      	lsls	r3, r3, #10
 8007ab6:	b29a      	uxth	r2, r3
 8007ab8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007abc:	801a      	strh	r2, [r3, #0]
 8007abe:	e02c      	b.n	8007b1a <USB_EPStartXfer+0x15ec>
 8007ac0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007ac4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	785b      	ldrb	r3, [r3, #1]
 8007acc:	2b01      	cmp	r3, #1
 8007ace:	d124      	bne.n	8007b1a <USB_EPStartXfer+0x15ec>
 8007ad0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007ad4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007ade:	b29b      	uxth	r3, r3
 8007ae0:	461a      	mov	r2, r3
 8007ae2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8007ae6:	4413      	add	r3, r2
 8007ae8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007aec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007af0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	781b      	ldrb	r3, [r3, #0]
 8007af8:	00da      	lsls	r2, r3, #3
 8007afa:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8007afe:	4413      	add	r3, r2
 8007b00:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007b04:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007b08:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007b0c:	b29a      	uxth	r2, r3
 8007b0e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007b12:	801a      	strh	r2, [r3, #0]
 8007b14:	e001      	b.n	8007b1a <USB_EPStartXfer+0x15ec>
      }
      else
      {
        return HAL_ERROR;
 8007b16:	2301      	movs	r3, #1
 8007b18:	e03a      	b.n	8007b90 <USB_EPStartXfer+0x1662>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007b1a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007b1e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007b22:	681a      	ldr	r2, [r3, #0]
 8007b24:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007b28:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	781b      	ldrb	r3, [r3, #0]
 8007b30:	009b      	lsls	r3, r3, #2
 8007b32:	4413      	add	r3, r2
 8007b34:	881b      	ldrh	r3, [r3, #0]
 8007b36:	b29b      	uxth	r3, r3
 8007b38:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007b3c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007b40:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8007b44:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8007b48:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8007b4c:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8007b50:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8007b54:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8007b58:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8007b5c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007b60:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007b64:	681a      	ldr	r2, [r3, #0]
 8007b66:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007b6a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	781b      	ldrb	r3, [r3, #0]
 8007b72:	009b      	lsls	r3, r3, #2
 8007b74:	441a      	add	r2, r3
 8007b76:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8007b7a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007b7e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007b82:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007b86:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007b8a:	b29b      	uxth	r3, r3
 8007b8c:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8007b8e:	2300      	movs	r3, #0
}
 8007b90:	4618      	mov	r0, r3
 8007b92:	f507 7784 	add.w	r7, r7, #264	; 0x108
 8007b96:	46bd      	mov	sp, r7
 8007b98:	bd80      	pop	{r7, pc}

08007b9a <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007b9a:	b480      	push	{r7}
 8007b9c:	b085      	sub	sp, #20
 8007b9e:	af00      	add	r7, sp, #0
 8007ba0:	6078      	str	r0, [r7, #4]
 8007ba2:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8007ba4:	683b      	ldr	r3, [r7, #0]
 8007ba6:	785b      	ldrb	r3, [r3, #1]
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	d020      	beq.n	8007bee <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8007bac:	687a      	ldr	r2, [r7, #4]
 8007bae:	683b      	ldr	r3, [r7, #0]
 8007bb0:	781b      	ldrb	r3, [r3, #0]
 8007bb2:	009b      	lsls	r3, r3, #2
 8007bb4:	4413      	add	r3, r2
 8007bb6:	881b      	ldrh	r3, [r3, #0]
 8007bb8:	b29b      	uxth	r3, r3
 8007bba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007bbe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007bc2:	81bb      	strh	r3, [r7, #12]
 8007bc4:	89bb      	ldrh	r3, [r7, #12]
 8007bc6:	f083 0310 	eor.w	r3, r3, #16
 8007bca:	81bb      	strh	r3, [r7, #12]
 8007bcc:	687a      	ldr	r2, [r7, #4]
 8007bce:	683b      	ldr	r3, [r7, #0]
 8007bd0:	781b      	ldrb	r3, [r3, #0]
 8007bd2:	009b      	lsls	r3, r3, #2
 8007bd4:	441a      	add	r2, r3
 8007bd6:	89bb      	ldrh	r3, [r7, #12]
 8007bd8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007bdc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007be0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007be4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007be8:	b29b      	uxth	r3, r3
 8007bea:	8013      	strh	r3, [r2, #0]
 8007bec:	e01f      	b.n	8007c2e <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8007bee:	687a      	ldr	r2, [r7, #4]
 8007bf0:	683b      	ldr	r3, [r7, #0]
 8007bf2:	781b      	ldrb	r3, [r3, #0]
 8007bf4:	009b      	lsls	r3, r3, #2
 8007bf6:	4413      	add	r3, r2
 8007bf8:	881b      	ldrh	r3, [r3, #0]
 8007bfa:	b29b      	uxth	r3, r3
 8007bfc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007c00:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007c04:	81fb      	strh	r3, [r7, #14]
 8007c06:	89fb      	ldrh	r3, [r7, #14]
 8007c08:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8007c0c:	81fb      	strh	r3, [r7, #14]
 8007c0e:	687a      	ldr	r2, [r7, #4]
 8007c10:	683b      	ldr	r3, [r7, #0]
 8007c12:	781b      	ldrb	r3, [r3, #0]
 8007c14:	009b      	lsls	r3, r3, #2
 8007c16:	441a      	add	r2, r3
 8007c18:	89fb      	ldrh	r3, [r7, #14]
 8007c1a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007c1e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007c22:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007c26:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007c2a:	b29b      	uxth	r3, r3
 8007c2c:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8007c2e:	2300      	movs	r3, #0
}
 8007c30:	4618      	mov	r0, r3
 8007c32:	3714      	adds	r7, #20
 8007c34:	46bd      	mov	sp, r7
 8007c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c3a:	4770      	bx	lr

08007c3c <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007c3c:	b480      	push	{r7}
 8007c3e:	b087      	sub	sp, #28
 8007c40:	af00      	add	r7, sp, #0
 8007c42:	6078      	str	r0, [r7, #4]
 8007c44:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8007c46:	683b      	ldr	r3, [r7, #0]
 8007c48:	7b1b      	ldrb	r3, [r3, #12]
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	f040 809d 	bne.w	8007d8a <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8007c50:	683b      	ldr	r3, [r7, #0]
 8007c52:	785b      	ldrb	r3, [r3, #1]
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	d04c      	beq.n	8007cf2 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007c58:	687a      	ldr	r2, [r7, #4]
 8007c5a:	683b      	ldr	r3, [r7, #0]
 8007c5c:	781b      	ldrb	r3, [r3, #0]
 8007c5e:	009b      	lsls	r3, r3, #2
 8007c60:	4413      	add	r3, r2
 8007c62:	881b      	ldrh	r3, [r3, #0]
 8007c64:	823b      	strh	r3, [r7, #16]
 8007c66:	8a3b      	ldrh	r3, [r7, #16]
 8007c68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	d01b      	beq.n	8007ca8 <USB_EPClearStall+0x6c>
 8007c70:	687a      	ldr	r2, [r7, #4]
 8007c72:	683b      	ldr	r3, [r7, #0]
 8007c74:	781b      	ldrb	r3, [r3, #0]
 8007c76:	009b      	lsls	r3, r3, #2
 8007c78:	4413      	add	r3, r2
 8007c7a:	881b      	ldrh	r3, [r3, #0]
 8007c7c:	b29b      	uxth	r3, r3
 8007c7e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007c82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007c86:	81fb      	strh	r3, [r7, #14]
 8007c88:	687a      	ldr	r2, [r7, #4]
 8007c8a:	683b      	ldr	r3, [r7, #0]
 8007c8c:	781b      	ldrb	r3, [r3, #0]
 8007c8e:	009b      	lsls	r3, r3, #2
 8007c90:	441a      	add	r2, r3
 8007c92:	89fb      	ldrh	r3, [r7, #14]
 8007c94:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007c98:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007c9c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007ca0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007ca4:	b29b      	uxth	r3, r3
 8007ca6:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007ca8:	683b      	ldr	r3, [r7, #0]
 8007caa:	78db      	ldrb	r3, [r3, #3]
 8007cac:	2b01      	cmp	r3, #1
 8007cae:	d06c      	beq.n	8007d8a <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8007cb0:	687a      	ldr	r2, [r7, #4]
 8007cb2:	683b      	ldr	r3, [r7, #0]
 8007cb4:	781b      	ldrb	r3, [r3, #0]
 8007cb6:	009b      	lsls	r3, r3, #2
 8007cb8:	4413      	add	r3, r2
 8007cba:	881b      	ldrh	r3, [r3, #0]
 8007cbc:	b29b      	uxth	r3, r3
 8007cbe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007cc2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007cc6:	81bb      	strh	r3, [r7, #12]
 8007cc8:	89bb      	ldrh	r3, [r7, #12]
 8007cca:	f083 0320 	eor.w	r3, r3, #32
 8007cce:	81bb      	strh	r3, [r7, #12]
 8007cd0:	687a      	ldr	r2, [r7, #4]
 8007cd2:	683b      	ldr	r3, [r7, #0]
 8007cd4:	781b      	ldrb	r3, [r3, #0]
 8007cd6:	009b      	lsls	r3, r3, #2
 8007cd8:	441a      	add	r2, r3
 8007cda:	89bb      	ldrh	r3, [r7, #12]
 8007cdc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007ce0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007ce4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007ce8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007cec:	b29b      	uxth	r3, r3
 8007cee:	8013      	strh	r3, [r2, #0]
 8007cf0:	e04b      	b.n	8007d8a <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007cf2:	687a      	ldr	r2, [r7, #4]
 8007cf4:	683b      	ldr	r3, [r7, #0]
 8007cf6:	781b      	ldrb	r3, [r3, #0]
 8007cf8:	009b      	lsls	r3, r3, #2
 8007cfa:	4413      	add	r3, r2
 8007cfc:	881b      	ldrh	r3, [r3, #0]
 8007cfe:	82fb      	strh	r3, [r7, #22]
 8007d00:	8afb      	ldrh	r3, [r7, #22]
 8007d02:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	d01b      	beq.n	8007d42 <USB_EPClearStall+0x106>
 8007d0a:	687a      	ldr	r2, [r7, #4]
 8007d0c:	683b      	ldr	r3, [r7, #0]
 8007d0e:	781b      	ldrb	r3, [r3, #0]
 8007d10:	009b      	lsls	r3, r3, #2
 8007d12:	4413      	add	r3, r2
 8007d14:	881b      	ldrh	r3, [r3, #0]
 8007d16:	b29b      	uxth	r3, r3
 8007d18:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007d1c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007d20:	82bb      	strh	r3, [r7, #20]
 8007d22:	687a      	ldr	r2, [r7, #4]
 8007d24:	683b      	ldr	r3, [r7, #0]
 8007d26:	781b      	ldrb	r3, [r3, #0]
 8007d28:	009b      	lsls	r3, r3, #2
 8007d2a:	441a      	add	r2, r3
 8007d2c:	8abb      	ldrh	r3, [r7, #20]
 8007d2e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007d32:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007d36:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007d3a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007d3e:	b29b      	uxth	r3, r3
 8007d40:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007d42:	687a      	ldr	r2, [r7, #4]
 8007d44:	683b      	ldr	r3, [r7, #0]
 8007d46:	781b      	ldrb	r3, [r3, #0]
 8007d48:	009b      	lsls	r3, r3, #2
 8007d4a:	4413      	add	r3, r2
 8007d4c:	881b      	ldrh	r3, [r3, #0]
 8007d4e:	b29b      	uxth	r3, r3
 8007d50:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007d54:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007d58:	827b      	strh	r3, [r7, #18]
 8007d5a:	8a7b      	ldrh	r3, [r7, #18]
 8007d5c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8007d60:	827b      	strh	r3, [r7, #18]
 8007d62:	8a7b      	ldrh	r3, [r7, #18]
 8007d64:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8007d68:	827b      	strh	r3, [r7, #18]
 8007d6a:	687a      	ldr	r2, [r7, #4]
 8007d6c:	683b      	ldr	r3, [r7, #0]
 8007d6e:	781b      	ldrb	r3, [r3, #0]
 8007d70:	009b      	lsls	r3, r3, #2
 8007d72:	441a      	add	r2, r3
 8007d74:	8a7b      	ldrh	r3, [r7, #18]
 8007d76:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007d7a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007d7e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007d82:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007d86:	b29b      	uxth	r3, r3
 8007d88:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8007d8a:	2300      	movs	r3, #0
}
 8007d8c:	4618      	mov	r0, r3
 8007d8e:	371c      	adds	r7, #28
 8007d90:	46bd      	mov	sp, r7
 8007d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d96:	4770      	bx	lr

08007d98 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8007d98:	b480      	push	{r7}
 8007d9a:	b083      	sub	sp, #12
 8007d9c:	af00      	add	r7, sp, #0
 8007d9e:	6078      	str	r0, [r7, #4]
 8007da0:	460b      	mov	r3, r1
 8007da2:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8007da4:	78fb      	ldrb	r3, [r7, #3]
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	d103      	bne.n	8007db2 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	2280      	movs	r2, #128	; 0x80
 8007dae:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8007db2:	2300      	movs	r3, #0
}
 8007db4:	4618      	mov	r0, r3
 8007db6:	370c      	adds	r7, #12
 8007db8:	46bd      	mov	sp, r7
 8007dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dbe:	4770      	bx	lr

08007dc0 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8007dc0:	b480      	push	{r7}
 8007dc2:	b083      	sub	sp, #12
 8007dc4:	af00      	add	r7, sp, #0
 8007dc6:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8007dce:	b29b      	uxth	r3, r3
 8007dd0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007dd4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007dd8:	b29a      	uxth	r2, r3
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 8007de0:	2300      	movs	r3, #0
}
 8007de2:	4618      	mov	r0, r3
 8007de4:	370c      	adds	r7, #12
 8007de6:	46bd      	mov	sp, r7
 8007de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dec:	4770      	bx	lr

08007dee <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8007dee:	b480      	push	{r7}
 8007df0:	b085      	sub	sp, #20
 8007df2:	af00      	add	r7, sp, #0
 8007df4:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8007dfc:	b29b      	uxth	r3, r3
 8007dfe:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8007e00:	68fb      	ldr	r3, [r7, #12]
}
 8007e02:	4618      	mov	r0, r3
 8007e04:	3714      	adds	r7, #20
 8007e06:	46bd      	mov	sp, r7
 8007e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e0c:	4770      	bx	lr

08007e0e <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8007e0e:	b480      	push	{r7}
 8007e10:	b08d      	sub	sp, #52	; 0x34
 8007e12:	af00      	add	r7, sp, #0
 8007e14:	60f8      	str	r0, [r7, #12]
 8007e16:	60b9      	str	r1, [r7, #8]
 8007e18:	4611      	mov	r1, r2
 8007e1a:	461a      	mov	r2, r3
 8007e1c:	460b      	mov	r3, r1
 8007e1e:	80fb      	strh	r3, [r7, #6]
 8007e20:	4613      	mov	r3, r2
 8007e22:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8007e24:	88bb      	ldrh	r3, [r7, #4]
 8007e26:	3301      	adds	r3, #1
 8007e28:	085b      	lsrs	r3, r3, #1
 8007e2a:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8007e2c:	68fb      	ldr	r3, [r7, #12]
 8007e2e:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t temp1;
  uint32_t temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8007e30:	68bb      	ldr	r3, [r7, #8]
 8007e32:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007e34:	88fa      	ldrh	r2, [r7, #6]
 8007e36:	69fb      	ldr	r3, [r7, #28]
 8007e38:	4413      	add	r3, r2
 8007e3a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007e3e:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8007e40:	6a3b      	ldr	r3, [r7, #32]
 8007e42:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007e44:	e01b      	b.n	8007e7e <USB_WritePMA+0x70>
  {
    temp1 = *pBuf;
 8007e46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e48:	781b      	ldrb	r3, [r3, #0]
 8007e4a:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8007e4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e4e:	3301      	adds	r3, #1
 8007e50:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8007e52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e54:	781b      	ldrb	r3, [r3, #0]
 8007e56:	b29b      	uxth	r3, r3
 8007e58:	021b      	lsls	r3, r3, #8
 8007e5a:	b29b      	uxth	r3, r3
 8007e5c:	461a      	mov	r2, r3
 8007e5e:	69bb      	ldr	r3, [r7, #24]
 8007e60:	4313      	orrs	r3, r2
 8007e62:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8007e64:	697b      	ldr	r3, [r7, #20]
 8007e66:	b29a      	uxth	r2, r3
 8007e68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e6a:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8007e6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e6e:	3302      	adds	r3, #2
 8007e70:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 8007e72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e74:	3301      	adds	r3, #1
 8007e76:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8007e78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e7a:	3b01      	subs	r3, #1
 8007e7c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007e7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	d1e0      	bne.n	8007e46 <USB_WritePMA+0x38>
  }
}
 8007e84:	bf00      	nop
 8007e86:	bf00      	nop
 8007e88:	3734      	adds	r7, #52	; 0x34
 8007e8a:	46bd      	mov	sp, r7
 8007e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e90:	4770      	bx	lr

08007e92 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8007e92:	b480      	push	{r7}
 8007e94:	b08b      	sub	sp, #44	; 0x2c
 8007e96:	af00      	add	r7, sp, #0
 8007e98:	60f8      	str	r0, [r7, #12]
 8007e9a:	60b9      	str	r1, [r7, #8]
 8007e9c:	4611      	mov	r1, r2
 8007e9e:	461a      	mov	r2, r3
 8007ea0:	460b      	mov	r3, r1
 8007ea2:	80fb      	strh	r3, [r7, #6]
 8007ea4:	4613      	mov	r3, r2
 8007ea6:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8007ea8:	88bb      	ldrh	r3, [r7, #4]
 8007eaa:	085b      	lsrs	r3, r3, #1
 8007eac:	b29b      	uxth	r3, r3
 8007eae:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	617b      	str	r3, [r7, #20]
  uint32_t i;
  uint32_t temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8007eb4:	68bb      	ldr	r3, [r7, #8]
 8007eb6:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007eb8:	88fa      	ldrh	r2, [r7, #6]
 8007eba:	697b      	ldr	r3, [r7, #20]
 8007ebc:	4413      	add	r3, r2
 8007ebe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007ec2:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8007ec4:	69bb      	ldr	r3, [r7, #24]
 8007ec6:	627b      	str	r3, [r7, #36]	; 0x24
 8007ec8:	e018      	b.n	8007efc <USB_ReadPMA+0x6a>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8007eca:	6a3b      	ldr	r3, [r7, #32]
 8007ecc:	881b      	ldrh	r3, [r3, #0]
 8007ece:	b29b      	uxth	r3, r3
 8007ed0:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8007ed2:	6a3b      	ldr	r3, [r7, #32]
 8007ed4:	3302      	adds	r3, #2
 8007ed6:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8007ed8:	693b      	ldr	r3, [r7, #16]
 8007eda:	b2da      	uxtb	r2, r3
 8007edc:	69fb      	ldr	r3, [r7, #28]
 8007ede:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8007ee0:	69fb      	ldr	r3, [r7, #28]
 8007ee2:	3301      	adds	r3, #1
 8007ee4:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8007ee6:	693b      	ldr	r3, [r7, #16]
 8007ee8:	0a1b      	lsrs	r3, r3, #8
 8007eea:	b2da      	uxtb	r2, r3
 8007eec:	69fb      	ldr	r3, [r7, #28]
 8007eee:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8007ef0:	69fb      	ldr	r3, [r7, #28]
 8007ef2:	3301      	adds	r3, #1
 8007ef4:	61fb      	str	r3, [r7, #28]
  for (i = n; i != 0U; i--)
 8007ef6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ef8:	3b01      	subs	r3, #1
 8007efa:	627b      	str	r3, [r7, #36]	; 0x24
 8007efc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	d1e3      	bne.n	8007eca <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8007f02:	88bb      	ldrh	r3, [r7, #4]
 8007f04:	f003 0301 	and.w	r3, r3, #1
 8007f08:	b29b      	uxth	r3, r3
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	d007      	beq.n	8007f1e <USB_ReadPMA+0x8c>
  {
    temp = *pdwVal;
 8007f0e:	6a3b      	ldr	r3, [r7, #32]
 8007f10:	881b      	ldrh	r3, [r3, #0]
 8007f12:	b29b      	uxth	r3, r3
 8007f14:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8007f16:	693b      	ldr	r3, [r7, #16]
 8007f18:	b2da      	uxtb	r2, r3
 8007f1a:	69fb      	ldr	r3, [r7, #28]
 8007f1c:	701a      	strb	r2, [r3, #0]
  }
}
 8007f1e:	bf00      	nop
 8007f20:	372c      	adds	r7, #44	; 0x2c
 8007f22:	46bd      	mov	sp, r7
 8007f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f28:	4770      	bx	lr

08007f2a <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007f2a:	b580      	push	{r7, lr}
 8007f2c:	b084      	sub	sp, #16
 8007f2e:	af00      	add	r7, sp, #0
 8007f30:	6078      	str	r0, [r7, #4]
 8007f32:	460b      	mov	r3, r1
 8007f34:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8007f36:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8007f3a:	f002 f91b 	bl	800a174 <USBD_static_malloc>
 8007f3e:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d105      	bne.n	8007f52 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	2200      	movs	r2, #0
 8007f4a:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8007f4e:	2302      	movs	r3, #2
 8007f50:	e066      	b.n	8008020 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	68fa      	ldr	r2, [r7, #12]
 8007f56:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	7c1b      	ldrb	r3, [r3, #16]
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	d119      	bne.n	8007f96 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8007f62:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007f66:	2202      	movs	r2, #2
 8007f68:	2181      	movs	r1, #129	; 0x81
 8007f6a:	6878      	ldr	r0, [r7, #4]
 8007f6c:	f001 ffa7 	bl	8009ebe <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	2201      	movs	r2, #1
 8007f74:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8007f76:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007f7a:	2202      	movs	r2, #2
 8007f7c:	2101      	movs	r1, #1
 8007f7e:	6878      	ldr	r0, [r7, #4]
 8007f80:	f001 ff9d 	bl	8009ebe <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	2201      	movs	r2, #1
 8007f88:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	2210      	movs	r2, #16
 8007f90:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8007f94:	e016      	b.n	8007fc4 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8007f96:	2340      	movs	r3, #64	; 0x40
 8007f98:	2202      	movs	r2, #2
 8007f9a:	2181      	movs	r1, #129	; 0x81
 8007f9c:	6878      	ldr	r0, [r7, #4]
 8007f9e:	f001 ff8e 	bl	8009ebe <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	2201      	movs	r2, #1
 8007fa6:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8007fa8:	2340      	movs	r3, #64	; 0x40
 8007faa:	2202      	movs	r2, #2
 8007fac:	2101      	movs	r1, #1
 8007fae:	6878      	ldr	r0, [r7, #4]
 8007fb0:	f001 ff85 	bl	8009ebe <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	2201      	movs	r2, #1
 8007fb8:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	2210      	movs	r2, #16
 8007fc0:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8007fc4:	2308      	movs	r3, #8
 8007fc6:	2203      	movs	r2, #3
 8007fc8:	2182      	movs	r1, #130	; 0x82
 8007fca:	6878      	ldr	r0, [r7, #4]
 8007fcc:	f001 ff77 	bl	8009ebe <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	2201      	movs	r2, #1
 8007fd4:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8007fe2:	68fb      	ldr	r3, [r7, #12]
 8007fe4:	2200      	movs	r2, #0
 8007fe6:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	2200      	movs	r2, #0
 8007fee:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	7c1b      	ldrb	r3, [r3, #16]
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	d109      	bne.n	800800e <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007ffa:	68fb      	ldr	r3, [r7, #12]
 8007ffc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008000:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008004:	2101      	movs	r1, #1
 8008006:	6878      	ldr	r0, [r7, #4]
 8008008:	f002 f849 	bl	800a09e <USBD_LL_PrepareReceive>
 800800c:	e007      	b.n	800801e <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800800e:	68fb      	ldr	r3, [r7, #12]
 8008010:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008014:	2340      	movs	r3, #64	; 0x40
 8008016:	2101      	movs	r1, #1
 8008018:	6878      	ldr	r0, [r7, #4]
 800801a:	f002 f840 	bl	800a09e <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800801e:	2300      	movs	r3, #0
}
 8008020:	4618      	mov	r0, r3
 8008022:	3710      	adds	r7, #16
 8008024:	46bd      	mov	sp, r7
 8008026:	bd80      	pop	{r7, pc}

08008028 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008028:	b580      	push	{r7, lr}
 800802a:	b082      	sub	sp, #8
 800802c:	af00      	add	r7, sp, #0
 800802e:	6078      	str	r0, [r7, #4]
 8008030:	460b      	mov	r3, r1
 8008032:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8008034:	2181      	movs	r1, #129	; 0x81
 8008036:	6878      	ldr	r0, [r7, #4]
 8008038:	f001 ff67 	bl	8009f0a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	2200      	movs	r2, #0
 8008040:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8008042:	2101      	movs	r1, #1
 8008044:	6878      	ldr	r0, [r7, #4]
 8008046:	f001 ff60 	bl	8009f0a <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	2200      	movs	r2, #0
 800804e:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8008052:	2182      	movs	r1, #130	; 0x82
 8008054:	6878      	ldr	r0, [r7, #4]
 8008056:	f001 ff58 	bl	8009f0a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	2200      	movs	r2, #0
 800805e:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	2200      	movs	r2, #0
 8008066:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008070:	2b00      	cmp	r3, #0
 8008072:	d00e      	beq.n	8008092 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800807a:	685b      	ldr	r3, [r3, #4]
 800807c:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008084:	4618      	mov	r0, r3
 8008086:	f002 f883 	bl	800a190 <USBD_static_free>
    pdev->pClassData = NULL;
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	2200      	movs	r2, #0
 800808e:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8008092:	2300      	movs	r3, #0
}
 8008094:	4618      	mov	r0, r3
 8008096:	3708      	adds	r7, #8
 8008098:	46bd      	mov	sp, r7
 800809a:	bd80      	pop	{r7, pc}

0800809c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800809c:	b580      	push	{r7, lr}
 800809e:	b086      	sub	sp, #24
 80080a0:	af00      	add	r7, sp, #0
 80080a2:	6078      	str	r0, [r7, #4]
 80080a4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80080ac:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 80080ae:	2300      	movs	r3, #0
 80080b0:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 80080b2:	2300      	movs	r3, #0
 80080b4:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 80080b6:	2300      	movs	r3, #0
 80080b8:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 80080ba:	693b      	ldr	r3, [r7, #16]
 80080bc:	2b00      	cmp	r3, #0
 80080be:	d101      	bne.n	80080c4 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 80080c0:	2303      	movs	r3, #3
 80080c2:	e0af      	b.n	8008224 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80080c4:	683b      	ldr	r3, [r7, #0]
 80080c6:	781b      	ldrb	r3, [r3, #0]
 80080c8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80080cc:	2b00      	cmp	r3, #0
 80080ce:	d03f      	beq.n	8008150 <USBD_CDC_Setup+0xb4>
 80080d0:	2b20      	cmp	r3, #32
 80080d2:	f040 809f 	bne.w	8008214 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 80080d6:	683b      	ldr	r3, [r7, #0]
 80080d8:	88db      	ldrh	r3, [r3, #6]
 80080da:	2b00      	cmp	r3, #0
 80080dc:	d02e      	beq.n	800813c <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 80080de:	683b      	ldr	r3, [r7, #0]
 80080e0:	781b      	ldrb	r3, [r3, #0]
 80080e2:	b25b      	sxtb	r3, r3
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	da16      	bge.n	8008116 <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80080ee:	689b      	ldr	r3, [r3, #8]
 80080f0:	683a      	ldr	r2, [r7, #0]
 80080f2:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 80080f4:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80080f6:	683a      	ldr	r2, [r7, #0]
 80080f8:	88d2      	ldrh	r2, [r2, #6]
 80080fa:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80080fc:	683b      	ldr	r3, [r7, #0]
 80080fe:	88db      	ldrh	r3, [r3, #6]
 8008100:	2b07      	cmp	r3, #7
 8008102:	bf28      	it	cs
 8008104:	2307      	movcs	r3, #7
 8008106:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8008108:	693b      	ldr	r3, [r7, #16]
 800810a:	89fa      	ldrh	r2, [r7, #14]
 800810c:	4619      	mov	r1, r3
 800810e:	6878      	ldr	r0, [r7, #4]
 8008110:	f001 facf 	bl	80096b2 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 8008114:	e085      	b.n	8008222 <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 8008116:	683b      	ldr	r3, [r7, #0]
 8008118:	785a      	ldrb	r2, [r3, #1]
 800811a:	693b      	ldr	r3, [r7, #16]
 800811c:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8008120:	683b      	ldr	r3, [r7, #0]
 8008122:	88db      	ldrh	r3, [r3, #6]
 8008124:	b2da      	uxtb	r2, r3
 8008126:	693b      	ldr	r3, [r7, #16]
 8008128:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 800812c:	6939      	ldr	r1, [r7, #16]
 800812e:	683b      	ldr	r3, [r7, #0]
 8008130:	88db      	ldrh	r3, [r3, #6]
 8008132:	461a      	mov	r2, r3
 8008134:	6878      	ldr	r0, [r7, #4]
 8008136:	f001 fae8 	bl	800970a <USBD_CtlPrepareRx>
      break;
 800813a:	e072      	b.n	8008222 <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008142:	689b      	ldr	r3, [r3, #8]
 8008144:	683a      	ldr	r2, [r7, #0]
 8008146:	7850      	ldrb	r0, [r2, #1]
 8008148:	2200      	movs	r2, #0
 800814a:	6839      	ldr	r1, [r7, #0]
 800814c:	4798      	blx	r3
      break;
 800814e:	e068      	b.n	8008222 <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008150:	683b      	ldr	r3, [r7, #0]
 8008152:	785b      	ldrb	r3, [r3, #1]
 8008154:	2b0b      	cmp	r3, #11
 8008156:	d852      	bhi.n	80081fe <USBD_CDC_Setup+0x162>
 8008158:	a201      	add	r2, pc, #4	; (adr r2, 8008160 <USBD_CDC_Setup+0xc4>)
 800815a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800815e:	bf00      	nop
 8008160:	08008191 	.word	0x08008191
 8008164:	0800820d 	.word	0x0800820d
 8008168:	080081ff 	.word	0x080081ff
 800816c:	080081ff 	.word	0x080081ff
 8008170:	080081ff 	.word	0x080081ff
 8008174:	080081ff 	.word	0x080081ff
 8008178:	080081ff 	.word	0x080081ff
 800817c:	080081ff 	.word	0x080081ff
 8008180:	080081ff 	.word	0x080081ff
 8008184:	080081ff 	.word	0x080081ff
 8008188:	080081bb 	.word	0x080081bb
 800818c:	080081e5 	.word	0x080081e5
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008196:	b2db      	uxtb	r3, r3
 8008198:	2b03      	cmp	r3, #3
 800819a:	d107      	bne.n	80081ac <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800819c:	f107 030a 	add.w	r3, r7, #10
 80081a0:	2202      	movs	r2, #2
 80081a2:	4619      	mov	r1, r3
 80081a4:	6878      	ldr	r0, [r7, #4]
 80081a6:	f001 fa84 	bl	80096b2 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80081aa:	e032      	b.n	8008212 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 80081ac:	6839      	ldr	r1, [r7, #0]
 80081ae:	6878      	ldr	r0, [r7, #4]
 80081b0:	f001 fa0e 	bl	80095d0 <USBD_CtlError>
            ret = USBD_FAIL;
 80081b4:	2303      	movs	r3, #3
 80081b6:	75fb      	strb	r3, [r7, #23]
          break;
 80081b8:	e02b      	b.n	8008212 <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80081c0:	b2db      	uxtb	r3, r3
 80081c2:	2b03      	cmp	r3, #3
 80081c4:	d107      	bne.n	80081d6 <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80081c6:	f107 030d 	add.w	r3, r7, #13
 80081ca:	2201      	movs	r2, #1
 80081cc:	4619      	mov	r1, r3
 80081ce:	6878      	ldr	r0, [r7, #4]
 80081d0:	f001 fa6f 	bl	80096b2 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80081d4:	e01d      	b.n	8008212 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 80081d6:	6839      	ldr	r1, [r7, #0]
 80081d8:	6878      	ldr	r0, [r7, #4]
 80081da:	f001 f9f9 	bl	80095d0 <USBD_CtlError>
            ret = USBD_FAIL;
 80081de:	2303      	movs	r3, #3
 80081e0:	75fb      	strb	r3, [r7, #23]
          break;
 80081e2:	e016      	b.n	8008212 <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80081ea:	b2db      	uxtb	r3, r3
 80081ec:	2b03      	cmp	r3, #3
 80081ee:	d00f      	beq.n	8008210 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 80081f0:	6839      	ldr	r1, [r7, #0]
 80081f2:	6878      	ldr	r0, [r7, #4]
 80081f4:	f001 f9ec 	bl	80095d0 <USBD_CtlError>
            ret = USBD_FAIL;
 80081f8:	2303      	movs	r3, #3
 80081fa:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80081fc:	e008      	b.n	8008210 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80081fe:	6839      	ldr	r1, [r7, #0]
 8008200:	6878      	ldr	r0, [r7, #4]
 8008202:	f001 f9e5 	bl	80095d0 <USBD_CtlError>
          ret = USBD_FAIL;
 8008206:	2303      	movs	r3, #3
 8008208:	75fb      	strb	r3, [r7, #23]
          break;
 800820a:	e002      	b.n	8008212 <USBD_CDC_Setup+0x176>
          break;
 800820c:	bf00      	nop
 800820e:	e008      	b.n	8008222 <USBD_CDC_Setup+0x186>
          break;
 8008210:	bf00      	nop
      }
      break;
 8008212:	e006      	b.n	8008222 <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 8008214:	6839      	ldr	r1, [r7, #0]
 8008216:	6878      	ldr	r0, [r7, #4]
 8008218:	f001 f9da 	bl	80095d0 <USBD_CtlError>
      ret = USBD_FAIL;
 800821c:	2303      	movs	r3, #3
 800821e:	75fb      	strb	r3, [r7, #23]
      break;
 8008220:	bf00      	nop
  }

  return (uint8_t)ret;
 8008222:	7dfb      	ldrb	r3, [r7, #23]
}
 8008224:	4618      	mov	r0, r3
 8008226:	3718      	adds	r7, #24
 8008228:	46bd      	mov	sp, r7
 800822a:	bd80      	pop	{r7, pc}

0800822c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800822c:	b580      	push	{r7, lr}
 800822e:	b084      	sub	sp, #16
 8008230:	af00      	add	r7, sp, #0
 8008232:	6078      	str	r0, [r7, #4]
 8008234:	460b      	mov	r3, r1
 8008236:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800823e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008246:	2b00      	cmp	r3, #0
 8008248:	d101      	bne.n	800824e <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800824a:	2303      	movs	r3, #3
 800824c:	e04f      	b.n	80082ee <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008254:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8008256:	78fa      	ldrb	r2, [r7, #3]
 8008258:	6879      	ldr	r1, [r7, #4]
 800825a:	4613      	mov	r3, r2
 800825c:	009b      	lsls	r3, r3, #2
 800825e:	4413      	add	r3, r2
 8008260:	009b      	lsls	r3, r3, #2
 8008262:	440b      	add	r3, r1
 8008264:	3318      	adds	r3, #24
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	2b00      	cmp	r3, #0
 800826a:	d029      	beq.n	80082c0 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800826c:	78fa      	ldrb	r2, [r7, #3]
 800826e:	6879      	ldr	r1, [r7, #4]
 8008270:	4613      	mov	r3, r2
 8008272:	009b      	lsls	r3, r3, #2
 8008274:	4413      	add	r3, r2
 8008276:	009b      	lsls	r3, r3, #2
 8008278:	440b      	add	r3, r1
 800827a:	3318      	adds	r3, #24
 800827c:	681a      	ldr	r2, [r3, #0]
 800827e:	78f9      	ldrb	r1, [r7, #3]
 8008280:	68f8      	ldr	r0, [r7, #12]
 8008282:	460b      	mov	r3, r1
 8008284:	009b      	lsls	r3, r3, #2
 8008286:	440b      	add	r3, r1
 8008288:	00db      	lsls	r3, r3, #3
 800828a:	4403      	add	r3, r0
 800828c:	3338      	adds	r3, #56	; 0x38
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	fbb2 f1f3 	udiv	r1, r2, r3
 8008294:	fb01 f303 	mul.w	r3, r1, r3
 8008298:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800829a:	2b00      	cmp	r3, #0
 800829c:	d110      	bne.n	80082c0 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800829e:	78fa      	ldrb	r2, [r7, #3]
 80082a0:	6879      	ldr	r1, [r7, #4]
 80082a2:	4613      	mov	r3, r2
 80082a4:	009b      	lsls	r3, r3, #2
 80082a6:	4413      	add	r3, r2
 80082a8:	009b      	lsls	r3, r3, #2
 80082aa:	440b      	add	r3, r1
 80082ac:	3318      	adds	r3, #24
 80082ae:	2200      	movs	r2, #0
 80082b0:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80082b2:	78f9      	ldrb	r1, [r7, #3]
 80082b4:	2300      	movs	r3, #0
 80082b6:	2200      	movs	r2, #0
 80082b8:	6878      	ldr	r0, [r7, #4]
 80082ba:	f001 fecf 	bl	800a05c <USBD_LL_Transmit>
 80082be:	e015      	b.n	80082ec <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 80082c0:	68bb      	ldr	r3, [r7, #8]
 80082c2:	2200      	movs	r2, #0
 80082c4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80082ce:	691b      	ldr	r3, [r3, #16]
 80082d0:	2b00      	cmp	r3, #0
 80082d2:	d00b      	beq.n	80082ec <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80082da:	691b      	ldr	r3, [r3, #16]
 80082dc:	68ba      	ldr	r2, [r7, #8]
 80082de:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 80082e2:	68ba      	ldr	r2, [r7, #8]
 80082e4:	f502 7104 	add.w	r1, r2, #528	; 0x210
 80082e8:	78fa      	ldrb	r2, [r7, #3]
 80082ea:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 80082ec:	2300      	movs	r3, #0
}
 80082ee:	4618      	mov	r0, r3
 80082f0:	3710      	adds	r7, #16
 80082f2:	46bd      	mov	sp, r7
 80082f4:	bd80      	pop	{r7, pc}

080082f6 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80082f6:	b580      	push	{r7, lr}
 80082f8:	b084      	sub	sp, #16
 80082fa:	af00      	add	r7, sp, #0
 80082fc:	6078      	str	r0, [r7, #4]
 80082fe:	460b      	mov	r3, r1
 8008300:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008308:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008310:	2b00      	cmp	r3, #0
 8008312:	d101      	bne.n	8008318 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8008314:	2303      	movs	r3, #3
 8008316:	e015      	b.n	8008344 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8008318:	78fb      	ldrb	r3, [r7, #3]
 800831a:	4619      	mov	r1, r3
 800831c:	6878      	ldr	r0, [r7, #4]
 800831e:	f001 fedf 	bl	800a0e0 <USBD_LL_GetRxDataSize>
 8008322:	4602      	mov	r2, r0
 8008324:	68fb      	ldr	r3, [r7, #12]
 8008326:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008330:	68db      	ldr	r3, [r3, #12]
 8008332:	68fa      	ldr	r2, [r7, #12]
 8008334:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8008338:	68fa      	ldr	r2, [r7, #12]
 800833a:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800833e:	4611      	mov	r1, r2
 8008340:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8008342:	2300      	movs	r3, #0
}
 8008344:	4618      	mov	r0, r3
 8008346:	3710      	adds	r7, #16
 8008348:	46bd      	mov	sp, r7
 800834a:	bd80      	pop	{r7, pc}

0800834c <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800834c:	b580      	push	{r7, lr}
 800834e:	b084      	sub	sp, #16
 8008350:	af00      	add	r7, sp, #0
 8008352:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800835a:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800835c:	68fb      	ldr	r3, [r7, #12]
 800835e:	2b00      	cmp	r3, #0
 8008360:	d101      	bne.n	8008366 <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 8008362:	2303      	movs	r3, #3
 8008364:	e01b      	b.n	800839e <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800836c:	2b00      	cmp	r3, #0
 800836e:	d015      	beq.n	800839c <USBD_CDC_EP0_RxReady+0x50>
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8008376:	2bff      	cmp	r3, #255	; 0xff
 8008378:	d010      	beq.n	800839c <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008380:	689b      	ldr	r3, [r3, #8]
 8008382:	68fa      	ldr	r2, [r7, #12]
 8008384:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 8008388:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800838a:	68fa      	ldr	r2, [r7, #12]
 800838c:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8008390:	b292      	uxth	r2, r2
 8008392:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	22ff      	movs	r2, #255	; 0xff
 8008398:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800839c:	2300      	movs	r3, #0
}
 800839e:	4618      	mov	r0, r3
 80083a0:	3710      	adds	r7, #16
 80083a2:	46bd      	mov	sp, r7
 80083a4:	bd80      	pop	{r7, pc}
	...

080083a8 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80083a8:	b480      	push	{r7}
 80083aa:	b083      	sub	sp, #12
 80083ac:	af00      	add	r7, sp, #0
 80083ae:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	2243      	movs	r2, #67	; 0x43
 80083b4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 80083b6:	4b03      	ldr	r3, [pc, #12]	; (80083c4 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 80083b8:	4618      	mov	r0, r3
 80083ba:	370c      	adds	r7, #12
 80083bc:	46bd      	mov	sp, r7
 80083be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083c2:	4770      	bx	lr
 80083c4:	20000094 	.word	0x20000094

080083c8 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80083c8:	b480      	push	{r7}
 80083ca:	b083      	sub	sp, #12
 80083cc:	af00      	add	r7, sp, #0
 80083ce:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	2243      	movs	r2, #67	; 0x43
 80083d4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 80083d6:	4b03      	ldr	r3, [pc, #12]	; (80083e4 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 80083d8:	4618      	mov	r0, r3
 80083da:	370c      	adds	r7, #12
 80083dc:	46bd      	mov	sp, r7
 80083de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083e2:	4770      	bx	lr
 80083e4:	20000050 	.word	0x20000050

080083e8 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80083e8:	b480      	push	{r7}
 80083ea:	b083      	sub	sp, #12
 80083ec:	af00      	add	r7, sp, #0
 80083ee:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	2243      	movs	r2, #67	; 0x43
 80083f4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 80083f6:	4b03      	ldr	r3, [pc, #12]	; (8008404 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 80083f8:	4618      	mov	r0, r3
 80083fa:	370c      	adds	r7, #12
 80083fc:	46bd      	mov	sp, r7
 80083fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008402:	4770      	bx	lr
 8008404:	200000d8 	.word	0x200000d8

08008408 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8008408:	b480      	push	{r7}
 800840a:	b083      	sub	sp, #12
 800840c:	af00      	add	r7, sp, #0
 800840e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	220a      	movs	r2, #10
 8008414:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8008416:	4b03      	ldr	r3, [pc, #12]	; (8008424 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8008418:	4618      	mov	r0, r3
 800841a:	370c      	adds	r7, #12
 800841c:	46bd      	mov	sp, r7
 800841e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008422:	4770      	bx	lr
 8008424:	2000000c 	.word	0x2000000c

08008428 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8008428:	b480      	push	{r7}
 800842a:	b083      	sub	sp, #12
 800842c:	af00      	add	r7, sp, #0
 800842e:	6078      	str	r0, [r7, #4]
 8008430:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8008432:	683b      	ldr	r3, [r7, #0]
 8008434:	2b00      	cmp	r3, #0
 8008436:	d101      	bne.n	800843c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8008438:	2303      	movs	r3, #3
 800843a:	e004      	b.n	8008446 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	683a      	ldr	r2, [r7, #0]
 8008440:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8008444:	2300      	movs	r3, #0
}
 8008446:	4618      	mov	r0, r3
 8008448:	370c      	adds	r7, #12
 800844a:	46bd      	mov	sp, r7
 800844c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008450:	4770      	bx	lr

08008452 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8008452:	b480      	push	{r7}
 8008454:	b087      	sub	sp, #28
 8008456:	af00      	add	r7, sp, #0
 8008458:	60f8      	str	r0, [r7, #12]
 800845a:	60b9      	str	r1, [r7, #8]
 800845c:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008464:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8008466:	697b      	ldr	r3, [r7, #20]
 8008468:	2b00      	cmp	r3, #0
 800846a:	d101      	bne.n	8008470 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800846c:	2303      	movs	r3, #3
 800846e:	e008      	b.n	8008482 <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 8008470:	697b      	ldr	r3, [r7, #20]
 8008472:	68ba      	ldr	r2, [r7, #8]
 8008474:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8008478:	697b      	ldr	r3, [r7, #20]
 800847a:	687a      	ldr	r2, [r7, #4]
 800847c:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8008480:	2300      	movs	r3, #0
}
 8008482:	4618      	mov	r0, r3
 8008484:	371c      	adds	r7, #28
 8008486:	46bd      	mov	sp, r7
 8008488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800848c:	4770      	bx	lr

0800848e <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800848e:	b480      	push	{r7}
 8008490:	b085      	sub	sp, #20
 8008492:	af00      	add	r7, sp, #0
 8008494:	6078      	str	r0, [r7, #4]
 8008496:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800849e:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80084a0:	68fb      	ldr	r3, [r7, #12]
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	d101      	bne.n	80084aa <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 80084a6:	2303      	movs	r3, #3
 80084a8:	e004      	b.n	80084b4 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 80084aa:	68fb      	ldr	r3, [r7, #12]
 80084ac:	683a      	ldr	r2, [r7, #0]
 80084ae:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 80084b2:	2300      	movs	r3, #0
}
 80084b4:	4618      	mov	r0, r3
 80084b6:	3714      	adds	r7, #20
 80084b8:	46bd      	mov	sp, r7
 80084ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084be:	4770      	bx	lr

080084c0 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80084c0:	b580      	push	{r7, lr}
 80084c2:	b084      	sub	sp, #16
 80084c4:	af00      	add	r7, sp, #0
 80084c6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80084ce:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 80084d0:	2301      	movs	r3, #1
 80084d2:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80084da:	2b00      	cmp	r3, #0
 80084dc:	d101      	bne.n	80084e2 <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80084de:	2303      	movs	r3, #3
 80084e0:	e01a      	b.n	8008518 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 80084e2:	68bb      	ldr	r3, [r7, #8]
 80084e4:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80084e8:	2b00      	cmp	r3, #0
 80084ea:	d114      	bne.n	8008516 <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 80084ec:	68bb      	ldr	r3, [r7, #8]
 80084ee:	2201      	movs	r2, #1
 80084f0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 80084f4:	68bb      	ldr	r3, [r7, #8]
 80084f6:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 80084fe:	68bb      	ldr	r3, [r7, #8]
 8008500:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8008504:	68bb      	ldr	r3, [r7, #8]
 8008506:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800850a:	2181      	movs	r1, #129	; 0x81
 800850c:	6878      	ldr	r0, [r7, #4]
 800850e:	f001 fda5 	bl	800a05c <USBD_LL_Transmit>

    ret = USBD_OK;
 8008512:	2300      	movs	r3, #0
 8008514:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8008516:	7bfb      	ldrb	r3, [r7, #15]
}
 8008518:	4618      	mov	r0, r3
 800851a:	3710      	adds	r7, #16
 800851c:	46bd      	mov	sp, r7
 800851e:	bd80      	pop	{r7, pc}

08008520 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8008520:	b580      	push	{r7, lr}
 8008522:	b084      	sub	sp, #16
 8008524:	af00      	add	r7, sp, #0
 8008526:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800852e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008536:	2b00      	cmp	r3, #0
 8008538:	d101      	bne.n	800853e <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800853a:	2303      	movs	r3, #3
 800853c:	e016      	b.n	800856c <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	7c1b      	ldrb	r3, [r3, #16]
 8008542:	2b00      	cmp	r3, #0
 8008544:	d109      	bne.n	800855a <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008546:	68fb      	ldr	r3, [r7, #12]
 8008548:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800854c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008550:	2101      	movs	r1, #1
 8008552:	6878      	ldr	r0, [r7, #4]
 8008554:	f001 fda3 	bl	800a09e <USBD_LL_PrepareReceive>
 8008558:	e007      	b.n	800856a <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800855a:	68fb      	ldr	r3, [r7, #12]
 800855c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008560:	2340      	movs	r3, #64	; 0x40
 8008562:	2101      	movs	r1, #1
 8008564:	6878      	ldr	r0, [r7, #4]
 8008566:	f001 fd9a 	bl	800a09e <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800856a:	2300      	movs	r3, #0
}
 800856c:	4618      	mov	r0, r3
 800856e:	3710      	adds	r7, #16
 8008570:	46bd      	mov	sp, r7
 8008572:	bd80      	pop	{r7, pc}

08008574 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8008574:	b580      	push	{r7, lr}
 8008576:	b086      	sub	sp, #24
 8008578:	af00      	add	r7, sp, #0
 800857a:	60f8      	str	r0, [r7, #12]
 800857c:	60b9      	str	r1, [r7, #8]
 800857e:	4613      	mov	r3, r2
 8008580:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8008582:	68fb      	ldr	r3, [r7, #12]
 8008584:	2b00      	cmp	r3, #0
 8008586:	d101      	bne.n	800858c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8008588:	2303      	movs	r3, #3
 800858a:	e01f      	b.n	80085cc <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 800858c:	68fb      	ldr	r3, [r7, #12]
 800858e:	2200      	movs	r2, #0
 8008590:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 8008594:	68fb      	ldr	r3, [r7, #12]
 8008596:	2200      	movs	r2, #0
 8008598:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	2200      	movs	r2, #0
 80085a0:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80085a4:	68bb      	ldr	r3, [r7, #8]
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	d003      	beq.n	80085b2 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80085aa:	68fb      	ldr	r3, [r7, #12]
 80085ac:	68ba      	ldr	r2, [r7, #8]
 80085ae:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80085b2:	68fb      	ldr	r3, [r7, #12]
 80085b4:	2201      	movs	r2, #1
 80085b6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80085ba:	68fb      	ldr	r3, [r7, #12]
 80085bc:	79fa      	ldrb	r2, [r7, #7]
 80085be:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80085c0:	68f8      	ldr	r0, [r7, #12]
 80085c2:	f001 fc01 	bl	8009dc8 <USBD_LL_Init>
 80085c6:	4603      	mov	r3, r0
 80085c8:	75fb      	strb	r3, [r7, #23]

  return ret;
 80085ca:	7dfb      	ldrb	r3, [r7, #23]
}
 80085cc:	4618      	mov	r0, r3
 80085ce:	3718      	adds	r7, #24
 80085d0:	46bd      	mov	sp, r7
 80085d2:	bd80      	pop	{r7, pc}

080085d4 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80085d4:	b580      	push	{r7, lr}
 80085d6:	b084      	sub	sp, #16
 80085d8:	af00      	add	r7, sp, #0
 80085da:	6078      	str	r0, [r7, #4]
 80085dc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80085de:	2300      	movs	r3, #0
 80085e0:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80085e2:	683b      	ldr	r3, [r7, #0]
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	d101      	bne.n	80085ec <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 80085e8:	2303      	movs	r3, #3
 80085ea:	e016      	b.n	800861a <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	683a      	ldr	r2, [r7, #0]
 80085f0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80085fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	d00b      	beq.n	8008618 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008606:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008608:	f107 020e 	add.w	r2, r7, #14
 800860c:	4610      	mov	r0, r2
 800860e:	4798      	blx	r3
 8008610:	4602      	mov	r2, r0
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8008618:	2300      	movs	r3, #0
}
 800861a:	4618      	mov	r0, r3
 800861c:	3710      	adds	r7, #16
 800861e:	46bd      	mov	sp, r7
 8008620:	bd80      	pop	{r7, pc}

08008622 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8008622:	b580      	push	{r7, lr}
 8008624:	b082      	sub	sp, #8
 8008626:	af00      	add	r7, sp, #0
 8008628:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800862a:	6878      	ldr	r0, [r7, #4]
 800862c:	f001 fc2c 	bl	8009e88 <USBD_LL_Start>
 8008630:	4603      	mov	r3, r0
}
 8008632:	4618      	mov	r0, r3
 8008634:	3708      	adds	r7, #8
 8008636:	46bd      	mov	sp, r7
 8008638:	bd80      	pop	{r7, pc}

0800863a <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800863a:	b480      	push	{r7}
 800863c:	b083      	sub	sp, #12
 800863e:	af00      	add	r7, sp, #0
 8008640:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008642:	2300      	movs	r3, #0
}
 8008644:	4618      	mov	r0, r3
 8008646:	370c      	adds	r7, #12
 8008648:	46bd      	mov	sp, r7
 800864a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800864e:	4770      	bx	lr

08008650 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008650:	b580      	push	{r7, lr}
 8008652:	b084      	sub	sp, #16
 8008654:	af00      	add	r7, sp, #0
 8008656:	6078      	str	r0, [r7, #4]
 8008658:	460b      	mov	r3, r1
 800865a:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800865c:	2303      	movs	r3, #3
 800865e:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008666:	2b00      	cmp	r3, #0
 8008668:	d009      	beq.n	800867e <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	78fa      	ldrb	r2, [r7, #3]
 8008674:	4611      	mov	r1, r2
 8008676:	6878      	ldr	r0, [r7, #4]
 8008678:	4798      	blx	r3
 800867a:	4603      	mov	r3, r0
 800867c:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800867e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008680:	4618      	mov	r0, r3
 8008682:	3710      	adds	r7, #16
 8008684:	46bd      	mov	sp, r7
 8008686:	bd80      	pop	{r7, pc}

08008688 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008688:	b580      	push	{r7, lr}
 800868a:	b082      	sub	sp, #8
 800868c:	af00      	add	r7, sp, #0
 800868e:	6078      	str	r0, [r7, #4]
 8008690:	460b      	mov	r3, r1
 8008692:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800869a:	2b00      	cmp	r3, #0
 800869c:	d007      	beq.n	80086ae <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80086a4:	685b      	ldr	r3, [r3, #4]
 80086a6:	78fa      	ldrb	r2, [r7, #3]
 80086a8:	4611      	mov	r1, r2
 80086aa:	6878      	ldr	r0, [r7, #4]
 80086ac:	4798      	blx	r3
  }

  return USBD_OK;
 80086ae:	2300      	movs	r3, #0
}
 80086b0:	4618      	mov	r0, r3
 80086b2:	3708      	adds	r7, #8
 80086b4:	46bd      	mov	sp, r7
 80086b6:	bd80      	pop	{r7, pc}

080086b8 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80086b8:	b580      	push	{r7, lr}
 80086ba:	b084      	sub	sp, #16
 80086bc:	af00      	add	r7, sp, #0
 80086be:	6078      	str	r0, [r7, #4]
 80086c0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80086c8:	6839      	ldr	r1, [r7, #0]
 80086ca:	4618      	mov	r0, r3
 80086cc:	f000 ff46 	bl	800955c <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	2201      	movs	r2, #1
 80086d4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80086de:	461a      	mov	r2, r3
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80086ec:	f003 031f 	and.w	r3, r3, #31
 80086f0:	2b02      	cmp	r3, #2
 80086f2:	d01a      	beq.n	800872a <USBD_LL_SetupStage+0x72>
 80086f4:	2b02      	cmp	r3, #2
 80086f6:	d822      	bhi.n	800873e <USBD_LL_SetupStage+0x86>
 80086f8:	2b00      	cmp	r3, #0
 80086fa:	d002      	beq.n	8008702 <USBD_LL_SetupStage+0x4a>
 80086fc:	2b01      	cmp	r3, #1
 80086fe:	d00a      	beq.n	8008716 <USBD_LL_SetupStage+0x5e>
 8008700:	e01d      	b.n	800873e <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008708:	4619      	mov	r1, r3
 800870a:	6878      	ldr	r0, [r7, #4]
 800870c:	f000 f9ee 	bl	8008aec <USBD_StdDevReq>
 8008710:	4603      	mov	r3, r0
 8008712:	73fb      	strb	r3, [r7, #15]
      break;
 8008714:	e020      	b.n	8008758 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800871c:	4619      	mov	r1, r3
 800871e:	6878      	ldr	r0, [r7, #4]
 8008720:	f000 fa52 	bl	8008bc8 <USBD_StdItfReq>
 8008724:	4603      	mov	r3, r0
 8008726:	73fb      	strb	r3, [r7, #15]
      break;
 8008728:	e016      	b.n	8008758 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008730:	4619      	mov	r1, r3
 8008732:	6878      	ldr	r0, [r7, #4]
 8008734:	f000 fa91 	bl	8008c5a <USBD_StdEPReq>
 8008738:	4603      	mov	r3, r0
 800873a:	73fb      	strb	r3, [r7, #15]
      break;
 800873c:	e00c      	b.n	8008758 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8008744:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008748:	b2db      	uxtb	r3, r3
 800874a:	4619      	mov	r1, r3
 800874c:	6878      	ldr	r0, [r7, #4]
 800874e:	f001 fbfb 	bl	8009f48 <USBD_LL_StallEP>
 8008752:	4603      	mov	r3, r0
 8008754:	73fb      	strb	r3, [r7, #15]
      break;
 8008756:	bf00      	nop
  }

  return ret;
 8008758:	7bfb      	ldrb	r3, [r7, #15]
}
 800875a:	4618      	mov	r0, r3
 800875c:	3710      	adds	r7, #16
 800875e:	46bd      	mov	sp, r7
 8008760:	bd80      	pop	{r7, pc}

08008762 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8008762:	b580      	push	{r7, lr}
 8008764:	b086      	sub	sp, #24
 8008766:	af00      	add	r7, sp, #0
 8008768:	60f8      	str	r0, [r7, #12]
 800876a:	460b      	mov	r3, r1
 800876c:	607a      	str	r2, [r7, #4]
 800876e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8008770:	7afb      	ldrb	r3, [r7, #11]
 8008772:	2b00      	cmp	r3, #0
 8008774:	d138      	bne.n	80087e8 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 8008776:	68fb      	ldr	r3, [r7, #12]
 8008778:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800877c:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800877e:	68fb      	ldr	r3, [r7, #12]
 8008780:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008784:	2b03      	cmp	r3, #3
 8008786:	d14a      	bne.n	800881e <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8008788:	693b      	ldr	r3, [r7, #16]
 800878a:	689a      	ldr	r2, [r3, #8]
 800878c:	693b      	ldr	r3, [r7, #16]
 800878e:	68db      	ldr	r3, [r3, #12]
 8008790:	429a      	cmp	r2, r3
 8008792:	d913      	bls.n	80087bc <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8008794:	693b      	ldr	r3, [r7, #16]
 8008796:	689a      	ldr	r2, [r3, #8]
 8008798:	693b      	ldr	r3, [r7, #16]
 800879a:	68db      	ldr	r3, [r3, #12]
 800879c:	1ad2      	subs	r2, r2, r3
 800879e:	693b      	ldr	r3, [r7, #16]
 80087a0:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80087a2:	693b      	ldr	r3, [r7, #16]
 80087a4:	68da      	ldr	r2, [r3, #12]
 80087a6:	693b      	ldr	r3, [r7, #16]
 80087a8:	689b      	ldr	r3, [r3, #8]
 80087aa:	4293      	cmp	r3, r2
 80087ac:	bf28      	it	cs
 80087ae:	4613      	movcs	r3, r2
 80087b0:	461a      	mov	r2, r3
 80087b2:	6879      	ldr	r1, [r7, #4]
 80087b4:	68f8      	ldr	r0, [r7, #12]
 80087b6:	f000 ffc5 	bl	8009744 <USBD_CtlContinueRx>
 80087ba:	e030      	b.n	800881e <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80087bc:	68fb      	ldr	r3, [r7, #12]
 80087be:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80087c2:	b2db      	uxtb	r3, r3
 80087c4:	2b03      	cmp	r3, #3
 80087c6:	d10b      	bne.n	80087e0 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 80087c8:	68fb      	ldr	r3, [r7, #12]
 80087ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80087ce:	691b      	ldr	r3, [r3, #16]
 80087d0:	2b00      	cmp	r3, #0
 80087d2:	d005      	beq.n	80087e0 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 80087d4:	68fb      	ldr	r3, [r7, #12]
 80087d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80087da:	691b      	ldr	r3, [r3, #16]
 80087dc:	68f8      	ldr	r0, [r7, #12]
 80087de:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80087e0:	68f8      	ldr	r0, [r7, #12]
 80087e2:	f000 ffc0 	bl	8009766 <USBD_CtlSendStatus>
 80087e6:	e01a      	b.n	800881e <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80087e8:	68fb      	ldr	r3, [r7, #12]
 80087ea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80087ee:	b2db      	uxtb	r3, r3
 80087f0:	2b03      	cmp	r3, #3
 80087f2:	d114      	bne.n	800881e <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 80087f4:	68fb      	ldr	r3, [r7, #12]
 80087f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80087fa:	699b      	ldr	r3, [r3, #24]
 80087fc:	2b00      	cmp	r3, #0
 80087fe:	d00e      	beq.n	800881e <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8008800:	68fb      	ldr	r3, [r7, #12]
 8008802:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008806:	699b      	ldr	r3, [r3, #24]
 8008808:	7afa      	ldrb	r2, [r7, #11]
 800880a:	4611      	mov	r1, r2
 800880c:	68f8      	ldr	r0, [r7, #12]
 800880e:	4798      	blx	r3
 8008810:	4603      	mov	r3, r0
 8008812:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8008814:	7dfb      	ldrb	r3, [r7, #23]
 8008816:	2b00      	cmp	r3, #0
 8008818:	d001      	beq.n	800881e <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 800881a:	7dfb      	ldrb	r3, [r7, #23]
 800881c:	e000      	b.n	8008820 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 800881e:	2300      	movs	r3, #0
}
 8008820:	4618      	mov	r0, r3
 8008822:	3718      	adds	r7, #24
 8008824:	46bd      	mov	sp, r7
 8008826:	bd80      	pop	{r7, pc}

08008828 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8008828:	b580      	push	{r7, lr}
 800882a:	b086      	sub	sp, #24
 800882c:	af00      	add	r7, sp, #0
 800882e:	60f8      	str	r0, [r7, #12]
 8008830:	460b      	mov	r3, r1
 8008832:	607a      	str	r2, [r7, #4]
 8008834:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8008836:	7afb      	ldrb	r3, [r7, #11]
 8008838:	2b00      	cmp	r3, #0
 800883a:	d16b      	bne.n	8008914 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 800883c:	68fb      	ldr	r3, [r7, #12]
 800883e:	3314      	adds	r3, #20
 8008840:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8008842:	68fb      	ldr	r3, [r7, #12]
 8008844:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008848:	2b02      	cmp	r3, #2
 800884a:	d156      	bne.n	80088fa <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 800884c:	693b      	ldr	r3, [r7, #16]
 800884e:	689a      	ldr	r2, [r3, #8]
 8008850:	693b      	ldr	r3, [r7, #16]
 8008852:	68db      	ldr	r3, [r3, #12]
 8008854:	429a      	cmp	r2, r3
 8008856:	d914      	bls.n	8008882 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8008858:	693b      	ldr	r3, [r7, #16]
 800885a:	689a      	ldr	r2, [r3, #8]
 800885c:	693b      	ldr	r3, [r7, #16]
 800885e:	68db      	ldr	r3, [r3, #12]
 8008860:	1ad2      	subs	r2, r2, r3
 8008862:	693b      	ldr	r3, [r7, #16]
 8008864:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8008866:	693b      	ldr	r3, [r7, #16]
 8008868:	689b      	ldr	r3, [r3, #8]
 800886a:	461a      	mov	r2, r3
 800886c:	6879      	ldr	r1, [r7, #4]
 800886e:	68f8      	ldr	r0, [r7, #12]
 8008870:	f000 ff3a 	bl	80096e8 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008874:	2300      	movs	r3, #0
 8008876:	2200      	movs	r2, #0
 8008878:	2100      	movs	r1, #0
 800887a:	68f8      	ldr	r0, [r7, #12]
 800887c:	f001 fc0f 	bl	800a09e <USBD_LL_PrepareReceive>
 8008880:	e03b      	b.n	80088fa <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8008882:	693b      	ldr	r3, [r7, #16]
 8008884:	68da      	ldr	r2, [r3, #12]
 8008886:	693b      	ldr	r3, [r7, #16]
 8008888:	689b      	ldr	r3, [r3, #8]
 800888a:	429a      	cmp	r2, r3
 800888c:	d11c      	bne.n	80088c8 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800888e:	693b      	ldr	r3, [r7, #16]
 8008890:	685a      	ldr	r2, [r3, #4]
 8008892:	693b      	ldr	r3, [r7, #16]
 8008894:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8008896:	429a      	cmp	r2, r3
 8008898:	d316      	bcc.n	80088c8 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800889a:	693b      	ldr	r3, [r7, #16]
 800889c:	685a      	ldr	r2, [r3, #4]
 800889e:	68fb      	ldr	r3, [r7, #12]
 80088a0:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80088a4:	429a      	cmp	r2, r3
 80088a6:	d20f      	bcs.n	80088c8 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80088a8:	2200      	movs	r2, #0
 80088aa:	2100      	movs	r1, #0
 80088ac:	68f8      	ldr	r0, [r7, #12]
 80088ae:	f000 ff1b 	bl	80096e8 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80088b2:	68fb      	ldr	r3, [r7, #12]
 80088b4:	2200      	movs	r2, #0
 80088b6:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80088ba:	2300      	movs	r3, #0
 80088bc:	2200      	movs	r2, #0
 80088be:	2100      	movs	r1, #0
 80088c0:	68f8      	ldr	r0, [r7, #12]
 80088c2:	f001 fbec 	bl	800a09e <USBD_LL_PrepareReceive>
 80088c6:	e018      	b.n	80088fa <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80088c8:	68fb      	ldr	r3, [r7, #12]
 80088ca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80088ce:	b2db      	uxtb	r3, r3
 80088d0:	2b03      	cmp	r3, #3
 80088d2:	d10b      	bne.n	80088ec <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 80088d4:	68fb      	ldr	r3, [r7, #12]
 80088d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80088da:	68db      	ldr	r3, [r3, #12]
 80088dc:	2b00      	cmp	r3, #0
 80088de:	d005      	beq.n	80088ec <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 80088e0:	68fb      	ldr	r3, [r7, #12]
 80088e2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80088e6:	68db      	ldr	r3, [r3, #12]
 80088e8:	68f8      	ldr	r0, [r7, #12]
 80088ea:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80088ec:	2180      	movs	r1, #128	; 0x80
 80088ee:	68f8      	ldr	r0, [r7, #12]
 80088f0:	f001 fb2a 	bl	8009f48 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80088f4:	68f8      	ldr	r0, [r7, #12]
 80088f6:	f000 ff49 	bl	800978c <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 80088fa:	68fb      	ldr	r3, [r7, #12]
 80088fc:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8008900:	2b01      	cmp	r3, #1
 8008902:	d122      	bne.n	800894a <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8008904:	68f8      	ldr	r0, [r7, #12]
 8008906:	f7ff fe98 	bl	800863a <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800890a:	68fb      	ldr	r3, [r7, #12]
 800890c:	2200      	movs	r2, #0
 800890e:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8008912:	e01a      	b.n	800894a <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008914:	68fb      	ldr	r3, [r7, #12]
 8008916:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800891a:	b2db      	uxtb	r3, r3
 800891c:	2b03      	cmp	r3, #3
 800891e:	d114      	bne.n	800894a <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8008920:	68fb      	ldr	r3, [r7, #12]
 8008922:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008926:	695b      	ldr	r3, [r3, #20]
 8008928:	2b00      	cmp	r3, #0
 800892a:	d00e      	beq.n	800894a <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800892c:	68fb      	ldr	r3, [r7, #12]
 800892e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008932:	695b      	ldr	r3, [r3, #20]
 8008934:	7afa      	ldrb	r2, [r7, #11]
 8008936:	4611      	mov	r1, r2
 8008938:	68f8      	ldr	r0, [r7, #12]
 800893a:	4798      	blx	r3
 800893c:	4603      	mov	r3, r0
 800893e:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8008940:	7dfb      	ldrb	r3, [r7, #23]
 8008942:	2b00      	cmp	r3, #0
 8008944:	d001      	beq.n	800894a <USBD_LL_DataInStage+0x122>
        {
          return ret;
 8008946:	7dfb      	ldrb	r3, [r7, #23]
 8008948:	e000      	b.n	800894c <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 800894a:	2300      	movs	r3, #0
}
 800894c:	4618      	mov	r0, r3
 800894e:	3718      	adds	r7, #24
 8008950:	46bd      	mov	sp, r7
 8008952:	bd80      	pop	{r7, pc}

08008954 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8008954:	b580      	push	{r7, lr}
 8008956:	b082      	sub	sp, #8
 8008958:	af00      	add	r7, sp, #0
 800895a:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	2201      	movs	r2, #1
 8008960:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	2200      	movs	r2, #0
 8008968:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	2200      	movs	r2, #0
 8008970:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	2200      	movs	r2, #0
 8008976:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008980:	2b00      	cmp	r3, #0
 8008982:	d101      	bne.n	8008988 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 8008984:	2303      	movs	r3, #3
 8008986:	e02f      	b.n	80089e8 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800898e:	2b00      	cmp	r3, #0
 8008990:	d00f      	beq.n	80089b2 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008998:	685b      	ldr	r3, [r3, #4]
 800899a:	2b00      	cmp	r3, #0
 800899c:	d009      	beq.n	80089b2 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80089a4:	685b      	ldr	r3, [r3, #4]
 80089a6:	687a      	ldr	r2, [r7, #4]
 80089a8:	6852      	ldr	r2, [r2, #4]
 80089aa:	b2d2      	uxtb	r2, r2
 80089ac:	4611      	mov	r1, r2
 80089ae:	6878      	ldr	r0, [r7, #4]
 80089b0:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80089b2:	2340      	movs	r3, #64	; 0x40
 80089b4:	2200      	movs	r2, #0
 80089b6:	2100      	movs	r1, #0
 80089b8:	6878      	ldr	r0, [r7, #4]
 80089ba:	f001 fa80 	bl	8009ebe <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	2201      	movs	r2, #1
 80089c2:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	2240      	movs	r2, #64	; 0x40
 80089ca:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80089ce:	2340      	movs	r3, #64	; 0x40
 80089d0:	2200      	movs	r2, #0
 80089d2:	2180      	movs	r1, #128	; 0x80
 80089d4:	6878      	ldr	r0, [r7, #4]
 80089d6:	f001 fa72 	bl	8009ebe <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	2201      	movs	r2, #1
 80089de:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	2240      	movs	r2, #64	; 0x40
 80089e4:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 80089e6:	2300      	movs	r3, #0
}
 80089e8:	4618      	mov	r0, r3
 80089ea:	3708      	adds	r7, #8
 80089ec:	46bd      	mov	sp, r7
 80089ee:	bd80      	pop	{r7, pc}

080089f0 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80089f0:	b480      	push	{r7}
 80089f2:	b083      	sub	sp, #12
 80089f4:	af00      	add	r7, sp, #0
 80089f6:	6078      	str	r0, [r7, #4]
 80089f8:	460b      	mov	r3, r1
 80089fa:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	78fa      	ldrb	r2, [r7, #3]
 8008a00:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8008a02:	2300      	movs	r3, #0
}
 8008a04:	4618      	mov	r0, r3
 8008a06:	370c      	adds	r7, #12
 8008a08:	46bd      	mov	sp, r7
 8008a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a0e:	4770      	bx	lr

08008a10 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8008a10:	b480      	push	{r7}
 8008a12:	b083      	sub	sp, #12
 8008a14:	af00      	add	r7, sp, #0
 8008a16:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008a1e:	b2da      	uxtb	r2, r3
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	2204      	movs	r2, #4
 8008a2a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8008a2e:	2300      	movs	r3, #0
}
 8008a30:	4618      	mov	r0, r3
 8008a32:	370c      	adds	r7, #12
 8008a34:	46bd      	mov	sp, r7
 8008a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a3a:	4770      	bx	lr

08008a3c <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8008a3c:	b480      	push	{r7}
 8008a3e:	b083      	sub	sp, #12
 8008a40:	af00      	add	r7, sp, #0
 8008a42:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008a4a:	b2db      	uxtb	r3, r3
 8008a4c:	2b04      	cmp	r3, #4
 8008a4e:	d106      	bne.n	8008a5e <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8008a56:	b2da      	uxtb	r2, r3
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8008a5e:	2300      	movs	r3, #0
}
 8008a60:	4618      	mov	r0, r3
 8008a62:	370c      	adds	r7, #12
 8008a64:	46bd      	mov	sp, r7
 8008a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a6a:	4770      	bx	lr

08008a6c <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8008a6c:	b580      	push	{r7, lr}
 8008a6e:	b082      	sub	sp, #8
 8008a70:	af00      	add	r7, sp, #0
 8008a72:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008a7a:	2b00      	cmp	r3, #0
 8008a7c:	d101      	bne.n	8008a82 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 8008a7e:	2303      	movs	r3, #3
 8008a80:	e012      	b.n	8008aa8 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008a88:	b2db      	uxtb	r3, r3
 8008a8a:	2b03      	cmp	r3, #3
 8008a8c:	d10b      	bne.n	8008aa6 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008a94:	69db      	ldr	r3, [r3, #28]
 8008a96:	2b00      	cmp	r3, #0
 8008a98:	d005      	beq.n	8008aa6 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008aa0:	69db      	ldr	r3, [r3, #28]
 8008aa2:	6878      	ldr	r0, [r7, #4]
 8008aa4:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008aa6:	2300      	movs	r3, #0
}
 8008aa8:	4618      	mov	r0, r3
 8008aaa:	3708      	adds	r7, #8
 8008aac:	46bd      	mov	sp, r7
 8008aae:	bd80      	pop	{r7, pc}

08008ab0 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8008ab0:	b480      	push	{r7}
 8008ab2:	b087      	sub	sp, #28
 8008ab4:	af00      	add	r7, sp, #0
 8008ab6:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8008abc:	697b      	ldr	r3, [r7, #20]
 8008abe:	781b      	ldrb	r3, [r3, #0]
 8008ac0:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8008ac2:	697b      	ldr	r3, [r7, #20]
 8008ac4:	3301      	adds	r3, #1
 8008ac6:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8008ac8:	697b      	ldr	r3, [r7, #20]
 8008aca:	781b      	ldrb	r3, [r3, #0]
 8008acc:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8008ace:	8a3b      	ldrh	r3, [r7, #16]
 8008ad0:	021b      	lsls	r3, r3, #8
 8008ad2:	b21a      	sxth	r2, r3
 8008ad4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8008ad8:	4313      	orrs	r3, r2
 8008ada:	b21b      	sxth	r3, r3
 8008adc:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8008ade:	89fb      	ldrh	r3, [r7, #14]
}
 8008ae0:	4618      	mov	r0, r3
 8008ae2:	371c      	adds	r7, #28
 8008ae4:	46bd      	mov	sp, r7
 8008ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aea:	4770      	bx	lr

08008aec <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008aec:	b580      	push	{r7, lr}
 8008aee:	b084      	sub	sp, #16
 8008af0:	af00      	add	r7, sp, #0
 8008af2:	6078      	str	r0, [r7, #4]
 8008af4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008af6:	2300      	movs	r3, #0
 8008af8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008afa:	683b      	ldr	r3, [r7, #0]
 8008afc:	781b      	ldrb	r3, [r3, #0]
 8008afe:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008b02:	2b40      	cmp	r3, #64	; 0x40
 8008b04:	d005      	beq.n	8008b12 <USBD_StdDevReq+0x26>
 8008b06:	2b40      	cmp	r3, #64	; 0x40
 8008b08:	d853      	bhi.n	8008bb2 <USBD_StdDevReq+0xc6>
 8008b0a:	2b00      	cmp	r3, #0
 8008b0c:	d00b      	beq.n	8008b26 <USBD_StdDevReq+0x3a>
 8008b0e:	2b20      	cmp	r3, #32
 8008b10:	d14f      	bne.n	8008bb2 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008b18:	689b      	ldr	r3, [r3, #8]
 8008b1a:	6839      	ldr	r1, [r7, #0]
 8008b1c:	6878      	ldr	r0, [r7, #4]
 8008b1e:	4798      	blx	r3
 8008b20:	4603      	mov	r3, r0
 8008b22:	73fb      	strb	r3, [r7, #15]
      break;
 8008b24:	e04a      	b.n	8008bbc <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008b26:	683b      	ldr	r3, [r7, #0]
 8008b28:	785b      	ldrb	r3, [r3, #1]
 8008b2a:	2b09      	cmp	r3, #9
 8008b2c:	d83b      	bhi.n	8008ba6 <USBD_StdDevReq+0xba>
 8008b2e:	a201      	add	r2, pc, #4	; (adr r2, 8008b34 <USBD_StdDevReq+0x48>)
 8008b30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b34:	08008b89 	.word	0x08008b89
 8008b38:	08008b9d 	.word	0x08008b9d
 8008b3c:	08008ba7 	.word	0x08008ba7
 8008b40:	08008b93 	.word	0x08008b93
 8008b44:	08008ba7 	.word	0x08008ba7
 8008b48:	08008b67 	.word	0x08008b67
 8008b4c:	08008b5d 	.word	0x08008b5d
 8008b50:	08008ba7 	.word	0x08008ba7
 8008b54:	08008b7f 	.word	0x08008b7f
 8008b58:	08008b71 	.word	0x08008b71
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8008b5c:	6839      	ldr	r1, [r7, #0]
 8008b5e:	6878      	ldr	r0, [r7, #4]
 8008b60:	f000 f9de 	bl	8008f20 <USBD_GetDescriptor>
          break;
 8008b64:	e024      	b.n	8008bb0 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8008b66:	6839      	ldr	r1, [r7, #0]
 8008b68:	6878      	ldr	r0, [r7, #4]
 8008b6a:	f000 fb6d 	bl	8009248 <USBD_SetAddress>
          break;
 8008b6e:	e01f      	b.n	8008bb0 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8008b70:	6839      	ldr	r1, [r7, #0]
 8008b72:	6878      	ldr	r0, [r7, #4]
 8008b74:	f000 fbac 	bl	80092d0 <USBD_SetConfig>
 8008b78:	4603      	mov	r3, r0
 8008b7a:	73fb      	strb	r3, [r7, #15]
          break;
 8008b7c:	e018      	b.n	8008bb0 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8008b7e:	6839      	ldr	r1, [r7, #0]
 8008b80:	6878      	ldr	r0, [r7, #4]
 8008b82:	f000 fc4b 	bl	800941c <USBD_GetConfig>
          break;
 8008b86:	e013      	b.n	8008bb0 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8008b88:	6839      	ldr	r1, [r7, #0]
 8008b8a:	6878      	ldr	r0, [r7, #4]
 8008b8c:	f000 fc7c 	bl	8009488 <USBD_GetStatus>
          break;
 8008b90:	e00e      	b.n	8008bb0 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8008b92:	6839      	ldr	r1, [r7, #0]
 8008b94:	6878      	ldr	r0, [r7, #4]
 8008b96:	f000 fcab 	bl	80094f0 <USBD_SetFeature>
          break;
 8008b9a:	e009      	b.n	8008bb0 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8008b9c:	6839      	ldr	r1, [r7, #0]
 8008b9e:	6878      	ldr	r0, [r7, #4]
 8008ba0:	f000 fcba 	bl	8009518 <USBD_ClrFeature>
          break;
 8008ba4:	e004      	b.n	8008bb0 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 8008ba6:	6839      	ldr	r1, [r7, #0]
 8008ba8:	6878      	ldr	r0, [r7, #4]
 8008baa:	f000 fd11 	bl	80095d0 <USBD_CtlError>
          break;
 8008bae:	bf00      	nop
      }
      break;
 8008bb0:	e004      	b.n	8008bbc <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 8008bb2:	6839      	ldr	r1, [r7, #0]
 8008bb4:	6878      	ldr	r0, [r7, #4]
 8008bb6:	f000 fd0b 	bl	80095d0 <USBD_CtlError>
      break;
 8008bba:	bf00      	nop
  }

  return ret;
 8008bbc:	7bfb      	ldrb	r3, [r7, #15]
}
 8008bbe:	4618      	mov	r0, r3
 8008bc0:	3710      	adds	r7, #16
 8008bc2:	46bd      	mov	sp, r7
 8008bc4:	bd80      	pop	{r7, pc}
 8008bc6:	bf00      	nop

08008bc8 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008bc8:	b580      	push	{r7, lr}
 8008bca:	b084      	sub	sp, #16
 8008bcc:	af00      	add	r7, sp, #0
 8008bce:	6078      	str	r0, [r7, #4]
 8008bd0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008bd2:	2300      	movs	r3, #0
 8008bd4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008bd6:	683b      	ldr	r3, [r7, #0]
 8008bd8:	781b      	ldrb	r3, [r3, #0]
 8008bda:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008bde:	2b40      	cmp	r3, #64	; 0x40
 8008be0:	d005      	beq.n	8008bee <USBD_StdItfReq+0x26>
 8008be2:	2b40      	cmp	r3, #64	; 0x40
 8008be4:	d82f      	bhi.n	8008c46 <USBD_StdItfReq+0x7e>
 8008be6:	2b00      	cmp	r3, #0
 8008be8:	d001      	beq.n	8008bee <USBD_StdItfReq+0x26>
 8008bea:	2b20      	cmp	r3, #32
 8008bec:	d12b      	bne.n	8008c46 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008bf4:	b2db      	uxtb	r3, r3
 8008bf6:	3b01      	subs	r3, #1
 8008bf8:	2b02      	cmp	r3, #2
 8008bfa:	d81d      	bhi.n	8008c38 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8008bfc:	683b      	ldr	r3, [r7, #0]
 8008bfe:	889b      	ldrh	r3, [r3, #4]
 8008c00:	b2db      	uxtb	r3, r3
 8008c02:	2b01      	cmp	r3, #1
 8008c04:	d813      	bhi.n	8008c2e <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008c0c:	689b      	ldr	r3, [r3, #8]
 8008c0e:	6839      	ldr	r1, [r7, #0]
 8008c10:	6878      	ldr	r0, [r7, #4]
 8008c12:	4798      	blx	r3
 8008c14:	4603      	mov	r3, r0
 8008c16:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8008c18:	683b      	ldr	r3, [r7, #0]
 8008c1a:	88db      	ldrh	r3, [r3, #6]
 8008c1c:	2b00      	cmp	r3, #0
 8008c1e:	d110      	bne.n	8008c42 <USBD_StdItfReq+0x7a>
 8008c20:	7bfb      	ldrb	r3, [r7, #15]
 8008c22:	2b00      	cmp	r3, #0
 8008c24:	d10d      	bne.n	8008c42 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 8008c26:	6878      	ldr	r0, [r7, #4]
 8008c28:	f000 fd9d 	bl	8009766 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8008c2c:	e009      	b.n	8008c42 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 8008c2e:	6839      	ldr	r1, [r7, #0]
 8008c30:	6878      	ldr	r0, [r7, #4]
 8008c32:	f000 fccd 	bl	80095d0 <USBD_CtlError>
          break;
 8008c36:	e004      	b.n	8008c42 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 8008c38:	6839      	ldr	r1, [r7, #0]
 8008c3a:	6878      	ldr	r0, [r7, #4]
 8008c3c:	f000 fcc8 	bl	80095d0 <USBD_CtlError>
          break;
 8008c40:	e000      	b.n	8008c44 <USBD_StdItfReq+0x7c>
          break;
 8008c42:	bf00      	nop
      }
      break;
 8008c44:	e004      	b.n	8008c50 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 8008c46:	6839      	ldr	r1, [r7, #0]
 8008c48:	6878      	ldr	r0, [r7, #4]
 8008c4a:	f000 fcc1 	bl	80095d0 <USBD_CtlError>
      break;
 8008c4e:	bf00      	nop
  }

  return ret;
 8008c50:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c52:	4618      	mov	r0, r3
 8008c54:	3710      	adds	r7, #16
 8008c56:	46bd      	mov	sp, r7
 8008c58:	bd80      	pop	{r7, pc}

08008c5a <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008c5a:	b580      	push	{r7, lr}
 8008c5c:	b084      	sub	sp, #16
 8008c5e:	af00      	add	r7, sp, #0
 8008c60:	6078      	str	r0, [r7, #4]
 8008c62:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8008c64:	2300      	movs	r3, #0
 8008c66:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8008c68:	683b      	ldr	r3, [r7, #0]
 8008c6a:	889b      	ldrh	r3, [r3, #4]
 8008c6c:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008c6e:	683b      	ldr	r3, [r7, #0]
 8008c70:	781b      	ldrb	r3, [r3, #0]
 8008c72:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008c76:	2b40      	cmp	r3, #64	; 0x40
 8008c78:	d007      	beq.n	8008c8a <USBD_StdEPReq+0x30>
 8008c7a:	2b40      	cmp	r3, #64	; 0x40
 8008c7c:	f200 8145 	bhi.w	8008f0a <USBD_StdEPReq+0x2b0>
 8008c80:	2b00      	cmp	r3, #0
 8008c82:	d00c      	beq.n	8008c9e <USBD_StdEPReq+0x44>
 8008c84:	2b20      	cmp	r3, #32
 8008c86:	f040 8140 	bne.w	8008f0a <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008c90:	689b      	ldr	r3, [r3, #8]
 8008c92:	6839      	ldr	r1, [r7, #0]
 8008c94:	6878      	ldr	r0, [r7, #4]
 8008c96:	4798      	blx	r3
 8008c98:	4603      	mov	r3, r0
 8008c9a:	73fb      	strb	r3, [r7, #15]
      break;
 8008c9c:	e13a      	b.n	8008f14 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008c9e:	683b      	ldr	r3, [r7, #0]
 8008ca0:	785b      	ldrb	r3, [r3, #1]
 8008ca2:	2b03      	cmp	r3, #3
 8008ca4:	d007      	beq.n	8008cb6 <USBD_StdEPReq+0x5c>
 8008ca6:	2b03      	cmp	r3, #3
 8008ca8:	f300 8129 	bgt.w	8008efe <USBD_StdEPReq+0x2a4>
 8008cac:	2b00      	cmp	r3, #0
 8008cae:	d07f      	beq.n	8008db0 <USBD_StdEPReq+0x156>
 8008cb0:	2b01      	cmp	r3, #1
 8008cb2:	d03c      	beq.n	8008d2e <USBD_StdEPReq+0xd4>
 8008cb4:	e123      	b.n	8008efe <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008cbc:	b2db      	uxtb	r3, r3
 8008cbe:	2b02      	cmp	r3, #2
 8008cc0:	d002      	beq.n	8008cc8 <USBD_StdEPReq+0x6e>
 8008cc2:	2b03      	cmp	r3, #3
 8008cc4:	d016      	beq.n	8008cf4 <USBD_StdEPReq+0x9a>
 8008cc6:	e02c      	b.n	8008d22 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008cc8:	7bbb      	ldrb	r3, [r7, #14]
 8008cca:	2b00      	cmp	r3, #0
 8008ccc:	d00d      	beq.n	8008cea <USBD_StdEPReq+0x90>
 8008cce:	7bbb      	ldrb	r3, [r7, #14]
 8008cd0:	2b80      	cmp	r3, #128	; 0x80
 8008cd2:	d00a      	beq.n	8008cea <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008cd4:	7bbb      	ldrb	r3, [r7, #14]
 8008cd6:	4619      	mov	r1, r3
 8008cd8:	6878      	ldr	r0, [r7, #4]
 8008cda:	f001 f935 	bl	8009f48 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8008cde:	2180      	movs	r1, #128	; 0x80
 8008ce0:	6878      	ldr	r0, [r7, #4]
 8008ce2:	f001 f931 	bl	8009f48 <USBD_LL_StallEP>
 8008ce6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008ce8:	e020      	b.n	8008d2c <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 8008cea:	6839      	ldr	r1, [r7, #0]
 8008cec:	6878      	ldr	r0, [r7, #4]
 8008cee:	f000 fc6f 	bl	80095d0 <USBD_CtlError>
              break;
 8008cf2:	e01b      	b.n	8008d2c <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008cf4:	683b      	ldr	r3, [r7, #0]
 8008cf6:	885b      	ldrh	r3, [r3, #2]
 8008cf8:	2b00      	cmp	r3, #0
 8008cfa:	d10e      	bne.n	8008d1a <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8008cfc:	7bbb      	ldrb	r3, [r7, #14]
 8008cfe:	2b00      	cmp	r3, #0
 8008d00:	d00b      	beq.n	8008d1a <USBD_StdEPReq+0xc0>
 8008d02:	7bbb      	ldrb	r3, [r7, #14]
 8008d04:	2b80      	cmp	r3, #128	; 0x80
 8008d06:	d008      	beq.n	8008d1a <USBD_StdEPReq+0xc0>
 8008d08:	683b      	ldr	r3, [r7, #0]
 8008d0a:	88db      	ldrh	r3, [r3, #6]
 8008d0c:	2b00      	cmp	r3, #0
 8008d0e:	d104      	bne.n	8008d1a <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8008d10:	7bbb      	ldrb	r3, [r7, #14]
 8008d12:	4619      	mov	r1, r3
 8008d14:	6878      	ldr	r0, [r7, #4]
 8008d16:	f001 f917 	bl	8009f48 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8008d1a:	6878      	ldr	r0, [r7, #4]
 8008d1c:	f000 fd23 	bl	8009766 <USBD_CtlSendStatus>

              break;
 8008d20:	e004      	b.n	8008d2c <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 8008d22:	6839      	ldr	r1, [r7, #0]
 8008d24:	6878      	ldr	r0, [r7, #4]
 8008d26:	f000 fc53 	bl	80095d0 <USBD_CtlError>
              break;
 8008d2a:	bf00      	nop
          }
          break;
 8008d2c:	e0ec      	b.n	8008f08 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008d34:	b2db      	uxtb	r3, r3
 8008d36:	2b02      	cmp	r3, #2
 8008d38:	d002      	beq.n	8008d40 <USBD_StdEPReq+0xe6>
 8008d3a:	2b03      	cmp	r3, #3
 8008d3c:	d016      	beq.n	8008d6c <USBD_StdEPReq+0x112>
 8008d3e:	e030      	b.n	8008da2 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008d40:	7bbb      	ldrb	r3, [r7, #14]
 8008d42:	2b00      	cmp	r3, #0
 8008d44:	d00d      	beq.n	8008d62 <USBD_StdEPReq+0x108>
 8008d46:	7bbb      	ldrb	r3, [r7, #14]
 8008d48:	2b80      	cmp	r3, #128	; 0x80
 8008d4a:	d00a      	beq.n	8008d62 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008d4c:	7bbb      	ldrb	r3, [r7, #14]
 8008d4e:	4619      	mov	r1, r3
 8008d50:	6878      	ldr	r0, [r7, #4]
 8008d52:	f001 f8f9 	bl	8009f48 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8008d56:	2180      	movs	r1, #128	; 0x80
 8008d58:	6878      	ldr	r0, [r7, #4]
 8008d5a:	f001 f8f5 	bl	8009f48 <USBD_LL_StallEP>
 8008d5e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008d60:	e025      	b.n	8008dae <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 8008d62:	6839      	ldr	r1, [r7, #0]
 8008d64:	6878      	ldr	r0, [r7, #4]
 8008d66:	f000 fc33 	bl	80095d0 <USBD_CtlError>
              break;
 8008d6a:	e020      	b.n	8008dae <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008d6c:	683b      	ldr	r3, [r7, #0]
 8008d6e:	885b      	ldrh	r3, [r3, #2]
 8008d70:	2b00      	cmp	r3, #0
 8008d72:	d11b      	bne.n	8008dac <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8008d74:	7bbb      	ldrb	r3, [r7, #14]
 8008d76:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008d7a:	2b00      	cmp	r3, #0
 8008d7c:	d004      	beq.n	8008d88 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8008d7e:	7bbb      	ldrb	r3, [r7, #14]
 8008d80:	4619      	mov	r1, r3
 8008d82:	6878      	ldr	r0, [r7, #4]
 8008d84:	f001 f8ff 	bl	8009f86 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8008d88:	6878      	ldr	r0, [r7, #4]
 8008d8a:	f000 fcec 	bl	8009766 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008d94:	689b      	ldr	r3, [r3, #8]
 8008d96:	6839      	ldr	r1, [r7, #0]
 8008d98:	6878      	ldr	r0, [r7, #4]
 8008d9a:	4798      	blx	r3
 8008d9c:	4603      	mov	r3, r0
 8008d9e:	73fb      	strb	r3, [r7, #15]
              }
              break;
 8008da0:	e004      	b.n	8008dac <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 8008da2:	6839      	ldr	r1, [r7, #0]
 8008da4:	6878      	ldr	r0, [r7, #4]
 8008da6:	f000 fc13 	bl	80095d0 <USBD_CtlError>
              break;
 8008daa:	e000      	b.n	8008dae <USBD_StdEPReq+0x154>
              break;
 8008dac:	bf00      	nop
          }
          break;
 8008dae:	e0ab      	b.n	8008f08 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008db6:	b2db      	uxtb	r3, r3
 8008db8:	2b02      	cmp	r3, #2
 8008dba:	d002      	beq.n	8008dc2 <USBD_StdEPReq+0x168>
 8008dbc:	2b03      	cmp	r3, #3
 8008dbe:	d032      	beq.n	8008e26 <USBD_StdEPReq+0x1cc>
 8008dc0:	e097      	b.n	8008ef2 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008dc2:	7bbb      	ldrb	r3, [r7, #14]
 8008dc4:	2b00      	cmp	r3, #0
 8008dc6:	d007      	beq.n	8008dd8 <USBD_StdEPReq+0x17e>
 8008dc8:	7bbb      	ldrb	r3, [r7, #14]
 8008dca:	2b80      	cmp	r3, #128	; 0x80
 8008dcc:	d004      	beq.n	8008dd8 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 8008dce:	6839      	ldr	r1, [r7, #0]
 8008dd0:	6878      	ldr	r0, [r7, #4]
 8008dd2:	f000 fbfd 	bl	80095d0 <USBD_CtlError>
                break;
 8008dd6:	e091      	b.n	8008efc <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008dd8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008ddc:	2b00      	cmp	r3, #0
 8008dde:	da0b      	bge.n	8008df8 <USBD_StdEPReq+0x19e>
 8008de0:	7bbb      	ldrb	r3, [r7, #14]
 8008de2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008de6:	4613      	mov	r3, r2
 8008de8:	009b      	lsls	r3, r3, #2
 8008dea:	4413      	add	r3, r2
 8008dec:	009b      	lsls	r3, r3, #2
 8008dee:	3310      	adds	r3, #16
 8008df0:	687a      	ldr	r2, [r7, #4]
 8008df2:	4413      	add	r3, r2
 8008df4:	3304      	adds	r3, #4
 8008df6:	e00b      	b.n	8008e10 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008df8:	7bbb      	ldrb	r3, [r7, #14]
 8008dfa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008dfe:	4613      	mov	r3, r2
 8008e00:	009b      	lsls	r3, r3, #2
 8008e02:	4413      	add	r3, r2
 8008e04:	009b      	lsls	r3, r3, #2
 8008e06:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008e0a:	687a      	ldr	r2, [r7, #4]
 8008e0c:	4413      	add	r3, r2
 8008e0e:	3304      	adds	r3, #4
 8008e10:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8008e12:	68bb      	ldr	r3, [r7, #8]
 8008e14:	2200      	movs	r2, #0
 8008e16:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008e18:	68bb      	ldr	r3, [r7, #8]
 8008e1a:	2202      	movs	r2, #2
 8008e1c:	4619      	mov	r1, r3
 8008e1e:	6878      	ldr	r0, [r7, #4]
 8008e20:	f000 fc47 	bl	80096b2 <USBD_CtlSendData>
              break;
 8008e24:	e06a      	b.n	8008efc <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8008e26:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008e2a:	2b00      	cmp	r3, #0
 8008e2c:	da11      	bge.n	8008e52 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8008e2e:	7bbb      	ldrb	r3, [r7, #14]
 8008e30:	f003 020f 	and.w	r2, r3, #15
 8008e34:	6879      	ldr	r1, [r7, #4]
 8008e36:	4613      	mov	r3, r2
 8008e38:	009b      	lsls	r3, r3, #2
 8008e3a:	4413      	add	r3, r2
 8008e3c:	009b      	lsls	r3, r3, #2
 8008e3e:	440b      	add	r3, r1
 8008e40:	3324      	adds	r3, #36	; 0x24
 8008e42:	881b      	ldrh	r3, [r3, #0]
 8008e44:	2b00      	cmp	r3, #0
 8008e46:	d117      	bne.n	8008e78 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8008e48:	6839      	ldr	r1, [r7, #0]
 8008e4a:	6878      	ldr	r0, [r7, #4]
 8008e4c:	f000 fbc0 	bl	80095d0 <USBD_CtlError>
                  break;
 8008e50:	e054      	b.n	8008efc <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8008e52:	7bbb      	ldrb	r3, [r7, #14]
 8008e54:	f003 020f 	and.w	r2, r3, #15
 8008e58:	6879      	ldr	r1, [r7, #4]
 8008e5a:	4613      	mov	r3, r2
 8008e5c:	009b      	lsls	r3, r3, #2
 8008e5e:	4413      	add	r3, r2
 8008e60:	009b      	lsls	r3, r3, #2
 8008e62:	440b      	add	r3, r1
 8008e64:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8008e68:	881b      	ldrh	r3, [r3, #0]
 8008e6a:	2b00      	cmp	r3, #0
 8008e6c:	d104      	bne.n	8008e78 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8008e6e:	6839      	ldr	r1, [r7, #0]
 8008e70:	6878      	ldr	r0, [r7, #4]
 8008e72:	f000 fbad 	bl	80095d0 <USBD_CtlError>
                  break;
 8008e76:	e041      	b.n	8008efc <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008e78:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008e7c:	2b00      	cmp	r3, #0
 8008e7e:	da0b      	bge.n	8008e98 <USBD_StdEPReq+0x23e>
 8008e80:	7bbb      	ldrb	r3, [r7, #14]
 8008e82:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008e86:	4613      	mov	r3, r2
 8008e88:	009b      	lsls	r3, r3, #2
 8008e8a:	4413      	add	r3, r2
 8008e8c:	009b      	lsls	r3, r3, #2
 8008e8e:	3310      	adds	r3, #16
 8008e90:	687a      	ldr	r2, [r7, #4]
 8008e92:	4413      	add	r3, r2
 8008e94:	3304      	adds	r3, #4
 8008e96:	e00b      	b.n	8008eb0 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008e98:	7bbb      	ldrb	r3, [r7, #14]
 8008e9a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008e9e:	4613      	mov	r3, r2
 8008ea0:	009b      	lsls	r3, r3, #2
 8008ea2:	4413      	add	r3, r2
 8008ea4:	009b      	lsls	r3, r3, #2
 8008ea6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008eaa:	687a      	ldr	r2, [r7, #4]
 8008eac:	4413      	add	r3, r2
 8008eae:	3304      	adds	r3, #4
 8008eb0:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8008eb2:	7bbb      	ldrb	r3, [r7, #14]
 8008eb4:	2b00      	cmp	r3, #0
 8008eb6:	d002      	beq.n	8008ebe <USBD_StdEPReq+0x264>
 8008eb8:	7bbb      	ldrb	r3, [r7, #14]
 8008eba:	2b80      	cmp	r3, #128	; 0x80
 8008ebc:	d103      	bne.n	8008ec6 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 8008ebe:	68bb      	ldr	r3, [r7, #8]
 8008ec0:	2200      	movs	r2, #0
 8008ec2:	601a      	str	r2, [r3, #0]
 8008ec4:	e00e      	b.n	8008ee4 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8008ec6:	7bbb      	ldrb	r3, [r7, #14]
 8008ec8:	4619      	mov	r1, r3
 8008eca:	6878      	ldr	r0, [r7, #4]
 8008ecc:	f001 f87a 	bl	8009fc4 <USBD_LL_IsStallEP>
 8008ed0:	4603      	mov	r3, r0
 8008ed2:	2b00      	cmp	r3, #0
 8008ed4:	d003      	beq.n	8008ede <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 8008ed6:	68bb      	ldr	r3, [r7, #8]
 8008ed8:	2201      	movs	r2, #1
 8008eda:	601a      	str	r2, [r3, #0]
 8008edc:	e002      	b.n	8008ee4 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 8008ede:	68bb      	ldr	r3, [r7, #8]
 8008ee0:	2200      	movs	r2, #0
 8008ee2:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008ee4:	68bb      	ldr	r3, [r7, #8]
 8008ee6:	2202      	movs	r2, #2
 8008ee8:	4619      	mov	r1, r3
 8008eea:	6878      	ldr	r0, [r7, #4]
 8008eec:	f000 fbe1 	bl	80096b2 <USBD_CtlSendData>
              break;
 8008ef0:	e004      	b.n	8008efc <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 8008ef2:	6839      	ldr	r1, [r7, #0]
 8008ef4:	6878      	ldr	r0, [r7, #4]
 8008ef6:	f000 fb6b 	bl	80095d0 <USBD_CtlError>
              break;
 8008efa:	bf00      	nop
          }
          break;
 8008efc:	e004      	b.n	8008f08 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 8008efe:	6839      	ldr	r1, [r7, #0]
 8008f00:	6878      	ldr	r0, [r7, #4]
 8008f02:	f000 fb65 	bl	80095d0 <USBD_CtlError>
          break;
 8008f06:	bf00      	nop
      }
      break;
 8008f08:	e004      	b.n	8008f14 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 8008f0a:	6839      	ldr	r1, [r7, #0]
 8008f0c:	6878      	ldr	r0, [r7, #4]
 8008f0e:	f000 fb5f 	bl	80095d0 <USBD_CtlError>
      break;
 8008f12:	bf00      	nop
  }

  return ret;
 8008f14:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f16:	4618      	mov	r0, r3
 8008f18:	3710      	adds	r7, #16
 8008f1a:	46bd      	mov	sp, r7
 8008f1c:	bd80      	pop	{r7, pc}
	...

08008f20 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008f20:	b580      	push	{r7, lr}
 8008f22:	b084      	sub	sp, #16
 8008f24:	af00      	add	r7, sp, #0
 8008f26:	6078      	str	r0, [r7, #4]
 8008f28:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008f2a:	2300      	movs	r3, #0
 8008f2c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8008f2e:	2300      	movs	r3, #0
 8008f30:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8008f32:	2300      	movs	r3, #0
 8008f34:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8008f36:	683b      	ldr	r3, [r7, #0]
 8008f38:	885b      	ldrh	r3, [r3, #2]
 8008f3a:	0a1b      	lsrs	r3, r3, #8
 8008f3c:	b29b      	uxth	r3, r3
 8008f3e:	3b01      	subs	r3, #1
 8008f40:	2b0e      	cmp	r3, #14
 8008f42:	f200 8152 	bhi.w	80091ea <USBD_GetDescriptor+0x2ca>
 8008f46:	a201      	add	r2, pc, #4	; (adr r2, 8008f4c <USBD_GetDescriptor+0x2c>)
 8008f48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f4c:	08008fbd 	.word	0x08008fbd
 8008f50:	08008fd5 	.word	0x08008fd5
 8008f54:	08009015 	.word	0x08009015
 8008f58:	080091eb 	.word	0x080091eb
 8008f5c:	080091eb 	.word	0x080091eb
 8008f60:	0800918b 	.word	0x0800918b
 8008f64:	080091b7 	.word	0x080091b7
 8008f68:	080091eb 	.word	0x080091eb
 8008f6c:	080091eb 	.word	0x080091eb
 8008f70:	080091eb 	.word	0x080091eb
 8008f74:	080091eb 	.word	0x080091eb
 8008f78:	080091eb 	.word	0x080091eb
 8008f7c:	080091eb 	.word	0x080091eb
 8008f80:	080091eb 	.word	0x080091eb
 8008f84:	08008f89 	.word	0x08008f89
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008f8e:	69db      	ldr	r3, [r3, #28]
 8008f90:	2b00      	cmp	r3, #0
 8008f92:	d00b      	beq.n	8008fac <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008f9a:	69db      	ldr	r3, [r3, #28]
 8008f9c:	687a      	ldr	r2, [r7, #4]
 8008f9e:	7c12      	ldrb	r2, [r2, #16]
 8008fa0:	f107 0108 	add.w	r1, r7, #8
 8008fa4:	4610      	mov	r0, r2
 8008fa6:	4798      	blx	r3
 8008fa8:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008faa:	e126      	b.n	80091fa <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8008fac:	6839      	ldr	r1, [r7, #0]
 8008fae:	6878      	ldr	r0, [r7, #4]
 8008fb0:	f000 fb0e 	bl	80095d0 <USBD_CtlError>
        err++;
 8008fb4:	7afb      	ldrb	r3, [r7, #11]
 8008fb6:	3301      	adds	r3, #1
 8008fb8:	72fb      	strb	r3, [r7, #11]
      break;
 8008fba:	e11e      	b.n	80091fa <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008fc2:	681b      	ldr	r3, [r3, #0]
 8008fc4:	687a      	ldr	r2, [r7, #4]
 8008fc6:	7c12      	ldrb	r2, [r2, #16]
 8008fc8:	f107 0108 	add.w	r1, r7, #8
 8008fcc:	4610      	mov	r0, r2
 8008fce:	4798      	blx	r3
 8008fd0:	60f8      	str	r0, [r7, #12]
      break;
 8008fd2:	e112      	b.n	80091fa <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	7c1b      	ldrb	r3, [r3, #16]
 8008fd8:	2b00      	cmp	r3, #0
 8008fda:	d10d      	bne.n	8008ff8 <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008fe2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008fe4:	f107 0208 	add.w	r2, r7, #8
 8008fe8:	4610      	mov	r0, r2
 8008fea:	4798      	blx	r3
 8008fec:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008fee:	68fb      	ldr	r3, [r7, #12]
 8008ff0:	3301      	adds	r3, #1
 8008ff2:	2202      	movs	r2, #2
 8008ff4:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8008ff6:	e100      	b.n	80091fa <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008ffe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009000:	f107 0208 	add.w	r2, r7, #8
 8009004:	4610      	mov	r0, r2
 8009006:	4798      	blx	r3
 8009008:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800900a:	68fb      	ldr	r3, [r7, #12]
 800900c:	3301      	adds	r3, #1
 800900e:	2202      	movs	r2, #2
 8009010:	701a      	strb	r2, [r3, #0]
      break;
 8009012:	e0f2      	b.n	80091fa <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8009014:	683b      	ldr	r3, [r7, #0]
 8009016:	885b      	ldrh	r3, [r3, #2]
 8009018:	b2db      	uxtb	r3, r3
 800901a:	2b05      	cmp	r3, #5
 800901c:	f200 80ac 	bhi.w	8009178 <USBD_GetDescriptor+0x258>
 8009020:	a201      	add	r2, pc, #4	; (adr r2, 8009028 <USBD_GetDescriptor+0x108>)
 8009022:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009026:	bf00      	nop
 8009028:	08009041 	.word	0x08009041
 800902c:	08009075 	.word	0x08009075
 8009030:	080090a9 	.word	0x080090a9
 8009034:	080090dd 	.word	0x080090dd
 8009038:	08009111 	.word	0x08009111
 800903c:	08009145 	.word	0x08009145
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009046:	685b      	ldr	r3, [r3, #4]
 8009048:	2b00      	cmp	r3, #0
 800904a:	d00b      	beq.n	8009064 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009052:	685b      	ldr	r3, [r3, #4]
 8009054:	687a      	ldr	r2, [r7, #4]
 8009056:	7c12      	ldrb	r2, [r2, #16]
 8009058:	f107 0108 	add.w	r1, r7, #8
 800905c:	4610      	mov	r0, r2
 800905e:	4798      	blx	r3
 8009060:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009062:	e091      	b.n	8009188 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009064:	6839      	ldr	r1, [r7, #0]
 8009066:	6878      	ldr	r0, [r7, #4]
 8009068:	f000 fab2 	bl	80095d0 <USBD_CtlError>
            err++;
 800906c:	7afb      	ldrb	r3, [r7, #11]
 800906e:	3301      	adds	r3, #1
 8009070:	72fb      	strb	r3, [r7, #11]
          break;
 8009072:	e089      	b.n	8009188 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800907a:	689b      	ldr	r3, [r3, #8]
 800907c:	2b00      	cmp	r3, #0
 800907e:	d00b      	beq.n	8009098 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009086:	689b      	ldr	r3, [r3, #8]
 8009088:	687a      	ldr	r2, [r7, #4]
 800908a:	7c12      	ldrb	r2, [r2, #16]
 800908c:	f107 0108 	add.w	r1, r7, #8
 8009090:	4610      	mov	r0, r2
 8009092:	4798      	blx	r3
 8009094:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009096:	e077      	b.n	8009188 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009098:	6839      	ldr	r1, [r7, #0]
 800909a:	6878      	ldr	r0, [r7, #4]
 800909c:	f000 fa98 	bl	80095d0 <USBD_CtlError>
            err++;
 80090a0:	7afb      	ldrb	r3, [r7, #11]
 80090a2:	3301      	adds	r3, #1
 80090a4:	72fb      	strb	r3, [r7, #11]
          break;
 80090a6:	e06f      	b.n	8009188 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80090ae:	68db      	ldr	r3, [r3, #12]
 80090b0:	2b00      	cmp	r3, #0
 80090b2:	d00b      	beq.n	80090cc <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80090ba:	68db      	ldr	r3, [r3, #12]
 80090bc:	687a      	ldr	r2, [r7, #4]
 80090be:	7c12      	ldrb	r2, [r2, #16]
 80090c0:	f107 0108 	add.w	r1, r7, #8
 80090c4:	4610      	mov	r0, r2
 80090c6:	4798      	blx	r3
 80090c8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80090ca:	e05d      	b.n	8009188 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80090cc:	6839      	ldr	r1, [r7, #0]
 80090ce:	6878      	ldr	r0, [r7, #4]
 80090d0:	f000 fa7e 	bl	80095d0 <USBD_CtlError>
            err++;
 80090d4:	7afb      	ldrb	r3, [r7, #11]
 80090d6:	3301      	adds	r3, #1
 80090d8:	72fb      	strb	r3, [r7, #11]
          break;
 80090da:	e055      	b.n	8009188 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80090e2:	691b      	ldr	r3, [r3, #16]
 80090e4:	2b00      	cmp	r3, #0
 80090e6:	d00b      	beq.n	8009100 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80090ee:	691b      	ldr	r3, [r3, #16]
 80090f0:	687a      	ldr	r2, [r7, #4]
 80090f2:	7c12      	ldrb	r2, [r2, #16]
 80090f4:	f107 0108 	add.w	r1, r7, #8
 80090f8:	4610      	mov	r0, r2
 80090fa:	4798      	blx	r3
 80090fc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80090fe:	e043      	b.n	8009188 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009100:	6839      	ldr	r1, [r7, #0]
 8009102:	6878      	ldr	r0, [r7, #4]
 8009104:	f000 fa64 	bl	80095d0 <USBD_CtlError>
            err++;
 8009108:	7afb      	ldrb	r3, [r7, #11]
 800910a:	3301      	adds	r3, #1
 800910c:	72fb      	strb	r3, [r7, #11]
          break;
 800910e:	e03b      	b.n	8009188 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009116:	695b      	ldr	r3, [r3, #20]
 8009118:	2b00      	cmp	r3, #0
 800911a:	d00b      	beq.n	8009134 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009122:	695b      	ldr	r3, [r3, #20]
 8009124:	687a      	ldr	r2, [r7, #4]
 8009126:	7c12      	ldrb	r2, [r2, #16]
 8009128:	f107 0108 	add.w	r1, r7, #8
 800912c:	4610      	mov	r0, r2
 800912e:	4798      	blx	r3
 8009130:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009132:	e029      	b.n	8009188 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009134:	6839      	ldr	r1, [r7, #0]
 8009136:	6878      	ldr	r0, [r7, #4]
 8009138:	f000 fa4a 	bl	80095d0 <USBD_CtlError>
            err++;
 800913c:	7afb      	ldrb	r3, [r7, #11]
 800913e:	3301      	adds	r3, #1
 8009140:	72fb      	strb	r3, [r7, #11]
          break;
 8009142:	e021      	b.n	8009188 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800914a:	699b      	ldr	r3, [r3, #24]
 800914c:	2b00      	cmp	r3, #0
 800914e:	d00b      	beq.n	8009168 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009156:	699b      	ldr	r3, [r3, #24]
 8009158:	687a      	ldr	r2, [r7, #4]
 800915a:	7c12      	ldrb	r2, [r2, #16]
 800915c:	f107 0108 	add.w	r1, r7, #8
 8009160:	4610      	mov	r0, r2
 8009162:	4798      	blx	r3
 8009164:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009166:	e00f      	b.n	8009188 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009168:	6839      	ldr	r1, [r7, #0]
 800916a:	6878      	ldr	r0, [r7, #4]
 800916c:	f000 fa30 	bl	80095d0 <USBD_CtlError>
            err++;
 8009170:	7afb      	ldrb	r3, [r7, #11]
 8009172:	3301      	adds	r3, #1
 8009174:	72fb      	strb	r3, [r7, #11]
          break;
 8009176:	e007      	b.n	8009188 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8009178:	6839      	ldr	r1, [r7, #0]
 800917a:	6878      	ldr	r0, [r7, #4]
 800917c:	f000 fa28 	bl	80095d0 <USBD_CtlError>
          err++;
 8009180:	7afb      	ldrb	r3, [r7, #11]
 8009182:	3301      	adds	r3, #1
 8009184:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 8009186:	bf00      	nop
      }
      break;
 8009188:	e037      	b.n	80091fa <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	7c1b      	ldrb	r3, [r3, #16]
 800918e:	2b00      	cmp	r3, #0
 8009190:	d109      	bne.n	80091a6 <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009198:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800919a:	f107 0208 	add.w	r2, r7, #8
 800919e:	4610      	mov	r0, r2
 80091a0:	4798      	blx	r3
 80091a2:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80091a4:	e029      	b.n	80091fa <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 80091a6:	6839      	ldr	r1, [r7, #0]
 80091a8:	6878      	ldr	r0, [r7, #4]
 80091aa:	f000 fa11 	bl	80095d0 <USBD_CtlError>
        err++;
 80091ae:	7afb      	ldrb	r3, [r7, #11]
 80091b0:	3301      	adds	r3, #1
 80091b2:	72fb      	strb	r3, [r7, #11]
      break;
 80091b4:	e021      	b.n	80091fa <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	7c1b      	ldrb	r3, [r3, #16]
 80091ba:	2b00      	cmp	r3, #0
 80091bc:	d10d      	bne.n	80091da <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80091c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80091c6:	f107 0208 	add.w	r2, r7, #8
 80091ca:	4610      	mov	r0, r2
 80091cc:	4798      	blx	r3
 80091ce:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80091d0:	68fb      	ldr	r3, [r7, #12]
 80091d2:	3301      	adds	r3, #1
 80091d4:	2207      	movs	r2, #7
 80091d6:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80091d8:	e00f      	b.n	80091fa <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 80091da:	6839      	ldr	r1, [r7, #0]
 80091dc:	6878      	ldr	r0, [r7, #4]
 80091de:	f000 f9f7 	bl	80095d0 <USBD_CtlError>
        err++;
 80091e2:	7afb      	ldrb	r3, [r7, #11]
 80091e4:	3301      	adds	r3, #1
 80091e6:	72fb      	strb	r3, [r7, #11]
      break;
 80091e8:	e007      	b.n	80091fa <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 80091ea:	6839      	ldr	r1, [r7, #0]
 80091ec:	6878      	ldr	r0, [r7, #4]
 80091ee:	f000 f9ef 	bl	80095d0 <USBD_CtlError>
      err++;
 80091f2:	7afb      	ldrb	r3, [r7, #11]
 80091f4:	3301      	adds	r3, #1
 80091f6:	72fb      	strb	r3, [r7, #11]
      break;
 80091f8:	bf00      	nop
  }

  if (err != 0U)
 80091fa:	7afb      	ldrb	r3, [r7, #11]
 80091fc:	2b00      	cmp	r3, #0
 80091fe:	d11e      	bne.n	800923e <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 8009200:	683b      	ldr	r3, [r7, #0]
 8009202:	88db      	ldrh	r3, [r3, #6]
 8009204:	2b00      	cmp	r3, #0
 8009206:	d016      	beq.n	8009236 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 8009208:	893b      	ldrh	r3, [r7, #8]
 800920a:	2b00      	cmp	r3, #0
 800920c:	d00e      	beq.n	800922c <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800920e:	683b      	ldr	r3, [r7, #0]
 8009210:	88da      	ldrh	r2, [r3, #6]
 8009212:	893b      	ldrh	r3, [r7, #8]
 8009214:	4293      	cmp	r3, r2
 8009216:	bf28      	it	cs
 8009218:	4613      	movcs	r3, r2
 800921a:	b29b      	uxth	r3, r3
 800921c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800921e:	893b      	ldrh	r3, [r7, #8]
 8009220:	461a      	mov	r2, r3
 8009222:	68f9      	ldr	r1, [r7, #12]
 8009224:	6878      	ldr	r0, [r7, #4]
 8009226:	f000 fa44 	bl	80096b2 <USBD_CtlSendData>
 800922a:	e009      	b.n	8009240 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800922c:	6839      	ldr	r1, [r7, #0]
 800922e:	6878      	ldr	r0, [r7, #4]
 8009230:	f000 f9ce 	bl	80095d0 <USBD_CtlError>
 8009234:	e004      	b.n	8009240 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8009236:	6878      	ldr	r0, [r7, #4]
 8009238:	f000 fa95 	bl	8009766 <USBD_CtlSendStatus>
 800923c:	e000      	b.n	8009240 <USBD_GetDescriptor+0x320>
    return;
 800923e:	bf00      	nop
  }
}
 8009240:	3710      	adds	r7, #16
 8009242:	46bd      	mov	sp, r7
 8009244:	bd80      	pop	{r7, pc}
 8009246:	bf00      	nop

08009248 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009248:	b580      	push	{r7, lr}
 800924a:	b084      	sub	sp, #16
 800924c:	af00      	add	r7, sp, #0
 800924e:	6078      	str	r0, [r7, #4]
 8009250:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8009252:	683b      	ldr	r3, [r7, #0]
 8009254:	889b      	ldrh	r3, [r3, #4]
 8009256:	2b00      	cmp	r3, #0
 8009258:	d131      	bne.n	80092be <USBD_SetAddress+0x76>
 800925a:	683b      	ldr	r3, [r7, #0]
 800925c:	88db      	ldrh	r3, [r3, #6]
 800925e:	2b00      	cmp	r3, #0
 8009260:	d12d      	bne.n	80092be <USBD_SetAddress+0x76>
 8009262:	683b      	ldr	r3, [r7, #0]
 8009264:	885b      	ldrh	r3, [r3, #2]
 8009266:	2b7f      	cmp	r3, #127	; 0x7f
 8009268:	d829      	bhi.n	80092be <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800926a:	683b      	ldr	r3, [r7, #0]
 800926c:	885b      	ldrh	r3, [r3, #2]
 800926e:	b2db      	uxtb	r3, r3
 8009270:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009274:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800927c:	b2db      	uxtb	r3, r3
 800927e:	2b03      	cmp	r3, #3
 8009280:	d104      	bne.n	800928c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8009282:	6839      	ldr	r1, [r7, #0]
 8009284:	6878      	ldr	r0, [r7, #4]
 8009286:	f000 f9a3 	bl	80095d0 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800928a:	e01d      	b.n	80092c8 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	7bfa      	ldrb	r2, [r7, #15]
 8009290:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8009294:	7bfb      	ldrb	r3, [r7, #15]
 8009296:	4619      	mov	r1, r3
 8009298:	6878      	ldr	r0, [r7, #4]
 800929a:	f000 fec0 	bl	800a01e <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800929e:	6878      	ldr	r0, [r7, #4]
 80092a0:	f000 fa61 	bl	8009766 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80092a4:	7bfb      	ldrb	r3, [r7, #15]
 80092a6:	2b00      	cmp	r3, #0
 80092a8:	d004      	beq.n	80092b4 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	2202      	movs	r2, #2
 80092ae:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80092b2:	e009      	b.n	80092c8 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	2201      	movs	r2, #1
 80092b8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80092bc:	e004      	b.n	80092c8 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80092be:	6839      	ldr	r1, [r7, #0]
 80092c0:	6878      	ldr	r0, [r7, #4]
 80092c2:	f000 f985 	bl	80095d0 <USBD_CtlError>
  }
}
 80092c6:	bf00      	nop
 80092c8:	bf00      	nop
 80092ca:	3710      	adds	r7, #16
 80092cc:	46bd      	mov	sp, r7
 80092ce:	bd80      	pop	{r7, pc}

080092d0 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80092d0:	b580      	push	{r7, lr}
 80092d2:	b084      	sub	sp, #16
 80092d4:	af00      	add	r7, sp, #0
 80092d6:	6078      	str	r0, [r7, #4]
 80092d8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80092da:	2300      	movs	r3, #0
 80092dc:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80092de:	683b      	ldr	r3, [r7, #0]
 80092e0:	885b      	ldrh	r3, [r3, #2]
 80092e2:	b2da      	uxtb	r2, r3
 80092e4:	4b4c      	ldr	r3, [pc, #304]	; (8009418 <USBD_SetConfig+0x148>)
 80092e6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80092e8:	4b4b      	ldr	r3, [pc, #300]	; (8009418 <USBD_SetConfig+0x148>)
 80092ea:	781b      	ldrb	r3, [r3, #0]
 80092ec:	2b01      	cmp	r3, #1
 80092ee:	d905      	bls.n	80092fc <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80092f0:	6839      	ldr	r1, [r7, #0]
 80092f2:	6878      	ldr	r0, [r7, #4]
 80092f4:	f000 f96c 	bl	80095d0 <USBD_CtlError>
    return USBD_FAIL;
 80092f8:	2303      	movs	r3, #3
 80092fa:	e088      	b.n	800940e <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009302:	b2db      	uxtb	r3, r3
 8009304:	2b02      	cmp	r3, #2
 8009306:	d002      	beq.n	800930e <USBD_SetConfig+0x3e>
 8009308:	2b03      	cmp	r3, #3
 800930a:	d025      	beq.n	8009358 <USBD_SetConfig+0x88>
 800930c:	e071      	b.n	80093f2 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800930e:	4b42      	ldr	r3, [pc, #264]	; (8009418 <USBD_SetConfig+0x148>)
 8009310:	781b      	ldrb	r3, [r3, #0]
 8009312:	2b00      	cmp	r3, #0
 8009314:	d01c      	beq.n	8009350 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 8009316:	4b40      	ldr	r3, [pc, #256]	; (8009418 <USBD_SetConfig+0x148>)
 8009318:	781b      	ldrb	r3, [r3, #0]
 800931a:	461a      	mov	r2, r3
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8009320:	4b3d      	ldr	r3, [pc, #244]	; (8009418 <USBD_SetConfig+0x148>)
 8009322:	781b      	ldrb	r3, [r3, #0]
 8009324:	4619      	mov	r1, r3
 8009326:	6878      	ldr	r0, [r7, #4]
 8009328:	f7ff f992 	bl	8008650 <USBD_SetClassConfig>
 800932c:	4603      	mov	r3, r0
 800932e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8009330:	7bfb      	ldrb	r3, [r7, #15]
 8009332:	2b00      	cmp	r3, #0
 8009334:	d004      	beq.n	8009340 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 8009336:	6839      	ldr	r1, [r7, #0]
 8009338:	6878      	ldr	r0, [r7, #4]
 800933a:	f000 f949 	bl	80095d0 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800933e:	e065      	b.n	800940c <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8009340:	6878      	ldr	r0, [r7, #4]
 8009342:	f000 fa10 	bl	8009766 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	2203      	movs	r2, #3
 800934a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800934e:	e05d      	b.n	800940c <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8009350:	6878      	ldr	r0, [r7, #4]
 8009352:	f000 fa08 	bl	8009766 <USBD_CtlSendStatus>
      break;
 8009356:	e059      	b.n	800940c <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8009358:	4b2f      	ldr	r3, [pc, #188]	; (8009418 <USBD_SetConfig+0x148>)
 800935a:	781b      	ldrb	r3, [r3, #0]
 800935c:	2b00      	cmp	r3, #0
 800935e:	d112      	bne.n	8009386 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	2202      	movs	r2, #2
 8009364:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8009368:	4b2b      	ldr	r3, [pc, #172]	; (8009418 <USBD_SetConfig+0x148>)
 800936a:	781b      	ldrb	r3, [r3, #0]
 800936c:	461a      	mov	r2, r3
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8009372:	4b29      	ldr	r3, [pc, #164]	; (8009418 <USBD_SetConfig+0x148>)
 8009374:	781b      	ldrb	r3, [r3, #0]
 8009376:	4619      	mov	r1, r3
 8009378:	6878      	ldr	r0, [r7, #4]
 800937a:	f7ff f985 	bl	8008688 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800937e:	6878      	ldr	r0, [r7, #4]
 8009380:	f000 f9f1 	bl	8009766 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8009384:	e042      	b.n	800940c <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 8009386:	4b24      	ldr	r3, [pc, #144]	; (8009418 <USBD_SetConfig+0x148>)
 8009388:	781b      	ldrb	r3, [r3, #0]
 800938a:	461a      	mov	r2, r3
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	685b      	ldr	r3, [r3, #4]
 8009390:	429a      	cmp	r2, r3
 8009392:	d02a      	beq.n	80093ea <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	685b      	ldr	r3, [r3, #4]
 8009398:	b2db      	uxtb	r3, r3
 800939a:	4619      	mov	r1, r3
 800939c:	6878      	ldr	r0, [r7, #4]
 800939e:	f7ff f973 	bl	8008688 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80093a2:	4b1d      	ldr	r3, [pc, #116]	; (8009418 <USBD_SetConfig+0x148>)
 80093a4:	781b      	ldrb	r3, [r3, #0]
 80093a6:	461a      	mov	r2, r3
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80093ac:	4b1a      	ldr	r3, [pc, #104]	; (8009418 <USBD_SetConfig+0x148>)
 80093ae:	781b      	ldrb	r3, [r3, #0]
 80093b0:	4619      	mov	r1, r3
 80093b2:	6878      	ldr	r0, [r7, #4]
 80093b4:	f7ff f94c 	bl	8008650 <USBD_SetClassConfig>
 80093b8:	4603      	mov	r3, r0
 80093ba:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80093bc:	7bfb      	ldrb	r3, [r7, #15]
 80093be:	2b00      	cmp	r3, #0
 80093c0:	d00f      	beq.n	80093e2 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 80093c2:	6839      	ldr	r1, [r7, #0]
 80093c4:	6878      	ldr	r0, [r7, #4]
 80093c6:	f000 f903 	bl	80095d0 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	685b      	ldr	r3, [r3, #4]
 80093ce:	b2db      	uxtb	r3, r3
 80093d0:	4619      	mov	r1, r3
 80093d2:	6878      	ldr	r0, [r7, #4]
 80093d4:	f7ff f958 	bl	8008688 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	2202      	movs	r2, #2
 80093dc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80093e0:	e014      	b.n	800940c <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 80093e2:	6878      	ldr	r0, [r7, #4]
 80093e4:	f000 f9bf 	bl	8009766 <USBD_CtlSendStatus>
      break;
 80093e8:	e010      	b.n	800940c <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 80093ea:	6878      	ldr	r0, [r7, #4]
 80093ec:	f000 f9bb 	bl	8009766 <USBD_CtlSendStatus>
      break;
 80093f0:	e00c      	b.n	800940c <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 80093f2:	6839      	ldr	r1, [r7, #0]
 80093f4:	6878      	ldr	r0, [r7, #4]
 80093f6:	f000 f8eb 	bl	80095d0 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80093fa:	4b07      	ldr	r3, [pc, #28]	; (8009418 <USBD_SetConfig+0x148>)
 80093fc:	781b      	ldrb	r3, [r3, #0]
 80093fe:	4619      	mov	r1, r3
 8009400:	6878      	ldr	r0, [r7, #4]
 8009402:	f7ff f941 	bl	8008688 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8009406:	2303      	movs	r3, #3
 8009408:	73fb      	strb	r3, [r7, #15]
      break;
 800940a:	bf00      	nop
  }

  return ret;
 800940c:	7bfb      	ldrb	r3, [r7, #15]
}
 800940e:	4618      	mov	r0, r3
 8009410:	3710      	adds	r7, #16
 8009412:	46bd      	mov	sp, r7
 8009414:	bd80      	pop	{r7, pc}
 8009416:	bf00      	nop
 8009418:	20000428 	.word	0x20000428

0800941c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800941c:	b580      	push	{r7, lr}
 800941e:	b082      	sub	sp, #8
 8009420:	af00      	add	r7, sp, #0
 8009422:	6078      	str	r0, [r7, #4]
 8009424:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8009426:	683b      	ldr	r3, [r7, #0]
 8009428:	88db      	ldrh	r3, [r3, #6]
 800942a:	2b01      	cmp	r3, #1
 800942c:	d004      	beq.n	8009438 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800942e:	6839      	ldr	r1, [r7, #0]
 8009430:	6878      	ldr	r0, [r7, #4]
 8009432:	f000 f8cd 	bl	80095d0 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8009436:	e023      	b.n	8009480 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800943e:	b2db      	uxtb	r3, r3
 8009440:	2b02      	cmp	r3, #2
 8009442:	dc02      	bgt.n	800944a <USBD_GetConfig+0x2e>
 8009444:	2b00      	cmp	r3, #0
 8009446:	dc03      	bgt.n	8009450 <USBD_GetConfig+0x34>
 8009448:	e015      	b.n	8009476 <USBD_GetConfig+0x5a>
 800944a:	2b03      	cmp	r3, #3
 800944c:	d00b      	beq.n	8009466 <USBD_GetConfig+0x4a>
 800944e:	e012      	b.n	8009476 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	2200      	movs	r2, #0
 8009454:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	3308      	adds	r3, #8
 800945a:	2201      	movs	r2, #1
 800945c:	4619      	mov	r1, r3
 800945e:	6878      	ldr	r0, [r7, #4]
 8009460:	f000 f927 	bl	80096b2 <USBD_CtlSendData>
        break;
 8009464:	e00c      	b.n	8009480 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	3304      	adds	r3, #4
 800946a:	2201      	movs	r2, #1
 800946c:	4619      	mov	r1, r3
 800946e:	6878      	ldr	r0, [r7, #4]
 8009470:	f000 f91f 	bl	80096b2 <USBD_CtlSendData>
        break;
 8009474:	e004      	b.n	8009480 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8009476:	6839      	ldr	r1, [r7, #0]
 8009478:	6878      	ldr	r0, [r7, #4]
 800947a:	f000 f8a9 	bl	80095d0 <USBD_CtlError>
        break;
 800947e:	bf00      	nop
}
 8009480:	bf00      	nop
 8009482:	3708      	adds	r7, #8
 8009484:	46bd      	mov	sp, r7
 8009486:	bd80      	pop	{r7, pc}

08009488 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009488:	b580      	push	{r7, lr}
 800948a:	b082      	sub	sp, #8
 800948c:	af00      	add	r7, sp, #0
 800948e:	6078      	str	r0, [r7, #4]
 8009490:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009498:	b2db      	uxtb	r3, r3
 800949a:	3b01      	subs	r3, #1
 800949c:	2b02      	cmp	r3, #2
 800949e:	d81e      	bhi.n	80094de <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80094a0:	683b      	ldr	r3, [r7, #0]
 80094a2:	88db      	ldrh	r3, [r3, #6]
 80094a4:	2b02      	cmp	r3, #2
 80094a6:	d004      	beq.n	80094b2 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 80094a8:	6839      	ldr	r1, [r7, #0]
 80094aa:	6878      	ldr	r0, [r7, #4]
 80094ac:	f000 f890 	bl	80095d0 <USBD_CtlError>
        break;
 80094b0:	e01a      	b.n	80094e8 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
#else
      pdev->dev_config_status = 0U;
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	2200      	movs	r2, #0
 80094b6:	60da      	str	r2, [r3, #12]
#endif

      if (pdev->dev_remote_wakeup != 0U)
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80094be:	2b00      	cmp	r3, #0
 80094c0:	d005      	beq.n	80094ce <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	68db      	ldr	r3, [r3, #12]
 80094c6:	f043 0202 	orr.w	r2, r3, #2
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	330c      	adds	r3, #12
 80094d2:	2202      	movs	r2, #2
 80094d4:	4619      	mov	r1, r3
 80094d6:	6878      	ldr	r0, [r7, #4]
 80094d8:	f000 f8eb 	bl	80096b2 <USBD_CtlSendData>
      break;
 80094dc:	e004      	b.n	80094e8 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80094de:	6839      	ldr	r1, [r7, #0]
 80094e0:	6878      	ldr	r0, [r7, #4]
 80094e2:	f000 f875 	bl	80095d0 <USBD_CtlError>
      break;
 80094e6:	bf00      	nop
  }
}
 80094e8:	bf00      	nop
 80094ea:	3708      	adds	r7, #8
 80094ec:	46bd      	mov	sp, r7
 80094ee:	bd80      	pop	{r7, pc}

080094f0 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80094f0:	b580      	push	{r7, lr}
 80094f2:	b082      	sub	sp, #8
 80094f4:	af00      	add	r7, sp, #0
 80094f6:	6078      	str	r0, [r7, #4]
 80094f8:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80094fa:	683b      	ldr	r3, [r7, #0]
 80094fc:	885b      	ldrh	r3, [r3, #2]
 80094fe:	2b01      	cmp	r3, #1
 8009500:	d106      	bne.n	8009510 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	2201      	movs	r2, #1
 8009506:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800950a:	6878      	ldr	r0, [r7, #4]
 800950c:	f000 f92b 	bl	8009766 <USBD_CtlSendStatus>
  }
}
 8009510:	bf00      	nop
 8009512:	3708      	adds	r7, #8
 8009514:	46bd      	mov	sp, r7
 8009516:	bd80      	pop	{r7, pc}

08009518 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009518:	b580      	push	{r7, lr}
 800951a:	b082      	sub	sp, #8
 800951c:	af00      	add	r7, sp, #0
 800951e:	6078      	str	r0, [r7, #4]
 8009520:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009528:	b2db      	uxtb	r3, r3
 800952a:	3b01      	subs	r3, #1
 800952c:	2b02      	cmp	r3, #2
 800952e:	d80b      	bhi.n	8009548 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009530:	683b      	ldr	r3, [r7, #0]
 8009532:	885b      	ldrh	r3, [r3, #2]
 8009534:	2b01      	cmp	r3, #1
 8009536:	d10c      	bne.n	8009552 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	2200      	movs	r2, #0
 800953c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8009540:	6878      	ldr	r0, [r7, #4]
 8009542:	f000 f910 	bl	8009766 <USBD_CtlSendStatus>
      }
      break;
 8009546:	e004      	b.n	8009552 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8009548:	6839      	ldr	r1, [r7, #0]
 800954a:	6878      	ldr	r0, [r7, #4]
 800954c:	f000 f840 	bl	80095d0 <USBD_CtlError>
      break;
 8009550:	e000      	b.n	8009554 <USBD_ClrFeature+0x3c>
      break;
 8009552:	bf00      	nop
  }
}
 8009554:	bf00      	nop
 8009556:	3708      	adds	r7, #8
 8009558:	46bd      	mov	sp, r7
 800955a:	bd80      	pop	{r7, pc}

0800955c <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800955c:	b580      	push	{r7, lr}
 800955e:	b084      	sub	sp, #16
 8009560:	af00      	add	r7, sp, #0
 8009562:	6078      	str	r0, [r7, #4]
 8009564:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8009566:	683b      	ldr	r3, [r7, #0]
 8009568:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800956a:	68fb      	ldr	r3, [r7, #12]
 800956c:	781a      	ldrb	r2, [r3, #0]
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8009572:	68fb      	ldr	r3, [r7, #12]
 8009574:	3301      	adds	r3, #1
 8009576:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8009578:	68fb      	ldr	r3, [r7, #12]
 800957a:	781a      	ldrb	r2, [r3, #0]
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8009580:	68fb      	ldr	r3, [r7, #12]
 8009582:	3301      	adds	r3, #1
 8009584:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8009586:	68f8      	ldr	r0, [r7, #12]
 8009588:	f7ff fa92 	bl	8008ab0 <SWAPBYTE>
 800958c:	4603      	mov	r3, r0
 800958e:	461a      	mov	r2, r3
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8009594:	68fb      	ldr	r3, [r7, #12]
 8009596:	3301      	adds	r3, #1
 8009598:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800959a:	68fb      	ldr	r3, [r7, #12]
 800959c:	3301      	adds	r3, #1
 800959e:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80095a0:	68f8      	ldr	r0, [r7, #12]
 80095a2:	f7ff fa85 	bl	8008ab0 <SWAPBYTE>
 80095a6:	4603      	mov	r3, r0
 80095a8:	461a      	mov	r2, r3
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80095ae:	68fb      	ldr	r3, [r7, #12]
 80095b0:	3301      	adds	r3, #1
 80095b2:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80095b4:	68fb      	ldr	r3, [r7, #12]
 80095b6:	3301      	adds	r3, #1
 80095b8:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80095ba:	68f8      	ldr	r0, [r7, #12]
 80095bc:	f7ff fa78 	bl	8008ab0 <SWAPBYTE>
 80095c0:	4603      	mov	r3, r0
 80095c2:	461a      	mov	r2, r3
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	80da      	strh	r2, [r3, #6]
}
 80095c8:	bf00      	nop
 80095ca:	3710      	adds	r7, #16
 80095cc:	46bd      	mov	sp, r7
 80095ce:	bd80      	pop	{r7, pc}

080095d0 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80095d0:	b580      	push	{r7, lr}
 80095d2:	b082      	sub	sp, #8
 80095d4:	af00      	add	r7, sp, #0
 80095d6:	6078      	str	r0, [r7, #4]
 80095d8:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80095da:	2180      	movs	r1, #128	; 0x80
 80095dc:	6878      	ldr	r0, [r7, #4]
 80095de:	f000 fcb3 	bl	8009f48 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80095e2:	2100      	movs	r1, #0
 80095e4:	6878      	ldr	r0, [r7, #4]
 80095e6:	f000 fcaf 	bl	8009f48 <USBD_LL_StallEP>
}
 80095ea:	bf00      	nop
 80095ec:	3708      	adds	r7, #8
 80095ee:	46bd      	mov	sp, r7
 80095f0:	bd80      	pop	{r7, pc}

080095f2 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80095f2:	b580      	push	{r7, lr}
 80095f4:	b086      	sub	sp, #24
 80095f6:	af00      	add	r7, sp, #0
 80095f8:	60f8      	str	r0, [r7, #12]
 80095fa:	60b9      	str	r1, [r7, #8]
 80095fc:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80095fe:	2300      	movs	r3, #0
 8009600:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8009602:	68fb      	ldr	r3, [r7, #12]
 8009604:	2b00      	cmp	r3, #0
 8009606:	d036      	beq.n	8009676 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8009608:	68fb      	ldr	r3, [r7, #12]
 800960a:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800960c:	6938      	ldr	r0, [r7, #16]
 800960e:	f000 f836 	bl	800967e <USBD_GetLen>
 8009612:	4603      	mov	r3, r0
 8009614:	3301      	adds	r3, #1
 8009616:	b29b      	uxth	r3, r3
 8009618:	005b      	lsls	r3, r3, #1
 800961a:	b29a      	uxth	r2, r3
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8009620:	7dfb      	ldrb	r3, [r7, #23]
 8009622:	68ba      	ldr	r2, [r7, #8]
 8009624:	4413      	add	r3, r2
 8009626:	687a      	ldr	r2, [r7, #4]
 8009628:	7812      	ldrb	r2, [r2, #0]
 800962a:	701a      	strb	r2, [r3, #0]
  idx++;
 800962c:	7dfb      	ldrb	r3, [r7, #23]
 800962e:	3301      	adds	r3, #1
 8009630:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8009632:	7dfb      	ldrb	r3, [r7, #23]
 8009634:	68ba      	ldr	r2, [r7, #8]
 8009636:	4413      	add	r3, r2
 8009638:	2203      	movs	r2, #3
 800963a:	701a      	strb	r2, [r3, #0]
  idx++;
 800963c:	7dfb      	ldrb	r3, [r7, #23]
 800963e:	3301      	adds	r3, #1
 8009640:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8009642:	e013      	b.n	800966c <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8009644:	7dfb      	ldrb	r3, [r7, #23]
 8009646:	68ba      	ldr	r2, [r7, #8]
 8009648:	4413      	add	r3, r2
 800964a:	693a      	ldr	r2, [r7, #16]
 800964c:	7812      	ldrb	r2, [r2, #0]
 800964e:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8009650:	693b      	ldr	r3, [r7, #16]
 8009652:	3301      	adds	r3, #1
 8009654:	613b      	str	r3, [r7, #16]
    idx++;
 8009656:	7dfb      	ldrb	r3, [r7, #23]
 8009658:	3301      	adds	r3, #1
 800965a:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800965c:	7dfb      	ldrb	r3, [r7, #23]
 800965e:	68ba      	ldr	r2, [r7, #8]
 8009660:	4413      	add	r3, r2
 8009662:	2200      	movs	r2, #0
 8009664:	701a      	strb	r2, [r3, #0]
    idx++;
 8009666:	7dfb      	ldrb	r3, [r7, #23]
 8009668:	3301      	adds	r3, #1
 800966a:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800966c:	693b      	ldr	r3, [r7, #16]
 800966e:	781b      	ldrb	r3, [r3, #0]
 8009670:	2b00      	cmp	r3, #0
 8009672:	d1e7      	bne.n	8009644 <USBD_GetString+0x52>
 8009674:	e000      	b.n	8009678 <USBD_GetString+0x86>
    return;
 8009676:	bf00      	nop
  }
}
 8009678:	3718      	adds	r7, #24
 800967a:	46bd      	mov	sp, r7
 800967c:	bd80      	pop	{r7, pc}

0800967e <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800967e:	b480      	push	{r7}
 8009680:	b085      	sub	sp, #20
 8009682:	af00      	add	r7, sp, #0
 8009684:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8009686:	2300      	movs	r3, #0
 8009688:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800968e:	e005      	b.n	800969c <USBD_GetLen+0x1e>
  {
    len++;
 8009690:	7bfb      	ldrb	r3, [r7, #15]
 8009692:	3301      	adds	r3, #1
 8009694:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8009696:	68bb      	ldr	r3, [r7, #8]
 8009698:	3301      	adds	r3, #1
 800969a:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800969c:	68bb      	ldr	r3, [r7, #8]
 800969e:	781b      	ldrb	r3, [r3, #0]
 80096a0:	2b00      	cmp	r3, #0
 80096a2:	d1f5      	bne.n	8009690 <USBD_GetLen+0x12>
  }

  return len;
 80096a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80096a6:	4618      	mov	r0, r3
 80096a8:	3714      	adds	r7, #20
 80096aa:	46bd      	mov	sp, r7
 80096ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096b0:	4770      	bx	lr

080096b2 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80096b2:	b580      	push	{r7, lr}
 80096b4:	b084      	sub	sp, #16
 80096b6:	af00      	add	r7, sp, #0
 80096b8:	60f8      	str	r0, [r7, #12]
 80096ba:	60b9      	str	r1, [r7, #8]
 80096bc:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80096be:	68fb      	ldr	r3, [r7, #12]
 80096c0:	2202      	movs	r2, #2
 80096c2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80096c6:	68fb      	ldr	r3, [r7, #12]
 80096c8:	687a      	ldr	r2, [r7, #4]
 80096ca:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 80096cc:	68fb      	ldr	r3, [r7, #12]
 80096ce:	687a      	ldr	r2, [r7, #4]
 80096d0:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	68ba      	ldr	r2, [r7, #8]
 80096d6:	2100      	movs	r1, #0
 80096d8:	68f8      	ldr	r0, [r7, #12]
 80096da:	f000 fcbf 	bl	800a05c <USBD_LL_Transmit>

  return USBD_OK;
 80096de:	2300      	movs	r3, #0
}
 80096e0:	4618      	mov	r0, r3
 80096e2:	3710      	adds	r7, #16
 80096e4:	46bd      	mov	sp, r7
 80096e6:	bd80      	pop	{r7, pc}

080096e8 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80096e8:	b580      	push	{r7, lr}
 80096ea:	b084      	sub	sp, #16
 80096ec:	af00      	add	r7, sp, #0
 80096ee:	60f8      	str	r0, [r7, #12]
 80096f0:	60b9      	str	r1, [r7, #8]
 80096f2:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	68ba      	ldr	r2, [r7, #8]
 80096f8:	2100      	movs	r1, #0
 80096fa:	68f8      	ldr	r0, [r7, #12]
 80096fc:	f000 fcae 	bl	800a05c <USBD_LL_Transmit>

  return USBD_OK;
 8009700:	2300      	movs	r3, #0
}
 8009702:	4618      	mov	r0, r3
 8009704:	3710      	adds	r7, #16
 8009706:	46bd      	mov	sp, r7
 8009708:	bd80      	pop	{r7, pc}

0800970a <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800970a:	b580      	push	{r7, lr}
 800970c:	b084      	sub	sp, #16
 800970e:	af00      	add	r7, sp, #0
 8009710:	60f8      	str	r0, [r7, #12]
 8009712:	60b9      	str	r1, [r7, #8]
 8009714:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8009716:	68fb      	ldr	r3, [r7, #12]
 8009718:	2203      	movs	r2, #3
 800971a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800971e:	68fb      	ldr	r3, [r7, #12]
 8009720:	687a      	ldr	r2, [r7, #4]
 8009722:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8009726:	68fb      	ldr	r3, [r7, #12]
 8009728:	687a      	ldr	r2, [r7, #4]
 800972a:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	68ba      	ldr	r2, [r7, #8]
 8009732:	2100      	movs	r1, #0
 8009734:	68f8      	ldr	r0, [r7, #12]
 8009736:	f000 fcb2 	bl	800a09e <USBD_LL_PrepareReceive>

  return USBD_OK;
 800973a:	2300      	movs	r3, #0
}
 800973c:	4618      	mov	r0, r3
 800973e:	3710      	adds	r7, #16
 8009740:	46bd      	mov	sp, r7
 8009742:	bd80      	pop	{r7, pc}

08009744 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8009744:	b580      	push	{r7, lr}
 8009746:	b084      	sub	sp, #16
 8009748:	af00      	add	r7, sp, #0
 800974a:	60f8      	str	r0, [r7, #12]
 800974c:	60b9      	str	r1, [r7, #8]
 800974e:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	68ba      	ldr	r2, [r7, #8]
 8009754:	2100      	movs	r1, #0
 8009756:	68f8      	ldr	r0, [r7, #12]
 8009758:	f000 fca1 	bl	800a09e <USBD_LL_PrepareReceive>

  return USBD_OK;
 800975c:	2300      	movs	r3, #0
}
 800975e:	4618      	mov	r0, r3
 8009760:	3710      	adds	r7, #16
 8009762:	46bd      	mov	sp, r7
 8009764:	bd80      	pop	{r7, pc}

08009766 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8009766:	b580      	push	{r7, lr}
 8009768:	b082      	sub	sp, #8
 800976a:	af00      	add	r7, sp, #0
 800976c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	2204      	movs	r2, #4
 8009772:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8009776:	2300      	movs	r3, #0
 8009778:	2200      	movs	r2, #0
 800977a:	2100      	movs	r1, #0
 800977c:	6878      	ldr	r0, [r7, #4]
 800977e:	f000 fc6d 	bl	800a05c <USBD_LL_Transmit>

  return USBD_OK;
 8009782:	2300      	movs	r3, #0
}
 8009784:	4618      	mov	r0, r3
 8009786:	3708      	adds	r7, #8
 8009788:	46bd      	mov	sp, r7
 800978a:	bd80      	pop	{r7, pc}

0800978c <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800978c:	b580      	push	{r7, lr}
 800978e:	b082      	sub	sp, #8
 8009790:	af00      	add	r7, sp, #0
 8009792:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	2205      	movs	r2, #5
 8009798:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800979c:	2300      	movs	r3, #0
 800979e:	2200      	movs	r2, #0
 80097a0:	2100      	movs	r1, #0
 80097a2:	6878      	ldr	r0, [r7, #4]
 80097a4:	f000 fc7b 	bl	800a09e <USBD_LL_PrepareReceive>

  return USBD_OK;
 80097a8:	2300      	movs	r3, #0
}
 80097aa:	4618      	mov	r0, r3
 80097ac:	3708      	adds	r7, #8
 80097ae:	46bd      	mov	sp, r7
 80097b0:	bd80      	pop	{r7, pc}
	...

080097b4 <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 80097b4:	b580      	push	{r7, lr}
 80097b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 80097b8:	2200      	movs	r2, #0
 80097ba:	4912      	ldr	r1, [pc, #72]	; (8009804 <MX_USB_Device_Init+0x50>)
 80097bc:	4812      	ldr	r0, [pc, #72]	; (8009808 <MX_USB_Device_Init+0x54>)
 80097be:	f7fe fed9 	bl	8008574 <USBD_Init>
 80097c2:	4603      	mov	r3, r0
 80097c4:	2b00      	cmp	r3, #0
 80097c6:	d001      	beq.n	80097cc <MX_USB_Device_Init+0x18>
    Error_Handler();
 80097c8:	f7f7 fa50 	bl	8000c6c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 80097cc:	490f      	ldr	r1, [pc, #60]	; (800980c <MX_USB_Device_Init+0x58>)
 80097ce:	480e      	ldr	r0, [pc, #56]	; (8009808 <MX_USB_Device_Init+0x54>)
 80097d0:	f7fe ff00 	bl	80085d4 <USBD_RegisterClass>
 80097d4:	4603      	mov	r3, r0
 80097d6:	2b00      	cmp	r3, #0
 80097d8:	d001      	beq.n	80097de <MX_USB_Device_Init+0x2a>
    Error_Handler();
 80097da:	f7f7 fa47 	bl	8000c6c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 80097de:	490c      	ldr	r1, [pc, #48]	; (8009810 <MX_USB_Device_Init+0x5c>)
 80097e0:	4809      	ldr	r0, [pc, #36]	; (8009808 <MX_USB_Device_Init+0x54>)
 80097e2:	f7fe fe21 	bl	8008428 <USBD_CDC_RegisterInterface>
 80097e6:	4603      	mov	r3, r0
 80097e8:	2b00      	cmp	r3, #0
 80097ea:	d001      	beq.n	80097f0 <MX_USB_Device_Init+0x3c>
    Error_Handler();
 80097ec:	f7f7 fa3e 	bl	8000c6c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 80097f0:	4805      	ldr	r0, [pc, #20]	; (8009808 <MX_USB_Device_Init+0x54>)
 80097f2:	f7fe ff16 	bl	8008622 <USBD_Start>
 80097f6:	4603      	mov	r3, r0
 80097f8:	2b00      	cmp	r3, #0
 80097fa:	d001      	beq.n	8009800 <MX_USB_Device_Init+0x4c>
    Error_Handler();
 80097fc:	f7f7 fa36 	bl	8000c6c <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 8009800:	bf00      	nop
 8009802:	bd80      	pop	{r7, pc}
 8009804:	20000130 	.word	0x20000130
 8009808:	2000042c 	.word	0x2000042c
 800980c:	20000018 	.word	0x20000018
 8009810:	2000011c 	.word	0x2000011c

08009814 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8009814:	b580      	push	{r7, lr}
 8009816:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8009818:	2200      	movs	r2, #0
 800981a:	4905      	ldr	r1, [pc, #20]	; (8009830 <CDC_Init_FS+0x1c>)
 800981c:	4805      	ldr	r0, [pc, #20]	; (8009834 <CDC_Init_FS+0x20>)
 800981e:	f7fe fe18 	bl	8008452 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8009822:	4905      	ldr	r1, [pc, #20]	; (8009838 <CDC_Init_FS+0x24>)
 8009824:	4803      	ldr	r0, [pc, #12]	; (8009834 <CDC_Init_FS+0x20>)
 8009826:	f7fe fe32 	bl	800848e <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800982a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800982c:	4618      	mov	r0, r3
 800982e:	bd80      	pop	{r7, pc}
 8009830:	2000077c 	.word	0x2000077c
 8009834:	2000042c 	.word	0x2000042c
 8009838:	200006fc 	.word	0x200006fc

0800983c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800983c:	b480      	push	{r7}
 800983e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8009840:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8009842:	4618      	mov	r0, r3
 8009844:	46bd      	mov	sp, r7
 8009846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800984a:	4770      	bx	lr

0800984c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800984c:	b480      	push	{r7}
 800984e:	b083      	sub	sp, #12
 8009850:	af00      	add	r7, sp, #0
 8009852:	4603      	mov	r3, r0
 8009854:	6039      	str	r1, [r7, #0]
 8009856:	71fb      	strb	r3, [r7, #7]
 8009858:	4613      	mov	r3, r2
 800985a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800985c:	79fb      	ldrb	r3, [r7, #7]
 800985e:	2b23      	cmp	r3, #35	; 0x23
 8009860:	d84a      	bhi.n	80098f8 <CDC_Control_FS+0xac>
 8009862:	a201      	add	r2, pc, #4	; (adr r2, 8009868 <CDC_Control_FS+0x1c>)
 8009864:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009868:	080098f9 	.word	0x080098f9
 800986c:	080098f9 	.word	0x080098f9
 8009870:	080098f9 	.word	0x080098f9
 8009874:	080098f9 	.word	0x080098f9
 8009878:	080098f9 	.word	0x080098f9
 800987c:	080098f9 	.word	0x080098f9
 8009880:	080098f9 	.word	0x080098f9
 8009884:	080098f9 	.word	0x080098f9
 8009888:	080098f9 	.word	0x080098f9
 800988c:	080098f9 	.word	0x080098f9
 8009890:	080098f9 	.word	0x080098f9
 8009894:	080098f9 	.word	0x080098f9
 8009898:	080098f9 	.word	0x080098f9
 800989c:	080098f9 	.word	0x080098f9
 80098a0:	080098f9 	.word	0x080098f9
 80098a4:	080098f9 	.word	0x080098f9
 80098a8:	080098f9 	.word	0x080098f9
 80098ac:	080098f9 	.word	0x080098f9
 80098b0:	080098f9 	.word	0x080098f9
 80098b4:	080098f9 	.word	0x080098f9
 80098b8:	080098f9 	.word	0x080098f9
 80098bc:	080098f9 	.word	0x080098f9
 80098c0:	080098f9 	.word	0x080098f9
 80098c4:	080098f9 	.word	0x080098f9
 80098c8:	080098f9 	.word	0x080098f9
 80098cc:	080098f9 	.word	0x080098f9
 80098d0:	080098f9 	.word	0x080098f9
 80098d4:	080098f9 	.word	0x080098f9
 80098d8:	080098f9 	.word	0x080098f9
 80098dc:	080098f9 	.word	0x080098f9
 80098e0:	080098f9 	.word	0x080098f9
 80098e4:	080098f9 	.word	0x080098f9
 80098e8:	080098f9 	.word	0x080098f9
 80098ec:	080098f9 	.word	0x080098f9
 80098f0:	080098f9 	.word	0x080098f9
 80098f4:	080098f9 	.word	0x080098f9
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80098f8:	bf00      	nop
  }

  return (USBD_OK);
 80098fa:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80098fc:	4618      	mov	r0, r3
 80098fe:	370c      	adds	r7, #12
 8009900:	46bd      	mov	sp, r7
 8009902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009906:	4770      	bx	lr

08009908 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8009908:	b580      	push	{r7, lr}
 800990a:	b082      	sub	sp, #8
 800990c:	af00      	add	r7, sp, #0
 800990e:	6078      	str	r0, [r7, #4]
 8009910:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8009912:	6879      	ldr	r1, [r7, #4]
 8009914:	4812      	ldr	r0, [pc, #72]	; (8009960 <CDC_Receive_FS+0x58>)
 8009916:	f7fe fdba 	bl	800848e <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800991a:	4811      	ldr	r0, [pc, #68]	; (8009960 <CDC_Receive_FS+0x58>)
 800991c:	f7fe fe00 	bl	8008520 <USBD_CDC_ReceivePacket>

  usb_rx_size = (uint16_t) *Len;
 8009920:	683b      	ldr	r3, [r7, #0]
 8009922:	681b      	ldr	r3, [r3, #0]
 8009924:	b29a      	uxth	r2, r3
 8009926:	4b0f      	ldr	r3, [pc, #60]	; (8009964 <CDC_Receive_FS+0x5c>)
 8009928:	801a      	strh	r2, [r3, #0]

  // clear the receive buffer
  memset(usb_rx_buffer, 0, USB_BUFFER_SIZE);
 800992a:	2280      	movs	r2, #128	; 0x80
 800992c:	2100      	movs	r1, #0
 800992e:	480e      	ldr	r0, [pc, #56]	; (8009968 <CDC_Receive_FS+0x60>)
 8009930:	f000 fca2 	bl	800a278 <memset>

  // copy the received data to the receive buffer
  memcpy(usb_rx_buffer, Buf, usb_rx_size);
 8009934:	4b0b      	ldr	r3, [pc, #44]	; (8009964 <CDC_Receive_FS+0x5c>)
 8009936:	881b      	ldrh	r3, [r3, #0]
 8009938:	461a      	mov	r2, r3
 800993a:	6879      	ldr	r1, [r7, #4]
 800993c:	480a      	ldr	r0, [pc, #40]	; (8009968 <CDC_Receive_FS+0x60>)
 800993e:	f000 fc8d 	bl	800a25c <memcpy>

  // clear the original buffer
  memset(Buf, 0, usb_rx_size);
 8009942:	4b08      	ldr	r3, [pc, #32]	; (8009964 <CDC_Receive_FS+0x5c>)
 8009944:	881b      	ldrh	r3, [r3, #0]
 8009946:	461a      	mov	r2, r3
 8009948:	2100      	movs	r1, #0
 800994a:	6878      	ldr	r0, [r7, #4]
 800994c:	f000 fc94 	bl	800a278 <memset>

  APP_handleUSBMessage();
 8009950:	f7f6 fe4c 	bl	80005ec <APP_handleUSBMessage>

  return (USBD_OK);
 8009954:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8009956:	4618      	mov	r0, r3
 8009958:	3708      	adds	r7, #8
 800995a:	46bd      	mov	sp, r7
 800995c:	bd80      	pop	{r7, pc}
 800995e:	bf00      	nop
 8009960:	2000042c 	.word	0x2000042c
 8009964:	20000204 	.word	0x20000204
 8009968:	20000208 	.word	0x20000208

0800996c <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800996c:	b580      	push	{r7, lr}
 800996e:	b084      	sub	sp, #16
 8009970:	af00      	add	r7, sp, #0
 8009972:	6078      	str	r0, [r7, #4]
 8009974:	460b      	mov	r3, r1
 8009976:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8009978:	2300      	movs	r3, #0
 800997a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800997c:	4b0d      	ldr	r3, [pc, #52]	; (80099b4 <CDC_Transmit_FS+0x48>)
 800997e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009982:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8009984:	68bb      	ldr	r3, [r7, #8]
 8009986:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800998a:	2b00      	cmp	r3, #0
 800998c:	d001      	beq.n	8009992 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800998e:	2301      	movs	r3, #1
 8009990:	e00b      	b.n	80099aa <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8009992:	887b      	ldrh	r3, [r7, #2]
 8009994:	461a      	mov	r2, r3
 8009996:	6879      	ldr	r1, [r7, #4]
 8009998:	4806      	ldr	r0, [pc, #24]	; (80099b4 <CDC_Transmit_FS+0x48>)
 800999a:	f7fe fd5a 	bl	8008452 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800999e:	4805      	ldr	r0, [pc, #20]	; (80099b4 <CDC_Transmit_FS+0x48>)
 80099a0:	f7fe fd8e 	bl	80084c0 <USBD_CDC_TransmitPacket>
 80099a4:	4603      	mov	r3, r0
 80099a6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 80099a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80099aa:	4618      	mov	r0, r3
 80099ac:	3710      	adds	r7, #16
 80099ae:	46bd      	mov	sp, r7
 80099b0:	bd80      	pop	{r7, pc}
 80099b2:	bf00      	nop
 80099b4:	2000042c 	.word	0x2000042c

080099b8 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80099b8:	b480      	push	{r7}
 80099ba:	b087      	sub	sp, #28
 80099bc:	af00      	add	r7, sp, #0
 80099be:	60f8      	str	r0, [r7, #12]
 80099c0:	60b9      	str	r1, [r7, #8]
 80099c2:	4613      	mov	r3, r2
 80099c4:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 80099c6:	2300      	movs	r3, #0
 80099c8:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 80099ca:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80099ce:	4618      	mov	r0, r3
 80099d0:	371c      	adds	r7, #28
 80099d2:	46bd      	mov	sp, r7
 80099d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099d8:	4770      	bx	lr
	...

080099dc <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80099dc:	b480      	push	{r7}
 80099de:	b083      	sub	sp, #12
 80099e0:	af00      	add	r7, sp, #0
 80099e2:	4603      	mov	r3, r0
 80099e4:	6039      	str	r1, [r7, #0]
 80099e6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 80099e8:	683b      	ldr	r3, [r7, #0]
 80099ea:	2212      	movs	r2, #18
 80099ec:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 80099ee:	4b03      	ldr	r3, [pc, #12]	; (80099fc <USBD_CDC_DeviceDescriptor+0x20>)
}
 80099f0:	4618      	mov	r0, r3
 80099f2:	370c      	adds	r7, #12
 80099f4:	46bd      	mov	sp, r7
 80099f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099fa:	4770      	bx	lr
 80099fc:	20000150 	.word	0x20000150

08009a00 <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009a00:	b480      	push	{r7}
 8009a02:	b083      	sub	sp, #12
 8009a04:	af00      	add	r7, sp, #0
 8009a06:	4603      	mov	r3, r0
 8009a08:	6039      	str	r1, [r7, #0]
 8009a0a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8009a0c:	683b      	ldr	r3, [r7, #0]
 8009a0e:	2204      	movs	r2, #4
 8009a10:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8009a12:	4b03      	ldr	r3, [pc, #12]	; (8009a20 <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 8009a14:	4618      	mov	r0, r3
 8009a16:	370c      	adds	r7, #12
 8009a18:	46bd      	mov	sp, r7
 8009a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a1e:	4770      	bx	lr
 8009a20:	20000164 	.word	0x20000164

08009a24 <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009a24:	b580      	push	{r7, lr}
 8009a26:	b082      	sub	sp, #8
 8009a28:	af00      	add	r7, sp, #0
 8009a2a:	4603      	mov	r3, r0
 8009a2c:	6039      	str	r1, [r7, #0]
 8009a2e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009a30:	79fb      	ldrb	r3, [r7, #7]
 8009a32:	2b00      	cmp	r3, #0
 8009a34:	d105      	bne.n	8009a42 <USBD_CDC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 8009a36:	683a      	ldr	r2, [r7, #0]
 8009a38:	4907      	ldr	r1, [pc, #28]	; (8009a58 <USBD_CDC_ProductStrDescriptor+0x34>)
 8009a3a:	4808      	ldr	r0, [pc, #32]	; (8009a5c <USBD_CDC_ProductStrDescriptor+0x38>)
 8009a3c:	f7ff fdd9 	bl	80095f2 <USBD_GetString>
 8009a40:	e004      	b.n	8009a4c <USBD_CDC_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 8009a42:	683a      	ldr	r2, [r7, #0]
 8009a44:	4904      	ldr	r1, [pc, #16]	; (8009a58 <USBD_CDC_ProductStrDescriptor+0x34>)
 8009a46:	4805      	ldr	r0, [pc, #20]	; (8009a5c <USBD_CDC_ProductStrDescriptor+0x38>)
 8009a48:	f7ff fdd3 	bl	80095f2 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009a4c:	4b02      	ldr	r3, [pc, #8]	; (8009a58 <USBD_CDC_ProductStrDescriptor+0x34>)
}
 8009a4e:	4618      	mov	r0, r3
 8009a50:	3708      	adds	r7, #8
 8009a52:	46bd      	mov	sp, r7
 8009a54:	bd80      	pop	{r7, pc}
 8009a56:	bf00      	nop
 8009a58:	200007fc 	.word	0x200007fc
 8009a5c:	0800aba8 	.word	0x0800aba8

08009a60 <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009a60:	b580      	push	{r7, lr}
 8009a62:	b082      	sub	sp, #8
 8009a64:	af00      	add	r7, sp, #0
 8009a66:	4603      	mov	r3, r0
 8009a68:	6039      	str	r1, [r7, #0]
 8009a6a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8009a6c:	683a      	ldr	r2, [r7, #0]
 8009a6e:	4904      	ldr	r1, [pc, #16]	; (8009a80 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 8009a70:	4804      	ldr	r0, [pc, #16]	; (8009a84 <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 8009a72:	f7ff fdbe 	bl	80095f2 <USBD_GetString>
  return USBD_StrDesc;
 8009a76:	4b02      	ldr	r3, [pc, #8]	; (8009a80 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
}
 8009a78:	4618      	mov	r0, r3
 8009a7a:	3708      	adds	r7, #8
 8009a7c:	46bd      	mov	sp, r7
 8009a7e:	bd80      	pop	{r7, pc}
 8009a80:	200007fc 	.word	0x200007fc
 8009a84:	0800abc0 	.word	0x0800abc0

08009a88 <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009a88:	b580      	push	{r7, lr}
 8009a8a:	b082      	sub	sp, #8
 8009a8c:	af00      	add	r7, sp, #0
 8009a8e:	4603      	mov	r3, r0
 8009a90:	6039      	str	r1, [r7, #0]
 8009a92:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8009a94:	683b      	ldr	r3, [r7, #0]
 8009a96:	221a      	movs	r2, #26
 8009a98:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8009a9a:	f000 f843 	bl	8009b24 <Get_SerialNum>

  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */

  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 8009a9e:	4b02      	ldr	r3, [pc, #8]	; (8009aa8 <USBD_CDC_SerialStrDescriptor+0x20>)
}
 8009aa0:	4618      	mov	r0, r3
 8009aa2:	3708      	adds	r7, #8
 8009aa4:	46bd      	mov	sp, r7
 8009aa6:	bd80      	pop	{r7, pc}
 8009aa8:	20000168 	.word	0x20000168

08009aac <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009aac:	b580      	push	{r7, lr}
 8009aae:	b082      	sub	sp, #8
 8009ab0:	af00      	add	r7, sp, #0
 8009ab2:	4603      	mov	r3, r0
 8009ab4:	6039      	str	r1, [r7, #0]
 8009ab6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8009ab8:	79fb      	ldrb	r3, [r7, #7]
 8009aba:	2b00      	cmp	r3, #0
 8009abc:	d105      	bne.n	8009aca <USBD_CDC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 8009abe:	683a      	ldr	r2, [r7, #0]
 8009ac0:	4907      	ldr	r1, [pc, #28]	; (8009ae0 <USBD_CDC_ConfigStrDescriptor+0x34>)
 8009ac2:	4808      	ldr	r0, [pc, #32]	; (8009ae4 <USBD_CDC_ConfigStrDescriptor+0x38>)
 8009ac4:	f7ff fd95 	bl	80095f2 <USBD_GetString>
 8009ac8:	e004      	b.n	8009ad4 <USBD_CDC_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 8009aca:	683a      	ldr	r2, [r7, #0]
 8009acc:	4904      	ldr	r1, [pc, #16]	; (8009ae0 <USBD_CDC_ConfigStrDescriptor+0x34>)
 8009ace:	4805      	ldr	r0, [pc, #20]	; (8009ae4 <USBD_CDC_ConfigStrDescriptor+0x38>)
 8009ad0:	f7ff fd8f 	bl	80095f2 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009ad4:	4b02      	ldr	r3, [pc, #8]	; (8009ae0 <USBD_CDC_ConfigStrDescriptor+0x34>)
}
 8009ad6:	4618      	mov	r0, r3
 8009ad8:	3708      	adds	r7, #8
 8009ada:	46bd      	mov	sp, r7
 8009adc:	bd80      	pop	{r7, pc}
 8009ade:	bf00      	nop
 8009ae0:	200007fc 	.word	0x200007fc
 8009ae4:	0800abd0 	.word	0x0800abd0

08009ae8 <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009ae8:	b580      	push	{r7, lr}
 8009aea:	b082      	sub	sp, #8
 8009aec:	af00      	add	r7, sp, #0
 8009aee:	4603      	mov	r3, r0
 8009af0:	6039      	str	r1, [r7, #0]
 8009af2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009af4:	79fb      	ldrb	r3, [r7, #7]
 8009af6:	2b00      	cmp	r3, #0
 8009af8:	d105      	bne.n	8009b06 <USBD_CDC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 8009afa:	683a      	ldr	r2, [r7, #0]
 8009afc:	4907      	ldr	r1, [pc, #28]	; (8009b1c <USBD_CDC_InterfaceStrDescriptor+0x34>)
 8009afe:	4808      	ldr	r0, [pc, #32]	; (8009b20 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 8009b00:	f7ff fd77 	bl	80095f2 <USBD_GetString>
 8009b04:	e004      	b.n	8009b10 <USBD_CDC_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 8009b06:	683a      	ldr	r2, [r7, #0]
 8009b08:	4904      	ldr	r1, [pc, #16]	; (8009b1c <USBD_CDC_InterfaceStrDescriptor+0x34>)
 8009b0a:	4805      	ldr	r0, [pc, #20]	; (8009b20 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 8009b0c:	f7ff fd71 	bl	80095f2 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009b10:	4b02      	ldr	r3, [pc, #8]	; (8009b1c <USBD_CDC_InterfaceStrDescriptor+0x34>)
}
 8009b12:	4618      	mov	r0, r3
 8009b14:	3708      	adds	r7, #8
 8009b16:	46bd      	mov	sp, r7
 8009b18:	bd80      	pop	{r7, pc}
 8009b1a:	bf00      	nop
 8009b1c:	200007fc 	.word	0x200007fc
 8009b20:	0800abdc 	.word	0x0800abdc

08009b24 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8009b24:	b580      	push	{r7, lr}
 8009b26:	b084      	sub	sp, #16
 8009b28:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8009b2a:	4b0f      	ldr	r3, [pc, #60]	; (8009b68 <Get_SerialNum+0x44>)
 8009b2c:	681b      	ldr	r3, [r3, #0]
 8009b2e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8009b30:	4b0e      	ldr	r3, [pc, #56]	; (8009b6c <Get_SerialNum+0x48>)
 8009b32:	681b      	ldr	r3, [r3, #0]
 8009b34:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8009b36:	4b0e      	ldr	r3, [pc, #56]	; (8009b70 <Get_SerialNum+0x4c>)
 8009b38:	681b      	ldr	r3, [r3, #0]
 8009b3a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8009b3c:	68fa      	ldr	r2, [r7, #12]
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	4413      	add	r3, r2
 8009b42:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8009b44:	68fb      	ldr	r3, [r7, #12]
 8009b46:	2b00      	cmp	r3, #0
 8009b48:	d009      	beq.n	8009b5e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8009b4a:	2208      	movs	r2, #8
 8009b4c:	4909      	ldr	r1, [pc, #36]	; (8009b74 <Get_SerialNum+0x50>)
 8009b4e:	68f8      	ldr	r0, [r7, #12]
 8009b50:	f000 f814 	bl	8009b7c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8009b54:	2204      	movs	r2, #4
 8009b56:	4908      	ldr	r1, [pc, #32]	; (8009b78 <Get_SerialNum+0x54>)
 8009b58:	68b8      	ldr	r0, [r7, #8]
 8009b5a:	f000 f80f 	bl	8009b7c <IntToUnicode>
  }
}
 8009b5e:	bf00      	nop
 8009b60:	3710      	adds	r7, #16
 8009b62:	46bd      	mov	sp, r7
 8009b64:	bd80      	pop	{r7, pc}
 8009b66:	bf00      	nop
 8009b68:	1fff7590 	.word	0x1fff7590
 8009b6c:	1fff7594 	.word	0x1fff7594
 8009b70:	1fff7598 	.word	0x1fff7598
 8009b74:	2000016a 	.word	0x2000016a
 8009b78:	2000017a 	.word	0x2000017a

08009b7c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8009b7c:	b480      	push	{r7}
 8009b7e:	b087      	sub	sp, #28
 8009b80:	af00      	add	r7, sp, #0
 8009b82:	60f8      	str	r0, [r7, #12]
 8009b84:	60b9      	str	r1, [r7, #8]
 8009b86:	4613      	mov	r3, r2
 8009b88:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8009b8a:	2300      	movs	r3, #0
 8009b8c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8009b8e:	2300      	movs	r3, #0
 8009b90:	75fb      	strb	r3, [r7, #23]
 8009b92:	e027      	b.n	8009be4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8009b94:	68fb      	ldr	r3, [r7, #12]
 8009b96:	0f1b      	lsrs	r3, r3, #28
 8009b98:	2b09      	cmp	r3, #9
 8009b9a:	d80b      	bhi.n	8009bb4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8009b9c:	68fb      	ldr	r3, [r7, #12]
 8009b9e:	0f1b      	lsrs	r3, r3, #28
 8009ba0:	b2da      	uxtb	r2, r3
 8009ba2:	7dfb      	ldrb	r3, [r7, #23]
 8009ba4:	005b      	lsls	r3, r3, #1
 8009ba6:	4619      	mov	r1, r3
 8009ba8:	68bb      	ldr	r3, [r7, #8]
 8009baa:	440b      	add	r3, r1
 8009bac:	3230      	adds	r2, #48	; 0x30
 8009bae:	b2d2      	uxtb	r2, r2
 8009bb0:	701a      	strb	r2, [r3, #0]
 8009bb2:	e00a      	b.n	8009bca <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8009bb4:	68fb      	ldr	r3, [r7, #12]
 8009bb6:	0f1b      	lsrs	r3, r3, #28
 8009bb8:	b2da      	uxtb	r2, r3
 8009bba:	7dfb      	ldrb	r3, [r7, #23]
 8009bbc:	005b      	lsls	r3, r3, #1
 8009bbe:	4619      	mov	r1, r3
 8009bc0:	68bb      	ldr	r3, [r7, #8]
 8009bc2:	440b      	add	r3, r1
 8009bc4:	3237      	adds	r2, #55	; 0x37
 8009bc6:	b2d2      	uxtb	r2, r2
 8009bc8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8009bca:	68fb      	ldr	r3, [r7, #12]
 8009bcc:	011b      	lsls	r3, r3, #4
 8009bce:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8009bd0:	7dfb      	ldrb	r3, [r7, #23]
 8009bd2:	005b      	lsls	r3, r3, #1
 8009bd4:	3301      	adds	r3, #1
 8009bd6:	68ba      	ldr	r2, [r7, #8]
 8009bd8:	4413      	add	r3, r2
 8009bda:	2200      	movs	r2, #0
 8009bdc:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8009bde:	7dfb      	ldrb	r3, [r7, #23]
 8009be0:	3301      	adds	r3, #1
 8009be2:	75fb      	strb	r3, [r7, #23]
 8009be4:	7dfa      	ldrb	r2, [r7, #23]
 8009be6:	79fb      	ldrb	r3, [r7, #7]
 8009be8:	429a      	cmp	r2, r3
 8009bea:	d3d3      	bcc.n	8009b94 <IntToUnicode+0x18>
  }
}
 8009bec:	bf00      	nop
 8009bee:	bf00      	nop
 8009bf0:	371c      	adds	r7, #28
 8009bf2:	46bd      	mov	sp, r7
 8009bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bf8:	4770      	bx	lr
	...

08009bfc <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009bfc:	b580      	push	{r7, lr}
 8009bfe:	b094      	sub	sp, #80	; 0x50
 8009c00:	af00      	add	r7, sp, #0
 8009c02:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8009c04:	f107 030c 	add.w	r3, r7, #12
 8009c08:	2244      	movs	r2, #68	; 0x44
 8009c0a:	2100      	movs	r1, #0
 8009c0c:	4618      	mov	r0, r3
 8009c0e:	f000 fb33 	bl	800a278 <memset>
  if(pcdHandle->Instance==USB)
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	681b      	ldr	r3, [r3, #0]
 8009c16:	4a15      	ldr	r2, [pc, #84]	; (8009c6c <HAL_PCD_MspInit+0x70>)
 8009c18:	4293      	cmp	r3, r2
 8009c1a:	d123      	bne.n	8009c64 <HAL_PCD_MspInit+0x68>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8009c1c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8009c20:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8009c22:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8009c26:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8009c28:	f107 030c 	add.w	r3, r7, #12
 8009c2c:	4618      	mov	r0, r3
 8009c2e:	f7fa fe4f 	bl	80048d0 <HAL_RCCEx_PeriphCLKConfig>
 8009c32:	4603      	mov	r3, r0
 8009c34:	2b00      	cmp	r3, #0
 8009c36:	d001      	beq.n	8009c3c <HAL_PCD_MspInit+0x40>
    {
      Error_Handler();
 8009c38:	f7f7 f818 	bl	8000c6c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8009c3c:	4b0c      	ldr	r3, [pc, #48]	; (8009c70 <HAL_PCD_MspInit+0x74>)
 8009c3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009c40:	4a0b      	ldr	r2, [pc, #44]	; (8009c70 <HAL_PCD_MspInit+0x74>)
 8009c42:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8009c46:	6593      	str	r3, [r2, #88]	; 0x58
 8009c48:	4b09      	ldr	r3, [pc, #36]	; (8009c70 <HAL_PCD_MspInit+0x74>)
 8009c4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009c4c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009c50:	60bb      	str	r3, [r7, #8]
 8009c52:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 8009c54:	2200      	movs	r2, #0
 8009c56:	2100      	movs	r1, #0
 8009c58:	2014      	movs	r0, #20
 8009c5a:	f7f7 fb0a 	bl	8001272 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 8009c5e:	2014      	movs	r0, #20
 8009c60:	f7f7 fb21 	bl	80012a6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8009c64:	bf00      	nop
 8009c66:	3750      	adds	r7, #80	; 0x50
 8009c68:	46bd      	mov	sp, r7
 8009c6a:	bd80      	pop	{r7, pc}
 8009c6c:	40005c00 	.word	0x40005c00
 8009c70:	40021000 	.word	0x40021000

08009c74 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009c74:	b580      	push	{r7, lr}
 8009c76:	b082      	sub	sp, #8
 8009c78:	af00      	add	r7, sp, #0
 8009c7a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	f8d3 22f0 	ldr.w	r2, [r3, #752]	; 0x2f0
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8009c88:	4619      	mov	r1, r3
 8009c8a:	4610      	mov	r0, r2
 8009c8c:	f7fe fd14 	bl	80086b8 <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 8009c90:	bf00      	nop
 8009c92:	3708      	adds	r7, #8
 8009c94:	46bd      	mov	sp, r7
 8009c96:	bd80      	pop	{r7, pc}

08009c98 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009c98:	b580      	push	{r7, lr}
 8009c9a:	b082      	sub	sp, #8
 8009c9c:	af00      	add	r7, sp, #0
 8009c9e:	6078      	str	r0, [r7, #4]
 8009ca0:	460b      	mov	r3, r1
 8009ca2:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	f8d3 02f0 	ldr.w	r0, [r3, #752]	; 0x2f0
 8009caa:	78fa      	ldrb	r2, [r7, #3]
 8009cac:	6879      	ldr	r1, [r7, #4]
 8009cae:	4613      	mov	r3, r2
 8009cb0:	009b      	lsls	r3, r3, #2
 8009cb2:	4413      	add	r3, r2
 8009cb4:	00db      	lsls	r3, r3, #3
 8009cb6:	440b      	add	r3, r1
 8009cb8:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8009cbc:	681a      	ldr	r2, [r3, #0]
 8009cbe:	78fb      	ldrb	r3, [r7, #3]
 8009cc0:	4619      	mov	r1, r3
 8009cc2:	f7fe fd4e 	bl	8008762 <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 8009cc6:	bf00      	nop
 8009cc8:	3708      	adds	r7, #8
 8009cca:	46bd      	mov	sp, r7
 8009ccc:	bd80      	pop	{r7, pc}

08009cce <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009cce:	b580      	push	{r7, lr}
 8009cd0:	b082      	sub	sp, #8
 8009cd2:	af00      	add	r7, sp, #0
 8009cd4:	6078      	str	r0, [r7, #4]
 8009cd6:	460b      	mov	r3, r1
 8009cd8:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	f8d3 02f0 	ldr.w	r0, [r3, #752]	; 0x2f0
 8009ce0:	78fa      	ldrb	r2, [r7, #3]
 8009ce2:	6879      	ldr	r1, [r7, #4]
 8009ce4:	4613      	mov	r3, r2
 8009ce6:	009b      	lsls	r3, r3, #2
 8009ce8:	4413      	add	r3, r2
 8009cea:	00db      	lsls	r3, r3, #3
 8009cec:	440b      	add	r3, r1
 8009cee:	333c      	adds	r3, #60	; 0x3c
 8009cf0:	681a      	ldr	r2, [r3, #0]
 8009cf2:	78fb      	ldrb	r3, [r7, #3]
 8009cf4:	4619      	mov	r1, r3
 8009cf6:	f7fe fd97 	bl	8008828 <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 8009cfa:	bf00      	nop
 8009cfc:	3708      	adds	r7, #8
 8009cfe:	46bd      	mov	sp, r7
 8009d00:	bd80      	pop	{r7, pc}

08009d02 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009d02:	b580      	push	{r7, lr}
 8009d04:	b082      	sub	sp, #8
 8009d06:	af00      	add	r7, sp, #0
 8009d08:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8009d10:	4618      	mov	r0, r3
 8009d12:	f7fe feab 	bl	8008a6c <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 8009d16:	bf00      	nop
 8009d18:	3708      	adds	r7, #8
 8009d1a:	46bd      	mov	sp, r7
 8009d1c:	bd80      	pop	{r7, pc}

08009d1e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009d1e:	b580      	push	{r7, lr}
 8009d20:	b084      	sub	sp, #16
 8009d22:	af00      	add	r7, sp, #0
 8009d24:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8009d26:	2301      	movs	r3, #1
 8009d28:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	689b      	ldr	r3, [r3, #8]
 8009d2e:	2b02      	cmp	r3, #2
 8009d30:	d001      	beq.n	8009d36 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8009d32:	f7f6 ff9b 	bl	8000c6c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8009d3c:	7bfa      	ldrb	r2, [r7, #15]
 8009d3e:	4611      	mov	r1, r2
 8009d40:	4618      	mov	r0, r3
 8009d42:	f7fe fe55 	bl	80089f0 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8009d4c:	4618      	mov	r0, r3
 8009d4e:	f7fe fe01 	bl	8008954 <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 8009d52:	bf00      	nop
 8009d54:	3710      	adds	r7, #16
 8009d56:	46bd      	mov	sp, r7
 8009d58:	bd80      	pop	{r7, pc}
	...

08009d5c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009d5c:	b580      	push	{r7, lr}
 8009d5e:	b082      	sub	sp, #8
 8009d60:	af00      	add	r7, sp, #0
 8009d62:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8009d6a:	4618      	mov	r0, r3
 8009d6c:	f7fe fe50 	bl	8008a10 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	699b      	ldr	r3, [r3, #24]
 8009d74:	2b00      	cmp	r3, #0
 8009d76:	d005      	beq.n	8009d84 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009d78:	4b04      	ldr	r3, [pc, #16]	; (8009d8c <HAL_PCD_SuspendCallback+0x30>)
 8009d7a:	691b      	ldr	r3, [r3, #16]
 8009d7c:	4a03      	ldr	r2, [pc, #12]	; (8009d8c <HAL_PCD_SuspendCallback+0x30>)
 8009d7e:	f043 0306 	orr.w	r3, r3, #6
 8009d82:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 8009d84:	bf00      	nop
 8009d86:	3708      	adds	r7, #8
 8009d88:	46bd      	mov	sp, r7
 8009d8a:	bd80      	pop	{r7, pc}
 8009d8c:	e000ed00 	.word	0xe000ed00

08009d90 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009d90:	b580      	push	{r7, lr}
 8009d92:	b082      	sub	sp, #8
 8009d94:	af00      	add	r7, sp, #0
 8009d96:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	699b      	ldr	r3, [r3, #24]
 8009d9c:	2b00      	cmp	r3, #0
 8009d9e:	d007      	beq.n	8009db0 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009da0:	4b08      	ldr	r3, [pc, #32]	; (8009dc4 <HAL_PCD_ResumeCallback+0x34>)
 8009da2:	691b      	ldr	r3, [r3, #16]
 8009da4:	4a07      	ldr	r2, [pc, #28]	; (8009dc4 <HAL_PCD_ResumeCallback+0x34>)
 8009da6:	f023 0306 	bic.w	r3, r3, #6
 8009daa:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 8009dac:	f000 f9fa 	bl	800a1a4 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8009db6:	4618      	mov	r0, r3
 8009db8:	f7fe fe40 	bl	8008a3c <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 8009dbc:	bf00      	nop
 8009dbe:	3708      	adds	r7, #8
 8009dc0:	46bd      	mov	sp, r7
 8009dc2:	bd80      	pop	{r7, pc}
 8009dc4:	e000ed00 	.word	0xe000ed00

08009dc8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8009dc8:	b580      	push	{r7, lr}
 8009dca:	b082      	sub	sp, #8
 8009dcc:	af00      	add	r7, sp, #0
 8009dce:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 8009dd0:	4a2b      	ldr	r2, [pc, #172]	; (8009e80 <USBD_LL_Init+0xb8>)
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	f8c2 32f0 	str.w	r3, [r2, #752]	; 0x2f0
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	4a29      	ldr	r2, [pc, #164]	; (8009e80 <USBD_LL_Init+0xb8>)
 8009ddc:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_FS.Instance = USB;
 8009de0:	4b27      	ldr	r3, [pc, #156]	; (8009e80 <USBD_LL_Init+0xb8>)
 8009de2:	4a28      	ldr	r2, [pc, #160]	; (8009e84 <USBD_LL_Init+0xbc>)
 8009de4:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8009de6:	4b26      	ldr	r3, [pc, #152]	; (8009e80 <USBD_LL_Init+0xb8>)
 8009de8:	2208      	movs	r2, #8
 8009dea:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8009dec:	4b24      	ldr	r3, [pc, #144]	; (8009e80 <USBD_LL_Init+0xb8>)
 8009dee:	2202      	movs	r2, #2
 8009df0:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8009df2:	4b23      	ldr	r3, [pc, #140]	; (8009e80 <USBD_LL_Init+0xb8>)
 8009df4:	2202      	movs	r2, #2
 8009df6:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8009df8:	4b21      	ldr	r3, [pc, #132]	; (8009e80 <USBD_LL_Init+0xb8>)
 8009dfa:	2200      	movs	r2, #0
 8009dfc:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8009dfe:	4b20      	ldr	r3, [pc, #128]	; (8009e80 <USBD_LL_Init+0xb8>)
 8009e00:	2200      	movs	r2, #0
 8009e02:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8009e04:	4b1e      	ldr	r3, [pc, #120]	; (8009e80 <USBD_LL_Init+0xb8>)
 8009e06:	2200      	movs	r2, #0
 8009e08:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8009e0a:	4b1d      	ldr	r3, [pc, #116]	; (8009e80 <USBD_LL_Init+0xb8>)
 8009e0c:	2200      	movs	r2, #0
 8009e0e:	621a      	str	r2, [r3, #32]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8009e10:	481b      	ldr	r0, [pc, #108]	; (8009e80 <USBD_LL_Init+0xb8>)
 8009e12:	f7f8 fa51 	bl	80022b8 <HAL_PCD_Init>
 8009e16:	4603      	mov	r3, r0
 8009e18:	2b00      	cmp	r3, #0
 8009e1a:	d001      	beq.n	8009e20 <USBD_LL_Init+0x58>
  {
    Error_Handler( );
 8009e1c:	f7f6 ff26 	bl	8000c6c <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8009e26:	2318      	movs	r3, #24
 8009e28:	2200      	movs	r2, #0
 8009e2a:	2100      	movs	r1, #0
 8009e2c:	f7f9 ff0a 	bl	8003c44 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8009e36:	2358      	movs	r3, #88	; 0x58
 8009e38:	2200      	movs	r2, #0
 8009e3a:	2180      	movs	r1, #128	; 0x80
 8009e3c:	f7f9 ff02 	bl	8003c44 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8009e46:	23c0      	movs	r3, #192	; 0xc0
 8009e48:	2200      	movs	r2, #0
 8009e4a:	2181      	movs	r1, #129	; 0x81
 8009e4c:	f7f9 fefa 	bl	8003c44 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8009e56:	f44f 7388 	mov.w	r3, #272	; 0x110
 8009e5a:	2200      	movs	r2, #0
 8009e5c:	2101      	movs	r1, #1
 8009e5e:	f7f9 fef1 	bl	8003c44 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8009e68:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009e6c:	2200      	movs	r2, #0
 8009e6e:	2182      	movs	r1, #130	; 0x82
 8009e70:	f7f9 fee8 	bl	8003c44 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8009e74:	2300      	movs	r3, #0
}
 8009e76:	4618      	mov	r0, r3
 8009e78:	3708      	adds	r7, #8
 8009e7a:	46bd      	mov	sp, r7
 8009e7c:	bd80      	pop	{r7, pc}
 8009e7e:	bf00      	nop
 8009e80:	200009fc 	.word	0x200009fc
 8009e84:	40005c00 	.word	0x40005c00

08009e88 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8009e88:	b580      	push	{r7, lr}
 8009e8a:	b084      	sub	sp, #16
 8009e8c:	af00      	add	r7, sp, #0
 8009e8e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009e90:	2300      	movs	r3, #0
 8009e92:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009e94:	2300      	movs	r3, #0
 8009e96:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009e9e:	4618      	mov	r0, r3
 8009ea0:	f7f8 faef 	bl	8002482 <HAL_PCD_Start>
 8009ea4:	4603      	mov	r3, r0
 8009ea6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009ea8:	7bfb      	ldrb	r3, [r7, #15]
 8009eaa:	4618      	mov	r0, r3
 8009eac:	f000 f980 	bl	800a1b0 <USBD_Get_USB_Status>
 8009eb0:	4603      	mov	r3, r0
 8009eb2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009eb4:	7bbb      	ldrb	r3, [r7, #14]
}
 8009eb6:	4618      	mov	r0, r3
 8009eb8:	3710      	adds	r7, #16
 8009eba:	46bd      	mov	sp, r7
 8009ebc:	bd80      	pop	{r7, pc}

08009ebe <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8009ebe:	b580      	push	{r7, lr}
 8009ec0:	b084      	sub	sp, #16
 8009ec2:	af00      	add	r7, sp, #0
 8009ec4:	6078      	str	r0, [r7, #4]
 8009ec6:	4608      	mov	r0, r1
 8009ec8:	4611      	mov	r1, r2
 8009eca:	461a      	mov	r2, r3
 8009ecc:	4603      	mov	r3, r0
 8009ece:	70fb      	strb	r3, [r7, #3]
 8009ed0:	460b      	mov	r3, r1
 8009ed2:	70bb      	strb	r3, [r7, #2]
 8009ed4:	4613      	mov	r3, r2
 8009ed6:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009ed8:	2300      	movs	r3, #0
 8009eda:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009edc:	2300      	movs	r3, #0
 8009ede:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8009ee6:	78bb      	ldrb	r3, [r7, #2]
 8009ee8:	883a      	ldrh	r2, [r7, #0]
 8009eea:	78f9      	ldrb	r1, [r7, #3]
 8009eec:	f7f8 fc37 	bl	800275e <HAL_PCD_EP_Open>
 8009ef0:	4603      	mov	r3, r0
 8009ef2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009ef4:	7bfb      	ldrb	r3, [r7, #15]
 8009ef6:	4618      	mov	r0, r3
 8009ef8:	f000 f95a 	bl	800a1b0 <USBD_Get_USB_Status>
 8009efc:	4603      	mov	r3, r0
 8009efe:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009f00:	7bbb      	ldrb	r3, [r7, #14]
}
 8009f02:	4618      	mov	r0, r3
 8009f04:	3710      	adds	r7, #16
 8009f06:	46bd      	mov	sp, r7
 8009f08:	bd80      	pop	{r7, pc}

08009f0a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009f0a:	b580      	push	{r7, lr}
 8009f0c:	b084      	sub	sp, #16
 8009f0e:	af00      	add	r7, sp, #0
 8009f10:	6078      	str	r0, [r7, #4]
 8009f12:	460b      	mov	r3, r1
 8009f14:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009f16:	2300      	movs	r3, #0
 8009f18:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009f1a:	2300      	movs	r3, #0
 8009f1c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009f24:	78fa      	ldrb	r2, [r7, #3]
 8009f26:	4611      	mov	r1, r2
 8009f28:	4618      	mov	r0, r3
 8009f2a:	f7f8 fc7e 	bl	800282a <HAL_PCD_EP_Close>
 8009f2e:	4603      	mov	r3, r0
 8009f30:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009f32:	7bfb      	ldrb	r3, [r7, #15]
 8009f34:	4618      	mov	r0, r3
 8009f36:	f000 f93b 	bl	800a1b0 <USBD_Get_USB_Status>
 8009f3a:	4603      	mov	r3, r0
 8009f3c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009f3e:	7bbb      	ldrb	r3, [r7, #14]
}
 8009f40:	4618      	mov	r0, r3
 8009f42:	3710      	adds	r7, #16
 8009f44:	46bd      	mov	sp, r7
 8009f46:	bd80      	pop	{r7, pc}

08009f48 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009f48:	b580      	push	{r7, lr}
 8009f4a:	b084      	sub	sp, #16
 8009f4c:	af00      	add	r7, sp, #0
 8009f4e:	6078      	str	r0, [r7, #4]
 8009f50:	460b      	mov	r3, r1
 8009f52:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009f54:	2300      	movs	r3, #0
 8009f56:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009f58:	2300      	movs	r3, #0
 8009f5a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009f62:	78fa      	ldrb	r2, [r7, #3]
 8009f64:	4611      	mov	r1, r2
 8009f66:	4618      	mov	r0, r3
 8009f68:	f7f8 fd3f 	bl	80029ea <HAL_PCD_EP_SetStall>
 8009f6c:	4603      	mov	r3, r0
 8009f6e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009f70:	7bfb      	ldrb	r3, [r7, #15]
 8009f72:	4618      	mov	r0, r3
 8009f74:	f000 f91c 	bl	800a1b0 <USBD_Get_USB_Status>
 8009f78:	4603      	mov	r3, r0
 8009f7a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009f7c:	7bbb      	ldrb	r3, [r7, #14]
}
 8009f7e:	4618      	mov	r0, r3
 8009f80:	3710      	adds	r7, #16
 8009f82:	46bd      	mov	sp, r7
 8009f84:	bd80      	pop	{r7, pc}

08009f86 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009f86:	b580      	push	{r7, lr}
 8009f88:	b084      	sub	sp, #16
 8009f8a:	af00      	add	r7, sp, #0
 8009f8c:	6078      	str	r0, [r7, #4]
 8009f8e:	460b      	mov	r3, r1
 8009f90:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009f92:	2300      	movs	r3, #0
 8009f94:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009f96:	2300      	movs	r3, #0
 8009f98:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009fa0:	78fa      	ldrb	r2, [r7, #3]
 8009fa2:	4611      	mov	r1, r2
 8009fa4:	4618      	mov	r0, r3
 8009fa6:	f7f8 fd72 	bl	8002a8e <HAL_PCD_EP_ClrStall>
 8009faa:	4603      	mov	r3, r0
 8009fac:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009fae:	7bfb      	ldrb	r3, [r7, #15]
 8009fb0:	4618      	mov	r0, r3
 8009fb2:	f000 f8fd 	bl	800a1b0 <USBD_Get_USB_Status>
 8009fb6:	4603      	mov	r3, r0
 8009fb8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009fba:	7bbb      	ldrb	r3, [r7, #14]
}
 8009fbc:	4618      	mov	r0, r3
 8009fbe:	3710      	adds	r7, #16
 8009fc0:	46bd      	mov	sp, r7
 8009fc2:	bd80      	pop	{r7, pc}

08009fc4 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009fc4:	b480      	push	{r7}
 8009fc6:	b085      	sub	sp, #20
 8009fc8:	af00      	add	r7, sp, #0
 8009fca:	6078      	str	r0, [r7, #4]
 8009fcc:	460b      	mov	r3, r1
 8009fce:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009fd6:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8009fd8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009fdc:	2b00      	cmp	r3, #0
 8009fde:	da0c      	bge.n	8009ffa <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8009fe0:	78fb      	ldrb	r3, [r7, #3]
 8009fe2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009fe6:	68f9      	ldr	r1, [r7, #12]
 8009fe8:	1c5a      	adds	r2, r3, #1
 8009fea:	4613      	mov	r3, r2
 8009fec:	009b      	lsls	r3, r3, #2
 8009fee:	4413      	add	r3, r2
 8009ff0:	00db      	lsls	r3, r3, #3
 8009ff2:	440b      	add	r3, r1
 8009ff4:	3302      	adds	r3, #2
 8009ff6:	781b      	ldrb	r3, [r3, #0]
 8009ff8:	e00b      	b.n	800a012 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8009ffa:	78fb      	ldrb	r3, [r7, #3]
 8009ffc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a000:	68f9      	ldr	r1, [r7, #12]
 800a002:	4613      	mov	r3, r2
 800a004:	009b      	lsls	r3, r3, #2
 800a006:	4413      	add	r3, r2
 800a008:	00db      	lsls	r3, r3, #3
 800a00a:	440b      	add	r3, r1
 800a00c:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 800a010:	781b      	ldrb	r3, [r3, #0]
  }
}
 800a012:	4618      	mov	r0, r3
 800a014:	3714      	adds	r7, #20
 800a016:	46bd      	mov	sp, r7
 800a018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a01c:	4770      	bx	lr

0800a01e <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800a01e:	b580      	push	{r7, lr}
 800a020:	b084      	sub	sp, #16
 800a022:	af00      	add	r7, sp, #0
 800a024:	6078      	str	r0, [r7, #4]
 800a026:	460b      	mov	r3, r1
 800a028:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a02a:	2300      	movs	r3, #0
 800a02c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a02e:	2300      	movs	r3, #0
 800a030:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a038:	78fa      	ldrb	r2, [r7, #3]
 800a03a:	4611      	mov	r1, r2
 800a03c:	4618      	mov	r0, r3
 800a03e:	f7f8 fb69 	bl	8002714 <HAL_PCD_SetAddress>
 800a042:	4603      	mov	r3, r0
 800a044:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a046:	7bfb      	ldrb	r3, [r7, #15]
 800a048:	4618      	mov	r0, r3
 800a04a:	f000 f8b1 	bl	800a1b0 <USBD_Get_USB_Status>
 800a04e:	4603      	mov	r3, r0
 800a050:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a052:	7bbb      	ldrb	r3, [r7, #14]
}
 800a054:	4618      	mov	r0, r3
 800a056:	3710      	adds	r7, #16
 800a058:	46bd      	mov	sp, r7
 800a05a:	bd80      	pop	{r7, pc}

0800a05c <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800a05c:	b580      	push	{r7, lr}
 800a05e:	b086      	sub	sp, #24
 800a060:	af00      	add	r7, sp, #0
 800a062:	60f8      	str	r0, [r7, #12]
 800a064:	607a      	str	r2, [r7, #4]
 800a066:	603b      	str	r3, [r7, #0]
 800a068:	460b      	mov	r3, r1
 800a06a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a06c:	2300      	movs	r3, #0
 800a06e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a070:	2300      	movs	r3, #0
 800a072:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800a074:	68fb      	ldr	r3, [r7, #12]
 800a076:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800a07a:	7af9      	ldrb	r1, [r7, #11]
 800a07c:	683b      	ldr	r3, [r7, #0]
 800a07e:	687a      	ldr	r2, [r7, #4]
 800a080:	f7f8 fc70 	bl	8002964 <HAL_PCD_EP_Transmit>
 800a084:	4603      	mov	r3, r0
 800a086:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a088:	7dfb      	ldrb	r3, [r7, #23]
 800a08a:	4618      	mov	r0, r3
 800a08c:	f000 f890 	bl	800a1b0 <USBD_Get_USB_Status>
 800a090:	4603      	mov	r3, r0
 800a092:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a094:	7dbb      	ldrb	r3, [r7, #22]
}
 800a096:	4618      	mov	r0, r3
 800a098:	3718      	adds	r7, #24
 800a09a:	46bd      	mov	sp, r7
 800a09c:	bd80      	pop	{r7, pc}

0800a09e <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800a09e:	b580      	push	{r7, lr}
 800a0a0:	b086      	sub	sp, #24
 800a0a2:	af00      	add	r7, sp, #0
 800a0a4:	60f8      	str	r0, [r7, #12]
 800a0a6:	607a      	str	r2, [r7, #4]
 800a0a8:	603b      	str	r3, [r7, #0]
 800a0aa:	460b      	mov	r3, r1
 800a0ac:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a0ae:	2300      	movs	r3, #0
 800a0b0:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a0b2:	2300      	movs	r3, #0
 800a0b4:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800a0b6:	68fb      	ldr	r3, [r7, #12]
 800a0b8:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800a0bc:	7af9      	ldrb	r1, [r7, #11]
 800a0be:	683b      	ldr	r3, [r7, #0]
 800a0c0:	687a      	ldr	r2, [r7, #4]
 800a0c2:	f7f8 fbfa 	bl	80028ba <HAL_PCD_EP_Receive>
 800a0c6:	4603      	mov	r3, r0
 800a0c8:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a0ca:	7dfb      	ldrb	r3, [r7, #23]
 800a0cc:	4618      	mov	r0, r3
 800a0ce:	f000 f86f 	bl	800a1b0 <USBD_Get_USB_Status>
 800a0d2:	4603      	mov	r3, r0
 800a0d4:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a0d6:	7dbb      	ldrb	r3, [r7, #22]
}
 800a0d8:	4618      	mov	r0, r3
 800a0da:	3718      	adds	r7, #24
 800a0dc:	46bd      	mov	sp, r7
 800a0de:	bd80      	pop	{r7, pc}

0800a0e0 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a0e0:	b580      	push	{r7, lr}
 800a0e2:	b082      	sub	sp, #8
 800a0e4:	af00      	add	r7, sp, #0
 800a0e6:	6078      	str	r0, [r7, #4]
 800a0e8:	460b      	mov	r3, r1
 800a0ea:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a0f2:	78fa      	ldrb	r2, [r7, #3]
 800a0f4:	4611      	mov	r1, r2
 800a0f6:	4618      	mov	r0, r3
 800a0f8:	f7f8 fc1c 	bl	8002934 <HAL_PCD_EP_GetRxCount>
 800a0fc:	4603      	mov	r3, r0
}
 800a0fe:	4618      	mov	r0, r3
 800a100:	3708      	adds	r7, #8
 800a102:	46bd      	mov	sp, r7
 800a104:	bd80      	pop	{r7, pc}
	...

0800a108 <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a108:	b580      	push	{r7, lr}
 800a10a:	b082      	sub	sp, #8
 800a10c:	af00      	add	r7, sp, #0
 800a10e:	6078      	str	r0, [r7, #4]
 800a110:	460b      	mov	r3, r1
 800a112:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 800a114:	78fb      	ldrb	r3, [r7, #3]
 800a116:	2b00      	cmp	r3, #0
 800a118:	d002      	beq.n	800a120 <HAL_PCDEx_LPM_Callback+0x18>
 800a11a:	2b01      	cmp	r3, #1
 800a11c:	d013      	beq.n	800a146 <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 800a11e:	e023      	b.n	800a168 <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	699b      	ldr	r3, [r3, #24]
 800a124:	2b00      	cmp	r3, #0
 800a126:	d007      	beq.n	800a138 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800a128:	f000 f83c 	bl	800a1a4 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a12c:	4b10      	ldr	r3, [pc, #64]	; (800a170 <HAL_PCDEx_LPM_Callback+0x68>)
 800a12e:	691b      	ldr	r3, [r3, #16]
 800a130:	4a0f      	ldr	r2, [pc, #60]	; (800a170 <HAL_PCDEx_LPM_Callback+0x68>)
 800a132:	f023 0306 	bic.w	r3, r3, #6
 800a136:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800a13e:	4618      	mov	r0, r3
 800a140:	f7fe fc7c 	bl	8008a3c <USBD_LL_Resume>
    break;
 800a144:	e010      	b.n	800a168 <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800a14c:	4618      	mov	r0, r3
 800a14e:	f7fe fc5f 	bl	8008a10 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	699b      	ldr	r3, [r3, #24]
 800a156:	2b00      	cmp	r3, #0
 800a158:	d005      	beq.n	800a166 <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a15a:	4b05      	ldr	r3, [pc, #20]	; (800a170 <HAL_PCDEx_LPM_Callback+0x68>)
 800a15c:	691b      	ldr	r3, [r3, #16]
 800a15e:	4a04      	ldr	r2, [pc, #16]	; (800a170 <HAL_PCDEx_LPM_Callback+0x68>)
 800a160:	f043 0306 	orr.w	r3, r3, #6
 800a164:	6113      	str	r3, [r2, #16]
    break;
 800a166:	bf00      	nop
}
 800a168:	bf00      	nop
 800a16a:	3708      	adds	r7, #8
 800a16c:	46bd      	mov	sp, r7
 800a16e:	bd80      	pop	{r7, pc}
 800a170:	e000ed00 	.word	0xe000ed00

0800a174 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800a174:	b480      	push	{r7}
 800a176:	b083      	sub	sp, #12
 800a178:	af00      	add	r7, sp, #0
 800a17a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800a17c:	4b03      	ldr	r3, [pc, #12]	; (800a18c <USBD_static_malloc+0x18>)
}
 800a17e:	4618      	mov	r0, r3
 800a180:	370c      	adds	r7, #12
 800a182:	46bd      	mov	sp, r7
 800a184:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a188:	4770      	bx	lr
 800a18a:	bf00      	nop
 800a18c:	20000cf0 	.word	0x20000cf0

0800a190 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800a190:	b480      	push	{r7}
 800a192:	b083      	sub	sp, #12
 800a194:	af00      	add	r7, sp, #0
 800a196:	6078      	str	r0, [r7, #4]

}
 800a198:	bf00      	nop
 800a19a:	370c      	adds	r7, #12
 800a19c:	46bd      	mov	sp, r7
 800a19e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1a2:	4770      	bx	lr

0800a1a4 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800a1a4:	b580      	push	{r7, lr}
 800a1a6:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800a1a8:	f7f6 fc39 	bl	8000a1e <SystemClock_Config>
}
 800a1ac:	bf00      	nop
 800a1ae:	bd80      	pop	{r7, pc}

0800a1b0 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800a1b0:	b480      	push	{r7}
 800a1b2:	b085      	sub	sp, #20
 800a1b4:	af00      	add	r7, sp, #0
 800a1b6:	4603      	mov	r3, r0
 800a1b8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a1ba:	2300      	movs	r3, #0
 800a1bc:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800a1be:	79fb      	ldrb	r3, [r7, #7]
 800a1c0:	2b03      	cmp	r3, #3
 800a1c2:	d817      	bhi.n	800a1f4 <USBD_Get_USB_Status+0x44>
 800a1c4:	a201      	add	r2, pc, #4	; (adr r2, 800a1cc <USBD_Get_USB_Status+0x1c>)
 800a1c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a1ca:	bf00      	nop
 800a1cc:	0800a1dd 	.word	0x0800a1dd
 800a1d0:	0800a1e3 	.word	0x0800a1e3
 800a1d4:	0800a1e9 	.word	0x0800a1e9
 800a1d8:	0800a1ef 	.word	0x0800a1ef
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800a1dc:	2300      	movs	r3, #0
 800a1de:	73fb      	strb	r3, [r7, #15]
    break;
 800a1e0:	e00b      	b.n	800a1fa <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a1e2:	2303      	movs	r3, #3
 800a1e4:	73fb      	strb	r3, [r7, #15]
    break;
 800a1e6:	e008      	b.n	800a1fa <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a1e8:	2301      	movs	r3, #1
 800a1ea:	73fb      	strb	r3, [r7, #15]
    break;
 800a1ec:	e005      	b.n	800a1fa <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a1ee:	2303      	movs	r3, #3
 800a1f0:	73fb      	strb	r3, [r7, #15]
    break;
 800a1f2:	e002      	b.n	800a1fa <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800a1f4:	2303      	movs	r3, #3
 800a1f6:	73fb      	strb	r3, [r7, #15]
    break;
 800a1f8:	bf00      	nop
  }
  return usb_status;
 800a1fa:	7bfb      	ldrb	r3, [r7, #15]
}
 800a1fc:	4618      	mov	r0, r3
 800a1fe:	3714      	adds	r7, #20
 800a200:	46bd      	mov	sp, r7
 800a202:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a206:	4770      	bx	lr

0800a208 <__errno>:
 800a208:	4b01      	ldr	r3, [pc, #4]	; (800a210 <__errno+0x8>)
 800a20a:	6818      	ldr	r0, [r3, #0]
 800a20c:	4770      	bx	lr
 800a20e:	bf00      	nop
 800a210:	20000184 	.word	0x20000184

0800a214 <__libc_init_array>:
 800a214:	b570      	push	{r4, r5, r6, lr}
 800a216:	4d0d      	ldr	r5, [pc, #52]	; (800a24c <__libc_init_array+0x38>)
 800a218:	4c0d      	ldr	r4, [pc, #52]	; (800a250 <__libc_init_array+0x3c>)
 800a21a:	1b64      	subs	r4, r4, r5
 800a21c:	10a4      	asrs	r4, r4, #2
 800a21e:	2600      	movs	r6, #0
 800a220:	42a6      	cmp	r6, r4
 800a222:	d109      	bne.n	800a238 <__libc_init_array+0x24>
 800a224:	4d0b      	ldr	r5, [pc, #44]	; (800a254 <__libc_init_array+0x40>)
 800a226:	4c0c      	ldr	r4, [pc, #48]	; (800a258 <__libc_init_array+0x44>)
 800a228:	f000 fc8e 	bl	800ab48 <_init>
 800a22c:	1b64      	subs	r4, r4, r5
 800a22e:	10a4      	asrs	r4, r4, #2
 800a230:	2600      	movs	r6, #0
 800a232:	42a6      	cmp	r6, r4
 800a234:	d105      	bne.n	800a242 <__libc_init_array+0x2e>
 800a236:	bd70      	pop	{r4, r5, r6, pc}
 800a238:	f855 3b04 	ldr.w	r3, [r5], #4
 800a23c:	4798      	blx	r3
 800a23e:	3601      	adds	r6, #1
 800a240:	e7ee      	b.n	800a220 <__libc_init_array+0xc>
 800a242:	f855 3b04 	ldr.w	r3, [r5], #4
 800a246:	4798      	blx	r3
 800a248:	3601      	adds	r6, #1
 800a24a:	e7f2      	b.n	800a232 <__libc_init_array+0x1e>
 800a24c:	0800ac78 	.word	0x0800ac78
 800a250:	0800ac78 	.word	0x0800ac78
 800a254:	0800ac78 	.word	0x0800ac78
 800a258:	0800ac7c 	.word	0x0800ac7c

0800a25c <memcpy>:
 800a25c:	440a      	add	r2, r1
 800a25e:	4291      	cmp	r1, r2
 800a260:	f100 33ff 	add.w	r3, r0, #4294967295
 800a264:	d100      	bne.n	800a268 <memcpy+0xc>
 800a266:	4770      	bx	lr
 800a268:	b510      	push	{r4, lr}
 800a26a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a26e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a272:	4291      	cmp	r1, r2
 800a274:	d1f9      	bne.n	800a26a <memcpy+0xe>
 800a276:	bd10      	pop	{r4, pc}

0800a278 <memset>:
 800a278:	4402      	add	r2, r0
 800a27a:	4603      	mov	r3, r0
 800a27c:	4293      	cmp	r3, r2
 800a27e:	d100      	bne.n	800a282 <memset+0xa>
 800a280:	4770      	bx	lr
 800a282:	f803 1b01 	strb.w	r1, [r3], #1
 800a286:	e7f9      	b.n	800a27c <memset+0x4>

0800a288 <siprintf>:
 800a288:	b40e      	push	{r1, r2, r3}
 800a28a:	b500      	push	{lr}
 800a28c:	b09c      	sub	sp, #112	; 0x70
 800a28e:	ab1d      	add	r3, sp, #116	; 0x74
 800a290:	9002      	str	r0, [sp, #8]
 800a292:	9006      	str	r0, [sp, #24]
 800a294:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800a298:	4809      	ldr	r0, [pc, #36]	; (800a2c0 <siprintf+0x38>)
 800a29a:	9107      	str	r1, [sp, #28]
 800a29c:	9104      	str	r1, [sp, #16]
 800a29e:	4909      	ldr	r1, [pc, #36]	; (800a2c4 <siprintf+0x3c>)
 800a2a0:	f853 2b04 	ldr.w	r2, [r3], #4
 800a2a4:	9105      	str	r1, [sp, #20]
 800a2a6:	6800      	ldr	r0, [r0, #0]
 800a2a8:	9301      	str	r3, [sp, #4]
 800a2aa:	a902      	add	r1, sp, #8
 800a2ac:	f000 f868 	bl	800a380 <_svfiprintf_r>
 800a2b0:	9b02      	ldr	r3, [sp, #8]
 800a2b2:	2200      	movs	r2, #0
 800a2b4:	701a      	strb	r2, [r3, #0]
 800a2b6:	b01c      	add	sp, #112	; 0x70
 800a2b8:	f85d eb04 	ldr.w	lr, [sp], #4
 800a2bc:	b003      	add	sp, #12
 800a2be:	4770      	bx	lr
 800a2c0:	20000184 	.word	0x20000184
 800a2c4:	ffff0208 	.word	0xffff0208

0800a2c8 <__ssputs_r>:
 800a2c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a2cc:	688e      	ldr	r6, [r1, #8]
 800a2ce:	429e      	cmp	r6, r3
 800a2d0:	4682      	mov	sl, r0
 800a2d2:	460c      	mov	r4, r1
 800a2d4:	4690      	mov	r8, r2
 800a2d6:	461f      	mov	r7, r3
 800a2d8:	d838      	bhi.n	800a34c <__ssputs_r+0x84>
 800a2da:	898a      	ldrh	r2, [r1, #12]
 800a2dc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a2e0:	d032      	beq.n	800a348 <__ssputs_r+0x80>
 800a2e2:	6825      	ldr	r5, [r4, #0]
 800a2e4:	6909      	ldr	r1, [r1, #16]
 800a2e6:	eba5 0901 	sub.w	r9, r5, r1
 800a2ea:	6965      	ldr	r5, [r4, #20]
 800a2ec:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a2f0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a2f4:	3301      	adds	r3, #1
 800a2f6:	444b      	add	r3, r9
 800a2f8:	106d      	asrs	r5, r5, #1
 800a2fa:	429d      	cmp	r5, r3
 800a2fc:	bf38      	it	cc
 800a2fe:	461d      	movcc	r5, r3
 800a300:	0553      	lsls	r3, r2, #21
 800a302:	d531      	bpl.n	800a368 <__ssputs_r+0xa0>
 800a304:	4629      	mov	r1, r5
 800a306:	f000 fb55 	bl	800a9b4 <_malloc_r>
 800a30a:	4606      	mov	r6, r0
 800a30c:	b950      	cbnz	r0, 800a324 <__ssputs_r+0x5c>
 800a30e:	230c      	movs	r3, #12
 800a310:	f8ca 3000 	str.w	r3, [sl]
 800a314:	89a3      	ldrh	r3, [r4, #12]
 800a316:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a31a:	81a3      	strh	r3, [r4, #12]
 800a31c:	f04f 30ff 	mov.w	r0, #4294967295
 800a320:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a324:	6921      	ldr	r1, [r4, #16]
 800a326:	464a      	mov	r2, r9
 800a328:	f7ff ff98 	bl	800a25c <memcpy>
 800a32c:	89a3      	ldrh	r3, [r4, #12]
 800a32e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a332:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a336:	81a3      	strh	r3, [r4, #12]
 800a338:	6126      	str	r6, [r4, #16]
 800a33a:	6165      	str	r5, [r4, #20]
 800a33c:	444e      	add	r6, r9
 800a33e:	eba5 0509 	sub.w	r5, r5, r9
 800a342:	6026      	str	r6, [r4, #0]
 800a344:	60a5      	str	r5, [r4, #8]
 800a346:	463e      	mov	r6, r7
 800a348:	42be      	cmp	r6, r7
 800a34a:	d900      	bls.n	800a34e <__ssputs_r+0x86>
 800a34c:	463e      	mov	r6, r7
 800a34e:	6820      	ldr	r0, [r4, #0]
 800a350:	4632      	mov	r2, r6
 800a352:	4641      	mov	r1, r8
 800a354:	f000 faa8 	bl	800a8a8 <memmove>
 800a358:	68a3      	ldr	r3, [r4, #8]
 800a35a:	1b9b      	subs	r3, r3, r6
 800a35c:	60a3      	str	r3, [r4, #8]
 800a35e:	6823      	ldr	r3, [r4, #0]
 800a360:	4433      	add	r3, r6
 800a362:	6023      	str	r3, [r4, #0]
 800a364:	2000      	movs	r0, #0
 800a366:	e7db      	b.n	800a320 <__ssputs_r+0x58>
 800a368:	462a      	mov	r2, r5
 800a36a:	f000 fb97 	bl	800aa9c <_realloc_r>
 800a36e:	4606      	mov	r6, r0
 800a370:	2800      	cmp	r0, #0
 800a372:	d1e1      	bne.n	800a338 <__ssputs_r+0x70>
 800a374:	6921      	ldr	r1, [r4, #16]
 800a376:	4650      	mov	r0, sl
 800a378:	f000 fab0 	bl	800a8dc <_free_r>
 800a37c:	e7c7      	b.n	800a30e <__ssputs_r+0x46>
	...

0800a380 <_svfiprintf_r>:
 800a380:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a384:	4698      	mov	r8, r3
 800a386:	898b      	ldrh	r3, [r1, #12]
 800a388:	061b      	lsls	r3, r3, #24
 800a38a:	b09d      	sub	sp, #116	; 0x74
 800a38c:	4607      	mov	r7, r0
 800a38e:	460d      	mov	r5, r1
 800a390:	4614      	mov	r4, r2
 800a392:	d50e      	bpl.n	800a3b2 <_svfiprintf_r+0x32>
 800a394:	690b      	ldr	r3, [r1, #16]
 800a396:	b963      	cbnz	r3, 800a3b2 <_svfiprintf_r+0x32>
 800a398:	2140      	movs	r1, #64	; 0x40
 800a39a:	f000 fb0b 	bl	800a9b4 <_malloc_r>
 800a39e:	6028      	str	r0, [r5, #0]
 800a3a0:	6128      	str	r0, [r5, #16]
 800a3a2:	b920      	cbnz	r0, 800a3ae <_svfiprintf_r+0x2e>
 800a3a4:	230c      	movs	r3, #12
 800a3a6:	603b      	str	r3, [r7, #0]
 800a3a8:	f04f 30ff 	mov.w	r0, #4294967295
 800a3ac:	e0d1      	b.n	800a552 <_svfiprintf_r+0x1d2>
 800a3ae:	2340      	movs	r3, #64	; 0x40
 800a3b0:	616b      	str	r3, [r5, #20]
 800a3b2:	2300      	movs	r3, #0
 800a3b4:	9309      	str	r3, [sp, #36]	; 0x24
 800a3b6:	2320      	movs	r3, #32
 800a3b8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a3bc:	f8cd 800c 	str.w	r8, [sp, #12]
 800a3c0:	2330      	movs	r3, #48	; 0x30
 800a3c2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800a56c <_svfiprintf_r+0x1ec>
 800a3c6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a3ca:	f04f 0901 	mov.w	r9, #1
 800a3ce:	4623      	mov	r3, r4
 800a3d0:	469a      	mov	sl, r3
 800a3d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a3d6:	b10a      	cbz	r2, 800a3dc <_svfiprintf_r+0x5c>
 800a3d8:	2a25      	cmp	r2, #37	; 0x25
 800a3da:	d1f9      	bne.n	800a3d0 <_svfiprintf_r+0x50>
 800a3dc:	ebba 0b04 	subs.w	fp, sl, r4
 800a3e0:	d00b      	beq.n	800a3fa <_svfiprintf_r+0x7a>
 800a3e2:	465b      	mov	r3, fp
 800a3e4:	4622      	mov	r2, r4
 800a3e6:	4629      	mov	r1, r5
 800a3e8:	4638      	mov	r0, r7
 800a3ea:	f7ff ff6d 	bl	800a2c8 <__ssputs_r>
 800a3ee:	3001      	adds	r0, #1
 800a3f0:	f000 80aa 	beq.w	800a548 <_svfiprintf_r+0x1c8>
 800a3f4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a3f6:	445a      	add	r2, fp
 800a3f8:	9209      	str	r2, [sp, #36]	; 0x24
 800a3fa:	f89a 3000 	ldrb.w	r3, [sl]
 800a3fe:	2b00      	cmp	r3, #0
 800a400:	f000 80a2 	beq.w	800a548 <_svfiprintf_r+0x1c8>
 800a404:	2300      	movs	r3, #0
 800a406:	f04f 32ff 	mov.w	r2, #4294967295
 800a40a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a40e:	f10a 0a01 	add.w	sl, sl, #1
 800a412:	9304      	str	r3, [sp, #16]
 800a414:	9307      	str	r3, [sp, #28]
 800a416:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a41a:	931a      	str	r3, [sp, #104]	; 0x68
 800a41c:	4654      	mov	r4, sl
 800a41e:	2205      	movs	r2, #5
 800a420:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a424:	4851      	ldr	r0, [pc, #324]	; (800a56c <_svfiprintf_r+0x1ec>)
 800a426:	f7f5 ff03 	bl	8000230 <memchr>
 800a42a:	9a04      	ldr	r2, [sp, #16]
 800a42c:	b9d8      	cbnz	r0, 800a466 <_svfiprintf_r+0xe6>
 800a42e:	06d0      	lsls	r0, r2, #27
 800a430:	bf44      	itt	mi
 800a432:	2320      	movmi	r3, #32
 800a434:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a438:	0711      	lsls	r1, r2, #28
 800a43a:	bf44      	itt	mi
 800a43c:	232b      	movmi	r3, #43	; 0x2b
 800a43e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a442:	f89a 3000 	ldrb.w	r3, [sl]
 800a446:	2b2a      	cmp	r3, #42	; 0x2a
 800a448:	d015      	beq.n	800a476 <_svfiprintf_r+0xf6>
 800a44a:	9a07      	ldr	r2, [sp, #28]
 800a44c:	4654      	mov	r4, sl
 800a44e:	2000      	movs	r0, #0
 800a450:	f04f 0c0a 	mov.w	ip, #10
 800a454:	4621      	mov	r1, r4
 800a456:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a45a:	3b30      	subs	r3, #48	; 0x30
 800a45c:	2b09      	cmp	r3, #9
 800a45e:	d94e      	bls.n	800a4fe <_svfiprintf_r+0x17e>
 800a460:	b1b0      	cbz	r0, 800a490 <_svfiprintf_r+0x110>
 800a462:	9207      	str	r2, [sp, #28]
 800a464:	e014      	b.n	800a490 <_svfiprintf_r+0x110>
 800a466:	eba0 0308 	sub.w	r3, r0, r8
 800a46a:	fa09 f303 	lsl.w	r3, r9, r3
 800a46e:	4313      	orrs	r3, r2
 800a470:	9304      	str	r3, [sp, #16]
 800a472:	46a2      	mov	sl, r4
 800a474:	e7d2      	b.n	800a41c <_svfiprintf_r+0x9c>
 800a476:	9b03      	ldr	r3, [sp, #12]
 800a478:	1d19      	adds	r1, r3, #4
 800a47a:	681b      	ldr	r3, [r3, #0]
 800a47c:	9103      	str	r1, [sp, #12]
 800a47e:	2b00      	cmp	r3, #0
 800a480:	bfbb      	ittet	lt
 800a482:	425b      	neglt	r3, r3
 800a484:	f042 0202 	orrlt.w	r2, r2, #2
 800a488:	9307      	strge	r3, [sp, #28]
 800a48a:	9307      	strlt	r3, [sp, #28]
 800a48c:	bfb8      	it	lt
 800a48e:	9204      	strlt	r2, [sp, #16]
 800a490:	7823      	ldrb	r3, [r4, #0]
 800a492:	2b2e      	cmp	r3, #46	; 0x2e
 800a494:	d10c      	bne.n	800a4b0 <_svfiprintf_r+0x130>
 800a496:	7863      	ldrb	r3, [r4, #1]
 800a498:	2b2a      	cmp	r3, #42	; 0x2a
 800a49a:	d135      	bne.n	800a508 <_svfiprintf_r+0x188>
 800a49c:	9b03      	ldr	r3, [sp, #12]
 800a49e:	1d1a      	adds	r2, r3, #4
 800a4a0:	681b      	ldr	r3, [r3, #0]
 800a4a2:	9203      	str	r2, [sp, #12]
 800a4a4:	2b00      	cmp	r3, #0
 800a4a6:	bfb8      	it	lt
 800a4a8:	f04f 33ff 	movlt.w	r3, #4294967295
 800a4ac:	3402      	adds	r4, #2
 800a4ae:	9305      	str	r3, [sp, #20]
 800a4b0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800a57c <_svfiprintf_r+0x1fc>
 800a4b4:	7821      	ldrb	r1, [r4, #0]
 800a4b6:	2203      	movs	r2, #3
 800a4b8:	4650      	mov	r0, sl
 800a4ba:	f7f5 feb9 	bl	8000230 <memchr>
 800a4be:	b140      	cbz	r0, 800a4d2 <_svfiprintf_r+0x152>
 800a4c0:	2340      	movs	r3, #64	; 0x40
 800a4c2:	eba0 000a 	sub.w	r0, r0, sl
 800a4c6:	fa03 f000 	lsl.w	r0, r3, r0
 800a4ca:	9b04      	ldr	r3, [sp, #16]
 800a4cc:	4303      	orrs	r3, r0
 800a4ce:	3401      	adds	r4, #1
 800a4d0:	9304      	str	r3, [sp, #16]
 800a4d2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a4d6:	4826      	ldr	r0, [pc, #152]	; (800a570 <_svfiprintf_r+0x1f0>)
 800a4d8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a4dc:	2206      	movs	r2, #6
 800a4de:	f7f5 fea7 	bl	8000230 <memchr>
 800a4e2:	2800      	cmp	r0, #0
 800a4e4:	d038      	beq.n	800a558 <_svfiprintf_r+0x1d8>
 800a4e6:	4b23      	ldr	r3, [pc, #140]	; (800a574 <_svfiprintf_r+0x1f4>)
 800a4e8:	bb1b      	cbnz	r3, 800a532 <_svfiprintf_r+0x1b2>
 800a4ea:	9b03      	ldr	r3, [sp, #12]
 800a4ec:	3307      	adds	r3, #7
 800a4ee:	f023 0307 	bic.w	r3, r3, #7
 800a4f2:	3308      	adds	r3, #8
 800a4f4:	9303      	str	r3, [sp, #12]
 800a4f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a4f8:	4433      	add	r3, r6
 800a4fa:	9309      	str	r3, [sp, #36]	; 0x24
 800a4fc:	e767      	b.n	800a3ce <_svfiprintf_r+0x4e>
 800a4fe:	fb0c 3202 	mla	r2, ip, r2, r3
 800a502:	460c      	mov	r4, r1
 800a504:	2001      	movs	r0, #1
 800a506:	e7a5      	b.n	800a454 <_svfiprintf_r+0xd4>
 800a508:	2300      	movs	r3, #0
 800a50a:	3401      	adds	r4, #1
 800a50c:	9305      	str	r3, [sp, #20]
 800a50e:	4619      	mov	r1, r3
 800a510:	f04f 0c0a 	mov.w	ip, #10
 800a514:	4620      	mov	r0, r4
 800a516:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a51a:	3a30      	subs	r2, #48	; 0x30
 800a51c:	2a09      	cmp	r2, #9
 800a51e:	d903      	bls.n	800a528 <_svfiprintf_r+0x1a8>
 800a520:	2b00      	cmp	r3, #0
 800a522:	d0c5      	beq.n	800a4b0 <_svfiprintf_r+0x130>
 800a524:	9105      	str	r1, [sp, #20]
 800a526:	e7c3      	b.n	800a4b0 <_svfiprintf_r+0x130>
 800a528:	fb0c 2101 	mla	r1, ip, r1, r2
 800a52c:	4604      	mov	r4, r0
 800a52e:	2301      	movs	r3, #1
 800a530:	e7f0      	b.n	800a514 <_svfiprintf_r+0x194>
 800a532:	ab03      	add	r3, sp, #12
 800a534:	9300      	str	r3, [sp, #0]
 800a536:	462a      	mov	r2, r5
 800a538:	4b0f      	ldr	r3, [pc, #60]	; (800a578 <_svfiprintf_r+0x1f8>)
 800a53a:	a904      	add	r1, sp, #16
 800a53c:	4638      	mov	r0, r7
 800a53e:	f3af 8000 	nop.w
 800a542:	1c42      	adds	r2, r0, #1
 800a544:	4606      	mov	r6, r0
 800a546:	d1d6      	bne.n	800a4f6 <_svfiprintf_r+0x176>
 800a548:	89ab      	ldrh	r3, [r5, #12]
 800a54a:	065b      	lsls	r3, r3, #25
 800a54c:	f53f af2c 	bmi.w	800a3a8 <_svfiprintf_r+0x28>
 800a550:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a552:	b01d      	add	sp, #116	; 0x74
 800a554:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a558:	ab03      	add	r3, sp, #12
 800a55a:	9300      	str	r3, [sp, #0]
 800a55c:	462a      	mov	r2, r5
 800a55e:	4b06      	ldr	r3, [pc, #24]	; (800a578 <_svfiprintf_r+0x1f8>)
 800a560:	a904      	add	r1, sp, #16
 800a562:	4638      	mov	r0, r7
 800a564:	f000 f87a 	bl	800a65c <_printf_i>
 800a568:	e7eb      	b.n	800a542 <_svfiprintf_r+0x1c2>
 800a56a:	bf00      	nop
 800a56c:	0800ac3c 	.word	0x0800ac3c
 800a570:	0800ac46 	.word	0x0800ac46
 800a574:	00000000 	.word	0x00000000
 800a578:	0800a2c9 	.word	0x0800a2c9
 800a57c:	0800ac42 	.word	0x0800ac42

0800a580 <_printf_common>:
 800a580:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a584:	4616      	mov	r6, r2
 800a586:	4699      	mov	r9, r3
 800a588:	688a      	ldr	r2, [r1, #8]
 800a58a:	690b      	ldr	r3, [r1, #16]
 800a58c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a590:	4293      	cmp	r3, r2
 800a592:	bfb8      	it	lt
 800a594:	4613      	movlt	r3, r2
 800a596:	6033      	str	r3, [r6, #0]
 800a598:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a59c:	4607      	mov	r7, r0
 800a59e:	460c      	mov	r4, r1
 800a5a0:	b10a      	cbz	r2, 800a5a6 <_printf_common+0x26>
 800a5a2:	3301      	adds	r3, #1
 800a5a4:	6033      	str	r3, [r6, #0]
 800a5a6:	6823      	ldr	r3, [r4, #0]
 800a5a8:	0699      	lsls	r1, r3, #26
 800a5aa:	bf42      	ittt	mi
 800a5ac:	6833      	ldrmi	r3, [r6, #0]
 800a5ae:	3302      	addmi	r3, #2
 800a5b0:	6033      	strmi	r3, [r6, #0]
 800a5b2:	6825      	ldr	r5, [r4, #0]
 800a5b4:	f015 0506 	ands.w	r5, r5, #6
 800a5b8:	d106      	bne.n	800a5c8 <_printf_common+0x48>
 800a5ba:	f104 0a19 	add.w	sl, r4, #25
 800a5be:	68e3      	ldr	r3, [r4, #12]
 800a5c0:	6832      	ldr	r2, [r6, #0]
 800a5c2:	1a9b      	subs	r3, r3, r2
 800a5c4:	42ab      	cmp	r3, r5
 800a5c6:	dc26      	bgt.n	800a616 <_printf_common+0x96>
 800a5c8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a5cc:	1e13      	subs	r3, r2, #0
 800a5ce:	6822      	ldr	r2, [r4, #0]
 800a5d0:	bf18      	it	ne
 800a5d2:	2301      	movne	r3, #1
 800a5d4:	0692      	lsls	r2, r2, #26
 800a5d6:	d42b      	bmi.n	800a630 <_printf_common+0xb0>
 800a5d8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a5dc:	4649      	mov	r1, r9
 800a5de:	4638      	mov	r0, r7
 800a5e0:	47c0      	blx	r8
 800a5e2:	3001      	adds	r0, #1
 800a5e4:	d01e      	beq.n	800a624 <_printf_common+0xa4>
 800a5e6:	6823      	ldr	r3, [r4, #0]
 800a5e8:	68e5      	ldr	r5, [r4, #12]
 800a5ea:	6832      	ldr	r2, [r6, #0]
 800a5ec:	f003 0306 	and.w	r3, r3, #6
 800a5f0:	2b04      	cmp	r3, #4
 800a5f2:	bf08      	it	eq
 800a5f4:	1aad      	subeq	r5, r5, r2
 800a5f6:	68a3      	ldr	r3, [r4, #8]
 800a5f8:	6922      	ldr	r2, [r4, #16]
 800a5fa:	bf0c      	ite	eq
 800a5fc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a600:	2500      	movne	r5, #0
 800a602:	4293      	cmp	r3, r2
 800a604:	bfc4      	itt	gt
 800a606:	1a9b      	subgt	r3, r3, r2
 800a608:	18ed      	addgt	r5, r5, r3
 800a60a:	2600      	movs	r6, #0
 800a60c:	341a      	adds	r4, #26
 800a60e:	42b5      	cmp	r5, r6
 800a610:	d11a      	bne.n	800a648 <_printf_common+0xc8>
 800a612:	2000      	movs	r0, #0
 800a614:	e008      	b.n	800a628 <_printf_common+0xa8>
 800a616:	2301      	movs	r3, #1
 800a618:	4652      	mov	r2, sl
 800a61a:	4649      	mov	r1, r9
 800a61c:	4638      	mov	r0, r7
 800a61e:	47c0      	blx	r8
 800a620:	3001      	adds	r0, #1
 800a622:	d103      	bne.n	800a62c <_printf_common+0xac>
 800a624:	f04f 30ff 	mov.w	r0, #4294967295
 800a628:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a62c:	3501      	adds	r5, #1
 800a62e:	e7c6      	b.n	800a5be <_printf_common+0x3e>
 800a630:	18e1      	adds	r1, r4, r3
 800a632:	1c5a      	adds	r2, r3, #1
 800a634:	2030      	movs	r0, #48	; 0x30
 800a636:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a63a:	4422      	add	r2, r4
 800a63c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a640:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a644:	3302      	adds	r3, #2
 800a646:	e7c7      	b.n	800a5d8 <_printf_common+0x58>
 800a648:	2301      	movs	r3, #1
 800a64a:	4622      	mov	r2, r4
 800a64c:	4649      	mov	r1, r9
 800a64e:	4638      	mov	r0, r7
 800a650:	47c0      	blx	r8
 800a652:	3001      	adds	r0, #1
 800a654:	d0e6      	beq.n	800a624 <_printf_common+0xa4>
 800a656:	3601      	adds	r6, #1
 800a658:	e7d9      	b.n	800a60e <_printf_common+0x8e>
	...

0800a65c <_printf_i>:
 800a65c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a660:	7e0f      	ldrb	r7, [r1, #24]
 800a662:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a664:	2f78      	cmp	r7, #120	; 0x78
 800a666:	4691      	mov	r9, r2
 800a668:	4680      	mov	r8, r0
 800a66a:	460c      	mov	r4, r1
 800a66c:	469a      	mov	sl, r3
 800a66e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800a672:	d807      	bhi.n	800a684 <_printf_i+0x28>
 800a674:	2f62      	cmp	r7, #98	; 0x62
 800a676:	d80a      	bhi.n	800a68e <_printf_i+0x32>
 800a678:	2f00      	cmp	r7, #0
 800a67a:	f000 80d8 	beq.w	800a82e <_printf_i+0x1d2>
 800a67e:	2f58      	cmp	r7, #88	; 0x58
 800a680:	f000 80a3 	beq.w	800a7ca <_printf_i+0x16e>
 800a684:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a688:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a68c:	e03a      	b.n	800a704 <_printf_i+0xa8>
 800a68e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a692:	2b15      	cmp	r3, #21
 800a694:	d8f6      	bhi.n	800a684 <_printf_i+0x28>
 800a696:	a101      	add	r1, pc, #4	; (adr r1, 800a69c <_printf_i+0x40>)
 800a698:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a69c:	0800a6f5 	.word	0x0800a6f5
 800a6a0:	0800a709 	.word	0x0800a709
 800a6a4:	0800a685 	.word	0x0800a685
 800a6a8:	0800a685 	.word	0x0800a685
 800a6ac:	0800a685 	.word	0x0800a685
 800a6b0:	0800a685 	.word	0x0800a685
 800a6b4:	0800a709 	.word	0x0800a709
 800a6b8:	0800a685 	.word	0x0800a685
 800a6bc:	0800a685 	.word	0x0800a685
 800a6c0:	0800a685 	.word	0x0800a685
 800a6c4:	0800a685 	.word	0x0800a685
 800a6c8:	0800a815 	.word	0x0800a815
 800a6cc:	0800a739 	.word	0x0800a739
 800a6d0:	0800a7f7 	.word	0x0800a7f7
 800a6d4:	0800a685 	.word	0x0800a685
 800a6d8:	0800a685 	.word	0x0800a685
 800a6dc:	0800a837 	.word	0x0800a837
 800a6e0:	0800a685 	.word	0x0800a685
 800a6e4:	0800a739 	.word	0x0800a739
 800a6e8:	0800a685 	.word	0x0800a685
 800a6ec:	0800a685 	.word	0x0800a685
 800a6f0:	0800a7ff 	.word	0x0800a7ff
 800a6f4:	682b      	ldr	r3, [r5, #0]
 800a6f6:	1d1a      	adds	r2, r3, #4
 800a6f8:	681b      	ldr	r3, [r3, #0]
 800a6fa:	602a      	str	r2, [r5, #0]
 800a6fc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a700:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a704:	2301      	movs	r3, #1
 800a706:	e0a3      	b.n	800a850 <_printf_i+0x1f4>
 800a708:	6820      	ldr	r0, [r4, #0]
 800a70a:	6829      	ldr	r1, [r5, #0]
 800a70c:	0606      	lsls	r6, r0, #24
 800a70e:	f101 0304 	add.w	r3, r1, #4
 800a712:	d50a      	bpl.n	800a72a <_printf_i+0xce>
 800a714:	680e      	ldr	r6, [r1, #0]
 800a716:	602b      	str	r3, [r5, #0]
 800a718:	2e00      	cmp	r6, #0
 800a71a:	da03      	bge.n	800a724 <_printf_i+0xc8>
 800a71c:	232d      	movs	r3, #45	; 0x2d
 800a71e:	4276      	negs	r6, r6
 800a720:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a724:	485e      	ldr	r0, [pc, #376]	; (800a8a0 <_printf_i+0x244>)
 800a726:	230a      	movs	r3, #10
 800a728:	e019      	b.n	800a75e <_printf_i+0x102>
 800a72a:	680e      	ldr	r6, [r1, #0]
 800a72c:	602b      	str	r3, [r5, #0]
 800a72e:	f010 0f40 	tst.w	r0, #64	; 0x40
 800a732:	bf18      	it	ne
 800a734:	b236      	sxthne	r6, r6
 800a736:	e7ef      	b.n	800a718 <_printf_i+0xbc>
 800a738:	682b      	ldr	r3, [r5, #0]
 800a73a:	6820      	ldr	r0, [r4, #0]
 800a73c:	1d19      	adds	r1, r3, #4
 800a73e:	6029      	str	r1, [r5, #0]
 800a740:	0601      	lsls	r1, r0, #24
 800a742:	d501      	bpl.n	800a748 <_printf_i+0xec>
 800a744:	681e      	ldr	r6, [r3, #0]
 800a746:	e002      	b.n	800a74e <_printf_i+0xf2>
 800a748:	0646      	lsls	r6, r0, #25
 800a74a:	d5fb      	bpl.n	800a744 <_printf_i+0xe8>
 800a74c:	881e      	ldrh	r6, [r3, #0]
 800a74e:	4854      	ldr	r0, [pc, #336]	; (800a8a0 <_printf_i+0x244>)
 800a750:	2f6f      	cmp	r7, #111	; 0x6f
 800a752:	bf0c      	ite	eq
 800a754:	2308      	moveq	r3, #8
 800a756:	230a      	movne	r3, #10
 800a758:	2100      	movs	r1, #0
 800a75a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a75e:	6865      	ldr	r5, [r4, #4]
 800a760:	60a5      	str	r5, [r4, #8]
 800a762:	2d00      	cmp	r5, #0
 800a764:	bfa2      	ittt	ge
 800a766:	6821      	ldrge	r1, [r4, #0]
 800a768:	f021 0104 	bicge.w	r1, r1, #4
 800a76c:	6021      	strge	r1, [r4, #0]
 800a76e:	b90e      	cbnz	r6, 800a774 <_printf_i+0x118>
 800a770:	2d00      	cmp	r5, #0
 800a772:	d04d      	beq.n	800a810 <_printf_i+0x1b4>
 800a774:	4615      	mov	r5, r2
 800a776:	fbb6 f1f3 	udiv	r1, r6, r3
 800a77a:	fb03 6711 	mls	r7, r3, r1, r6
 800a77e:	5dc7      	ldrb	r7, [r0, r7]
 800a780:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800a784:	4637      	mov	r7, r6
 800a786:	42bb      	cmp	r3, r7
 800a788:	460e      	mov	r6, r1
 800a78a:	d9f4      	bls.n	800a776 <_printf_i+0x11a>
 800a78c:	2b08      	cmp	r3, #8
 800a78e:	d10b      	bne.n	800a7a8 <_printf_i+0x14c>
 800a790:	6823      	ldr	r3, [r4, #0]
 800a792:	07de      	lsls	r6, r3, #31
 800a794:	d508      	bpl.n	800a7a8 <_printf_i+0x14c>
 800a796:	6923      	ldr	r3, [r4, #16]
 800a798:	6861      	ldr	r1, [r4, #4]
 800a79a:	4299      	cmp	r1, r3
 800a79c:	bfde      	ittt	le
 800a79e:	2330      	movle	r3, #48	; 0x30
 800a7a0:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a7a4:	f105 35ff 	addle.w	r5, r5, #4294967295
 800a7a8:	1b52      	subs	r2, r2, r5
 800a7aa:	6122      	str	r2, [r4, #16]
 800a7ac:	f8cd a000 	str.w	sl, [sp]
 800a7b0:	464b      	mov	r3, r9
 800a7b2:	aa03      	add	r2, sp, #12
 800a7b4:	4621      	mov	r1, r4
 800a7b6:	4640      	mov	r0, r8
 800a7b8:	f7ff fee2 	bl	800a580 <_printf_common>
 800a7bc:	3001      	adds	r0, #1
 800a7be:	d14c      	bne.n	800a85a <_printf_i+0x1fe>
 800a7c0:	f04f 30ff 	mov.w	r0, #4294967295
 800a7c4:	b004      	add	sp, #16
 800a7c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a7ca:	4835      	ldr	r0, [pc, #212]	; (800a8a0 <_printf_i+0x244>)
 800a7cc:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800a7d0:	6829      	ldr	r1, [r5, #0]
 800a7d2:	6823      	ldr	r3, [r4, #0]
 800a7d4:	f851 6b04 	ldr.w	r6, [r1], #4
 800a7d8:	6029      	str	r1, [r5, #0]
 800a7da:	061d      	lsls	r5, r3, #24
 800a7dc:	d514      	bpl.n	800a808 <_printf_i+0x1ac>
 800a7de:	07df      	lsls	r7, r3, #31
 800a7e0:	bf44      	itt	mi
 800a7e2:	f043 0320 	orrmi.w	r3, r3, #32
 800a7e6:	6023      	strmi	r3, [r4, #0]
 800a7e8:	b91e      	cbnz	r6, 800a7f2 <_printf_i+0x196>
 800a7ea:	6823      	ldr	r3, [r4, #0]
 800a7ec:	f023 0320 	bic.w	r3, r3, #32
 800a7f0:	6023      	str	r3, [r4, #0]
 800a7f2:	2310      	movs	r3, #16
 800a7f4:	e7b0      	b.n	800a758 <_printf_i+0xfc>
 800a7f6:	6823      	ldr	r3, [r4, #0]
 800a7f8:	f043 0320 	orr.w	r3, r3, #32
 800a7fc:	6023      	str	r3, [r4, #0]
 800a7fe:	2378      	movs	r3, #120	; 0x78
 800a800:	4828      	ldr	r0, [pc, #160]	; (800a8a4 <_printf_i+0x248>)
 800a802:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a806:	e7e3      	b.n	800a7d0 <_printf_i+0x174>
 800a808:	0659      	lsls	r1, r3, #25
 800a80a:	bf48      	it	mi
 800a80c:	b2b6      	uxthmi	r6, r6
 800a80e:	e7e6      	b.n	800a7de <_printf_i+0x182>
 800a810:	4615      	mov	r5, r2
 800a812:	e7bb      	b.n	800a78c <_printf_i+0x130>
 800a814:	682b      	ldr	r3, [r5, #0]
 800a816:	6826      	ldr	r6, [r4, #0]
 800a818:	6961      	ldr	r1, [r4, #20]
 800a81a:	1d18      	adds	r0, r3, #4
 800a81c:	6028      	str	r0, [r5, #0]
 800a81e:	0635      	lsls	r5, r6, #24
 800a820:	681b      	ldr	r3, [r3, #0]
 800a822:	d501      	bpl.n	800a828 <_printf_i+0x1cc>
 800a824:	6019      	str	r1, [r3, #0]
 800a826:	e002      	b.n	800a82e <_printf_i+0x1d2>
 800a828:	0670      	lsls	r0, r6, #25
 800a82a:	d5fb      	bpl.n	800a824 <_printf_i+0x1c8>
 800a82c:	8019      	strh	r1, [r3, #0]
 800a82e:	2300      	movs	r3, #0
 800a830:	6123      	str	r3, [r4, #16]
 800a832:	4615      	mov	r5, r2
 800a834:	e7ba      	b.n	800a7ac <_printf_i+0x150>
 800a836:	682b      	ldr	r3, [r5, #0]
 800a838:	1d1a      	adds	r2, r3, #4
 800a83a:	602a      	str	r2, [r5, #0]
 800a83c:	681d      	ldr	r5, [r3, #0]
 800a83e:	6862      	ldr	r2, [r4, #4]
 800a840:	2100      	movs	r1, #0
 800a842:	4628      	mov	r0, r5
 800a844:	f7f5 fcf4 	bl	8000230 <memchr>
 800a848:	b108      	cbz	r0, 800a84e <_printf_i+0x1f2>
 800a84a:	1b40      	subs	r0, r0, r5
 800a84c:	6060      	str	r0, [r4, #4]
 800a84e:	6863      	ldr	r3, [r4, #4]
 800a850:	6123      	str	r3, [r4, #16]
 800a852:	2300      	movs	r3, #0
 800a854:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a858:	e7a8      	b.n	800a7ac <_printf_i+0x150>
 800a85a:	6923      	ldr	r3, [r4, #16]
 800a85c:	462a      	mov	r2, r5
 800a85e:	4649      	mov	r1, r9
 800a860:	4640      	mov	r0, r8
 800a862:	47d0      	blx	sl
 800a864:	3001      	adds	r0, #1
 800a866:	d0ab      	beq.n	800a7c0 <_printf_i+0x164>
 800a868:	6823      	ldr	r3, [r4, #0]
 800a86a:	079b      	lsls	r3, r3, #30
 800a86c:	d413      	bmi.n	800a896 <_printf_i+0x23a>
 800a86e:	68e0      	ldr	r0, [r4, #12]
 800a870:	9b03      	ldr	r3, [sp, #12]
 800a872:	4298      	cmp	r0, r3
 800a874:	bfb8      	it	lt
 800a876:	4618      	movlt	r0, r3
 800a878:	e7a4      	b.n	800a7c4 <_printf_i+0x168>
 800a87a:	2301      	movs	r3, #1
 800a87c:	4632      	mov	r2, r6
 800a87e:	4649      	mov	r1, r9
 800a880:	4640      	mov	r0, r8
 800a882:	47d0      	blx	sl
 800a884:	3001      	adds	r0, #1
 800a886:	d09b      	beq.n	800a7c0 <_printf_i+0x164>
 800a888:	3501      	adds	r5, #1
 800a88a:	68e3      	ldr	r3, [r4, #12]
 800a88c:	9903      	ldr	r1, [sp, #12]
 800a88e:	1a5b      	subs	r3, r3, r1
 800a890:	42ab      	cmp	r3, r5
 800a892:	dcf2      	bgt.n	800a87a <_printf_i+0x21e>
 800a894:	e7eb      	b.n	800a86e <_printf_i+0x212>
 800a896:	2500      	movs	r5, #0
 800a898:	f104 0619 	add.w	r6, r4, #25
 800a89c:	e7f5      	b.n	800a88a <_printf_i+0x22e>
 800a89e:	bf00      	nop
 800a8a0:	0800ac4d 	.word	0x0800ac4d
 800a8a4:	0800ac5e 	.word	0x0800ac5e

0800a8a8 <memmove>:
 800a8a8:	4288      	cmp	r0, r1
 800a8aa:	b510      	push	{r4, lr}
 800a8ac:	eb01 0402 	add.w	r4, r1, r2
 800a8b0:	d902      	bls.n	800a8b8 <memmove+0x10>
 800a8b2:	4284      	cmp	r4, r0
 800a8b4:	4623      	mov	r3, r4
 800a8b6:	d807      	bhi.n	800a8c8 <memmove+0x20>
 800a8b8:	1e43      	subs	r3, r0, #1
 800a8ba:	42a1      	cmp	r1, r4
 800a8bc:	d008      	beq.n	800a8d0 <memmove+0x28>
 800a8be:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a8c2:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a8c6:	e7f8      	b.n	800a8ba <memmove+0x12>
 800a8c8:	4402      	add	r2, r0
 800a8ca:	4601      	mov	r1, r0
 800a8cc:	428a      	cmp	r2, r1
 800a8ce:	d100      	bne.n	800a8d2 <memmove+0x2a>
 800a8d0:	bd10      	pop	{r4, pc}
 800a8d2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a8d6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a8da:	e7f7      	b.n	800a8cc <memmove+0x24>

0800a8dc <_free_r>:
 800a8dc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a8de:	2900      	cmp	r1, #0
 800a8e0:	d044      	beq.n	800a96c <_free_r+0x90>
 800a8e2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a8e6:	9001      	str	r0, [sp, #4]
 800a8e8:	2b00      	cmp	r3, #0
 800a8ea:	f1a1 0404 	sub.w	r4, r1, #4
 800a8ee:	bfb8      	it	lt
 800a8f0:	18e4      	addlt	r4, r4, r3
 800a8f2:	f000 f913 	bl	800ab1c <__malloc_lock>
 800a8f6:	4a1e      	ldr	r2, [pc, #120]	; (800a970 <_free_r+0x94>)
 800a8f8:	9801      	ldr	r0, [sp, #4]
 800a8fa:	6813      	ldr	r3, [r2, #0]
 800a8fc:	b933      	cbnz	r3, 800a90c <_free_r+0x30>
 800a8fe:	6063      	str	r3, [r4, #4]
 800a900:	6014      	str	r4, [r2, #0]
 800a902:	b003      	add	sp, #12
 800a904:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a908:	f000 b90e 	b.w	800ab28 <__malloc_unlock>
 800a90c:	42a3      	cmp	r3, r4
 800a90e:	d908      	bls.n	800a922 <_free_r+0x46>
 800a910:	6825      	ldr	r5, [r4, #0]
 800a912:	1961      	adds	r1, r4, r5
 800a914:	428b      	cmp	r3, r1
 800a916:	bf01      	itttt	eq
 800a918:	6819      	ldreq	r1, [r3, #0]
 800a91a:	685b      	ldreq	r3, [r3, #4]
 800a91c:	1949      	addeq	r1, r1, r5
 800a91e:	6021      	streq	r1, [r4, #0]
 800a920:	e7ed      	b.n	800a8fe <_free_r+0x22>
 800a922:	461a      	mov	r2, r3
 800a924:	685b      	ldr	r3, [r3, #4]
 800a926:	b10b      	cbz	r3, 800a92c <_free_r+0x50>
 800a928:	42a3      	cmp	r3, r4
 800a92a:	d9fa      	bls.n	800a922 <_free_r+0x46>
 800a92c:	6811      	ldr	r1, [r2, #0]
 800a92e:	1855      	adds	r5, r2, r1
 800a930:	42a5      	cmp	r5, r4
 800a932:	d10b      	bne.n	800a94c <_free_r+0x70>
 800a934:	6824      	ldr	r4, [r4, #0]
 800a936:	4421      	add	r1, r4
 800a938:	1854      	adds	r4, r2, r1
 800a93a:	42a3      	cmp	r3, r4
 800a93c:	6011      	str	r1, [r2, #0]
 800a93e:	d1e0      	bne.n	800a902 <_free_r+0x26>
 800a940:	681c      	ldr	r4, [r3, #0]
 800a942:	685b      	ldr	r3, [r3, #4]
 800a944:	6053      	str	r3, [r2, #4]
 800a946:	4421      	add	r1, r4
 800a948:	6011      	str	r1, [r2, #0]
 800a94a:	e7da      	b.n	800a902 <_free_r+0x26>
 800a94c:	d902      	bls.n	800a954 <_free_r+0x78>
 800a94e:	230c      	movs	r3, #12
 800a950:	6003      	str	r3, [r0, #0]
 800a952:	e7d6      	b.n	800a902 <_free_r+0x26>
 800a954:	6825      	ldr	r5, [r4, #0]
 800a956:	1961      	adds	r1, r4, r5
 800a958:	428b      	cmp	r3, r1
 800a95a:	bf04      	itt	eq
 800a95c:	6819      	ldreq	r1, [r3, #0]
 800a95e:	685b      	ldreq	r3, [r3, #4]
 800a960:	6063      	str	r3, [r4, #4]
 800a962:	bf04      	itt	eq
 800a964:	1949      	addeq	r1, r1, r5
 800a966:	6021      	streq	r1, [r4, #0]
 800a968:	6054      	str	r4, [r2, #4]
 800a96a:	e7ca      	b.n	800a902 <_free_r+0x26>
 800a96c:	b003      	add	sp, #12
 800a96e:	bd30      	pop	{r4, r5, pc}
 800a970:	20000f10 	.word	0x20000f10

0800a974 <sbrk_aligned>:
 800a974:	b570      	push	{r4, r5, r6, lr}
 800a976:	4e0e      	ldr	r6, [pc, #56]	; (800a9b0 <sbrk_aligned+0x3c>)
 800a978:	460c      	mov	r4, r1
 800a97a:	6831      	ldr	r1, [r6, #0]
 800a97c:	4605      	mov	r5, r0
 800a97e:	b911      	cbnz	r1, 800a986 <sbrk_aligned+0x12>
 800a980:	f000 f8bc 	bl	800aafc <_sbrk_r>
 800a984:	6030      	str	r0, [r6, #0]
 800a986:	4621      	mov	r1, r4
 800a988:	4628      	mov	r0, r5
 800a98a:	f000 f8b7 	bl	800aafc <_sbrk_r>
 800a98e:	1c43      	adds	r3, r0, #1
 800a990:	d00a      	beq.n	800a9a8 <sbrk_aligned+0x34>
 800a992:	1cc4      	adds	r4, r0, #3
 800a994:	f024 0403 	bic.w	r4, r4, #3
 800a998:	42a0      	cmp	r0, r4
 800a99a:	d007      	beq.n	800a9ac <sbrk_aligned+0x38>
 800a99c:	1a21      	subs	r1, r4, r0
 800a99e:	4628      	mov	r0, r5
 800a9a0:	f000 f8ac 	bl	800aafc <_sbrk_r>
 800a9a4:	3001      	adds	r0, #1
 800a9a6:	d101      	bne.n	800a9ac <sbrk_aligned+0x38>
 800a9a8:	f04f 34ff 	mov.w	r4, #4294967295
 800a9ac:	4620      	mov	r0, r4
 800a9ae:	bd70      	pop	{r4, r5, r6, pc}
 800a9b0:	20000f14 	.word	0x20000f14

0800a9b4 <_malloc_r>:
 800a9b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a9b8:	1ccd      	adds	r5, r1, #3
 800a9ba:	f025 0503 	bic.w	r5, r5, #3
 800a9be:	3508      	adds	r5, #8
 800a9c0:	2d0c      	cmp	r5, #12
 800a9c2:	bf38      	it	cc
 800a9c4:	250c      	movcc	r5, #12
 800a9c6:	2d00      	cmp	r5, #0
 800a9c8:	4607      	mov	r7, r0
 800a9ca:	db01      	blt.n	800a9d0 <_malloc_r+0x1c>
 800a9cc:	42a9      	cmp	r1, r5
 800a9ce:	d905      	bls.n	800a9dc <_malloc_r+0x28>
 800a9d0:	230c      	movs	r3, #12
 800a9d2:	603b      	str	r3, [r7, #0]
 800a9d4:	2600      	movs	r6, #0
 800a9d6:	4630      	mov	r0, r6
 800a9d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a9dc:	4e2e      	ldr	r6, [pc, #184]	; (800aa98 <_malloc_r+0xe4>)
 800a9de:	f000 f89d 	bl	800ab1c <__malloc_lock>
 800a9e2:	6833      	ldr	r3, [r6, #0]
 800a9e4:	461c      	mov	r4, r3
 800a9e6:	bb34      	cbnz	r4, 800aa36 <_malloc_r+0x82>
 800a9e8:	4629      	mov	r1, r5
 800a9ea:	4638      	mov	r0, r7
 800a9ec:	f7ff ffc2 	bl	800a974 <sbrk_aligned>
 800a9f0:	1c43      	adds	r3, r0, #1
 800a9f2:	4604      	mov	r4, r0
 800a9f4:	d14d      	bne.n	800aa92 <_malloc_r+0xde>
 800a9f6:	6834      	ldr	r4, [r6, #0]
 800a9f8:	4626      	mov	r6, r4
 800a9fa:	2e00      	cmp	r6, #0
 800a9fc:	d140      	bne.n	800aa80 <_malloc_r+0xcc>
 800a9fe:	6823      	ldr	r3, [r4, #0]
 800aa00:	4631      	mov	r1, r6
 800aa02:	4638      	mov	r0, r7
 800aa04:	eb04 0803 	add.w	r8, r4, r3
 800aa08:	f000 f878 	bl	800aafc <_sbrk_r>
 800aa0c:	4580      	cmp	r8, r0
 800aa0e:	d13a      	bne.n	800aa86 <_malloc_r+0xd2>
 800aa10:	6821      	ldr	r1, [r4, #0]
 800aa12:	3503      	adds	r5, #3
 800aa14:	1a6d      	subs	r5, r5, r1
 800aa16:	f025 0503 	bic.w	r5, r5, #3
 800aa1a:	3508      	adds	r5, #8
 800aa1c:	2d0c      	cmp	r5, #12
 800aa1e:	bf38      	it	cc
 800aa20:	250c      	movcc	r5, #12
 800aa22:	4629      	mov	r1, r5
 800aa24:	4638      	mov	r0, r7
 800aa26:	f7ff ffa5 	bl	800a974 <sbrk_aligned>
 800aa2a:	3001      	adds	r0, #1
 800aa2c:	d02b      	beq.n	800aa86 <_malloc_r+0xd2>
 800aa2e:	6823      	ldr	r3, [r4, #0]
 800aa30:	442b      	add	r3, r5
 800aa32:	6023      	str	r3, [r4, #0]
 800aa34:	e00e      	b.n	800aa54 <_malloc_r+0xa0>
 800aa36:	6822      	ldr	r2, [r4, #0]
 800aa38:	1b52      	subs	r2, r2, r5
 800aa3a:	d41e      	bmi.n	800aa7a <_malloc_r+0xc6>
 800aa3c:	2a0b      	cmp	r2, #11
 800aa3e:	d916      	bls.n	800aa6e <_malloc_r+0xba>
 800aa40:	1961      	adds	r1, r4, r5
 800aa42:	42a3      	cmp	r3, r4
 800aa44:	6025      	str	r5, [r4, #0]
 800aa46:	bf18      	it	ne
 800aa48:	6059      	strne	r1, [r3, #4]
 800aa4a:	6863      	ldr	r3, [r4, #4]
 800aa4c:	bf08      	it	eq
 800aa4e:	6031      	streq	r1, [r6, #0]
 800aa50:	5162      	str	r2, [r4, r5]
 800aa52:	604b      	str	r3, [r1, #4]
 800aa54:	4638      	mov	r0, r7
 800aa56:	f104 060b 	add.w	r6, r4, #11
 800aa5a:	f000 f865 	bl	800ab28 <__malloc_unlock>
 800aa5e:	f026 0607 	bic.w	r6, r6, #7
 800aa62:	1d23      	adds	r3, r4, #4
 800aa64:	1af2      	subs	r2, r6, r3
 800aa66:	d0b6      	beq.n	800a9d6 <_malloc_r+0x22>
 800aa68:	1b9b      	subs	r3, r3, r6
 800aa6a:	50a3      	str	r3, [r4, r2]
 800aa6c:	e7b3      	b.n	800a9d6 <_malloc_r+0x22>
 800aa6e:	6862      	ldr	r2, [r4, #4]
 800aa70:	42a3      	cmp	r3, r4
 800aa72:	bf0c      	ite	eq
 800aa74:	6032      	streq	r2, [r6, #0]
 800aa76:	605a      	strne	r2, [r3, #4]
 800aa78:	e7ec      	b.n	800aa54 <_malloc_r+0xa0>
 800aa7a:	4623      	mov	r3, r4
 800aa7c:	6864      	ldr	r4, [r4, #4]
 800aa7e:	e7b2      	b.n	800a9e6 <_malloc_r+0x32>
 800aa80:	4634      	mov	r4, r6
 800aa82:	6876      	ldr	r6, [r6, #4]
 800aa84:	e7b9      	b.n	800a9fa <_malloc_r+0x46>
 800aa86:	230c      	movs	r3, #12
 800aa88:	603b      	str	r3, [r7, #0]
 800aa8a:	4638      	mov	r0, r7
 800aa8c:	f000 f84c 	bl	800ab28 <__malloc_unlock>
 800aa90:	e7a1      	b.n	800a9d6 <_malloc_r+0x22>
 800aa92:	6025      	str	r5, [r4, #0]
 800aa94:	e7de      	b.n	800aa54 <_malloc_r+0xa0>
 800aa96:	bf00      	nop
 800aa98:	20000f10 	.word	0x20000f10

0800aa9c <_realloc_r>:
 800aa9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aaa0:	4680      	mov	r8, r0
 800aaa2:	4614      	mov	r4, r2
 800aaa4:	460e      	mov	r6, r1
 800aaa6:	b921      	cbnz	r1, 800aab2 <_realloc_r+0x16>
 800aaa8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800aaac:	4611      	mov	r1, r2
 800aaae:	f7ff bf81 	b.w	800a9b4 <_malloc_r>
 800aab2:	b92a      	cbnz	r2, 800aac0 <_realloc_r+0x24>
 800aab4:	f7ff ff12 	bl	800a8dc <_free_r>
 800aab8:	4625      	mov	r5, r4
 800aaba:	4628      	mov	r0, r5
 800aabc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aac0:	f000 f838 	bl	800ab34 <_malloc_usable_size_r>
 800aac4:	4284      	cmp	r4, r0
 800aac6:	4607      	mov	r7, r0
 800aac8:	d802      	bhi.n	800aad0 <_realloc_r+0x34>
 800aaca:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800aace:	d812      	bhi.n	800aaf6 <_realloc_r+0x5a>
 800aad0:	4621      	mov	r1, r4
 800aad2:	4640      	mov	r0, r8
 800aad4:	f7ff ff6e 	bl	800a9b4 <_malloc_r>
 800aad8:	4605      	mov	r5, r0
 800aada:	2800      	cmp	r0, #0
 800aadc:	d0ed      	beq.n	800aaba <_realloc_r+0x1e>
 800aade:	42bc      	cmp	r4, r7
 800aae0:	4622      	mov	r2, r4
 800aae2:	4631      	mov	r1, r6
 800aae4:	bf28      	it	cs
 800aae6:	463a      	movcs	r2, r7
 800aae8:	f7ff fbb8 	bl	800a25c <memcpy>
 800aaec:	4631      	mov	r1, r6
 800aaee:	4640      	mov	r0, r8
 800aaf0:	f7ff fef4 	bl	800a8dc <_free_r>
 800aaf4:	e7e1      	b.n	800aaba <_realloc_r+0x1e>
 800aaf6:	4635      	mov	r5, r6
 800aaf8:	e7df      	b.n	800aaba <_realloc_r+0x1e>
	...

0800aafc <_sbrk_r>:
 800aafc:	b538      	push	{r3, r4, r5, lr}
 800aafe:	4d06      	ldr	r5, [pc, #24]	; (800ab18 <_sbrk_r+0x1c>)
 800ab00:	2300      	movs	r3, #0
 800ab02:	4604      	mov	r4, r0
 800ab04:	4608      	mov	r0, r1
 800ab06:	602b      	str	r3, [r5, #0]
 800ab08:	f7f6 f9d4 	bl	8000eb4 <_sbrk>
 800ab0c:	1c43      	adds	r3, r0, #1
 800ab0e:	d102      	bne.n	800ab16 <_sbrk_r+0x1a>
 800ab10:	682b      	ldr	r3, [r5, #0]
 800ab12:	b103      	cbz	r3, 800ab16 <_sbrk_r+0x1a>
 800ab14:	6023      	str	r3, [r4, #0]
 800ab16:	bd38      	pop	{r3, r4, r5, pc}
 800ab18:	20000f18 	.word	0x20000f18

0800ab1c <__malloc_lock>:
 800ab1c:	4801      	ldr	r0, [pc, #4]	; (800ab24 <__malloc_lock+0x8>)
 800ab1e:	f000 b811 	b.w	800ab44 <__retarget_lock_acquire_recursive>
 800ab22:	bf00      	nop
 800ab24:	20000f1c 	.word	0x20000f1c

0800ab28 <__malloc_unlock>:
 800ab28:	4801      	ldr	r0, [pc, #4]	; (800ab30 <__malloc_unlock+0x8>)
 800ab2a:	f000 b80c 	b.w	800ab46 <__retarget_lock_release_recursive>
 800ab2e:	bf00      	nop
 800ab30:	20000f1c 	.word	0x20000f1c

0800ab34 <_malloc_usable_size_r>:
 800ab34:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ab38:	1f18      	subs	r0, r3, #4
 800ab3a:	2b00      	cmp	r3, #0
 800ab3c:	bfbc      	itt	lt
 800ab3e:	580b      	ldrlt	r3, [r1, r0]
 800ab40:	18c0      	addlt	r0, r0, r3
 800ab42:	4770      	bx	lr

0800ab44 <__retarget_lock_acquire_recursive>:
 800ab44:	4770      	bx	lr

0800ab46 <__retarget_lock_release_recursive>:
 800ab46:	4770      	bx	lr

0800ab48 <_init>:
 800ab48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ab4a:	bf00      	nop
 800ab4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ab4e:	bc08      	pop	{r3}
 800ab50:	469e      	mov	lr, r3
 800ab52:	4770      	bx	lr

0800ab54 <_fini>:
 800ab54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ab56:	bf00      	nop
 800ab58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ab5a:	bc08      	pop	{r3}
 800ab5c:	469e      	mov	lr, r3
 800ab5e:	4770      	bx	lr
