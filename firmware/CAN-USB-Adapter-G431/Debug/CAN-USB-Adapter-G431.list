
CAN-USB-Adapter-G431.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003b10  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000064  08003ce8  08003ce8  00013ce8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003d4c  08003d4c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08003d4c  08003d4c  00013d4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003d54  08003d54  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003d54  08003d54  00013d54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003d58  08003d58  00013d58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003d5c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001f4  2000000c  08003d68  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000200  08003d68  00020200  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001ce20  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000326d  00000000  00000000  0003ce5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    0001442c  00000000  00000000  000400c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000f10  00000000  00000000  000544f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001b28  00000000  00000000  00055408  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001f991  00000000  00000000  00056f30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001ca6c  00000000  00000000  000768c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cb4a8  00000000  00000000  0009332d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0015e7d5  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002f68  00000000  00000000  0015e828  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000000c 	.word	0x2000000c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08003cd0 	.word	0x08003cd0

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000010 	.word	0x20000010
 8000214:	08003cd0 	.word	0x08003cd0

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b974 	b.w	8000518 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9d08      	ldr	r5, [sp, #32]
 800024e:	4604      	mov	r4, r0
 8000250:	468e      	mov	lr, r1
 8000252:	2b00      	cmp	r3, #0
 8000254:	d14d      	bne.n	80002f2 <__udivmoddi4+0xaa>
 8000256:	428a      	cmp	r2, r1
 8000258:	4694      	mov	ip, r2
 800025a:	d969      	bls.n	8000330 <__udivmoddi4+0xe8>
 800025c:	fab2 f282 	clz	r2, r2
 8000260:	b152      	cbz	r2, 8000278 <__udivmoddi4+0x30>
 8000262:	fa01 f302 	lsl.w	r3, r1, r2
 8000266:	f1c2 0120 	rsb	r1, r2, #32
 800026a:	fa20 f101 	lsr.w	r1, r0, r1
 800026e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000272:	ea41 0e03 	orr.w	lr, r1, r3
 8000276:	4094      	lsls	r4, r2
 8000278:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800027c:	0c21      	lsrs	r1, r4, #16
 800027e:	fbbe f6f8 	udiv	r6, lr, r8
 8000282:	fa1f f78c 	uxth.w	r7, ip
 8000286:	fb08 e316 	mls	r3, r8, r6, lr
 800028a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800028e:	fb06 f107 	mul.w	r1, r6, r7
 8000292:	4299      	cmp	r1, r3
 8000294:	d90a      	bls.n	80002ac <__udivmoddi4+0x64>
 8000296:	eb1c 0303 	adds.w	r3, ip, r3
 800029a:	f106 30ff 	add.w	r0, r6, #4294967295
 800029e:	f080 811f 	bcs.w	80004e0 <__udivmoddi4+0x298>
 80002a2:	4299      	cmp	r1, r3
 80002a4:	f240 811c 	bls.w	80004e0 <__udivmoddi4+0x298>
 80002a8:	3e02      	subs	r6, #2
 80002aa:	4463      	add	r3, ip
 80002ac:	1a5b      	subs	r3, r3, r1
 80002ae:	b2a4      	uxth	r4, r4
 80002b0:	fbb3 f0f8 	udiv	r0, r3, r8
 80002b4:	fb08 3310 	mls	r3, r8, r0, r3
 80002b8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002bc:	fb00 f707 	mul.w	r7, r0, r7
 80002c0:	42a7      	cmp	r7, r4
 80002c2:	d90a      	bls.n	80002da <__udivmoddi4+0x92>
 80002c4:	eb1c 0404 	adds.w	r4, ip, r4
 80002c8:	f100 33ff 	add.w	r3, r0, #4294967295
 80002cc:	f080 810a 	bcs.w	80004e4 <__udivmoddi4+0x29c>
 80002d0:	42a7      	cmp	r7, r4
 80002d2:	f240 8107 	bls.w	80004e4 <__udivmoddi4+0x29c>
 80002d6:	4464      	add	r4, ip
 80002d8:	3802      	subs	r0, #2
 80002da:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002de:	1be4      	subs	r4, r4, r7
 80002e0:	2600      	movs	r6, #0
 80002e2:	b11d      	cbz	r5, 80002ec <__udivmoddi4+0xa4>
 80002e4:	40d4      	lsrs	r4, r2
 80002e6:	2300      	movs	r3, #0
 80002e8:	e9c5 4300 	strd	r4, r3, [r5]
 80002ec:	4631      	mov	r1, r6
 80002ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d909      	bls.n	800030a <__udivmoddi4+0xc2>
 80002f6:	2d00      	cmp	r5, #0
 80002f8:	f000 80ef 	beq.w	80004da <__udivmoddi4+0x292>
 80002fc:	2600      	movs	r6, #0
 80002fe:	e9c5 0100 	strd	r0, r1, [r5]
 8000302:	4630      	mov	r0, r6
 8000304:	4631      	mov	r1, r6
 8000306:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030a:	fab3 f683 	clz	r6, r3
 800030e:	2e00      	cmp	r6, #0
 8000310:	d14a      	bne.n	80003a8 <__udivmoddi4+0x160>
 8000312:	428b      	cmp	r3, r1
 8000314:	d302      	bcc.n	800031c <__udivmoddi4+0xd4>
 8000316:	4282      	cmp	r2, r0
 8000318:	f200 80f9 	bhi.w	800050e <__udivmoddi4+0x2c6>
 800031c:	1a84      	subs	r4, r0, r2
 800031e:	eb61 0303 	sbc.w	r3, r1, r3
 8000322:	2001      	movs	r0, #1
 8000324:	469e      	mov	lr, r3
 8000326:	2d00      	cmp	r5, #0
 8000328:	d0e0      	beq.n	80002ec <__udivmoddi4+0xa4>
 800032a:	e9c5 4e00 	strd	r4, lr, [r5]
 800032e:	e7dd      	b.n	80002ec <__udivmoddi4+0xa4>
 8000330:	b902      	cbnz	r2, 8000334 <__udivmoddi4+0xec>
 8000332:	deff      	udf	#255	; 0xff
 8000334:	fab2 f282 	clz	r2, r2
 8000338:	2a00      	cmp	r2, #0
 800033a:	f040 8092 	bne.w	8000462 <__udivmoddi4+0x21a>
 800033e:	eba1 010c 	sub.w	r1, r1, ip
 8000342:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000346:	fa1f fe8c 	uxth.w	lr, ip
 800034a:	2601      	movs	r6, #1
 800034c:	0c20      	lsrs	r0, r4, #16
 800034e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000352:	fb07 1113 	mls	r1, r7, r3, r1
 8000356:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800035a:	fb0e f003 	mul.w	r0, lr, r3
 800035e:	4288      	cmp	r0, r1
 8000360:	d908      	bls.n	8000374 <__udivmoddi4+0x12c>
 8000362:	eb1c 0101 	adds.w	r1, ip, r1
 8000366:	f103 38ff 	add.w	r8, r3, #4294967295
 800036a:	d202      	bcs.n	8000372 <__udivmoddi4+0x12a>
 800036c:	4288      	cmp	r0, r1
 800036e:	f200 80cb 	bhi.w	8000508 <__udivmoddi4+0x2c0>
 8000372:	4643      	mov	r3, r8
 8000374:	1a09      	subs	r1, r1, r0
 8000376:	b2a4      	uxth	r4, r4
 8000378:	fbb1 f0f7 	udiv	r0, r1, r7
 800037c:	fb07 1110 	mls	r1, r7, r0, r1
 8000380:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000384:	fb0e fe00 	mul.w	lr, lr, r0
 8000388:	45a6      	cmp	lr, r4
 800038a:	d908      	bls.n	800039e <__udivmoddi4+0x156>
 800038c:	eb1c 0404 	adds.w	r4, ip, r4
 8000390:	f100 31ff 	add.w	r1, r0, #4294967295
 8000394:	d202      	bcs.n	800039c <__udivmoddi4+0x154>
 8000396:	45a6      	cmp	lr, r4
 8000398:	f200 80bb 	bhi.w	8000512 <__udivmoddi4+0x2ca>
 800039c:	4608      	mov	r0, r1
 800039e:	eba4 040e 	sub.w	r4, r4, lr
 80003a2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003a6:	e79c      	b.n	80002e2 <__udivmoddi4+0x9a>
 80003a8:	f1c6 0720 	rsb	r7, r6, #32
 80003ac:	40b3      	lsls	r3, r6
 80003ae:	fa22 fc07 	lsr.w	ip, r2, r7
 80003b2:	ea4c 0c03 	orr.w	ip, ip, r3
 80003b6:	fa20 f407 	lsr.w	r4, r0, r7
 80003ba:	fa01 f306 	lsl.w	r3, r1, r6
 80003be:	431c      	orrs	r4, r3
 80003c0:	40f9      	lsrs	r1, r7
 80003c2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003c6:	fa00 f306 	lsl.w	r3, r0, r6
 80003ca:	fbb1 f8f9 	udiv	r8, r1, r9
 80003ce:	0c20      	lsrs	r0, r4, #16
 80003d0:	fa1f fe8c 	uxth.w	lr, ip
 80003d4:	fb09 1118 	mls	r1, r9, r8, r1
 80003d8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003dc:	fb08 f00e 	mul.w	r0, r8, lr
 80003e0:	4288      	cmp	r0, r1
 80003e2:	fa02 f206 	lsl.w	r2, r2, r6
 80003e6:	d90b      	bls.n	8000400 <__udivmoddi4+0x1b8>
 80003e8:	eb1c 0101 	adds.w	r1, ip, r1
 80003ec:	f108 3aff 	add.w	sl, r8, #4294967295
 80003f0:	f080 8088 	bcs.w	8000504 <__udivmoddi4+0x2bc>
 80003f4:	4288      	cmp	r0, r1
 80003f6:	f240 8085 	bls.w	8000504 <__udivmoddi4+0x2bc>
 80003fa:	f1a8 0802 	sub.w	r8, r8, #2
 80003fe:	4461      	add	r1, ip
 8000400:	1a09      	subs	r1, r1, r0
 8000402:	b2a4      	uxth	r4, r4
 8000404:	fbb1 f0f9 	udiv	r0, r1, r9
 8000408:	fb09 1110 	mls	r1, r9, r0, r1
 800040c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000410:	fb00 fe0e 	mul.w	lr, r0, lr
 8000414:	458e      	cmp	lr, r1
 8000416:	d908      	bls.n	800042a <__udivmoddi4+0x1e2>
 8000418:	eb1c 0101 	adds.w	r1, ip, r1
 800041c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000420:	d26c      	bcs.n	80004fc <__udivmoddi4+0x2b4>
 8000422:	458e      	cmp	lr, r1
 8000424:	d96a      	bls.n	80004fc <__udivmoddi4+0x2b4>
 8000426:	3802      	subs	r0, #2
 8000428:	4461      	add	r1, ip
 800042a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800042e:	fba0 9402 	umull	r9, r4, r0, r2
 8000432:	eba1 010e 	sub.w	r1, r1, lr
 8000436:	42a1      	cmp	r1, r4
 8000438:	46c8      	mov	r8, r9
 800043a:	46a6      	mov	lr, r4
 800043c:	d356      	bcc.n	80004ec <__udivmoddi4+0x2a4>
 800043e:	d053      	beq.n	80004e8 <__udivmoddi4+0x2a0>
 8000440:	b15d      	cbz	r5, 800045a <__udivmoddi4+0x212>
 8000442:	ebb3 0208 	subs.w	r2, r3, r8
 8000446:	eb61 010e 	sbc.w	r1, r1, lr
 800044a:	fa01 f707 	lsl.w	r7, r1, r7
 800044e:	fa22 f306 	lsr.w	r3, r2, r6
 8000452:	40f1      	lsrs	r1, r6
 8000454:	431f      	orrs	r7, r3
 8000456:	e9c5 7100 	strd	r7, r1, [r5]
 800045a:	2600      	movs	r6, #0
 800045c:	4631      	mov	r1, r6
 800045e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000462:	f1c2 0320 	rsb	r3, r2, #32
 8000466:	40d8      	lsrs	r0, r3
 8000468:	fa0c fc02 	lsl.w	ip, ip, r2
 800046c:	fa21 f303 	lsr.w	r3, r1, r3
 8000470:	4091      	lsls	r1, r2
 8000472:	4301      	orrs	r1, r0
 8000474:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000478:	fa1f fe8c 	uxth.w	lr, ip
 800047c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000480:	fb07 3610 	mls	r6, r7, r0, r3
 8000484:	0c0b      	lsrs	r3, r1, #16
 8000486:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800048a:	fb00 f60e 	mul.w	r6, r0, lr
 800048e:	429e      	cmp	r6, r3
 8000490:	fa04 f402 	lsl.w	r4, r4, r2
 8000494:	d908      	bls.n	80004a8 <__udivmoddi4+0x260>
 8000496:	eb1c 0303 	adds.w	r3, ip, r3
 800049a:	f100 38ff 	add.w	r8, r0, #4294967295
 800049e:	d22f      	bcs.n	8000500 <__udivmoddi4+0x2b8>
 80004a0:	429e      	cmp	r6, r3
 80004a2:	d92d      	bls.n	8000500 <__udivmoddi4+0x2b8>
 80004a4:	3802      	subs	r0, #2
 80004a6:	4463      	add	r3, ip
 80004a8:	1b9b      	subs	r3, r3, r6
 80004aa:	b289      	uxth	r1, r1
 80004ac:	fbb3 f6f7 	udiv	r6, r3, r7
 80004b0:	fb07 3316 	mls	r3, r7, r6, r3
 80004b4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004b8:	fb06 f30e 	mul.w	r3, r6, lr
 80004bc:	428b      	cmp	r3, r1
 80004be:	d908      	bls.n	80004d2 <__udivmoddi4+0x28a>
 80004c0:	eb1c 0101 	adds.w	r1, ip, r1
 80004c4:	f106 38ff 	add.w	r8, r6, #4294967295
 80004c8:	d216      	bcs.n	80004f8 <__udivmoddi4+0x2b0>
 80004ca:	428b      	cmp	r3, r1
 80004cc:	d914      	bls.n	80004f8 <__udivmoddi4+0x2b0>
 80004ce:	3e02      	subs	r6, #2
 80004d0:	4461      	add	r1, ip
 80004d2:	1ac9      	subs	r1, r1, r3
 80004d4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004d8:	e738      	b.n	800034c <__udivmoddi4+0x104>
 80004da:	462e      	mov	r6, r5
 80004dc:	4628      	mov	r0, r5
 80004de:	e705      	b.n	80002ec <__udivmoddi4+0xa4>
 80004e0:	4606      	mov	r6, r0
 80004e2:	e6e3      	b.n	80002ac <__udivmoddi4+0x64>
 80004e4:	4618      	mov	r0, r3
 80004e6:	e6f8      	b.n	80002da <__udivmoddi4+0x92>
 80004e8:	454b      	cmp	r3, r9
 80004ea:	d2a9      	bcs.n	8000440 <__udivmoddi4+0x1f8>
 80004ec:	ebb9 0802 	subs.w	r8, r9, r2
 80004f0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004f4:	3801      	subs	r0, #1
 80004f6:	e7a3      	b.n	8000440 <__udivmoddi4+0x1f8>
 80004f8:	4646      	mov	r6, r8
 80004fa:	e7ea      	b.n	80004d2 <__udivmoddi4+0x28a>
 80004fc:	4620      	mov	r0, r4
 80004fe:	e794      	b.n	800042a <__udivmoddi4+0x1e2>
 8000500:	4640      	mov	r0, r8
 8000502:	e7d1      	b.n	80004a8 <__udivmoddi4+0x260>
 8000504:	46d0      	mov	r8, sl
 8000506:	e77b      	b.n	8000400 <__udivmoddi4+0x1b8>
 8000508:	3b02      	subs	r3, #2
 800050a:	4461      	add	r1, ip
 800050c:	e732      	b.n	8000374 <__udivmoddi4+0x12c>
 800050e:	4630      	mov	r0, r6
 8000510:	e709      	b.n	8000326 <__udivmoddi4+0xde>
 8000512:	4464      	add	r4, ip
 8000514:	3802      	subs	r0, #2
 8000516:	e742      	b.n	800039e <__udivmoddi4+0x156>

08000518 <__aeabi_idiv0>:
 8000518:	4770      	bx	lr
 800051a:	bf00      	nop

0800051c <HAL_FDCAN_RxFifo0Callback>:
uint8_t uart_tx_buffer[64];

/**
 * CAN receive interrupt routine.
 */
void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs) {
 800051c:	b530      	push	{r4, r5, lr}
  CAN_Frame rx_frame;

  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_RESET);
 800051e:	2200      	movs	r2, #0
void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs) {
 8000520:	b085      	sub	sp, #20
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_RESET);
 8000522:	2104      	movs	r1, #4
 8000524:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  CAN_getRxFrame(&hfdcan1, &rx_frame);

  uart_tx_buffer[0] = PYTHONCAN_START_OF_FRAME;
 8000528:	4d18      	ldr	r5, [pc, #96]	; (800058c <HAL_FDCAN_RxFifo0Callback+0x70>)
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_RESET);
 800052a:	f001 f93d 	bl	80017a8 <HAL_GPIO_WritePin>
  CAN_getRxFrame(&hfdcan1, &rx_frame);
 800052e:	4669      	mov	r1, sp
 8000530:	4817      	ldr	r0, [pc, #92]	; (8000590 <HAL_FDCAN_RxFifo0Callback+0x74>)
 8000532:	f000 f9bd 	bl	80008b0 <CAN_getRxFrame>
  uart_tx_buffer[3] = 0x00U;
  uart_tx_buffer[4] = 0x00U;

  uart_tx_buffer[5] = rx_frame.size;  // DLC

  uart_tx_buffer[6] = READ_BITS(rx_frame.id, 0xFFU);  // ID
 8000536:	9b00      	ldr	r3, [sp, #0]
  uart_tx_buffer[5] = rx_frame.size;  // DLC
 8000538:	f8bd 4006 	ldrh.w	r4, [sp, #6]
  uart_tx_buffer[6] = READ_BITS(rx_frame.id, 0xFFU);  // ID
 800053c:	f8bd 1000 	ldrh.w	r1, [sp]
  uart_tx_buffer[5] = rx_frame.size;  // DLC
 8000540:	716c      	strb	r4, [r5, #5]
  uart_tx_buffer[0] = PYTHONCAN_START_OF_FRAME;
 8000542:	22aa      	movs	r2, #170	; 0xaa
 8000544:	602a      	str	r2, [r5, #0]
  uart_tx_buffer[4] = 0x00U;
 8000546:	2200      	movs	r2, #0
 8000548:	712a      	strb	r2, [r5, #4]
  uart_tx_buffer[7] = READ_BITS(rx_frame.id >> 8U, 0xFFU);
  uart_tx_buffer[8] = READ_BITS(rx_frame.id >> 16U, 0xFFU);
 800054a:	0c1a      	lsrs	r2, r3, #16
  uart_tx_buffer[9] = READ_BITS(rx_frame.id >> 24U, 0xFFU);
 800054c:	0e1b      	lsrs	r3, r3, #24
  uart_tx_buffer[6] = READ_BITS(rx_frame.id, 0xFFU);  // ID
 800054e:	80e9      	strh	r1, [r5, #6]
  uart_tx_buffer[8] = READ_BITS(rx_frame.id >> 16U, 0xFFU);
 8000550:	722a      	strb	r2, [r5, #8]
  uart_tx_buffer[9] = READ_BITS(rx_frame.id >> 24U, 0xFFU);
 8000552:	726b      	strb	r3, [r5, #9]

  for (uint16_t i=0; i<rx_frame.size; i+=1) {
 8000554:	b12c      	cbz	r4, 8000562 <HAL_FDCAN_RxFifo0Callback+0x46>
    uart_tx_buffer[10+i] = rx_frame.data[i];
 8000556:	4622      	mov	r2, r4
 8000558:	a902      	add	r1, sp, #8
 800055a:	f105 000a 	add.w	r0, r5, #10
 800055e:	f003 fba1 	bl	8003ca4 <memcpy>
  }

  uart_tx_buffer[10+rx_frame.size] = PYTHONCAN_END_OF_FRAME;
 8000562:	340a      	adds	r4, #10
 8000564:	b2a4      	uxth	r4, r4
 8000566:	23bb      	movs	r3, #187	; 0xbb

  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_SET);
 8000568:	2201      	movs	r2, #1
 800056a:	2104      	movs	r1, #4
 800056c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  uart_tx_buffer[10+rx_frame.size] = PYTHONCAN_END_OF_FRAME;
 8000570:	552b      	strb	r3, [r5, r4]
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_SET);
 8000572:	f001 f919 	bl	80017a8 <HAL_GPIO_WritePin>

  HAL_UART_Transmit_IT(&huart2, uart_tx_buffer, 11+rx_frame.size);
 8000576:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800057a:	4904      	ldr	r1, [pc, #16]	; (800058c <HAL_FDCAN_RxFifo0Callback+0x70>)
 800057c:	4805      	ldr	r0, [pc, #20]	; (8000594 <HAL_FDCAN_RxFifo0Callback+0x78>)
 800057e:	320b      	adds	r2, #11
 8000580:	b292      	uxth	r2, r2
 8000582:	f002 faab 	bl	8002adc <HAL_UART_Transmit_IT>
}
 8000586:	b005      	add	sp, #20
 8000588:	bd30      	pop	{r4, r5, pc}
 800058a:	bf00      	nop
 800058c:	2000007c 	.word	0x2000007c
 8000590:	200000bc 	.word	0x200000bc
 8000594:	2000016c 	.word	0x2000016c

08000598 <HAL_TIM_PeriodElapsedCallback>:
/**
 * When UART has not been transmitting for a while, we reset the receive interrupt handler.
 * This is to handle the case where UART is missing data, and we just drop that packet instead of
 * continue receiving the data forever.
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000598:	b510      	push	{r4, lr}
  HAL_UART_AbortReceive(&huart2);
 800059a:	4c08      	ldr	r4, [pc, #32]	; (80005bc <HAL_TIM_PeriodElapsedCallback+0x24>)
 800059c:	4620      	mov	r0, r4
 800059e:	f002 fb01 	bl	8002ba4 <HAL_UART_AbortReceive>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_SET);
 80005a2:	2201      	movs	r2, #1
 80005a4:	2104      	movs	r1, #4
 80005a6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005aa:	f001 f8fd 	bl	80017a8 <HAL_GPIO_WritePin>
  HAL_UART_Receive_IT(&huart2, uart_rx_buffer, 11);
 80005ae:	4620      	mov	r0, r4
 80005b0:	4903      	ldr	r1, [pc, #12]	; (80005c0 <HAL_TIM_PeriodElapsedCallback+0x28>)
}
 80005b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  HAL_UART_Receive_IT(&huart2, uart_rx_buffer, 11);
 80005b6:	220b      	movs	r2, #11
 80005b8:	f003 ba8e 	b.w	8003ad8 <HAL_UART_Receive_IT>
 80005bc:	2000016c 	.word	0x2000016c
 80005c0:	20000038 	.word	0x20000038

080005c4 <HAL_UART_RxCpltCallback>:

/**
 * UART receive interrupt routine.
 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
  __HAL_TIM_SET_COUNTER(&htim2, 0);
 80005c4:	4b22      	ldr	r3, [pc, #136]	; (8000650 <HAL_UART_RxCpltCallback+0x8c>)
 80005c6:	681b      	ldr	r3, [r3, #0]
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80005c8:	b510      	push	{r4, lr}
  __HAL_TIM_SET_COUNTER(&htim2, 0);
 80005ca:	2200      	movs	r2, #0

  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_RESET);

  if (!uart_rx_data_pending) {
 80005cc:	4c21      	ldr	r4, [pc, #132]	; (8000654 <HAL_UART_RxCpltCallback+0x90>)
  __HAL_TIM_SET_COUNTER(&htim2, 0);
 80005ce:	625a      	str	r2, [r3, #36]	; 0x24
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_RESET);
 80005d0:	2104      	movs	r1, #4
 80005d2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005d6:	f001 f8e7 	bl	80017a8 <HAL_GPIO_WritePin>
  if (!uart_rx_data_pending) {
 80005da:	7823      	ldrb	r3, [r4, #0]
 80005dc:	bb3b      	cbnz	r3, 800062e <HAL_UART_RxCpltCallback+0x6a>
    // if we are receiving the header section

    // check if the first byte is the correct Start of Frame
    uint8_t is_valid_frame = uart_rx_buffer[0] == 0xAAU;
 80005de:	491e      	ldr	r1, [pc, #120]	; (8000658 <HAL_UART_RxCpltCallback+0x94>)
    if (!is_valid_frame) {
 80005e0:	780b      	ldrb	r3, [r1, #0]
 80005e2:	2baa      	cmp	r3, #170	; 0xaa
 80005e4:	d11d      	bne.n	8000622 <HAL_UART_RxCpltCallback+0x5e>
      HAL_UART_Receive_IT(&huart2, uart_rx_buffer, 11);
      return;
    }

    // decode the header section
    can_tx_frame.id_type = CAN_ID_STANDARD;
 80005e6:	4b1d      	ldr	r3, [pc, #116]	; (800065c <HAL_UART_RxCpltCallback+0x98>)
    can_tx_frame.frame_type = CAN_FRAME_DATA;
//    uint32_t timestamp = ((uart_rx_buffer[1])     // timestamp is not used
//        | (uart_rx_buffer[2] << 8U)
//        | (uart_rx_buffer[3] << 16U)
//        | (uart_rx_buffer[4] << 24U));
    can_tx_frame.size = uart_rx_buffer[5];
 80005e8:	794a      	ldrb	r2, [r1, #5]
    can_tx_frame.id = ((uart_rx_buffer[6])
 80005ea:	f8d1 0006 	ldr.w	r0, [r1, #6]
    can_tx_frame.size = uart_rx_buffer[5];
 80005ee:	80da      	strh	r2, [r3, #6]
    can_tx_frame.id_type = CAN_ID_STANDARD;
 80005f0:	f44f 7c80 	mov.w	ip, #256	; 0x100
 80005f4:	f8a3 c004 	strh.w	ip, [r3, #4]
    can_tx_frame.id = ((uart_rx_buffer[6])
 80005f8:	6018      	str	r0, [r3, #0]
        | (uart_rx_buffer[7] << 8U)
        | (uart_rx_buffer[8] << 16U)
        | (uart_rx_buffer[9] << 24U));

    // if DLC > 0, we need to continue receive `DLC` number of data
    if (can_tx_frame.size) {
 80005fa:	bb02      	cbnz	r2, 800063e <HAL_UART_RxCpltCallback+0x7a>
  }
  else {
    memcpy(can_tx_frame.data+1, uart_rx_buffer, can_tx_frame.size-1);
  }

  CAN_putTxFrame(&hfdcan1, &can_tx_frame);
 80005fc:	4917      	ldr	r1, [pc, #92]	; (800065c <HAL_UART_RxCpltCallback+0x98>)
 80005fe:	4818      	ldr	r0, [pc, #96]	; (8000660 <HAL_UART_RxCpltCallback+0x9c>)
 8000600:	f000 f9aa 	bl	8000958 <CAN_putTxFrame>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_SET);
 8000604:	2201      	movs	r2, #1
 8000606:	2104      	movs	r1, #4
 8000608:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800060c:	f001 f8cc 	bl	80017a8 <HAL_GPIO_WritePin>

  uart_rx_data_pending = 0U;
 8000610:	2300      	movs	r3, #0
 8000612:	7023      	strb	r3, [r4, #0]
  HAL_UART_Receive_IT(&huart2, uart_rx_buffer, 11);
}
 8000614:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  HAL_UART_Receive_IT(&huart2, uart_rx_buffer, 11);
 8000618:	490f      	ldr	r1, [pc, #60]	; (8000658 <HAL_UART_RxCpltCallback+0x94>)
 800061a:	4812      	ldr	r0, [pc, #72]	; (8000664 <HAL_UART_RxCpltCallback+0xa0>)
 800061c:	220b      	movs	r2, #11
 800061e:	f003 ba5b 	b.w	8003ad8 <HAL_UART_Receive_IT>
}
 8000622:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_UART_Receive_IT(&huart2, uart_rx_buffer, 11);
 8000626:	480f      	ldr	r0, [pc, #60]	; (8000664 <HAL_UART_RxCpltCallback+0xa0>)
 8000628:	220b      	movs	r2, #11
 800062a:	f003 ba55 	b.w	8003ad8 <HAL_UART_Receive_IT>
    memcpy(can_tx_frame.data+1, uart_rx_buffer, can_tx_frame.size-1);
 800062e:	480b      	ldr	r0, [pc, #44]	; (800065c <HAL_UART_RxCpltCallback+0x98>)
 8000630:	4909      	ldr	r1, [pc, #36]	; (8000658 <HAL_UART_RxCpltCallback+0x94>)
 8000632:	88c2      	ldrh	r2, [r0, #6]
 8000634:	3009      	adds	r0, #9
 8000636:	3a01      	subs	r2, #1
 8000638:	f003 fb34 	bl	8003ca4 <memcpy>
 800063c:	e7de      	b.n	80005fc <HAL_UART_RxCpltCallback+0x38>
      uart_rx_data_pending = 1U;
 800063e:	2001      	movs	r0, #1
 8000640:	7020      	strb	r0, [r4, #0]
      can_tx_frame.data[0] = uart_rx_buffer[10];
 8000642:	7a8c      	ldrb	r4, [r1, #10]
 8000644:	721c      	strb	r4, [r3, #8]
}
 8000646:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_UART_Receive_IT(&huart2, uart_rx_buffer, can_tx_frame.size);
 800064a:	4806      	ldr	r0, [pc, #24]	; (8000664 <HAL_UART_RxCpltCallback+0xa0>)
 800064c:	f003 ba44 	b.w	8003ad8 <HAL_UART_Receive_IT>
 8000650:	20000120 	.word	0x20000120
 8000654:	20000078 	.word	0x20000078
 8000658:	20000038 	.word	0x20000038
 800065c:	20000028 	.word	0x20000028
 8000660:	200000bc 	.word	0x200000bc
 8000664:	2000016c 	.word	0x2000016c

08000668 <APP_init>:

void APP_init() {
 8000668:	b570      	push	{r4, r5, r6, lr}
  filter_config.FilterType = FDCAN_FILTER_MASK;
  filter_config.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
  filter_config.FilterID1 = 0U;    // filter
  filter_config.FilterID2 = 0U;    // mask

  HAL_FDCAN_ConfigFilter(&hfdcan1, &filter_config);
 800066a:	4d14      	ldr	r5, [pc, #80]	; (80006bc <APP_init+0x54>)
void APP_init() {
 800066c:	b086      	sub	sp, #24
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_SET);
 800066e:	2201      	movs	r2, #1
 8000670:	2104      	movs	r1, #4
 8000672:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000676:	f001 f897 	bl	80017a8 <HAL_GPIO_WritePin>
  filter_config.IdType = FDCAN_STANDARD_ID;
 800067a:	2400      	movs	r4, #0
  filter_config.FilterType = FDCAN_FILTER_MASK;
 800067c:	2302      	movs	r3, #2
  HAL_FDCAN_ConfigFilter(&hfdcan1, &filter_config);
 800067e:	4669      	mov	r1, sp
  filter_config.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 8000680:	2601      	movs	r6, #1
  HAL_FDCAN_ConfigFilter(&hfdcan1, &filter_config);
 8000682:	4628      	mov	r0, r5
  filter_config.FilterType = FDCAN_FILTER_MASK;
 8000684:	9302      	str	r3, [sp, #8]
  filter_config.FilterIndex = 0U;
 8000686:	e9cd 4400 	strd	r4, r4, [sp]
  filter_config.FilterID1 = 0U;    // filter
 800068a:	e9cd 6403 	strd	r6, r4, [sp, #12]
  filter_config.FilterID2 = 0U;    // mask
 800068e:	9405      	str	r4, [sp, #20]
  HAL_FDCAN_ConfigFilter(&hfdcan1, &filter_config);
 8000690:	f000 fd12 	bl	80010b8 <HAL_FDCAN_ConfigFilter>
  HAL_FDCAN_Start(&hfdcan1);
 8000694:	4628      	mov	r0, r5
 8000696:	f000 fd41 	bl	800111c <HAL_FDCAN_Start>
  HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0);
 800069a:	4622      	mov	r2, r4
 800069c:	4631      	mov	r1, r6
 800069e:	4628      	mov	r0, r5
 80006a0:	f000 fe3e 	bl	8001320 <HAL_FDCAN_ActivateNotification>

  uart_rx_data_pending = 0U;
 80006a4:	4b06      	ldr	r3, [pc, #24]	; (80006c0 <APP_init+0x58>)
  HAL_UART_Receive_IT(&huart2, uart_rx_buffer, 11);
 80006a6:	4907      	ldr	r1, [pc, #28]	; (80006c4 <APP_init+0x5c>)
 80006a8:	4807      	ldr	r0, [pc, #28]	; (80006c8 <APP_init+0x60>)
  uart_rx_data_pending = 0U;
 80006aa:	701c      	strb	r4, [r3, #0]
  HAL_UART_Receive_IT(&huart2, uart_rx_buffer, 11);
 80006ac:	220b      	movs	r2, #11
 80006ae:	f003 fa13 	bl	8003ad8 <HAL_UART_Receive_IT>

  HAL_TIM_Base_Start_IT(&htim2);
 80006b2:	4806      	ldr	r0, [pc, #24]	; (80006cc <APP_init+0x64>)
 80006b4:	f001 fe02 	bl	80022bc <HAL_TIM_Base_Start_IT>
}
 80006b8:	b006      	add	sp, #24
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	200000bc 	.word	0x200000bc
 80006c0:	20000078 	.word	0x20000078
 80006c4:	20000038 	.word	0x20000038
 80006c8:	2000016c 	.word	0x2000016c
 80006cc:	20000120 	.word	0x20000120

080006d0 <APP_main>:

void APP_main() {
  // do nothing in main loop
}
 80006d0:	4770      	bx	lr
 80006d2:	bf00      	nop

080006d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006d4:	b510      	push	{r4, lr}
 80006d6:	b094      	sub	sp, #80	; 0x50
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006d8:	2238      	movs	r2, #56	; 0x38
 80006da:	2100      	movs	r1, #0
 80006dc:	a806      	add	r0, sp, #24
 80006de:	f003 faef 	bl	8003cc0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006e2:	2000      	movs	r0, #0
 80006e4:	e9cd 0001 	strd	r0, r0, [sp, #4]
 80006e8:	e9cd 0003 	strd	r0, r0, [sp, #12]
 80006ec:	9005      	str	r0, [sp, #20]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80006ee:	f001 f861 	bl	80017b4 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006f2:	f44f 7180 	mov.w	r1, #256	; 0x100
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006f6:	2240      	movs	r2, #64	; 0x40
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006f8:	2302      	movs	r3, #2
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006fa:	e9cd 1209 	strd	r1, r2, [sp, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
  RCC_OscInitStruct.PLL.PLLN = 20;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006fe:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8000700:	2101      	movs	r1, #1
  RCC_OscInitStruct.PLL.PLLN = 20;
 8000702:	2214      	movs	r2, #20
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000704:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLN = 20;
 8000708:	e9cd 120f 	strd	r1, r2, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800070c:	e9cd 3311 	strd	r3, r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000710:	9306      	str	r3, [sp, #24]
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000712:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000714:	f001 f8cc 	bl	80018b0 <HAL_RCC_OscConfig>
 8000718:	b108      	cbz	r0, 800071e <SystemClock_Config+0x4a>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800071a:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800071c:	e7fe      	b.n	800071c <SystemClock_Config+0x48>
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800071e:	2104      	movs	r1, #4
 8000720:	4603      	mov	r3, r0
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000722:	240f      	movs	r4, #15
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000724:	2203      	movs	r2, #3
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000726:	eb0d 0001 	add.w	r0, sp, r1
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800072a:	e9cd 4201 	strd	r4, r2, [sp, #4]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800072e:	e9cd 3303 	strd	r3, r3, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000732:	9305      	str	r3, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000734:	f001 fb40 	bl	8001db8 <HAL_RCC_ClockConfig>
 8000738:	b108      	cbz	r0, 800073e <SystemClock_Config+0x6a>
 800073a:	b672      	cpsid	i
  while (1)
 800073c:	e7fe      	b.n	800073c <SystemClock_Config+0x68>
}
 800073e:	b014      	add	sp, #80	; 0x50
 8000740:	bd10      	pop	{r4, pc}
 8000742:	bf00      	nop

08000744 <main>:
{
 8000744:	b500      	push	{lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000746:	2400      	movs	r4, #0
{
 8000748:	b08b      	sub	sp, #44	; 0x2c
  HAL_Init();
 800074a:	f000 fab3 	bl	8000cb4 <HAL_Init>
  SystemClock_Config();
 800074e:	f7ff ffc1 	bl	80006d4 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000752:	e9cd 4405 	strd	r4, r4, [sp, #20]
 8000756:	e9cd 4407 	strd	r4, r4, [sp, #28]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800075a:	4b4d      	ldr	r3, [pc, #308]	; (8000890 <main+0x14c>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800075c:	9409      	str	r4, [sp, #36]	; 0x24
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800075e:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8000760:	f041 0101 	orr.w	r1, r1, #1
 8000764:	64d9      	str	r1, [r3, #76]	; 0x4c
 8000766:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8000768:	f001 0101 	and.w	r1, r1, #1
 800076c:	9100      	str	r1, [sp, #0]
 800076e:	9900      	ldr	r1, [sp, #0]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000770:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8000772:	f041 0102 	orr.w	r1, r1, #2
 8000776:	64d9      	str	r1, [r3, #76]	; 0x4c
 8000778:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800077a:	f003 0302 	and.w	r3, r3, #2
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_RESET);
 800077e:	4622      	mov	r2, r4
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000780:	9301      	str	r3, [sp, #4]
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_RESET);
 8000782:	2104      	movs	r1, #4
 8000784:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000788:	2501      	movs	r5, #1
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800078a:	9b01      	ldr	r3, [sp, #4]
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_RESET);
 800078c:	f001 f80c 	bl	80017a8 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000790:	2304      	movs	r3, #4
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000792:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000796:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000798:	e9cd 3505 	strd	r3, r5, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800079c:	e9cd 4407 	strd	r4, r4, [sp, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007a0:	f000 ff0a 	bl	80015b8 <HAL_GPIO_Init>
  hfdcan1.Instance = FDCAN1;
 80007a4:	483b      	ldr	r0, [pc, #236]	; (8000894 <main+0x150>)
 80007a6:	4b3c      	ldr	r3, [pc, #240]	; (8000898 <main+0x154>)
 80007a8:	6003      	str	r3, [r0, #0]
  hfdcan1.Init.NominalPrescaler = 16;
 80007aa:	2310      	movs	r3, #16
 80007ac:	6143      	str	r3, [r0, #20]
  hfdcan1.Init.NominalTimeSeg1 = 2;
 80007ae:	2302      	movs	r3, #2
 80007b0:	e9c0 5306 	strd	r5, r3, [r0, #24]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 80007b4:	8204      	strh	r4, [r0, #16]
  hfdcan1.Init.NominalTimeSeg2 = 7;
 80007b6:	2307      	movs	r3, #7
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 80007b8:	e9c0 4401 	strd	r4, r4, [r0, #4]
  hfdcan1.Init.DataPrescaler = 1;
 80007bc:	e9c0 3508 	strd	r3, r5, [r0, #32]
  hfdcan1.Init.DataTimeSeg1 = 1;
 80007c0:	e9c0 550a 	strd	r5, r5, [r0, #40]	; 0x28
  hfdcan1.Init.StdFiltersNbr = 0;
 80007c4:	e9c0 540c 	strd	r5, r4, [r0, #48]	; 0x30
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 80007c8:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 80007cc:	60c4      	str	r4, [r0, #12]
  hfdcan1.Init.ProtocolException = DISABLE;
 80007ce:	7484      	strb	r4, [r0, #18]
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 80007d0:	f000 fb84 	bl	8000edc <HAL_FDCAN_Init>
 80007d4:	b108      	cbz	r0, 80007da <main+0x96>
 80007d6:	b672      	cpsid	i
  while (1)
 80007d8:	e7fe      	b.n	80007d8 <main+0x94>
  huart2.Instance = USART2;
 80007da:	4c30      	ldr	r4, [pc, #192]	; (800089c <main+0x158>)
  huart2.Init.BaudRate = 1000000;
 80007dc:	4b30      	ldr	r3, [pc, #192]	; (80008a0 <main+0x15c>)
 80007de:	4d31      	ldr	r5, [pc, #196]	; (80008a4 <main+0x160>)
  huart2.Init.Parity = UART_PARITY_NONE;
 80007e0:	6120      	str	r0, [r4, #16]
  huart2.Init.BaudRate = 1000000;
 80007e2:	e9c4 3500 	strd	r3, r5, [r4]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80007e6:	e9c4 0002 	strd	r0, r0, [r4, #8]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80007ea:	e9c4 0006 	strd	r0, r0, [r4, #24]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80007ee:	e9c4 0008 	strd	r0, r0, [r4, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007f2:	62a0      	str	r0, [r4, #40]	; 0x28
  huart2.Init.Mode = UART_MODE_TX_RX;
 80007f4:	230c      	movs	r3, #12
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80007f6:	4620      	mov	r0, r4
  huart2.Init.Mode = UART_MODE_TX_RX;
 80007f8:	6163      	str	r3, [r4, #20]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80007fa:	f003 f889 	bl	8003910 <HAL_UART_Init>
 80007fe:	b108      	cbz	r0, 8000804 <main+0xc0>
 8000800:	b672      	cpsid	i
  while (1)
 8000802:	e7fe      	b.n	8000802 <main+0xbe>
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000804:	4601      	mov	r1, r0
 8000806:	4620      	mov	r0, r4
 8000808:	f003 f9d4 	bl	8003bb4 <HAL_UARTEx_SetTxFifoThreshold>
 800080c:	b108      	cbz	r0, 8000812 <main+0xce>
 800080e:	b672      	cpsid	i
  while (1)
 8000810:	e7fe      	b.n	8000810 <main+0xcc>
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000812:	4601      	mov	r1, r0
 8000814:	4620      	mov	r0, r4
 8000816:	f003 f9f7 	bl	8003c08 <HAL_UARTEx_SetRxFifoThreshold>
 800081a:	b108      	cbz	r0, 8000820 <main+0xdc>
 800081c:	b672      	cpsid	i
  while (1)
 800081e:	e7fe      	b.n	800081e <main+0xda>
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000820:	4620      	mov	r0, r4
 8000822:	f003 f9a9 	bl	8003b78 <HAL_UARTEx_DisableFifoMode>
 8000826:	4603      	mov	r3, r0
 8000828:	b108      	cbz	r0, 800082e <main+0xea>
 800082a:	b672      	cpsid	i
  while (1)
 800082c:	e7fe      	b.n	800082c <main+0xe8>
  htim2.Instance = TIM2;
 800082e:	4c1e      	ldr	r4, [pc, #120]	; (80008a8 <main+0x164>)
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000830:	9002      	str	r0, [sp, #8]
  htim2.Instance = TIM2;
 8000832:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000836:	e9cd 0005 	strd	r0, r0, [sp, #20]
 800083a:	e9cd 0007 	strd	r0, r0, [sp, #28]
  htim2.Instance = TIM2;
 800083e:	6022      	str	r2, [r4, #0]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000840:	4620      	mov	r0, r4
  htim2.Init.Prescaler = 159;
 8000842:	229f      	movs	r2, #159	; 0x9f
  htim2.Init.Period = 1000000;
 8000844:	e9c4 3502 	strd	r3, r5, [r4, #8]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000848:	e9cd 3303 	strd	r3, r3, [sp, #12]
  htim2.Init.Prescaler = 159;
 800084c:	6062      	str	r2, [r4, #4]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800084e:	6123      	str	r3, [r4, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000850:	61a3      	str	r3, [r4, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000852:	f001 ffab 	bl	80027ac <HAL_TIM_Base_Init>
 8000856:	b108      	cbz	r0, 800085c <main+0x118>
 8000858:	b672      	cpsid	i
  while (1)
 800085a:	e7fe      	b.n	800085a <main+0x116>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800085c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000860:	a905      	add	r1, sp, #20
 8000862:	4620      	mov	r0, r4
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000864:	9305      	str	r3, [sp, #20]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000866:	f001 fd63 	bl	8002330 <HAL_TIM_ConfigClockSource>
 800086a:	4603      	mov	r3, r0
 800086c:	b108      	cbz	r0, 8000872 <main+0x12e>
 800086e:	b672      	cpsid	i
  while (1)
 8000870:	e7fe      	b.n	8000870 <main+0x12c>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000872:	a902      	add	r1, sp, #8
 8000874:	4620      	mov	r0, r4
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000876:	9302      	str	r3, [sp, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000878:	9304      	str	r3, [sp, #16]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800087a:	f001 ffc9 	bl	8002810 <HAL_TIMEx_MasterConfigSynchronization>
 800087e:	b108      	cbz	r0, 8000884 <main+0x140>
 8000880:	b672      	cpsid	i
  while (1)
 8000882:	e7fe      	b.n	8000882 <main+0x13e>
  APP_init();
 8000884:	f7ff fef0 	bl	8000668 <APP_init>
    APP_main();
 8000888:	f7ff ff22 	bl	80006d0 <APP_main>
  while (1)
 800088c:	e7fc      	b.n	8000888 <main+0x144>
 800088e:	bf00      	nop
 8000890:	40021000 	.word	0x40021000
 8000894:	200000bc 	.word	0x200000bc
 8000898:	40006400 	.word	0x40006400
 800089c:	2000016c 	.word	0x2000016c
 80008a0:	40004400 	.word	0x40004400
 80008a4:	000f4240 	.word	0x000f4240
 80008a8:	20000120 	.word	0x20000120

080008ac <Error_Handler>:
 80008ac:	b672      	cpsid	i
  while (1)
 80008ae:	e7fe      	b.n	80008ae <Error_Handler+0x2>

080008b0 <CAN_getRxFrame>:
 */

#include "rath_can.h"


void CAN_getRxFrame(FDCAN_HandleTypeDef *hcan, CAN_Frame *rx_frame) {
 80008b0:	b510      	push	{r4, lr}
 80008b2:	b08a      	sub	sp, #40	; 0x28
 80008b4:	460c      	mov	r4, r1
  FDCAN_RxHeaderTypeDef rx_header;
  HAL_FDCAN_GetRxMessage(hcan, FDCAN_RX_FIFO0, &rx_header, rx_frame->data);
 80008b6:	f101 0308 	add.w	r3, r1, #8
 80008ba:	466a      	mov	r2, sp
 80008bc:	2140      	movs	r1, #64	; 0x40
 80008be:	f000 fcab 	bl	8001218 <HAL_FDCAN_GetRxMessage>

  rx_frame->id = rx_header.Identifier;
  rx_frame->id_type = (rx_header.IdType == FDCAN_STANDARD_ID) ? CAN_ID_STANDARD : CAN_ID_EXTENDED;
 80008c2:	e9dd 1201 	ldrd	r1, r2, [sp, #4]
  rx_frame->frame_type = (rx_header.RxFrameType == FDCAN_DATA_FRAME) ? CAN_FRAME_DATA : CAN_FRAME_REMOTE;
  switch (rx_header.DataLength) {
 80008c6:	9b03      	ldr	r3, [sp, #12]
  rx_frame->id = rx_header.Identifier;
 80008c8:	9800      	ldr	r0, [sp, #0]
 80008ca:	6020      	str	r0, [r4, #0]
  rx_frame->id_type = (rx_header.IdType == FDCAN_STANDARD_ID) ? CAN_ID_STANDARD : CAN_ID_EXTENDED;
 80008cc:	3900      	subs	r1, #0
  rx_frame->frame_type = (rx_header.RxFrameType == FDCAN_DATA_FRAME) ? CAN_FRAME_DATA : CAN_FRAME_REMOTE;
 80008ce:	fab2 f282 	clz	r2, r2
  rx_frame->id_type = (rx_header.IdType == FDCAN_STANDARD_ID) ? CAN_ID_STANDARD : CAN_ID_EXTENDED;
 80008d2:	bf18      	it	ne
 80008d4:	2101      	movne	r1, #1
  rx_frame->frame_type = (rx_header.RxFrameType == FDCAN_DATA_FRAME) ? CAN_FRAME_DATA : CAN_FRAME_REMOTE;
 80008d6:	0952      	lsrs	r2, r2, #5
  switch (rx_header.DataLength) {
 80008d8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
  rx_frame->id_type = (rx_header.IdType == FDCAN_STANDARD_ID) ? CAN_ID_STANDARD : CAN_ID_EXTENDED;
 80008dc:	7121      	strb	r1, [r4, #4]
  rx_frame->frame_type = (rx_header.RxFrameType == FDCAN_DATA_FRAME) ? CAN_FRAME_DATA : CAN_FRAME_REMOTE;
 80008de:	7162      	strb	r2, [r4, #5]
  switch (rx_header.DataLength) {
 80008e0:	d036      	beq.n	8000950 <CAN_getRxFrame+0xa0>
 80008e2:	d814      	bhi.n	800090e <CAN_getRxFrame+0x5e>
 80008e4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80008e8:	d026      	beq.n	8000938 <CAN_getRxFrame+0x88>
 80008ea:	d906      	bls.n	80008fa <CAN_getRxFrame+0x4a>
 80008ec:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80008f0:	d11e      	bne.n	8000930 <CAN_getRxFrame+0x80>
    case FDCAN_DLC_BYTES_2:
      rx_frame->size = 2; break;
    case FDCAN_DLC_BYTES_3:
      rx_frame->size = 3; break;
    case FDCAN_DLC_BYTES_4:
      rx_frame->size = 4; break;
 80008f2:	2304      	movs	r3, #4
 80008f4:	80e3      	strh	r3, [r4, #6]
    case FDCAN_DLC_BYTES_8:
      rx_frame->size = 8; break;
    default:
      rx_frame->size = 0;
  }
}
 80008f6:	b00a      	add	sp, #40	; 0x28
 80008f8:	bd10      	pop	{r4, pc}
  switch (rx_header.DataLength) {
 80008fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80008fe:	d01f      	beq.n	8000940 <CAN_getRxFrame+0x90>
 8000900:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8000904:	d114      	bne.n	8000930 <CAN_getRxFrame+0x80>
      rx_frame->size = 2; break;
 8000906:	2302      	movs	r3, #2
 8000908:	80e3      	strh	r3, [r4, #6]
}
 800090a:	b00a      	add	sp, #40	; 0x28
 800090c:	bd10      	pop	{r4, pc}
  switch (rx_header.DataLength) {
 800090e:	f5b3 2fe0 	cmp.w	r3, #458752	; 0x70000
 8000912:	d019      	beq.n	8000948 <CAN_getRxFrame+0x98>
 8000914:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8000918:	d103      	bne.n	8000922 <CAN_getRxFrame+0x72>
      rx_frame->size = 8; break;
 800091a:	2308      	movs	r3, #8
 800091c:	80e3      	strh	r3, [r4, #6]
}
 800091e:	b00a      	add	sp, #40	; 0x28
 8000920:	bd10      	pop	{r4, pc}
  switch (rx_header.DataLength) {
 8000922:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 8000926:	d103      	bne.n	8000930 <CAN_getRxFrame+0x80>
      rx_frame->size = 6; break;
 8000928:	2306      	movs	r3, #6
 800092a:	80e3      	strh	r3, [r4, #6]
}
 800092c:	b00a      	add	sp, #40	; 0x28
 800092e:	bd10      	pop	{r4, pc}
      rx_frame->size = 0; break;
 8000930:	2300      	movs	r3, #0
 8000932:	80e3      	strh	r3, [r4, #6]
}
 8000934:	b00a      	add	sp, #40	; 0x28
 8000936:	bd10      	pop	{r4, pc}
      rx_frame->size = 3; break;
 8000938:	2303      	movs	r3, #3
 800093a:	80e3      	strh	r3, [r4, #6]
}
 800093c:	b00a      	add	sp, #40	; 0x28
 800093e:	bd10      	pop	{r4, pc}
      rx_frame->size = 1; break;
 8000940:	2301      	movs	r3, #1
 8000942:	80e3      	strh	r3, [r4, #6]
}
 8000944:	b00a      	add	sp, #40	; 0x28
 8000946:	bd10      	pop	{r4, pc}
      rx_frame->size = 7; break;
 8000948:	2307      	movs	r3, #7
 800094a:	80e3      	strh	r3, [r4, #6]
}
 800094c:	b00a      	add	sp, #40	; 0x28
 800094e:	bd10      	pop	{r4, pc}
      rx_frame->size = 5; break;
 8000950:	2305      	movs	r3, #5
 8000952:	80e3      	strh	r3, [r4, #6]
}
 8000954:	b00a      	add	sp, #40	; 0x28
 8000956:	bd10      	pop	{r4, pc}

08000958 <CAN_putTxFrame>:

HAL_StatusTypeDef CAN_putTxFrame(FDCAN_HandleTypeDef *hcan, CAN_Frame *tx_frame) {
 8000958:	b530      	push	{r4, r5, lr}
  FDCAN_TxHeaderTypeDef tx_header;

  tx_header.Identifier = tx_frame->id;
  tx_header.IdType = (tx_frame->id_type == CAN_ID_STANDARD) ? FDCAN_STANDARD_ID : FDCAN_EXTENDED_ID;
 800095a:	790b      	ldrb	r3, [r1, #4]
  tx_header.TxFrameType = (tx_frame->frame_type == CAN_FRAME_DATA) ? FDCAN_DATA_FRAME : FDCAN_REMOTE_FRAME;
 800095c:	794c      	ldrb	r4, [r1, #5]
  tx_header.IdType = (tx_frame->id_type == CAN_ID_STANDARD) ? FDCAN_STANDARD_ID : FDCAN_EXTENDED_ID;
 800095e:	2b00      	cmp	r3, #0
  switch (tx_frame->size) {
 8000960:	88cb      	ldrh	r3, [r1, #6]
HAL_StatusTypeDef CAN_putTxFrame(FDCAN_HandleTypeDef *hcan, CAN_Frame *tx_frame) {
 8000962:	b08b      	sub	sp, #44	; 0x2c
  tx_header.IdType = (tx_frame->id_type == CAN_ID_STANDARD) ? FDCAN_STANDARD_ID : FDCAN_EXTENDED_ID;
 8000964:	bf0c      	ite	eq
 8000966:	2200      	moveq	r2, #0
 8000968:	f04f 4280 	movne.w	r2, #1073741824	; 0x40000000
  tx_header.TxFrameType = (tx_frame->frame_type == CAN_FRAME_DATA) ? FDCAN_DATA_FRAME : FDCAN_REMOTE_FRAME;
 800096c:	2c01      	cmp	r4, #1
  tx_header.Identifier = tx_frame->id;
 800096e:	680c      	ldr	r4, [r1, #0]
  tx_header.TxFrameType = (tx_frame->frame_type == CAN_FRAME_DATA) ? FDCAN_DATA_FRAME : FDCAN_REMOTE_FRAME;
 8000970:	bf0c      	ite	eq
 8000972:	2500      	moveq	r5, #0
 8000974:	f04f 5500 	movne.w	r5, #536870912	; 0x20000000
  switch (tx_frame->size) {
 8000978:	3b01      	subs	r3, #1
  tx_header.IdType = (tx_frame->id_type == CAN_ID_STANDARD) ? FDCAN_STANDARD_ID : FDCAN_EXTENDED_ID;
 800097a:	e9cd 4201 	strd	r4, r2, [sp, #4]
  tx_header.TxFrameType = (tx_frame->frame_type == CAN_FRAME_DATA) ? FDCAN_DATA_FRAME : FDCAN_REMOTE_FRAME;
 800097e:	9503      	str	r5, [sp, #12]
  switch (tx_frame->size) {
 8000980:	2b07      	cmp	r3, #7
 8000982:	d833      	bhi.n	80009ec <CAN_putTxFrame+0x94>
 8000984:	e8df f003 	tbb	[pc, r3]
 8000988:	221e1a16 	.word	0x221e1a16
 800098c:	042e2a26 	.word	0x042e2a26
    case 6:
      tx_header.DataLength = FDCAN_DLC_BYTES_6; break;
    case 7:
      tx_header.DataLength = FDCAN_DLC_BYTES_7; break;
    case 8:
      tx_header.DataLength = FDCAN_DLC_BYTES_8; break;
 8000990:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8000994:	9304      	str	r3, [sp, #16]
    default:
      tx_header.DataLength = FDCAN_DLC_BYTES_0;
  }
  tx_header.ErrorStateIndicator = FDCAN_ESI_PASSIVE;
  tx_header.BitRateSwitch = FDCAN_BRS_OFF;
 8000996:	2300      	movs	r3, #0
  tx_header.FDFormat = FDCAN_CLASSIC_CAN;
  tx_header.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
  tx_header.MessageMarker = 0;

  return HAL_FDCAN_AddMessageToTxFifoQ(hcan, &tx_header, tx_frame->data);
 8000998:	f101 0208 	add.w	r2, r1, #8
  tx_header.ErrorStateIndicator = FDCAN_ESI_PASSIVE;
 800099c:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
  return HAL_FDCAN_AddMessageToTxFifoQ(hcan, &tx_header, tx_frame->data);
 80009a0:	a901      	add	r1, sp, #4
  tx_header.BitRateSwitch = FDCAN_BRS_OFF;
 80009a2:	e9cd 4305 	strd	r4, r3, [sp, #20]
  tx_header.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 80009a6:	e9cd 3307 	strd	r3, r3, [sp, #28]
  tx_header.MessageMarker = 0;
 80009aa:	9309      	str	r3, [sp, #36]	; 0x24
  return HAL_FDCAN_AddMessageToTxFifoQ(hcan, &tx_header, tx_frame->data);
 80009ac:	f000 fbce 	bl	800114c <HAL_FDCAN_AddMessageToTxFifoQ>
}
 80009b0:	b00b      	add	sp, #44	; 0x2c
 80009b2:	bd30      	pop	{r4, r5, pc}
      tx_header.DataLength = FDCAN_DLC_BYTES_1; break;
 80009b4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80009b8:	9304      	str	r3, [sp, #16]
 80009ba:	e7ec      	b.n	8000996 <CAN_putTxFrame+0x3e>
      tx_header.DataLength = FDCAN_DLC_BYTES_2; break;
 80009bc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80009c0:	9304      	str	r3, [sp, #16]
 80009c2:	e7e8      	b.n	8000996 <CAN_putTxFrame+0x3e>
      tx_header.DataLength = FDCAN_DLC_BYTES_3; break;
 80009c4:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 80009c8:	9304      	str	r3, [sp, #16]
 80009ca:	e7e4      	b.n	8000996 <CAN_putTxFrame+0x3e>
      tx_header.DataLength = FDCAN_DLC_BYTES_4; break;
 80009cc:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80009d0:	9304      	str	r3, [sp, #16]
 80009d2:	e7e0      	b.n	8000996 <CAN_putTxFrame+0x3e>
      tx_header.DataLength = FDCAN_DLC_BYTES_5; break;
 80009d4:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80009d8:	9304      	str	r3, [sp, #16]
 80009da:	e7dc      	b.n	8000996 <CAN_putTxFrame+0x3e>
      tx_header.DataLength = FDCAN_DLC_BYTES_6; break;
 80009dc:	f44f 23c0 	mov.w	r3, #393216	; 0x60000
 80009e0:	9304      	str	r3, [sp, #16]
 80009e2:	e7d8      	b.n	8000996 <CAN_putTxFrame+0x3e>
      tx_header.DataLength = FDCAN_DLC_BYTES_7; break;
 80009e4:	f44f 23e0 	mov.w	r3, #458752	; 0x70000
 80009e8:	9304      	str	r3, [sp, #16]
 80009ea:	e7d4      	b.n	8000996 <CAN_putTxFrame+0x3e>
      tx_header.DataLength = FDCAN_DLC_BYTES_0; break;
 80009ec:	2300      	movs	r3, #0
 80009ee:	9304      	str	r3, [sp, #16]
 80009f0:	e7d1      	b.n	8000996 <CAN_putTxFrame+0x3e>
 80009f2:	bf00      	nop

080009f4 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009f4:	4b0a      	ldr	r3, [pc, #40]	; (8000a20 <HAL_MspInit+0x2c>)
 80009f6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80009f8:	f042 0201 	orr.w	r2, r2, #1
 80009fc:	661a      	str	r2, [r3, #96]	; 0x60
 80009fe:	6e1a      	ldr	r2, [r3, #96]	; 0x60
{
 8000a00:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a02:	f002 0201 	and.w	r2, r2, #1
 8000a06:	9200      	str	r2, [sp, #0]
 8000a08:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a0a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000a0c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000a10:	659a      	str	r2, [r3, #88]	; 0x58
 8000a12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a14:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a18:	9301      	str	r3, [sp, #4]
 8000a1a:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a1c:	b002      	add	sp, #8
 8000a1e:	4770      	bx	lr
 8000a20:	40021000 	.word	0x40021000

08000a24 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8000a24:	b530      	push	{r4, r5, lr}
 8000a26:	4604      	mov	r4, r0
 8000a28:	b099      	sub	sp, #100	; 0x64
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a2a:	2100      	movs	r1, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a2c:	2244      	movs	r2, #68	; 0x44
 8000a2e:	a807      	add	r0, sp, #28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a30:	e9cd 1102 	strd	r1, r1, [sp, #8]
 8000a34:	e9cd 1104 	strd	r1, r1, [sp, #16]
 8000a38:	9106      	str	r1, [sp, #24]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a3a:	f003 f941 	bl	8003cc0 <memset>
  if(hfdcan->Instance==FDCAN1)
 8000a3e:	4b24      	ldr	r3, [pc, #144]	; (8000ad0 <HAL_FDCAN_MspInit+0xac>)
 8000a40:	6822      	ldr	r2, [r4, #0]
 8000a42:	429a      	cmp	r2, r3
 8000a44:	d001      	beq.n	8000a4a <HAL_FDCAN_MspInit+0x26>
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }

}
 8000a46:	b019      	add	sp, #100	; 0x64
 8000a48:	bd30      	pop	{r4, r5, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8000a4a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 8000a4e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a52:	a807      	add	r0, sp, #28
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8000a54:	9207      	str	r2, [sp, #28]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 8000a56:	9313      	str	r3, [sp, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a58:	f001 fae4 	bl	8002024 <HAL_RCCEx_PeriphCLKConfig>
 8000a5c:	2800      	cmp	r0, #0
 8000a5e:	d133      	bne.n	8000ac8 <HAL_FDCAN_MspInit+0xa4>
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8000a60:	4b1c      	ldr	r3, [pc, #112]	; (8000ad4 <HAL_FDCAN_MspInit+0xb0>)
 8000a62:	6d99      	ldr	r1, [r3, #88]	; 0x58
 8000a64:	f041 7100 	orr.w	r1, r1, #33554432	; 0x2000000
 8000a68:	6599      	str	r1, [r3, #88]	; 0x58
 8000a6a:	6d9c      	ldr	r4, [r3, #88]	; 0x58
 8000a6c:	f004 7400 	and.w	r4, r4, #33554432	; 0x2000000
 8000a70:	9400      	str	r4, [sp, #0]
 8000a72:	9c00      	ldr	r4, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a74:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8000a76:	f044 0401 	orr.w	r4, r4, #1
 8000a7a:	64dc      	str	r4, [r3, #76]	; 0x4c
 8000a7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a7e:	f003 0301 	and.w	r3, r3, #1
 8000a82:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000a84:	f44f 54c0 	mov.w	r4, #6144	; 0x1800
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a88:	2302      	movs	r3, #2
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a8a:	2200      	movs	r2, #0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a8c:	e9cd 4302 	strd	r4, r3, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a90:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8000a92:	2309      	movs	r3, #9
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a94:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8000a98:	e9cd 2305 	strd	r2, r3, [sp, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a9c:	9204      	str	r2, [sp, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a9e:	9d01      	ldr	r5, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000aa0:	f000 fd8a 	bl	80015b8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 0, 0);
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	4611      	mov	r1, r2
 8000aa8:	2015      	movs	r0, #21
 8000aaa:	f000 f937 	bl	8000d1c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 8000aae:	2015      	movs	r0, #21
 8000ab0:	f000 f972 	bl	8000d98 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(FDCAN1_IT1_IRQn, 0, 0);
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	4611      	mov	r1, r2
 8000ab8:	2016      	movs	r0, #22
 8000aba:	f000 f92f 	bl	8000d1c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT1_IRQn);
 8000abe:	2016      	movs	r0, #22
 8000ac0:	f000 f96a 	bl	8000d98 <HAL_NVIC_EnableIRQ>
}
 8000ac4:	b019      	add	sp, #100	; 0x64
 8000ac6:	bd30      	pop	{r4, r5, pc}
      Error_Handler();
 8000ac8:	f7ff fef0 	bl	80008ac <Error_Handler>
 8000acc:	e7c8      	b.n	8000a60 <HAL_FDCAN_MspInit+0x3c>
 8000ace:	bf00      	nop
 8000ad0:	40006400 	.word	0x40006400
 8000ad4:	40021000 	.word	0x40021000

08000ad8 <HAL_TIM_Base_MspInit>:
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
  if(htim_base->Instance==TIM2)
 8000ad8:	6803      	ldr	r3, [r0, #0]
 8000ada:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000ade:	d000      	beq.n	8000ae2 <HAL_TIM_Base_MspInit+0xa>
 8000ae0:	4770      	bx	lr
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000ae2:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
{
 8000ae6:	b500      	push	{lr}
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000ae8:	6d99      	ldr	r1, [r3, #88]	; 0x58
 8000aea:	f041 0101 	orr.w	r1, r1, #1
 8000aee:	6599      	str	r1, [r3, #88]	; 0x58
 8000af0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
{
 8000af2:	b083      	sub	sp, #12
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000af4:	2200      	movs	r2, #0
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000af6:	f003 0301 	and.w	r3, r3, #1
 8000afa:	9301      	str	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000afc:	201c      	movs	r0, #28
 8000afe:	4611      	mov	r1, r2
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000b00:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000b02:	f000 f90b 	bl	8000d1c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000b06:	201c      	movs	r0, #28
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000b08:	b003      	add	sp, #12
 8000b0a:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000b0e:	f000 b943 	b.w	8000d98 <HAL_NVIC_EnableIRQ>
 8000b12:	bf00      	nop

08000b14 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b14:	b530      	push	{r4, r5, lr}
 8000b16:	4604      	mov	r4, r0
 8000b18:	b099      	sub	sp, #100	; 0x64
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b1a:	2100      	movs	r1, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000b1c:	2244      	movs	r2, #68	; 0x44
 8000b1e:	a807      	add	r0, sp, #28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b20:	e9cd 1102 	strd	r1, r1, [sp, #8]
 8000b24:	e9cd 1104 	strd	r1, r1, [sp, #16]
 8000b28:	9106      	str	r1, [sp, #24]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000b2a:	f003 f8c9 	bl	8003cc0 <memset>
  if(huart->Instance==USART2)
 8000b2e:	4b1c      	ldr	r3, [pc, #112]	; (8000ba0 <HAL_UART_MspInit+0x8c>)
 8000b30:	6822      	ldr	r2, [r4, #0]
 8000b32:	429a      	cmp	r2, r3
 8000b34:	d001      	beq.n	8000b3a <HAL_UART_MspInit+0x26>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000b36:	b019      	add	sp, #100	; 0x64
 8000b38:	bd30      	pop	{r4, r5, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000b3a:	2302      	movs	r3, #2
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b3c:	a807      	add	r0, sp, #28
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000b3e:	9307      	str	r3, [sp, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b40:	f001 fa70 	bl	8002024 <HAL_RCCEx_PeriphCLKConfig>
 8000b44:	bb48      	cbnz	r0, 8000b9a <HAL_UART_MspInit+0x86>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000b46:	4b17      	ldr	r3, [pc, #92]	; (8000ba4 <HAL_UART_MspInit+0x90>)
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b48:	4817      	ldr	r0, [pc, #92]	; (8000ba8 <HAL_UART_MspInit+0x94>)
    __HAL_RCC_USART2_CLK_ENABLE();
 8000b4a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000b4c:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8000b50:	659a      	str	r2, [r3, #88]	; 0x58
 8000b52:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000b54:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8000b58:	9200      	str	r2, [sp, #0]
 8000b5a:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b5c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000b5e:	f042 0202 	orr.w	r2, r2, #2
 8000b62:	64da      	str	r2, [r3, #76]	; 0x4c
 8000b64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b66:	f003 0302 	and.w	r3, r3, #2
 8000b6a:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8000b6c:	2218      	movs	r2, #24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b6e:	2302      	movs	r3, #2
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b70:	2400      	movs	r4, #0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b72:	e9cd 2302 	strd	r2, r3, [sp, #8]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b76:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000b78:	2307      	movs	r3, #7
 8000b7a:	e9cd 4305 	strd	r4, r3, [sp, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b7e:	9d01      	ldr	r5, [sp, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b80:	9404      	str	r4, [sp, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b82:	f000 fd19 	bl	80015b8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000b86:	4622      	mov	r2, r4
 8000b88:	4621      	mov	r1, r4
 8000b8a:	2026      	movs	r0, #38	; 0x26
 8000b8c:	f000 f8c6 	bl	8000d1c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000b90:	2026      	movs	r0, #38	; 0x26
 8000b92:	f000 f901 	bl	8000d98 <HAL_NVIC_EnableIRQ>
}
 8000b96:	b019      	add	sp, #100	; 0x64
 8000b98:	bd30      	pop	{r4, r5, pc}
      Error_Handler();
 8000b9a:	f7ff fe87 	bl	80008ac <Error_Handler>
 8000b9e:	e7d2      	b.n	8000b46 <HAL_UART_MspInit+0x32>
 8000ba0:	40004400 	.word	0x40004400
 8000ba4:	40021000 	.word	0x40021000
 8000ba8:	48000400 	.word	0x48000400

08000bac <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000bac:	e7fe      	b.n	8000bac <NMI_Handler>
 8000bae:	bf00      	nop

08000bb0 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bb0:	e7fe      	b.n	8000bb0 <HardFault_Handler>
 8000bb2:	bf00      	nop

08000bb4 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bb4:	e7fe      	b.n	8000bb4 <MemManage_Handler>
 8000bb6:	bf00      	nop

08000bb8 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bb8:	e7fe      	b.n	8000bb8 <BusFault_Handler>
 8000bba:	bf00      	nop

08000bbc <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bbc:	e7fe      	b.n	8000bbc <UsageFault_Handler>
 8000bbe:	bf00      	nop

08000bc0 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000bc0:	4770      	bx	lr
 8000bc2:	bf00      	nop

08000bc4 <DebugMon_Handler>:
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <PendSV_Handler>:
 8000bc8:	4770      	bx	lr
 8000bca:	bf00      	nop

08000bcc <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bcc:	f000 b882 	b.w	8000cd4 <HAL_IncTick>

08000bd0 <FDCAN1_IT0_IRQHandler>:
void FDCAN1_IT0_IRQHandler(void)
{
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8000bd0:	4801      	ldr	r0, [pc, #4]	; (8000bd8 <FDCAN1_IT0_IRQHandler+0x8>)
 8000bd2:	f000 bc2d 	b.w	8001430 <HAL_FDCAN_IRQHandler>
 8000bd6:	bf00      	nop
 8000bd8:	200000bc 	.word	0x200000bc

08000bdc <FDCAN1_IT1_IRQHandler>:
 8000bdc:	4801      	ldr	r0, [pc, #4]	; (8000be4 <FDCAN1_IT1_IRQHandler+0x8>)
 8000bde:	f000 bc27 	b.w	8001430 <HAL_FDCAN_IRQHandler>
 8000be2:	bf00      	nop
 8000be4:	200000bc 	.word	0x200000bc

08000be8 <TIM2_IRQHandler>:
void TIM2_IRQHandler(void)
{
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000be8:	4801      	ldr	r0, [pc, #4]	; (8000bf0 <TIM2_IRQHandler+0x8>)
 8000bea:	f001 bc7d 	b.w	80024e8 <HAL_TIM_IRQHandler>
 8000bee:	bf00      	nop
 8000bf0:	20000120 	.word	0x20000120

08000bf4 <USART2_IRQHandler>:
void USART2_IRQHandler(void)
{
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000bf4:	4801      	ldr	r0, [pc, #4]	; (8000bfc <USART2_IRQHandler+0x8>)
 8000bf6:	f002 b845 	b.w	8002c84 <HAL_UART_IRQHandler>
 8000bfa:	bf00      	nop
 8000bfc:	2000016c 	.word	0x2000016c

08000c00 <SystemInit>:

void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000c00:	4a03      	ldr	r2, [pc, #12]	; (8000c10 <SystemInit+0x10>)
 8000c02:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8000c06:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c0a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c0e:	4770      	bx	lr
 8000c10:	e000ed00 	.word	0xe000ed00

08000c14 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000c14:	480d      	ldr	r0, [pc, #52]	; (8000c4c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000c16:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c18:	480d      	ldr	r0, [pc, #52]	; (8000c50 <LoopForever+0x6>)
  ldr r1, =_edata
 8000c1a:	490e      	ldr	r1, [pc, #56]	; (8000c54 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000c1c:	4a0e      	ldr	r2, [pc, #56]	; (8000c58 <LoopForever+0xe>)
  movs r3, #0
 8000c1e:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000c20:	e002      	b.n	8000c28 <LoopCopyDataInit>

08000c22 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c22:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c24:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c26:	3304      	adds	r3, #4

08000c28 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c28:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c2a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c2c:	d3f9      	bcc.n	8000c22 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c2e:	4a0b      	ldr	r2, [pc, #44]	; (8000c5c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000c30:	4c0b      	ldr	r4, [pc, #44]	; (8000c60 <LoopForever+0x16>)
  movs r3, #0
 8000c32:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c34:	e001      	b.n	8000c3a <LoopFillZerobss>

08000c36 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c36:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c38:	3204      	adds	r2, #4

08000c3a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c3a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c3c:	d3fb      	bcc.n	8000c36 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000c3e:	f7ff ffdf 	bl	8000c00 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000c42:	f003 f80b 	bl	8003c5c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000c46:	f7ff fd7d 	bl	8000744 <main>

08000c4a <LoopForever>:

LoopForever:
    b LoopForever
 8000c4a:	e7fe      	b.n	8000c4a <LoopForever>
  ldr   r0, =_estack
 8000c4c:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8000c50:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c54:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000c58:	08003d5c 	.word	0x08003d5c
  ldr r2, =_sbss
 8000c5c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000c60:	20000200 	.word	0x20000200

08000c64 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000c64:	e7fe      	b.n	8000c64 <ADC1_2_IRQHandler>
	...

08000c68 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c68:	b538      	push	{r3, r4, r5, lr}
  HAL_StatusTypeDef  status = HAL_OK;

  if (uwTickFreq != 0U)
 8000c6a:	4b0f      	ldr	r3, [pc, #60]	; (8000ca8 <HAL_InitTick+0x40>)
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	b90b      	cbnz	r3, 8000c74 <HAL_InitTick+0xc>
      status = HAL_ERROR;
    }
  }
  else
  {
    status = HAL_ERROR;
 8000c70:	2001      	movs	r0, #1
  }

  /* Return function status */
  return status;
}
 8000c72:	bd38      	pop	{r3, r4, r5, pc}
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000c74:	490d      	ldr	r1, [pc, #52]	; (8000cac <HAL_InitTick+0x44>)
 8000c76:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000c7a:	4605      	mov	r5, r0
 8000c7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c80:	6808      	ldr	r0, [r1, #0]
 8000c82:	fbb0 f0f3 	udiv	r0, r0, r3
 8000c86:	f000 f895 	bl	8000db4 <HAL_SYSTICK_Config>
 8000c8a:	4604      	mov	r4, r0
 8000c8c:	2800      	cmp	r0, #0
 8000c8e:	d1ef      	bne.n	8000c70 <HAL_InitTick+0x8>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c90:	2d0f      	cmp	r5, #15
 8000c92:	d8ed      	bhi.n	8000c70 <HAL_InitTick+0x8>
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c94:	4602      	mov	r2, r0
 8000c96:	4629      	mov	r1, r5
 8000c98:	f04f 30ff 	mov.w	r0, #4294967295
 8000c9c:	f000 f83e 	bl	8000d1c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000ca0:	4b03      	ldr	r3, [pc, #12]	; (8000cb0 <HAL_InitTick+0x48>)
 8000ca2:	4620      	mov	r0, r4
 8000ca4:	601d      	str	r5, [r3, #0]
}
 8000ca6:	bd38      	pop	{r3, r4, r5, pc}
 8000ca8:	20000004 	.word	0x20000004
 8000cac:	20000000 	.word	0x20000000
 8000cb0:	20000008 	.word	0x20000008

08000cb4 <HAL_Init>:
{
 8000cb4:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000cb6:	2003      	movs	r0, #3
 8000cb8:	f000 f81e 	bl	8000cf8 <HAL_NVIC_SetPriorityGrouping>
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000cbc:	200f      	movs	r0, #15
 8000cbe:	f7ff ffd3 	bl	8000c68 <HAL_InitTick>
 8000cc2:	b110      	cbz	r0, 8000cca <HAL_Init+0x16>
    status = HAL_ERROR;
 8000cc4:	2401      	movs	r4, #1
}
 8000cc6:	4620      	mov	r0, r4
 8000cc8:	bd10      	pop	{r4, pc}
 8000cca:	4604      	mov	r4, r0
    HAL_MspInit();
 8000ccc:	f7ff fe92 	bl	80009f4 <HAL_MspInit>
}
 8000cd0:	4620      	mov	r0, r4
 8000cd2:	bd10      	pop	{r4, pc}

08000cd4 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000cd4:	4a03      	ldr	r2, [pc, #12]	; (8000ce4 <HAL_IncTick+0x10>)
 8000cd6:	4904      	ldr	r1, [pc, #16]	; (8000ce8 <HAL_IncTick+0x14>)
 8000cd8:	6813      	ldr	r3, [r2, #0]
 8000cda:	6809      	ldr	r1, [r1, #0]
 8000cdc:	440b      	add	r3, r1
 8000cde:	6013      	str	r3, [r2, #0]
}
 8000ce0:	4770      	bx	lr
 8000ce2:	bf00      	nop
 8000ce4:	200001fc 	.word	0x200001fc
 8000ce8:	20000004 	.word	0x20000004

08000cec <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000cec:	4b01      	ldr	r3, [pc, #4]	; (8000cf4 <HAL_GetTick+0x8>)
 8000cee:	6818      	ldr	r0, [r3, #0]
}
 8000cf0:	4770      	bx	lr
 8000cf2:	bf00      	nop
 8000cf4:	200001fc 	.word	0x200001fc

08000cf8 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000cf8:	4907      	ldr	r1, [pc, #28]	; (8000d18 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8000cfa:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000cfc:	0203      	lsls	r3, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000cfe:	f64f 00ff 	movw	r0, #63743	; 0xf8ff
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d02:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d06:	4002      	ands	r2, r0
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d08:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d0a:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d0e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8000d12:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8000d14:	4770      	bx	lr
 8000d16:	bf00      	nop
 8000d18:	e000ed00 	.word	0xe000ed00

08000d1c <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d1c:	4b1c      	ldr	r3, [pc, #112]	; (8000d90 <HAL_NVIC_SetPriority+0x74>)
 8000d1e:	68db      	ldr	r3, [r3, #12]
 8000d20:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d24:	b500      	push	{lr}
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d26:	f1c3 0e07 	rsb	lr, r3, #7
 8000d2a:	f1be 0f04 	cmp.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d2e:	f103 0c04 	add.w	ip, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d32:	bf28      	it	cs
 8000d34:	f04f 0e04 	movcs.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d38:	f1bc 0f06 	cmp.w	ip, #6
 8000d3c:	d91b      	bls.n	8000d76 <HAL_NVIC_SetPriority+0x5a>
 8000d3e:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d40:	f04f 3cff 	mov.w	ip, #4294967295
 8000d44:	fa0c fc03 	lsl.w	ip, ip, r3
 8000d48:	ea22 020c 	bic.w	r2, r2, ip
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000d50:	fa0c fc0e 	lsl.w	ip, ip, lr
 8000d54:	ea21 010c 	bic.w	r1, r1, ip
 8000d58:	4099      	lsls	r1, r3
  if ((int32_t)(IRQn) >= 0)
 8000d5a:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d5c:	ea41 0102 	orr.w	r1, r1, r2
  if ((int32_t)(IRQn) >= 0)
 8000d60:	db0c      	blt.n	8000d7c <HAL_NVIC_SetPriority+0x60>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d62:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8000d66:	0109      	lsls	r1, r1, #4
 8000d68:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8000d6c:	b2c9      	uxtb	r1, r1
 8000d6e:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8000d72:	f85d fb04 	ldr.w	pc, [sp], #4
 8000d76:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d78:	4613      	mov	r3, r2
 8000d7a:	e7e7      	b.n	8000d4c <HAL_NVIC_SetPriority+0x30>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d7c:	4b05      	ldr	r3, [pc, #20]	; (8000d94 <HAL_NVIC_SetPriority+0x78>)
 8000d7e:	f000 000f 	and.w	r0, r0, #15
 8000d82:	0109      	lsls	r1, r1, #4
 8000d84:	4403      	add	r3, r0
 8000d86:	b2c9      	uxtb	r1, r1
 8000d88:	7619      	strb	r1, [r3, #24]
 8000d8a:	f85d fb04 	ldr.w	pc, [sp], #4
 8000d8e:	bf00      	nop
 8000d90:	e000ed00 	.word	0xe000ed00
 8000d94:	e000ecfc 	.word	0xe000ecfc

08000d98 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8000d98:	2800      	cmp	r0, #0
 8000d9a:	db08      	blt.n	8000dae <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d9c:	4a04      	ldr	r2, [pc, #16]	; (8000db0 <HAL_NVIC_EnableIRQ+0x18>)
 8000d9e:	0941      	lsrs	r1, r0, #5
 8000da0:	2301      	movs	r3, #1
 8000da2:	f000 001f 	and.w	r0, r0, #31
 8000da6:	fa03 f000 	lsl.w	r0, r3, r0
 8000daa:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8000dae:	4770      	bx	lr
 8000db0:	e000e100 	.word	0xe000e100

08000db4 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000db4:	3801      	subs	r0, #1
 8000db6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000dba:	d210      	bcs.n	8000dde <HAL_SYSTICK_Config+0x2a>
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000dbc:	b410      	push	{r4}
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000dbe:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dc2:	4c08      	ldr	r4, [pc, #32]	; (8000de4 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000dc4:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dc6:	f04f 0cf0 	mov.w	ip, #240	; 0xf0
 8000dca:	f884 c023 	strb.w	ip, [r4, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000dce:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000dd0:	2107      	movs	r1, #7
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000dd2:	4610      	mov	r0, r2
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000dd4:	619a      	str	r2, [r3, #24]
   return SysTick_Config(TicksNumb);
}
 8000dd6:	f85d 4b04 	ldr.w	r4, [sp], #4
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000dda:	6119      	str	r1, [r3, #16]
 8000ddc:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000dde:	2001      	movs	r0, #1
 8000de0:	4770      	bx	lr
 8000de2:	bf00      	nop
 8000de4:	e000ed00 	.word	0xe000ed00

08000de8 <HAL_DMA_Abort>:
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
  HAL_StatusTypeDef status = HAL_OK;

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000de8:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
 8000dec:	2a02      	cmp	r2, #2
{
 8000dee:	4603      	mov	r3, r0
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000df0:	d009      	beq.n	8000e06 <HAL_DMA_Abort+0x1e>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000df2:	2204      	movs	r2, #4
 8000df4:	63c2      	str	r2, [r0, #60]	; 0x3c
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000df6:	2101      	movs	r1, #1

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8000df8:	2200      	movs	r2, #0
    status = HAL_ERROR;
 8000dfa:	2001      	movs	r0, #1
  hdma->State = HAL_DMA_STATE_READY;
 8000dfc:	f883 1025 	strb.w	r1, [r3, #37]	; 0x25
  __HAL_UNLOCK(hdma);
 8000e00:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
}
 8000e04:	4770      	bx	lr
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000e06:	6802      	ldr	r2, [r0, #0]
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8000e08:	6c59      	ldr	r1, [r3, #68]	; 0x44
{
 8000e0a:	b430      	push	{r4, r5}
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8000e0c:	6c84      	ldr	r4, [r0, #72]	; 0x48
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000e0e:	6810      	ldr	r0, [r2, #0]
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8000e10:	6c1d      	ldr	r5, [r3, #64]	; 0x40
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000e12:	f020 000e 	bic.w	r0, r0, #14
 8000e16:	6010      	str	r0, [r2, #0]
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8000e18:	6820      	ldr	r0, [r4, #0]
 8000e1a:	f420 7080 	bic.w	r0, r0, #256	; 0x100
 8000e1e:	6020      	str	r0, [r4, #0]
     __HAL_DMA_DISABLE(hdma);
 8000e20:	6810      	ldr	r0, [r2, #0]
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8000e22:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
     __HAL_DMA_DISABLE(hdma);
 8000e24:	f020 0001 	bic.w	r0, r0, #1
 8000e28:	6010      	str	r0, [r2, #0]
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8000e2a:	f001 011f 	and.w	r1, r1, #31
 8000e2e:	2201      	movs	r2, #1
 8000e30:	408a      	lsls	r2, r1
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8000e32:	e9d3 1014 	ldrd	r1, r0, [r3, #80]	; 0x50
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8000e36:	606a      	str	r2, [r5, #4]
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8000e38:	6061      	str	r1, [r4, #4]
     if (hdma->DMAmuxRequestGen != 0U)
 8000e3a:	b138      	cbz	r0, 8000e4c <HAL_DMA_Abort+0x64>
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8000e3c:	6802      	ldr	r2, [r0, #0]
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8000e3e:	e9d3 1416 	ldrd	r1, r4, [r3, #88]	; 0x58
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8000e42:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000e46:	6002      	str	r2, [r0, #0]
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8000e48:	604c      	str	r4, [r1, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000e4a:	2000      	movs	r0, #0
  hdma->State = HAL_DMA_STATE_READY;
 8000e4c:	2101      	movs	r1, #1
  __HAL_UNLOCK(hdma);
 8000e4e:	2200      	movs	r2, #0
  hdma->State = HAL_DMA_STATE_READY;
 8000e50:	f883 1025 	strb.w	r1, [r3, #37]	; 0x25
  __HAL_UNLOCK(hdma);
 8000e54:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
}
 8000e58:	bc30      	pop	{r4, r5}
 8000e5a:	4770      	bx	lr

08000e5c <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000e5c:	b538      	push	{r3, r4, r5, lr}
  HAL_StatusTypeDef status = HAL_OK;

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8000e5e:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 8000e62:	2b02      	cmp	r3, #2
 8000e64:	d009      	beq.n	8000e7a <HAL_DMA_Abort_IT+0x1e>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000e66:	2301      	movs	r3, #1
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000e68:	2104      	movs	r1, #4

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000e6a:	2200      	movs	r2, #0
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000e6c:	63c1      	str	r1, [r0, #60]	; 0x3c
    __HAL_UNLOCK(hdma);
 8000e6e:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
    hdma->State = HAL_DMA_STATE_READY;
 8000e72:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25

    status = HAL_ERROR;
 8000e76:	4618      	mov	r0, r3
    {
      hdma->XferAbortCallback(hdma);
    }
  }
  return status;
}
 8000e78:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000e7a:	6803      	ldr	r3, [r0, #0]
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8000e7c:	6c84      	ldr	r4, [r0, #72]	; 0x48
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000e7e:	6819      	ldr	r1, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8000e80:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8000e82:	6c05      	ldr	r5, [r0, #64]	; 0x40
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000e84:	f021 010e 	bic.w	r1, r1, #14
 8000e88:	6019      	str	r1, [r3, #0]
    __HAL_DMA_DISABLE(hdma);
 8000e8a:	6819      	ldr	r1, [r3, #0]
 8000e8c:	f021 0101 	bic.w	r1, r1, #1
 8000e90:	6019      	str	r1, [r3, #0]
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8000e92:	6823      	ldr	r3, [r4, #0]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8000e94:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8000e96:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000e9a:	6023      	str	r3, [r4, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8000e9c:	f002 021f 	and.w	r2, r2, #31
 8000ea0:	2301      	movs	r3, #1
 8000ea2:	4093      	lsls	r3, r2
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8000ea4:	e9d0 4214 	ldrd	r4, r2, [r0, #80]	; 0x50
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8000ea8:	606b      	str	r3, [r5, #4]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8000eaa:	604c      	str	r4, [r1, #4]
    if (hdma->DMAmuxRequestGen != 0U)
 8000eac:	b132      	cbz	r2, 8000ebc <HAL_DMA_Abort_IT+0x60>
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8000eae:	6813      	ldr	r3, [r2, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8000eb0:	e9d0 1416 	ldrd	r1, r4, [r0, #88]	; 0x58
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8000eb4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000eb8:	6013      	str	r3, [r2, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8000eba:	604c      	str	r4, [r1, #4]
    if (hdma->XferAbortCallback != NULL)
 8000ebc:	6b83      	ldr	r3, [r0, #56]	; 0x38
    hdma->State = HAL_DMA_STATE_READY;
 8000ebe:	2201      	movs	r2, #1
    __HAL_UNLOCK(hdma);
 8000ec0:	2400      	movs	r4, #0
    hdma->State = HAL_DMA_STATE_READY;
 8000ec2:	f880 2025 	strb.w	r2, [r0, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 8000ec6:	f880 4024 	strb.w	r4, [r0, #36]	; 0x24
    if (hdma->XferAbortCallback != NULL)
 8000eca:	b113      	cbz	r3, 8000ed2 <HAL_DMA_Abort_IT+0x76>
      hdma->XferAbortCallback(hdma);
 8000ecc:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 8000ece:	4620      	mov	r0, r4
}
 8000ed0:	bd38      	pop	{r3, r4, r5, pc}
  HAL_StatusTypeDef status = HAL_OK;
 8000ed2:	4618      	mov	r0, r3
}
 8000ed4:	bd38      	pop	{r3, r4, r5, pc}
 8000ed6:	bf00      	nop

08000ed8 <HAL_DMA_GetError>:
  *              the configuration information for the specified DMA Channel.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
  return hdma->ErrorCode;
 8000ed8:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
}
 8000eda:	4770      	bx	lr

08000edc <HAL_FDCAN_Init>:
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8000edc:	2800      	cmp	r0, #0
 8000ede:	f000 80d9 	beq.w	8001094 <HAL_FDCAN_Init+0x1b8>
{
 8000ee2:	b538      	push	{r3, r4, r5, lr}

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8000ee4:	f890 305c 	ldrb.w	r3, [r0, #92]	; 0x5c
 8000ee8:	4604      	mov	r4, r0
 8000eea:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d071      	beq.n	8000fd6 <HAL_FDCAN_Init+0xfa>
    HAL_FDCAN_MspInit(hfdcan);
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8000ef2:	6822      	ldr	r2, [r4, #0]
 8000ef4:	6993      	ldr	r3, [r2, #24]
 8000ef6:	f023 0310 	bic.w	r3, r3, #16
 8000efa:	6193      	str	r3, [r2, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000efc:	f7ff fef6 	bl	8000cec <HAL_GetTick>
 8000f00:	4605      	mov	r5, r0

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8000f02:	e004      	b.n	8000f0e <HAL_FDCAN_Init+0x32>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8000f04:	f7ff fef2 	bl	8000cec <HAL_GetTick>
 8000f08:	1b43      	subs	r3, r0, r5
 8000f0a:	2b0a      	cmp	r3, #10
 8000f0c:	d85a      	bhi.n	8000fc4 <HAL_FDCAN_Init+0xe8>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8000f0e:	6823      	ldr	r3, [r4, #0]
 8000f10:	699a      	ldr	r2, [r3, #24]
 8000f12:	0711      	lsls	r1, r2, #28
 8000f14:	d4f6      	bmi.n	8000f04 <HAL_FDCAN_Init+0x28>
      return HAL_ERROR;
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8000f16:	699a      	ldr	r2, [r3, #24]
 8000f18:	f042 0201 	orr.w	r2, r2, #1
 8000f1c:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000f1e:	f7ff fee5 	bl	8000cec <HAL_GetTick>
 8000f22:	4605      	mov	r5, r0

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8000f24:	e004      	b.n	8000f30 <HAL_FDCAN_Init+0x54>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8000f26:	f7ff fee1 	bl	8000cec <HAL_GetTick>
 8000f2a:	1b40      	subs	r0, r0, r5
 8000f2c:	280a      	cmp	r0, #10
 8000f2e:	d849      	bhi.n	8000fc4 <HAL_FDCAN_Init+0xe8>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8000f30:	6823      	ldr	r3, [r4, #0]
 8000f32:	699a      	ldr	r2, [r3, #24]
 8000f34:	07d2      	lsls	r2, r2, #31
 8000f36:	d5f6      	bpl.n	8000f26 <HAL_FDCAN_Init+0x4a>
      return HAL_ERROR;
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8000f38:	699a      	ldr	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8000f3a:	4959      	ldr	r1, [pc, #356]	; (80010a0 <HAL_FDCAN_Init+0x1c4>)
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8000f3c:	f042 0202 	orr.w	r2, r2, #2
  if (hfdcan->Instance == FDCAN1)
 8000f40:	428b      	cmp	r3, r1
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8000f42:	619a      	str	r2, [r3, #24]
  if (hfdcan->Instance == FDCAN1)
 8000f44:	f000 80a1 	beq.w	800108a <HAL_FDCAN_Init+0x1ae>
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8000f48:	7c22      	ldrb	r2, [r4, #16]
 8000f4a:	2a01      	cmp	r2, #1
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8000f4c:	699a      	ldr	r2, [r3, #24]
 8000f4e:	bf0c      	ite	eq
 8000f50:	f022 0240 	biceq.w	r2, r2, #64	; 0x40
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8000f54:	f042 0240 	orrne.w	r2, r2, #64	; 0x40
 8000f58:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8000f5a:	7c62      	ldrb	r2, [r4, #17]
 8000f5c:	2a01      	cmp	r2, #1
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8000f5e:	699a      	ldr	r2, [r3, #24]
 8000f60:	bf0c      	ite	eq
 8000f62:	f442 4280 	orreq.w	r2, r2, #16384	; 0x4000
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8000f66:	f422 4280 	bicne.w	r2, r2, #16384	; 0x4000
 8000f6a:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8000f6c:	7ca2      	ldrb	r2, [r4, #18]
 8000f6e:	2a01      	cmp	r2, #1
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8000f70:	699a      	ldr	r2, [r3, #24]
 8000f72:	bf0c      	ite	eq
 8000f74:	f422 5280 	biceq.w	r2, r2, #4096	; 0x1000
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8000f78:	f442 5280 	orrne.w	r2, r2, #4096	; 0x1000
 8000f7c:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8000f7e:	699a      	ldr	r2, [r3, #24]
 8000f80:	68a0      	ldr	r0, [r4, #8]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8000f82:	68e1      	ldr	r1, [r4, #12]
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8000f84:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8000f88:	4302      	orrs	r2, r0
 8000f8a:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8000f8c:	699a      	ldr	r2, [r3, #24]
 8000f8e:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 8000f92:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8000f94:	691a      	ldr	r2, [r3, #16]
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8000f96:	2901      	cmp	r1, #1
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8000f98:	f022 0210 	bic.w	r2, r2, #16
 8000f9c:	611a      	str	r2, [r3, #16]
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8000f9e:	d01f      	beq.n	8000fe0 <HAL_FDCAN_Init+0x104>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8000fa0:	b311      	cbz	r1, 8000fe8 <HAL_FDCAN_Init+0x10c>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8000fa2:	2902      	cmp	r1, #2
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8000fa4:	699a      	ldr	r2, [r3, #24]
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8000fa6:	d077      	beq.n	8001098 <HAL_FDCAN_Init+0x1bc>
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8000fa8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000fac:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8000fae:	691a      	ldr	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8000fb0:	2903      	cmp	r1, #3
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8000fb2:	f042 0210 	orr.w	r2, r2, #16
 8000fb6:	611a      	str	r2, [r3, #16]
      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8000fb8:	d116      	bne.n	8000fe8 <HAL_FDCAN_Init+0x10c>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8000fba:	699a      	ldr	r2, [r3, #24]
 8000fbc:	f042 0220 	orr.w	r2, r2, #32
 8000fc0:	619a      	str	r2, [r3, #24]
 8000fc2:	e011      	b.n	8000fe8 <HAL_FDCAN_Init+0x10c>
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8000fc4:	6e23      	ldr	r3, [r4, #96]	; 0x60
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8000fc6:	2203      	movs	r2, #3
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8000fc8:	f043 0301 	orr.w	r3, r3, #1
 8000fcc:	6623      	str	r3, [r4, #96]	; 0x60
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8000fce:	f884 205c 	strb.w	r2, [r4, #92]	; 0x5c
      return HAL_ERROR;
 8000fd2:	2001      	movs	r0, #1
  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;

  /* Return function status */
  return HAL_OK;
}
 8000fd4:	bd38      	pop	{r3, r4, r5, pc}
    hfdcan->Lock = HAL_UNLOCKED;
 8000fd6:	f880 205d 	strb.w	r2, [r0, #93]	; 0x5d
    HAL_FDCAN_MspInit(hfdcan);
 8000fda:	f7ff fd23 	bl	8000a24 <HAL_FDCAN_MspInit>
 8000fde:	e788      	b.n	8000ef2 <HAL_FDCAN_Init+0x16>
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8000fe0:	699a      	ldr	r2, [r3, #24]
 8000fe2:	f042 0204 	orr.w	r2, r2, #4
 8000fe6:	619a      	str	r2, [r3, #24]
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8000fe8:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8000fec:	3a01      	subs	r2, #1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8000fee:	3901      	subs	r1, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8000ff0:	0212      	lsls	r2, r2, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8000ff2:	ea42 6241 	orr.w	r2, r2, r1, lsl #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8000ff6:	6a21      	ldr	r1, [r4, #32]
 8000ff8:	3901      	subs	r1, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8000ffa:	430a      	orrs	r2, r1
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8000ffc:	6961      	ldr	r1, [r4, #20]
 8000ffe:	3901      	subs	r1, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8001000:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8001004:	f5b0 7f40 	cmp.w	r0, #768	; 0x300
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001008:	61da      	str	r2, [r3, #28]
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 800100a:	d10e      	bne.n	800102a <HAL_FDCAN_Init+0x14e>
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 800100c:	e9d4 020b 	ldrd	r0, r2, [r4, #44]	; 0x2c
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8001010:	6aa1      	ldr	r1, [r4, #40]	; 0x28
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8001012:	3a01      	subs	r2, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8001014:	3801      	subs	r0, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8001016:	0112      	lsls	r2, r2, #4
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8001018:	3901      	subs	r1, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 800101a:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 800101e:	430a      	orrs	r2, r1
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8001020:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8001022:	3901      	subs	r1, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8001024:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8001028:	60da      	str	r2, [r3, #12]
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 800102a:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 800102e:	6be0      	ldr	r0, [r4, #60]	; 0x3c

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 8001030:	6b61      	ldr	r1, [r4, #52]	; 0x34
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8001032:	4302      	orrs	r2, r0
 8001034:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 8001038:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 800103c:	4819      	ldr	r0, [pc, #100]	; (80010a4 <HAL_FDCAN_Init+0x1c8>)
 800103e:	6420      	str	r0, [r4, #64]	; 0x40
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 8001040:	f422 12f8 	bic.w	r2, r2, #2031616	; 0x1f0000
 8001044:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8001048:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 800104c:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8001050:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8001052:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001056:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 800105a:	4913      	ldr	r1, [pc, #76]	; (80010a8 <HAL_FDCAN_Init+0x1cc>)
 800105c:	6461      	str	r1, [r4, #68]	; 0x44
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 800105e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 8001062:	4b12      	ldr	r3, [pc, #72]	; (80010ac <HAL_FDCAN_Init+0x1d0>)

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 8001064:	4a12      	ldr	r2, [pc, #72]	; (80010b0 <HAL_FDCAN_Init+0x1d4>)
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 8001066:	3140      	adds	r1, #64	; 0x40
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 8001068:	e9c4 1312 	strd	r1, r3, [r4, #72]	; 0x48

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 800106c:	33f0      	adds	r3, #240	; 0xf0
 800106e:	e9c4 2314 	strd	r2, r3, [r4, #80]	; 0x50

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 8001072:	2100      	movs	r1, #0
 8001074:	f44f 7254 	mov.w	r2, #848	; 0x350
 8001078:	f002 fe22 	bl	8003cc0 <memset>
  hfdcan->LatestTxFifoQRequest = 0U;
 800107c:	2000      	movs	r0, #0
  hfdcan->State = HAL_FDCAN_STATE_READY;
 800107e:	2301      	movs	r3, #1
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8001080:	6620      	str	r0, [r4, #96]	; 0x60
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8001082:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
  hfdcan->LatestTxFifoQRequest = 0U;
 8001086:	65a0      	str	r0, [r4, #88]	; 0x58
}
 8001088:	bd38      	pop	{r3, r4, r5, pc}
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 800108a:	4a0a      	ldr	r2, [pc, #40]	; (80010b4 <HAL_FDCAN_Init+0x1d8>)
 800108c:	6861      	ldr	r1, [r4, #4]
 800108e:	f8c2 1500 	str.w	r1, [r2, #1280]	; 0x500
 8001092:	e759      	b.n	8000f48 <HAL_FDCAN_Init+0x6c>
    return HAL_ERROR;
 8001094:	2001      	movs	r0, #1
}
 8001096:	4770      	bx	lr
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8001098:	f042 0220 	orr.w	r2, r2, #32
 800109c:	619a      	str	r2, [r3, #24]
 800109e:	e7a3      	b.n	8000fe8 <HAL_FDCAN_Init+0x10c>
 80010a0:	40006400 	.word	0x40006400
 80010a4:	4000a400 	.word	0x4000a400
 80010a8:	4000a470 	.word	0x4000a470
 80010ac:	4000a588 	.word	0x4000a588
 80010b0:	4000a660 	.word	0x4000a660
 80010b4:	40006000 	.word	0x40006000

080010b8 <HAL_FDCAN_ConfigFilter>:
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 80010b8:	f890 205c 	ldrb.w	r2, [r0, #92]	; 0x5c
  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 80010bc:	3a01      	subs	r2, #1
 80010be:	2a01      	cmp	r2, #1
{
 80010c0:	4603      	mov	r3, r0
  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 80010c2:	d905      	bls.n	80010d0 <HAL_FDCAN_ConfigFilter+0x18>
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 80010c4:	6e02      	ldr	r2, [r0, #96]	; 0x60
 80010c6:	f042 0202 	orr.w	r2, r2, #2
    return HAL_ERROR;
 80010ca:	2001      	movs	r0, #1
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 80010cc:	661a      	str	r2, [r3, #96]	; 0x60
}
 80010ce:	4770      	bx	lr
    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 80010d0:	6808      	ldr	r0, [r1, #0]
{
 80010d2:	b430      	push	{r4, r5}
    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 80010d4:	b978      	cbnz	r0, 80010f6 <HAL_FDCAN_ConfigFilter+0x3e>
                         (sFilterConfig->FilterConfig << 27U) |
 80010d6:	e9d1 4202 	ldrd	r4, r2, [r1, #8]
 80010da:	06d2      	lsls	r2, r2, #27
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 80010dc:	ea42 7284 	orr.w	r2, r2, r4, lsl #30
      *FilterAddress = FilterElementW1;
 80010e0:	6c1c      	ldr	r4, [r3, #64]	; 0x40
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 80010e2:	694b      	ldr	r3, [r1, #20]
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLS_SIZE));
 80010e4:	684d      	ldr	r5, [r1, #4]
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 80010e6:	4313      	orrs	r3, r2
                         (sFilterConfig->FilterID1 << 16U)    |
 80010e8:	690a      	ldr	r2, [r1, #16]
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 80010ea:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
      *FilterAddress = FilterElementW1;
 80010ee:	f844 3025 	str.w	r3, [r4, r5, lsl #2]
}
 80010f2:	bc30      	pop	{r4, r5}
 80010f4:	4770      	bx	lr
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLE_SIZE));
 80010f6:	6c58      	ldr	r0, [r3, #68]	; 0x44
      FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 80010f8:	688a      	ldr	r2, [r1, #8]
 80010fa:	694b      	ldr	r3, [r1, #20]
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLE_SIZE));
 80010fc:	684c      	ldr	r4, [r1, #4]
      FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 80010fe:	ea43 7382 	orr.w	r3, r3, r2, lsl #30
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 8001102:	e9d1 5203 	ldrd	r5, r2, [r1, #12]
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLE_SIZE));
 8001106:	eb00 0cc4 	add.w	ip, r0, r4, lsl #3
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 800110a:	ea42 7245 	orr.w	r2, r2, r5, lsl #29
      *FilterAddress = FilterElementW1;
 800110e:	f840 2034 	str.w	r2, [r0, r4, lsl #3]
    return HAL_OK;
 8001112:	2000      	movs	r0, #0
}
 8001114:	bc30      	pop	{r4, r5}
      *FilterAddress = FilterElementW2;
 8001116:	f8cc 3004 	str.w	r3, [ip, #4]
}
 800111a:	4770      	bx	lr

0800111c <HAL_FDCAN_Start>:
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 800111c:	f890 205c 	ldrb.w	r2, [r0, #92]	; 0x5c
 8001120:	2a01      	cmp	r2, #1
{
 8001122:	4603      	mov	r3, r0
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8001124:	d005      	beq.n	8001132 <HAL_FDCAN_Start+0x16>
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8001126:	6e02      	ldr	r2, [r0, #96]	; 0x60
 8001128:	f042 0204 	orr.w	r2, r2, #4
    return HAL_ERROR;
 800112c:	2001      	movs	r0, #1
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 800112e:	661a      	str	r2, [r3, #96]	; 0x60
}
 8001130:	4770      	bx	lr
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8001132:	6800      	ldr	r0, [r0, #0]
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8001134:	2202      	movs	r2, #2
 8001136:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 800113a:	6982      	ldr	r2, [r0, #24]
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 800113c:	2100      	movs	r1, #0
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 800113e:	f022 0201 	bic.w	r2, r2, #1
 8001142:	6182      	str	r2, [r0, #24]
    return HAL_OK;
 8001144:	4608      	mov	r0, r1
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8001146:	6619      	str	r1, [r3, #96]	; 0x60
    return HAL_OK;
 8001148:	4770      	bx	lr
 800114a:	bf00      	nop

0800114c <HAL_FDCAN_AddMessageToTxFifoQ>:
{
 800114c:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 800114e:	f890 305c 	ldrb.w	r3, [r0, #92]	; 0x5c
 8001152:	2b02      	cmp	r3, #2
{
 8001154:	4686      	mov	lr, r0
  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 8001156:	d10c      	bne.n	8001172 <HAL_FDCAN_AddMessageToTxFifoQ+0x26>
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 8001158:	6805      	ldr	r5, [r0, #0]
 800115a:	f8d5 30c4 	ldr.w	r3, [r5, #196]	; 0xc4
 800115e:	f413 1c00 	ands.w	ip, r3, #2097152	; 0x200000
 8001162:	d00d      	beq.n	8001180 <HAL_FDCAN_AddMessageToTxFifoQ+0x34>
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 8001164:	6e03      	ldr	r3, [r0, #96]	; 0x60
 8001166:	f443 7300 	orr.w	r3, r3, #512	; 0x200
      return HAL_ERROR;
 800116a:	2001      	movs	r0, #1
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 800116c:	f8ce 3060 	str.w	r3, [lr, #96]	; 0x60
}
 8001170:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8001172:	6e03      	ldr	r3, [r0, #96]	; 0x60
 8001174:	f043 0308 	orr.w	r3, r3, #8
    return HAL_ERROR;
 8001178:	2001      	movs	r0, #1
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 800117a:	f8ce 3060 	str.w	r3, [lr, #96]	; 0x60
}
 800117e:	bdf0      	pop	{r4, r5, r6, r7, pc}
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 8001180:	f8d5 60c4 	ldr.w	r6, [r5, #196]	; 0xc4
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 8001184:	684b      	ldr	r3, [r1, #4]
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 8001186:	f3c6 4601 	ubfx	r6, r6, #16, #2
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 800118a:	2b00      	cmp	r3, #0
 800118c:	d13a      	bne.n	8001204 <HAL_FDCAN_AddMessageToTxFifoQ+0xb8>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
                   FDCAN_STANDARD_ID |
 800118e:	688b      	ldr	r3, [r1, #8]
 8001190:	690f      	ldr	r7, [r1, #16]
 8001192:	431f      	orrs	r7, r3
                   pTxHeader->TxFrameType |
                   (pTxHeader->Identifier << 18U));
 8001194:	680b      	ldr	r3, [r1, #0]
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8001196:	ea47 4783 	orr.w	r7, r7, r3, lsl #18
                   pTxHeader->TxFrameType |
                   pTxHeader->Identifier);
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 800119a:	e9d1 0306 	ldrd	r0, r3, [r1, #24]
 800119e:	694c      	ldr	r4, [r1, #20]
 80011a0:	4303      	orrs	r3, r0
 80011a2:	68c8      	ldr	r0, [r1, #12]
 80011a4:	4323      	orrs	r3, r4
 80011a6:	6a0c      	ldr	r4, [r1, #32]
 80011a8:	4303      	orrs	r3, r0
 80011aa:	ea43 6304 	orr.w	r3, r3, r4, lsl #24
                 pTxHeader->FDFormat |
                 pTxHeader->BitRateSwitch |
                 pTxHeader->DataLength);

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxFIFOQSA + (BufferIndex * SRAMCAN_TFQ_SIZE));
 80011ae:	f8de 0054 	ldr.w	r0, [lr, #84]	; 0x54
 80011b2:	eb06 04c6 	add.w	r4, r6, r6, lsl #3

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 80011b6:	f840 7034 	str.w	r7, [r0, r4, lsl #3]
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxFIFOQSA + (BufferIndex * SRAMCAN_TFQ_SIZE));
 80011ba:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
  TxAddress++;
  *TxAddress = TxElementW2;
  TxAddress++;

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16U]; ByteCounter += 4U)
 80011be:	4c15      	ldr	r4, [pc, #84]	; (8001214 <HAL_FDCAN_AddMessageToTxFifoQ+0xc8>)
  *TxAddress = TxElementW2;
 80011c0:	6043      	str	r3, [r0, #4]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16U]; ByteCounter += 4U)
 80011c2:	89cb      	ldrh	r3, [r1, #14]
 80011c4:	5ce3      	ldrb	r3, [r4, r3]
 80011c6:	b1a3      	cbz	r3, 80011f2 <HAL_FDCAN_AddMessageToTxFifoQ+0xa6>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 80011c8:	7893      	ldrb	r3, [r2, #2]
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 80011ca:	78d7      	ldrb	r7, [r2, #3]
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 80011cc:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 80011ce:	ea43 6307 	orr.w	r3, r3, r7, lsl #24
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
                  (uint32_t)pTxData[ByteCounter]);
 80011d2:	7817      	ldrb	r7, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 80011d4:	433b      	orrs	r3, r7
 80011d6:	7857      	ldrb	r7, [r2, #1]
 80011d8:	ea43 2307 	orr.w	r3, r3, r7, lsl #8
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 80011dc:	eb0c 0700 	add.w	r7, ip, r0
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16U]; ByteCounter += 4U)
 80011e0:	f10c 0c04 	add.w	ip, ip, #4
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 80011e4:	60bb      	str	r3, [r7, #8]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16U]; ByteCounter += 4U)
 80011e6:	89cb      	ldrh	r3, [r1, #14]
 80011e8:	5ce3      	ldrb	r3, [r4, r3]
 80011ea:	459c      	cmp	ip, r3
 80011ec:	f102 0204 	add.w	r2, r2, #4
 80011f0:	d3ea      	bcc.n	80011c8 <HAL_FDCAN_AddMessageToTxFifoQ+0x7c>
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 80011f2:	2301      	movs	r3, #1
 80011f4:	fa03 f606 	lsl.w	r6, r3, r6
 80011f8:	f8c5 60cc 	str.w	r6, [r5, #204]	; 0xcc
    return HAL_OK;
 80011fc:	2000      	movs	r0, #0
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 80011fe:	f8ce 6058 	str.w	r6, [lr, #88]	; 0x58
}
 8001202:	bdf0      	pop	{r4, r5, r6, r7, pc}
                   pTxHeader->TxFrameType |
 8001204:	690b      	ldr	r3, [r1, #16]
 8001206:	680f      	ldr	r7, [r1, #0]
 8001208:	431f      	orrs	r7, r3
 800120a:	688b      	ldr	r3, [r1, #8]
 800120c:	431f      	orrs	r7, r3
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 800120e:	f047 4780 	orr.w	r7, r7, #1073741824	; 0x40000000
 8001212:	e7c2      	b.n	800119a <HAL_FDCAN_AddMessageToTxFifoQ+0x4e>
 8001214:	08003d00 	.word	0x08003d00

08001218 <HAL_FDCAN_GetRxMessage>:
{
 8001218:	b5f0      	push	{r4, r5, r6, r7, lr}
 800121a:	4604      	mov	r4, r0
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 800121c:	f890 005c 	ldrb.w	r0, [r0, #92]	; 0x5c
  if (state == HAL_FDCAN_STATE_BUSY)
 8001220:	2802      	cmp	r0, #2
 8001222:	d10d      	bne.n	8001240 <HAL_FDCAN_GetRxMessage+0x28>
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8001224:	2940      	cmp	r1, #64	; 0x40
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 8001226:	f8d4 c000 	ldr.w	ip, [r4]
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 800122a:	d00f      	beq.n	800124c <HAL_FDCAN_GetRxMessage+0x34>
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 800122c:	f8dc 0098 	ldr.w	r0, [ip, #152]	; 0x98
 8001230:	0700      	lsls	r0, r0, #28
 8001232:	d15f      	bne.n	80012f4 <HAL_FDCAN_GetRxMessage+0xdc>
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8001234:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8001236:	f443 7380 	orr.w	r3, r3, #256	; 0x100
        return HAL_ERROR;
 800123a:	2001      	movs	r0, #1
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 800123c:	6623      	str	r3, [r4, #96]	; 0x60
}
 800123e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8001240:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8001242:	f043 0308 	orr.w	r3, r3, #8
    return HAL_ERROR;
 8001246:	2001      	movs	r0, #1
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8001248:	6623      	str	r3, [r4, #96]	; 0x60
}
 800124a:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 800124c:	f8dc 0090 	ldr.w	r0, [ip, #144]	; 0x90
 8001250:	0705      	lsls	r5, r0, #28
 8001252:	d0ef      	beq.n	8001234 <HAL_FDCAN_GetRxMessage+0x1c>
        GetIndex = ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 8001254:	f8dc 7090 	ldr.w	r7, [ip, #144]	; 0x90
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * SRAMCAN_RF0_SIZE));
 8001258:	6ca5      	ldr	r5, [r4, #72]	; 0x48
        GetIndex = ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 800125a:	f3c7 2701 	ubfx	r7, r7, #8, #2
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * SRAMCAN_RF0_SIZE));
 800125e:	eb07 00c7 	add.w	r0, r7, r7, lsl #3
 8001262:	eb05 05c0 	add.w	r5, r5, r0, lsl #3
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 8001266:	6828      	ldr	r0, [r5, #0]
 8001268:	f000 4080 	and.w	r0, r0, #1073741824	; 0x40000000
 800126c:	6050      	str	r0, [r2, #4]
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 800126e:	2800      	cmp	r0, #0
 8001270:	d14f      	bne.n	8001312 <HAL_FDCAN_GetRxMessage+0xfa>
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 8001272:	6828      	ldr	r0, [r5, #0]
 8001274:	f3c0 408a 	ubfx	r0, r0, #18, #11
 8001278:	6010      	str	r0, [r2, #0]
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 800127a:	6828      	ldr	r0, [r5, #0]
 800127c:	f000 5000 	and.w	r0, r0, #536870912	; 0x20000000
 8001280:	6090      	str	r0, [r2, #8]
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 8001282:	6828      	ldr	r0, [r5, #0]
 8001284:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8001288:	6110      	str	r0, [r2, #16]
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 800128a:	88a8      	ldrh	r0, [r5, #4]
 800128c:	61d0      	str	r0, [r2, #28]
    pRxHeader->DataLength = (*RxAddress & FDCAN_ELEMENT_MASK_DLC);
 800128e:	6868      	ldr	r0, [r5, #4]
 8001290:	f400 2070 	and.w	r0, r0, #983040	; 0xf0000
 8001294:	60d0      	str	r0, [r2, #12]
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 8001296:	686e      	ldr	r6, [r5, #4]
 8001298:	f406 1680 	and.w	r6, r6, #1048576	; 0x100000
 800129c:	6156      	str	r6, [r2, #20]
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 800129e:	686e      	ldr	r6, [r5, #4]
 80012a0:	f406 1600 	and.w	r6, r6, #2097152	; 0x200000
 80012a4:	6196      	str	r6, [r2, #24]
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 80012a6:	79ee      	ldrb	r6, [r5, #7]
 80012a8:	f006 067f 	and.w	r6, r6, #127	; 0x7f
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16U]; ByteCounter++)
 80012ac:	0c00      	lsrs	r0, r0, #16
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 80012ae:	6216      	str	r6, [r2, #32]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16U]; ByteCounter++)
 80012b0:	4e1a      	ldr	r6, [pc, #104]	; (800131c <HAL_FDCAN_GetRxMessage+0x104>)
 80012b2:	f816 e000 	ldrb.w	lr, [r6, r0]
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 80012b6:	6868      	ldr	r0, [r5, #4]
 80012b8:	0fc0      	lsrs	r0, r0, #31
 80012ba:	6250      	str	r0, [r2, #36]	; 0x24
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16U]; ByteCounter++)
 80012bc:	f1be 0f00 	cmp.w	lr, #0
 80012c0:	d010      	beq.n	80012e4 <HAL_FDCAN_GetRxMessage+0xcc>
 80012c2:	f103 3eff 	add.w	lr, r3, #4294967295
 80012c6:	f105 0c07 	add.w	ip, r5, #7
      pRxData[ByteCounter] = pData[ByteCounter];
 80012ca:	4663      	mov	r3, ip
 80012cc:	f81c 0f01 	ldrb.w	r0, [ip, #1]!
 80012d0:	f80e 0f01 	strb.w	r0, [lr, #1]!
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16U]; ByteCounter++)
 80012d4:	89d0      	ldrh	r0, [r2, #14]
 80012d6:	3b06      	subs	r3, #6
 80012d8:	5c30      	ldrb	r0, [r6, r0]
 80012da:	1b5b      	subs	r3, r3, r5
 80012dc:	4298      	cmp	r0, r3
 80012de:	d8f4      	bhi.n	80012ca <HAL_FDCAN_GetRxMessage+0xb2>
 80012e0:	f8d4 c000 	ldr.w	ip, [r4]
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 80012e4:	2940      	cmp	r1, #64	; 0x40
      hfdcan->Instance->RXF0A = GetIndex;
 80012e6:	bf0c      	ite	eq
 80012e8:	f8cc 7094 	streq.w	r7, [ip, #148]	; 0x94
      hfdcan->Instance->RXF1A = GetIndex;
 80012ec:	f8cc 709c 	strne.w	r7, [ip, #156]	; 0x9c
    return HAL_OK;
 80012f0:	2000      	movs	r0, #0
}
 80012f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
        GetIndex = ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 80012f4:	f8dc 7098 	ldr.w	r7, [ip, #152]	; 0x98
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * SRAMCAN_RF1_SIZE));
 80012f8:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
        GetIndex = ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 80012fa:	f3c7 2701 	ubfx	r7, r7, #8, #2
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * SRAMCAN_RF1_SIZE));
 80012fe:	eb07 00c7 	add.w	r0, r7, r7, lsl #3
 8001302:	eb05 05c0 	add.w	r5, r5, r0, lsl #3
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 8001306:	6828      	ldr	r0, [r5, #0]
 8001308:	f000 4080 	and.w	r0, r0, #1073741824	; 0x40000000
 800130c:	6050      	str	r0, [r2, #4]
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 800130e:	2800      	cmp	r0, #0
 8001310:	d0af      	beq.n	8001272 <HAL_FDCAN_GetRxMessage+0x5a>
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 8001312:	6828      	ldr	r0, [r5, #0]
 8001314:	f020 4060 	bic.w	r0, r0, #3758096384	; 0xe0000000
 8001318:	e7ae      	b.n	8001278 <HAL_FDCAN_GetRxMessage+0x60>
 800131a:	bf00      	nop
 800131c:	08003d00 	.word	0x08003d00

08001320 <HAL_FDCAN_ActivateNotification>:
{
 8001320:	4603      	mov	r3, r0
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8001322:	f890 005c 	ldrb.w	r0, [r0, #92]	; 0x5c
  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8001326:	3801      	subs	r0, #1
 8001328:	2801      	cmp	r0, #1
 800132a:	d905      	bls.n	8001338 <HAL_FDCAN_ActivateNotification+0x18>
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 800132c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800132e:	f042 0202 	orr.w	r2, r2, #2
    return HAL_ERROR;
 8001332:	2001      	movs	r0, #1
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8001334:	661a      	str	r2, [r3, #96]	; 0x60
}
 8001336:	4770      	bx	lr
    ITs_lines_selection = hfdcan->Instance->ILS;
 8001338:	681b      	ldr	r3, [r3, #0]
{
 800133a:	b430      	push	{r4, r5}
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0) != 0U)
 800133c:	f011 0507 	ands.w	r5, r1, #7
    ITs_lines_selection = hfdcan->Instance->ILS;
 8001340:	6d98      	ldr	r0, [r3, #88]	; 0x58
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0) != 0U)
 8001342:	d03d      	beq.n	80013c0 <HAL_FDCAN_ActivateNotification+0xa0>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 8001344:	07c4      	lsls	r4, r0, #31
 8001346:	d43b      	bmi.n	80013c0 <HAL_FDCAN_ActivateNotification+0xa0>
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 8001348:	6ddc      	ldr	r4, [r3, #92]	; 0x5c
 800134a:	f044 0401 	orr.w	r4, r4, #1
 800134e:	65dc      	str	r4, [r3, #92]	; 0x5c
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0)       != 0U)
 8001350:	b1cd      	cbz	r5, 8001386 <HAL_FDCAN_ActivateNotification+0x66>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 8001352:	07c5      	lsls	r5, r0, #31
 8001354:	d517      	bpl.n	8001386 <HAL_FDCAN_ActivateNotification+0x66>
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 8001356:	6dd8      	ldr	r0, [r3, #92]	; 0x5c
 8001358:	f040 0002 	orr.w	r0, r0, #2
 800135c:	65d8      	str	r0, [r3, #92]	; 0x5c
    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 800135e:	060c      	lsls	r4, r1, #24
 8001360:	d504      	bpl.n	800136c <HAL_FDCAN_ActivateNotification+0x4c>
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 8001362:	f8d3 00dc 	ldr.w	r0, [r3, #220]	; 0xdc
 8001366:	4310      	orrs	r0, r2
 8001368:	f8c3 00dc 	str.w	r0, [r3, #220]	; 0xdc
    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 800136c:	05c8      	lsls	r0, r1, #23
 800136e:	d504      	bpl.n	800137a <HAL_FDCAN_ActivateNotification+0x5a>
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 8001370:	f8d3 00e0 	ldr.w	r0, [r3, #224]	; 0xe0
 8001374:	4302      	orrs	r2, r0
 8001376:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 800137a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800137c:	4311      	orrs	r1, r2
    return HAL_OK;
 800137e:	2000      	movs	r0, #0
}
 8001380:	bc30      	pop	{r4, r5}
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 8001382:	6559      	str	r1, [r3, #84]	; 0x54
}
 8001384:	4770      	bx	lr
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 8001386:	f011 0f38 	tst.w	r1, #56	; 0x38
 800138a:	d001      	beq.n	8001390 <HAL_FDCAN_ActivateNotification+0x70>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 800138c:	0784      	lsls	r4, r0, #30
 800138e:	d4e2      	bmi.n	8001356 <HAL_FDCAN_ActivateNotification+0x36>
 8001390:	f411 7fe0 	tst.w	r1, #448	; 0x1c0
 8001394:	d131      	bne.n	80013fa <HAL_FDCAN_ActivateNotification+0xda>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 8001396:	f411 5ff0 	tst.w	r1, #7680	; 0x1e00
 800139a:	d001      	beq.n	80013a0 <HAL_FDCAN_ActivateNotification+0x80>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 800139c:	0704      	lsls	r4, r0, #28
 800139e:	d4da      	bmi.n	8001356 <HAL_FDCAN_ActivateNotification+0x36>
 80013a0:	f411 4f60 	tst.w	r1, #57344	; 0xe000
 80013a4:	d001      	beq.n	80013aa <HAL_FDCAN_ActivateNotification+0x8a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 80013a6:	06c5      	lsls	r5, r0, #27
 80013a8:	d4d5      	bmi.n	8001356 <HAL_FDCAN_ActivateNotification+0x36>
 80013aa:	f411 3f40 	tst.w	r1, #196608	; 0x30000
 80013ae:	d001      	beq.n	80013b4 <HAL_FDCAN_ActivateNotification+0x94>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 80013b0:	0684      	lsls	r4, r0, #26
 80013b2:	d4d0      	bmi.n	8001356 <HAL_FDCAN_ActivateNotification+0x36>
 80013b4:	f411 0f7c 	tst.w	r1, #16515072	; 0xfc0000
 80013b8:	d0d1      	beq.n	800135e <HAL_FDCAN_ActivateNotification+0x3e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) != 0U)))
 80013ba:	0645      	lsls	r5, r0, #25
 80013bc:	d5cf      	bpl.n	800135e <HAL_FDCAN_ActivateNotification+0x3e>
 80013be:	e7ca      	b.n	8001356 <HAL_FDCAN_ActivateNotification+0x36>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 80013c0:	f011 0f38 	tst.w	r1, #56	; 0x38
 80013c4:	d001      	beq.n	80013ca <HAL_FDCAN_ActivateNotification+0xaa>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 80013c6:	0784      	lsls	r4, r0, #30
 80013c8:	d5be      	bpl.n	8001348 <HAL_FDCAN_ActivateNotification+0x28>
 80013ca:	f411 7fe0 	tst.w	r1, #448	; 0x1c0
 80013ce:	d117      	bne.n	8001400 <HAL_FDCAN_ActivateNotification+0xe0>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 80013d0:	f411 5ff0 	tst.w	r1, #7680	; 0x1e00
 80013d4:	d001      	beq.n	80013da <HAL_FDCAN_ActivateNotification+0xba>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 80013d6:	0704      	lsls	r4, r0, #28
 80013d8:	d5b6      	bpl.n	8001348 <HAL_FDCAN_ActivateNotification+0x28>
 80013da:	f411 4f60 	tst.w	r1, #57344	; 0xe000
 80013de:	d001      	beq.n	80013e4 <HAL_FDCAN_ActivateNotification+0xc4>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 80013e0:	06c4      	lsls	r4, r0, #27
 80013e2:	d5b1      	bpl.n	8001348 <HAL_FDCAN_ActivateNotification+0x28>
 80013e4:	f411 3f40 	tst.w	r1, #196608	; 0x30000
 80013e8:	d001      	beq.n	80013ee <HAL_FDCAN_ActivateNotification+0xce>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 80013ea:	0684      	lsls	r4, r0, #26
 80013ec:	d5ac      	bpl.n	8001348 <HAL_FDCAN_ActivateNotification+0x28>
 80013ee:	f411 0f7c 	tst.w	r1, #16515072	; 0xfc0000
 80013f2:	d0ad      	beq.n	8001350 <HAL_FDCAN_ActivateNotification+0x30>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) == 0U)))
 80013f4:	0644      	lsls	r4, r0, #25
 80013f6:	d4ab      	bmi.n	8001350 <HAL_FDCAN_ActivateNotification+0x30>
 80013f8:	e7a6      	b.n	8001348 <HAL_FDCAN_ActivateNotification+0x28>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 80013fa:	0745      	lsls	r5, r0, #29
 80013fc:	d4ab      	bmi.n	8001356 <HAL_FDCAN_ActivateNotification+0x36>
 80013fe:	e7ca      	b.n	8001396 <HAL_FDCAN_ActivateNotification+0x76>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 8001400:	0744      	lsls	r4, r0, #29
 8001402:	d5a1      	bpl.n	8001348 <HAL_FDCAN_ActivateNotification+0x28>
 8001404:	e7e4      	b.n	80013d0 <HAL_FDCAN_ActivateNotification+0xb0>
 8001406:	bf00      	nop

08001408 <HAL_FDCAN_TxEventFifoCallback>:
}
 8001408:	4770      	bx	lr
 800140a:	bf00      	nop

0800140c <HAL_FDCAN_RxFifo1Callback>:
 800140c:	4770      	bx	lr
 800140e:	bf00      	nop

08001410 <HAL_FDCAN_TxFifoEmptyCallback>:
 8001410:	4770      	bx	lr
 8001412:	bf00      	nop

08001414 <HAL_FDCAN_TxBufferCompleteCallback>:
 8001414:	4770      	bx	lr
 8001416:	bf00      	nop

08001418 <HAL_FDCAN_TxBufferAbortCallback>:
 8001418:	4770      	bx	lr
 800141a:	bf00      	nop

0800141c <HAL_FDCAN_TimestampWraparoundCallback>:
 800141c:	4770      	bx	lr
 800141e:	bf00      	nop

08001420 <HAL_FDCAN_TimeoutOccurredCallback>:
 8001420:	4770      	bx	lr
 8001422:	bf00      	nop

08001424 <HAL_FDCAN_HighPriorityMessageCallback>:
 8001424:	4770      	bx	lr
 8001426:	bf00      	nop

08001428 <HAL_FDCAN_ErrorCallback>:
 8001428:	4770      	bx	lr
 800142a:	bf00      	nop

0800142c <HAL_FDCAN_ErrorStatusCallback>:
 800142c:	4770      	bx	lr
 800142e:	bf00      	nop

08001430 <HAL_FDCAN_IRQHandler>:
{
 8001430:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 8001434:	6803      	ldr	r3, [r0, #0]
 8001436:	6d1a      	ldr	r2, [r3, #80]	; 0x50
  TxEventFifoITs &= hfdcan->Instance->IE;
 8001438:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800143a:	ea02 0901 	and.w	r9, r2, r1
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 800143e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
  RxFifo0ITs &= hfdcan->Instance->IE;
 8001440:	6d59      	ldr	r1, [r3, #84]	; 0x54
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 8001442:	6d1f      	ldr	r7, [r3, #80]	; 0x50
  RxFifo0ITs &= hfdcan->Instance->IE;
 8001444:	ea02 0801 	and.w	r8, r2, r1
  RxFifo1ITs &= hfdcan->Instance->IE;
 8001448:	6d5a      	ldr	r2, [r3, #84]	; 0x54
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 800144a:	6d1d      	ldr	r5, [r3, #80]	; 0x50
  RxFifo1ITs &= hfdcan->Instance->IE;
 800144c:	4017      	ands	r7, r2
  Errors &= hfdcan->Instance->IE;
 800144e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 8001450:	6d1e      	ldr	r6, [r3, #80]	; 0x50
  Errors &= hfdcan->Instance->IE;
 8001452:	4015      	ands	r5, r2
  ErrorStatusITs &= hfdcan->Instance->IE;
 8001454:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001456:	4016      	ands	r6, r2
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != 0U)
 8001458:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800145a:	0652      	lsls	r2, r2, #25
{
 800145c:	4604      	mov	r4, r0
  TxEventFifoITs &= hfdcan->Instance->IE;
 800145e:	f409 59e0 	and.w	r9, r9, #7168	; 0x1c00
  RxFifo0ITs &= hfdcan->Instance->IE;
 8001462:	f008 0807 	and.w	r8, r8, #7
  RxFifo1ITs &= hfdcan->Instance->IE;
 8001466:	f007 0738 	and.w	r7, r7, #56	; 0x38
  Errors &= hfdcan->Instance->IE;
 800146a:	f405 0571 	and.w	r5, r5, #15794176	; 0xf10000
  ErrorStatusITs &= hfdcan->Instance->IE;
 800146e:	f406 2660 	and.w	r6, r6, #917504	; 0xe0000
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != 0U)
 8001472:	d502      	bpl.n	800147a <HAL_FDCAN_IRQHandler+0x4a>
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != 0U)
 8001474:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001476:	0651      	lsls	r1, r2, #25
 8001478:	d473      	bmi.n	8001562 <HAL_FDCAN_IRQHandler+0x132>
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE) != 0U)
 800147a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800147c:	05d2      	lsls	r2, r2, #23
 800147e:	d502      	bpl.n	8001486 <HAL_FDCAN_IRQHandler+0x56>
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8001480:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001482:	05d0      	lsls	r0, r2, #23
 8001484:	d45d      	bmi.n	8001542 <HAL_FDCAN_IRQHandler+0x112>
  if (TxEventFifoITs != 0U)
 8001486:	f1b9 0f00 	cmp.w	r9, #0
 800148a:	d14a      	bne.n	8001522 <HAL_FDCAN_IRQHandler+0xf2>
  if (RxFifo0ITs != 0U)
 800148c:	f1b8 0f00 	cmp.w	r8, #0
 8001490:	d137      	bne.n	8001502 <HAL_FDCAN_IRQHandler+0xd2>
  if (RxFifo1ITs != 0U)
 8001492:	2f00      	cmp	r7, #0
 8001494:	d13e      	bne.n	8001514 <HAL_FDCAN_IRQHandler+0xe4>
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY) != 0U)
 8001496:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001498:	0591      	lsls	r1, r2, #22
 800149a:	d502      	bpl.n	80014a2 <HAL_FDCAN_IRQHandler+0x72>
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_FIFO_EMPTY) != 0U)
 800149c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800149e:	0592      	lsls	r2, r2, #22
 80014a0:	d475      	bmi.n	800158e <HAL_FDCAN_IRQHandler+0x15e>
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE) != 0U)
 80014a2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80014a4:	0617      	lsls	r7, r2, #24
 80014a6:	d502      	bpl.n	80014ae <HAL_FDCAN_IRQHandler+0x7e>
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_COMPLETE) != 0U)
 80014a8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80014aa:	0610      	lsls	r0, r2, #24
 80014ac:	d477      	bmi.n	800159e <HAL_FDCAN_IRQHandler+0x16e>
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != 0U)
 80014ae:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80014b0:	0491      	lsls	r1, r2, #18
 80014b2:	d502      	bpl.n	80014ba <HAL_FDCAN_IRQHandler+0x8a>
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMESTAMP_WRAPAROUND) != 0U)
 80014b4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80014b6:	0492      	lsls	r2, r2, #18
 80014b8:	d459      	bmi.n	800156e <HAL_FDCAN_IRQHandler+0x13e>
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED) != 0U)
 80014ba:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80014bc:	0417      	lsls	r7, r2, #16
 80014be:	d502      	bpl.n	80014c6 <HAL_FDCAN_IRQHandler+0x96>
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMEOUT_OCCURRED) != 0U)
 80014c0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80014c2:	0410      	lsls	r0, r2, #16
 80014c4:	d45b      	bmi.n	800157e <HAL_FDCAN_IRQHandler+0x14e>
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE) != 0U)
 80014c6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80014c8:	0451      	lsls	r1, r2, #17
 80014ca:	d509      	bpl.n	80014e0 <HAL_FDCAN_IRQHandler+0xb0>
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RAM_ACCESS_FAILURE) != 0U)
 80014cc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80014ce:	0452      	lsls	r2, r2, #17
 80014d0:	d506      	bpl.n	80014e0 <HAL_FDCAN_IRQHandler+0xb0>
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 80014d2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80014d6:	651a      	str	r2, [r3, #80]	; 0x50
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 80014d8:	6e22      	ldr	r2, [r4, #96]	; 0x60
 80014da:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80014de:	6622      	str	r2, [r4, #96]	; 0x60
  if (ErrorStatusITs != 0U)
 80014e0:	b94e      	cbnz	r6, 80014f6 <HAL_FDCAN_IRQHandler+0xc6>
  if (Errors != 0U)
 80014e2:	b125      	cbz	r5, 80014ee <HAL_FDCAN_IRQHandler+0xbe>
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 80014e4:	6823      	ldr	r3, [r4, #0]
 80014e6:	651d      	str	r5, [r3, #80]	; 0x50
    hfdcan->ErrorCode |= Errors;
 80014e8:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80014ea:	431d      	orrs	r5, r3
 80014ec:	6625      	str	r5, [r4, #96]	; 0x60
  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 80014ee:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80014f0:	bb13      	cbnz	r3, 8001538 <HAL_FDCAN_IRQHandler+0x108>
}
 80014f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 80014f6:	651e      	str	r6, [r3, #80]	; 0x50
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 80014f8:	4631      	mov	r1, r6
 80014fa:	4620      	mov	r0, r4
 80014fc:	f7ff ff96 	bl	800142c <HAL_FDCAN_ErrorStatusCallback>
 8001500:	e7ef      	b.n	80014e2 <HAL_FDCAN_IRQHandler+0xb2>
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8001502:	f8c3 8050 	str.w	r8, [r3, #80]	; 0x50
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 8001506:	4641      	mov	r1, r8
 8001508:	4620      	mov	r0, r4
 800150a:	f7ff f807 	bl	800051c <HAL_FDCAN_RxFifo0Callback>
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 800150e:	6823      	ldr	r3, [r4, #0]
  if (RxFifo1ITs != 0U)
 8001510:	2f00      	cmp	r7, #0
 8001512:	d0c0      	beq.n	8001496 <HAL_FDCAN_IRQHandler+0x66>
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 8001514:	651f      	str	r7, [r3, #80]	; 0x50
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 8001516:	4639      	mov	r1, r7
 8001518:	4620      	mov	r0, r4
 800151a:	f7ff ff77 	bl	800140c <HAL_FDCAN_RxFifo1Callback>
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY) != 0U)
 800151e:	6823      	ldr	r3, [r4, #0]
 8001520:	e7b9      	b.n	8001496 <HAL_FDCAN_IRQHandler+0x66>
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 8001522:	f8c3 9050 	str.w	r9, [r3, #80]	; 0x50
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 8001526:	4649      	mov	r1, r9
 8001528:	4620      	mov	r0, r4
 800152a:	f7ff ff6d 	bl	8001408 <HAL_FDCAN_TxEventFifoCallback>
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 800152e:	6823      	ldr	r3, [r4, #0]
  if (RxFifo0ITs != 0U)
 8001530:	f1b8 0f00 	cmp.w	r8, #0
 8001534:	d0ad      	beq.n	8001492 <HAL_FDCAN_IRQHandler+0x62>
 8001536:	e7e4      	b.n	8001502 <HAL_FDCAN_IRQHandler+0xd2>
    HAL_FDCAN_ErrorCallback(hfdcan);
 8001538:	4620      	mov	r0, r4
 800153a:	f7ff ff75 	bl	8001428 <HAL_FDCAN_ErrorCallback>
}
 800153e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      AbortedBuffers = hfdcan->Instance->TXBCF;
 8001542:	f8d3 10d8 	ldr.w	r1, [r3, #216]	; 0xd8
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 8001546:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 800154a:	4011      	ands	r1, r2
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 800154c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001550:	651a      	str	r2, [r3, #80]	; 0x50
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 8001552:	4620      	mov	r0, r4
 8001554:	f7ff ff60 	bl	8001418 <HAL_FDCAN_TxBufferAbortCallback>
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 8001558:	6823      	ldr	r3, [r4, #0]
  if (TxEventFifoITs != 0U)
 800155a:	f1b9 0f00 	cmp.w	r9, #0
 800155e:	d095      	beq.n	800148c <HAL_FDCAN_IRQHandler+0x5c>
 8001560:	e7df      	b.n	8001522 <HAL_FDCAN_IRQHandler+0xf2>
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 8001562:	2240      	movs	r2, #64	; 0x40
 8001564:	651a      	str	r2, [r3, #80]	; 0x50
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 8001566:	f7ff ff5d 	bl	8001424 <HAL_FDCAN_HighPriorityMessageCallback>
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE) != 0U)
 800156a:	6823      	ldr	r3, [r4, #0]
 800156c:	e785      	b.n	800147a <HAL_FDCAN_IRQHandler+0x4a>
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 800156e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001572:	651a      	str	r2, [r3, #80]	; 0x50
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 8001574:	4620      	mov	r0, r4
 8001576:	f7ff ff51 	bl	800141c <HAL_FDCAN_TimestampWraparoundCallback>
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED) != 0U)
 800157a:	6823      	ldr	r3, [r4, #0]
 800157c:	e79d      	b.n	80014ba <HAL_FDCAN_IRQHandler+0x8a>
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 800157e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001582:	651a      	str	r2, [r3, #80]	; 0x50
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 8001584:	4620      	mov	r0, r4
 8001586:	f7ff ff4b 	bl	8001420 <HAL_FDCAN_TimeoutOccurredCallback>
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE) != 0U)
 800158a:	6823      	ldr	r3, [r4, #0]
 800158c:	e79b      	b.n	80014c6 <HAL_FDCAN_IRQHandler+0x96>
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 800158e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001592:	651a      	str	r2, [r3, #80]	; 0x50
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 8001594:	4620      	mov	r0, r4
 8001596:	f7ff ff3b 	bl	8001410 <HAL_FDCAN_TxFifoEmptyCallback>
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE) != 0U)
 800159a:	6823      	ldr	r3, [r4, #0]
 800159c:	e781      	b.n	80014a2 <HAL_FDCAN_IRQHandler+0x72>
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 800159e:	f8d3 10d4 	ldr.w	r1, [r3, #212]	; 0xd4
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 80015a2:	f8d3 20dc 	ldr.w	r2, [r3, #220]	; 0xdc
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 80015a6:	4011      	ands	r1, r2
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 80015a8:	2280      	movs	r2, #128	; 0x80
 80015aa:	651a      	str	r2, [r3, #80]	; 0x50
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 80015ac:	4620      	mov	r0, r4
 80015ae:	f7ff ff31 	bl	8001414 <HAL_FDCAN_TxBufferCompleteCallback>
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != 0U)
 80015b2:	6823      	ldr	r3, [r4, #0]
 80015b4:	e77b      	b.n	80014ae <HAL_FDCAN_IRQHandler+0x7e>
 80015b6:	bf00      	nop

080015b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80015b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80015bc:	680c      	ldr	r4, [r1, #0]
{
 80015be:	b085      	sub	sp, #20
  while (((GPIO_Init->Pin) >> position) != 0U)
 80015c0:	2c00      	cmp	r4, #0
 80015c2:	f000 8083 	beq.w	80016cc <HAL_GPIO_Init+0x114>
 80015c6:	f04f 0c00 	mov.w	ip, #0
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015ca:	f8df a1d8 	ldr.w	sl, [pc, #472]	; 80017a4 <HAL_GPIO_Init+0x1ec>
  uint32_t position = 0x00U;
 80015ce:	4663      	mov	r3, ip
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80015d0:	f04f 0b01 	mov.w	fp, #1

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80015d4:	4689      	mov	r9, r1
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80015d6:	fa0b f503 	lsl.w	r5, fp, r3
    if (iocurrent != 0x00u)
 80015da:	ea15 0804 	ands.w	r8, r5, r4
 80015de:	d06f      	beq.n	80016c0 <HAL_GPIO_Init+0x108>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80015e0:	f8d9 7004 	ldr.w	r7, [r9, #4]
 80015e4:	f007 0203 	and.w	r2, r7, #3
 80015e8:	1e51      	subs	r1, r2, #1
 80015ea:	2901      	cmp	r1, #1
 80015ec:	d971      	bls.n	80016d2 <HAL_GPIO_Init+0x11a>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80015ee:	2a03      	cmp	r2, #3
 80015f0:	f040 80b0 	bne.w	8001754 <HAL_GPIO_Init+0x19c>
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80015f4:	fa02 f20c 	lsl.w	r2, r2, ip
 80015f8:	43d1      	mvns	r1, r2
      temp = GPIOx->MODER;
 80015fa:	6805      	ldr	r5, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80015fc:	4029      	ands	r1, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80015fe:	430a      	orrs	r2, r1
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001600:	f417 3f40 	tst.w	r7, #196608	; 0x30000
      GPIOx->MODER = temp;
 8001604:	6002      	str	r2, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001606:	d05b      	beq.n	80016c0 <HAL_GPIO_Init+0x108>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001608:	f8da 2060 	ldr.w	r2, [sl, #96]	; 0x60
 800160c:	f042 0201 	orr.w	r2, r2, #1
 8001610:	f8ca 2060 	str.w	r2, [sl, #96]	; 0x60
 8001614:	f8da 2060 	ldr.w	r2, [sl, #96]	; 0x60
 8001618:	f002 0201 	and.w	r2, r2, #1
 800161c:	9203      	str	r2, [sp, #12]
 800161e:	9a03      	ldr	r2, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2U];
 8001620:	f023 0203 	bic.w	r2, r3, #3
 8001624:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8001628:	f502 3280 	add.w	r2, r2, #65536	; 0x10000
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800162c:	f003 0503 	and.w	r5, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 8001630:	6891      	ldr	r1, [r2, #8]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001632:	00ad      	lsls	r5, r5, #2
 8001634:	260f      	movs	r6, #15
 8001636:	fa06 fe05 	lsl.w	lr, r6, r5
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800163a:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800163e:	ea21 010e 	bic.w	r1, r1, lr
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001642:	d019      	beq.n	8001678 <HAL_GPIO_Init+0xc0>
 8001644:	4e51      	ldr	r6, [pc, #324]	; (800178c <HAL_GPIO_Init+0x1d4>)
 8001646:	42b0      	cmp	r0, r6
 8001648:	f000 808f 	beq.w	800176a <HAL_GPIO_Init+0x1b2>
 800164c:	4e50      	ldr	r6, [pc, #320]	; (8001790 <HAL_GPIO_Init+0x1d8>)
 800164e:	42b0      	cmp	r0, r6
 8001650:	f000 808f 	beq.w	8001772 <HAL_GPIO_Init+0x1ba>
 8001654:	4e4f      	ldr	r6, [pc, #316]	; (8001794 <HAL_GPIO_Init+0x1dc>)
 8001656:	42b0      	cmp	r0, r6
 8001658:	f000 8081 	beq.w	800175e <HAL_GPIO_Init+0x1a6>
 800165c:	4e4e      	ldr	r6, [pc, #312]	; (8001798 <HAL_GPIO_Init+0x1e0>)
 800165e:	42b0      	cmp	r0, r6
 8001660:	f000 808d 	beq.w	800177e <HAL_GPIO_Init+0x1c6>
 8001664:	4e4d      	ldr	r6, [pc, #308]	; (800179c <HAL_GPIO_Init+0x1e4>)
 8001666:	42b0      	cmp	r0, r6
 8001668:	bf0c      	ite	eq
 800166a:	f04f 0e05 	moveq.w	lr, #5
 800166e:	f04f 0e06 	movne.w	lr, #6
 8001672:	fa0e f505 	lsl.w	r5, lr, r5
 8001676:	4329      	orrs	r1, r5
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001678:	6091      	str	r1, [r2, #8]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800167a:	4a49      	ldr	r2, [pc, #292]	; (80017a0 <HAL_GPIO_Init+0x1e8>)
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
        {
          temp |= iocurrent;
        }
        EXTI->RTSR1 = temp;
 800167c:	4948      	ldr	r1, [pc, #288]	; (80017a0 <HAL_GPIO_Init+0x1e8>)
        temp = EXTI->RTSR1;
 800167e:	6892      	ldr	r2, [r2, #8]
        temp &= ~(iocurrent);
 8001680:	ea6f 0508 	mvn.w	r5, r8
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001684:	02fe      	lsls	r6, r7, #11
        temp &= ~(iocurrent);
 8001686:	bf54      	ite	pl
 8001688:	402a      	andpl	r2, r5
          temp |= iocurrent;
 800168a:	ea48 0202 	orrmi.w	r2, r8, r2
        EXTI->RTSR1 = temp;
 800168e:	608a      	str	r2, [r1, #8]

        temp = EXTI->FTSR1;
 8001690:	68ca      	ldr	r2, [r1, #12]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001692:	02b9      	lsls	r1, r7, #10
        {
          temp |= iocurrent;
        }
        EXTI->FTSR1 = temp;
 8001694:	4942      	ldr	r1, [pc, #264]	; (80017a0 <HAL_GPIO_Init+0x1e8>)
        temp &= ~(iocurrent);
 8001696:	bf54      	ite	pl
 8001698:	402a      	andpl	r2, r5
          temp |= iocurrent;
 800169a:	ea48 0202 	orrmi.w	r2, r8, r2
        EXTI->FTSR1 = temp;
 800169e:	60ca      	str	r2, [r1, #12]

        temp = EXTI->EMR1;
 80016a0:	6849      	ldr	r1, [r1, #4]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
        {
          temp |= iocurrent;
        }
        EXTI->EMR1 = temp;
 80016a2:	4a3f      	ldr	r2, [pc, #252]	; (80017a0 <HAL_GPIO_Init+0x1e8>)
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80016a4:	03be      	lsls	r6, r7, #14
        temp &= ~(iocurrent);
 80016a6:	bf54      	ite	pl
 80016a8:	4029      	andpl	r1, r5
          temp |= iocurrent;
 80016aa:	ea48 0101 	orrmi.w	r1, r8, r1
        EXTI->EMR1 = temp;
 80016ae:	6051      	str	r1, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80016b0:	6812      	ldr	r2, [r2, #0]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80016b2:	03f9      	lsls	r1, r7, #15
        {
          temp |= iocurrent;
        }
        EXTI->IMR1 = temp;
 80016b4:	493a      	ldr	r1, [pc, #232]	; (80017a0 <HAL_GPIO_Init+0x1e8>)
        temp &= ~(iocurrent);
 80016b6:	bf54      	ite	pl
 80016b8:	402a      	andpl	r2, r5
          temp |= iocurrent;
 80016ba:	ea48 0202 	orrmi.w	r2, r8, r2
        EXTI->IMR1 = temp;
 80016be:	600a      	str	r2, [r1, #0]
      }
    }

    position++;
 80016c0:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0U)
 80016c2:	fa34 f203 	lsrs.w	r2, r4, r3
 80016c6:	f10c 0c02 	add.w	ip, ip, #2
 80016ca:	d184      	bne.n	80015d6 <HAL_GPIO_Init+0x1e>
  }
}
 80016cc:	b005      	add	sp, #20
 80016ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp = GPIOx->OSPEEDR;
 80016d2:	6881      	ldr	r1, [r0, #8]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80016d4:	f8d9 600c 	ldr.w	r6, [r9, #12]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80016d8:	f04f 0e03 	mov.w	lr, #3
 80016dc:	fa0e fe0c 	lsl.w	lr, lr, ip
 80016e0:	ea21 010e 	bic.w	r1, r1, lr
        temp |= (GPIO_Init->Speed << (position * 2U));
 80016e4:	fa06 f60c 	lsl.w	r6, r6, ip
 80016e8:	4331      	orrs	r1, r6
        GPIOx->OSPEEDR = temp;
 80016ea:	6081      	str	r1, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80016ec:	ea6f 010e 	mvn.w	r1, lr
        temp = GPIOx->OTYPER;
 80016f0:	f8d0 e004 	ldr.w	lr, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80016f4:	ea2e 0e05 	bic.w	lr, lr, r5
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80016f8:	f3c7 1500 	ubfx	r5, r7, #4, #1
 80016fc:	409d      	lsls	r5, r3
 80016fe:	ea45 050e 	orr.w	r5, r5, lr
        GPIOx->OTYPER = temp;
 8001702:	6045      	str	r5, [r0, #4]
        temp = GPIOx->PUPDR;
 8001704:	68c5      	ldr	r5, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001706:	ea05 0e01 	and.w	lr, r5, r1
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800170a:	f8d9 5008 	ldr.w	r5, [r9, #8]
 800170e:	fa05 f50c 	lsl.w	r5, r5, ip
 8001712:	ea45 050e 	orr.w	r5, r5, lr
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001716:	2a02      	cmp	r2, #2
        GPIOx->PUPDR = temp;
 8001718:	60c5      	str	r5, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800171a:	fa02 f20c 	lsl.w	r2, r2, ip
 800171e:	f47f af6c 	bne.w	80015fa <HAL_GPIO_Init+0x42>
        temp = GPIOx->AFR[position >> 3U];
 8001722:	08dd      	lsrs	r5, r3, #3
 8001724:	eb00 0585 	add.w	r5, r0, r5, lsl #2
 8001728:	9501      	str	r5, [sp, #4]
 800172a:	6a2e      	ldr	r6, [r5, #32]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800172c:	f8d9 5010 	ldr.w	r5, [r9, #16]
        temp = GPIOx->AFR[position >> 3U];
 8001730:	9600      	str	r6, [sp, #0]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001732:	f003 0e07 	and.w	lr, r3, #7
 8001736:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 800173a:	260f      	movs	r6, #15
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800173c:	fa05 f50e 	lsl.w	r5, r5, lr
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001740:	fa06 fe0e 	lsl.w	lr, r6, lr
 8001744:	9e00      	ldr	r6, [sp, #0]
 8001746:	ea26 0e0e 	bic.w	lr, r6, lr
        GPIOx->AFR[position >> 3U] = temp;
 800174a:	9e01      	ldr	r6, [sp, #4]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800174c:	ea45 050e 	orr.w	r5, r5, lr
        GPIOx->AFR[position >> 3U] = temp;
 8001750:	6235      	str	r5, [r6, #32]
 8001752:	e752      	b.n	80015fa <HAL_GPIO_Init+0x42>
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001754:	2103      	movs	r1, #3
 8001756:	fa01 f10c 	lsl.w	r1, r1, ip
 800175a:	43c9      	mvns	r1, r1
 800175c:	e7d2      	b.n	8001704 <HAL_GPIO_Init+0x14c>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800175e:	f04f 0e03 	mov.w	lr, #3
 8001762:	fa0e f505 	lsl.w	r5, lr, r5
 8001766:	4329      	orrs	r1, r5
 8001768:	e786      	b.n	8001678 <HAL_GPIO_Init+0xc0>
 800176a:	fa0b f505 	lsl.w	r5, fp, r5
 800176e:	4329      	orrs	r1, r5
 8001770:	e782      	b.n	8001678 <HAL_GPIO_Init+0xc0>
 8001772:	f04f 0e02 	mov.w	lr, #2
 8001776:	fa0e f505 	lsl.w	r5, lr, r5
 800177a:	4329      	orrs	r1, r5
 800177c:	e77c      	b.n	8001678 <HAL_GPIO_Init+0xc0>
 800177e:	f04f 0e04 	mov.w	lr, #4
 8001782:	fa0e f505 	lsl.w	r5, lr, r5
 8001786:	4329      	orrs	r1, r5
 8001788:	e776      	b.n	8001678 <HAL_GPIO_Init+0xc0>
 800178a:	bf00      	nop
 800178c:	48000400 	.word	0x48000400
 8001790:	48000800 	.word	0x48000800
 8001794:	48000c00 	.word	0x48000c00
 8001798:	48001000 	.word	0x48001000
 800179c:	48001400 	.word	0x48001400
 80017a0:	40010400 	.word	0x40010400
 80017a4:	40021000 	.word	0x40021000

080017a8 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80017a8:	b10a      	cbz	r2, 80017ae <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80017aa:	6181      	str	r1, [r0, #24]
 80017ac:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80017ae:	6281      	str	r1, [r0, #40]	; 0x28
  }
}
 80017b0:	4770      	bx	lr
 80017b2:	bf00      	nop

080017b4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80017b4:	b410      	push	{r4}
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80017b6:	4a3b      	ldr	r2, [pc, #236]	; (80018a4 <HAL_PWREx_ControlVoltageScaling+0xf0>)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80017b8:	b970      	cbnz	r0, 80017d8 <HAL_PWREx_ControlVoltageScaling+0x24>
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80017ba:	6813      	ldr	r3, [r2, #0]
 80017bc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80017c0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80017c4:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80017c8:	d023      	beq.n	8001812 <HAL_PWREx_ControlVoltageScaling+0x5e>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80017ca:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
}
 80017ce:	f85d 4b04 	ldr.w	r4, [sp], #4
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80017d2:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
}
 80017d6:	4770      	bx	lr
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80017d8:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 80017dc:	d009      	beq.n	80017f2 <HAL_PWREx_ControlVoltageScaling+0x3e>
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80017de:	6813      	ldr	r3, [r2, #0]
}
 80017e0:	f85d 4b04 	ldr.w	r4, [sp], #4
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80017e4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80017e8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
  return HAL_OK;
 80017ec:	2000      	movs	r0, #0
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80017ee:	6013      	str	r3, [r2, #0]
}
 80017f0:	4770      	bx	lr
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80017f2:	6813      	ldr	r3, [r2, #0]
 80017f4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80017f8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80017fc:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001800:	d02f      	beq.n	8001862 <HAL_PWREx_ControlVoltageScaling+0xae>
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001802:	f443 7380 	orr.w	r3, r3, #256	; 0x100
  return HAL_OK;
 8001806:	2000      	movs	r0, #0
}
 8001808:	f85d 4b04 	ldr.w	r4, [sp], #4
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800180c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
}
 8001810:	4770      	bx	lr
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001812:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001816:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800181a:	6811      	ldr	r1, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800181c:	4c22      	ldr	r4, [pc, #136]	; (80018a8 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 800181e:	4823      	ldr	r0, [pc, #140]	; (80018ac <HAL_PWREx_ControlVoltageScaling+0xf8>)
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001820:	f421 61c0 	bic.w	r1, r1, #1536	; 0x600
 8001824:	f441 7100 	orr.w	r1, r1, #512	; 0x200
 8001828:	6011      	str	r1, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800182a:	6823      	ldr	r3, [r4, #0]
 800182c:	2132      	movs	r1, #50	; 0x32
 800182e:	fb01 f303 	mul.w	r3, r1, r3
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001832:	6951      	ldr	r1, [r2, #20]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001834:	fba0 0303 	umull	r0, r3, r0, r3
 8001838:	0c9b      	lsrs	r3, r3, #18
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800183a:	0548      	lsls	r0, r1, #21
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800183c:	f103 0301 	add.w	r3, r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001840:	d506      	bpl.n	8001850 <HAL_PWREx_ControlVoltageScaling+0x9c>
 8001842:	e000      	b.n	8001846 <HAL_PWREx_ControlVoltageScaling+0x92>
 8001844:	b123      	cbz	r3, 8001850 <HAL_PWREx_ControlVoltageScaling+0x9c>
 8001846:	6951      	ldr	r1, [r2, #20]
 8001848:	0549      	lsls	r1, r1, #21
        wait_loop_index--;
 800184a:	f103 33ff 	add.w	r3, r3, #4294967295
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800184e:	d4f9      	bmi.n	8001844 <HAL_PWREx_ControlVoltageScaling+0x90>
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001850:	4b14      	ldr	r3, [pc, #80]	; (80018a4 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8001852:	695b      	ldr	r3, [r3, #20]
 8001854:	055c      	lsls	r4, r3, #21
  return HAL_OK;
 8001856:	bf54      	ite	pl
 8001858:	2000      	movpl	r0, #0
        return HAL_TIMEOUT;
 800185a:	2003      	movmi	r0, #3
}
 800185c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001860:	4770      	bx	lr
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001862:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001866:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800186a:	6811      	ldr	r1, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800186c:	4c0e      	ldr	r4, [pc, #56]	; (80018a8 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 800186e:	480f      	ldr	r0, [pc, #60]	; (80018ac <HAL_PWREx_ControlVoltageScaling+0xf8>)
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001870:	f421 61c0 	bic.w	r1, r1, #1536	; 0x600
 8001874:	f441 7100 	orr.w	r1, r1, #512	; 0x200
 8001878:	6011      	str	r1, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800187a:	6823      	ldr	r3, [r4, #0]
 800187c:	2132      	movs	r1, #50	; 0x32
 800187e:	fb01 f303 	mul.w	r3, r1, r3
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001882:	6951      	ldr	r1, [r2, #20]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001884:	fba0 0303 	umull	r0, r3, r0, r3
 8001888:	0c9b      	lsrs	r3, r3, #18
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800188a:	0548      	lsls	r0, r1, #21
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800188c:	f103 0301 	add.w	r3, r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001890:	d5de      	bpl.n	8001850 <HAL_PWREx_ControlVoltageScaling+0x9c>
 8001892:	e001      	b.n	8001898 <HAL_PWREx_ControlVoltageScaling+0xe4>
 8001894:	2b00      	cmp	r3, #0
 8001896:	d0db      	beq.n	8001850 <HAL_PWREx_ControlVoltageScaling+0x9c>
 8001898:	6951      	ldr	r1, [r2, #20]
 800189a:	0549      	lsls	r1, r1, #21
        wait_loop_index--;
 800189c:	f103 33ff 	add.w	r3, r3, #4294967295
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80018a0:	d5d6      	bpl.n	8001850 <HAL_PWREx_ControlVoltageScaling+0x9c>
 80018a2:	e7f7      	b.n	8001894 <HAL_PWREx_ControlVoltageScaling+0xe0>
 80018a4:	40007000 	.word	0x40007000
 80018a8:	20000000 	.word	0x20000000
 80018ac:	431bde83 	.word	0x431bde83

080018b0 <HAL_RCC_OscConfig>:
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80018b0:	2800      	cmp	r0, #0
 80018b2:	f000 81c3 	beq.w	8001c3c <HAL_RCC_OscConfig+0x38c>
{
 80018b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80018ba:	6803      	ldr	r3, [r0, #0]
 80018bc:	07d9      	lsls	r1, r3, #31
{
 80018be:	b082      	sub	sp, #8
 80018c0:	4604      	mov	r4, r0
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80018c2:	d52d      	bpl.n	8001920 <HAL_RCC_OscConfig+0x70>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80018c4:	49a6      	ldr	r1, [pc, #664]	; (8001b60 <HAL_RCC_OscConfig+0x2b0>)
 80018c6:	688a      	ldr	r2, [r1, #8]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80018c8:	68c9      	ldr	r1, [r1, #12]
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80018ca:	f002 020c 	and.w	r2, r2, #12

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80018ce:	2a0c      	cmp	r2, #12
 80018d0:	f000 810a 	beq.w	8001ae8 <HAL_RCC_OscConfig+0x238>
 80018d4:	2a08      	cmp	r2, #8
 80018d6:	f000 810c 	beq.w	8001af2 <HAL_RCC_OscConfig+0x242>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80018da:	6863      	ldr	r3, [r4, #4]
 80018dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80018e0:	f000 8133 	beq.w	8001b4a <HAL_RCC_OscConfig+0x29a>
 80018e4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80018e8:	f000 819b 	beq.w	8001c22 <HAL_RCC_OscConfig+0x372>
 80018ec:	4d9c      	ldr	r5, [pc, #624]	; (8001b60 <HAL_RCC_OscConfig+0x2b0>)
 80018ee:	682a      	ldr	r2, [r5, #0]
 80018f0:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80018f4:	602a      	str	r2, [r5, #0]
 80018f6:	682a      	ldr	r2, [r5, #0]
 80018f8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80018fc:	602a      	str	r2, [r5, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80018fe:	2b00      	cmp	r3, #0
 8001900:	f040 8128 	bne.w	8001b54 <HAL_RCC_OscConfig+0x2a4>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001904:	f7ff f9f2 	bl	8000cec <HAL_GetTick>
 8001908:	4606      	mov	r6, r0

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800190a:	e005      	b.n	8001918 <HAL_RCC_OscConfig+0x68>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800190c:	f7ff f9ee 	bl	8000cec <HAL_GetTick>
 8001910:	1b80      	subs	r0, r0, r6
 8001912:	2864      	cmp	r0, #100	; 0x64
 8001914:	f200 8142 	bhi.w	8001b9c <HAL_RCC_OscConfig+0x2ec>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001918:	682b      	ldr	r3, [r5, #0]
 800191a:	039f      	lsls	r7, r3, #14
 800191c:	d4f6      	bmi.n	800190c <HAL_RCC_OscConfig+0x5c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800191e:	6823      	ldr	r3, [r4, #0]
 8001920:	079e      	lsls	r6, r3, #30
 8001922:	d528      	bpl.n	8001976 <HAL_RCC_OscConfig+0xc6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001924:	4a8e      	ldr	r2, [pc, #568]	; (8001b60 <HAL_RCC_OscConfig+0x2b0>)
 8001926:	6893      	ldr	r3, [r2, #8]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001928:	68d2      	ldr	r2, [r2, #12]
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800192a:	f003 030c 	and.w	r3, r3, #12
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800192e:	2b0c      	cmp	r3, #12
 8001930:	f000 80ec 	beq.w	8001b0c <HAL_RCC_OscConfig+0x25c>
 8001934:	2b04      	cmp	r3, #4
 8001936:	f000 80ee 	beq.w	8001b16 <HAL_RCC_OscConfig+0x266>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800193a:	68e3      	ldr	r3, [r4, #12]
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800193c:	4d88      	ldr	r5, [pc, #544]	; (8001b60 <HAL_RCC_OscConfig+0x2b0>)
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800193e:	2b00      	cmp	r3, #0
 8001940:	f000 811d 	beq.w	8001b7e <HAL_RCC_OscConfig+0x2ce>
        __HAL_RCC_HSI_ENABLE();
 8001944:	682b      	ldr	r3, [r5, #0]
 8001946:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800194a:	602b      	str	r3, [r5, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800194c:	f7ff f9ce 	bl	8000cec <HAL_GetTick>
 8001950:	4606      	mov	r6, r0

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001952:	e005      	b.n	8001960 <HAL_RCC_OscConfig+0xb0>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001954:	f7ff f9ca 	bl	8000cec <HAL_GetTick>
 8001958:	1b80      	subs	r0, r0, r6
 800195a:	2802      	cmp	r0, #2
 800195c:	f200 811e 	bhi.w	8001b9c <HAL_RCC_OscConfig+0x2ec>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001960:	682b      	ldr	r3, [r5, #0]
 8001962:	0558      	lsls	r0, r3, #21
 8001964:	d5f6      	bpl.n	8001954 <HAL_RCC_OscConfig+0xa4>
            return HAL_TIMEOUT;
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001966:	686b      	ldr	r3, [r5, #4]
 8001968:	6922      	ldr	r2, [r4, #16]
 800196a:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800196e:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8001972:	606b      	str	r3, [r5, #4]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001974:	6823      	ldr	r3, [r4, #0]
 8001976:	071a      	lsls	r2, r3, #28
 8001978:	d519      	bpl.n	80019ae <HAL_RCC_OscConfig+0xfe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800197a:	6963      	ldr	r3, [r4, #20]
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800197c:	4d78      	ldr	r5, [pc, #480]	; (8001b60 <HAL_RCC_OscConfig+0x2b0>)
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800197e:	2b00      	cmp	r3, #0
 8001980:	f000 809e 	beq.w	8001ac0 <HAL_RCC_OscConfig+0x210>
      __HAL_RCC_LSI_ENABLE();
 8001984:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 8001988:	f043 0301 	orr.w	r3, r3, #1
 800198c:	f8c5 3094 	str.w	r3, [r5, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001990:	f7ff f9ac 	bl	8000cec <HAL_GetTick>
 8001994:	4606      	mov	r6, r0

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001996:	e005      	b.n	80019a4 <HAL_RCC_OscConfig+0xf4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001998:	f7ff f9a8 	bl	8000cec <HAL_GetTick>
 800199c:	1b80      	subs	r0, r0, r6
 800199e:	2802      	cmp	r0, #2
 80019a0:	f200 80fc 	bhi.w	8001b9c <HAL_RCC_OscConfig+0x2ec>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80019a4:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 80019a8:	079f      	lsls	r7, r3, #30
 80019aa:	d5f5      	bpl.n	8001998 <HAL_RCC_OscConfig+0xe8>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80019ac:	6823      	ldr	r3, [r4, #0]
 80019ae:	0759      	lsls	r1, r3, #29
 80019b0:	d541      	bpl.n	8001a36 <HAL_RCC_OscConfig+0x186>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80019b2:	4b6b      	ldr	r3, [pc, #428]	; (8001b60 <HAL_RCC_OscConfig+0x2b0>)
 80019b4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80019b6:	00d2      	lsls	r2, r2, #3
 80019b8:	f100 80f4 	bmi.w	8001ba4 <HAL_RCC_OscConfig+0x2f4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80019bc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80019be:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80019c2:	659a      	str	r2, [r3, #88]	; 0x58
 80019c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019ca:	9301      	str	r3, [sp, #4]
 80019cc:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80019ce:	2501      	movs	r5, #1
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80019d0:	4e64      	ldr	r6, [pc, #400]	; (8001b64 <HAL_RCC_OscConfig+0x2b4>)
 80019d2:	6833      	ldr	r3, [r6, #0]
 80019d4:	05df      	lsls	r7, r3, #23
 80019d6:	f140 8113 	bpl.w	8001c00 <HAL_RCC_OscConfig+0x350>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80019da:	68a3      	ldr	r3, [r4, #8]
 80019dc:	2b01      	cmp	r3, #1
 80019de:	f000 80e3 	beq.w	8001ba8 <HAL_RCC_OscConfig+0x2f8>
 80019e2:	2b05      	cmp	r3, #5
 80019e4:	f000 8169 	beq.w	8001cba <HAL_RCC_OscConfig+0x40a>
 80019e8:	4e5d      	ldr	r6, [pc, #372]	; (8001b60 <HAL_RCC_OscConfig+0x2b0>)
 80019ea:	f8d6 2090 	ldr.w	r2, [r6, #144]	; 0x90
 80019ee:	f022 0201 	bic.w	r2, r2, #1
 80019f2:	f8c6 2090 	str.w	r2, [r6, #144]	; 0x90
 80019f6:	f8d6 2090 	ldr.w	r2, [r6, #144]	; 0x90
 80019fa:	f022 0204 	bic.w	r2, r2, #4
 80019fe:	f8c6 2090 	str.w	r2, [r6, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	f040 80d7 	bne.w	8001bb6 <HAL_RCC_OscConfig+0x306>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a08:	f7ff f970 	bl	8000cec <HAL_GetTick>

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a0c:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8001a10:	4607      	mov	r7, r0
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001a12:	e005      	b.n	8001a20 <HAL_RCC_OscConfig+0x170>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a14:	f7ff f96a 	bl	8000cec <HAL_GetTick>
 8001a18:	1bc0      	subs	r0, r0, r7
 8001a1a:	4540      	cmp	r0, r8
 8001a1c:	f200 80be 	bhi.w	8001b9c <HAL_RCC_OscConfig+0x2ec>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001a20:	f8d6 3090 	ldr.w	r3, [r6, #144]	; 0x90
 8001a24:	079a      	lsls	r2, r3, #30
 8001a26:	d4f5      	bmi.n	8001a14 <HAL_RCC_OscConfig+0x164>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001a28:	b125      	cbz	r5, 8001a34 <HAL_RCC_OscConfig+0x184>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a2a:	4a4d      	ldr	r2, [pc, #308]	; (8001b60 <HAL_RCC_OscConfig+0x2b0>)
 8001a2c:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8001a2e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001a32:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001a34:	6823      	ldr	r3, [r4, #0]
 8001a36:	069b      	lsls	r3, r3, #26
 8001a38:	d518      	bpl.n	8001a6c <HAL_RCC_OscConfig+0x1bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001a3a:	69a3      	ldr	r3, [r4, #24]
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001a3c:	4d48      	ldr	r5, [pc, #288]	; (8001b60 <HAL_RCC_OscConfig+0x2b0>)
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	f000 80ca 	beq.w	8001bd8 <HAL_RCC_OscConfig+0x328>
      __HAL_RCC_HSI48_ENABLE();
 8001a44:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 8001a48:	f043 0301 	orr.w	r3, r3, #1
 8001a4c:	f8c5 3098 	str.w	r3, [r5, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a50:	f7ff f94c 	bl	8000cec <HAL_GetTick>
 8001a54:	4606      	mov	r6, r0

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001a56:	e005      	b.n	8001a64 <HAL_RCC_OscConfig+0x1b4>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001a58:	f7ff f948 	bl	8000cec <HAL_GetTick>
 8001a5c:	1b80      	subs	r0, r0, r6
 8001a5e:	2802      	cmp	r0, #2
 8001a60:	f200 809c 	bhi.w	8001b9c <HAL_RCC_OscConfig+0x2ec>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001a64:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 8001a68:	079f      	lsls	r7, r3, #30
 8001a6a:	d5f5      	bpl.n	8001a58 <HAL_RCC_OscConfig+0x1a8>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001a6c:	69e0      	ldr	r0, [r4, #28]
 8001a6e:	b318      	cbz	r0, 8001ab8 <HAL_RCC_OscConfig+0x208>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001a70:	4d3b      	ldr	r5, [pc, #236]	; (8001b60 <HAL_RCC_OscConfig+0x2b0>)
 8001a72:	68ab      	ldr	r3, [r5, #8]
 8001a74:	f003 030c 	and.w	r3, r3, #12
 8001a78:	2b0c      	cmp	r3, #12
 8001a7a:	f000 812c 	beq.w	8001cd6 <HAL_RCC_OscConfig+0x426>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a7e:	682b      	ldr	r3, [r5, #0]
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001a80:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 8001a82:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001a86:	602b      	str	r3, [r5, #0]
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001a88:	f000 80da 	beq.w	8001c40 <HAL_RCC_OscConfig+0x390>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8001a8c:	68eb      	ldr	r3, [r5, #12]
 8001a8e:	f023 0303 	bic.w	r3, r3, #3
 8001a92:	60eb      	str	r3, [r5, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8001a94:	68eb      	ldr	r3, [r5, #12]
 8001a96:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8001a9a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a9e:	60eb      	str	r3, [r5, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001aa0:	f7ff f924 	bl	8000cec <HAL_GetTick>
 8001aa4:	4604      	mov	r4, r0

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001aa6:	e004      	b.n	8001ab2 <HAL_RCC_OscConfig+0x202>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001aa8:	f7ff f920 	bl	8000cec <HAL_GetTick>
 8001aac:	1b00      	subs	r0, r0, r4
 8001aae:	2802      	cmp	r0, #2
 8001ab0:	d874      	bhi.n	8001b9c <HAL_RCC_OscConfig+0x2ec>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ab2:	682b      	ldr	r3, [r5, #0]
 8001ab4:	019b      	lsls	r3, r3, #6
 8001ab6:	d4f7      	bmi.n	8001aa8 <HAL_RCC_OscConfig+0x1f8>
      }
    }
  }
  }

  return HAL_OK;
 8001ab8:	2000      	movs	r0, #0
}
 8001aba:	b002      	add	sp, #8
 8001abc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_LSI_DISABLE();
 8001ac0:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 8001ac4:	f023 0301 	bic.w	r3, r3, #1
 8001ac8:	f8c5 3094 	str.w	r3, [r5, #148]	; 0x94
      tickstart = HAL_GetTick();
 8001acc:	f7ff f90e 	bl	8000cec <HAL_GetTick>
 8001ad0:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001ad2:	e004      	b.n	8001ade <HAL_RCC_OscConfig+0x22e>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ad4:	f7ff f90a 	bl	8000cec <HAL_GetTick>
 8001ad8:	1b80      	subs	r0, r0, r6
 8001ada:	2802      	cmp	r0, #2
 8001adc:	d85e      	bhi.n	8001b9c <HAL_RCC_OscConfig+0x2ec>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001ade:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 8001ae2:	0798      	lsls	r0, r3, #30
 8001ae4:	d4f6      	bmi.n	8001ad4 <HAL_RCC_OscConfig+0x224>
 8001ae6:	e761      	b.n	80019ac <HAL_RCC_OscConfig+0xfc>
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001ae8:	f001 0103 	and.w	r1, r1, #3
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8001aec:	2903      	cmp	r1, #3
 8001aee:	f47f aef4 	bne.w	80018da <HAL_RCC_OscConfig+0x2a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001af2:	4a1b      	ldr	r2, [pc, #108]	; (8001b60 <HAL_RCC_OscConfig+0x2b0>)
 8001af4:	6812      	ldr	r2, [r2, #0]
 8001af6:	0392      	lsls	r2, r2, #14
 8001af8:	f57f af12 	bpl.w	8001920 <HAL_RCC_OscConfig+0x70>
 8001afc:	6862      	ldr	r2, [r4, #4]
 8001afe:	2a00      	cmp	r2, #0
 8001b00:	f47f af0e 	bne.w	8001920 <HAL_RCC_OscConfig+0x70>
        return HAL_ERROR;
 8001b04:	2001      	movs	r0, #1
}
 8001b06:	b002      	add	sp, #8
 8001b08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001b0c:	f002 0203 	and.w	r2, r2, #3
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8001b10:	2a02      	cmp	r2, #2
 8001b12:	f47f af12 	bne.w	800193a <HAL_RCC_OscConfig+0x8a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001b16:	4b12      	ldr	r3, [pc, #72]	; (8001b60 <HAL_RCC_OscConfig+0x2b0>)
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	055d      	lsls	r5, r3, #21
 8001b1c:	d502      	bpl.n	8001b24 <HAL_RCC_OscConfig+0x274>
 8001b1e:	68e3      	ldr	r3, [r4, #12]
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d0ef      	beq.n	8001b04 <HAL_RCC_OscConfig+0x254>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b24:	4a0e      	ldr	r2, [pc, #56]	; (8001b60 <HAL_RCC_OscConfig+0x2b0>)
 8001b26:	6920      	ldr	r0, [r4, #16]
 8001b28:	6853      	ldr	r3, [r2, #4]
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001b2a:	490f      	ldr	r1, [pc, #60]	; (8001b68 <HAL_RCC_OscConfig+0x2b8>)
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b2c:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8001b30:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 8001b34:	6053      	str	r3, [r2, #4]
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001b36:	6808      	ldr	r0, [r1, #0]
 8001b38:	f7ff f896 	bl	8000c68 <HAL_InitTick>
 8001b3c:	2800      	cmp	r0, #0
 8001b3e:	d1e1      	bne.n	8001b04 <HAL_RCC_OscConfig+0x254>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b40:	6823      	ldr	r3, [r4, #0]
 8001b42:	071a      	lsls	r2, r3, #28
 8001b44:	f57f af33 	bpl.w	80019ae <HAL_RCC_OscConfig+0xfe>
 8001b48:	e717      	b.n	800197a <HAL_RCC_OscConfig+0xca>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b4a:	4a05      	ldr	r2, [pc, #20]	; (8001b60 <HAL_RCC_OscConfig+0x2b0>)
 8001b4c:	6813      	ldr	r3, [r2, #0]
 8001b4e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b52:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8001b54:	f7ff f8ca 	bl	8000cec <HAL_GetTick>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001b58:	4e01      	ldr	r6, [pc, #4]	; (8001b60 <HAL_RCC_OscConfig+0x2b0>)
        tickstart = HAL_GetTick();
 8001b5a:	4605      	mov	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001b5c:	e00b      	b.n	8001b76 <HAL_RCC_OscConfig+0x2c6>
 8001b5e:	bf00      	nop
 8001b60:	40021000 	.word	0x40021000
 8001b64:	40007000 	.word	0x40007000
 8001b68:	20000008 	.word	0x20000008
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b6c:	f7ff f8be 	bl	8000cec <HAL_GetTick>
 8001b70:	1b40      	subs	r0, r0, r5
 8001b72:	2864      	cmp	r0, #100	; 0x64
 8001b74:	d812      	bhi.n	8001b9c <HAL_RCC_OscConfig+0x2ec>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001b76:	6833      	ldr	r3, [r6, #0]
 8001b78:	039b      	lsls	r3, r3, #14
 8001b7a:	d5f7      	bpl.n	8001b6c <HAL_RCC_OscConfig+0x2bc>
 8001b7c:	e6cf      	b.n	800191e <HAL_RCC_OscConfig+0x6e>
        __HAL_RCC_HSI_DISABLE();
 8001b7e:	682b      	ldr	r3, [r5, #0]
 8001b80:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001b84:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001b86:	f7ff f8b1 	bl	8000cec <HAL_GetTick>
 8001b8a:	4606      	mov	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001b8c:	682b      	ldr	r3, [r5, #0]
 8001b8e:	0559      	lsls	r1, r3, #21
 8001b90:	d5d6      	bpl.n	8001b40 <HAL_RCC_OscConfig+0x290>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b92:	f7ff f8ab 	bl	8000cec <HAL_GetTick>
 8001b96:	1b80      	subs	r0, r0, r6
 8001b98:	2802      	cmp	r0, #2
 8001b9a:	d9f7      	bls.n	8001b8c <HAL_RCC_OscConfig+0x2dc>
            return HAL_TIMEOUT;
 8001b9c:	2003      	movs	r0, #3
}
 8001b9e:	b002      	add	sp, #8
 8001ba0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    FlagStatus       pwrclkchanged = RESET;
 8001ba4:	2500      	movs	r5, #0
 8001ba6:	e713      	b.n	80019d0 <HAL_RCC_OscConfig+0x120>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ba8:	4a65      	ldr	r2, [pc, #404]	; (8001d40 <HAL_RCC_OscConfig+0x490>)
 8001baa:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8001bae:	f043 0301 	orr.w	r3, r3, #1
 8001bb2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      tickstart = HAL_GetTick();
 8001bb6:	f7ff f899 	bl	8000cec <HAL_GetTick>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001bba:	4f61      	ldr	r7, [pc, #388]	; (8001d40 <HAL_RCC_OscConfig+0x490>)
      tickstart = HAL_GetTick();
 8001bbc:	4606      	mov	r6, r0
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001bbe:	f241 3888 	movw	r8, #5000	; 0x1388
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001bc2:	e004      	b.n	8001bce <HAL_RCC_OscConfig+0x31e>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001bc4:	f7ff f892 	bl	8000cec <HAL_GetTick>
 8001bc8:	1b80      	subs	r0, r0, r6
 8001bca:	4540      	cmp	r0, r8
 8001bcc:	d8e6      	bhi.n	8001b9c <HAL_RCC_OscConfig+0x2ec>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001bce:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001bd2:	0799      	lsls	r1, r3, #30
 8001bd4:	d5f6      	bpl.n	8001bc4 <HAL_RCC_OscConfig+0x314>
 8001bd6:	e727      	b.n	8001a28 <HAL_RCC_OscConfig+0x178>
      __HAL_RCC_HSI48_DISABLE();
 8001bd8:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 8001bdc:	f023 0301 	bic.w	r3, r3, #1
 8001be0:	f8c5 3098 	str.w	r3, [r5, #152]	; 0x98
      tickstart = HAL_GetTick();
 8001be4:	f7ff f882 	bl	8000cec <HAL_GetTick>
 8001be8:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001bea:	e004      	b.n	8001bf6 <HAL_RCC_OscConfig+0x346>
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001bec:	f7ff f87e 	bl	8000cec <HAL_GetTick>
 8001bf0:	1b80      	subs	r0, r0, r6
 8001bf2:	2802      	cmp	r0, #2
 8001bf4:	d8d2      	bhi.n	8001b9c <HAL_RCC_OscConfig+0x2ec>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001bf6:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 8001bfa:	0798      	lsls	r0, r3, #30
 8001bfc:	d4f6      	bmi.n	8001bec <HAL_RCC_OscConfig+0x33c>
 8001bfe:	e735      	b.n	8001a6c <HAL_RCC_OscConfig+0x1bc>
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001c00:	6833      	ldr	r3, [r6, #0]
 8001c02:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c06:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8001c08:	f7ff f870 	bl	8000cec <HAL_GetTick>
 8001c0c:	4607      	mov	r7, r0
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001c0e:	6833      	ldr	r3, [r6, #0]
 8001c10:	05d8      	lsls	r0, r3, #23
 8001c12:	f53f aee2 	bmi.w	80019da <HAL_RCC_OscConfig+0x12a>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c16:	f7ff f869 	bl	8000cec <HAL_GetTick>
 8001c1a:	1bc0      	subs	r0, r0, r7
 8001c1c:	2802      	cmp	r0, #2
 8001c1e:	d9f6      	bls.n	8001c0e <HAL_RCC_OscConfig+0x35e>
 8001c20:	e7bc      	b.n	8001b9c <HAL_RCC_OscConfig+0x2ec>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c22:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001c26:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 8001c2a:	681a      	ldr	r2, [r3, #0]
 8001c2c:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8001c30:	601a      	str	r2, [r3, #0]
 8001c32:	681a      	ldr	r2, [r3, #0]
 8001c34:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001c38:	601a      	str	r2, [r3, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001c3a:	e78b      	b.n	8001b54 <HAL_RCC_OscConfig+0x2a4>
    return HAL_ERROR;
 8001c3c:	2001      	movs	r0, #1
}
 8001c3e:	4770      	bx	lr
        tickstart = HAL_GetTick();
 8001c40:	f7ff f854 	bl	8000cec <HAL_GetTick>
 8001c44:	4606      	mov	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c46:	e004      	b.n	8001c52 <HAL_RCC_OscConfig+0x3a2>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c48:	f7ff f850 	bl	8000cec <HAL_GetTick>
 8001c4c:	1b80      	subs	r0, r0, r6
 8001c4e:	2802      	cmp	r0, #2
 8001c50:	d8a4      	bhi.n	8001b9c <HAL_RCC_OscConfig+0x2ec>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c52:	682b      	ldr	r3, [r5, #0]
 8001c54:	0199      	lsls	r1, r3, #6
 8001c56:	d4f7      	bmi.n	8001c48 <HAL_RCC_OscConfig+0x398>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001c58:	68e9      	ldr	r1, [r5, #12]
 8001c5a:	4b3a      	ldr	r3, [pc, #232]	; (8001d44 <HAL_RCC_OscConfig+0x494>)
 8001c5c:	6a22      	ldr	r2, [r4, #32]
 8001c5e:	6a60      	ldr	r0, [r4, #36]	; 0x24
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c60:	4e37      	ldr	r6, [pc, #220]	; (8001d40 <HAL_RCC_OscConfig+0x490>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001c62:	400b      	ands	r3, r1
 8001c64:	4313      	orrs	r3, r2
 8001c66:	e9d4 120a 	ldrd	r1, r2, [r4, #40]	; 0x28
 8001c6a:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8001c6e:	ea43 63c2 	orr.w	r3, r3, r2, lsl #27
 8001c72:	e9d4 120c 	ldrd	r1, r2, [r4, #48]	; 0x30
 8001c76:	3801      	subs	r0, #1
 8001c78:	0849      	lsrs	r1, r1, #1
 8001c7a:	ea43 1300 	orr.w	r3, r3, r0, lsl #4
 8001c7e:	3901      	subs	r1, #1
 8001c80:	0852      	lsrs	r2, r2, #1
 8001c82:	ea43 5341 	orr.w	r3, r3, r1, lsl #21
 8001c86:	3a01      	subs	r2, #1
 8001c88:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
 8001c8c:	60eb      	str	r3, [r5, #12]
        __HAL_RCC_PLL_ENABLE();
 8001c8e:	682b      	ldr	r3, [r5, #0]
 8001c90:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001c94:	602b      	str	r3, [r5, #0]
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001c96:	68eb      	ldr	r3, [r5, #12]
 8001c98:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001c9c:	60eb      	str	r3, [r5, #12]
        tickstart = HAL_GetTick();
 8001c9e:	f7ff f825 	bl	8000cec <HAL_GetTick>
 8001ca2:	4604      	mov	r4, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ca4:	e005      	b.n	8001cb2 <HAL_RCC_OscConfig+0x402>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ca6:	f7ff f821 	bl	8000cec <HAL_GetTick>
 8001caa:	1b00      	subs	r0, r0, r4
 8001cac:	2802      	cmp	r0, #2
 8001cae:	f63f af75 	bhi.w	8001b9c <HAL_RCC_OscConfig+0x2ec>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001cb2:	6833      	ldr	r3, [r6, #0]
 8001cb4:	019a      	lsls	r2, r3, #6
 8001cb6:	d5f6      	bpl.n	8001ca6 <HAL_RCC_OscConfig+0x3f6>
 8001cb8:	e6fe      	b.n	8001ab8 <HAL_RCC_OscConfig+0x208>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001cba:	4b21      	ldr	r3, [pc, #132]	; (8001d40 <HAL_RCC_OscConfig+0x490>)
 8001cbc:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8001cc0:	f042 0204 	orr.w	r2, r2, #4
 8001cc4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 8001cc8:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8001ccc:	f042 0201 	orr.w	r2, r2, #1
 8001cd0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001cd4:	e76f      	b.n	8001bb6 <HAL_RCC_OscConfig+0x306>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001cd6:	2801      	cmp	r0, #1
 8001cd8:	f43f aeef 	beq.w	8001aba <HAL_RCC_OscConfig+0x20a>
      temp_pllckcfg = RCC->PLLCFGR;
 8001cdc:	68eb      	ldr	r3, [r5, #12]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001cde:	6a22      	ldr	r2, [r4, #32]
 8001ce0:	f003 0103 	and.w	r1, r3, #3
 8001ce4:	4291      	cmp	r1, r2
 8001ce6:	f47f af0d 	bne.w	8001b04 <HAL_RCC_OscConfig+0x254>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001cea:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8001cec:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001cf0:	3901      	subs	r1, #1
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001cf2:	ebb2 1f01 	cmp.w	r2, r1, lsl #4
 8001cf6:	f47f af05 	bne.w	8001b04 <HAL_RCC_OscConfig+0x254>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001cfa:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8001cfc:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001d00:	ebb2 2f01 	cmp.w	r2, r1, lsl #8
 8001d04:	f47f aefe 	bne.w	8001b04 <HAL_RCC_OscConfig+0x254>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001d08:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8001d0a:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001d0e:	ebb2 6fc1 	cmp.w	r2, r1, lsl #27
 8001d12:	f47f aef7 	bne.w	8001b04 <HAL_RCC_OscConfig+0x254>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001d16:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8001d18:	0852      	lsrs	r2, r2, #1
 8001d1a:	f403 01c0 	and.w	r1, r3, #6291456	; 0x600000
 8001d1e:	3a01      	subs	r2, #1
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001d20:	ebb1 5f42 	cmp.w	r1, r2, lsl #21
 8001d24:	f47f aeee 	bne.w	8001b04 <HAL_RCC_OscConfig+0x254>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001d28:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8001d2a:	0852      	lsrs	r2, r2, #1
 8001d2c:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
 8001d30:	3a01      	subs	r2, #1
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001d32:	ebb3 6f42 	cmp.w	r3, r2, lsl #25
        return HAL_ERROR;
 8001d36:	bf14      	ite	ne
 8001d38:	2001      	movne	r0, #1
 8001d3a:	2000      	moveq	r0, #0
 8001d3c:	e6bd      	b.n	8001aba <HAL_RCC_OscConfig+0x20a>
 8001d3e:	bf00      	nop
 8001d40:	40021000 	.word	0x40021000
 8001d44:	019f800c 	.word	0x019f800c

08001d48 <HAL_RCC_GetSysClockFreq>:
uint32_t HAL_RCC_GetSysClockFreq(void)
{
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8001d48:	4b18      	ldr	r3, [pc, #96]	; (8001dac <HAL_RCC_GetSysClockFreq+0x64>)
 8001d4a:	689a      	ldr	r2, [r3, #8]
 8001d4c:	f002 020c 	and.w	r2, r2, #12
 8001d50:	2a04      	cmp	r2, #4
 8001d52:	d027      	beq.n	8001da4 <HAL_RCC_GetSysClockFreq+0x5c>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8001d54:	689a      	ldr	r2, [r3, #8]
 8001d56:	f002 020c 	and.w	r2, r2, #12
 8001d5a:	2a08      	cmp	r2, #8
 8001d5c:	d024      	beq.n	8001da8 <HAL_RCC_GetSysClockFreq+0x60>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8001d5e:	689a      	ldr	r2, [r3, #8]
 8001d60:	f002 020c 	and.w	r2, r2, #12
 8001d64:	2a0c      	cmp	r2, #12
 8001d66:	d001      	beq.n	8001d6c <HAL_RCC_GetSysClockFreq+0x24>
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
    sysclockfreq = pllvco/pllr;
  }
  else
  {
    sysclockfreq = 0U;
 8001d68:	2000      	movs	r0, #0
  }

  return sysclockfreq;
}
 8001d6a:	4770      	bx	lr
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001d6c:	68d9      	ldr	r1, [r3, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001d6e:	68d8      	ldr	r0, [r3, #12]
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001d70:	f001 0103 	and.w	r1, r1, #3
    switch (pllsource)
 8001d74:	2903      	cmp	r1, #3
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001d76:	f3c0 1003 	ubfx	r0, r0, #4, #4
 8001d7a:	f100 0201 	add.w	r2, r0, #1
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001d7e:	68d8      	ldr	r0, [r3, #12]
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001d80:	bf0c      	ite	eq
 8001d82:	4b0b      	ldreq	r3, [pc, #44]	; (8001db0 <HAL_RCC_GetSysClockFreq+0x68>)
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001d84:	4b0b      	ldrne	r3, [pc, #44]	; (8001db4 <HAL_RCC_GetSysClockFreq+0x6c>)
 8001d86:	fbb3 f2f2 	udiv	r2, r3, r2
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001d8a:	4b08      	ldr	r3, [pc, #32]	; (8001dac <HAL_RCC_GetSysClockFreq+0x64>)
 8001d8c:	68db      	ldr	r3, [r3, #12]
 8001d8e:	f3c3 6341 	ubfx	r3, r3, #25, #2
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001d92:	f3c0 2006 	ubfx	r0, r0, #8, #7
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001d96:	3301      	adds	r3, #1
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001d98:	fb02 f000 	mul.w	r0, r2, r0
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001d9c:	005b      	lsls	r3, r3, #1
    sysclockfreq = pllvco/pllr;
 8001d9e:	fbb0 f0f3 	udiv	r0, r0, r3
  return sysclockfreq;
 8001da2:	4770      	bx	lr
    sysclockfreq = HSI_VALUE;
 8001da4:	4803      	ldr	r0, [pc, #12]	; (8001db4 <HAL_RCC_GetSysClockFreq+0x6c>)
 8001da6:	4770      	bx	lr
    sysclockfreq = HSE_VALUE;
 8001da8:	4801      	ldr	r0, [pc, #4]	; (8001db0 <HAL_RCC_GetSysClockFreq+0x68>)
 8001daa:	4770      	bx	lr
 8001dac:	40021000 	.word	0x40021000
 8001db0:	007a1200 	.word	0x007a1200
 8001db4:	00f42400 	.word	0x00f42400

08001db8 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 8001db8:	2800      	cmp	r0, #0
 8001dba:	f000 80ee 	beq.w	8001f9a <HAL_RCC_ClockConfig+0x1e2>
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001dbe:	4a7f      	ldr	r2, [pc, #508]	; (8001fbc <HAL_RCC_ClockConfig+0x204>)
{
 8001dc0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001dc4:	6813      	ldr	r3, [r2, #0]
 8001dc6:	f003 030f 	and.w	r3, r3, #15
 8001dca:	428b      	cmp	r3, r1
 8001dcc:	460d      	mov	r5, r1
 8001dce:	4604      	mov	r4, r0
 8001dd0:	d20c      	bcs.n	8001dec <HAL_RCC_ClockConfig+0x34>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001dd2:	6813      	ldr	r3, [r2, #0]
 8001dd4:	f023 030f 	bic.w	r3, r3, #15
 8001dd8:	430b      	orrs	r3, r1
 8001dda:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ddc:	6813      	ldr	r3, [r2, #0]
 8001dde:	f003 030f 	and.w	r3, r3, #15
 8001de2:	428b      	cmp	r3, r1
 8001de4:	d002      	beq.n	8001dec <HAL_RCC_ClockConfig+0x34>
    return HAL_ERROR;
 8001de6:	2001      	movs	r0, #1
}
 8001de8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001dec:	6823      	ldr	r3, [r4, #0]
 8001dee:	07df      	lsls	r7, r3, #31
 8001df0:	d563      	bpl.n	8001eba <HAL_RCC_ClockConfig+0x102>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001df2:	6862      	ldr	r2, [r4, #4]
 8001df4:	2a03      	cmp	r2, #3
 8001df6:	f000 809a 	beq.w	8001f2e <HAL_RCC_ClockConfig+0x176>
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001dfa:	4b71      	ldr	r3, [pc, #452]	; (8001fc0 <HAL_RCC_ClockConfig+0x208>)
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001dfc:	2a02      	cmp	r2, #2
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001dfe:	681b      	ldr	r3, [r3, #0]
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e00:	f000 8091 	beq.w	8001f26 <HAL_RCC_ClockConfig+0x16e>
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001e04:	055b      	lsls	r3, r3, #21
 8001e06:	d5ee      	bpl.n	8001de6 <HAL_RCC_ClockConfig+0x2e>
      pllfreq = HAL_RCC_GetSysClockFreq();
 8001e08:	f7ff ff9e 	bl	8001d48 <HAL_RCC_GetSysClockFreq>
      if(pllfreq > 80000000U)
 8001e0c:	4b6d      	ldr	r3, [pc, #436]	; (8001fc4 <HAL_RCC_ClockConfig+0x20c>)
 8001e0e:	4298      	cmp	r0, r3
 8001e10:	f200 80c5 	bhi.w	8001f9e <HAL_RCC_ClockConfig+0x1e6>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001e14:	6862      	ldr	r2, [r4, #4]
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8001e16:	f04f 0900 	mov.w	r9, #0
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001e1a:	4e69      	ldr	r6, [pc, #420]	; (8001fc0 <HAL_RCC_ClockConfig+0x208>)
 8001e1c:	68b3      	ldr	r3, [r6, #8]
 8001e1e:	f023 0303 	bic.w	r3, r3, #3
 8001e22:	431a      	orrs	r2, r3
 8001e24:	60b2      	str	r2, [r6, #8]
    tickstart = HAL_GetTick();
 8001e26:	f7fe ff61 	bl	8000cec <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e2a:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8001e2e:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e30:	e004      	b.n	8001e3c <HAL_RCC_ClockConfig+0x84>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e32:	f7fe ff5b 	bl	8000cec <HAL_GetTick>
 8001e36:	1bc0      	subs	r0, r0, r7
 8001e38:	4540      	cmp	r0, r8
 8001e3a:	d871      	bhi.n	8001f20 <HAL_RCC_ClockConfig+0x168>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e3c:	68b3      	ldr	r3, [r6, #8]
 8001e3e:	6862      	ldr	r2, [r4, #4]
 8001e40:	f003 030c 	and.w	r3, r3, #12
 8001e44:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8001e48:	d1f3      	bne.n	8001e32 <HAL_RCC_ClockConfig+0x7a>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e4a:	6823      	ldr	r3, [r4, #0]
 8001e4c:	079f      	lsls	r7, r3, #30
 8001e4e:	d436      	bmi.n	8001ebe <HAL_RCC_ClockConfig+0x106>
    if(hpre == RCC_SYSCLK_DIV2)
 8001e50:	f1b9 0f80 	cmp.w	r9, #128	; 0x80
 8001e54:	d103      	bne.n	8001e5e <HAL_RCC_ClockConfig+0xa6>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8001e56:	68b3      	ldr	r3, [r6, #8]
 8001e58:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001e5c:	60b3      	str	r3, [r6, #8]
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001e5e:	4e57      	ldr	r6, [pc, #348]	; (8001fbc <HAL_RCC_ClockConfig+0x204>)
 8001e60:	6833      	ldr	r3, [r6, #0]
 8001e62:	f003 030f 	and.w	r3, r3, #15
 8001e66:	42ab      	cmp	r3, r5
 8001e68:	d846      	bhi.n	8001ef8 <HAL_RCC_ClockConfig+0x140>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e6a:	6823      	ldr	r3, [r4, #0]
 8001e6c:	075a      	lsls	r2, r3, #29
 8001e6e:	d506      	bpl.n	8001e7e <HAL_RCC_ClockConfig+0xc6>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001e70:	4953      	ldr	r1, [pc, #332]	; (8001fc0 <HAL_RCC_ClockConfig+0x208>)
 8001e72:	68e0      	ldr	r0, [r4, #12]
 8001e74:	688a      	ldr	r2, [r1, #8]
 8001e76:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001e7a:	4302      	orrs	r2, r0
 8001e7c:	608a      	str	r2, [r1, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e7e:	071b      	lsls	r3, r3, #28
 8001e80:	d507      	bpl.n	8001e92 <HAL_RCC_ClockConfig+0xda>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001e82:	4a4f      	ldr	r2, [pc, #316]	; (8001fc0 <HAL_RCC_ClockConfig+0x208>)
 8001e84:	6921      	ldr	r1, [r4, #16]
 8001e86:	6893      	ldr	r3, [r2, #8]
 8001e88:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8001e8c:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001e90:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001e92:	f7ff ff59 	bl	8001d48 <HAL_RCC_GetSysClockFreq>
 8001e96:	4a4a      	ldr	r2, [pc, #296]	; (8001fc0 <HAL_RCC_ClockConfig+0x208>)
 8001e98:	4c4b      	ldr	r4, [pc, #300]	; (8001fc8 <HAL_RCC_ClockConfig+0x210>)
 8001e9a:	6892      	ldr	r2, [r2, #8]
 8001e9c:	494b      	ldr	r1, [pc, #300]	; (8001fcc <HAL_RCC_ClockConfig+0x214>)
 8001e9e:	f3c2 1203 	ubfx	r2, r2, #4, #4
 8001ea2:	4603      	mov	r3, r0
 8001ea4:	5ca2      	ldrb	r2, [r4, r2]
  return HAL_InitTick(uwTickPrio);
 8001ea6:	484a      	ldr	r0, [pc, #296]	; (8001fd0 <HAL_RCC_ClockConfig+0x218>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001ea8:	f002 021f 	and.w	r2, r2, #31
 8001eac:	40d3      	lsrs	r3, r2
 8001eae:	600b      	str	r3, [r1, #0]
  return HAL_InitTick(uwTickPrio);
 8001eb0:	6800      	ldr	r0, [r0, #0]
}
 8001eb2:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  return HAL_InitTick(uwTickPrio);
 8001eb6:	f7fe bed7 	b.w	8000c68 <HAL_InitTick>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001eba:	079e      	lsls	r6, r3, #30
 8001ebc:	d5cf      	bpl.n	8001e5e <HAL_RCC_ClockConfig+0xa6>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ebe:	0758      	lsls	r0, r3, #29
 8001ec0:	d504      	bpl.n	8001ecc <HAL_RCC_ClockConfig+0x114>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001ec2:	493f      	ldr	r1, [pc, #252]	; (8001fc0 <HAL_RCC_ClockConfig+0x208>)
 8001ec4:	688a      	ldr	r2, [r1, #8]
 8001ec6:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 8001eca:	608a      	str	r2, [r1, #8]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ecc:	0719      	lsls	r1, r3, #28
 8001ece:	d506      	bpl.n	8001ede <HAL_RCC_ClockConfig+0x126>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8001ed0:	4a3b      	ldr	r2, [pc, #236]	; (8001fc0 <HAL_RCC_ClockConfig+0x208>)
 8001ed2:	6893      	ldr	r3, [r2, #8]
 8001ed4:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8001ed8:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001edc:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ede:	4a38      	ldr	r2, [pc, #224]	; (8001fc0 <HAL_RCC_ClockConfig+0x208>)
 8001ee0:	68a1      	ldr	r1, [r4, #8]
 8001ee2:	6893      	ldr	r3, [r2, #8]
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001ee4:	4e35      	ldr	r6, [pc, #212]	; (8001fbc <HAL_RCC_ClockConfig+0x204>)
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ee6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001eea:	430b      	orrs	r3, r1
 8001eec:	6093      	str	r3, [r2, #8]
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001eee:	6833      	ldr	r3, [r6, #0]
 8001ef0:	f003 030f 	and.w	r3, r3, #15
 8001ef4:	42ab      	cmp	r3, r5
 8001ef6:	d9b8      	bls.n	8001e6a <HAL_RCC_ClockConfig+0xb2>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ef8:	6833      	ldr	r3, [r6, #0]
 8001efa:	f023 030f 	bic.w	r3, r3, #15
 8001efe:	432b      	orrs	r3, r5
 8001f00:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 8001f02:	f7fe fef3 	bl	8000cec <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f06:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8001f0a:	4607      	mov	r7, r0
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f0c:	6833      	ldr	r3, [r6, #0]
 8001f0e:	f003 030f 	and.w	r3, r3, #15
 8001f12:	42ab      	cmp	r3, r5
 8001f14:	d0a9      	beq.n	8001e6a <HAL_RCC_ClockConfig+0xb2>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f16:	f7fe fee9 	bl	8000cec <HAL_GetTick>
 8001f1a:	1bc0      	subs	r0, r0, r7
 8001f1c:	4540      	cmp	r0, r8
 8001f1e:	d9f5      	bls.n	8001f0c <HAL_RCC_ClockConfig+0x154>
        return HAL_TIMEOUT;
 8001f20:	2003      	movs	r0, #3
}
 8001f22:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001f26:	039a      	lsls	r2, r3, #14
 8001f28:	f53f af6e 	bmi.w	8001e08 <HAL_RCC_ClockConfig+0x50>
 8001f2c:	e75b      	b.n	8001de6 <HAL_RCC_ClockConfig+0x2e>
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f2e:	4924      	ldr	r1, [pc, #144]	; (8001fc0 <HAL_RCC_ClockConfig+0x208>)
 8001f30:	6808      	ldr	r0, [r1, #0]
 8001f32:	0180      	lsls	r0, r0, #6
 8001f34:	f57f af57 	bpl.w	8001de6 <HAL_RCC_ClockConfig+0x2e>
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001f38:	68ce      	ldr	r6, [r1, #12]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001f3a:	68c8      	ldr	r0, [r1, #12]
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
    break;

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001f3c:	68c9      	ldr	r1, [r1, #12]
      if(pllfreq > 80000000U)
 8001f3e:	4f21      	ldr	r7, [pc, #132]	; (8001fc4 <HAL_RCC_ClockConfig+0x20c>)
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001f40:	f006 0603 	and.w	r6, r6, #3
  switch (pllsource)
 8001f44:	2e03      	cmp	r6, #3
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001f46:	f3c0 1003 	ubfx	r0, r0, #4, #4
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001f4a:	bf0c      	ite	eq
 8001f4c:	4e21      	ldreq	r6, [pc, #132]	; (8001fd4 <HAL_RCC_ClockConfig+0x21c>)
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001f4e:	4e22      	ldrne	r6, [pc, #136]	; (8001fd8 <HAL_RCC_ClockConfig+0x220>)
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001f50:	3001      	adds	r0, #1
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001f52:	fbb6 f0f0 	udiv	r0, r6, r0
    break;
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001f56:	4e1a      	ldr	r6, [pc, #104]	; (8001fc0 <HAL_RCC_ClockConfig+0x208>)
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001f58:	f3c1 2106 	ubfx	r1, r1, #8, #7
 8001f5c:	fb00 f101 	mul.w	r1, r0, r1
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001f60:	68f0      	ldr	r0, [r6, #12]
 8001f62:	f3c0 6041 	ubfx	r0, r0, #25, #2
 8001f66:	3001      	adds	r0, #1
 8001f68:	0040      	lsls	r0, r0, #1
  sysclockfreq = pllvco/pllr;
 8001f6a:	fbb1 f1f0 	udiv	r1, r1, r0
      if(pllfreq > 80000000U)
 8001f6e:	42b9      	cmp	r1, r7
 8001f70:	d920      	bls.n	8001fb4 <HAL_RCC_ClockConfig+0x1fc>
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001f72:	68b1      	ldr	r1, [r6, #8]
 8001f74:	f011 0ff0 	tst.w	r1, #240	; 0xf0
 8001f78:	d005      	beq.n	8001f86 <HAL_RCC_ClockConfig+0x1ce>
 8001f7a:	f013 0902 	ands.w	r9, r3, #2
 8001f7e:	f43f af4c 	beq.w	8001e1a <HAL_RCC_ClockConfig+0x62>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001f82:	68a3      	ldr	r3, [r4, #8]
 8001f84:	b9b3      	cbnz	r3, 8001fb4 <HAL_RCC_ClockConfig+0x1fc>
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001f86:	490e      	ldr	r1, [pc, #56]	; (8001fc0 <HAL_RCC_ClockConfig+0x208>)
 8001f88:	688b      	ldr	r3, [r1, #8]
 8001f8a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001f8e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001f92:	608b      	str	r3, [r1, #8]
          hpre = RCC_SYSCLK_DIV2;
 8001f94:	f04f 0980 	mov.w	r9, #128	; 0x80
 8001f98:	e73f      	b.n	8001e1a <HAL_RCC_ClockConfig+0x62>
    return HAL_ERROR;
 8001f9a:	2001      	movs	r0, #1
}
 8001f9c:	4770      	bx	lr
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001f9e:	4a08      	ldr	r2, [pc, #32]	; (8001fc0 <HAL_RCC_ClockConfig+0x208>)
 8001fa0:	6893      	ldr	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8001fa2:	f04f 0980 	mov.w	r9, #128	; 0x80
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001fa6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001faa:	ea43 0309 	orr.w	r3, r3, r9
 8001fae:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001fb0:	6862      	ldr	r2, [r4, #4]
 8001fb2:	e732      	b.n	8001e1a <HAL_RCC_ClockConfig+0x62>
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8001fb4:	f04f 0900 	mov.w	r9, #0
 8001fb8:	e72f      	b.n	8001e1a <HAL_RCC_ClockConfig+0x62>
 8001fba:	bf00      	nop
 8001fbc:	40022000 	.word	0x40022000
 8001fc0:	40021000 	.word	0x40021000
 8001fc4:	04c4b400 	.word	0x04c4b400
 8001fc8:	08003ce8 	.word	0x08003ce8
 8001fcc:	20000000 	.word	0x20000000
 8001fd0:	20000008 	.word	0x20000008
 8001fd4:	007a1200 	.word	0x007a1200
 8001fd8:	00f42400 	.word	0x00f42400

08001fdc <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001fdc:	4b05      	ldr	r3, [pc, #20]	; (8001ff4 <HAL_RCC_GetPCLK1Freq+0x18>)
 8001fde:	4a06      	ldr	r2, [pc, #24]	; (8001ff8 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8001fe0:	689b      	ldr	r3, [r3, #8]
  return SystemCoreClock;
 8001fe2:	4906      	ldr	r1, [pc, #24]	; (8001ffc <HAL_RCC_GetPCLK1Freq+0x20>)
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001fe4:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8001fe8:	6808      	ldr	r0, [r1, #0]
 8001fea:	5cd3      	ldrb	r3, [r2, r3]
 8001fec:	f003 031f 	and.w	r3, r3, #31
}
 8001ff0:	40d8      	lsrs	r0, r3
 8001ff2:	4770      	bx	lr
 8001ff4:	40021000 	.word	0x40021000
 8001ff8:	08003cf8 	.word	0x08003cf8
 8001ffc:	20000000 	.word	0x20000000

08002000 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002000:	4b05      	ldr	r3, [pc, #20]	; (8002018 <HAL_RCC_GetPCLK2Freq+0x18>)
 8002002:	4a06      	ldr	r2, [pc, #24]	; (800201c <HAL_RCC_GetPCLK2Freq+0x1c>)
 8002004:	689b      	ldr	r3, [r3, #8]
  return SystemCoreClock;
 8002006:	4906      	ldr	r1, [pc, #24]	; (8002020 <HAL_RCC_GetPCLK2Freq+0x20>)
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002008:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 800200c:	6808      	ldr	r0, [r1, #0]
 800200e:	5cd3      	ldrb	r3, [r2, r3]
 8002010:	f003 031f 	and.w	r3, r3, #31
}
 8002014:	40d8      	lsrs	r0, r3
 8002016:	4770      	bx	lr
 8002018:	40021000 	.word	0x40021000
 800201c:	08003cf8 	.word	0x08003cf8
 8002020:	20000000 	.word	0x20000000

08002024 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002024:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002028:	6803      	ldr	r3, [r0, #0]
{
 800202a:	4604      	mov	r4, r0
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800202c:	f413 2000 	ands.w	r0, r3, #524288	; 0x80000
{
 8002030:	b082      	sub	sp, #8
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002032:	d056      	beq.n	80020e2 <HAL_RCCEx_PeriphCLKConfig+0xbe>
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002034:	4b9f      	ldr	r3, [pc, #636]	; (80022b4 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8002036:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002038:	00d5      	lsls	r5, r2, #3
 800203a:	f140 810c 	bpl.w	8002256 <HAL_RCCEx_PeriphCLKConfig+0x232>
    FlagStatus       pwrclkchanged = RESET;
 800203e:	2700      	movs	r7, #0
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002040:	4d9d      	ldr	r5, [pc, #628]	; (80022b8 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8002042:	682b      	ldr	r3, [r5, #0]
 8002044:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002048:	602b      	str	r3, [r5, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800204a:	f7fe fe4f 	bl	8000cec <HAL_GetTick>
 800204e:	4606      	mov	r6, r0

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002050:	e005      	b.n	800205e <HAL_RCCEx_PeriphCLKConfig+0x3a>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002052:	f7fe fe4b 	bl	8000cec <HAL_GetTick>
 8002056:	1b83      	subs	r3, r0, r6
 8002058:	2b02      	cmp	r3, #2
 800205a:	f200 8107 	bhi.w	800226c <HAL_RCCEx_PeriphCLKConfig+0x248>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800205e:	682b      	ldr	r3, [r5, #0]
 8002060:	05d8      	lsls	r0, r3, #23
 8002062:	d5f6      	bpl.n	8002052 <HAL_RCCEx_PeriphCLKConfig+0x2e>
    }

    if(ret == HAL_OK)
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002064:	4d93      	ldr	r5, [pc, #588]	; (80022b4 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8002066:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800206a:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 800206e:	d027      	beq.n	80020c0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
 8002070:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8002072:	429a      	cmp	r2, r3
 8002074:	d025      	beq.n	80020c2 <HAL_RCCEx_PeriphCLKConfig+0x9e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002076:	f8d5 1090 	ldr.w	r1, [r5, #144]	; 0x90
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800207a:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
 800207e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002082:	f8c5 3090 	str.w	r3, [r5, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002086:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
 800208a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800208e:	f8c5 3090 	str.w	r3, [r5, #144]	; 0x90
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002092:	f421 7340 	bic.w	r3, r1, #768	; 0x300
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002096:	07c9      	lsls	r1, r1, #31
        RCC->BDCR = tmpregister;
 8002098:	f8c5 3090 	str.w	r3, [r5, #144]	; 0x90
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800209c:	f140 8108 	bpl.w	80022b0 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020a0:	f7fe fe24 	bl	8000cec <HAL_GetTick>

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020a4:	f241 3888 	movw	r8, #5000	; 0x1388
        tickstart = HAL_GetTick();
 80020a8:	4606      	mov	r6, r0
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80020aa:	e005      	b.n	80020b8 <HAL_RCCEx_PeriphCLKConfig+0x94>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020ac:	f7fe fe1e 	bl	8000cec <HAL_GetTick>
 80020b0:	1b80      	subs	r0, r0, r6
 80020b2:	4540      	cmp	r0, r8
 80020b4:	f200 80da 	bhi.w	800226c <HAL_RCCEx_PeriphCLKConfig+0x248>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80020b8:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
 80020bc:	079b      	lsls	r3, r3, #30
 80020be:	d5f5      	bpl.n	80020ac <HAL_RCCEx_PeriphCLKConfig+0x88>
      }
      
      if(ret == HAL_OK)
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80020c0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80020c2:	497c      	ldr	r1, [pc, #496]	; (80022b4 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 80020c4:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80020c8:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80020cc:	4313      	orrs	r3, r2
 80020ce:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80020d2:	2000      	movs	r0, #0
      /* set overall return value */
      status = ret;
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80020d4:	b127      	cbz	r7, 80020e0 <HAL_RCCEx_PeriphCLKConfig+0xbc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80020d6:	4a77      	ldr	r2, [pc, #476]	; (80022b4 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 80020d8:	6d93      	ldr	r3, [r2, #88]	; 0x58
 80020da:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80020de:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80020e0:	6823      	ldr	r3, [r4, #0]
 80020e2:	07de      	lsls	r6, r3, #31
 80020e4:	d508      	bpl.n	80020f8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80020e6:	4973      	ldr	r1, [pc, #460]	; (80022b4 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 80020e8:	6865      	ldr	r5, [r4, #4]
 80020ea:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80020ee:	f022 0203 	bic.w	r2, r2, #3
 80020f2:	432a      	orrs	r2, r5
 80020f4:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80020f8:	079d      	lsls	r5, r3, #30
 80020fa:	d508      	bpl.n	800210e <HAL_RCCEx_PeriphCLKConfig+0xea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80020fc:	496d      	ldr	r1, [pc, #436]	; (80022b4 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 80020fe:	68a5      	ldr	r5, [r4, #8]
 8002100:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8002104:	f022 020c 	bic.w	r2, r2, #12
 8002108:	432a      	orrs	r2, r5
 800210a:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800210e:	0759      	lsls	r1, r3, #29
 8002110:	d508      	bpl.n	8002124 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002112:	4968      	ldr	r1, [pc, #416]	; (80022b4 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8002114:	68e5      	ldr	r5, [r4, #12]
 8002116:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800211a:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 800211e:	432a      	orrs	r2, r5
 8002120:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002124:	071a      	lsls	r2, r3, #28
 8002126:	d508      	bpl.n	800213a <HAL_RCCEx_PeriphCLKConfig+0x116>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002128:	4962      	ldr	r1, [pc, #392]	; (80022b4 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 800212a:	6925      	ldr	r5, [r4, #16]
 800212c:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8002130:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8002134:	432a      	orrs	r2, r5
 8002136:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800213a:	069f      	lsls	r7, r3, #26
 800213c:	d508      	bpl.n	8002150 <HAL_RCCEx_PeriphCLKConfig+0x12c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800213e:	495d      	ldr	r1, [pc, #372]	; (80022b4 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8002140:	6965      	ldr	r5, [r4, #20]
 8002142:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8002146:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800214a:	432a      	orrs	r2, r5
 800214c:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002150:	065e      	lsls	r6, r3, #25
 8002152:	d508      	bpl.n	8002166 <HAL_RCCEx_PeriphCLKConfig+0x142>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002154:	4957      	ldr	r1, [pc, #348]	; (80022b4 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8002156:	69a5      	ldr	r5, [r4, #24]
 8002158:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800215c:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8002160:	432a      	orrs	r2, r5
 8002162:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002166:	061d      	lsls	r5, r3, #24
 8002168:	d508      	bpl.n	800217c <HAL_RCCEx_PeriphCLKConfig+0x158>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800216a:	4952      	ldr	r1, [pc, #328]	; (80022b4 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 800216c:	69e5      	ldr	r5, [r4, #28]
 800216e:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8002172:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8002176:	432a      	orrs	r2, r5
 8002178:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800217c:	05d9      	lsls	r1, r3, #23
 800217e:	d508      	bpl.n	8002192 <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002180:	494c      	ldr	r1, [pc, #304]	; (80022b4 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8002182:	6a25      	ldr	r5, [r4, #32]
 8002184:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8002188:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 800218c:	432a      	orrs	r2, r5
 800218e:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002192:	059a      	lsls	r2, r3, #22
 8002194:	d508      	bpl.n	80021a8 <HAL_RCCEx_PeriphCLKConfig+0x184>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002196:	4947      	ldr	r1, [pc, #284]	; (80022b4 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8002198:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800219a:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800219e:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
 80021a2:	432a      	orrs	r2, r5
 80021a4:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80021a8:	055f      	lsls	r7, r3, #21
 80021aa:	d50b      	bpl.n	80021c4 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80021ac:	4941      	ldr	r1, [pc, #260]	; (80022b4 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 80021ae:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 80021b0:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80021b4:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 80021b8:	432a      	orrs	r2, r5
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80021ba:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80021be:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80021c2:	d055      	beq.n	8002270 <HAL_RCCEx_PeriphCLKConfig+0x24c>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80021c4:	051e      	lsls	r6, r3, #20
 80021c6:	d50b      	bpl.n	80021e0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80021c8:	493a      	ldr	r1, [pc, #232]	; (80022b4 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 80021ca:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
 80021cc:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80021d0:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 80021d4:	432a      	orrs	r2, r5
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80021d6:	f5b5 0f80 	cmp.w	r5, #4194304	; 0x400000
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80021da:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80021de:	d04c      	beq.n	800227a <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80021e0:	04dd      	lsls	r5, r3, #19
 80021e2:	d50b      	bpl.n	80021fc <HAL_RCCEx_PeriphCLKConfig+0x1d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80021e4:	4933      	ldr	r1, [pc, #204]	; (80022b4 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 80021e6:	6b25      	ldr	r5, [r4, #48]	; 0x30
 80021e8:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80021ec:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80021f0:	432a      	orrs	r2, r5
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80021f2:	f1b5 7f80 	cmp.w	r5, #16777216	; 0x1000000
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80021f6:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80021fa:	d043      	beq.n	8002284 <HAL_RCCEx_PeriphCLKConfig+0x260>
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80021fc:	0499      	lsls	r1, r3, #18
 80021fe:	d50b      	bpl.n	8002218 <HAL_RCCEx_PeriphCLKConfig+0x1f4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002200:	492c      	ldr	r1, [pc, #176]	; (80022b4 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8002202:	6b65      	ldr	r5, [r4, #52]	; 0x34
 8002204:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8002208:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 800220c:	432a      	orrs	r2, r5

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800220e:	f1b5 6f00 	cmp.w	r5, #134217728	; 0x8000000
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002212:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002216:	d03a      	beq.n	800228e <HAL_RCCEx_PeriphCLKConfig+0x26a>
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002218:	045a      	lsls	r2, r3, #17
 800221a:	d50b      	bpl.n	8002234 <HAL_RCCEx_PeriphCLKConfig+0x210>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800221c:	4925      	ldr	r1, [pc, #148]	; (80022b4 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 800221e:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 8002220:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8002224:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 8002228:	432a      	orrs	r2, r5

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800222a:	f1b5 6f00 	cmp.w	r5, #134217728	; 0x8000000
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800222e:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002232:	d031      	beq.n	8002298 <HAL_RCCEx_PeriphCLKConfig+0x274>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002234:	041b      	lsls	r3, r3, #16
 8002236:	d50b      	bpl.n	8002250 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002238:	4a1e      	ldr	r2, [pc, #120]	; (80022b4 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 800223a:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800223c:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8002240:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8002244:	430b      	orrs	r3, r1
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8002246:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800224a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800224e:	d028      	beq.n	80022a2 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  }

#endif /* QUADSPI */

  return status;
}
 8002250:	b002      	add	sp, #8
 8002252:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_PWR_CLK_ENABLE();
 8002256:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002258:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800225c:	659a      	str	r2, [r3, #88]	; 0x58
 800225e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002260:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002264:	9301      	str	r3, [sp, #4]
 8002266:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8002268:	2701      	movs	r7, #1
 800226a:	e6e9      	b.n	8002040 <HAL_RCCEx_PeriphCLKConfig+0x1c>
        ret = HAL_TIMEOUT;
 800226c:	2003      	movs	r0, #3
 800226e:	e731      	b.n	80020d4 <HAL_RCCEx_PeriphCLKConfig+0xb0>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002270:	68ca      	ldr	r2, [r1, #12]
 8002272:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8002276:	60ca      	str	r2, [r1, #12]
 8002278:	e7a4      	b.n	80021c4 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800227a:	68ca      	ldr	r2, [r1, #12]
 800227c:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8002280:	60ca      	str	r2, [r1, #12]
 8002282:	e7ad      	b.n	80021e0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002284:	68ca      	ldr	r2, [r1, #12]
 8002286:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800228a:	60ca      	str	r2, [r1, #12]
 800228c:	e7b6      	b.n	80021fc <HAL_RCCEx_PeriphCLKConfig+0x1d8>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800228e:	68ca      	ldr	r2, [r1, #12]
 8002290:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8002294:	60ca      	str	r2, [r1, #12]
 8002296:	e7bf      	b.n	8002218 <HAL_RCCEx_PeriphCLKConfig+0x1f4>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002298:	68ca      	ldr	r2, [r1, #12]
 800229a:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800229e:	60ca      	str	r2, [r1, #12]
 80022a0:	e7c8      	b.n	8002234 <HAL_RCCEx_PeriphCLKConfig+0x210>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80022a2:	68d3      	ldr	r3, [r2, #12]
 80022a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022a8:	60d3      	str	r3, [r2, #12]
}
 80022aa:	b002      	add	sp, #8
 80022ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80022b0:	4613      	mov	r3, r2
 80022b2:	e706      	b.n	80020c2 <HAL_RCCEx_PeriphCLKConfig+0x9e>
 80022b4:	40021000 	.word	0x40021000
 80022b8:	40007000 	.word	0x40007000

080022bc <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80022bc:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80022c0:	2b01      	cmp	r3, #1
 80022c2:	d122      	bne.n	800230a <HAL_TIM_Base_Start_IT+0x4e>

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80022c4:	6803      	ldr	r3, [r0, #0]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80022c6:	4917      	ldr	r1, [pc, #92]	; (8002324 <HAL_TIM_Base_Start_IT+0x68>)
  htim->State = HAL_TIM_STATE_BUSY;
 80022c8:	2202      	movs	r2, #2
 80022ca:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80022ce:	68da      	ldr	r2, [r3, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80022d0:	428b      	cmp	r3, r1
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80022d2:	f042 0201 	orr.w	r2, r2, #1
 80022d6:	60da      	str	r2, [r3, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80022d8:	d019      	beq.n	800230e <HAL_TIM_Base_Start_IT+0x52>
 80022da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80022de:	d016      	beq.n	800230e <HAL_TIM_Base_Start_IT+0x52>
 80022e0:	4a11      	ldr	r2, [pc, #68]	; (8002328 <HAL_TIM_Base_Start_IT+0x6c>)
 80022e2:	4293      	cmp	r3, r2
 80022e4:	d013      	beq.n	800230e <HAL_TIM_Base_Start_IT+0x52>
 80022e6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80022ea:	4293      	cmp	r3, r2
 80022ec:	d00f      	beq.n	800230e <HAL_TIM_Base_Start_IT+0x52>
 80022ee:	f502 3296 	add.w	r2, r2, #76800	; 0x12c00
 80022f2:	4293      	cmp	r3, r2
 80022f4:	d00b      	beq.n	800230e <HAL_TIM_Base_Start_IT+0x52>
 80022f6:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 80022fa:	4293      	cmp	r3, r2
 80022fc:	d007      	beq.n	800230e <HAL_TIM_Base_Start_IT+0x52>
      __HAL_TIM_ENABLE(htim);
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80022fe:	681a      	ldr	r2, [r3, #0]
 8002300:	f042 0201 	orr.w	r2, r2, #1
  }

  /* Return function status */
  return HAL_OK;
 8002304:	2000      	movs	r0, #0
    __HAL_TIM_ENABLE(htim);
 8002306:	601a      	str	r2, [r3, #0]
 8002308:	4770      	bx	lr
    return HAL_ERROR;
 800230a:	2001      	movs	r0, #1
 800230c:	4770      	bx	lr
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800230e:	6899      	ldr	r1, [r3, #8]
 8002310:	4a06      	ldr	r2, [pc, #24]	; (800232c <HAL_TIM_Base_Start_IT+0x70>)
 8002312:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002314:	2a06      	cmp	r2, #6
 8002316:	d002      	beq.n	800231e <HAL_TIM_Base_Start_IT+0x62>
 8002318:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 800231c:	d1ef      	bne.n	80022fe <HAL_TIM_Base_Start_IT+0x42>
  return HAL_OK;
 800231e:	2000      	movs	r0, #0
}
 8002320:	4770      	bx	lr
 8002322:	bf00      	nop
 8002324:	40012c00 	.word	0x40012c00
 8002328:	40000400 	.word	0x40000400
 800232c:	00010007 	.word	0x00010007

08002330 <HAL_TIM_ConfigClockSource>:
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002330:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8002334:	2b01      	cmp	r3, #1
 8002336:	f000 8089 	beq.w	800244c <HAL_TIM_ConfigClockSource+0x11c>
{
 800233a:	b470      	push	{r4, r5, r6}

  htim->State = HAL_TIM_STATE_BUSY;
 800233c:	2302      	movs	r3, #2

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800233e:	6804      	ldr	r4, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8002340:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  __HAL_LOCK(htim);
 8002344:	2201      	movs	r2, #1
 8002346:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
  tmpsmcr = htim->Instance->SMCR;
 800234a:	68a5      	ldr	r5, [r4, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800234c:	4b5f      	ldr	r3, [pc, #380]	; (80024cc <HAL_TIM_ConfigClockSource+0x19c>)
 800234e:	402b      	ands	r3, r5
  htim->Instance->SMCR = tmpsmcr;
 8002350:	60a3      	str	r3, [r4, #8]

  switch (sClockSourceConfig->ClockSource)
 8002352:	680b      	ldr	r3, [r1, #0]
 8002354:	2b70      	cmp	r3, #112	; 0x70
 8002356:	f000 80a8 	beq.w	80024aa <HAL_TIM_ConfigClockSource+0x17a>
 800235a:	d828      	bhi.n	80023ae <HAL_TIM_ConfigClockSource+0x7e>
 800235c:	2b50      	cmp	r3, #80	; 0x50
 800235e:	d078      	beq.n	8002452 <HAL_TIM_ConfigClockSource+0x122>
 8002360:	d93e      	bls.n	80023e0 <HAL_TIM_ConfigClockSource+0xb0>
 8002362:	2b60      	cmp	r3, #96	; 0x60
 8002364:	d11a      	bne.n	800239c <HAL_TIM_ConfigClockSource+0x6c>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002366:	68cb      	ldr	r3, [r1, #12]
 8002368:	684d      	ldr	r5, [r1, #4]
{
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800236a:	6a21      	ldr	r1, [r4, #32]
 800236c:	f021 0110 	bic.w	r1, r1, #16
 8002370:	6221      	str	r1, [r4, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002372:	69a2      	ldr	r2, [r4, #24]
  tmpccer = TIMx->CCER;

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002374:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002378:	ea42 3203 	orr.w	r2, r2, r3, lsl #12
  tmpccer = TIMx->CCER;
 800237c:	6a23      	ldr	r3, [r4, #32]
  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
  tmpccer |= (TIM_ICPolarity << 4U);

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800237e:	61a2      	str	r2, [r4, #24]
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002380:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8002384:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  TIMx->CCER = tmpccer;
 8002388:	6223      	str	r3, [r4, #32]
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800238a:	68a3      	ldr	r3, [r4, #8]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800238c:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8002390:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002394:	f043 0367 	orr.w	r3, r3, #103	; 0x67
  HAL_StatusTypeDef status = HAL_OK;
 8002398:	2200      	movs	r2, #0
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800239a:	60a3      	str	r3, [r4, #8]
  htim->State = HAL_TIM_STATE_READY;
 800239c:	2101      	movs	r1, #1
  __HAL_UNLOCK(htim);
 800239e:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 80023a0:	f880 103d 	strb.w	r1, [r0, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 80023a4:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
}
 80023a8:	bc70      	pop	{r4, r5, r6}
 80023aa:	4610      	mov	r0, r2
 80023ac:	4770      	bx	lr
  switch (sClockSourceConfig->ClockSource)
 80023ae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80023b2:	d069      	beq.n	8002488 <HAL_TIM_ConfigClockSource+0x158>
 80023b4:	d938      	bls.n	8002428 <HAL_TIM_ConfigClockSource+0xf8>
 80023b6:	4946      	ldr	r1, [pc, #280]	; (80024d0 <HAL_TIM_ConfigClockSource+0x1a0>)
 80023b8:	428b      	cmp	r3, r1
 80023ba:	d006      	beq.n	80023ca <HAL_TIM_ConfigClockSource+0x9a>
 80023bc:	d92d      	bls.n	800241a <HAL_TIM_ConfigClockSource+0xea>
 80023be:	4945      	ldr	r1, [pc, #276]	; (80024d4 <HAL_TIM_ConfigClockSource+0x1a4>)
 80023c0:	428b      	cmp	r3, r1
 80023c2:	d002      	beq.n	80023ca <HAL_TIM_ConfigClockSource+0x9a>
 80023c4:	3130      	adds	r1, #48	; 0x30
 80023c6:	428b      	cmp	r3, r1
 80023c8:	d1e8      	bne.n	800239c <HAL_TIM_ConfigClockSource+0x6c>
  tmpsmcr = TIMx->SMCR;
 80023ca:	68a1      	ldr	r1, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80023cc:	f421 1140 	bic.w	r1, r1, #3145728	; 0x300000
 80023d0:	f021 0170 	bic.w	r1, r1, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80023d4:	430b      	orrs	r3, r1
 80023d6:	f043 0307 	orr.w	r3, r3, #7
  HAL_StatusTypeDef status = HAL_OK;
 80023da:	2200      	movs	r2, #0
  TIMx->SMCR = tmpsmcr;
 80023dc:	60a3      	str	r3, [r4, #8]
}
 80023de:	e7dd      	b.n	800239c <HAL_TIM_ConfigClockSource+0x6c>
  switch (sClockSourceConfig->ClockSource)
 80023e0:	2b40      	cmp	r3, #64	; 0x40
 80023e2:	d126      	bne.n	8002432 <HAL_TIM_ConfigClockSource+0x102>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80023e4:	684a      	ldr	r2, [r1, #4]
 80023e6:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 80023e8:	6a21      	ldr	r1, [r4, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80023ea:	6a25      	ldr	r5, [r4, #32]
 80023ec:	f025 0501 	bic.w	r5, r5, #1
 80023f0:	6225      	str	r5, [r4, #32]
  tmpccmr1 = TIMx->CCMR1;
 80023f2:	69a3      	ldr	r3, [r4, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80023f4:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80023f8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccer |= TIM_ICPolarity;
 80023fc:	4311      	orrs	r1, r2
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80023fe:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8002402:	61a3      	str	r3, [r4, #24]
  TIMx->CCER = tmpccer;
 8002404:	6221      	str	r1, [r4, #32]
  tmpsmcr = TIMx->SMCR;
 8002406:	68a3      	ldr	r3, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8002408:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800240c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002410:	f043 0347 	orr.w	r3, r3, #71	; 0x47
  HAL_StatusTypeDef status = HAL_OK;
 8002414:	2200      	movs	r2, #0
  TIMx->SMCR = tmpsmcr;
 8002416:	60a3      	str	r3, [r4, #8]
}
 8002418:	e7c0      	b.n	800239c <HAL_TIM_ConfigClockSource+0x6c>
  switch (sClockSourceConfig->ClockSource)
 800241a:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800241e:	d0d4      	beq.n	80023ca <HAL_TIM_ConfigClockSource+0x9a>
 8002420:	3910      	subs	r1, #16
 8002422:	428b      	cmp	r3, r1
 8002424:	d0d1      	beq.n	80023ca <HAL_TIM_ConfigClockSource+0x9a>
 8002426:	e7b9      	b.n	800239c <HAL_TIM_ConfigClockSource+0x6c>
  HAL_StatusTypeDef status = HAL_OK;
 8002428:	f5b3 5280 	subs.w	r2, r3, #4096	; 0x1000
 800242c:	bf18      	it	ne
 800242e:	2201      	movne	r2, #1
 8002430:	e7b4      	b.n	800239c <HAL_TIM_ConfigClockSource+0x6c>
  switch (sClockSourceConfig->ClockSource)
 8002432:	d8b3      	bhi.n	800239c <HAL_TIM_ConfigClockSource+0x6c>
 8002434:	2b20      	cmp	r3, #32
 8002436:	d0c8      	beq.n	80023ca <HAL_TIM_ConfigClockSource+0x9a>
 8002438:	d903      	bls.n	8002442 <HAL_TIM_ConfigClockSource+0x112>
 800243a:	2b30      	cmp	r3, #48	; 0x30
 800243c:	d0c5      	beq.n	80023ca <HAL_TIM_ConfigClockSource+0x9a>
 800243e:	2201      	movs	r2, #1
 8002440:	e7ac      	b.n	800239c <HAL_TIM_ConfigClockSource+0x6c>
 8002442:	f033 0210 	bics.w	r2, r3, #16
 8002446:	d0c0      	beq.n	80023ca <HAL_TIM_ConfigClockSource+0x9a>
 8002448:	2201      	movs	r2, #1
 800244a:	e7a7      	b.n	800239c <HAL_TIM_ConfigClockSource+0x6c>
  __HAL_LOCK(htim);
 800244c:	2202      	movs	r2, #2
}
 800244e:	4610      	mov	r0, r2
 8002450:	4770      	bx	lr
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002452:	684a      	ldr	r2, [r1, #4]
 8002454:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 8002456:	6a21      	ldr	r1, [r4, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002458:	6a25      	ldr	r5, [r4, #32]
 800245a:	f025 0501 	bic.w	r5, r5, #1
 800245e:	6225      	str	r5, [r4, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002460:	69a3      	ldr	r3, [r4, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002462:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002466:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccer |= TIM_ICPolarity;
 800246a:	4311      	orrs	r1, r2
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800246c:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8002470:	61a3      	str	r3, [r4, #24]
  TIMx->CCER = tmpccer;
 8002472:	6221      	str	r1, [r4, #32]
  tmpsmcr = TIMx->SMCR;
 8002474:	68a3      	ldr	r3, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8002476:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800247a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800247e:	f043 0357 	orr.w	r3, r3, #87	; 0x57
  HAL_StatusTypeDef status = HAL_OK;
 8002482:	2200      	movs	r2, #0
  TIMx->SMCR = tmpsmcr;
 8002484:	60a3      	str	r3, [r4, #8]
}
 8002486:	e789      	b.n	800239c <HAL_TIM_ConfigClockSource+0x6c>

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002488:	e9d1 5301 	ldrd	r5, r3, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 800248c:	68a2      	ldr	r2, [r4, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800248e:	68c9      	ldr	r1, [r1, #12]
 8002490:	432b      	orrs	r3, r5
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002492:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002496:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800249a:	4313      	orrs	r3, r2

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800249c:	60a3      	str	r3, [r4, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800249e:	68a3      	ldr	r3, [r4, #8]
 80024a0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
  HAL_StatusTypeDef status = HAL_OK;
 80024a4:	2200      	movs	r2, #0
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80024a6:	60a3      	str	r3, [r4, #8]
      break;
 80024a8:	e778      	b.n	800239c <HAL_TIM_ConfigClockSource+0x6c>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80024aa:	e9d1 5301 	ldrd	r5, r3, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 80024ae:	68a2      	ldr	r2, [r4, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80024b0:	68c9      	ldr	r1, [r1, #12]
 80024b2:	432b      	orrs	r3, r5
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80024b4:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80024b8:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80024bc:	4313      	orrs	r3, r2
  TIMx->SMCR = tmpsmcr;
 80024be:	60a3      	str	r3, [r4, #8]
      tmpsmcr = htim->Instance->SMCR;
 80024c0:	68a3      	ldr	r3, [r4, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80024c2:	f043 0377 	orr.w	r3, r3, #119	; 0x77
  HAL_StatusTypeDef status = HAL_OK;
 80024c6:	2200      	movs	r2, #0
      htim->Instance->SMCR = tmpsmcr;
 80024c8:	60a3      	str	r3, [r4, #8]
      break;
 80024ca:	e767      	b.n	800239c <HAL_TIM_ConfigClockSource+0x6c>
 80024cc:	ffce0088 	.word	0xffce0088
 80024d0:	00100030 	.word	0x00100030
 80024d4:	00100040 	.word	0x00100040

080024d8 <HAL_TIM_OC_DelayElapsedCallback>:
 80024d8:	4770      	bx	lr
 80024da:	bf00      	nop

080024dc <HAL_TIM_IC_CaptureCallback>:
 80024dc:	4770      	bx	lr
 80024de:	bf00      	nop

080024e0 <HAL_TIM_PWM_PulseFinishedCallback>:
 80024e0:	4770      	bx	lr
 80024e2:	bf00      	nop

080024e4 <HAL_TIM_TriggerCallback>:
 80024e4:	4770      	bx	lr
 80024e6:	bf00      	nop

080024e8 <HAL_TIM_IRQHandler>:
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80024e8:	6803      	ldr	r3, [r0, #0]
 80024ea:	691a      	ldr	r2, [r3, #16]
 80024ec:	0791      	lsls	r1, r2, #30
{
 80024ee:	b510      	push	{r4, lr}
 80024f0:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80024f2:	d503      	bpl.n	80024fc <HAL_TIM_IRQHandler+0x14>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80024f4:	68da      	ldr	r2, [r3, #12]
 80024f6:	0792      	lsls	r2, r2, #30
 80024f8:	f100 808a 	bmi.w	8002610 <HAL_TIM_IRQHandler+0x128>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80024fc:	691a      	ldr	r2, [r3, #16]
 80024fe:	0752      	lsls	r2, r2, #29
 8002500:	d502      	bpl.n	8002508 <HAL_TIM_IRQHandler+0x20>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002502:	68da      	ldr	r2, [r3, #12]
 8002504:	0750      	lsls	r0, r2, #29
 8002506:	d470      	bmi.n	80025ea <HAL_TIM_IRQHandler+0x102>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002508:	691a      	ldr	r2, [r3, #16]
 800250a:	0711      	lsls	r1, r2, #28
 800250c:	d502      	bpl.n	8002514 <HAL_TIM_IRQHandler+0x2c>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800250e:	68da      	ldr	r2, [r3, #12]
 8002510:	0712      	lsls	r2, r2, #28
 8002512:	d458      	bmi.n	80025c6 <HAL_TIM_IRQHandler+0xde>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002514:	691a      	ldr	r2, [r3, #16]
 8002516:	06d1      	lsls	r1, r2, #27
 8002518:	d502      	bpl.n	8002520 <HAL_TIM_IRQHandler+0x38>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800251a:	68da      	ldr	r2, [r3, #12]
 800251c:	06d2      	lsls	r2, r2, #27
 800251e:	d43e      	bmi.n	800259e <HAL_TIM_IRQHandler+0xb6>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002520:	691a      	ldr	r2, [r3, #16]
 8002522:	07d0      	lsls	r0, r2, #31
 8002524:	d503      	bpl.n	800252e <HAL_TIM_IRQHandler+0x46>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002526:	68da      	ldr	r2, [r3, #12]
 8002528:	07d1      	lsls	r1, r2, #31
 800252a:	f100 808a 	bmi.w	8002642 <HAL_TIM_IRQHandler+0x15a>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800252e:	691a      	ldr	r2, [r3, #16]
 8002530:	0612      	lsls	r2, r2, #24
 8002532:	d503      	bpl.n	800253c <HAL_TIM_IRQHandler+0x54>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002534:	68da      	ldr	r2, [r3, #12]
 8002536:	0610      	lsls	r0, r2, #24
 8002538:	f100 808b 	bmi.w	8002652 <HAL_TIM_IRQHandler+0x16a>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800253c:	691a      	ldr	r2, [r3, #16]
 800253e:	05d1      	lsls	r1, r2, #23
 8002540:	d503      	bpl.n	800254a <HAL_TIM_IRQHandler+0x62>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002542:	68da      	ldr	r2, [r3, #12]
 8002544:	0612      	lsls	r2, r2, #24
 8002546:	f100 808c 	bmi.w	8002662 <HAL_TIM_IRQHandler+0x17a>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800254a:	691a      	ldr	r2, [r3, #16]
 800254c:	0650      	lsls	r0, r2, #25
 800254e:	d503      	bpl.n	8002558 <HAL_TIM_IRQHandler+0x70>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002550:	68da      	ldr	r2, [r3, #12]
 8002552:	0651      	lsls	r1, r2, #25
 8002554:	f100 808d 	bmi.w	8002672 <HAL_TIM_IRQHandler+0x18a>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002558:	691a      	ldr	r2, [r3, #16]
 800255a:	0692      	lsls	r2, r2, #26
 800255c:	d503      	bpl.n	8002566 <HAL_TIM_IRQHandler+0x7e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800255e:	68da      	ldr	r2, [r3, #12]
 8002560:	0690      	lsls	r0, r2, #26
 8002562:	f100 808e 	bmi.w	8002682 <HAL_TIM_IRQHandler+0x19a>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 8002566:	691a      	ldr	r2, [r3, #16]
 8002568:	02d1      	lsls	r1, r2, #11
 800256a:	d503      	bpl.n	8002574 <HAL_TIM_IRQHandler+0x8c>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 800256c:	68da      	ldr	r2, [r3, #12]
 800256e:	02d2      	lsls	r2, r2, #11
 8002570:	f100 808f 	bmi.w	8002692 <HAL_TIM_IRQHandler+0x1aa>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 8002574:	691a      	ldr	r2, [r3, #16]
 8002576:	0290      	lsls	r0, r2, #10
 8002578:	d503      	bpl.n	8002582 <HAL_TIM_IRQHandler+0x9a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 800257a:	68da      	ldr	r2, [r3, #12]
 800257c:	0291      	lsls	r1, r2, #10
 800257e:	f100 8090 	bmi.w	80026a2 <HAL_TIM_IRQHandler+0x1ba>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 8002582:	691a      	ldr	r2, [r3, #16]
 8002584:	0252      	lsls	r2, r2, #9
 8002586:	d503      	bpl.n	8002590 <HAL_TIM_IRQHandler+0xa8>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 8002588:	68da      	ldr	r2, [r3, #12]
 800258a:	0250      	lsls	r0, r2, #9
 800258c:	f100 8091 	bmi.w	80026b2 <HAL_TIM_IRQHandler+0x1ca>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 8002590:	691a      	ldr	r2, [r3, #16]
 8002592:	0211      	lsls	r1, r2, #8
 8002594:	d502      	bpl.n	800259c <HAL_TIM_IRQHandler+0xb4>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 8002596:	68da      	ldr	r2, [r3, #12]
 8002598:	0212      	lsls	r2, r2, #8
 800259a:	d44a      	bmi.n	8002632 <HAL_TIM_IRQHandler+0x14a>
}
 800259c:	bd10      	pop	{r4, pc}
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800259e:	f06f 0110 	mvn.w	r1, #16
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80025a2:	2208      	movs	r2, #8
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80025a4:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80025a6:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80025a8:	69db      	ldr	r3, [r3, #28]
 80025aa:	f413 7f40 	tst.w	r3, #768	; 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 80025ae:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80025b0:	f040 8090 	bne.w	80026d4 <HAL_TIM_IRQHandler+0x1ec>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80025b4:	f7ff ff90 	bl	80024d8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80025b8:	4620      	mov	r0, r4
 80025ba:	f7ff ff91 	bl	80024e0 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80025be:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80025c0:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80025c2:	7722      	strb	r2, [r4, #28]
 80025c4:	e7ac      	b.n	8002520 <HAL_TIM_IRQHandler+0x38>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80025c6:	f06f 0108 	mvn.w	r1, #8
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80025ca:	2204      	movs	r2, #4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80025cc:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80025ce:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80025d0:	69db      	ldr	r3, [r3, #28]
 80025d2:	079b      	lsls	r3, r3, #30
        HAL_TIM_IC_CaptureCallback(htim);
 80025d4:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80025d6:	d17a      	bne.n	80026ce <HAL_TIM_IRQHandler+0x1e6>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80025d8:	f7ff ff7e 	bl	80024d8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80025dc:	4620      	mov	r0, r4
 80025de:	f7ff ff7f 	bl	80024e0 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80025e2:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80025e4:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80025e6:	7722      	strb	r2, [r4, #28]
 80025e8:	e794      	b.n	8002514 <HAL_TIM_IRQHandler+0x2c>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80025ea:	f06f 0104 	mvn.w	r1, #4
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80025ee:	2202      	movs	r2, #2
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80025f0:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80025f2:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80025f4:	699b      	ldr	r3, [r3, #24]
 80025f6:	f413 7f40 	tst.w	r3, #768	; 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 80025fa:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80025fc:	d164      	bne.n	80026c8 <HAL_TIM_IRQHandler+0x1e0>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80025fe:	f7ff ff6b 	bl	80024d8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002602:	4620      	mov	r0, r4
 8002604:	f7ff ff6c 	bl	80024e0 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002608:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800260a:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800260c:	7722      	strb	r2, [r4, #28]
 800260e:	e77b      	b.n	8002508 <HAL_TIM_IRQHandler+0x20>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002610:	f06f 0102 	mvn.w	r1, #2
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002614:	2201      	movs	r2, #1
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002616:	6119      	str	r1, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002618:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800261a:	699b      	ldr	r3, [r3, #24]
 800261c:	0799      	lsls	r1, r3, #30
 800261e:	d150      	bne.n	80026c2 <HAL_TIM_IRQHandler+0x1da>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002620:	f7ff ff5a 	bl	80024d8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002624:	4620      	mov	r0, r4
 8002626:	f7ff ff5b 	bl	80024e0 <HAL_TIM_PWM_PulseFinishedCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800262a:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800262c:	6823      	ldr	r3, [r4, #0]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800262e:	7722      	strb	r2, [r4, #28]
 8002630:	e764      	b.n	80024fc <HAL_TIM_IRQHandler+0x14>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 8002632:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
      HAL_TIMEx_TransitionErrorCallback(htim);
 8002636:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 8002638:	611a      	str	r2, [r3, #16]
}
 800263a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_TransitionErrorCallback(htim);
 800263e:	f000 b93d 	b.w	80028bc <HAL_TIMEx_TransitionErrorCallback>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002642:	f06f 0201 	mvn.w	r2, #1
 8002646:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8002648:	4620      	mov	r0, r4
 800264a:	f7fd ffa5 	bl	8000598 <HAL_TIM_PeriodElapsedCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800264e:	6823      	ldr	r3, [r4, #0]
 8002650:	e76d      	b.n	800252e <HAL_TIM_IRQHandler+0x46>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002652:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002656:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8002658:	4620      	mov	r0, r4
 800265a:	f000 f925 	bl	80028a8 <HAL_TIMEx_BreakCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800265e:	6823      	ldr	r3, [r4, #0]
 8002660:	e76c      	b.n	800253c <HAL_TIM_IRQHandler+0x54>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002662:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8002666:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 8002668:	4620      	mov	r0, r4
 800266a:	f000 f91f 	bl	80028ac <HAL_TIMEx_Break2Callback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800266e:	6823      	ldr	r3, [r4, #0]
 8002670:	e76b      	b.n	800254a <HAL_TIM_IRQHandler+0x62>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002672:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002676:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8002678:	4620      	mov	r0, r4
 800267a:	f7ff ff33 	bl	80024e4 <HAL_TIM_TriggerCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800267e:	6823      	ldr	r3, [r4, #0]
 8002680:	e76a      	b.n	8002558 <HAL_TIM_IRQHandler+0x70>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002682:	f06f 0220 	mvn.w	r2, #32
 8002686:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 8002688:	4620      	mov	r0, r4
 800268a:	f000 f90b 	bl	80028a4 <HAL_TIMEx_CommutCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 800268e:	6823      	ldr	r3, [r4, #0]
 8002690:	e769      	b.n	8002566 <HAL_TIM_IRQHandler+0x7e>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 8002692:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 8002696:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_EncoderIndexCallback(htim);
 8002698:	4620      	mov	r0, r4
 800269a:	f000 f909 	bl	80028b0 <HAL_TIMEx_EncoderIndexCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 800269e:	6823      	ldr	r3, [r4, #0]
 80026a0:	e768      	b.n	8002574 <HAL_TIM_IRQHandler+0x8c>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 80026a2:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 80026a6:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_DirectionChangeCallback(htim);
 80026a8:	4620      	mov	r0, r4
 80026aa:	f000 f903 	bl	80028b4 <HAL_TIMEx_DirectionChangeCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 80026ae:	6823      	ldr	r3, [r4, #0]
 80026b0:	e767      	b.n	8002582 <HAL_TIM_IRQHandler+0x9a>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 80026b2:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 80026b6:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_IndexErrorCallback(htim);
 80026b8:	4620      	mov	r0, r4
 80026ba:	f000 f8fd 	bl	80028b8 <HAL_TIMEx_IndexErrorCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 80026be:	6823      	ldr	r3, [r4, #0]
 80026c0:	e766      	b.n	8002590 <HAL_TIM_IRQHandler+0xa8>
          HAL_TIM_IC_CaptureCallback(htim);
 80026c2:	f7ff ff0b 	bl	80024dc <HAL_TIM_IC_CaptureCallback>
 80026c6:	e7b0      	b.n	800262a <HAL_TIM_IRQHandler+0x142>
        HAL_TIM_IC_CaptureCallback(htim);
 80026c8:	f7ff ff08 	bl	80024dc <HAL_TIM_IC_CaptureCallback>
 80026cc:	e79c      	b.n	8002608 <HAL_TIM_IRQHandler+0x120>
        HAL_TIM_IC_CaptureCallback(htim);
 80026ce:	f7ff ff05 	bl	80024dc <HAL_TIM_IC_CaptureCallback>
 80026d2:	e786      	b.n	80025e2 <HAL_TIM_IRQHandler+0xfa>
        HAL_TIM_IC_CaptureCallback(htim);
 80026d4:	f7ff ff02 	bl	80024dc <HAL_TIM_IC_CaptureCallback>
 80026d8:	e771      	b.n	80025be <HAL_TIM_IRQHandler+0xd6>
 80026da:	bf00      	nop

080026dc <TIM_Base_SetConfig>:
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80026dc:	4a32      	ldr	r2, [pc, #200]	; (80027a8 <TIM_Base_SetConfig+0xcc>)
  tmpcr1 = TIMx->CR1;
 80026de:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80026e0:	4290      	cmp	r0, r2
{
 80026e2:	b430      	push	{r4, r5}
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80026e4:	d039      	beq.n	800275a <TIM_Base_SetConfig+0x7e>
 80026e6:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80026ea:	d021      	beq.n	8002730 <TIM_Base_SetConfig+0x54>
 80026ec:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 80026f0:	4290      	cmp	r0, r2
 80026f2:	d01d      	beq.n	8002730 <TIM_Base_SetConfig+0x54>
 80026f4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80026f8:	4290      	cmp	r0, r2
 80026fa:	d019      	beq.n	8002730 <TIM_Base_SetConfig+0x54>
 80026fc:	f502 3296 	add.w	r2, r2, #76800	; 0x12c00
 8002700:	4290      	cmp	r0, r2
 8002702:	d041      	beq.n	8002788 <TIM_Base_SetConfig+0xac>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002704:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 8002708:	4290      	cmp	r0, r2
 800270a:	d047      	beq.n	800279c <TIM_Base_SetConfig+0xc0>
 800270c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002710:	4290      	cmp	r0, r2
 8002712:	d043      	beq.n	800279c <TIM_Base_SetConfig+0xc0>
 8002714:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002718:	4290      	cmp	r0, r2
 800271a:	d03f      	beq.n	800279c <TIM_Base_SetConfig+0xc0>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800271c:	694d      	ldr	r5, [r1, #20]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800271e:	688c      	ldr	r4, [r1, #8]
  TIMx->PSC = Structure->Prescaler;
 8002720:	680a      	ldr	r2, [r1, #0]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002722:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002726:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 8002728:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800272a:	62c4      	str	r4, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800272c:	6282      	str	r2, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800272e:	e010      	b.n	8002752 <TIM_Base_SetConfig+0x76>
    tmpcr1 |= Structure->CounterMode;
 8002730:	684a      	ldr	r2, [r1, #4]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002732:	68cc      	ldr	r4, [r1, #12]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002734:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8002738:	4313      	orrs	r3, r2
    tmpcr1 &= ~TIM_CR1_CKD;
 800273a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800273e:	694a      	ldr	r2, [r1, #20]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002740:	4323      	orrs	r3, r4
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002742:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002746:	688c      	ldr	r4, [r1, #8]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002748:	4313      	orrs	r3, r2
  TIMx->PSC = Structure->Prescaler;
 800274a:	680a      	ldr	r2, [r1, #0]
  TIMx->CR1 = tmpcr1;
 800274c:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800274e:	62c4      	str	r4, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8002750:	6282      	str	r2, [r0, #40]	; 0x28
  TIMx->EGR = TIM_EGR_UG;
 8002752:	2301      	movs	r3, #1
}
 8002754:	bc30      	pop	{r4, r5}
  TIMx->EGR = TIM_EGR_UG;
 8002756:	6143      	str	r3, [r0, #20]
}
 8002758:	4770      	bx	lr
    tmpcr1 |= Structure->CounterMode;
 800275a:	684c      	ldr	r4, [r1, #4]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800275c:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800275e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8002762:	4323      	orrs	r3, r4
    tmpcr1 &= ~TIM_CR1_CKD;
 8002764:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002768:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800276a:	694a      	ldr	r2, [r1, #20]
 800276c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002770:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8002772:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002774:	688b      	ldr	r3, [r1, #8]
 8002776:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8002778:	680b      	ldr	r3, [r1, #0]
 800277a:	6283      	str	r3, [r0, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 800277c:	690b      	ldr	r3, [r1, #16]
 800277e:	6303      	str	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 8002780:	2301      	movs	r3, #1
}
 8002782:	bc30      	pop	{r4, r5}
  TIMx->EGR = TIM_EGR_UG;
 8002784:	6143      	str	r3, [r0, #20]
}
 8002786:	4770      	bx	lr
    tmpcr1 |= Structure->CounterMode;
 8002788:	684c      	ldr	r4, [r1, #4]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800278a:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800278c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8002790:	4323      	orrs	r3, r4
    tmpcr1 &= ~TIM_CR1_CKD;
 8002792:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002796:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002798:	694a      	ldr	r2, [r1, #20]
 800279a:	e7e7      	b.n	800276c <TIM_Base_SetConfig+0x90>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800279c:	68cc      	ldr	r4, [r1, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800279e:	694a      	ldr	r2, [r1, #20]
    tmpcr1 &= ~TIM_CR1_CKD;
 80027a0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80027a4:	4323      	orrs	r3, r4
 80027a6:	e7e1      	b.n	800276c <TIM_Base_SetConfig+0x90>
 80027a8:	40012c00 	.word	0x40012c00

080027ac <HAL_TIM_Base_Init>:
  if (htim == NULL)
 80027ac:	b370      	cbz	r0, 800280c <HAL_TIM_Base_Init+0x60>
{
 80027ae:	b510      	push	{r4, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 80027b0:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80027b4:	4604      	mov	r4, r0
 80027b6:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80027ba:	b313      	cbz	r3, 8002802 <HAL_TIM_Base_Init+0x56>
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80027bc:	4621      	mov	r1, r4
  htim->State = HAL_TIM_STATE_BUSY;
 80027be:	2302      	movs	r3, #2
 80027c0:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80027c4:	f851 0b04 	ldr.w	r0, [r1], #4
 80027c8:	f7ff ff88 	bl	80026dc <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80027cc:	2301      	movs	r3, #1
 80027ce:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80027d2:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 80027d6:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 80027da:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 80027de:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 80027e2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80027e6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80027ea:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 80027ee:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80027f2:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 80027f6:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 80027fa:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 80027fe:	2000      	movs	r0, #0
}
 8002800:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8002802:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8002806:	f7fe f967 	bl	8000ad8 <HAL_TIM_Base_MspInit>
 800280a:	e7d7      	b.n	80027bc <HAL_TIM_Base_Init+0x10>
    return HAL_ERROR;
 800280c:	2001      	movs	r0, #1
}
 800280e:	4770      	bx	lr

08002810 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002810:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8002814:	2b01      	cmp	r3, #1
 8002816:	d03e      	beq.n	8002896 <HAL_TIMEx_MasterConfigSynchronization+0x86>
{
 8002818:	b470      	push	{r4, r5, r6}

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800281a:	6802      	ldr	r2, [r0, #0]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800281c:	4d1f      	ldr	r5, [pc, #124]	; (800289c <HAL_TIMEx_MasterConfigSynchronization+0x8c>)
  htim->State = HAL_TIM_STATE_BUSY;
 800281e:	2302      	movs	r3, #2
 8002820:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002824:	42aa      	cmp	r2, r5
  tmpcr2 = htim->Instance->CR2;
 8002826:	6853      	ldr	r3, [r2, #4]
  tmpsmcr = htim->Instance->SMCR;
 8002828:	6894      	ldr	r4, [r2, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800282a:	d028      	beq.n	800287e <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 800282c:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8002830:	42aa      	cmp	r2, r5
 8002832:	d024      	beq.n	800287e <HAL_TIMEx_MasterConfigSynchronization+0x6e>
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002834:	680e      	ldr	r6, [r1, #0]
  tmpcr2 &= ~TIM_CR2_MMS;
 8002836:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800283a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800283e:	4333      	orrs	r3, r6

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002840:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
  htim->Instance->CR2 = tmpcr2;
 8002844:	6053      	str	r3, [r2, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002846:	d00c      	beq.n	8002862 <HAL_TIMEx_MasterConfigSynchronization+0x52>
 8002848:	4b15      	ldr	r3, [pc, #84]	; (80028a0 <HAL_TIMEx_MasterConfigSynchronization+0x90>)
 800284a:	429a      	cmp	r2, r3
 800284c:	d009      	beq.n	8002862 <HAL_TIMEx_MasterConfigSynchronization+0x52>
 800284e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002852:	429a      	cmp	r2, r3
 8002854:	d005      	beq.n	8002862 <HAL_TIMEx_MasterConfigSynchronization+0x52>
 8002856:	42aa      	cmp	r2, r5
 8002858:	d003      	beq.n	8002862 <HAL_TIMEx_MasterConfigSynchronization+0x52>
 800285a:	f503 339c 	add.w	r3, r3, #79872	; 0x13800
 800285e:	429a      	cmp	r2, r3
 8002860:	d104      	bne.n	800286c <HAL_TIMEx_MasterConfigSynchronization+0x5c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002862:	688b      	ldr	r3, [r1, #8]
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002864:	f024 0480 	bic.w	r4, r4, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002868:	431c      	orrs	r4, r3

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800286a:	6094      	str	r4, [r2, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;

  __HAL_UNLOCK(htim);
 800286c:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 800286e:	2201      	movs	r2, #1
 8002870:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8002874:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
}
 8002878:	bc70      	pop	{r4, r5, r6}
  return HAL_OK;
 800287a:	4618      	mov	r0, r3
}
 800287c:	4770      	bx	lr
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800287e:	684d      	ldr	r5, [r1, #4]
    tmpcr2 &= ~TIM_CR2_MMS2;
 8002880:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8002884:	432b      	orrs	r3, r5
  tmpcr2 &= ~TIM_CR2_MMS;
 8002886:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800288a:	680d      	ldr	r5, [r1, #0]
  tmpcr2 &= ~TIM_CR2_MMS;
 800288c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002890:	432b      	orrs	r3, r5
  htim->Instance->CR2 = tmpcr2;
 8002892:	6053      	str	r3, [r2, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002894:	e7e5      	b.n	8002862 <HAL_TIMEx_MasterConfigSynchronization+0x52>
  __HAL_LOCK(htim);
 8002896:	2002      	movs	r0, #2
}
 8002898:	4770      	bx	lr
 800289a:	bf00      	nop
 800289c:	40012c00 	.word	0x40012c00
 80028a0:	40000400 	.word	0x40000400

080028a4 <HAL_TIMEx_CommutCallback>:
 80028a4:	4770      	bx	lr
 80028a6:	bf00      	nop

080028a8 <HAL_TIMEx_BreakCallback>:
 80028a8:	4770      	bx	lr
 80028aa:	bf00      	nop

080028ac <HAL_TIMEx_Break2Callback>:
 80028ac:	4770      	bx	lr
 80028ae:	bf00      	nop

080028b0 <HAL_TIMEx_EncoderIndexCallback>:
 80028b0:	4770      	bx	lr
 80028b2:	bf00      	nop

080028b4 <HAL_TIMEx_DirectionChangeCallback>:
 80028b4:	4770      	bx	lr
 80028b6:	bf00      	nop

080028b8 <HAL_TIMEx_IndexErrorCallback>:
 80028b8:	4770      	bx	lr
 80028ba:	bf00      	nop

080028bc <HAL_TIMEx_TransitionErrorCallback>:
 80028bc:	4770      	bx	lr
 80028be:	bf00      	nop

080028c0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80028c0:	b410      	push	{r4}
 80028c2:	6802      	ldr	r2, [r0, #0]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80028c4:	e852 3f00 	ldrex	r3, [r2]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80028c8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80028cc:	e842 3100 	strex	r1, r3, [r2]
 80028d0:	2900      	cmp	r1, #0
 80028d2:	d1f7      	bne.n	80028c4 <UART_EndRxTransfer+0x4>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80028d4:	4c14      	ldr	r4, [pc, #80]	; (8002928 <UART_EndRxTransfer+0x68>)
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80028d6:	f102 0308 	add.w	r3, r2, #8
 80028da:	e853 3f00 	ldrex	r3, [r3]
 80028de:	4023      	ands	r3, r4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80028e0:	f102 0c08 	add.w	ip, r2, #8
 80028e4:	e84c 3100 	strex	r1, r3, [ip]
 80028e8:	2900      	cmp	r1, #0
 80028ea:	d1f4      	bne.n	80028d6 <UART_EndRxTransfer+0x16>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80028ec:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 80028ee:	2b01      	cmp	r3, #1
 80028f0:	d008      	beq.n	8002904 <UART_EndRxTransfer+0x44>
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80028f2:	2300      	movs	r3, #0
  huart->RxState = HAL_UART_STATE_READY;
 80028f4:	2220      	movs	r2, #32
 80028f6:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
}
 80028fa:	f85d 4b04 	ldr.w	r4, [sp], #4
  huart->RxISR = NULL;
 80028fe:	6703      	str	r3, [r0, #112]	; 0x70
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002900:	66c3      	str	r3, [r0, #108]	; 0x6c
}
 8002902:	4770      	bx	lr
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002904:	e852 3f00 	ldrex	r3, [r2]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002908:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800290c:	e842 3100 	strex	r1, r3, [r2]
 8002910:	2900      	cmp	r1, #0
 8002912:	d0ee      	beq.n	80028f2 <UART_EndRxTransfer+0x32>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002914:	e852 3f00 	ldrex	r3, [r2]
 8002918:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800291c:	e842 3100 	strex	r1, r3, [r2]
 8002920:	2900      	cmp	r1, #0
 8002922:	d1ef      	bne.n	8002904 <UART_EndRxTransfer+0x44>
 8002924:	e7e5      	b.n	80028f2 <UART_EndRxTransfer+0x32>
 8002926:	bf00      	nop
 8002928:	effffffe 	.word	0xeffffffe

0800292c <UART_TxISR_16BIT>:
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800292c:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
 8002930:	2b21      	cmp	r3, #33	; 0x21
 8002932:	d000      	beq.n	8002936 <UART_TxISR_16BIT+0xa>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8002934:	4770      	bx	lr
    if (huart->TxXferCount == 0U)
 8002936:	f8b0 3056 	ldrh.w	r3, [r0, #86]	; 0x56
 800293a:	b29b      	uxth	r3, r3
 800293c:	b98b      	cbnz	r3, 8002962 <UART_TxISR_16BIT+0x36>
 800293e:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002940:	e852 3f00 	ldrex	r3, [r2]
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8002944:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002948:	e842 3100 	strex	r1, r3, [r2]
 800294c:	2900      	cmp	r1, #0
 800294e:	d1f7      	bne.n	8002940 <UART_TxISR_16BIT+0x14>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002950:	e852 3f00 	ldrex	r3, [r2]
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8002954:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002958:	e842 3100 	strex	r1, r3, [r2]
 800295c:	2900      	cmp	r1, #0
 800295e:	d1f7      	bne.n	8002950 <UART_TxISR_16BIT+0x24>
 8002960:	4770      	bx	lr
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8002962:	6d02      	ldr	r2, [r0, #80]	; 0x50
 8002964:	6801      	ldr	r1, [r0, #0]
 8002966:	f832 3b02 	ldrh.w	r3, [r2], #2
 800296a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800296e:	628b      	str	r3, [r1, #40]	; 0x28
      huart->TxXferCount--;
 8002970:	f8b0 3056 	ldrh.w	r3, [r0, #86]	; 0x56
      huart->pTxBuffPtr += 2U;
 8002974:	6502      	str	r2, [r0, #80]	; 0x50
      huart->TxXferCount--;
 8002976:	3b01      	subs	r3, #1
 8002978:	b29b      	uxth	r3, r3
 800297a:	f8a0 3056 	strh.w	r3, [r0, #86]	; 0x56
}
 800297e:	4770      	bx	lr

08002980 <UART_TxISR_8BIT_FIFOEN>:
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002980:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
 8002984:	2b21      	cmp	r3, #33	; 0x21
 8002986:	d000      	beq.n	800298a <UART_TxISR_8BIT_FIFOEN+0xa>
 8002988:	4770      	bx	lr
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800298a:	f8b0 306a 	ldrh.w	r3, [r0, #106]	; 0x6a
 800298e:	2b00      	cmp	r3, #0
 8002990:	d0fa      	beq.n	8002988 <UART_TxISR_8BIT_FIFOEN+0x8>
{
 8002992:	b410      	push	{r4}
        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);

        break; /* force exit loop */
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8002994:	6801      	ldr	r1, [r0, #0]
      if (huart->TxXferCount == 0U)
 8002996:	f8b0 2056 	ldrh.w	r2, [r0, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800299a:	3b01      	subs	r3, #1
      if (huart->TxXferCount == 0U)
 800299c:	b292      	uxth	r2, r2
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800299e:	b29b      	uxth	r3, r3
      if (huart->TxXferCount == 0U)
 80029a0:	b192      	cbz	r2, 80029c8 <UART_TxISR_8BIT_FIFOEN+0x48>
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 80029a2:	69ca      	ldr	r2, [r1, #28]
 80029a4:	0612      	lsls	r2, r2, #24
 80029a6:	d50a      	bpl.n	80029be <UART_TxISR_8BIT_FIFOEN+0x3e>
      {
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 80029a8:	6d04      	ldr	r4, [r0, #80]	; 0x50
 80029aa:	f814 2b01 	ldrb.w	r2, [r4], #1
 80029ae:	628a      	str	r2, [r1, #40]	; 0x28
        huart->pTxBuffPtr++;
        huart->TxXferCount--;
 80029b0:	f8b0 2056 	ldrh.w	r2, [r0, #86]	; 0x56
        huart->pTxBuffPtr++;
 80029b4:	6504      	str	r4, [r0, #80]	; 0x50
        huart->TxXferCount--;
 80029b6:	3a01      	subs	r2, #1
 80029b8:	b292      	uxth	r2, r2
 80029ba:	f8a0 2056 	strh.w	r2, [r0, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d1e9      	bne.n	8002996 <UART_TxISR_8BIT_FIFOEN+0x16>
      {
        /* Nothing to do */
      }
    }
  }
}
 80029c2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80029c6:	4770      	bx	lr
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80029c8:	f101 0308 	add.w	r3, r1, #8
 80029cc:	e853 3f00 	ldrex	r3, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 80029d0:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80029d4:	f101 0008 	add.w	r0, r1, #8
 80029d8:	e840 3200 	strex	r2, r3, [r0]
 80029dc:	2a00      	cmp	r2, #0
 80029de:	d1f3      	bne.n	80029c8 <UART_TxISR_8BIT_FIFOEN+0x48>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80029e0:	e851 3f00 	ldrex	r3, [r1]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80029e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80029e8:	e841 3200 	strex	r2, r3, [r1]
 80029ec:	2a00      	cmp	r2, #0
 80029ee:	d0e8      	beq.n	80029c2 <UART_TxISR_8BIT_FIFOEN+0x42>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80029f0:	e851 3f00 	ldrex	r3, [r1]
 80029f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80029f8:	e841 3200 	strex	r2, r3, [r1]
 80029fc:	2a00      	cmp	r2, #0
 80029fe:	d1ef      	bne.n	80029e0 <UART_TxISR_8BIT_FIFOEN+0x60>
 8002a00:	e7df      	b.n	80029c2 <UART_TxISR_8BIT_FIFOEN+0x42>
 8002a02:	bf00      	nop

08002a04 <UART_TxISR_16BIT_FIFOEN>:
{
  const uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002a04:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
 8002a08:	2b21      	cmp	r3, #33	; 0x21
 8002a0a:	d000      	beq.n	8002a0e <UART_TxISR_16BIT_FIFOEN+0xa>
 8002a0c:	4770      	bx	lr
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8002a0e:	f8b0 306a 	ldrh.w	r3, [r0, #106]	; 0x6a
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d0fa      	beq.n	8002a0c <UART_TxISR_16BIT_FIFOEN+0x8>
{
 8002a16:	b410      	push	{r4}
        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);

        break; /* force exit loop */
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8002a18:	6801      	ldr	r1, [r0, #0]
      if (huart->TxXferCount == 0U)
 8002a1a:	f8b0 2056 	ldrh.w	r2, [r0, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8002a1e:	3b01      	subs	r3, #1
      if (huart->TxXferCount == 0U)
 8002a20:	b292      	uxth	r2, r2
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8002a22:	b29b      	uxth	r3, r3
      if (huart->TxXferCount == 0U)
 8002a24:	b1a2      	cbz	r2, 8002a50 <UART_TxISR_16BIT_FIFOEN+0x4c>
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8002a26:	69ca      	ldr	r2, [r1, #28]
 8002a28:	0612      	lsls	r2, r2, #24
 8002a2a:	d50c      	bpl.n	8002a46 <UART_TxISR_16BIT_FIFOEN+0x42>
      {
        tmp = (const uint16_t *) huart->pTxBuffPtr;
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8002a2c:	6d04      	ldr	r4, [r0, #80]	; 0x50
 8002a2e:	f834 2b02 	ldrh.w	r2, [r4], #2
 8002a32:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002a36:	628a      	str	r2, [r1, #40]	; 0x28
        huart->pTxBuffPtr += 2U;
        huart->TxXferCount--;
 8002a38:	f8b0 2056 	ldrh.w	r2, [r0, #86]	; 0x56
        huart->pTxBuffPtr += 2U;
 8002a3c:	6504      	str	r4, [r0, #80]	; 0x50
        huart->TxXferCount--;
 8002a3e:	3a01      	subs	r2, #1
 8002a40:	b292      	uxth	r2, r2
 8002a42:	f8a0 2056 	strh.w	r2, [r0, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d1e7      	bne.n	8002a1a <UART_TxISR_16BIT_FIFOEN+0x16>
      {
        /* Nothing to do */
      }
    }
  }
}
 8002a4a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002a4e:	4770      	bx	lr
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a50:	f101 0308 	add.w	r3, r1, #8
 8002a54:	e853 3f00 	ldrex	r3, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8002a58:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a5c:	f101 0008 	add.w	r0, r1, #8
 8002a60:	e840 3200 	strex	r2, r3, [r0]
 8002a64:	2a00      	cmp	r2, #0
 8002a66:	d1f3      	bne.n	8002a50 <UART_TxISR_16BIT_FIFOEN+0x4c>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a68:	e851 3f00 	ldrex	r3, [r1]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8002a6c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a70:	e841 3200 	strex	r2, r3, [r1]
 8002a74:	2a00      	cmp	r2, #0
 8002a76:	d0e8      	beq.n	8002a4a <UART_TxISR_16BIT_FIFOEN+0x46>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a78:	e851 3f00 	ldrex	r3, [r1]
 8002a7c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a80:	e841 3200 	strex	r2, r3, [r1]
 8002a84:	2a00      	cmp	r2, #0
 8002a86:	d1ef      	bne.n	8002a68 <UART_TxISR_16BIT_FIFOEN+0x64>
 8002a88:	e7df      	b.n	8002a4a <UART_TxISR_16BIT_FIFOEN+0x46>
 8002a8a:	bf00      	nop

08002a8c <UART_TxISR_8BIT>:
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002a8c:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
 8002a90:	2b21      	cmp	r3, #33	; 0x21
 8002a92:	d000      	beq.n	8002a96 <UART_TxISR_8BIT+0xa>
}
 8002a94:	4770      	bx	lr
    if (huart->TxXferCount == 0U)
 8002a96:	f8b0 3056 	ldrh.w	r3, [r0, #86]	; 0x56
 8002a9a:	b29b      	uxth	r3, r3
 8002a9c:	b98b      	cbnz	r3, 8002ac2 <UART_TxISR_8BIT+0x36>
 8002a9e:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002aa0:	e852 3f00 	ldrex	r3, [r2]
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8002aa4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002aa8:	e842 3100 	strex	r1, r3, [r2]
 8002aac:	2900      	cmp	r1, #0
 8002aae:	d1f7      	bne.n	8002aa0 <UART_TxISR_8BIT+0x14>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ab0:	e852 3f00 	ldrex	r3, [r2]
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8002ab4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ab8:	e842 3100 	strex	r1, r3, [r2]
 8002abc:	2900      	cmp	r1, #0
 8002abe:	d1f7      	bne.n	8002ab0 <UART_TxISR_8BIT+0x24>
 8002ac0:	4770      	bx	lr
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8002ac2:	6d02      	ldr	r2, [r0, #80]	; 0x50
 8002ac4:	6803      	ldr	r3, [r0, #0]
 8002ac6:	f812 1b01 	ldrb.w	r1, [r2], #1
 8002aca:	6299      	str	r1, [r3, #40]	; 0x28
      huart->TxXferCount--;
 8002acc:	f8b0 3056 	ldrh.w	r3, [r0, #86]	; 0x56
      huart->pTxBuffPtr++;
 8002ad0:	6502      	str	r2, [r0, #80]	; 0x50
      huart->TxXferCount--;
 8002ad2:	3b01      	subs	r3, #1
 8002ad4:	b29b      	uxth	r3, r3
 8002ad6:	f8a0 3056 	strh.w	r3, [r0, #86]	; 0x56
}
 8002ada:	4770      	bx	lr

08002adc <HAL_UART_Transmit_IT>:
  if (huart->gState == HAL_UART_STATE_READY)
 8002adc:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
 8002ae0:	2b20      	cmp	r3, #32
 8002ae2:	d131      	bne.n	8002b48 <HAL_UART_Transmit_IT+0x6c>
    if ((pData == NULL) || (Size == 0U))
 8002ae4:	b371      	cbz	r1, 8002b44 <HAL_UART_Transmit_IT+0x68>
 8002ae6:	b36a      	cbz	r2, 8002b44 <HAL_UART_Transmit_IT+0x68>
    __HAL_LOCK(huart);
 8002ae8:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 8002aec:	2b01      	cmp	r3, #1
 8002aee:	d02b      	beq.n	8002b48 <HAL_UART_Transmit_IT+0x6c>
{
 8002af0:	b410      	push	{r4}
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 8002af2:	6e43      	ldr	r3, [r0, #100]	; 0x64
    huart->TxXferCount = Size;
 8002af4:	f8a0 2056 	strh.w	r2, [r0, #86]	; 0x56
    __HAL_LOCK(huart);
 8002af8:	2401      	movs	r4, #1
 8002afa:	f880 4080 	strb.w	r4, [r0, #128]	; 0x80
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002afe:	2400      	movs	r4, #0
 8002b00:	f8c0 408c 	str.w	r4, [r0, #140]	; 0x8c
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 8002b04:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002b08:	f04f 0421 	mov.w	r4, #33	; 0x21
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002b0c:	6883      	ldr	r3, [r0, #8]
    huart->pTxBuffPtr  = pData;
 8002b0e:	6501      	str	r1, [r0, #80]	; 0x50
    huart->TxXferSize  = Size;
 8002b10:	f8a0 2054 	strh.w	r2, [r0, #84]	; 0x54
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002b14:	f8c0 4084 	str.w	r4, [r0, #132]	; 0x84
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 8002b18:	d018      	beq.n	8002b4c <HAL_UART_Transmit_IT+0x70>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002b1a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b1e:	d02b      	beq.n	8002b78 <HAL_UART_Transmit_IT+0x9c>
        huart->TxISR = UART_TxISR_8BIT;
 8002b20:	4b1c      	ldr	r3, [pc, #112]	; (8002b94 <HAL_UART_Transmit_IT+0xb8>)
 8002b22:	6802      	ldr	r2, [r0, #0]
 8002b24:	6743      	str	r3, [r0, #116]	; 0x74
      __HAL_UNLOCK(huart);
 8002b26:	2100      	movs	r1, #0
 8002b28:	f880 1080 	strb.w	r1, [r0, #128]	; 0x80
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b2c:	e852 3f00 	ldrex	r3, [r2]
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8002b30:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b34:	e842 3100 	strex	r1, r3, [r2]
 8002b38:	2900      	cmp	r1, #0
 8002b3a:	d1f7      	bne.n	8002b2c <HAL_UART_Transmit_IT+0x50>
    return HAL_OK;
 8002b3c:	2000      	movs	r0, #0
}
 8002b3e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002b42:	4770      	bx	lr
      return HAL_ERROR;
 8002b44:	2001      	movs	r0, #1
 8002b46:	4770      	bx	lr
    return HAL_BUSY;
 8002b48:	2002      	movs	r0, #2
}
 8002b4a:	4770      	bx	lr
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002b4c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b50:	d019      	beq.n	8002b86 <HAL_UART_Transmit_IT+0xaa>
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 8002b52:	4b11      	ldr	r3, [pc, #68]	; (8002b98 <HAL_UART_Transmit_IT+0xbc>)
 8002b54:	6802      	ldr	r2, [r0, #0]
 8002b56:	6743      	str	r3, [r0, #116]	; 0x74
      __HAL_UNLOCK(huart);
 8002b58:	2100      	movs	r1, #0
 8002b5a:	f880 1080 	strb.w	r1, [r0, #128]	; 0x80
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b5e:	f102 0308 	add.w	r3, r2, #8
 8002b62:	e853 3f00 	ldrex	r3, [r3]
      ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8002b66:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b6a:	f102 0008 	add.w	r0, r2, #8
 8002b6e:	e840 3100 	strex	r1, r3, [r0]
 8002b72:	2900      	cmp	r1, #0
 8002b74:	d1f3      	bne.n	8002b5e <HAL_UART_Transmit_IT+0x82>
 8002b76:	e7e1      	b.n	8002b3c <HAL_UART_Transmit_IT+0x60>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002b78:	6901      	ldr	r1, [r0, #16]
        huart->TxISR = UART_TxISR_16BIT;
 8002b7a:	4b06      	ldr	r3, [pc, #24]	; (8002b94 <HAL_UART_Transmit_IT+0xb8>)
 8002b7c:	4a07      	ldr	r2, [pc, #28]	; (8002b9c <HAL_UART_Transmit_IT+0xc0>)
 8002b7e:	2900      	cmp	r1, #0
 8002b80:	bf08      	it	eq
 8002b82:	4613      	moveq	r3, r2
 8002b84:	e7cd      	b.n	8002b22 <HAL_UART_Transmit_IT+0x46>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002b86:	6901      	ldr	r1, [r0, #16]
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 8002b88:	4b03      	ldr	r3, [pc, #12]	; (8002b98 <HAL_UART_Transmit_IT+0xbc>)
 8002b8a:	4a05      	ldr	r2, [pc, #20]	; (8002ba0 <HAL_UART_Transmit_IT+0xc4>)
 8002b8c:	2900      	cmp	r1, #0
 8002b8e:	bf08      	it	eq
 8002b90:	4613      	moveq	r3, r2
 8002b92:	e7df      	b.n	8002b54 <HAL_UART_Transmit_IT+0x78>
 8002b94:	08002a8d 	.word	0x08002a8d
 8002b98:	08002981 	.word	0x08002981
 8002b9c:	0800292d 	.word	0x0800292d
 8002ba0:	08002a05 	.word	0x08002a05

08002ba4 <HAL_UART_AbortReceive>:
{
 8002ba4:	b538      	push	{r3, r4, r5, lr}
 8002ba6:	6803      	ldr	r3, [r0, #0]
 8002ba8:	4604      	mov	r4, r0
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002baa:	e853 2f00 	ldrex	r2, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE));
 8002bae:	f422 7290 	bic.w	r2, r2, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002bb2:	e843 2100 	strex	r1, r2, [r3]
 8002bb6:	2900      	cmp	r1, #0
 8002bb8:	d1f7      	bne.n	8002baa <HAL_UART_AbortReceive+0x6>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE | USART_CR3_RXFTIE);
 8002bba:	4829      	ldr	r0, [pc, #164]	; (8002c60 <HAL_UART_AbortReceive+0xbc>)
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002bbc:	f103 0208 	add.w	r2, r3, #8
 8002bc0:	e852 2f00 	ldrex	r2, [r2]
 8002bc4:	4002      	ands	r2, r0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002bc6:	f103 0508 	add.w	r5, r3, #8
 8002bca:	e845 2100 	strex	r1, r2, [r5]
 8002bce:	2900      	cmp	r1, #0
 8002bd0:	d1f4      	bne.n	8002bbc <HAL_UART_AbortReceive+0x18>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002bd2:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 8002bd4:	2a01      	cmp	r2, #1
 8002bd6:	d026      	beq.n	8002c26 <HAL_UART_AbortReceive+0x82>
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002bd8:	6899      	ldr	r1, [r3, #8]
 8002bda:	0649      	lsls	r1, r1, #25
 8002bdc:	461a      	mov	r2, r3
 8002bde:	d40e      	bmi.n	8002bfe <HAL_UART_AbortReceive+0x5a>
  huart->RxXferCount = 0U;
 8002be0:	2300      	movs	r3, #0
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8002be2:	210f      	movs	r1, #15
  huart->RxXferCount = 0U;
 8002be4:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8002be8:	6211      	str	r1, [r2, #32]
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8002bea:	6991      	ldr	r1, [r2, #24]
  huart->RxState = HAL_UART_STATE_READY;
 8002bec:	2520      	movs	r5, #32
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8002bee:	f041 0108 	orr.w	r1, r1, #8
 8002bf2:	6191      	str	r1, [r2, #24]
  return HAL_OK;
 8002bf4:	4618      	mov	r0, r3
  huart->RxState = HAL_UART_STATE_READY;
 8002bf6:	f8c4 5088 	str.w	r5, [r4, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002bfa:	66e3      	str	r3, [r4, #108]	; 0x6c
}
 8002bfc:	bd38      	pop	{r3, r4, r5, pc}
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002bfe:	f103 0208 	add.w	r2, r3, #8
 8002c02:	e852 2f00 	ldrex	r2, [r2]
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002c06:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c0a:	f103 0008 	add.w	r0, r3, #8
 8002c0e:	e840 2100 	strex	r1, r2, [r0]
 8002c12:	2900      	cmp	r1, #0
 8002c14:	d1f3      	bne.n	8002bfe <HAL_UART_AbortReceive+0x5a>
    if (huart->hdmarx != NULL)
 8002c16:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 8002c18:	b1b0      	cbz	r0, 8002c48 <HAL_UART_AbortReceive+0xa4>
      huart->hdmarx->XferAbortCallback = NULL;
 8002c1a:	6381      	str	r1, [r0, #56]	; 0x38
      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 8002c1c:	f7fe f8e4 	bl	8000de8 <HAL_DMA_Abort>
 8002c20:	b9a0      	cbnz	r0, 8002c4c <HAL_UART_AbortReceive+0xa8>
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8002c22:	6822      	ldr	r2, [r4, #0]
 8002c24:	e7dc      	b.n	8002be0 <HAL_UART_AbortReceive+0x3c>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c26:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 8002c2a:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c2e:	e843 2100 	strex	r1, r2, [r3]
 8002c32:	2900      	cmp	r1, #0
 8002c34:	d0d0      	beq.n	8002bd8 <HAL_UART_AbortReceive+0x34>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c36:	e853 2f00 	ldrex	r2, [r3]
 8002c3a:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c3e:	e843 2100 	strex	r1, r2, [r3]
 8002c42:	2900      	cmp	r1, #0
 8002c44:	d1ef      	bne.n	8002c26 <HAL_UART_AbortReceive+0x82>
 8002c46:	e7c7      	b.n	8002bd8 <HAL_UART_AbortReceive+0x34>
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8002c48:	461a      	mov	r2, r3
 8002c4a:	e7c9      	b.n	8002be0 <HAL_UART_AbortReceive+0x3c>
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 8002c4c:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 8002c4e:	f7fe f943 	bl	8000ed8 <HAL_DMA_GetError>
 8002c52:	2820      	cmp	r0, #32
 8002c54:	d1e5      	bne.n	8002c22 <HAL_UART_AbortReceive+0x7e>
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8002c56:	2310      	movs	r3, #16
 8002c58:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
          return HAL_TIMEOUT;
 8002c5c:	2003      	movs	r0, #3
}
 8002c5e:	bd38      	pop	{r3, r4, r5, pc}
 8002c60:	effffffe 	.word	0xeffffffe

08002c64 <HAL_UART_TxCpltCallback>:
 8002c64:	4770      	bx	lr
 8002c66:	bf00      	nop

08002c68 <HAL_UART_ErrorCallback>:
 8002c68:	4770      	bx	lr
 8002c6a:	bf00      	nop

08002c6c <UART_DMAAbortOnError>:
{
 8002c6c:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8002c6e:	6a80      	ldr	r0, [r0, #40]	; 0x28
  huart->RxXferCount = 0U;
 8002c70:	2300      	movs	r3, #0
 8002c72:	f8a0 305e 	strh.w	r3, [r0, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8002c76:	f8a0 3056 	strh.w	r3, [r0, #86]	; 0x56
  HAL_UART_ErrorCallback(huart);
 8002c7a:	f7ff fff5 	bl	8002c68 <HAL_UART_ErrorCallback>
}
 8002c7e:	bd08      	pop	{r3, pc}

08002c80 <HAL_UARTEx_RxEventCallback>:
}
 8002c80:	4770      	bx	lr
 8002c82:	bf00      	nop

08002c84 <HAL_UART_IRQHandler>:
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002c84:	6803      	ldr	r3, [r0, #0]
 8002c86:	69da      	ldr	r2, [r3, #28]
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8002c88:	f640 0c0f 	movw	ip, #2063	; 0x80f
  if (errorflags == 0U)
 8002c8c:	ea12 0f0c 	tst.w	r2, ip
{
 8002c90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002c94:	681d      	ldr	r5, [r3, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002c96:	6899      	ldr	r1, [r3, #8]
{
 8002c98:	4604      	mov	r4, r0
  if (errorflags == 0U)
 8002c9a:	f000 80b9 	beq.w	8002e10 <HAL_UART_IRQHandler+0x18c>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8002c9e:	4e9e      	ldr	r6, [pc, #632]	; (8002f18 <HAL_UART_IRQHandler+0x294>)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8002ca0:	489e      	ldr	r0, [pc, #632]	; (8002f1c <HAL_UART_IRQHandler+0x298>)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8002ca2:	ea05 0c06 	and.w	ip, r5, r6
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8002ca6:	4008      	ands	r0, r1
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8002ca8:	ea5c 0600 	orrs.w	r6, ip, r0
 8002cac:	d143      	bne.n	8002d36 <HAL_UART_IRQHandler+0xb2>
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002cae:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8002cb0:	2801      	cmp	r0, #1
 8002cb2:	d01e      	beq.n	8002cf2 <HAL_UART_IRQHandler+0x6e>
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8002cb4:	02d7      	lsls	r7, r2, #11
 8002cb6:	d502      	bpl.n	8002cbe <HAL_UART_IRQHandler+0x3a>
 8002cb8:	024e      	lsls	r6, r1, #9
 8002cba:	f100 80df 	bmi.w	8002e7c <HAL_UART_IRQHandler+0x1f8>
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8002cbe:	0610      	lsls	r0, r2, #24
 8002cc0:	d506      	bpl.n	8002cd0 <HAL_UART_IRQHandler+0x4c>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8002cc2:	f401 0100 	and.w	r1, r1, #8388608	; 0x800000
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8002cc6:	f005 0080 	and.w	r0, r5, #128	; 0x80
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8002cca:	4301      	orrs	r1, r0
 8002ccc:	f040 80ce 	bne.w	8002e6c <HAL_UART_IRQHandler+0x1e8>
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8002cd0:	0657      	lsls	r7, r2, #25
 8002cd2:	d502      	bpl.n	8002cda <HAL_UART_IRQHandler+0x56>
 8002cd4:	066e      	lsls	r6, r5, #25
 8002cd6:	f100 80ac 	bmi.w	8002e32 <HAL_UART_IRQHandler+0x1ae>
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8002cda:	0210      	lsls	r0, r2, #8
 8002cdc:	d502      	bpl.n	8002ce4 <HAL_UART_IRQHandler+0x60>
 8002cde:	0069      	lsls	r1, r5, #1
 8002ce0:	f100 80d8 	bmi.w	8002e94 <HAL_UART_IRQHandler+0x210>
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8002ce4:	01d3      	lsls	r3, r2, #7
 8002ce6:	d502      	bpl.n	8002cee <HAL_UART_IRQHandler+0x6a>
 8002ce8:	2d00      	cmp	r5, #0
 8002cea:	f2c0 814e 	blt.w	8002f8a <HAL_UART_IRQHandler+0x306>
}
 8002cee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8002cf2:	06d6      	lsls	r6, r2, #27
 8002cf4:	d5de      	bpl.n	8002cb4 <HAL_UART_IRQHandler+0x30>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8002cf6:	06e8      	lsls	r0, r5, #27
 8002cf8:	d5dc      	bpl.n	8002cb4 <HAL_UART_IRQHandler+0x30>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8002cfa:	2210      	movs	r2, #16
 8002cfc:	621a      	str	r2, [r3, #32]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002cfe:	689a      	ldr	r2, [r3, #8]
 8002d00:	0651      	lsls	r1, r2, #25
 8002d02:	f140 80d3 	bpl.w	8002eac <HAL_UART_IRQHandler+0x228>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002d06:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 8002d08:	6801      	ldr	r1, [r0, #0]
 8002d0a:	684a      	ldr	r2, [r1, #4]
 8002d0c:	b292      	uxth	r2, r2
      if ((nb_remaining_rx_data > 0U)
 8002d0e:	2a00      	cmp	r2, #0
 8002d10:	d0ed      	beq.n	8002cee <HAL_UART_IRQHandler+0x6a>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002d12:	f8b4 505c 	ldrh.w	r5, [r4, #92]	; 0x5c
 8002d16:	4295      	cmp	r5, r2
 8002d18:	d9e9      	bls.n	8002cee <HAL_UART_IRQHandler+0x6a>
        huart->RxXferCount = nb_remaining_rx_data;
 8002d1a:	f8a4 205e 	strh.w	r2, [r4, #94]	; 0x5e
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8002d1e:	680a      	ldr	r2, [r1, #0]
 8002d20:	0692      	lsls	r2, r2, #26
 8002d22:	f140 8101 	bpl.w	8002f28 <HAL_UART_IRQHandler+0x2a4>
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002d26:	f8b4 105e 	ldrh.w	r1, [r4, #94]	; 0x5e
 8002d2a:	1a69      	subs	r1, r5, r1
 8002d2c:	4620      	mov	r0, r4
 8002d2e:	b289      	uxth	r1, r1
 8002d30:	f7ff ffa6 	bl	8002c80 <HAL_UARTEx_RxEventCallback>
 8002d34:	e7db      	b.n	8002cee <HAL_UART_IRQHandler+0x6a>
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002d36:	07d6      	lsls	r6, r2, #31
 8002d38:	461f      	mov	r7, r3
 8002d3a:	d509      	bpl.n	8002d50 <HAL_UART_IRQHandler+0xcc>
 8002d3c:	05ee      	lsls	r6, r5, #23
 8002d3e:	d507      	bpl.n	8002d50 <HAL_UART_IRQHandler+0xcc>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002d40:	2601      	movs	r6, #1
 8002d42:	621e      	str	r6, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002d44:	f8d4 608c 	ldr.w	r6, [r4, #140]	; 0x8c
 8002d48:	f046 0601 	orr.w	r6, r6, #1
 8002d4c:	f8c4 608c 	str.w	r6, [r4, #140]	; 0x8c
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002d50:	0796      	lsls	r6, r2, #30
 8002d52:	d57e      	bpl.n	8002e52 <HAL_UART_IRQHandler+0x1ce>
 8002d54:	07ce      	lsls	r6, r1, #31
 8002d56:	d509      	bpl.n	8002d6c <HAL_UART_IRQHandler+0xe8>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002d58:	2602      	movs	r6, #2
 8002d5a:	621e      	str	r6, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002d5c:	f8d4 608c 	ldr.w	r6, [r4, #140]	; 0x8c
 8002d60:	f046 0604 	orr.w	r6, r6, #4
 8002d64:	f8c4 608c 	str.w	r6, [r4, #140]	; 0x8c
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002d68:	0756      	lsls	r6, r2, #29
 8002d6a:	d476      	bmi.n	8002e5a <HAL_UART_IRQHandler+0x1d6>
    if (((isrflags & USART_ISR_ORE) != 0U)
 8002d6c:	0716      	lsls	r6, r2, #28
 8002d6e:	d50b      	bpl.n	8002d88 <HAL_UART_IRQHandler+0x104>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8002d70:	f005 0620 	and.w	r6, r5, #32
 8002d74:	4330      	orrs	r0, r6
 8002d76:	d007      	beq.n	8002d88 <HAL_UART_IRQHandler+0x104>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002d78:	2008      	movs	r0, #8
 8002d7a:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002d7c:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
 8002d80:	f040 0008 	orr.w	r0, r0, #8
 8002d84:	f8c4 008c 	str.w	r0, [r4, #140]	; 0x8c
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8002d88:	0516      	lsls	r6, r2, #20
 8002d8a:	d50a      	bpl.n	8002da2 <HAL_UART_IRQHandler+0x11e>
 8002d8c:	0168      	lsls	r0, r5, #5
 8002d8e:	d508      	bpl.n	8002da2 <HAL_UART_IRQHandler+0x11e>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002d90:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8002d94:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8002d96:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8002d9a:	f043 0320 	orr.w	r3, r3, #32
 8002d9e:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002da2:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d0a1      	beq.n	8002cee <HAL_UART_IRQHandler+0x6a>
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8002daa:	0693      	lsls	r3, r2, #26
 8002dac:	d506      	bpl.n	8002dbc <HAL_UART_IRQHandler+0x138>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8002dae:	f005 0520 	and.w	r5, r5, #32
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8002db2:	f001 5180 	and.w	r1, r1, #268435456	; 0x10000000
 8002db6:	ea55 0301 	orrs.w	r3, r5, r1
 8002dba:	d170      	bne.n	8002e9e <HAL_UART_IRQHandler+0x21a>
      errorcode = huart->ErrorCode;
 8002dbc:	f8d4 508c 	ldr.w	r5, [r4, #140]	; 0x8c
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002dc0:	68bb      	ldr	r3, [r7, #8]
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8002dc2:	f005 0528 	and.w	r5, r5, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002dc6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002dca:	431d      	orrs	r5, r3
        UART_EndRxTransfer(huart);
 8002dcc:	4620      	mov	r0, r4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002dce:	f000 80e1 	beq.w	8002f94 <HAL_UART_IRQHandler+0x310>
        UART_EndRxTransfer(huart);
 8002dd2:	f7ff fd75 	bl	80028c0 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002dd6:	6823      	ldr	r3, [r4, #0]
 8002dd8:	689a      	ldr	r2, [r3, #8]
 8002dda:	0657      	lsls	r7, r2, #25
 8002ddc:	d556      	bpl.n	8002e8c <HAL_UART_IRQHandler+0x208>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002dde:	f103 0208 	add.w	r2, r3, #8
 8002de2:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002de6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002dea:	f103 0008 	add.w	r0, r3, #8
 8002dee:	e840 2100 	strex	r1, r2, [r0]
 8002df2:	2900      	cmp	r1, #0
 8002df4:	d1f3      	bne.n	8002dde <HAL_UART_IRQHandler+0x15a>
          if (huart->hdmarx != NULL)
 8002df6:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 8002df8:	2800      	cmp	r0, #0
 8002dfa:	d047      	beq.n	8002e8c <HAL_UART_IRQHandler+0x208>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002dfc:	4b48      	ldr	r3, [pc, #288]	; (8002f20 <HAL_UART_IRQHandler+0x29c>)
 8002dfe:	6383      	str	r3, [r0, #56]	; 0x38
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002e00:	f7fe f82c 	bl	8000e5c <HAL_DMA_Abort_IT>
 8002e04:	2800      	cmp	r0, #0
 8002e06:	f43f af72 	beq.w	8002cee <HAL_UART_IRQHandler+0x6a>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002e0a:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 8002e0c:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8002e0e:	e00d      	b.n	8002e2c <HAL_UART_IRQHandler+0x1a8>
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8002e10:	0697      	lsls	r7, r2, #26
 8002e12:	f57f af4c 	bpl.w	8002cae <HAL_UART_IRQHandler+0x2a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8002e16:	f005 0620 	and.w	r6, r5, #32
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8002e1a:	f001 5780 	and.w	r7, r1, #268435456	; 0x10000000
 8002e1e:	433e      	orrs	r6, r7
 8002e20:	f43f af45 	beq.w	8002cae <HAL_UART_IRQHandler+0x2a>
      if (huart->RxISR != NULL)
 8002e24:	6f03      	ldr	r3, [r0, #112]	; 0x70
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	f43f af61 	beq.w	8002cee <HAL_UART_IRQHandler+0x6a>
}
 8002e2c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002e30:	4718      	bx	r3
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e32:	e853 2f00 	ldrex	r2, [r3]
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8002e36:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e3a:	e843 2100 	strex	r1, r2, [r3]
 8002e3e:	2900      	cmp	r1, #0
 8002e40:	d1f7      	bne.n	8002e32 <HAL_UART_IRQHandler+0x1ae>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002e42:	2320      	movs	r3, #32
 8002e44:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8002e48:	6761      	str	r1, [r4, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002e4a:	4620      	mov	r0, r4
 8002e4c:	f7ff ff0a 	bl	8002c64 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002e50:	e74d      	b.n	8002cee <HAL_UART_IRQHandler+0x6a>
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002e52:	0756      	lsls	r6, r2, #29
 8002e54:	d58a      	bpl.n	8002d6c <HAL_UART_IRQHandler+0xe8>
 8002e56:	07ce      	lsls	r6, r1, #31
 8002e58:	d588      	bpl.n	8002d6c <HAL_UART_IRQHandler+0xe8>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002e5a:	2604      	movs	r6, #4
 8002e5c:	621e      	str	r6, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002e5e:	f8d4 608c 	ldr.w	r6, [r4, #140]	; 0x8c
 8002e62:	f046 0602 	orr.w	r6, r6, #2
 8002e66:	f8c4 608c 	str.w	r6, [r4, #140]	; 0x8c
 8002e6a:	e77f      	b.n	8002d6c <HAL_UART_IRQHandler+0xe8>
    if (huart->TxISR != NULL)
 8002e6c:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	f43f af3d 	beq.w	8002cee <HAL_UART_IRQHandler+0x6a>
      huart->TxISR(huart);
 8002e74:	4620      	mov	r0, r4
}
 8002e76:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      huart->TxISR(huart);
 8002e7a:	4718      	bx	r3
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8002e7c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
    HAL_UARTEx_WakeupCallback(huart);
 8002e80:	4620      	mov	r0, r4
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8002e82:	621a      	str	r2, [r3, #32]
}
 8002e84:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    HAL_UARTEx_WakeupCallback(huart);
 8002e88:	f000 be70 	b.w	8003b6c <HAL_UARTEx_WakeupCallback>
            HAL_UART_ErrorCallback(huart);
 8002e8c:	4620      	mov	r0, r4
 8002e8e:	f7ff feeb 	bl	8002c68 <HAL_UART_ErrorCallback>
 8002e92:	e72c      	b.n	8002cee <HAL_UART_IRQHandler+0x6a>
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8002e94:	4620      	mov	r0, r4
}
 8002e96:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8002e9a:	f000 be6b 	b.w	8003b74 <HAL_UARTEx_TxFifoEmptyCallback>
        if (huart->RxISR != NULL)
 8002e9e:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d08b      	beq.n	8002dbc <HAL_UART_IRQHandler+0x138>
          huart->RxISR(huart);
 8002ea4:	4620      	mov	r0, r4
 8002ea6:	4798      	blx	r3
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002ea8:	6827      	ldr	r7, [r4, #0]
 8002eaa:	e787      	b.n	8002dbc <HAL_UART_IRQHandler+0x138>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002eac:	f8b4 105e 	ldrh.w	r1, [r4, #94]	; 0x5e
      if ((huart->RxXferCount > 0U)
 8002eb0:	f8b4 205e 	ldrh.w	r2, [r4, #94]	; 0x5e
 8002eb4:	b292      	uxth	r2, r2
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002eb6:	b289      	uxth	r1, r1
      if ((huart->RxXferCount > 0U)
 8002eb8:	2a00      	cmp	r2, #0
 8002eba:	f43f af18 	beq.w	8002cee <HAL_UART_IRQHandler+0x6a>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002ebe:	f8b4 205c 	ldrh.w	r2, [r4, #92]	; 0x5c
 8002ec2:	1a51      	subs	r1, r2, r1
 8002ec4:	b289      	uxth	r1, r1
          && (nb_rx_data > 0U))
 8002ec6:	2900      	cmp	r1, #0
 8002ec8:	f43f af11 	beq.w	8002cee <HAL_UART_IRQHandler+0x6a>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ecc:	e853 2f00 	ldrex	r2, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8002ed0:	f422 7290 	bic.w	r2, r2, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ed4:	e843 2000 	strex	r0, r2, [r3]
 8002ed8:	2800      	cmp	r0, #0
 8002eda:	d1f7      	bne.n	8002ecc <HAL_UART_IRQHandler+0x248>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8002edc:	4d11      	ldr	r5, [pc, #68]	; (8002f24 <HAL_UART_IRQHandler+0x2a0>)
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ede:	f103 0208 	add.w	r2, r3, #8
 8002ee2:	e852 2f00 	ldrex	r2, [r2]
 8002ee6:	402a      	ands	r2, r5
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ee8:	f103 0608 	add.w	r6, r3, #8
 8002eec:	e846 2000 	strex	r0, r2, [r6]
 8002ef0:	2800      	cmp	r0, #0
 8002ef2:	d1f4      	bne.n	8002ede <HAL_UART_IRQHandler+0x25a>
        huart->RxState = HAL_UART_STATE_READY;
 8002ef4:	2220      	movs	r2, #32
 8002ef6:	f8c4 2088 	str.w	r2, [r4, #136]	; 0x88
        huart->RxISR = NULL;
 8002efa:	6720      	str	r0, [r4, #112]	; 0x70
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002efc:	66e0      	str	r0, [r4, #108]	; 0x6c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002efe:	e853 2f00 	ldrex	r2, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002f02:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f06:	e843 2000 	strex	r0, r2, [r3]
 8002f0a:	2800      	cmp	r0, #0
 8002f0c:	d1f7      	bne.n	8002efe <HAL_UART_IRQHandler+0x27a>
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002f0e:	4620      	mov	r0, r4
 8002f10:	f7ff feb6 	bl	8002c80 <HAL_UARTEx_RxEventCallback>
 8002f14:	e6eb      	b.n	8002cee <HAL_UART_IRQHandler+0x6a>
 8002f16:	bf00      	nop
 8002f18:	04000120 	.word	0x04000120
 8002f1c:	10000001 	.word	0x10000001
 8002f20:	08002c6d 	.word	0x08002c6d
 8002f24:	effffffe 	.word	0xeffffffe
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f28:	e853 2f00 	ldrex	r2, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002f2c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f30:	e843 2100 	strex	r1, r2, [r3]
 8002f34:	2900      	cmp	r1, #0
 8002f36:	d1f7      	bne.n	8002f28 <HAL_UART_IRQHandler+0x2a4>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f38:	f103 0208 	add.w	r2, r3, #8
 8002f3c:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002f40:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f44:	f103 0508 	add.w	r5, r3, #8
 8002f48:	e845 2100 	strex	r1, r2, [r5]
 8002f4c:	2900      	cmp	r1, #0
 8002f4e:	d1f3      	bne.n	8002f38 <HAL_UART_IRQHandler+0x2b4>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f50:	f103 0208 	add.w	r2, r3, #8
 8002f54:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002f58:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f5c:	f103 0508 	add.w	r5, r3, #8
 8002f60:	e845 2100 	strex	r1, r2, [r5]
 8002f64:	2900      	cmp	r1, #0
 8002f66:	d1f3      	bne.n	8002f50 <HAL_UART_IRQHandler+0x2cc>
          huart->RxState = HAL_UART_STATE_READY;
 8002f68:	2220      	movs	r2, #32
 8002f6a:	f8c4 2088 	str.w	r2, [r4, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002f6e:	66e1      	str	r1, [r4, #108]	; 0x6c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f70:	e853 2f00 	ldrex	r2, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002f74:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f78:	e843 2100 	strex	r1, r2, [r3]
 8002f7c:	2900      	cmp	r1, #0
 8002f7e:	d1f7      	bne.n	8002f70 <HAL_UART_IRQHandler+0x2ec>
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002f80:	f7fd ff32 	bl	8000de8 <HAL_DMA_Abort>
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002f84:	f8b4 505c 	ldrh.w	r5, [r4, #92]	; 0x5c
 8002f88:	e6cd      	b.n	8002d26 <HAL_UART_IRQHandler+0xa2>
    HAL_UARTEx_RxFifoFullCallback(huart);
 8002f8a:	4620      	mov	r0, r4
}
 8002f8c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    HAL_UARTEx_RxFifoFullCallback(huart);
 8002f90:	f000 bdee 	b.w	8003b70 <HAL_UARTEx_RxFifoFullCallback>
        HAL_UART_ErrorCallback(huart);
 8002f94:	f7ff fe68 	bl	8002c68 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f98:	f8c4 508c 	str.w	r5, [r4, #140]	; 0x8c
 8002f9c:	e6a7      	b.n	8002cee <HAL_UART_IRQHandler+0x6a>
 8002f9e:	bf00      	nop

08002fa0 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8002fa0:	b508      	push	{r3, lr}
  uint16_t uhMask = huart->Mask;
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002fa2:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
 8002fa6:	2b22      	cmp	r3, #34	; 0x22
 8002fa8:	d005      	beq.n	8002fb6 <UART_RxISR_8BIT+0x16>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8002faa:	6802      	ldr	r2, [r0, #0]
 8002fac:	6993      	ldr	r3, [r2, #24]
 8002fae:	f043 0308 	orr.w	r3, r3, #8
 8002fb2:	6193      	str	r3, [r2, #24]
  }
}
 8002fb4:	bd08      	pop	{r3, pc}
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8002fb6:	6803      	ldr	r3, [r0, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8002fb8:	f8b0 1060 	ldrh.w	r1, [r0, #96]	; 0x60
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8002fbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8002fbe:	6d82      	ldr	r2, [r0, #88]	; 0x58
 8002fc0:	400b      	ands	r3, r1
 8002fc2:	7013      	strb	r3, [r2, #0]
    huart->RxXferCount--;
 8002fc4:	f8b0 305e 	ldrh.w	r3, [r0, #94]	; 0x5e
    huart->pRxBuffPtr++;
 8002fc8:	6d82      	ldr	r2, [r0, #88]	; 0x58
    huart->RxXferCount--;
 8002fca:	3b01      	subs	r3, #1
 8002fcc:	b29b      	uxth	r3, r3
 8002fce:	f8a0 305e 	strh.w	r3, [r0, #94]	; 0x5e
    if (huart->RxXferCount == 0U)
 8002fd2:	f8b0 305e 	ldrh.w	r3, [r0, #94]	; 0x5e
    huart->pRxBuffPtr++;
 8002fd6:	3201      	adds	r2, #1
    if (huart->RxXferCount == 0U)
 8002fd8:	b29b      	uxth	r3, r3
    huart->pRxBuffPtr++;
 8002fda:	6582      	str	r2, [r0, #88]	; 0x58
    if (huart->RxXferCount == 0U)
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d1e9      	bne.n	8002fb4 <UART_RxISR_8BIT+0x14>
 8002fe0:	6803      	ldr	r3, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002fe2:	e853 2f00 	ldrex	r2, [r3]
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8002fe6:	f422 7290 	bic.w	r2, r2, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002fea:	e843 2100 	strex	r1, r2, [r3]
 8002fee:	2900      	cmp	r1, #0
 8002ff0:	d1f7      	bne.n	8002fe2 <UART_RxISR_8BIT+0x42>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ff2:	f103 0208 	add.w	r2, r3, #8
 8002ff6:	e852 2f00 	ldrex	r2, [r2]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002ffa:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ffe:	f103 0c08 	add.w	ip, r3, #8
 8003002:	e84c 2100 	strex	r1, r2, [ip]
 8003006:	2900      	cmp	r1, #0
 8003008:	d1f3      	bne.n	8002ff2 <UART_RxISR_8BIT+0x52>
      huart->RxState = HAL_UART_STATE_READY;
 800300a:	2220      	movs	r2, #32
 800300c:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003010:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
      huart->RxISR = NULL;
 8003012:	6701      	str	r1, [r0, #112]	; 0x70
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003014:	2a01      	cmp	r2, #1
 8003016:	d112      	bne.n	800303e <UART_RxISR_8BIT+0x9e>
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003018:	66c1      	str	r1, [r0, #108]	; 0x6c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800301a:	e853 2f00 	ldrex	r2, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800301e:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003022:	e843 2100 	strex	r1, r2, [r3]
 8003026:	2900      	cmp	r1, #0
 8003028:	d1f7      	bne.n	800301a <UART_RxISR_8BIT+0x7a>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800302a:	69da      	ldr	r2, [r3, #28]
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800302c:	f8b0 105c 	ldrh.w	r1, [r0, #92]	; 0x5c
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8003030:	06d2      	lsls	r2, r2, #27
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003032:	bf44      	itt	mi
 8003034:	2210      	movmi	r2, #16
 8003036:	621a      	strmi	r2, [r3, #32]
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003038:	f7ff fe22 	bl	8002c80 <HAL_UARTEx_RxEventCallback>
}
 800303c:	bd08      	pop	{r3, pc}
        HAL_UART_RxCpltCallback(huart);
 800303e:	f7fd fac1 	bl	80005c4 <HAL_UART_RxCpltCallback>
}
 8003042:	bd08      	pop	{r3, pc}

08003044 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8003044:	b508      	push	{r3, lr}
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003046:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
 800304a:	2b22      	cmp	r3, #34	; 0x22
 800304c:	d005      	beq.n	800305a <UART_RxISR_16BIT+0x16>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800304e:	6802      	ldr	r2, [r0, #0]
 8003050:	6993      	ldr	r3, [r2, #24]
 8003052:	f043 0308 	orr.w	r3, r3, #8
 8003056:	6193      	str	r3, [r2, #24]
  }
}
 8003058:	bd08      	pop	{r3, pc}
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800305a:	6803      	ldr	r3, [r0, #0]
    *tmp = (uint16_t)(uhdata & uhMask);
 800305c:	f8b0 c060 	ldrh.w	ip, [r0, #96]	; 0x60
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003060:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    *tmp = (uint16_t)(uhdata & uhMask);
 8003062:	6d81      	ldr	r1, [r0, #88]	; 0x58
 8003064:	ea02 020c 	and.w	r2, r2, ip
 8003068:	f821 2b02 	strh.w	r2, [r1], #2
    huart->RxXferCount--;
 800306c:	f8b0 205e 	ldrh.w	r2, [r0, #94]	; 0x5e
    huart->pRxBuffPtr += 2U;
 8003070:	6581      	str	r1, [r0, #88]	; 0x58
    huart->RxXferCount--;
 8003072:	3a01      	subs	r2, #1
 8003074:	b292      	uxth	r2, r2
 8003076:	f8a0 205e 	strh.w	r2, [r0, #94]	; 0x5e
    if (huart->RxXferCount == 0U)
 800307a:	f8b0 205e 	ldrh.w	r2, [r0, #94]	; 0x5e
 800307e:	b292      	uxth	r2, r2
 8003080:	2a00      	cmp	r2, #0
 8003082:	d1e9      	bne.n	8003058 <UART_RxISR_16BIT+0x14>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003084:	e853 2f00 	ldrex	r2, [r3]
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003088:	f422 7290 	bic.w	r2, r2, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800308c:	e843 2100 	strex	r1, r2, [r3]
 8003090:	2900      	cmp	r1, #0
 8003092:	d1f7      	bne.n	8003084 <UART_RxISR_16BIT+0x40>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003094:	f103 0208 	add.w	r2, r3, #8
 8003098:	e852 2f00 	ldrex	r2, [r2]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800309c:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030a0:	f103 0c08 	add.w	ip, r3, #8
 80030a4:	e84c 2100 	strex	r1, r2, [ip]
 80030a8:	2900      	cmp	r1, #0
 80030aa:	d1f3      	bne.n	8003094 <UART_RxISR_16BIT+0x50>
      huart->RxState = HAL_UART_STATE_READY;
 80030ac:	2220      	movs	r2, #32
 80030ae:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80030b2:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
      huart->RxISR = NULL;
 80030b4:	6701      	str	r1, [r0, #112]	; 0x70
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80030b6:	2a01      	cmp	r2, #1
 80030b8:	d112      	bne.n	80030e0 <UART_RxISR_16BIT+0x9c>
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80030ba:	66c1      	str	r1, [r0, #108]	; 0x6c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030bc:	e853 2f00 	ldrex	r2, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80030c0:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030c4:	e843 2100 	strex	r1, r2, [r3]
 80030c8:	2900      	cmp	r1, #0
 80030ca:	d1f7      	bne.n	80030bc <UART_RxISR_16BIT+0x78>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80030cc:	69da      	ldr	r2, [r3, #28]
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80030ce:	f8b0 105c 	ldrh.w	r1, [r0, #92]	; 0x5c
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80030d2:	06d2      	lsls	r2, r2, #27
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80030d4:	bf44      	itt	mi
 80030d6:	2210      	movmi	r2, #16
 80030d8:	621a      	strmi	r2, [r3, #32]
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80030da:	f7ff fdd1 	bl	8002c80 <HAL_UARTEx_RxEventCallback>
}
 80030de:	bd08      	pop	{r3, pc}
        HAL_UART_RxCpltCallback(huart);
 80030e0:	f7fd fa70 	bl	80005c4 <HAL_UART_RxCpltCallback>
}
 80030e4:	bd08      	pop	{r3, pc}
 80030e6:	bf00      	nop

080030e8 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80030e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  uint16_t  uhMask = huart->Mask;
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80030ec:	6802      	ldr	r2, [r0, #0]
{
 80030ee:	4604      	mov	r4, r0
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80030f0:	69d0      	ldr	r0, [r2, #28]
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80030f2:	6817      	ldr	r7, [r2, #0]
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80030f4:	6896      	ldr	r6, [r2, #8]

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80030f6:	f8d4 1088 	ldr.w	r1, [r4, #136]	; 0x88
 80030fa:	2922      	cmp	r1, #34	; 0x22
 80030fc:	d006      	beq.n	800310c <UART_RxISR_8BIT_FIFOEN+0x24>
 80030fe:	4613      	mov	r3, r2
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003100:	6992      	ldr	r2, [r2, #24]
 8003102:	f042 0208 	orr.w	r2, r2, #8
 8003106:	619a      	str	r2, [r3, #24]
  }
}
 8003108:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800310c:	f8b4 3068 	ldrh.w	r3, [r4, #104]	; 0x68
 8003110:	2b00      	cmp	r3, #0
 8003112:	f000 80b2 	beq.w	800327a <UART_RxISR_8BIT_FIFOEN+0x192>
 8003116:	0681      	lsls	r1, r0, #26
 8003118:	d578      	bpl.n	800320c <UART_RxISR_8BIT_FIFOEN+0x124>
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800311a:	f894 a060 	ldrb.w	sl, [r4, #96]	; 0x60
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800311e:	f8df 9164 	ldr.w	r9, [pc, #356]	; 8003284 <UART_RxISR_8BIT_FIFOEN+0x19c>
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003122:	f006 0601 	and.w	r6, r6, #1
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003126:	f04f 0800 	mov.w	r8, #0
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800312a:	6a53      	ldr	r3, [r2, #36]	; 0x24
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800312c:	6da2      	ldr	r2, [r4, #88]	; 0x58
 800312e:	ea0a 0303 	and.w	r3, sl, r3
 8003132:	7013      	strb	r3, [r2, #0]
      huart->RxXferCount--;
 8003134:	f8b4 105e 	ldrh.w	r1, [r4, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8003138:	6823      	ldr	r3, [r4, #0]
      huart->pRxBuffPtr++;
 800313a:	6da2      	ldr	r2, [r4, #88]	; 0x58
      huart->RxXferCount--;
 800313c:	3901      	subs	r1, #1
 800313e:	b289      	uxth	r1, r1
 8003140:	f8a4 105e 	strh.w	r1, [r4, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8003144:	69dd      	ldr	r5, [r3, #28]
      huart->pRxBuffPtr++;
 8003146:	3201      	adds	r2, #1
 8003148:	65a2      	str	r2, [r4, #88]	; 0x58
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800314a:	076a      	lsls	r2, r5, #29
 800314c:	d01b      	beq.n	8003186 <UART_RxISR_8BIT_FIFOEN+0x9e>
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800314e:	07e8      	lsls	r0, r5, #31
 8003150:	d509      	bpl.n	8003166 <UART_RxISR_8BIT_FIFOEN+0x7e>
 8003152:	05f9      	lsls	r1, r7, #23
 8003154:	d507      	bpl.n	8003166 <UART_RxISR_8BIT_FIFOEN+0x7e>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003156:	2201      	movs	r2, #1
 8003158:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800315a:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 800315e:	f042 0201 	orr.w	r2, r2, #1
 8003162:	f8c4 208c 	str.w	r2, [r4, #140]	; 0x8c
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003166:	07aa      	lsls	r2, r5, #30
 8003168:	d515      	bpl.n	8003196 <UART_RxISR_8BIT_FIFOEN+0xae>
 800316a:	b14e      	cbz	r6, 8003180 <UART_RxISR_8BIT_FIFOEN+0x98>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800316c:	2202      	movs	r2, #2
 800316e:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003170:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003174:	0768      	lsls	r0, r5, #29
          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003176:	f042 0204 	orr.w	r2, r2, #4
 800317a:	f8c4 208c 	str.w	r2, [r4, #140]	; 0x8c
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800317e:	d40e      	bmi.n	800319e <UART_RxISR_8BIT_FIFOEN+0xb6>
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003180:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8003184:	b9bb      	cbnz	r3, 80031b6 <UART_RxISR_8BIT_FIFOEN+0xce>
      if (huart->RxXferCount == 0U)
 8003186:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 800318a:	b29b      	uxth	r3, r3
 800318c:	b1eb      	cbz	r3, 80031ca <UART_RxISR_8BIT_FIFOEN+0xe2>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800318e:	06ab      	lsls	r3, r5, #26
 8003190:	d53c      	bpl.n	800320c <UART_RxISR_8BIT_FIFOEN+0x124>
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003192:	6822      	ldr	r2, [r4, #0]
 8003194:	e7c9      	b.n	800312a <UART_RxISR_8BIT_FIFOEN+0x42>
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003196:	0769      	lsls	r1, r5, #29
 8003198:	d5f2      	bpl.n	8003180 <UART_RxISR_8BIT_FIFOEN+0x98>
 800319a:	2e00      	cmp	r6, #0
 800319c:	d0f0      	beq.n	8003180 <UART_RxISR_8BIT_FIFOEN+0x98>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800319e:	2204      	movs	r2, #4
 80031a0:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80031a2:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 80031a6:	f043 0302 	orr.w	r3, r3, #2
 80031aa:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80031ae:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d0e7      	beq.n	8003186 <UART_RxISR_8BIT_FIFOEN+0x9e>
          HAL_UART_ErrorCallback(huart);
 80031b6:	4620      	mov	r0, r4
 80031b8:	f7ff fd56 	bl	8002c68 <HAL_UART_ErrorCallback>
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80031bc:	f8c4 808c 	str.w	r8, [r4, #140]	; 0x8c
      if (huart->RxXferCount == 0U)
 80031c0:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 80031c4:	b29b      	uxth	r3, r3
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d1e1      	bne.n	800318e <UART_RxISR_8BIT_FIFOEN+0xa6>
 80031ca:	6823      	ldr	r3, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031cc:	e853 2f00 	ldrex	r2, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80031d0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031d4:	e843 2100 	strex	r1, r2, [r3]
 80031d8:	2900      	cmp	r1, #0
 80031da:	d1f7      	bne.n	80031cc <UART_RxISR_8BIT_FIFOEN+0xe4>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031dc:	f103 0208 	add.w	r2, r3, #8
 80031e0:	e852 2f00 	ldrex	r2, [r2]
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80031e4:	ea02 0209 	and.w	r2, r2, r9
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031e8:	f103 0008 	add.w	r0, r3, #8
 80031ec:	e840 2100 	strex	r1, r2, [r0]
 80031f0:	2900      	cmp	r1, #0
 80031f2:	d1f3      	bne.n	80031dc <UART_RxISR_8BIT_FIFOEN+0xf4>
        huart->RxState = HAL_UART_STATE_READY;
 80031f4:	2220      	movs	r2, #32
 80031f6:	f8c4 2088 	str.w	r2, [r4, #136]	; 0x88
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80031fa:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
        huart->RxISR = NULL;
 80031fc:	6721      	str	r1, [r4, #112]	; 0x70
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80031fe:	2a01      	cmp	r2, #1
 8003200:	d027      	beq.n	8003252 <UART_RxISR_8BIT_FIFOEN+0x16a>
          HAL_UART_RxCpltCallback(huart);
 8003202:	4620      	mov	r0, r4
 8003204:	f7fd f9de 	bl	80005c4 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8003208:	06ab      	lsls	r3, r5, #26
 800320a:	d4c2      	bmi.n	8003192 <UART_RxISR_8BIT_FIFOEN+0xaa>
    rxdatacount = huart->RxXferCount;
 800320c:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 8003210:	b29b      	uxth	r3, r3
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8003212:	2b00      	cmp	r3, #0
 8003214:	f43f af78 	beq.w	8003108 <UART_RxISR_8BIT_FIFOEN+0x20>
 8003218:	f8b4 2068 	ldrh.w	r2, [r4, #104]	; 0x68
 800321c:	429a      	cmp	r2, r3
 800321e:	f67f af73 	bls.w	8003108 <UART_RxISR_8BIT_FIFOEN+0x20>
 8003222:	6823      	ldr	r3, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003224:	f103 0208 	add.w	r2, r3, #8
 8003228:	e852 2f00 	ldrex	r2, [r2]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800322c:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003230:	f103 0008 	add.w	r0, r3, #8
 8003234:	e840 2100 	strex	r1, r2, [r0]
 8003238:	2900      	cmp	r1, #0
 800323a:	d1f3      	bne.n	8003224 <UART_RxISR_8BIT_FIFOEN+0x13c>
      huart->RxISR = UART_RxISR_8BIT;
 800323c:	4a10      	ldr	r2, [pc, #64]	; (8003280 <UART_RxISR_8BIT_FIFOEN+0x198>)
 800323e:	6722      	str	r2, [r4, #112]	; 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003240:	e853 2f00 	ldrex	r2, [r3]
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8003244:	f042 0220 	orr.w	r2, r2, #32
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003248:	e843 2100 	strex	r1, r2, [r3]
 800324c:	2900      	cmp	r1, #0
 800324e:	d1f7      	bne.n	8003240 <UART_RxISR_8BIT_FIFOEN+0x158>
 8003250:	e75a      	b.n	8003108 <UART_RxISR_8BIT_FIFOEN+0x20>
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003252:	66e1      	str	r1, [r4, #108]	; 0x6c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003254:	e853 2f00 	ldrex	r2, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003258:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800325c:	e843 2100 	strex	r1, r2, [r3]
 8003260:	2900      	cmp	r1, #0
 8003262:	d1f7      	bne.n	8003254 <UART_RxISR_8BIT_FIFOEN+0x16c>
          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8003264:	69da      	ldr	r2, [r3, #28]
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003266:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800326a:	06d2      	lsls	r2, r2, #27
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800326c:	bf44      	itt	mi
 800326e:	2210      	movmi	r2, #16
 8003270:	621a      	strmi	r2, [r3, #32]
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003272:	4620      	mov	r0, r4
 8003274:	f7ff fd04 	bl	8002c80 <HAL_UARTEx_RxEventCallback>
 8003278:	e789      	b.n	800318e <UART_RxISR_8BIT_FIFOEN+0xa6>
    rxdatacount = huart->RxXferCount;
 800327a:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800327e:	e743      	b.n	8003108 <UART_RxISR_8BIT_FIFOEN+0x20>
 8003280:	08002fa1 	.word	0x08002fa1
 8003284:	effffffe 	.word	0xeffffffe

08003288 <UART_RxISR_16BIT_FIFOEN>:
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8003288:	6803      	ldr	r3, [r0, #0]
{
 800328a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800328e:	69d9      	ldr	r1, [r3, #28]
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8003290:	681e      	ldr	r6, [r3, #0]
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8003292:	689d      	ldr	r5, [r3, #8]

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003294:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 8003298:	2a22      	cmp	r2, #34	; 0x22
 800329a:	d005      	beq.n	80032a8 <UART_RxISR_16BIT_FIFOEN+0x20>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800329c:	699a      	ldr	r2, [r3, #24]
 800329e:	f042 0208 	orr.w	r2, r2, #8
 80032a2:	619a      	str	r2, [r3, #24]
  }
}
 80032a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80032a8:	f8b0 2068 	ldrh.w	r2, [r0, #104]	; 0x68
 80032ac:	4682      	mov	sl, r0
 80032ae:	2a00      	cmp	r2, #0
 80032b0:	f000 80b8 	beq.w	8003424 <UART_RxISR_16BIT_FIFOEN+0x19c>
 80032b4:	0689      	lsls	r1, r1, #26
 80032b6:	d57b      	bpl.n	80033b0 <UART_RxISR_16BIT_FIFOEN+0x128>
  uint16_t  uhMask = huart->Mask;
 80032b8:	f8b0 9060 	ldrh.w	r9, [r0, #96]	; 0x60
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80032bc:	f8df 8170 	ldr.w	r8, [pc, #368]	; 8003430 <UART_RxISR_16BIT_FIFOEN+0x1a8>
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80032c0:	f005 0501 	and.w	r5, r5, #1
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80032c4:	2700      	movs	r7, #0
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80032c6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
      *tmp = (uint16_t)(uhdata & uhMask);
 80032c8:	f8da 1058 	ldr.w	r1, [sl, #88]	; 0x58
 80032cc:	ea09 0202 	and.w	r2, r9, r2
 80032d0:	f821 2b02 	strh.w	r2, [r1], #2
      huart->RxXferCount--;
 80032d4:	f8ba 205e 	ldrh.w	r2, [sl, #94]	; 0x5e
      huart->pRxBuffPtr += 2U;
 80032d8:	f8ca 1058 	str.w	r1, [sl, #88]	; 0x58
      huart->RxXferCount--;
 80032dc:	3a01      	subs	r2, #1
 80032de:	b292      	uxth	r2, r2
 80032e0:	f8aa 205e 	strh.w	r2, [sl, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80032e4:	69dc      	ldr	r4, [r3, #28]
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80032e6:	0762      	lsls	r2, r4, #29
 80032e8:	d01b      	beq.n	8003322 <UART_RxISR_16BIT_FIFOEN+0x9a>
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80032ea:	07e0      	lsls	r0, r4, #31
 80032ec:	d509      	bpl.n	8003302 <UART_RxISR_16BIT_FIFOEN+0x7a>
 80032ee:	05f1      	lsls	r1, r6, #23
 80032f0:	d507      	bpl.n	8003302 <UART_RxISR_16BIT_FIFOEN+0x7a>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80032f2:	2201      	movs	r2, #1
 80032f4:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80032f6:	f8da 208c 	ldr.w	r2, [sl, #140]	; 0x8c
 80032fa:	f042 0201 	orr.w	r2, r2, #1
 80032fe:	f8ca 208c 	str.w	r2, [sl, #140]	; 0x8c
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003302:	07a2      	lsls	r2, r4, #30
 8003304:	d516      	bpl.n	8003334 <UART_RxISR_16BIT_FIFOEN+0xac>
 8003306:	b14d      	cbz	r5, 800331c <UART_RxISR_16BIT_FIFOEN+0x94>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003308:	2202      	movs	r2, #2
 800330a:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800330c:	f8da 208c 	ldr.w	r2, [sl, #140]	; 0x8c
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003310:	0760      	lsls	r0, r4, #29
          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003312:	f042 0204 	orr.w	r2, r2, #4
 8003316:	f8ca 208c 	str.w	r2, [sl, #140]	; 0x8c
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800331a:	d40f      	bmi.n	800333c <UART_RxISR_16BIT_FIFOEN+0xb4>
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800331c:	f8da 308c 	ldr.w	r3, [sl, #140]	; 0x8c
 8003320:	b9c3      	cbnz	r3, 8003354 <UART_RxISR_16BIT_FIFOEN+0xcc>
      if (huart->RxXferCount == 0U)
 8003322:	f8ba 305e 	ldrh.w	r3, [sl, #94]	; 0x5e
 8003326:	b29b      	uxth	r3, r3
 8003328:	b1f3      	cbz	r3, 8003368 <UART_RxISR_16BIT_FIFOEN+0xe0>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800332a:	06a3      	lsls	r3, r4, #26
 800332c:	d540      	bpl.n	80033b0 <UART_RxISR_16BIT_FIFOEN+0x128>
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800332e:	f8da 3000 	ldr.w	r3, [sl]
 8003332:	e7c8      	b.n	80032c6 <UART_RxISR_16BIT_FIFOEN+0x3e>
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003334:	0761      	lsls	r1, r4, #29
 8003336:	d5f1      	bpl.n	800331c <UART_RxISR_16BIT_FIFOEN+0x94>
 8003338:	2d00      	cmp	r5, #0
 800333a:	d0ef      	beq.n	800331c <UART_RxISR_16BIT_FIFOEN+0x94>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800333c:	2204      	movs	r2, #4
 800333e:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003340:	f8da 308c 	ldr.w	r3, [sl, #140]	; 0x8c
 8003344:	f043 0302 	orr.w	r3, r3, #2
 8003348:	f8ca 308c 	str.w	r3, [sl, #140]	; 0x8c
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800334c:	f8da 308c 	ldr.w	r3, [sl, #140]	; 0x8c
 8003350:	2b00      	cmp	r3, #0
 8003352:	d0e6      	beq.n	8003322 <UART_RxISR_16BIT_FIFOEN+0x9a>
          HAL_UART_ErrorCallback(huart);
 8003354:	4650      	mov	r0, sl
 8003356:	f7ff fc87 	bl	8002c68 <HAL_UART_ErrorCallback>
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800335a:	f8ca 708c 	str.w	r7, [sl, #140]	; 0x8c
      if (huart->RxXferCount == 0U)
 800335e:	f8ba 305e 	ldrh.w	r3, [sl, #94]	; 0x5e
 8003362:	b29b      	uxth	r3, r3
 8003364:	2b00      	cmp	r3, #0
 8003366:	d1e0      	bne.n	800332a <UART_RxISR_16BIT_FIFOEN+0xa2>
 8003368:	f8da 3000 	ldr.w	r3, [sl]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800336c:	e853 2f00 	ldrex	r2, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003370:	f422 7280 	bic.w	r2, r2, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003374:	e843 2100 	strex	r1, r2, [r3]
 8003378:	2900      	cmp	r1, #0
 800337a:	d1f7      	bne.n	800336c <UART_RxISR_16BIT_FIFOEN+0xe4>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800337c:	f103 0208 	add.w	r2, r3, #8
 8003380:	e852 2f00 	ldrex	r2, [r2]
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8003384:	ea02 0208 	and.w	r2, r2, r8
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003388:	f103 0008 	add.w	r0, r3, #8
 800338c:	e840 2100 	strex	r1, r2, [r0]
 8003390:	2900      	cmp	r1, #0
 8003392:	d1f3      	bne.n	800337c <UART_RxISR_16BIT_FIFOEN+0xf4>
        huart->RxState = HAL_UART_STATE_READY;
 8003394:	2220      	movs	r2, #32
 8003396:	f8ca 2088 	str.w	r2, [sl, #136]	; 0x88
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800339a:	f8da 206c 	ldr.w	r2, [sl, #108]	; 0x6c
        huart->RxISR = NULL;
 800339e:	f8ca 1070 	str.w	r1, [sl, #112]	; 0x70
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80033a2:	2a01      	cmp	r2, #1
 80033a4:	d029      	beq.n	80033fa <UART_RxISR_16BIT_FIFOEN+0x172>
          HAL_UART_RxCpltCallback(huart);
 80033a6:	4650      	mov	r0, sl
 80033a8:	f7fd f90c 	bl	80005c4 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80033ac:	06a3      	lsls	r3, r4, #26
 80033ae:	d4be      	bmi.n	800332e <UART_RxISR_16BIT_FIFOEN+0xa6>
    rxdatacount = huart->RxXferCount;
 80033b0:	f8ba 305e 	ldrh.w	r3, [sl, #94]	; 0x5e
 80033b4:	b29b      	uxth	r3, r3
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	f43f af74 	beq.w	80032a4 <UART_RxISR_16BIT_FIFOEN+0x1c>
 80033bc:	f8ba 2068 	ldrh.w	r2, [sl, #104]	; 0x68
 80033c0:	429a      	cmp	r2, r3
 80033c2:	f67f af6f 	bls.w	80032a4 <UART_RxISR_16BIT_FIFOEN+0x1c>
 80033c6:	f8da 3000 	ldr.w	r3, [sl]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033ca:	f103 0208 	add.w	r2, r3, #8
 80033ce:	e852 2f00 	ldrex	r2, [r2]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80033d2:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033d6:	f103 0008 	add.w	r0, r3, #8
 80033da:	e840 2100 	strex	r1, r2, [r0]
 80033de:	2900      	cmp	r1, #0
 80033e0:	d1f3      	bne.n	80033ca <UART_RxISR_16BIT_FIFOEN+0x142>
      huart->RxISR = UART_RxISR_16BIT;
 80033e2:	4a12      	ldr	r2, [pc, #72]	; (800342c <UART_RxISR_16BIT_FIFOEN+0x1a4>)
 80033e4:	f8ca 2070 	str.w	r2, [sl, #112]	; 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033e8:	e853 2f00 	ldrex	r2, [r3]
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80033ec:	f042 0220 	orr.w	r2, r2, #32
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033f0:	e843 2100 	strex	r1, r2, [r3]
 80033f4:	2900      	cmp	r1, #0
 80033f6:	d1f7      	bne.n	80033e8 <UART_RxISR_16BIT_FIFOEN+0x160>
 80033f8:	e754      	b.n	80032a4 <UART_RxISR_16BIT_FIFOEN+0x1c>
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80033fa:	f8ca 106c 	str.w	r1, [sl, #108]	; 0x6c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033fe:	e853 2f00 	ldrex	r2, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003402:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003406:	e843 2100 	strex	r1, r2, [r3]
 800340a:	2900      	cmp	r1, #0
 800340c:	d1f7      	bne.n	80033fe <UART_RxISR_16BIT_FIFOEN+0x176>
          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800340e:	69da      	ldr	r2, [r3, #28]
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003410:	f8ba 105c 	ldrh.w	r1, [sl, #92]	; 0x5c
          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8003414:	06d2      	lsls	r2, r2, #27
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003416:	bf44      	itt	mi
 8003418:	2210      	movmi	r2, #16
 800341a:	621a      	strmi	r2, [r3, #32]
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800341c:	4650      	mov	r0, sl
 800341e:	f7ff fc2f 	bl	8002c80 <HAL_UARTEx_RxEventCallback>
 8003422:	e782      	b.n	800332a <UART_RxISR_16BIT_FIFOEN+0xa2>
    rxdatacount = huart->RxXferCount;
 8003424:	f8b0 305e 	ldrh.w	r3, [r0, #94]	; 0x5e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8003428:	e73c      	b.n	80032a4 <UART_RxISR_16BIT_FIFOEN+0x1c>
 800342a:	bf00      	nop
 800342c:	08003045 	.word	0x08003045
 8003430:	effffffe 	.word	0xeffffffe

08003434 <UART_SetConfig>:
{
 8003434:	b538      	push	{r3, r4, r5, lr}
 8003436:	4604      	mov	r4, r0
  if (UART_INSTANCE_LOWPOWER(huart))
 8003438:	6803      	ldr	r3, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800343a:	6882      	ldr	r2, [r0, #8]
 800343c:	6900      	ldr	r0, [r0, #16]
 800343e:	6961      	ldr	r1, [r4, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003440:	681d      	ldr	r5, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003442:	4302      	orrs	r2, r0
 8003444:	430a      	orrs	r2, r1
 8003446:	69e0      	ldr	r0, [r4, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003448:	49a5      	ldr	r1, [pc, #660]	; (80036e0 <UART_SetConfig+0x2ac>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800344a:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800344c:	4029      	ands	r1, r5
 800344e:	430a      	orrs	r2, r1
 8003450:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003452:	685a      	ldr	r2, [r3, #4]
 8003454:	68e1      	ldr	r1, [r4, #12]
 8003456:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 800345a:	430a      	orrs	r2, r1
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800345c:	49a1      	ldr	r1, [pc, #644]	; (80036e4 <UART_SetConfig+0x2b0>)
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800345e:	605a      	str	r2, [r3, #4]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003460:	428b      	cmp	r3, r1
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003462:	69a2      	ldr	r2, [r4, #24]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003464:	6899      	ldr	r1, [r3, #8]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003466:	d06b      	beq.n	8003540 <UART_SetConfig+0x10c>
    tmpreg |= huart->Init.OneBitSampling;
 8003468:	6a25      	ldr	r5, [r4, #32]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800346a:	f021 416e 	bic.w	r1, r1, #3992977408	; 0xee000000
 800346e:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
    tmpreg |= huart->Init.OneBitSampling;
 8003472:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003474:	430a      	orrs	r2, r1
 8003476:	609a      	str	r2, [r3, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003478:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800347a:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800347c:	f022 020f 	bic.w	r2, r2, #15
 8003480:	430a      	orrs	r2, r1
 8003482:	62da      	str	r2, [r3, #44]	; 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003484:	4a98      	ldr	r2, [pc, #608]	; (80036e8 <UART_SetConfig+0x2b4>)
 8003486:	4293      	cmp	r3, r2
 8003488:	d012      	beq.n	80034b0 <UART_SetConfig+0x7c>
 800348a:	4a98      	ldr	r2, [pc, #608]	; (80036ec <UART_SetConfig+0x2b8>)
 800348c:	4293      	cmp	r3, r2
 800348e:	d035      	beq.n	80034fc <UART_SetConfig+0xc8>
 8003490:	4a97      	ldr	r2, [pc, #604]	; (80036f0 <UART_SetConfig+0x2bc>)
 8003492:	4293      	cmp	r3, r2
 8003494:	f000 80f8 	beq.w	8003688 <UART_SetConfig+0x254>
 8003498:	4a96      	ldr	r2, [pc, #600]	; (80036f4 <UART_SetConfig+0x2c0>)
 800349a:	4293      	cmp	r3, r2
 800349c:	f000 80a4 	beq.w	80035e8 <UART_SetConfig+0x1b4>
        ret = HAL_ERROR;
 80034a0:	2001      	movs	r0, #1
  huart->RxISR = NULL;
 80034a2:	2300      	movs	r3, #0
  huart->NbRxDataToProcess = 1;
 80034a4:	f04f 1201 	mov.w	r2, #65537	; 0x10001
  huart->TxISR = NULL;
 80034a8:	e9c4 331c 	strd	r3, r3, [r4, #112]	; 0x70
  huart->NbRxDataToProcess = 1;
 80034ac:	66a2      	str	r2, [r4, #104]	; 0x68
}
 80034ae:	bd38      	pop	{r3, r4, r5, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 80034b0:	4b91      	ldr	r3, [pc, #580]	; (80036f8 <UART_SetConfig+0x2c4>)
 80034b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034b6:	f003 0303 	and.w	r3, r3, #3
 80034ba:	3b01      	subs	r3, #1
 80034bc:	2b02      	cmp	r3, #2
 80034be:	f240 808d 	bls.w	80035dc <UART_SetConfig+0x1a8>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80034c2:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 80034c6:	f000 80fc 	beq.w	80036c2 <UART_SetConfig+0x28e>
        pclk = HAL_RCC_GetPCLK2Freq();
 80034ca:	f7fe fd99 	bl	8002000 <HAL_RCC_GetPCLK2Freq>
    if (pclk != 0U)
 80034ce:	2800      	cmp	r0, #0
 80034d0:	d054      	beq.n	800357c <UART_SetConfig+0x148>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80034d2:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80034d4:	6862      	ldr	r2, [r4, #4]
 80034d6:	4b89      	ldr	r3, [pc, #548]	; (80036fc <UART_SetConfig+0x2c8>)
 80034d8:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 80034dc:	fbb0 f0f3 	udiv	r0, r0, r3
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80034e0:	f64f 71ef 	movw	r1, #65519	; 0xffef
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80034e4:	eb00 0352 	add.w	r3, r0, r2, lsr #1
 80034e8:	fbb3 f3f2 	udiv	r3, r3, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80034ec:	f1a3 0210 	sub.w	r2, r3, #16
 80034f0:	428a      	cmp	r2, r1
 80034f2:	d8d5      	bhi.n	80034a0 <UART_SetConfig+0x6c>
        huart->Instance->BRR = (uint16_t)usartdiv;
 80034f4:	6822      	ldr	r2, [r4, #0]
 80034f6:	2000      	movs	r0, #0
 80034f8:	60d3      	str	r3, [r2, #12]
 80034fa:	e7d2      	b.n	80034a2 <UART_SetConfig+0x6e>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80034fc:	4b7e      	ldr	r3, [pc, #504]	; (80036f8 <UART_SetConfig+0x2c4>)
 80034fe:	4a80      	ldr	r2, [pc, #512]	; (8003700 <UART_SetConfig+0x2cc>)
 8003500:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003504:	f003 030c 	and.w	r3, r3, #12
 8003508:	5cd3      	ldrb	r3, [r2, r3]
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800350a:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 800350e:	d07d      	beq.n	800360c <UART_SetConfig+0x1d8>
    switch (clocksource)
 8003510:	2b08      	cmp	r3, #8
 8003512:	d8c5      	bhi.n	80034a0 <UART_SetConfig+0x6c>
 8003514:	a201      	add	r2, pc, #4	; (adr r2, 800351c <UART_SetConfig+0xe8>)
 8003516:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800351a:	bf00      	nop
 800351c:	08003643 	.word	0x08003643
 8003520:	080034cb 	.word	0x080034cb
 8003524:	080036bf 	.word	0x080036bf
 8003528:	080034a1 	.word	0x080034a1
 800352c:	08003607 	.word	0x08003607
 8003530:	080034a1 	.word	0x080034a1
 8003534:	080034a1 	.word	0x080034a1
 8003538:	080034a1 	.word	0x080034a1
 800353c:	080036af 	.word	0x080036af
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003540:	f021 416e 	bic.w	r1, r1, #3992977408	; 0xee000000
 8003544:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
 8003548:	430a      	orrs	r2, r1
 800354a:	609a      	str	r2, [r3, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800354c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800354e:	6a61      	ldr	r1, [r4, #36]	; 0x24
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003550:	4869      	ldr	r0, [pc, #420]	; (80036f8 <UART_SetConfig+0x2c4>)
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003552:	f022 020f 	bic.w	r2, r2, #15
 8003556:	430a      	orrs	r2, r1
 8003558:	62da      	str	r2, [r3, #44]	; 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 800355a:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
 800355e:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003562:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003566:	f000 80a8 	beq.w	80036ba <UART_SetConfig+0x286>
 800356a:	d809      	bhi.n	8003580 <UART_SetConfig+0x14c>
 800356c:	2b00      	cmp	r3, #0
 800356e:	d038      	beq.n	80035e2 <UART_SetConfig+0x1ae>
 8003570:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003574:	d194      	bne.n	80034a0 <UART_SetConfig+0x6c>
        pclk = HAL_RCC_GetSysClockFreq();
 8003576:	f7fe fbe7 	bl	8001d48 <HAL_RCC_GetSysClockFreq>
    if (pclk != 0U)
 800357a:	b930      	cbnz	r0, 800358a <UART_SetConfig+0x156>
 800357c:	2000      	movs	r0, #0
 800357e:	e790      	b.n	80034a2 <UART_SetConfig+0x6e>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003580:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003584:	d18c      	bne.n	80034a0 <UART_SetConfig+0x6c>
        pclk = (uint32_t) LSE_VALUE;
 8003586:	f44f 4000 	mov.w	r0, #32768	; 0x8000
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800358a:	6865      	ldr	r5, [r4, #4]
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800358c:	4b5b      	ldr	r3, [pc, #364]	; (80036fc <UART_SetConfig+0x2c8>)
 800358e:	6a62      	ldr	r2, [r4, #36]	; 0x24
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003590:	eb05 0145 	add.w	r1, r5, r5, lsl #1
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8003594:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8003598:	fbb0 f3f2 	udiv	r3, r0, r2
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800359c:	4299      	cmp	r1, r3
 800359e:	f63f af7f 	bhi.w	80034a0 <UART_SetConfig+0x6c>
 80035a2:	ebb3 3f05 	cmp.w	r3, r5, lsl #12
 80035a6:	f63f af7b 	bhi.w	80034a0 <UART_SetConfig+0x6c>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80035aa:	2300      	movs	r3, #0
 80035ac:	4619      	mov	r1, r3
 80035ae:	f7fc fe33 	bl	8000218 <__aeabi_uldivmod>
 80035b2:	0209      	lsls	r1, r1, #8
 80035b4:	0203      	lsls	r3, r0, #8
 80035b6:	ea41 6110 	orr.w	r1, r1, r0, lsr #24
 80035ba:	0868      	lsrs	r0, r5, #1
 80035bc:	1818      	adds	r0, r3, r0
 80035be:	462a      	mov	r2, r5
 80035c0:	f04f 0300 	mov.w	r3, #0
 80035c4:	f141 0100 	adc.w	r1, r1, #0
 80035c8:	f7fc fe26 	bl	8000218 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80035cc:	4a4d      	ldr	r2, [pc, #308]	; (8003704 <UART_SetConfig+0x2d0>)
 80035ce:	f5a0 7140 	sub.w	r1, r0, #768	; 0x300
 80035d2:	4291      	cmp	r1, r2
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80035d4:	4603      	mov	r3, r0
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80035d6:	f63f af63 	bhi.w	80034a0 <UART_SetConfig+0x6c>
 80035da:	e78b      	b.n	80034f4 <UART_SetConfig+0xc0>
 80035dc:	4a4a      	ldr	r2, [pc, #296]	; (8003708 <UART_SetConfig+0x2d4>)
 80035de:	5cd3      	ldrb	r3, [r2, r3]
  if (UART_INSTANCE_LOWPOWER(huart))
 80035e0:	e793      	b.n	800350a <UART_SetConfig+0xd6>
        pclk = HAL_RCC_GetPCLK1Freq();
 80035e2:	f7fe fcfb 	bl	8001fdc <HAL_RCC_GetPCLK1Freq>
        break;
 80035e6:	e7c8      	b.n	800357a <UART_SetConfig+0x146>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80035e8:	4b43      	ldr	r3, [pc, #268]	; (80036f8 <UART_SetConfig+0x2c4>)
 80035ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035ee:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80035f2:	2b80      	cmp	r3, #128	; 0x80
 80035f4:	d06d      	beq.n	80036d2 <UART_SetConfig+0x29e>
 80035f6:	d85d      	bhi.n	80036b4 <UART_SetConfig+0x280>
 80035f8:	b303      	cbz	r3, 800363c <UART_SetConfig+0x208>
 80035fa:	2b40      	cmp	r3, #64	; 0x40
 80035fc:	f47f af50 	bne.w	80034a0 <UART_SetConfig+0x6c>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003600:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8003604:	d020      	beq.n	8003648 <UART_SetConfig+0x214>
        pclk = HAL_RCC_GetSysClockFreq();
 8003606:	f7fe fb9f 	bl	8001d48 <HAL_RCC_GetSysClockFreq>
        break;
 800360a:	e760      	b.n	80034ce <UART_SetConfig+0x9a>
    switch (clocksource)
 800360c:	2b08      	cmp	r3, #8
 800360e:	f63f af47 	bhi.w	80034a0 <UART_SetConfig+0x6c>
 8003612:	a201      	add	r2, pc, #4	; (adr r2, 8003618 <UART_SetConfig+0x1e4>)
 8003614:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003618:	080036c9 	.word	0x080036c9
 800361c:	080036c3 	.word	0x080036c3
 8003620:	080036cf 	.word	0x080036cf
 8003624:	080034a1 	.word	0x080034a1
 8003628:	08003649 	.word	0x08003649
 800362c:	080034a1 	.word	0x080034a1
 8003630:	080034a1 	.word	0x080034a1
 8003634:	080034a1 	.word	0x080034a1
 8003638:	08003653 	.word	0x08003653
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800363c:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8003640:	d042      	beq.n	80036c8 <UART_SetConfig+0x294>
        pclk = HAL_RCC_GetPCLK1Freq();
 8003642:	f7fe fccb 	bl	8001fdc <HAL_RCC_GetPCLK1Freq>
        break;
 8003646:	e742      	b.n	80034ce <UART_SetConfig+0x9a>
        pclk = HAL_RCC_GetSysClockFreq();
 8003648:	f7fe fb7e 	bl	8001d48 <HAL_RCC_GetSysClockFreq>
    if (pclk != 0U)
 800364c:	2800      	cmp	r0, #0
 800364e:	d095      	beq.n	800357c <UART_SetConfig+0x148>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003650:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8003652:	6862      	ldr	r2, [r4, #4]
 8003654:	4b29      	ldr	r3, [pc, #164]	; (80036fc <UART_SetConfig+0x2c8>)
 8003656:	f833 1011 	ldrh.w	r1, [r3, r1, lsl #1]
 800365a:	fbb0 f0f1 	udiv	r0, r0, r1
 800365e:	0853      	lsrs	r3, r2, #1
 8003660:	eb03 0040 	add.w	r0, r3, r0, lsl #1
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003664:	f64f 73ef 	movw	r3, #65519	; 0xffef
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003668:	fbb0 f0f2 	udiv	r0, r0, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800366c:	f1a0 0210 	sub.w	r2, r0, #16
 8003670:	429a      	cmp	r2, r3
 8003672:	f63f af15 	bhi.w	80034a0 <UART_SetConfig+0x6c>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003676:	f020 030f 	bic.w	r3, r0, #15
        huart->Instance->BRR = brrtemp;
 800367a:	6822      	ldr	r2, [r4, #0]
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800367c:	b29b      	uxth	r3, r3
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800367e:	f3c0 0042 	ubfx	r0, r0, #1, #3
        huart->Instance->BRR = brrtemp;
 8003682:	4318      	orrs	r0, r3
 8003684:	60d0      	str	r0, [r2, #12]
 8003686:	e779      	b.n	800357c <UART_SetConfig+0x148>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003688:	4b1b      	ldr	r3, [pc, #108]	; (80036f8 <UART_SetConfig+0x2c4>)
 800368a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800368e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003692:	2b20      	cmp	r3, #32
 8003694:	d01d      	beq.n	80036d2 <UART_SetConfig+0x29e>
 8003696:	d804      	bhi.n	80036a2 <UART_SetConfig+0x26e>
 8003698:	2b00      	cmp	r3, #0
 800369a:	d0cf      	beq.n	800363c <UART_SetConfig+0x208>
 800369c:	2b10      	cmp	r3, #16
 800369e:	d0af      	beq.n	8003600 <UART_SetConfig+0x1cc>
 80036a0:	e6fe      	b.n	80034a0 <UART_SetConfig+0x6c>
 80036a2:	2b30      	cmp	r3, #48	; 0x30
 80036a4:	f47f aefc 	bne.w	80034a0 <UART_SetConfig+0x6c>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80036a8:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 80036ac:	d0d1      	beq.n	8003652 <UART_SetConfig+0x21e>
    switch (clocksource)
 80036ae:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80036b2:	e70f      	b.n	80034d4 <UART_SetConfig+0xa0>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80036b4:	2bc0      	cmp	r3, #192	; 0xc0
 80036b6:	d0f7      	beq.n	80036a8 <UART_SetConfig+0x274>
 80036b8:	e6f2      	b.n	80034a0 <UART_SetConfig+0x6c>
 80036ba:	4814      	ldr	r0, [pc, #80]	; (800370c <UART_SetConfig+0x2d8>)
 80036bc:	e765      	b.n	800358a <UART_SetConfig+0x156>
        pclk = (uint32_t) HSI_VALUE;
 80036be:	4813      	ldr	r0, [pc, #76]	; (800370c <UART_SetConfig+0x2d8>)
 80036c0:	e708      	b.n	80034d4 <UART_SetConfig+0xa0>
        pclk = HAL_RCC_GetPCLK2Freq();
 80036c2:	f7fe fc9d 	bl	8002000 <HAL_RCC_GetPCLK2Freq>
        break;
 80036c6:	e7c1      	b.n	800364c <UART_SetConfig+0x218>
        pclk = HAL_RCC_GetPCLK1Freq();
 80036c8:	f7fe fc88 	bl	8001fdc <HAL_RCC_GetPCLK1Freq>
        break;
 80036cc:	e7be      	b.n	800364c <UART_SetConfig+0x218>
        pclk = (uint32_t) HSI_VALUE;
 80036ce:	480f      	ldr	r0, [pc, #60]	; (800370c <UART_SetConfig+0x2d8>)
 80036d0:	e7bf      	b.n	8003652 <UART_SetConfig+0x21e>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80036d2:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
        pclk = (uint32_t) HSI_VALUE;
 80036d6:	480d      	ldr	r0, [pc, #52]	; (800370c <UART_SetConfig+0x2d8>)
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80036d8:	f47f aefc 	bne.w	80034d4 <UART_SetConfig+0xa0>
 80036dc:	e7b9      	b.n	8003652 <UART_SetConfig+0x21e>
 80036de:	bf00      	nop
 80036e0:	cfff69f3 	.word	0xcfff69f3
 80036e4:	40008000 	.word	0x40008000
 80036e8:	40013800 	.word	0x40013800
 80036ec:	40004400 	.word	0x40004400
 80036f0:	40004800 	.word	0x40004800
 80036f4:	40004c00 	.word	0x40004c00
 80036f8:	40021000 	.word	0x40021000
 80036fc:	08003d24 	.word	0x08003d24
 8003700:	08003d14 	.word	0x08003d14
 8003704:	000ffcff 	.word	0x000ffcff
 8003708:	08003d10 	.word	0x08003d10
 800370c:	00f42400 	.word	0x00f42400

08003710 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003710:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8003712:	07da      	lsls	r2, r3, #31
{
 8003714:	b410      	push	{r4}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003716:	d506      	bpl.n	8003726 <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003718:	6801      	ldr	r1, [r0, #0]
 800371a:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 800371c:	684a      	ldr	r2, [r1, #4]
 800371e:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8003722:	4322      	orrs	r2, r4
 8003724:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003726:	079c      	lsls	r4, r3, #30
 8003728:	d506      	bpl.n	8003738 <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800372a:	6801      	ldr	r1, [r0, #0]
 800372c:	6b04      	ldr	r4, [r0, #48]	; 0x30
 800372e:	684a      	ldr	r2, [r1, #4]
 8003730:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8003734:	4322      	orrs	r2, r4
 8003736:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003738:	0759      	lsls	r1, r3, #29
 800373a:	d506      	bpl.n	800374a <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800373c:	6801      	ldr	r1, [r0, #0]
 800373e:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8003740:	684a      	ldr	r2, [r1, #4]
 8003742:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003746:	4322      	orrs	r2, r4
 8003748:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800374a:	071a      	lsls	r2, r3, #28
 800374c:	d506      	bpl.n	800375c <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800374e:	6801      	ldr	r1, [r0, #0]
 8003750:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8003752:	684a      	ldr	r2, [r1, #4]
 8003754:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003758:	4322      	orrs	r2, r4
 800375a:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800375c:	06dc      	lsls	r4, r3, #27
 800375e:	d506      	bpl.n	800376e <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003760:	6801      	ldr	r1, [r0, #0]
 8003762:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8003764:	688a      	ldr	r2, [r1, #8]
 8003766:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800376a:	4322      	orrs	r2, r4
 800376c:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800376e:	0699      	lsls	r1, r3, #26
 8003770:	d506      	bpl.n	8003780 <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003772:	6801      	ldr	r1, [r0, #0]
 8003774:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8003776:	688a      	ldr	r2, [r1, #8]
 8003778:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800377c:	4322      	orrs	r2, r4
 800377e:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003780:	065a      	lsls	r2, r3, #25
 8003782:	d509      	bpl.n	8003798 <UART_AdvFeatureConfig+0x88>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003784:	6801      	ldr	r1, [r0, #0]
 8003786:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8003788:	684a      	ldr	r2, [r1, #4]
 800378a:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 800378e:	4322      	orrs	r2, r4
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003790:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003794:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003796:	d00b      	beq.n	80037b0 <UART_AdvFeatureConfig+0xa0>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003798:	061b      	lsls	r3, r3, #24
 800379a:	d506      	bpl.n	80037aa <UART_AdvFeatureConfig+0x9a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800379c:	6802      	ldr	r2, [r0, #0]
 800379e:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 80037a0:	6853      	ldr	r3, [r2, #4]
 80037a2:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 80037a6:	430b      	orrs	r3, r1
 80037a8:	6053      	str	r3, [r2, #4]
}
 80037aa:	f85d 4b04 	ldr.w	r4, [sp], #4
 80037ae:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80037b0:	684a      	ldr	r2, [r1, #4]
 80037b2:	6c84      	ldr	r4, [r0, #72]	; 0x48
 80037b4:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 80037b8:	4322      	orrs	r2, r4
 80037ba:	604a      	str	r2, [r1, #4]
 80037bc:	e7ec      	b.n	8003798 <UART_AdvFeatureConfig+0x88>
 80037be:	bf00      	nop

080037c0 <UART_WaitOnFlagUntilTimeout>:
{
 80037c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80037c4:	f8dd 8020 	ldr.w	r8, [sp, #32]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80037c8:	6805      	ldr	r5, [r0, #0]
{
 80037ca:	4681      	mov	r9, r0
 80037cc:	460f      	mov	r7, r1
 80037ce:	4616      	mov	r6, r2
 80037d0:	469a      	mov	sl, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80037d2:	e002      	b.n	80037da <UART_WaitOnFlagUntilTimeout+0x1a>
    if (Timeout != HAL_MAX_DELAY)
 80037d4:	f1b8 3fff 	cmp.w	r8, #4294967295
 80037d8:	d10c      	bne.n	80037f4 <UART_WaitOnFlagUntilTimeout+0x34>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80037da:	69ec      	ldr	r4, [r5, #28]
 80037dc:	ea37 0304 	bics.w	r3, r7, r4
 80037e0:	bf0c      	ite	eq
 80037e2:	f04f 0c01 	moveq.w	ip, #1
 80037e6:	f04f 0c00 	movne.w	ip, #0
 80037ea:	45b4      	cmp	ip, r6
 80037ec:	d0f2      	beq.n	80037d4 <UART_WaitOnFlagUntilTimeout+0x14>
  return HAL_OK;
 80037ee:	2000      	movs	r0, #0
}
 80037f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80037f4:	f7fd fa7a 	bl	8000cec <HAL_GetTick>
 80037f8:	eba0 000a 	sub.w	r0, r0, sl
 80037fc:	4540      	cmp	r0, r8
 80037fe:	d82d      	bhi.n	800385c <UART_WaitOnFlagUntilTimeout+0x9c>
 8003800:	f1b8 0f00 	cmp.w	r8, #0
 8003804:	d02a      	beq.n	800385c <UART_WaitOnFlagUntilTimeout+0x9c>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003806:	f8d9 5000 	ldr.w	r5, [r9]
 800380a:	682b      	ldr	r3, [r5, #0]
 800380c:	0759      	lsls	r1, r3, #29
 800380e:	462a      	mov	r2, r5
 8003810:	d5e3      	bpl.n	80037da <UART_WaitOnFlagUntilTimeout+0x1a>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003812:	69eb      	ldr	r3, [r5, #28]
 8003814:	051b      	lsls	r3, r3, #20
 8003816:	d5e0      	bpl.n	80037da <UART_WaitOnFlagUntilTimeout+0x1a>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003818:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800381c:	622b      	str	r3, [r5, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800381e:	e852 3f00 	ldrex	r3, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8003822:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003826:	e842 3100 	strex	r1, r3, [r2]
 800382a:	2900      	cmp	r1, #0
 800382c:	d1f7      	bne.n	800381e <UART_WaitOnFlagUntilTimeout+0x5e>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800382e:	f102 0308 	add.w	r3, r2, #8
 8003832:	e853 3f00 	ldrex	r3, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003836:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800383a:	f102 0008 	add.w	r0, r2, #8
 800383e:	e840 3100 	strex	r1, r3, [r0]
 8003842:	2900      	cmp	r1, #0
 8003844:	d1f3      	bne.n	800382e <UART_WaitOnFlagUntilTimeout+0x6e>
          huart->gState = HAL_UART_STATE_READY;
 8003846:	2320      	movs	r3, #32
 8003848:	f8c9 3084 	str.w	r3, [r9, #132]	; 0x84
          __HAL_UNLOCK(huart);
 800384c:	f889 1080 	strb.w	r1, [r9, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 8003850:	f8c9 3088 	str.w	r3, [r9, #136]	; 0x88
          return HAL_TIMEOUT;
 8003854:	2003      	movs	r0, #3
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003856:	f8c9 308c 	str.w	r3, [r9, #140]	; 0x8c
          return HAL_TIMEOUT;
 800385a:	e7c9      	b.n	80037f0 <UART_WaitOnFlagUntilTimeout+0x30>
 800385c:	f8d9 2000 	ldr.w	r2, [r9]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003860:	e852 3f00 	ldrex	r3, [r2]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8003864:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003868:	e842 3100 	strex	r1, r3, [r2]
 800386c:	2900      	cmp	r1, #0
 800386e:	d1f7      	bne.n	8003860 <UART_WaitOnFlagUntilTimeout+0xa0>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003870:	f102 0308 	add.w	r3, r2, #8
 8003874:	e853 3f00 	ldrex	r3, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003878:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800387c:	f102 0008 	add.w	r0, r2, #8
 8003880:	e840 3100 	strex	r1, r3, [r0]
 8003884:	2900      	cmp	r1, #0
 8003886:	d1f3      	bne.n	8003870 <UART_WaitOnFlagUntilTimeout+0xb0>
        huart->gState = HAL_UART_STATE_READY;
 8003888:	2320      	movs	r3, #32
 800388a:	f8c9 3084 	str.w	r3, [r9, #132]	; 0x84
        __HAL_UNLOCK(huart);
 800388e:	f889 1080 	strb.w	r1, [r9, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 8003892:	f8c9 3088 	str.w	r3, [r9, #136]	; 0x88
        return HAL_TIMEOUT;
 8003896:	2003      	movs	r0, #3
 8003898:	e7aa      	b.n	80037f0 <UART_WaitOnFlagUntilTimeout+0x30>
 800389a:	bf00      	nop

0800389c <UART_CheckIdleState>:
{
 800389c:	b570      	push	{r4, r5, r6, lr}
 800389e:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80038a0:	2600      	movs	r6, #0
{
 80038a2:	b082      	sub	sp, #8
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80038a4:	f8c0 608c 	str.w	r6, [r0, #140]	; 0x8c
  tickstart = HAL_GetTick();
 80038a8:	f7fd fa20 	bl	8000cec <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80038ac:	6823      	ldr	r3, [r4, #0]
 80038ae:	681a      	ldr	r2, [r3, #0]
 80038b0:	0712      	lsls	r2, r2, #28
  tickstart = HAL_GetTick();
 80038b2:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80038b4:	d40e      	bmi.n	80038d4 <UART_CheckIdleState+0x38>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	075b      	lsls	r3, r3, #29
 80038ba:	d41a      	bmi.n	80038f2 <UART_CheckIdleState+0x56>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80038bc:	2300      	movs	r3, #0
  huart->gState = HAL_UART_STATE_READY;
 80038be:	2220      	movs	r2, #32
  return HAL_OK;
 80038c0:	4618      	mov	r0, r3
  huart->gState = HAL_UART_STATE_READY;
 80038c2:	f8c4 2084 	str.w	r2, [r4, #132]	; 0x84
  __HAL_UNLOCK(huart);
 80038c6:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 80038ca:	f8c4 2088 	str.w	r2, [r4, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80038ce:	66e3      	str	r3, [r4, #108]	; 0x6c
}
 80038d0:	b002      	add	sp, #8
 80038d2:	bd70      	pop	{r4, r5, r6, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80038d4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80038d8:	9300      	str	r3, [sp, #0]
 80038da:	4632      	mov	r2, r6
 80038dc:	4603      	mov	r3, r0
 80038de:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80038e2:	4620      	mov	r0, r4
 80038e4:	f7ff ff6c 	bl	80037c0 <UART_WaitOnFlagUntilTimeout>
 80038e8:	b978      	cbnz	r0, 800390a <UART_CheckIdleState+0x6e>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80038ea:	6823      	ldr	r3, [r4, #0]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	075b      	lsls	r3, r3, #29
 80038f0:	d5e4      	bpl.n	80038bc <UART_CheckIdleState+0x20>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80038f2:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80038f6:	9300      	str	r3, [sp, #0]
 80038f8:	2200      	movs	r2, #0
 80038fa:	462b      	mov	r3, r5
 80038fc:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003900:	4620      	mov	r0, r4
 8003902:	f7ff ff5d 	bl	80037c0 <UART_WaitOnFlagUntilTimeout>
 8003906:	2800      	cmp	r0, #0
 8003908:	d0d8      	beq.n	80038bc <UART_CheckIdleState+0x20>
      return HAL_TIMEOUT;
 800390a:	2003      	movs	r0, #3
}
 800390c:	b002      	add	sp, #8
 800390e:	bd70      	pop	{r4, r5, r6, pc}

08003910 <HAL_UART_Init>:
  if (huart == NULL)
 8003910:	b380      	cbz	r0, 8003974 <HAL_UART_Init+0x64>
  if (huart->gState == HAL_UART_STATE_RESET)
 8003912:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
{
 8003916:	b510      	push	{r4, lr}
 8003918:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 800391a:	b333      	cbz	r3, 800396a <HAL_UART_Init+0x5a>
  __HAL_UART_DISABLE(huart);
 800391c:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 800391e:	2324      	movs	r3, #36	; 0x24
 8003920:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  __HAL_UART_DISABLE(huart);
 8003924:	6813      	ldr	r3, [r2, #0]
 8003926:	f023 0301 	bic.w	r3, r3, #1
  if (UART_SetConfig(huart) == HAL_ERROR)
 800392a:	4620      	mov	r0, r4
  __HAL_UART_DISABLE(huart);
 800392c:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 800392e:	f7ff fd81 	bl	8003434 <UART_SetConfig>
 8003932:	2801      	cmp	r0, #1
 8003934:	d017      	beq.n	8003966 <HAL_UART_Init+0x56>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003936:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8003938:	b98b      	cbnz	r3, 800395e <HAL_UART_Init+0x4e>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800393a:	6823      	ldr	r3, [r4, #0]
 800393c:	685a      	ldr	r2, [r3, #4]
 800393e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003942:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003944:	689a      	ldr	r2, [r3, #8]
 8003946:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800394a:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 800394c:	681a      	ldr	r2, [r3, #0]
 800394e:	f042 0201 	orr.w	r2, r2, #1
  return (UART_CheckIdleState(huart));
 8003952:	4620      	mov	r0, r4
  __HAL_UART_ENABLE(huart);
 8003954:	601a      	str	r2, [r3, #0]
}
 8003956:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return (UART_CheckIdleState(huart));
 800395a:	f7ff bf9f 	b.w	800389c <UART_CheckIdleState>
    UART_AdvFeatureConfig(huart);
 800395e:	4620      	mov	r0, r4
 8003960:	f7ff fed6 	bl	8003710 <UART_AdvFeatureConfig>
 8003964:	e7e9      	b.n	800393a <HAL_UART_Init+0x2a>
}
 8003966:	2001      	movs	r0, #1
 8003968:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 800396a:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
    HAL_UART_MspInit(huart);
 800396e:	f7fd f8d1 	bl	8000b14 <HAL_UART_MspInit>
 8003972:	e7d3      	b.n	800391c <HAL_UART_Init+0xc>
}
 8003974:	2001      	movs	r0, #1
 8003976:	4770      	bx	lr

08003978 <UART_Start_Receive_IT>:
  UART_MASK_COMPUTATION(huart);
 8003978:	6883      	ldr	r3, [r0, #8]
{
 800397a:	b410      	push	{r4}
  UART_MASK_COMPUTATION(huart);
 800397c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
  huart->RxISR       = NULL;
 8003980:	f04f 0400 	mov.w	r4, #0
  huart->pRxBuffPtr  = pData;
 8003984:	6581      	str	r1, [r0, #88]	; 0x58
  huart->RxXferSize  = Size;
 8003986:	f8a0 205c 	strh.w	r2, [r0, #92]	; 0x5c
  huart->RxXferCount = Size;
 800398a:	f8a0 205e 	strh.w	r2, [r0, #94]	; 0x5e
  huart->RxISR       = NULL;
 800398e:	6704      	str	r4, [r0, #112]	; 0x70
  UART_MASK_COMPUTATION(huart);
 8003990:	d056      	beq.n	8003a40 <UART_Start_Receive_IT+0xc8>
 8003992:	2b00      	cmp	r3, #0
 8003994:	d04a      	beq.n	8003a2c <UART_Start_Receive_IT+0xb4>
 8003996:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800399a:	f000 8082 	beq.w	8003aa2 <UART_Start_Receive_IT+0x12a>
 800399e:	f8a0 4060 	strh.w	r4, [r0, #96]	; 0x60
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80039a2:	2400      	movs	r4, #0
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80039a4:	2322      	movs	r3, #34	; 0x22
 80039a6:	6801      	ldr	r1, [r0, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80039a8:	f8c0 408c 	str.w	r4, [r0, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80039ac:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039b0:	f101 0308 	add.w	r3, r1, #8
 80039b4:	e853 3f00 	ldrex	r3, [r3]
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80039b8:	f043 0301 	orr.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039bc:	f101 0c08 	add.w	ip, r1, #8
 80039c0:	e84c 3400 	strex	r4, r3, [ip]
 80039c4:	2c00      	cmp	r4, #0
 80039c6:	d1f3      	bne.n	80039b0 <UART_Start_Receive_IT+0x38>
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 80039c8:	6e43      	ldr	r3, [r0, #100]	; 0x64
 80039ca:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80039ce:	d03f      	beq.n	8003a50 <UART_Start_Receive_IT+0xd8>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80039d0:	6883      	ldr	r3, [r0, #8]
 80039d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80039d6:	6903      	ldr	r3, [r0, #16]
 80039d8:	d011      	beq.n	80039fe <UART_Start_Receive_IT+0x86>
      huart->RxISR = UART_RxISR_8BIT;
 80039da:	4c3b      	ldr	r4, [pc, #236]	; (8003ac8 <UART_Start_Receive_IT+0x150>)
 80039dc:	6704      	str	r4, [r0, #112]	; 0x70
    __HAL_UNLOCK(huart);
 80039de:	2200      	movs	r2, #0
 80039e0:	f880 2080 	strb.w	r2, [r0, #128]	; 0x80
    if (huart->Init.Parity != UART_PARITY_NONE)
 80039e4:	b18b      	cbz	r3, 8003a0a <UART_Start_Receive_IT+0x92>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039e6:	e851 3f00 	ldrex	r3, [r1]
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 80039ea:	f443 7390 	orr.w	r3, r3, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039ee:	e841 3200 	strex	r2, r3, [r1]
 80039f2:	2a00      	cmp	r2, #0
 80039f4:	d1f7      	bne.n	80039e6 <UART_Start_Receive_IT+0x6e>
}
 80039f6:	2000      	movs	r0, #0
 80039f8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80039fc:	4770      	bx	lr
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d149      	bne.n	8003a96 <UART_Start_Receive_IT+0x11e>
 8003a02:	4a32      	ldr	r2, [pc, #200]	; (8003acc <UART_Start_Receive_IT+0x154>)
 8003a04:	6702      	str	r2, [r0, #112]	; 0x70
    __HAL_UNLOCK(huart);
 8003a06:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a0a:	e851 3f00 	ldrex	r3, [r1]
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8003a0e:	f043 0320 	orr.w	r3, r3, #32
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a12:	e841 3200 	strex	r2, r3, [r1]
 8003a16:	2a00      	cmp	r2, #0
 8003a18:	d0ed      	beq.n	80039f6 <UART_Start_Receive_IT+0x7e>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a1a:	e851 3f00 	ldrex	r3, [r1]
 8003a1e:	f043 0320 	orr.w	r3, r3, #32
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a22:	e841 3200 	strex	r2, r3, [r1]
 8003a26:	2a00      	cmp	r2, #0
 8003a28:	d1ef      	bne.n	8003a0a <UART_Start_Receive_IT+0x92>
 8003a2a:	e7e4      	b.n	80039f6 <UART_Start_Receive_IT+0x7e>
  UART_MASK_COMPUTATION(huart);
 8003a2c:	6903      	ldr	r3, [r0, #16]
 8003a2e:	b91b      	cbnz	r3, 8003a38 <UART_Start_Receive_IT+0xc0>
 8003a30:	23ff      	movs	r3, #255	; 0xff
 8003a32:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
 8003a36:	e7b4      	b.n	80039a2 <UART_Start_Receive_IT+0x2a>
 8003a38:	237f      	movs	r3, #127	; 0x7f
 8003a3a:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
 8003a3e:	e7b0      	b.n	80039a2 <UART_Start_Receive_IT+0x2a>
 8003a40:	6903      	ldr	r3, [r0, #16]
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d1f4      	bne.n	8003a30 <UART_Start_Receive_IT+0xb8>
 8003a46:	f240 13ff 	movw	r3, #511	; 0x1ff
 8003a4a:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
 8003a4e:	e7a8      	b.n	80039a2 <UART_Start_Receive_IT+0x2a>
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8003a50:	f8b0 3068 	ldrh.w	r3, [r0, #104]	; 0x68
 8003a54:	4293      	cmp	r3, r2
 8003a56:	d8bb      	bhi.n	80039d0 <UART_Start_Receive_IT+0x58>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003a58:	6883      	ldr	r3, [r0, #8]
 8003a5a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a5e:	6903      	ldr	r3, [r0, #16]
 8003a60:	d026      	beq.n	8003ab0 <UART_Start_Receive_IT+0x138>
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8003a62:	4a1b      	ldr	r2, [pc, #108]	; (8003ad0 <UART_Start_Receive_IT+0x158>)
 8003a64:	6702      	str	r2, [r0, #112]	; 0x70
    __HAL_UNLOCK(huart);
 8003a66:	f880 4080 	strb.w	r4, [r0, #128]	; 0x80
    if (huart->Init.Parity != UART_PARITY_NONE)
 8003a6a:	b13b      	cbz	r3, 8003a7c <UART_Start_Receive_IT+0x104>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a6c:	e851 3f00 	ldrex	r3, [r1]
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003a70:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a74:	e841 3200 	strex	r2, r3, [r1]
 8003a78:	2a00      	cmp	r2, #0
 8003a7a:	d1f7      	bne.n	8003a6c <UART_Start_Receive_IT+0xf4>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a7c:	f101 0308 	add.w	r3, r1, #8
 8003a80:	e853 3f00 	ldrex	r3, [r3]
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8003a84:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a88:	f101 0008 	add.w	r0, r1, #8
 8003a8c:	e840 3200 	strex	r2, r3, [r0]
 8003a90:	2a00      	cmp	r2, #0
 8003a92:	d1f3      	bne.n	8003a7c <UART_Start_Receive_IT+0x104>
 8003a94:	e7af      	b.n	80039f6 <UART_Start_Receive_IT+0x7e>
      huart->RxISR = UART_RxISR_8BIT;
 8003a96:	4a0c      	ldr	r2, [pc, #48]	; (8003ac8 <UART_Start_Receive_IT+0x150>)
 8003a98:	6702      	str	r2, [r0, #112]	; 0x70
    __HAL_UNLOCK(huart);
 8003a9a:	2300      	movs	r3, #0
 8003a9c:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
    if (huart->Init.Parity != UART_PARITY_NONE)
 8003aa0:	e7a1      	b.n	80039e6 <UART_Start_Receive_IT+0x6e>
  UART_MASK_COMPUTATION(huart);
 8003aa2:	6903      	ldr	r3, [r0, #16]
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d0c7      	beq.n	8003a38 <UART_Start_Receive_IT+0xc0>
 8003aa8:	233f      	movs	r3, #63	; 0x3f
 8003aaa:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
 8003aae:	e778      	b.n	80039a2 <UART_Start_Receive_IT+0x2a>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003ab0:	b923      	cbnz	r3, 8003abc <UART_Start_Receive_IT+0x144>
 8003ab2:	4a08      	ldr	r2, [pc, #32]	; (8003ad4 <UART_Start_Receive_IT+0x15c>)
 8003ab4:	6702      	str	r2, [r0, #112]	; 0x70
    __HAL_UNLOCK(huart);
 8003ab6:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
    if (huart->Init.Parity != UART_PARITY_NONE)
 8003aba:	e7df      	b.n	8003a7c <UART_Start_Receive_IT+0x104>
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8003abc:	4b04      	ldr	r3, [pc, #16]	; (8003ad0 <UART_Start_Receive_IT+0x158>)
 8003abe:	6703      	str	r3, [r0, #112]	; 0x70
    __HAL_UNLOCK(huart);
 8003ac0:	f880 4080 	strb.w	r4, [r0, #128]	; 0x80
    if (huart->Init.Parity != UART_PARITY_NONE)
 8003ac4:	e7d2      	b.n	8003a6c <UART_Start_Receive_IT+0xf4>
 8003ac6:	bf00      	nop
 8003ac8:	08002fa1 	.word	0x08002fa1
 8003acc:	08003045 	.word	0x08003045
 8003ad0:	080030e9 	.word	0x080030e9
 8003ad4:	08003289 	.word	0x08003289

08003ad8 <HAL_UART_Receive_IT>:
  if (huart->RxState == HAL_UART_STATE_READY)
 8003ad8:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
 8003adc:	2b20      	cmp	r3, #32
 8003ade:	d120      	bne.n	8003b22 <HAL_UART_Receive_IT+0x4a>
    if ((pData == NULL) || (Size == 0U))
 8003ae0:	b1e9      	cbz	r1, 8003b1e <HAL_UART_Receive_IT+0x46>
 8003ae2:	b1e2      	cbz	r2, 8003b1e <HAL_UART_Receive_IT+0x46>
    __HAL_LOCK(huart);
 8003ae4:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 8003ae8:	2b01      	cmp	r3, #1
 8003aea:	d01a      	beq.n	8003b22 <HAL_UART_Receive_IT+0x4a>
{
 8003aec:	b430      	push	{r4, r5}
    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8003aee:	4b0e      	ldr	r3, [pc, #56]	; (8003b28 <HAL_UART_Receive_IT+0x50>)
 8003af0:	6804      	ldr	r4, [r0, #0]
    __HAL_LOCK(huart);
 8003af2:	2501      	movs	r5, #1
 8003af4:	f880 5080 	strb.w	r5, [r0, #128]	; 0x80
    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8003af8:	429c      	cmp	r4, r3
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003afa:	f04f 0500 	mov.w	r5, #0
 8003afe:	66c5      	str	r5, [r0, #108]	; 0x6c
    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8003b00:	d00a      	beq.n	8003b18 <HAL_UART_Receive_IT+0x40>
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003b02:	6863      	ldr	r3, [r4, #4]
 8003b04:	021b      	lsls	r3, r3, #8
 8003b06:	d507      	bpl.n	8003b18 <HAL_UART_Receive_IT+0x40>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b08:	e854 3f00 	ldrex	r3, [r4]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003b0c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b10:	e844 3500 	strex	r5, r3, [r4]
 8003b14:	2d00      	cmp	r5, #0
 8003b16:	d1f7      	bne.n	8003b08 <HAL_UART_Receive_IT+0x30>
}
 8003b18:	bc30      	pop	{r4, r5}
    return (UART_Start_Receive_IT(huart, pData, Size));
 8003b1a:	f7ff bf2d 	b.w	8003978 <UART_Start_Receive_IT>
      return HAL_ERROR;
 8003b1e:	2001      	movs	r0, #1
 8003b20:	4770      	bx	lr
    return HAL_BUSY;
 8003b22:	2002      	movs	r0, #2
}
 8003b24:	4770      	bx	lr
 8003b26:	bf00      	nop
 8003b28:	40008000 	.word	0x40008000

08003b2c <UARTEx_SetNbDataToProcess.part.0>:
  }
  else
  {
    rx_fifo_depth = RX_FIFO_DEPTH;
    tx_fifo_depth = TX_FIFO_DEPTH;
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8003b2c:	6803      	ldr	r3, [r0, #0]
 8003b2e:	6899      	ldr	r1, [r3, #8]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8003b30:	689b      	ldr	r3, [r3, #8]
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
 8003b32:	b430      	push	{r4, r5}
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8003b34:	ea4f 7c53 	mov.w	ip, r3, lsr #29
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003b38:	4d0a      	ldr	r5, [pc, #40]	; (8003b64 <UARTEx_SetNbDataToProcess.part.0+0x38>)
                               (uint16_t)denominator[tx_fifo_threshold];
 8003b3a:	4c0b      	ldr	r4, [pc, #44]	; (8003b68 <UARTEx_SetNbDataToProcess.part.0+0x3c>)
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003b3c:	f815 200c 	ldrb.w	r2, [r5, ip]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003b40:	f3c1 6142 	ubfx	r1, r1, #25, #3
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003b44:	00d2      	lsls	r2, r2, #3
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003b46:	5c6b      	ldrb	r3, [r5, r1]
                               (uint16_t)denominator[tx_fifo_threshold];
 8003b48:	f814 500c 	ldrb.w	r5, [r4, ip]
                               (uint16_t)denominator[rx_fifo_threshold];
 8003b4c:	5c61      	ldrb	r1, [r4, r1]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003b4e:	fbb2 f2f5 	udiv	r2, r2, r5
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003b52:	00db      	lsls	r3, r3, #3
  }
}
 8003b54:	bc30      	pop	{r4, r5}
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003b56:	fbb3 f3f1 	udiv	r3, r3, r1
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003b5a:	f8a0 206a 	strh.w	r2, [r0, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003b5e:	f8a0 3068 	strh.w	r3, [r0, #104]	; 0x68
}
 8003b62:	4770      	bx	lr
 8003b64:	08003d44 	.word	0x08003d44
 8003b68:	08003d3c 	.word	0x08003d3c

08003b6c <HAL_UARTEx_WakeupCallback>:
}
 8003b6c:	4770      	bx	lr
 8003b6e:	bf00      	nop

08003b70 <HAL_UARTEx_RxFifoFullCallback>:
 8003b70:	4770      	bx	lr
 8003b72:	bf00      	nop

08003b74 <HAL_UARTEx_TxFifoEmptyCallback>:
 8003b74:	4770      	bx	lr
 8003b76:	bf00      	nop

08003b78 <HAL_UARTEx_DisableFifoMode>:
  __HAL_LOCK(huart);
 8003b78:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 8003b7c:	2b01      	cmp	r3, #1
 8003b7e:	d017      	beq.n	8003bb0 <HAL_UARTEx_DisableFifoMode+0x38>
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003b80:	6802      	ldr	r2, [r0, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8003b82:	2324      	movs	r3, #36	; 0x24
{
 8003b84:	b410      	push	{r4}
  huart->gState = HAL_UART_STATE_BUSY;
 8003b86:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003b8a:	6811      	ldr	r1, [r2, #0]
  __HAL_UART_DISABLE(huart);
 8003b8c:	6814      	ldr	r4, [r2, #0]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8003b8e:	2300      	movs	r3, #0
  __HAL_UART_DISABLE(huart);
 8003b90:	f024 0401 	bic.w	r4, r4, #1
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8003b94:	f021 5100 	bic.w	r1, r1, #536870912	; 0x20000000
  __HAL_UART_DISABLE(huart);
 8003b98:	6014      	str	r4, [r2, #0]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8003b9a:	6643      	str	r3, [r0, #100]	; 0x64
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003b9c:	6011      	str	r1, [r2, #0]
  __HAL_UNLOCK(huart);
 8003b9e:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  huart->gState = HAL_UART_STATE_READY;
 8003ba2:	2220      	movs	r2, #32
 8003ba4:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
}
 8003ba8:	f85d 4b04 	ldr.w	r4, [sp], #4
  return HAL_OK;
 8003bac:	4618      	mov	r0, r3
}
 8003bae:	4770      	bx	lr
  __HAL_LOCK(huart);
 8003bb0:	2002      	movs	r0, #2
}
 8003bb2:	4770      	bx	lr

08003bb4 <HAL_UARTEx_SetTxFifoThreshold>:
{
 8003bb4:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(huart);
 8003bb6:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 8003bba:	2b01      	cmp	r3, #1
 8003bbc:	d022      	beq.n	8003c04 <HAL_UARTEx_SetTxFifoThreshold+0x50>
 8003bbe:	2201      	movs	r2, #1
 8003bc0:	f880 2080 	strb.w	r2, [r0, #128]	; 0x80
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003bc4:	6803      	ldr	r3, [r0, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8003bc6:	2224      	movs	r2, #36	; 0x24
 8003bc8:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003bcc:	681d      	ldr	r5, [r3, #0]
  __HAL_UART_DISABLE(huart);
 8003bce:	681a      	ldr	r2, [r3, #0]
 8003bd0:	f022 0201 	bic.w	r2, r2, #1
 8003bd4:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8003bd6:	689a      	ldr	r2, [r3, #8]
 8003bd8:	f022 4260 	bic.w	r2, r2, #3758096384	; 0xe0000000
 8003bdc:	4311      	orrs	r1, r2
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8003bde:	6e42      	ldr	r2, [r0, #100]	; 0x64
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8003be0:	6099      	str	r1, [r3, #8]
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8003be2:	4604      	mov	r4, r0
 8003be4:	b152      	cbz	r2, 8003bfc <HAL_UARTEx_SetTxFifoThreshold+0x48>
 8003be6:	f7ff ffa1 	bl	8003b2c <UARTEx_SetNbDataToProcess.part.0>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003bea:	6803      	ldr	r3, [r0, #0]
 8003bec:	601d      	str	r5, [r3, #0]
  __HAL_UNLOCK(huart);
 8003bee:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 8003bf0:	2220      	movs	r2, #32
  __HAL_UNLOCK(huart);
 8003bf2:	f884 0080 	strb.w	r0, [r4, #128]	; 0x80
  huart->gState = HAL_UART_STATE_READY;
 8003bf6:	f8c4 2084 	str.w	r2, [r4, #132]	; 0x84
}
 8003bfa:	bd38      	pop	{r3, r4, r5, pc}
    huart->NbRxDataToProcess = 1U;
 8003bfc:	f04f 1201 	mov.w	r2, #65537	; 0x10001
 8003c00:	6682      	str	r2, [r0, #104]	; 0x68
 8003c02:	e7f3      	b.n	8003bec <HAL_UARTEx_SetTxFifoThreshold+0x38>
  __HAL_LOCK(huart);
 8003c04:	2002      	movs	r0, #2
}
 8003c06:	bd38      	pop	{r3, r4, r5, pc}

08003c08 <HAL_UARTEx_SetRxFifoThreshold>:
{
 8003c08:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(huart);
 8003c0a:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 8003c0e:	2b01      	cmp	r3, #1
 8003c10:	d022      	beq.n	8003c58 <HAL_UARTEx_SetRxFifoThreshold+0x50>
 8003c12:	2201      	movs	r2, #1
 8003c14:	f880 2080 	strb.w	r2, [r0, #128]	; 0x80
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003c18:	6803      	ldr	r3, [r0, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8003c1a:	2224      	movs	r2, #36	; 0x24
 8003c1c:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003c20:	681d      	ldr	r5, [r3, #0]
  __HAL_UART_DISABLE(huart);
 8003c22:	681a      	ldr	r2, [r3, #0]
 8003c24:	f022 0201 	bic.w	r2, r2, #1
 8003c28:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8003c2a:	689a      	ldr	r2, [r3, #8]
 8003c2c:	f022 6260 	bic.w	r2, r2, #234881024	; 0xe000000
 8003c30:	4311      	orrs	r1, r2
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8003c32:	6e42      	ldr	r2, [r0, #100]	; 0x64
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8003c34:	6099      	str	r1, [r3, #8]
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8003c36:	4604      	mov	r4, r0
 8003c38:	b152      	cbz	r2, 8003c50 <HAL_UARTEx_SetRxFifoThreshold+0x48>
 8003c3a:	f7ff ff77 	bl	8003b2c <UARTEx_SetNbDataToProcess.part.0>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003c3e:	6803      	ldr	r3, [r0, #0]
 8003c40:	601d      	str	r5, [r3, #0]
  __HAL_UNLOCK(huart);
 8003c42:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 8003c44:	2220      	movs	r2, #32
  __HAL_UNLOCK(huart);
 8003c46:	f884 0080 	strb.w	r0, [r4, #128]	; 0x80
  huart->gState = HAL_UART_STATE_READY;
 8003c4a:	f8c4 2084 	str.w	r2, [r4, #132]	; 0x84
}
 8003c4e:	bd38      	pop	{r3, r4, r5, pc}
    huart->NbRxDataToProcess = 1U;
 8003c50:	f04f 1201 	mov.w	r2, #65537	; 0x10001
 8003c54:	6682      	str	r2, [r0, #104]	; 0x68
 8003c56:	e7f3      	b.n	8003c40 <HAL_UARTEx_SetRxFifoThreshold+0x38>
  __HAL_LOCK(huart);
 8003c58:	2002      	movs	r0, #2
}
 8003c5a:	bd38      	pop	{r3, r4, r5, pc}

08003c5c <__libc_init_array>:
 8003c5c:	b570      	push	{r4, r5, r6, lr}
 8003c5e:	4d0d      	ldr	r5, [pc, #52]	; (8003c94 <__libc_init_array+0x38>)
 8003c60:	4c0d      	ldr	r4, [pc, #52]	; (8003c98 <__libc_init_array+0x3c>)
 8003c62:	1b64      	subs	r4, r4, r5
 8003c64:	10a4      	asrs	r4, r4, #2
 8003c66:	2600      	movs	r6, #0
 8003c68:	42a6      	cmp	r6, r4
 8003c6a:	d109      	bne.n	8003c80 <__libc_init_array+0x24>
 8003c6c:	4d0b      	ldr	r5, [pc, #44]	; (8003c9c <__libc_init_array+0x40>)
 8003c6e:	4c0c      	ldr	r4, [pc, #48]	; (8003ca0 <__libc_init_array+0x44>)
 8003c70:	f000 f82e 	bl	8003cd0 <_init>
 8003c74:	1b64      	subs	r4, r4, r5
 8003c76:	10a4      	asrs	r4, r4, #2
 8003c78:	2600      	movs	r6, #0
 8003c7a:	42a6      	cmp	r6, r4
 8003c7c:	d105      	bne.n	8003c8a <__libc_init_array+0x2e>
 8003c7e:	bd70      	pop	{r4, r5, r6, pc}
 8003c80:	f855 3b04 	ldr.w	r3, [r5], #4
 8003c84:	4798      	blx	r3
 8003c86:	3601      	adds	r6, #1
 8003c88:	e7ee      	b.n	8003c68 <__libc_init_array+0xc>
 8003c8a:	f855 3b04 	ldr.w	r3, [r5], #4
 8003c8e:	4798      	blx	r3
 8003c90:	3601      	adds	r6, #1
 8003c92:	e7f2      	b.n	8003c7a <__libc_init_array+0x1e>
 8003c94:	08003d54 	.word	0x08003d54
 8003c98:	08003d54 	.word	0x08003d54
 8003c9c:	08003d54 	.word	0x08003d54
 8003ca0:	08003d58 	.word	0x08003d58

08003ca4 <memcpy>:
 8003ca4:	440a      	add	r2, r1
 8003ca6:	4291      	cmp	r1, r2
 8003ca8:	f100 33ff 	add.w	r3, r0, #4294967295
 8003cac:	d100      	bne.n	8003cb0 <memcpy+0xc>
 8003cae:	4770      	bx	lr
 8003cb0:	b510      	push	{r4, lr}
 8003cb2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003cb6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003cba:	4291      	cmp	r1, r2
 8003cbc:	d1f9      	bne.n	8003cb2 <memcpy+0xe>
 8003cbe:	bd10      	pop	{r4, pc}

08003cc0 <memset>:
 8003cc0:	4402      	add	r2, r0
 8003cc2:	4603      	mov	r3, r0
 8003cc4:	4293      	cmp	r3, r2
 8003cc6:	d100      	bne.n	8003cca <memset+0xa>
 8003cc8:	4770      	bx	lr
 8003cca:	f803 1b01 	strb.w	r1, [r3], #1
 8003cce:	e7f9      	b.n	8003cc4 <memset+0x4>

08003cd0 <_init>:
 8003cd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003cd2:	bf00      	nop
 8003cd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003cd6:	bc08      	pop	{r3}
 8003cd8:	469e      	mov	lr, r3
 8003cda:	4770      	bx	lr

08003cdc <_fini>:
 8003cdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003cde:	bf00      	nop
 8003ce0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003ce2:	bc08      	pop	{r3}
 8003ce4:	469e      	mov	lr, r3
 8003ce6:	4770      	bx	lr
