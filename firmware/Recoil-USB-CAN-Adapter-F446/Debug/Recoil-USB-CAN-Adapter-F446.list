
Recoil-USB-CAN-Adapter-F446.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000045a0  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08004764  08004764  00014764  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800477c  0800477c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  0800477c  0800477c  0001477c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004784  08004784  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004784  08004784  00014784  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004788  08004788  00014788  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  0800478c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000168  2000000c  08004798  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000174  08004798  00020174  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001147b  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002383  00000000  00000000  000314b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e38  00000000  00000000  00033840  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d60  00000000  00000000  00034678  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022f6c  00000000  00000000  000353d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001154e  00000000  00000000  00058344  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d3510  00000000  00000000  00069892  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0013cda2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003c00  00000000  00000000  0013cdf4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	2000000c 	.word	0x2000000c
 80001e0:	00000000 	.word	0x00000000
 80001e4:	0800474c 	.word	0x0800474c

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000010 	.word	0x20000010
 8000200:	0800474c 	.word	0x0800474c

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b974 	b.w	8000504 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9d08      	ldr	r5, [sp, #32]
 800023a:	4604      	mov	r4, r0
 800023c:	468e      	mov	lr, r1
 800023e:	2b00      	cmp	r3, #0
 8000240:	d14d      	bne.n	80002de <__udivmoddi4+0xaa>
 8000242:	428a      	cmp	r2, r1
 8000244:	4694      	mov	ip, r2
 8000246:	d969      	bls.n	800031c <__udivmoddi4+0xe8>
 8000248:	fab2 f282 	clz	r2, r2
 800024c:	b152      	cbz	r2, 8000264 <__udivmoddi4+0x30>
 800024e:	fa01 f302 	lsl.w	r3, r1, r2
 8000252:	f1c2 0120 	rsb	r1, r2, #32
 8000256:	fa20 f101 	lsr.w	r1, r0, r1
 800025a:	fa0c fc02 	lsl.w	ip, ip, r2
 800025e:	ea41 0e03 	orr.w	lr, r1, r3
 8000262:	4094      	lsls	r4, r2
 8000264:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000268:	0c21      	lsrs	r1, r4, #16
 800026a:	fbbe f6f8 	udiv	r6, lr, r8
 800026e:	fa1f f78c 	uxth.w	r7, ip
 8000272:	fb08 e316 	mls	r3, r8, r6, lr
 8000276:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800027a:	fb06 f107 	mul.w	r1, r6, r7
 800027e:	4299      	cmp	r1, r3
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x64>
 8000282:	eb1c 0303 	adds.w	r3, ip, r3
 8000286:	f106 30ff 	add.w	r0, r6, #4294967295
 800028a:	f080 811f 	bcs.w	80004cc <__udivmoddi4+0x298>
 800028e:	4299      	cmp	r1, r3
 8000290:	f240 811c 	bls.w	80004cc <__udivmoddi4+0x298>
 8000294:	3e02      	subs	r6, #2
 8000296:	4463      	add	r3, ip
 8000298:	1a5b      	subs	r3, r3, r1
 800029a:	b2a4      	uxth	r4, r4
 800029c:	fbb3 f0f8 	udiv	r0, r3, r8
 80002a0:	fb08 3310 	mls	r3, r8, r0, r3
 80002a4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a8:	fb00 f707 	mul.w	r7, r0, r7
 80002ac:	42a7      	cmp	r7, r4
 80002ae:	d90a      	bls.n	80002c6 <__udivmoddi4+0x92>
 80002b0:	eb1c 0404 	adds.w	r4, ip, r4
 80002b4:	f100 33ff 	add.w	r3, r0, #4294967295
 80002b8:	f080 810a 	bcs.w	80004d0 <__udivmoddi4+0x29c>
 80002bc:	42a7      	cmp	r7, r4
 80002be:	f240 8107 	bls.w	80004d0 <__udivmoddi4+0x29c>
 80002c2:	4464      	add	r4, ip
 80002c4:	3802      	subs	r0, #2
 80002c6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002ca:	1be4      	subs	r4, r4, r7
 80002cc:	2600      	movs	r6, #0
 80002ce:	b11d      	cbz	r5, 80002d8 <__udivmoddi4+0xa4>
 80002d0:	40d4      	lsrs	r4, r2
 80002d2:	2300      	movs	r3, #0
 80002d4:	e9c5 4300 	strd	r4, r3, [r5]
 80002d8:	4631      	mov	r1, r6
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	428b      	cmp	r3, r1
 80002e0:	d909      	bls.n	80002f6 <__udivmoddi4+0xc2>
 80002e2:	2d00      	cmp	r5, #0
 80002e4:	f000 80ef 	beq.w	80004c6 <__udivmoddi4+0x292>
 80002e8:	2600      	movs	r6, #0
 80002ea:	e9c5 0100 	strd	r0, r1, [r5]
 80002ee:	4630      	mov	r0, r6
 80002f0:	4631      	mov	r1, r6
 80002f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f6:	fab3 f683 	clz	r6, r3
 80002fa:	2e00      	cmp	r6, #0
 80002fc:	d14a      	bne.n	8000394 <__udivmoddi4+0x160>
 80002fe:	428b      	cmp	r3, r1
 8000300:	d302      	bcc.n	8000308 <__udivmoddi4+0xd4>
 8000302:	4282      	cmp	r2, r0
 8000304:	f200 80f9 	bhi.w	80004fa <__udivmoddi4+0x2c6>
 8000308:	1a84      	subs	r4, r0, r2
 800030a:	eb61 0303 	sbc.w	r3, r1, r3
 800030e:	2001      	movs	r0, #1
 8000310:	469e      	mov	lr, r3
 8000312:	2d00      	cmp	r5, #0
 8000314:	d0e0      	beq.n	80002d8 <__udivmoddi4+0xa4>
 8000316:	e9c5 4e00 	strd	r4, lr, [r5]
 800031a:	e7dd      	b.n	80002d8 <__udivmoddi4+0xa4>
 800031c:	b902      	cbnz	r2, 8000320 <__udivmoddi4+0xec>
 800031e:	deff      	udf	#255	; 0xff
 8000320:	fab2 f282 	clz	r2, r2
 8000324:	2a00      	cmp	r2, #0
 8000326:	f040 8092 	bne.w	800044e <__udivmoddi4+0x21a>
 800032a:	eba1 010c 	sub.w	r1, r1, ip
 800032e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000332:	fa1f fe8c 	uxth.w	lr, ip
 8000336:	2601      	movs	r6, #1
 8000338:	0c20      	lsrs	r0, r4, #16
 800033a:	fbb1 f3f7 	udiv	r3, r1, r7
 800033e:	fb07 1113 	mls	r1, r7, r3, r1
 8000342:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000346:	fb0e f003 	mul.w	r0, lr, r3
 800034a:	4288      	cmp	r0, r1
 800034c:	d908      	bls.n	8000360 <__udivmoddi4+0x12c>
 800034e:	eb1c 0101 	adds.w	r1, ip, r1
 8000352:	f103 38ff 	add.w	r8, r3, #4294967295
 8000356:	d202      	bcs.n	800035e <__udivmoddi4+0x12a>
 8000358:	4288      	cmp	r0, r1
 800035a:	f200 80cb 	bhi.w	80004f4 <__udivmoddi4+0x2c0>
 800035e:	4643      	mov	r3, r8
 8000360:	1a09      	subs	r1, r1, r0
 8000362:	b2a4      	uxth	r4, r4
 8000364:	fbb1 f0f7 	udiv	r0, r1, r7
 8000368:	fb07 1110 	mls	r1, r7, r0, r1
 800036c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000370:	fb0e fe00 	mul.w	lr, lr, r0
 8000374:	45a6      	cmp	lr, r4
 8000376:	d908      	bls.n	800038a <__udivmoddi4+0x156>
 8000378:	eb1c 0404 	adds.w	r4, ip, r4
 800037c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000380:	d202      	bcs.n	8000388 <__udivmoddi4+0x154>
 8000382:	45a6      	cmp	lr, r4
 8000384:	f200 80bb 	bhi.w	80004fe <__udivmoddi4+0x2ca>
 8000388:	4608      	mov	r0, r1
 800038a:	eba4 040e 	sub.w	r4, r4, lr
 800038e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000392:	e79c      	b.n	80002ce <__udivmoddi4+0x9a>
 8000394:	f1c6 0720 	rsb	r7, r6, #32
 8000398:	40b3      	lsls	r3, r6
 800039a:	fa22 fc07 	lsr.w	ip, r2, r7
 800039e:	ea4c 0c03 	orr.w	ip, ip, r3
 80003a2:	fa20 f407 	lsr.w	r4, r0, r7
 80003a6:	fa01 f306 	lsl.w	r3, r1, r6
 80003aa:	431c      	orrs	r4, r3
 80003ac:	40f9      	lsrs	r1, r7
 80003ae:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003b2:	fa00 f306 	lsl.w	r3, r0, r6
 80003b6:	fbb1 f8f9 	udiv	r8, r1, r9
 80003ba:	0c20      	lsrs	r0, r4, #16
 80003bc:	fa1f fe8c 	uxth.w	lr, ip
 80003c0:	fb09 1118 	mls	r1, r9, r8, r1
 80003c4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c8:	fb08 f00e 	mul.w	r0, r8, lr
 80003cc:	4288      	cmp	r0, r1
 80003ce:	fa02 f206 	lsl.w	r2, r2, r6
 80003d2:	d90b      	bls.n	80003ec <__udivmoddi4+0x1b8>
 80003d4:	eb1c 0101 	adds.w	r1, ip, r1
 80003d8:	f108 3aff 	add.w	sl, r8, #4294967295
 80003dc:	f080 8088 	bcs.w	80004f0 <__udivmoddi4+0x2bc>
 80003e0:	4288      	cmp	r0, r1
 80003e2:	f240 8085 	bls.w	80004f0 <__udivmoddi4+0x2bc>
 80003e6:	f1a8 0802 	sub.w	r8, r8, #2
 80003ea:	4461      	add	r1, ip
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f9 	udiv	r0, r1, r9
 80003f4:	fb09 1110 	mls	r1, r9, r0, r1
 80003f8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003fc:	fb00 fe0e 	mul.w	lr, r0, lr
 8000400:	458e      	cmp	lr, r1
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x1e2>
 8000404:	eb1c 0101 	adds.w	r1, ip, r1
 8000408:	f100 34ff 	add.w	r4, r0, #4294967295
 800040c:	d26c      	bcs.n	80004e8 <__udivmoddi4+0x2b4>
 800040e:	458e      	cmp	lr, r1
 8000410:	d96a      	bls.n	80004e8 <__udivmoddi4+0x2b4>
 8000412:	3802      	subs	r0, #2
 8000414:	4461      	add	r1, ip
 8000416:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800041a:	fba0 9402 	umull	r9, r4, r0, r2
 800041e:	eba1 010e 	sub.w	r1, r1, lr
 8000422:	42a1      	cmp	r1, r4
 8000424:	46c8      	mov	r8, r9
 8000426:	46a6      	mov	lr, r4
 8000428:	d356      	bcc.n	80004d8 <__udivmoddi4+0x2a4>
 800042a:	d053      	beq.n	80004d4 <__udivmoddi4+0x2a0>
 800042c:	b15d      	cbz	r5, 8000446 <__udivmoddi4+0x212>
 800042e:	ebb3 0208 	subs.w	r2, r3, r8
 8000432:	eb61 010e 	sbc.w	r1, r1, lr
 8000436:	fa01 f707 	lsl.w	r7, r1, r7
 800043a:	fa22 f306 	lsr.w	r3, r2, r6
 800043e:	40f1      	lsrs	r1, r6
 8000440:	431f      	orrs	r7, r3
 8000442:	e9c5 7100 	strd	r7, r1, [r5]
 8000446:	2600      	movs	r6, #0
 8000448:	4631      	mov	r1, r6
 800044a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800044e:	f1c2 0320 	rsb	r3, r2, #32
 8000452:	40d8      	lsrs	r0, r3
 8000454:	fa0c fc02 	lsl.w	ip, ip, r2
 8000458:	fa21 f303 	lsr.w	r3, r1, r3
 800045c:	4091      	lsls	r1, r2
 800045e:	4301      	orrs	r1, r0
 8000460:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000464:	fa1f fe8c 	uxth.w	lr, ip
 8000468:	fbb3 f0f7 	udiv	r0, r3, r7
 800046c:	fb07 3610 	mls	r6, r7, r0, r3
 8000470:	0c0b      	lsrs	r3, r1, #16
 8000472:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000476:	fb00 f60e 	mul.w	r6, r0, lr
 800047a:	429e      	cmp	r6, r3
 800047c:	fa04 f402 	lsl.w	r4, r4, r2
 8000480:	d908      	bls.n	8000494 <__udivmoddi4+0x260>
 8000482:	eb1c 0303 	adds.w	r3, ip, r3
 8000486:	f100 38ff 	add.w	r8, r0, #4294967295
 800048a:	d22f      	bcs.n	80004ec <__udivmoddi4+0x2b8>
 800048c:	429e      	cmp	r6, r3
 800048e:	d92d      	bls.n	80004ec <__udivmoddi4+0x2b8>
 8000490:	3802      	subs	r0, #2
 8000492:	4463      	add	r3, ip
 8000494:	1b9b      	subs	r3, r3, r6
 8000496:	b289      	uxth	r1, r1
 8000498:	fbb3 f6f7 	udiv	r6, r3, r7
 800049c:	fb07 3316 	mls	r3, r7, r6, r3
 80004a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004a4:	fb06 f30e 	mul.w	r3, r6, lr
 80004a8:	428b      	cmp	r3, r1
 80004aa:	d908      	bls.n	80004be <__udivmoddi4+0x28a>
 80004ac:	eb1c 0101 	adds.w	r1, ip, r1
 80004b0:	f106 38ff 	add.w	r8, r6, #4294967295
 80004b4:	d216      	bcs.n	80004e4 <__udivmoddi4+0x2b0>
 80004b6:	428b      	cmp	r3, r1
 80004b8:	d914      	bls.n	80004e4 <__udivmoddi4+0x2b0>
 80004ba:	3e02      	subs	r6, #2
 80004bc:	4461      	add	r1, ip
 80004be:	1ac9      	subs	r1, r1, r3
 80004c0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004c4:	e738      	b.n	8000338 <__udivmoddi4+0x104>
 80004c6:	462e      	mov	r6, r5
 80004c8:	4628      	mov	r0, r5
 80004ca:	e705      	b.n	80002d8 <__udivmoddi4+0xa4>
 80004cc:	4606      	mov	r6, r0
 80004ce:	e6e3      	b.n	8000298 <__udivmoddi4+0x64>
 80004d0:	4618      	mov	r0, r3
 80004d2:	e6f8      	b.n	80002c6 <__udivmoddi4+0x92>
 80004d4:	454b      	cmp	r3, r9
 80004d6:	d2a9      	bcs.n	800042c <__udivmoddi4+0x1f8>
 80004d8:	ebb9 0802 	subs.w	r8, r9, r2
 80004dc:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004e0:	3801      	subs	r0, #1
 80004e2:	e7a3      	b.n	800042c <__udivmoddi4+0x1f8>
 80004e4:	4646      	mov	r6, r8
 80004e6:	e7ea      	b.n	80004be <__udivmoddi4+0x28a>
 80004e8:	4620      	mov	r0, r4
 80004ea:	e794      	b.n	8000416 <__udivmoddi4+0x1e2>
 80004ec:	4640      	mov	r0, r8
 80004ee:	e7d1      	b.n	8000494 <__udivmoddi4+0x260>
 80004f0:	46d0      	mov	r8, sl
 80004f2:	e77b      	b.n	80003ec <__udivmoddi4+0x1b8>
 80004f4:	3b02      	subs	r3, #2
 80004f6:	4461      	add	r1, ip
 80004f8:	e732      	b.n	8000360 <__udivmoddi4+0x12c>
 80004fa:	4630      	mov	r0, r6
 80004fc:	e709      	b.n	8000312 <__udivmoddi4+0xde>
 80004fe:	4464      	add	r4, ip
 8000500:	3802      	subs	r0, #2
 8000502:	e742      	b.n	800038a <__udivmoddi4+0x156>

08000504 <__aeabi_idiv0>:
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop

08000508 <HAL_CAN_RxFifo0MsgPendingCallback>:
uint8_t uart_tx_buffer[64];

/**
 * CAN receive interrupt routine.
 */
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 8000508:	b580      	push	{r7, lr}
 800050a:	b088      	sub	sp, #32
 800050c:	af00      	add	r7, sp, #0
 800050e:	6078      	str	r0, [r7, #4]
  CAN_Frame rx_frame;

  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8000510:	2201      	movs	r2, #1
 8000512:	2120      	movs	r1, #32
 8000514:	482b      	ldr	r0, [pc, #172]	; (80005c4 <HAL_CAN_RxFifo0MsgPendingCallback+0xbc>)
 8000516:	f001 fe81 	bl	800221c <HAL_GPIO_WritePin>
  CAN_getRxFrame(&hcan1, &rx_frame);
 800051a:	f107 030c 	add.w	r3, r7, #12
 800051e:	4619      	mov	r1, r3
 8000520:	4829      	ldr	r0, [pc, #164]	; (80005c8 <HAL_CAN_RxFifo0MsgPendingCallback+0xc0>)
 8000522:	f000 fa8e 	bl	8000a42 <CAN_getRxFrame>

  uart_tx_buffer[0] = PYTHONCAN_START_OF_FRAME;
 8000526:	4b29      	ldr	r3, [pc, #164]	; (80005cc <HAL_CAN_RxFifo0MsgPendingCallback+0xc4>)
 8000528:	22aa      	movs	r2, #170	; 0xaa
 800052a:	701a      	strb	r2, [r3, #0]

  uart_tx_buffer[1] = 0x00U;  // Timestamp
 800052c:	4b27      	ldr	r3, [pc, #156]	; (80005cc <HAL_CAN_RxFifo0MsgPendingCallback+0xc4>)
 800052e:	2200      	movs	r2, #0
 8000530:	705a      	strb	r2, [r3, #1]
  uart_tx_buffer[2] = 0x00U;
 8000532:	4b26      	ldr	r3, [pc, #152]	; (80005cc <HAL_CAN_RxFifo0MsgPendingCallback+0xc4>)
 8000534:	2200      	movs	r2, #0
 8000536:	709a      	strb	r2, [r3, #2]
  uart_tx_buffer[3] = 0x00U;
 8000538:	4b24      	ldr	r3, [pc, #144]	; (80005cc <HAL_CAN_RxFifo0MsgPendingCallback+0xc4>)
 800053a:	2200      	movs	r2, #0
 800053c:	70da      	strb	r2, [r3, #3]
  uart_tx_buffer[4] = 0x00U;
 800053e:	4b23      	ldr	r3, [pc, #140]	; (80005cc <HAL_CAN_RxFifo0MsgPendingCallback+0xc4>)
 8000540:	2200      	movs	r2, #0
 8000542:	711a      	strb	r2, [r3, #4]

  uart_tx_buffer[5] = rx_frame.size;  // DLC
 8000544:	8a7b      	ldrh	r3, [r7, #18]
 8000546:	b2da      	uxtb	r2, r3
 8000548:	4b20      	ldr	r3, [pc, #128]	; (80005cc <HAL_CAN_RxFifo0MsgPendingCallback+0xc4>)
 800054a:	715a      	strb	r2, [r3, #5]

  uart_tx_buffer[6] = READ_BITS(rx_frame.id, 0xFFU);  // ID
 800054c:	68fb      	ldr	r3, [r7, #12]
 800054e:	b2da      	uxtb	r2, r3
 8000550:	4b1e      	ldr	r3, [pc, #120]	; (80005cc <HAL_CAN_RxFifo0MsgPendingCallback+0xc4>)
 8000552:	719a      	strb	r2, [r3, #6]
  uart_tx_buffer[7] = READ_BITS(rx_frame.id >> 8U, 0xFFU);
 8000554:	68fb      	ldr	r3, [r7, #12]
 8000556:	0a1b      	lsrs	r3, r3, #8
 8000558:	b2da      	uxtb	r2, r3
 800055a:	4b1c      	ldr	r3, [pc, #112]	; (80005cc <HAL_CAN_RxFifo0MsgPendingCallback+0xc4>)
 800055c:	71da      	strb	r2, [r3, #7]
  uart_tx_buffer[8] = READ_BITS(rx_frame.id >> 16U, 0xFFU);
 800055e:	68fb      	ldr	r3, [r7, #12]
 8000560:	0c1b      	lsrs	r3, r3, #16
 8000562:	b2da      	uxtb	r2, r3
 8000564:	4b19      	ldr	r3, [pc, #100]	; (80005cc <HAL_CAN_RxFifo0MsgPendingCallback+0xc4>)
 8000566:	721a      	strb	r2, [r3, #8]
  uart_tx_buffer[9] = READ_BITS(rx_frame.id >> 24U, 0xFFU);
 8000568:	68fb      	ldr	r3, [r7, #12]
 800056a:	0e1b      	lsrs	r3, r3, #24
 800056c:	b2da      	uxtb	r2, r3
 800056e:	4b17      	ldr	r3, [pc, #92]	; (80005cc <HAL_CAN_RxFifo0MsgPendingCallback+0xc4>)
 8000570:	725a      	strb	r2, [r3, #9]

  for (uint16_t i=0; i<rx_frame.size; i+=1) {
 8000572:	2300      	movs	r3, #0
 8000574:	83fb      	strh	r3, [r7, #30]
 8000576:	e00b      	b.n	8000590 <HAL_CAN_RxFifo0MsgPendingCallback+0x88>
    uart_tx_buffer[10+i] = rx_frame.data[i];
 8000578:	8bfa      	ldrh	r2, [r7, #30]
 800057a:	8bfb      	ldrh	r3, [r7, #30]
 800057c:	330a      	adds	r3, #10
 800057e:	3220      	adds	r2, #32
 8000580:	443a      	add	r2, r7
 8000582:	f812 1c0c 	ldrb.w	r1, [r2, #-12]
 8000586:	4a11      	ldr	r2, [pc, #68]	; (80005cc <HAL_CAN_RxFifo0MsgPendingCallback+0xc4>)
 8000588:	54d1      	strb	r1, [r2, r3]
  for (uint16_t i=0; i<rx_frame.size; i+=1) {
 800058a:	8bfb      	ldrh	r3, [r7, #30]
 800058c:	3301      	adds	r3, #1
 800058e:	83fb      	strh	r3, [r7, #30]
 8000590:	8a7b      	ldrh	r3, [r7, #18]
 8000592:	8bfa      	ldrh	r2, [r7, #30]
 8000594:	429a      	cmp	r2, r3
 8000596:	d3ef      	bcc.n	8000578 <HAL_CAN_RxFifo0MsgPendingCallback+0x70>
  }

  uart_tx_buffer[10+rx_frame.size] = PYTHONCAN_END_OF_FRAME;
 8000598:	8a7b      	ldrh	r3, [r7, #18]
 800059a:	330a      	adds	r3, #10
 800059c:	4a0b      	ldr	r2, [pc, #44]	; (80005cc <HAL_CAN_RxFifo0MsgPendingCallback+0xc4>)
 800059e:	21bb      	movs	r1, #187	; 0xbb
 80005a0:	54d1      	strb	r1, [r2, r3]

  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 80005a2:	2200      	movs	r2, #0
 80005a4:	2120      	movs	r1, #32
 80005a6:	4807      	ldr	r0, [pc, #28]	; (80005c4 <HAL_CAN_RxFifo0MsgPendingCallback+0xbc>)
 80005a8:	f001 fe38 	bl	800221c <HAL_GPIO_WritePin>

  HAL_UART_Transmit_IT(&huart2, uart_tx_buffer, 11+rx_frame.size);
 80005ac:	8a7b      	ldrh	r3, [r7, #18]
 80005ae:	330b      	adds	r3, #11
 80005b0:	b29b      	uxth	r3, r3
 80005b2:	461a      	mov	r2, r3
 80005b4:	4905      	ldr	r1, [pc, #20]	; (80005cc <HAL_CAN_RxFifo0MsgPendingCallback+0xc4>)
 80005b6:	4806      	ldr	r0, [pc, #24]	; (80005d0 <HAL_CAN_RxFifo0MsgPendingCallback+0xc8>)
 80005b8:	f003 f87b 	bl	80036b2 <HAL_UART_Transmit_IT>
}
 80005bc:	bf00      	nop
 80005be:	3720      	adds	r7, #32
 80005c0:	46bd      	mov	sp, r7
 80005c2:	bd80      	pop	{r7, pc}
 80005c4:	40020000 	.word	0x40020000
 80005c8:	200000bc 	.word	0x200000bc
 80005cc:	2000007c 	.word	0x2000007c
 80005d0:	2000012c 	.word	0x2000012c

080005d4 <HAL_TIM_PeriodElapsedCallback>:
/**
 * When UART has not been transmitting for a while, we reset the receive interrupt handler.
 * This is to handle the case where UART is missing data, and we just drop that packet instead of
 * continue receiving the data forever.
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b082      	sub	sp, #8
 80005d8:	af00      	add	r7, sp, #0
 80005da:	6078      	str	r0, [r7, #4]
  HAL_UART_AbortReceive(&huart2);
 80005dc:	4808      	ldr	r0, [pc, #32]	; (8000600 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 80005de:	f003 f8dd 	bl	800379c <HAL_UART_AbortReceive>
//  HAL_CAN_AbortTxRequest(&hcan1, CAN_TX_MAILBOX0 | CAN_TX_MAILBOX1 | CAN_TX_MAILBOX2);
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 80005e2:	2200      	movs	r2, #0
 80005e4:	2120      	movs	r1, #32
 80005e6:	4807      	ldr	r0, [pc, #28]	; (8000604 <HAL_TIM_PeriodElapsedCallback+0x30>)
 80005e8:	f001 fe18 	bl	800221c <HAL_GPIO_WritePin>
  HAL_UART_Receive_IT(&huart2, uart_rx_buffer, 11);
 80005ec:	220b      	movs	r2, #11
 80005ee:	4906      	ldr	r1, [pc, #24]	; (8000608 <HAL_TIM_PeriodElapsedCallback+0x34>)
 80005f0:	4803      	ldr	r0, [pc, #12]	; (8000600 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 80005f2:	f003 f8a3 	bl	800373c <HAL_UART_Receive_IT>
}
 80005f6:	bf00      	nop
 80005f8:	3708      	adds	r7, #8
 80005fa:	46bd      	mov	sp, r7
 80005fc:	bd80      	pop	{r7, pc}
 80005fe:	bf00      	nop
 8000600:	2000012c 	.word	0x2000012c
 8000604:	40020000 	.word	0x40020000
 8000608:	20000038 	.word	0x20000038

0800060c <HAL_UART_RxCpltCallback>:

/**
 * UART receive interrupt routine.
 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 800060c:	b580      	push	{r7, lr}
 800060e:	b084      	sub	sp, #16
 8000610:	af00      	add	r7, sp, #0
 8000612:	6078      	str	r0, [r7, #4]
  __HAL_TIM_SET_COUNTER(&htim2, 0);
 8000614:	4b34      	ldr	r3, [pc, #208]	; (80006e8 <HAL_UART_RxCpltCallback+0xdc>)
 8000616:	681b      	ldr	r3, [r3, #0]
 8000618:	2200      	movs	r2, #0
 800061a:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 800061c:	2201      	movs	r2, #1
 800061e:	2120      	movs	r1, #32
 8000620:	4832      	ldr	r0, [pc, #200]	; (80006ec <HAL_UART_RxCpltCallback+0xe0>)
 8000622:	f001 fdfb 	bl	800221c <HAL_GPIO_WritePin>

  if (!uart_rx_data_pending) {
 8000626:	4b32      	ldr	r3, [pc, #200]	; (80006f0 <HAL_UART_RxCpltCallback+0xe4>)
 8000628:	781b      	ldrb	r3, [r3, #0]
 800062a:	2b00      	cmp	r3, #0
 800062c:	d140      	bne.n	80006b0 <HAL_UART_RxCpltCallback+0xa4>
    // if we are receiving the header section

    // check if the first byte is the correct Start of Frame
    uint8_t is_valid_frame = uart_rx_buffer[0] == 0xAAU;
 800062e:	4b31      	ldr	r3, [pc, #196]	; (80006f4 <HAL_UART_RxCpltCallback+0xe8>)
 8000630:	781b      	ldrb	r3, [r3, #0]
 8000632:	2baa      	cmp	r3, #170	; 0xaa
 8000634:	bf0c      	ite	eq
 8000636:	2301      	moveq	r3, #1
 8000638:	2300      	movne	r3, #0
 800063a:	b2db      	uxtb	r3, r3
 800063c:	73fb      	strb	r3, [r7, #15]
    if (!is_valid_frame) {
 800063e:	7bfb      	ldrb	r3, [r7, #15]
 8000640:	2b00      	cmp	r3, #0
 8000642:	d105      	bne.n	8000650 <HAL_UART_RxCpltCallback+0x44>
      // if not, discard and continue receiving
      HAL_UART_Receive_IT(&huart2, uart_rx_buffer, 11);
 8000644:	220b      	movs	r2, #11
 8000646:	492b      	ldr	r1, [pc, #172]	; (80006f4 <HAL_UART_RxCpltCallback+0xe8>)
 8000648:	482b      	ldr	r0, [pc, #172]	; (80006f8 <HAL_UART_RxCpltCallback+0xec>)
 800064a:	f003 f877 	bl	800373c <HAL_UART_Receive_IT>
      return;
 800064e:	e048      	b.n	80006e2 <HAL_UART_RxCpltCallback+0xd6>
    }

    // decode the header section
    can_tx_frame.id_type = CAN_ID_STANDARD;
 8000650:	4b2a      	ldr	r3, [pc, #168]	; (80006fc <HAL_UART_RxCpltCallback+0xf0>)
 8000652:	2200      	movs	r2, #0
 8000654:	711a      	strb	r2, [r3, #4]
    can_tx_frame.frame_type = CAN_FRAME_DATA;
 8000656:	4b29      	ldr	r3, [pc, #164]	; (80006fc <HAL_UART_RxCpltCallback+0xf0>)
 8000658:	2201      	movs	r2, #1
 800065a:	715a      	strb	r2, [r3, #5]
//    uint32_t timestamp = ((uart_rx_buffer[1])     // timestamp is not used
//        | (uart_rx_buffer[2] << 8U)
//        | (uart_rx_buffer[3] << 16U)
//        | (uart_rx_buffer[4] << 24U));
    can_tx_frame.size = uart_rx_buffer[5];
 800065c:	4b25      	ldr	r3, [pc, #148]	; (80006f4 <HAL_UART_RxCpltCallback+0xe8>)
 800065e:	795b      	ldrb	r3, [r3, #5]
 8000660:	b29a      	uxth	r2, r3
 8000662:	4b26      	ldr	r3, [pc, #152]	; (80006fc <HAL_UART_RxCpltCallback+0xf0>)
 8000664:	80da      	strh	r2, [r3, #6]
    can_tx_frame.id = ((uart_rx_buffer[6])
 8000666:	4b23      	ldr	r3, [pc, #140]	; (80006f4 <HAL_UART_RxCpltCallback+0xe8>)
 8000668:	799b      	ldrb	r3, [r3, #6]
 800066a:	461a      	mov	r2, r3
        | (uart_rx_buffer[7] << 8U)
 800066c:	4b21      	ldr	r3, [pc, #132]	; (80006f4 <HAL_UART_RxCpltCallback+0xe8>)
 800066e:	79db      	ldrb	r3, [r3, #7]
 8000670:	021b      	lsls	r3, r3, #8
 8000672:	431a      	orrs	r2, r3
        | (uart_rx_buffer[8] << 16U)
 8000674:	4b1f      	ldr	r3, [pc, #124]	; (80006f4 <HAL_UART_RxCpltCallback+0xe8>)
 8000676:	7a1b      	ldrb	r3, [r3, #8]
 8000678:	041b      	lsls	r3, r3, #16
 800067a:	431a      	orrs	r2, r3
        | (uart_rx_buffer[9] << 24U));
 800067c:	4b1d      	ldr	r3, [pc, #116]	; (80006f4 <HAL_UART_RxCpltCallback+0xe8>)
 800067e:	7a5b      	ldrb	r3, [r3, #9]
 8000680:	061b      	lsls	r3, r3, #24
 8000682:	4313      	orrs	r3, r2
 8000684:	461a      	mov	r2, r3
    can_tx_frame.id = ((uart_rx_buffer[6])
 8000686:	4b1d      	ldr	r3, [pc, #116]	; (80006fc <HAL_UART_RxCpltCallback+0xf0>)
 8000688:	601a      	str	r2, [r3, #0]

    // if DLC > 0, we need to continue receive `DLC` number of data
    if (can_tx_frame.size) {
 800068a:	4b1c      	ldr	r3, [pc, #112]	; (80006fc <HAL_UART_RxCpltCallback+0xf0>)
 800068c:	88db      	ldrh	r3, [r3, #6]
 800068e:	2b00      	cmp	r3, #0
 8000690:	d016      	beq.n	80006c0 <HAL_UART_RxCpltCallback+0xb4>
      uart_rx_data_pending = 1U;
 8000692:	4b17      	ldr	r3, [pc, #92]	; (80006f0 <HAL_UART_RxCpltCallback+0xe4>)
 8000694:	2201      	movs	r2, #1
 8000696:	701a      	strb	r2, [r3, #0]
      can_tx_frame.data[0] = uart_rx_buffer[10];
 8000698:	4b16      	ldr	r3, [pc, #88]	; (80006f4 <HAL_UART_RxCpltCallback+0xe8>)
 800069a:	7a9a      	ldrb	r2, [r3, #10]
 800069c:	4b17      	ldr	r3, [pc, #92]	; (80006fc <HAL_UART_RxCpltCallback+0xf0>)
 800069e:	721a      	strb	r2, [r3, #8]
      HAL_UART_Receive_IT(&huart2, uart_rx_buffer, can_tx_frame.size);
 80006a0:	4b16      	ldr	r3, [pc, #88]	; (80006fc <HAL_UART_RxCpltCallback+0xf0>)
 80006a2:	88db      	ldrh	r3, [r3, #6]
 80006a4:	461a      	mov	r2, r3
 80006a6:	4913      	ldr	r1, [pc, #76]	; (80006f4 <HAL_UART_RxCpltCallback+0xe8>)
 80006a8:	4813      	ldr	r0, [pc, #76]	; (80006f8 <HAL_UART_RxCpltCallback+0xec>)
 80006aa:	f003 f847 	bl	800373c <HAL_UART_Receive_IT>
      return;
 80006ae:	e018      	b.n	80006e2 <HAL_UART_RxCpltCallback+0xd6>
    }
  }
  else {
    memcpy(can_tx_frame.data+1, uart_rx_buffer, can_tx_frame.size-1);
 80006b0:	4813      	ldr	r0, [pc, #76]	; (8000700 <HAL_UART_RxCpltCallback+0xf4>)
 80006b2:	4b12      	ldr	r3, [pc, #72]	; (80006fc <HAL_UART_RxCpltCallback+0xf0>)
 80006b4:	88db      	ldrh	r3, [r3, #6]
 80006b6:	3b01      	subs	r3, #1
 80006b8:	461a      	mov	r2, r3
 80006ba:	490e      	ldr	r1, [pc, #56]	; (80006f4 <HAL_UART_RxCpltCallback+0xe8>)
 80006bc:	f004 f830 	bl	8004720 <memcpy>
  }

  CAN_putTxFrame(&hcan1, &can_tx_frame);
 80006c0:	490e      	ldr	r1, [pc, #56]	; (80006fc <HAL_UART_RxCpltCallback+0xf0>)
 80006c2:	4810      	ldr	r0, [pc, #64]	; (8000704 <HAL_UART_RxCpltCallback+0xf8>)
 80006c4:	f000 f9e7 	bl	8000a96 <CAN_putTxFrame>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 80006c8:	2200      	movs	r2, #0
 80006ca:	2120      	movs	r1, #32
 80006cc:	4807      	ldr	r0, [pc, #28]	; (80006ec <HAL_UART_RxCpltCallback+0xe0>)
 80006ce:	f001 fda5 	bl	800221c <HAL_GPIO_WritePin>

  uart_rx_data_pending = 0U;
 80006d2:	4b07      	ldr	r3, [pc, #28]	; (80006f0 <HAL_UART_RxCpltCallback+0xe4>)
 80006d4:	2200      	movs	r2, #0
 80006d6:	701a      	strb	r2, [r3, #0]
  HAL_UART_Receive_IT(&huart2, uart_rx_buffer, 11);
 80006d8:	220b      	movs	r2, #11
 80006da:	4906      	ldr	r1, [pc, #24]	; (80006f4 <HAL_UART_RxCpltCallback+0xe8>)
 80006dc:	4806      	ldr	r0, [pc, #24]	; (80006f8 <HAL_UART_RxCpltCallback+0xec>)
 80006de:	f003 f82d 	bl	800373c <HAL_UART_Receive_IT>
}
 80006e2:	3710      	adds	r7, #16
 80006e4:	46bd      	mov	sp, r7
 80006e6:	bd80      	pop	{r7, pc}
 80006e8:	200000e4 	.word	0x200000e4
 80006ec:	40020000 	.word	0x40020000
 80006f0:	20000078 	.word	0x20000078
 80006f4:	20000038 	.word	0x20000038
 80006f8:	2000012c 	.word	0x2000012c
 80006fc:	20000028 	.word	0x20000028
 8000700:	20000031 	.word	0x20000031
 8000704:	200000bc 	.word	0x200000bc

08000708 <APP_init>:

void APP_init() {
 8000708:	b580      	push	{r7, lr}
 800070a:	b08c      	sub	sp, #48	; 0x30
 800070c:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 800070e:	2200      	movs	r2, #0
 8000710:	2120      	movs	r1, #32
 8000712:	481c      	ldr	r0, [pc, #112]	; (8000784 <APP_init+0x7c>)
 8000714:	f001 fd82 	bl	800221c <HAL_GPIO_WritePin>

  uint32_t filter_id = 0;
 8000718:	2300      	movs	r3, #0
 800071a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t filter_mask = 0x0;
 800071c:	2300      	movs	r3, #0
 800071e:	62bb      	str	r3, [r7, #40]	; 0x28

  // we are receiving all data on the bus, so setting filter and mask to 0 here.
  CAN_FilterTypeDef filter_config;
  filter_config.FilterBank = 0;
 8000720:	2300      	movs	r3, #0
 8000722:	617b      	str	r3, [r7, #20]
  filter_config.FilterMode = CAN_FILTERMODE_IDMASK;
 8000724:	2300      	movs	r3, #0
 8000726:	61bb      	str	r3, [r7, #24]
  filter_config.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8000728:	2300      	movs	r3, #0
 800072a:	613b      	str	r3, [r7, #16]
  filter_config.FilterIdHigh = filter_id << 5;
 800072c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800072e:	015b      	lsls	r3, r3, #5
 8000730:	603b      	str	r3, [r7, #0]
  filter_config.FilterIdLow = 0;
 8000732:	2300      	movs	r3, #0
 8000734:	607b      	str	r3, [r7, #4]
  filter_config.FilterMaskIdHigh = filter_mask << 5;
 8000736:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000738:	015b      	lsls	r3, r3, #5
 800073a:	60bb      	str	r3, [r7, #8]
  filter_config.FilterMaskIdLow = 0;
 800073c:	2300      	movs	r3, #0
 800073e:	60fb      	str	r3, [r7, #12]
  filter_config.FilterScale = CAN_FILTERSCALE_32BIT;
 8000740:	2301      	movs	r3, #1
 8000742:	61fb      	str	r3, [r7, #28]
  filter_config.FilterActivation = CAN_FILTER_ENABLE;
 8000744:	2301      	movs	r3, #1
 8000746:	623b      	str	r3, [r7, #32]
  filter_config.SlaveStartFilterBank = 14;
 8000748:	230e      	movs	r3, #14
 800074a:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_CAN_ConfigFilter(&hcan1, &filter_config);
 800074c:	463b      	mov	r3, r7
 800074e:	4619      	mov	r1, r3
 8000750:	480d      	ldr	r0, [pc, #52]	; (8000788 <APP_init+0x80>)
 8000752:	f000 fcb9 	bl	80010c8 <HAL_CAN_ConfigFilter>
  HAL_CAN_Start(&hcan1);
 8000756:	480c      	ldr	r0, [pc, #48]	; (8000788 <APP_init+0x80>)
 8000758:	f000 fd96 	bl	8001288 <HAL_CAN_Start>
  HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 800075c:	2102      	movs	r1, #2
 800075e:	480a      	ldr	r0, [pc, #40]	; (8000788 <APP_init+0x80>)
 8000760:	f000 ffc3 	bl	80016ea <HAL_CAN_ActivateNotification>

  uart_rx_data_pending = 0U;
 8000764:	4b09      	ldr	r3, [pc, #36]	; (800078c <APP_init+0x84>)
 8000766:	2200      	movs	r2, #0
 8000768:	701a      	strb	r2, [r3, #0]
  HAL_UART_Receive_IT(&huart2, uart_rx_buffer, 11);
 800076a:	220b      	movs	r2, #11
 800076c:	4908      	ldr	r1, [pc, #32]	; (8000790 <APP_init+0x88>)
 800076e:	4809      	ldr	r0, [pc, #36]	; (8000794 <APP_init+0x8c>)
 8000770:	f002 ffe4 	bl	800373c <HAL_UART_Receive_IT>

  HAL_TIM_Base_Start_IT(&htim2);
 8000774:	4808      	ldr	r0, [pc, #32]	; (8000798 <APP_init+0x90>)
 8000776:	f002 fb1d 	bl	8002db4 <HAL_TIM_Base_Start_IT>
}
 800077a:	bf00      	nop
 800077c:	3730      	adds	r7, #48	; 0x30
 800077e:	46bd      	mov	sp, r7
 8000780:	bd80      	pop	{r7, pc}
 8000782:	bf00      	nop
 8000784:	40020000 	.word	0x40020000
 8000788:	200000bc 	.word	0x200000bc
 800078c:	20000078 	.word	0x20000078
 8000790:	20000038 	.word	0x20000038
 8000794:	2000012c 	.word	0x2000012c
 8000798:	200000e4 	.word	0x200000e4

0800079c <APP_main>:

void APP_main() {
 800079c:	b480      	push	{r7}
 800079e:	af00      	add	r7, sp, #0
  // do nothing in main loop
}
 80007a0:	bf00      	nop
 80007a2:	46bd      	mov	sp, r7
 80007a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a8:	4770      	bx	lr

080007aa <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007aa:	b580      	push	{r7, lr}
 80007ac:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007ae:	f000 fb1d 	bl	8000dec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007b2:	f000 f80d 	bl	80007d0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007b6:	f000 f925 	bl	8000a04 <MX_GPIO_Init>
  MX_CAN1_Init();
 80007ba:	f000 f875 	bl	80008a8 <MX_CAN1_Init>
  MX_USART2_UART_Init();
 80007be:	f000 f8f7 	bl	80009b0 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 80007c2:	f000 f8a7 	bl	8000914 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  APP_init();
 80007c6:	f7ff ff9f 	bl	8000708 <APP_init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    APP_main();
 80007ca:	f7ff ffe7 	bl	800079c <APP_main>
 80007ce:	e7fc      	b.n	80007ca <main+0x20>

080007d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b094      	sub	sp, #80	; 0x50
 80007d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007d6:	f107 031c 	add.w	r3, r7, #28
 80007da:	2234      	movs	r2, #52	; 0x34
 80007dc:	2100      	movs	r1, #0
 80007de:	4618      	mov	r0, r3
 80007e0:	f003 ffac 	bl	800473c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007e4:	f107 0308 	add.w	r3, r7, #8
 80007e8:	2200      	movs	r2, #0
 80007ea:	601a      	str	r2, [r3, #0]
 80007ec:	605a      	str	r2, [r3, #4]
 80007ee:	609a      	str	r2, [r3, #8]
 80007f0:	60da      	str	r2, [r3, #12]
 80007f2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80007f4:	2300      	movs	r3, #0
 80007f6:	607b      	str	r3, [r7, #4]
 80007f8:	4b29      	ldr	r3, [pc, #164]	; (80008a0 <SystemClock_Config+0xd0>)
 80007fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007fc:	4a28      	ldr	r2, [pc, #160]	; (80008a0 <SystemClock_Config+0xd0>)
 80007fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000802:	6413      	str	r3, [r2, #64]	; 0x40
 8000804:	4b26      	ldr	r3, [pc, #152]	; (80008a0 <SystemClock_Config+0xd0>)
 8000806:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000808:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800080c:	607b      	str	r3, [r7, #4]
 800080e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000810:	2300      	movs	r3, #0
 8000812:	603b      	str	r3, [r7, #0]
 8000814:	4b23      	ldr	r3, [pc, #140]	; (80008a4 <SystemClock_Config+0xd4>)
 8000816:	681b      	ldr	r3, [r3, #0]
 8000818:	4a22      	ldr	r2, [pc, #136]	; (80008a4 <SystemClock_Config+0xd4>)
 800081a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800081e:	6013      	str	r3, [r2, #0]
 8000820:	4b20      	ldr	r3, [pc, #128]	; (80008a4 <SystemClock_Config+0xd4>)
 8000822:	681b      	ldr	r3, [r3, #0]
 8000824:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000828:	603b      	str	r3, [r7, #0]
 800082a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800082c:	2302      	movs	r3, #2
 800082e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000830:	2301      	movs	r3, #1
 8000832:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000834:	2310      	movs	r3, #16
 8000836:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000838:	2302      	movs	r3, #2
 800083a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800083c:	2300      	movs	r3, #0
 800083e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000840:	2308      	movs	r3, #8
 8000842:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 160;
 8000844:	23a0      	movs	r3, #160	; 0xa0
 8000846:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000848:	2302      	movs	r3, #2
 800084a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800084c:	2302      	movs	r3, #2
 800084e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000850:	2302      	movs	r3, #2
 8000852:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000854:	f107 031c 	add.w	r3, r7, #28
 8000858:	4618      	mov	r0, r3
 800085a:	f001 ffbd 	bl	80027d8 <HAL_RCC_OscConfig>
 800085e:	4603      	mov	r3, r0
 8000860:	2b00      	cmp	r3, #0
 8000862:	d001      	beq.n	8000868 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000864:	f000 f8e8 	bl	8000a38 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000868:	230f      	movs	r3, #15
 800086a:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800086c:	2302      	movs	r3, #2
 800086e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000870:	2300      	movs	r3, #0
 8000872:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000874:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000878:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800087a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800087e:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000880:	f107 0308 	add.w	r3, r7, #8
 8000884:	2105      	movs	r1, #5
 8000886:	4618      	mov	r0, r3
 8000888:	f001 fce2 	bl	8002250 <HAL_RCC_ClockConfig>
 800088c:	4603      	mov	r3, r0
 800088e:	2b00      	cmp	r3, #0
 8000890:	d001      	beq.n	8000896 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000892:	f000 f8d1 	bl	8000a38 <Error_Handler>
  }
}
 8000896:	bf00      	nop
 8000898:	3750      	adds	r7, #80	; 0x50
 800089a:	46bd      	mov	sp, r7
 800089c:	bd80      	pop	{r7, pc}
 800089e:	bf00      	nop
 80008a0:	40023800 	.word	0x40023800
 80008a4:	40007000 	.word	0x40007000

080008a8 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80008ac:	4b17      	ldr	r3, [pc, #92]	; (800090c <MX_CAN1_Init+0x64>)
 80008ae:	4a18      	ldr	r2, [pc, #96]	; (8000910 <MX_CAN1_Init+0x68>)
 80008b0:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 80008b2:	4b16      	ldr	r3, [pc, #88]	; (800090c <MX_CAN1_Init+0x64>)
 80008b4:	2210      	movs	r2, #16
 80008b6:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80008b8:	4b14      	ldr	r3, [pc, #80]	; (800090c <MX_CAN1_Init+0x64>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80008be:	4b13      	ldr	r3, [pc, #76]	; (800090c <MX_CAN1_Init+0x64>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_3TQ;
 80008c4:	4b11      	ldr	r3, [pc, #68]	; (800090c <MX_CAN1_Init+0x64>)
 80008c6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80008ca:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 80008cc:	4b0f      	ldr	r3, [pc, #60]	; (800090c <MX_CAN1_Init+0x64>)
 80008ce:	2200      	movs	r2, #0
 80008d0:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80008d2:	4b0e      	ldr	r3, [pc, #56]	; (800090c <MX_CAN1_Init+0x64>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 80008d8:	4b0c      	ldr	r3, [pc, #48]	; (800090c <MX_CAN1_Init+0x64>)
 80008da:	2200      	movs	r2, #0
 80008dc:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 80008de:	4b0b      	ldr	r3, [pc, #44]	; (800090c <MX_CAN1_Init+0x64>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 80008e4:	4b09      	ldr	r3, [pc, #36]	; (800090c <MX_CAN1_Init+0x64>)
 80008e6:	2200      	movs	r2, #0
 80008e8:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80008ea:	4b08      	ldr	r3, [pc, #32]	; (800090c <MX_CAN1_Init+0x64>)
 80008ec:	2200      	movs	r2, #0
 80008ee:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 80008f0:	4b06      	ldr	r3, [pc, #24]	; (800090c <MX_CAN1_Init+0x64>)
 80008f2:	2200      	movs	r2, #0
 80008f4:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80008f6:	4805      	ldr	r0, [pc, #20]	; (800090c <MX_CAN1_Init+0x64>)
 80008f8:	f000 faea 	bl	8000ed0 <HAL_CAN_Init>
 80008fc:	4603      	mov	r3, r0
 80008fe:	2b00      	cmp	r3, #0
 8000900:	d001      	beq.n	8000906 <MX_CAN1_Init+0x5e>
  {
    Error_Handler();
 8000902:	f000 f899 	bl	8000a38 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8000906:	bf00      	nop
 8000908:	bd80      	pop	{r7, pc}
 800090a:	bf00      	nop
 800090c:	200000bc 	.word	0x200000bc
 8000910:	40006400 	.word	0x40006400

08000914 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	b086      	sub	sp, #24
 8000918:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800091a:	f107 0308 	add.w	r3, r7, #8
 800091e:	2200      	movs	r2, #0
 8000920:	601a      	str	r2, [r3, #0]
 8000922:	605a      	str	r2, [r3, #4]
 8000924:	609a      	str	r2, [r3, #8]
 8000926:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000928:	463b      	mov	r3, r7
 800092a:	2200      	movs	r2, #0
 800092c:	601a      	str	r2, [r3, #0]
 800092e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000930:	4b1d      	ldr	r3, [pc, #116]	; (80009a8 <MX_TIM2_Init+0x94>)
 8000932:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000936:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 159;
 8000938:	4b1b      	ldr	r3, [pc, #108]	; (80009a8 <MX_TIM2_Init+0x94>)
 800093a:	229f      	movs	r2, #159	; 0x9f
 800093c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800093e:	4b1a      	ldr	r3, [pc, #104]	; (80009a8 <MX_TIM2_Init+0x94>)
 8000940:	2200      	movs	r2, #0
 8000942:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000000;
 8000944:	4b18      	ldr	r3, [pc, #96]	; (80009a8 <MX_TIM2_Init+0x94>)
 8000946:	4a19      	ldr	r2, [pc, #100]	; (80009ac <MX_TIM2_Init+0x98>)
 8000948:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800094a:	4b17      	ldr	r3, [pc, #92]	; (80009a8 <MX_TIM2_Init+0x94>)
 800094c:	2200      	movs	r2, #0
 800094e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000950:	4b15      	ldr	r3, [pc, #84]	; (80009a8 <MX_TIM2_Init+0x94>)
 8000952:	2200      	movs	r2, #0
 8000954:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000956:	4814      	ldr	r0, [pc, #80]	; (80009a8 <MX_TIM2_Init+0x94>)
 8000958:	f002 f9dc 	bl	8002d14 <HAL_TIM_Base_Init>
 800095c:	4603      	mov	r3, r0
 800095e:	2b00      	cmp	r3, #0
 8000960:	d001      	beq.n	8000966 <MX_TIM2_Init+0x52>
  {
    Error_Handler();
 8000962:	f000 f869 	bl	8000a38 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000966:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800096a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800096c:	f107 0308 	add.w	r3, r7, #8
 8000970:	4619      	mov	r1, r3
 8000972:	480d      	ldr	r0, [pc, #52]	; (80009a8 <MX_TIM2_Init+0x94>)
 8000974:	f002 fb96 	bl	80030a4 <HAL_TIM_ConfigClockSource>
 8000978:	4603      	mov	r3, r0
 800097a:	2b00      	cmp	r3, #0
 800097c:	d001      	beq.n	8000982 <MX_TIM2_Init+0x6e>
  {
    Error_Handler();
 800097e:	f000 f85b 	bl	8000a38 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000982:	2300      	movs	r3, #0
 8000984:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000986:	2300      	movs	r3, #0
 8000988:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800098a:	463b      	mov	r3, r7
 800098c:	4619      	mov	r1, r3
 800098e:	4806      	ldr	r0, [pc, #24]	; (80009a8 <MX_TIM2_Init+0x94>)
 8000990:	f002 fdb2 	bl	80034f8 <HAL_TIMEx_MasterConfigSynchronization>
 8000994:	4603      	mov	r3, r0
 8000996:	2b00      	cmp	r3, #0
 8000998:	d001      	beq.n	800099e <MX_TIM2_Init+0x8a>
  {
    Error_Handler();
 800099a:	f000 f84d 	bl	8000a38 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800099e:	bf00      	nop
 80009a0:	3718      	adds	r7, #24
 80009a2:	46bd      	mov	sp, r7
 80009a4:	bd80      	pop	{r7, pc}
 80009a6:	bf00      	nop
 80009a8:	200000e4 	.word	0x200000e4
 80009ac:	000f4240 	.word	0x000f4240

080009b0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80009b4:	4b10      	ldr	r3, [pc, #64]	; (80009f8 <MX_USART2_UART_Init+0x48>)
 80009b6:	4a11      	ldr	r2, [pc, #68]	; (80009fc <MX_USART2_UART_Init+0x4c>)
 80009b8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 1000000;
 80009ba:	4b0f      	ldr	r3, [pc, #60]	; (80009f8 <MX_USART2_UART_Init+0x48>)
 80009bc:	4a10      	ldr	r2, [pc, #64]	; (8000a00 <MX_USART2_UART_Init+0x50>)
 80009be:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80009c0:	4b0d      	ldr	r3, [pc, #52]	; (80009f8 <MX_USART2_UART_Init+0x48>)
 80009c2:	2200      	movs	r2, #0
 80009c4:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80009c6:	4b0c      	ldr	r3, [pc, #48]	; (80009f8 <MX_USART2_UART_Init+0x48>)
 80009c8:	2200      	movs	r2, #0
 80009ca:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80009cc:	4b0a      	ldr	r3, [pc, #40]	; (80009f8 <MX_USART2_UART_Init+0x48>)
 80009ce:	2200      	movs	r2, #0
 80009d0:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80009d2:	4b09      	ldr	r3, [pc, #36]	; (80009f8 <MX_USART2_UART_Init+0x48>)
 80009d4:	220c      	movs	r2, #12
 80009d6:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009d8:	4b07      	ldr	r3, [pc, #28]	; (80009f8 <MX_USART2_UART_Init+0x48>)
 80009da:	2200      	movs	r2, #0
 80009dc:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80009de:	4b06      	ldr	r3, [pc, #24]	; (80009f8 <MX_USART2_UART_Init+0x48>)
 80009e0:	2200      	movs	r2, #0
 80009e2:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80009e4:	4804      	ldr	r0, [pc, #16]	; (80009f8 <MX_USART2_UART_Init+0x48>)
 80009e6:	f002 fe17 	bl	8003618 <HAL_UART_Init>
 80009ea:	4603      	mov	r3, r0
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	d001      	beq.n	80009f4 <MX_USART2_UART_Init+0x44>
  {
    Error_Handler();
 80009f0:	f000 f822 	bl	8000a38 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80009f4:	bf00      	nop
 80009f6:	bd80      	pop	{r7, pc}
 80009f8:	2000012c 	.word	0x2000012c
 80009fc:	40004400 	.word	0x40004400
 8000a00:	000f4240 	.word	0x000f4240

08000a04 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a04:	b480      	push	{r7}
 8000a06:	b083      	sub	sp, #12
 8000a08:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	607b      	str	r3, [r7, #4]
 8000a0e:	4b09      	ldr	r3, [pc, #36]	; (8000a34 <MX_GPIO_Init+0x30>)
 8000a10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a12:	4a08      	ldr	r2, [pc, #32]	; (8000a34 <MX_GPIO_Init+0x30>)
 8000a14:	f043 0301 	orr.w	r3, r3, #1
 8000a18:	6313      	str	r3, [r2, #48]	; 0x30
 8000a1a:	4b06      	ldr	r3, [pc, #24]	; (8000a34 <MX_GPIO_Init+0x30>)
 8000a1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a1e:	f003 0301 	and.w	r3, r3, #1
 8000a22:	607b      	str	r3, [r7, #4]
 8000a24:	687b      	ldr	r3, [r7, #4]

}
 8000a26:	bf00      	nop
 8000a28:	370c      	adds	r7, #12
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a30:	4770      	bx	lr
 8000a32:	bf00      	nop
 8000a34:	40023800 	.word	0x40023800

08000a38 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a38:	b480      	push	{r7}
 8000a3a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a3c:	b672      	cpsid	i
}
 8000a3e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a40:	e7fe      	b.n	8000a40 <Error_Handler+0x8>

08000a42 <CAN_getRxFrame>:
 */

#include "rath_can.h"


void CAN_getRxFrame(CAN_HandleTypeDef *hcan, CAN_Frame *rx_frame) {
 8000a42:	b580      	push	{r7, lr}
 8000a44:	b08a      	sub	sp, #40	; 0x28
 8000a46:	af00      	add	r7, sp, #0
 8000a48:	6078      	str	r0, [r7, #4]
 8000a4a:	6039      	str	r1, [r7, #0]
  CAN_RxHeaderTypeDef rx_header;
  HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &rx_header, rx_frame->data);
 8000a4c:	683b      	ldr	r3, [r7, #0]
 8000a4e:	3308      	adds	r3, #8
 8000a50:	f107 020c 	add.w	r2, r7, #12
 8000a54:	2100      	movs	r1, #0
 8000a56:	6878      	ldr	r0, [r7, #4]
 8000a58:	f000 fd35 	bl	80014c6 <HAL_CAN_GetRxMessage>

  rx_frame->id = rx_header.StdId;
 8000a5c:	68fa      	ldr	r2, [r7, #12]
 8000a5e:	683b      	ldr	r3, [r7, #0]
 8000a60:	601a      	str	r2, [r3, #0]
  rx_frame->id_type = (rx_header.IDE == CAN_ID_STD) ? CAN_ID_STANDARD : CAN_ID_EXTENDED;
 8000a62:	697b      	ldr	r3, [r7, #20]
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	bf14      	ite	ne
 8000a68:	2301      	movne	r3, #1
 8000a6a:	2300      	moveq	r3, #0
 8000a6c:	b2db      	uxtb	r3, r3
 8000a6e:	461a      	mov	r2, r3
 8000a70:	683b      	ldr	r3, [r7, #0]
 8000a72:	711a      	strb	r2, [r3, #4]
  rx_frame->frame_type = (rx_header.RTR == CAN_FRAME_DATA) ? CAN_FRAME_DATA : CAN_FRAME_REMOTE;
 8000a74:	69bb      	ldr	r3, [r7, #24]
 8000a76:	2b01      	cmp	r3, #1
 8000a78:	bf0c      	ite	eq
 8000a7a:	2301      	moveq	r3, #1
 8000a7c:	2300      	movne	r3, #0
 8000a7e:	b2db      	uxtb	r3, r3
 8000a80:	461a      	mov	r2, r3
 8000a82:	683b      	ldr	r3, [r7, #0]
 8000a84:	715a      	strb	r2, [r3, #5]
  rx_frame->size = rx_header.DLC;
 8000a86:	69fb      	ldr	r3, [r7, #28]
 8000a88:	b29a      	uxth	r2, r3
 8000a8a:	683b      	ldr	r3, [r7, #0]
 8000a8c:	80da      	strh	r2, [r3, #6]
}
 8000a8e:	bf00      	nop
 8000a90:	3728      	adds	r7, #40	; 0x28
 8000a92:	46bd      	mov	sp, r7
 8000a94:	bd80      	pop	{r7, pc}

08000a96 <CAN_putTxFrame>:

HAL_StatusTypeDef CAN_putTxFrame(CAN_HandleTypeDef *hcan, CAN_Frame *tx_frame) {
 8000a96:	b580      	push	{r7, lr}
 8000a98:	b08a      	sub	sp, #40	; 0x28
 8000a9a:	af00      	add	r7, sp, #0
 8000a9c:	6078      	str	r0, [r7, #4]
 8000a9e:	6039      	str	r1, [r7, #0]
  CAN_TxHeaderTypeDef tx_header;

  tx_header.StdId = tx_frame->id;
 8000aa0:	683b      	ldr	r3, [r7, #0]
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	613b      	str	r3, [r7, #16]
  tx_header.IDE = CAN_ID_STD;
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	61bb      	str	r3, [r7, #24]
  tx_header.RTR = (tx_frame->frame_type == CAN_FRAME_DATA) ? CAN_RTR_DATA : CAN_RTR_REMOTE;
 8000aaa:	683b      	ldr	r3, [r7, #0]
 8000aac:	795b      	ldrb	r3, [r3, #5]
 8000aae:	2b01      	cmp	r3, #1
 8000ab0:	d101      	bne.n	8000ab6 <CAN_putTxFrame+0x20>
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	e000      	b.n	8000ab8 <CAN_putTxFrame+0x22>
 8000ab6:	2302      	movs	r3, #2
 8000ab8:	61fb      	str	r3, [r7, #28]
  tx_header.DLC = tx_frame->size;
 8000aba:	683b      	ldr	r3, [r7, #0]
 8000abc:	88db      	ldrh	r3, [r3, #6]
 8000abe:	623b      	str	r3, [r7, #32]
  tx_header.TransmitGlobalTime = 0U;
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24

  uint32_t tx_mailbox;
  return HAL_CAN_AddTxMessage(hcan, &tx_header, tx_frame->data, &tx_mailbox);
 8000ac6:	683b      	ldr	r3, [r7, #0]
 8000ac8:	f103 0208 	add.w	r2, r3, #8
 8000acc:	f107 030c 	add.w	r3, r7, #12
 8000ad0:	f107 0110 	add.w	r1, r7, #16
 8000ad4:	6878      	ldr	r0, [r7, #4]
 8000ad6:	f000 fc1b 	bl	8001310 <HAL_CAN_AddTxMessage>
 8000ada:	4603      	mov	r3, r0
}
 8000adc:	4618      	mov	r0, r3
 8000ade:	3728      	adds	r7, #40	; 0x28
 8000ae0:	46bd      	mov	sp, r7
 8000ae2:	bd80      	pop	{r7, pc}

08000ae4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	b083      	sub	sp, #12
 8000ae8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000aea:	2300      	movs	r3, #0
 8000aec:	607b      	str	r3, [r7, #4]
 8000aee:	4b10      	ldr	r3, [pc, #64]	; (8000b30 <HAL_MspInit+0x4c>)
 8000af0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000af2:	4a0f      	ldr	r2, [pc, #60]	; (8000b30 <HAL_MspInit+0x4c>)
 8000af4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000af8:	6453      	str	r3, [r2, #68]	; 0x44
 8000afa:	4b0d      	ldr	r3, [pc, #52]	; (8000b30 <HAL_MspInit+0x4c>)
 8000afc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000afe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b02:	607b      	str	r3, [r7, #4]
 8000b04:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b06:	2300      	movs	r3, #0
 8000b08:	603b      	str	r3, [r7, #0]
 8000b0a:	4b09      	ldr	r3, [pc, #36]	; (8000b30 <HAL_MspInit+0x4c>)
 8000b0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b0e:	4a08      	ldr	r2, [pc, #32]	; (8000b30 <HAL_MspInit+0x4c>)
 8000b10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b14:	6413      	str	r3, [r2, #64]	; 0x40
 8000b16:	4b06      	ldr	r3, [pc, #24]	; (8000b30 <HAL_MspInit+0x4c>)
 8000b18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b1e:	603b      	str	r3, [r7, #0]
 8000b20:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b22:	bf00      	nop
 8000b24:	370c      	adds	r7, #12
 8000b26:	46bd      	mov	sp, r7
 8000b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b2c:	4770      	bx	lr
 8000b2e:	bf00      	nop
 8000b30:	40023800 	.word	0x40023800

08000b34 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b08a      	sub	sp, #40	; 0x28
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b3c:	f107 0314 	add.w	r3, r7, #20
 8000b40:	2200      	movs	r2, #0
 8000b42:	601a      	str	r2, [r3, #0]
 8000b44:	605a      	str	r2, [r3, #4]
 8000b46:	609a      	str	r2, [r3, #8]
 8000b48:	60da      	str	r2, [r3, #12]
 8000b4a:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	4a21      	ldr	r2, [pc, #132]	; (8000bd8 <HAL_CAN_MspInit+0xa4>)
 8000b52:	4293      	cmp	r3, r2
 8000b54:	d13c      	bne.n	8000bd0 <HAL_CAN_MspInit+0x9c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000b56:	2300      	movs	r3, #0
 8000b58:	613b      	str	r3, [r7, #16]
 8000b5a:	4b20      	ldr	r3, [pc, #128]	; (8000bdc <HAL_CAN_MspInit+0xa8>)
 8000b5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b5e:	4a1f      	ldr	r2, [pc, #124]	; (8000bdc <HAL_CAN_MspInit+0xa8>)
 8000b60:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000b64:	6413      	str	r3, [r2, #64]	; 0x40
 8000b66:	4b1d      	ldr	r3, [pc, #116]	; (8000bdc <HAL_CAN_MspInit+0xa8>)
 8000b68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000b6e:	613b      	str	r3, [r7, #16]
 8000b70:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b72:	2300      	movs	r3, #0
 8000b74:	60fb      	str	r3, [r7, #12]
 8000b76:	4b19      	ldr	r3, [pc, #100]	; (8000bdc <HAL_CAN_MspInit+0xa8>)
 8000b78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b7a:	4a18      	ldr	r2, [pc, #96]	; (8000bdc <HAL_CAN_MspInit+0xa8>)
 8000b7c:	f043 0301 	orr.w	r3, r3, #1
 8000b80:	6313      	str	r3, [r2, #48]	; 0x30
 8000b82:	4b16      	ldr	r3, [pc, #88]	; (8000bdc <HAL_CAN_MspInit+0xa8>)
 8000b84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b86:	f003 0301 	and.w	r3, r3, #1
 8000b8a:	60fb      	str	r3, [r7, #12]
 8000b8c:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000b8e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000b92:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b94:	2302      	movs	r3, #2
 8000b96:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b98:	2300      	movs	r3, #0
 8000b9a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b9c:	2303      	movs	r3, #3
 8000b9e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000ba0:	2309      	movs	r3, #9
 8000ba2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ba4:	f107 0314 	add.w	r3, r7, #20
 8000ba8:	4619      	mov	r1, r3
 8000baa:	480d      	ldr	r0, [pc, #52]	; (8000be0 <HAL_CAN_MspInit+0xac>)
 8000bac:	f001 f9a2 	bl	8001ef4 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	2100      	movs	r1, #0
 8000bb4:	2014      	movs	r0, #20
 8000bb6:	f001 f8c8 	bl	8001d4a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8000bba:	2014      	movs	r0, #20
 8000bbc:	f001 f8e1 	bl	8001d82 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	2100      	movs	r1, #0
 8000bc4:	2015      	movs	r0, #21
 8000bc6:	f001 f8c0 	bl	8001d4a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8000bca:	2015      	movs	r0, #21
 8000bcc:	f001 f8d9 	bl	8001d82 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8000bd0:	bf00      	nop
 8000bd2:	3728      	adds	r7, #40	; 0x28
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	bd80      	pop	{r7, pc}
 8000bd8:	40006400 	.word	0x40006400
 8000bdc:	40023800 	.word	0x40023800
 8000be0:	40020000 	.word	0x40020000

08000be4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b084      	sub	sp, #16
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000bf4:	d115      	bne.n	8000c22 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	60fb      	str	r3, [r7, #12]
 8000bfa:	4b0c      	ldr	r3, [pc, #48]	; (8000c2c <HAL_TIM_Base_MspInit+0x48>)
 8000bfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bfe:	4a0b      	ldr	r2, [pc, #44]	; (8000c2c <HAL_TIM_Base_MspInit+0x48>)
 8000c00:	f043 0301 	orr.w	r3, r3, #1
 8000c04:	6413      	str	r3, [r2, #64]	; 0x40
 8000c06:	4b09      	ldr	r3, [pc, #36]	; (8000c2c <HAL_TIM_Base_MspInit+0x48>)
 8000c08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c0a:	f003 0301 	and.w	r3, r3, #1
 8000c0e:	60fb      	str	r3, [r7, #12]
 8000c10:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000c12:	2200      	movs	r2, #0
 8000c14:	2100      	movs	r1, #0
 8000c16:	201c      	movs	r0, #28
 8000c18:	f001 f897 	bl	8001d4a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000c1c:	201c      	movs	r0, #28
 8000c1e:	f001 f8b0 	bl	8001d82 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000c22:	bf00      	nop
 8000c24:	3710      	adds	r7, #16
 8000c26:	46bd      	mov	sp, r7
 8000c28:	bd80      	pop	{r7, pc}
 8000c2a:	bf00      	nop
 8000c2c:	40023800 	.word	0x40023800

08000c30 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b08a      	sub	sp, #40	; 0x28
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c38:	f107 0314 	add.w	r3, r7, #20
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	601a      	str	r2, [r3, #0]
 8000c40:	605a      	str	r2, [r3, #4]
 8000c42:	609a      	str	r2, [r3, #8]
 8000c44:	60da      	str	r2, [r3, #12]
 8000c46:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	4a1d      	ldr	r2, [pc, #116]	; (8000cc4 <HAL_UART_MspInit+0x94>)
 8000c4e:	4293      	cmp	r3, r2
 8000c50:	d133      	bne.n	8000cba <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000c52:	2300      	movs	r3, #0
 8000c54:	613b      	str	r3, [r7, #16]
 8000c56:	4b1c      	ldr	r3, [pc, #112]	; (8000cc8 <HAL_UART_MspInit+0x98>)
 8000c58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c5a:	4a1b      	ldr	r2, [pc, #108]	; (8000cc8 <HAL_UART_MspInit+0x98>)
 8000c5c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c60:	6413      	str	r3, [r2, #64]	; 0x40
 8000c62:	4b19      	ldr	r3, [pc, #100]	; (8000cc8 <HAL_UART_MspInit+0x98>)
 8000c64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c6a:	613b      	str	r3, [r7, #16]
 8000c6c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c6e:	2300      	movs	r3, #0
 8000c70:	60fb      	str	r3, [r7, #12]
 8000c72:	4b15      	ldr	r3, [pc, #84]	; (8000cc8 <HAL_UART_MspInit+0x98>)
 8000c74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c76:	4a14      	ldr	r2, [pc, #80]	; (8000cc8 <HAL_UART_MspInit+0x98>)
 8000c78:	f043 0301 	orr.w	r3, r3, #1
 8000c7c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c7e:	4b12      	ldr	r3, [pc, #72]	; (8000cc8 <HAL_UART_MspInit+0x98>)
 8000c80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c82:	f003 0301 	and.w	r3, r3, #1
 8000c86:	60fb      	str	r3, [r7, #12]
 8000c88:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000c8a:	230c      	movs	r3, #12
 8000c8c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c8e:	2302      	movs	r3, #2
 8000c90:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c92:	2300      	movs	r3, #0
 8000c94:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c96:	2303      	movs	r3, #3
 8000c98:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000c9a:	2307      	movs	r3, #7
 8000c9c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c9e:	f107 0314 	add.w	r3, r7, #20
 8000ca2:	4619      	mov	r1, r3
 8000ca4:	4809      	ldr	r0, [pc, #36]	; (8000ccc <HAL_UART_MspInit+0x9c>)
 8000ca6:	f001 f925 	bl	8001ef4 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000caa:	2200      	movs	r2, #0
 8000cac:	2100      	movs	r1, #0
 8000cae:	2026      	movs	r0, #38	; 0x26
 8000cb0:	f001 f84b 	bl	8001d4a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000cb4:	2026      	movs	r0, #38	; 0x26
 8000cb6:	f001 f864 	bl	8001d82 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000cba:	bf00      	nop
 8000cbc:	3728      	adds	r7, #40	; 0x28
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	bd80      	pop	{r7, pc}
 8000cc2:	bf00      	nop
 8000cc4:	40004400 	.word	0x40004400
 8000cc8:	40023800 	.word	0x40023800
 8000ccc:	40020000 	.word	0x40020000

08000cd0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000cd4:	e7fe      	b.n	8000cd4 <NMI_Handler+0x4>

08000cd6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cd6:	b480      	push	{r7}
 8000cd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cda:	e7fe      	b.n	8000cda <HardFault_Handler+0x4>

08000cdc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000cdc:	b480      	push	{r7}
 8000cde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ce0:	e7fe      	b.n	8000ce0 <MemManage_Handler+0x4>

08000ce2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ce2:	b480      	push	{r7}
 8000ce4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ce6:	e7fe      	b.n	8000ce6 <BusFault_Handler+0x4>

08000ce8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ce8:	b480      	push	{r7}
 8000cea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000cec:	e7fe      	b.n	8000cec <UsageFault_Handler+0x4>

08000cee <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000cee:	b480      	push	{r7}
 8000cf0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000cf2:	bf00      	nop
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfa:	4770      	bx	lr

08000cfc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d00:	bf00      	nop
 8000d02:	46bd      	mov	sp, r7
 8000d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d08:	4770      	bx	lr

08000d0a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d0a:	b480      	push	{r7}
 8000d0c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d0e:	bf00      	nop
 8000d10:	46bd      	mov	sp, r7
 8000d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d16:	4770      	bx	lr

08000d18 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d1c:	f000 f8b8 	bl	8000e90 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d20:	bf00      	nop
 8000d22:	bd80      	pop	{r7, pc}

08000d24 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8000d28:	4802      	ldr	r0, [pc, #8]	; (8000d34 <CAN1_RX0_IRQHandler+0x10>)
 8000d2a:	f000 fd04 	bl	8001736 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8000d2e:	bf00      	nop
 8000d30:	bd80      	pop	{r7, pc}
 8000d32:	bf00      	nop
 8000d34:	200000bc 	.word	0x200000bc

08000d38 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8000d3c:	4802      	ldr	r0, [pc, #8]	; (8000d48 <CAN1_RX1_IRQHandler+0x10>)
 8000d3e:	f000 fcfa 	bl	8001736 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 8000d42:	bf00      	nop
 8000d44:	bd80      	pop	{r7, pc}
 8000d46:	bf00      	nop
 8000d48:	200000bc 	.word	0x200000bc

08000d4c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000d50:	4802      	ldr	r0, [pc, #8]	; (8000d5c <TIM2_IRQHandler+0x10>)
 8000d52:	f002 f89f 	bl	8002e94 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000d56:	bf00      	nop
 8000d58:	bd80      	pop	{r7, pc}
 8000d5a:	bf00      	nop
 8000d5c:	200000e4 	.word	0x200000e4

08000d60 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000d64:	4802      	ldr	r0, [pc, #8]	; (8000d70 <USART2_IRQHandler+0x10>)
 8000d66:	f002 fdbd 	bl	80038e4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000d6a:	bf00      	nop
 8000d6c:	bd80      	pop	{r7, pc}
 8000d6e:	bf00      	nop
 8000d70:	2000012c 	.word	0x2000012c

08000d74 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d74:	b480      	push	{r7}
 8000d76:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d78:	4b06      	ldr	r3, [pc, #24]	; (8000d94 <SystemInit+0x20>)
 8000d7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d7e:	4a05      	ldr	r2, [pc, #20]	; (8000d94 <SystemInit+0x20>)
 8000d80:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d84:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d88:	bf00      	nop
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d90:	4770      	bx	lr
 8000d92:	bf00      	nop
 8000d94:	e000ed00 	.word	0xe000ed00

08000d98 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000d98:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000dd0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000d9c:	480d      	ldr	r0, [pc, #52]	; (8000dd4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000d9e:	490e      	ldr	r1, [pc, #56]	; (8000dd8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000da0:	4a0e      	ldr	r2, [pc, #56]	; (8000ddc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000da2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000da4:	e002      	b.n	8000dac <LoopCopyDataInit>

08000da6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000da6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000da8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000daa:	3304      	adds	r3, #4

08000dac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000dac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000dae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000db0:	d3f9      	bcc.n	8000da6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000db2:	4a0b      	ldr	r2, [pc, #44]	; (8000de0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000db4:	4c0b      	ldr	r4, [pc, #44]	; (8000de4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000db6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000db8:	e001      	b.n	8000dbe <LoopFillZerobss>

08000dba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000dba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000dbc:	3204      	adds	r2, #4

08000dbe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000dbe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000dc0:	d3fb      	bcc.n	8000dba <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000dc2:	f7ff ffd7 	bl	8000d74 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000dc6:	f003 fc87 	bl	80046d8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000dca:	f7ff fcee 	bl	80007aa <main>
  bx  lr    
 8000dce:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000dd0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000dd4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000dd8:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000ddc:	0800478c 	.word	0x0800478c
  ldr r2, =_sbss
 8000de0:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000de4:	20000174 	.word	0x20000174

08000de8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000de8:	e7fe      	b.n	8000de8 <ADC_IRQHandler>
	...

08000dec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000df0:	4b0e      	ldr	r3, [pc, #56]	; (8000e2c <HAL_Init+0x40>)
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	4a0d      	ldr	r2, [pc, #52]	; (8000e2c <HAL_Init+0x40>)
 8000df6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000dfa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000dfc:	4b0b      	ldr	r3, [pc, #44]	; (8000e2c <HAL_Init+0x40>)
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	4a0a      	ldr	r2, [pc, #40]	; (8000e2c <HAL_Init+0x40>)
 8000e02:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000e06:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e08:	4b08      	ldr	r3, [pc, #32]	; (8000e2c <HAL_Init+0x40>)
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	4a07      	ldr	r2, [pc, #28]	; (8000e2c <HAL_Init+0x40>)
 8000e0e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e12:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e14:	2003      	movs	r0, #3
 8000e16:	f000 ff8d 	bl	8001d34 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e1a:	200f      	movs	r0, #15
 8000e1c:	f000 f808 	bl	8000e30 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e20:	f7ff fe60 	bl	8000ae4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e24:	2300      	movs	r3, #0
}
 8000e26:	4618      	mov	r0, r3
 8000e28:	bd80      	pop	{r7, pc}
 8000e2a:	bf00      	nop
 8000e2c:	40023c00 	.word	0x40023c00

08000e30 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b082      	sub	sp, #8
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e38:	4b12      	ldr	r3, [pc, #72]	; (8000e84 <HAL_InitTick+0x54>)
 8000e3a:	681a      	ldr	r2, [r3, #0]
 8000e3c:	4b12      	ldr	r3, [pc, #72]	; (8000e88 <HAL_InitTick+0x58>)
 8000e3e:	781b      	ldrb	r3, [r3, #0]
 8000e40:	4619      	mov	r1, r3
 8000e42:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e46:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e4e:	4618      	mov	r0, r3
 8000e50:	f000 ffa5 	bl	8001d9e <HAL_SYSTICK_Config>
 8000e54:	4603      	mov	r3, r0
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d001      	beq.n	8000e5e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e5a:	2301      	movs	r3, #1
 8000e5c:	e00e      	b.n	8000e7c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	2b0f      	cmp	r3, #15
 8000e62:	d80a      	bhi.n	8000e7a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e64:	2200      	movs	r2, #0
 8000e66:	6879      	ldr	r1, [r7, #4]
 8000e68:	f04f 30ff 	mov.w	r0, #4294967295
 8000e6c:	f000 ff6d 	bl	8001d4a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e70:	4a06      	ldr	r2, [pc, #24]	; (8000e8c <HAL_InitTick+0x5c>)
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e76:	2300      	movs	r3, #0
 8000e78:	e000      	b.n	8000e7c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e7a:	2301      	movs	r3, #1
}
 8000e7c:	4618      	mov	r0, r3
 8000e7e:	3708      	adds	r7, #8
 8000e80:	46bd      	mov	sp, r7
 8000e82:	bd80      	pop	{r7, pc}
 8000e84:	20000000 	.word	0x20000000
 8000e88:	20000008 	.word	0x20000008
 8000e8c:	20000004 	.word	0x20000004

08000e90 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e90:	b480      	push	{r7}
 8000e92:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e94:	4b06      	ldr	r3, [pc, #24]	; (8000eb0 <HAL_IncTick+0x20>)
 8000e96:	781b      	ldrb	r3, [r3, #0]
 8000e98:	461a      	mov	r2, r3
 8000e9a:	4b06      	ldr	r3, [pc, #24]	; (8000eb4 <HAL_IncTick+0x24>)
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	4413      	add	r3, r2
 8000ea0:	4a04      	ldr	r2, [pc, #16]	; (8000eb4 <HAL_IncTick+0x24>)
 8000ea2:	6013      	str	r3, [r2, #0]
}
 8000ea4:	bf00      	nop
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eac:	4770      	bx	lr
 8000eae:	bf00      	nop
 8000eb0:	20000008 	.word	0x20000008
 8000eb4:	20000170 	.word	0x20000170

08000eb8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000eb8:	b480      	push	{r7}
 8000eba:	af00      	add	r7, sp, #0
  return uwTick;
 8000ebc:	4b03      	ldr	r3, [pc, #12]	; (8000ecc <HAL_GetTick+0x14>)
 8000ebe:	681b      	ldr	r3, [r3, #0]
}
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec8:	4770      	bx	lr
 8000eca:	bf00      	nop
 8000ecc:	20000170 	.word	0x20000170

08000ed0 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b084      	sub	sp, #16
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d101      	bne.n	8000ee2 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8000ede:	2301      	movs	r3, #1
 8000ee0:	e0ed      	b.n	80010be <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000ee8:	b2db      	uxtb	r3, r3
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d102      	bne.n	8000ef4 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8000eee:	6878      	ldr	r0, [r7, #4]
 8000ef0:	f7ff fe20 	bl	8000b34 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	681a      	ldr	r2, [r3, #0]
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	f042 0201 	orr.w	r2, r2, #1
 8000f02:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000f04:	f7ff ffd8 	bl	8000eb8 <HAL_GetTick>
 8000f08:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000f0a:	e012      	b.n	8000f32 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000f0c:	f7ff ffd4 	bl	8000eb8 <HAL_GetTick>
 8000f10:	4602      	mov	r2, r0
 8000f12:	68fb      	ldr	r3, [r7, #12]
 8000f14:	1ad3      	subs	r3, r2, r3
 8000f16:	2b0a      	cmp	r3, #10
 8000f18:	d90b      	bls.n	8000f32 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f1e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	2205      	movs	r2, #5
 8000f2a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000f2e:	2301      	movs	r3, #1
 8000f30:	e0c5      	b.n	80010be <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	685b      	ldr	r3, [r3, #4]
 8000f38:	f003 0301 	and.w	r3, r3, #1
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d0e5      	beq.n	8000f0c <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	681a      	ldr	r2, [r3, #0]
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	f022 0202 	bic.w	r2, r2, #2
 8000f4e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000f50:	f7ff ffb2 	bl	8000eb8 <HAL_GetTick>
 8000f54:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000f56:	e012      	b.n	8000f7e <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000f58:	f7ff ffae 	bl	8000eb8 <HAL_GetTick>
 8000f5c:	4602      	mov	r2, r0
 8000f5e:	68fb      	ldr	r3, [r7, #12]
 8000f60:	1ad3      	subs	r3, r2, r3
 8000f62:	2b0a      	cmp	r3, #10
 8000f64:	d90b      	bls.n	8000f7e <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f6a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	2205      	movs	r2, #5
 8000f76:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000f7a:	2301      	movs	r3, #1
 8000f7c:	e09f      	b.n	80010be <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	685b      	ldr	r3, [r3, #4]
 8000f84:	f003 0302 	and.w	r3, r3, #2
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d1e5      	bne.n	8000f58 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	7e1b      	ldrb	r3, [r3, #24]
 8000f90:	2b01      	cmp	r3, #1
 8000f92:	d108      	bne.n	8000fa6 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	681a      	ldr	r2, [r3, #0]
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000fa2:	601a      	str	r2, [r3, #0]
 8000fa4:	e007      	b.n	8000fb6 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	681a      	ldr	r2, [r3, #0]
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000fb4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	7e5b      	ldrb	r3, [r3, #25]
 8000fba:	2b01      	cmp	r3, #1
 8000fbc:	d108      	bne.n	8000fd0 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	681a      	ldr	r2, [r3, #0]
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000fcc:	601a      	str	r2, [r3, #0]
 8000fce:	e007      	b.n	8000fe0 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	681a      	ldr	r2, [r3, #0]
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000fde:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	7e9b      	ldrb	r3, [r3, #26]
 8000fe4:	2b01      	cmp	r3, #1
 8000fe6:	d108      	bne.n	8000ffa <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	681a      	ldr	r2, [r3, #0]
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	f042 0220 	orr.w	r2, r2, #32
 8000ff6:	601a      	str	r2, [r3, #0]
 8000ff8:	e007      	b.n	800100a <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	681a      	ldr	r2, [r3, #0]
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	f022 0220 	bic.w	r2, r2, #32
 8001008:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	7edb      	ldrb	r3, [r3, #27]
 800100e:	2b01      	cmp	r3, #1
 8001010:	d108      	bne.n	8001024 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	681a      	ldr	r2, [r3, #0]
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	f022 0210 	bic.w	r2, r2, #16
 8001020:	601a      	str	r2, [r3, #0]
 8001022:	e007      	b.n	8001034 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	681a      	ldr	r2, [r3, #0]
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	f042 0210 	orr.w	r2, r2, #16
 8001032:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	7f1b      	ldrb	r3, [r3, #28]
 8001038:	2b01      	cmp	r3, #1
 800103a:	d108      	bne.n	800104e <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	681a      	ldr	r2, [r3, #0]
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	f042 0208 	orr.w	r2, r2, #8
 800104a:	601a      	str	r2, [r3, #0]
 800104c:	e007      	b.n	800105e <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	681a      	ldr	r2, [r3, #0]
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	f022 0208 	bic.w	r2, r2, #8
 800105c:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	7f5b      	ldrb	r3, [r3, #29]
 8001062:	2b01      	cmp	r3, #1
 8001064:	d108      	bne.n	8001078 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	681a      	ldr	r2, [r3, #0]
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	f042 0204 	orr.w	r2, r2, #4
 8001074:	601a      	str	r2, [r3, #0]
 8001076:	e007      	b.n	8001088 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	681a      	ldr	r2, [r3, #0]
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	f022 0204 	bic.w	r2, r2, #4
 8001086:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	689a      	ldr	r2, [r3, #8]
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	68db      	ldr	r3, [r3, #12]
 8001090:	431a      	orrs	r2, r3
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	691b      	ldr	r3, [r3, #16]
 8001096:	431a      	orrs	r2, r3
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	695b      	ldr	r3, [r3, #20]
 800109c:	ea42 0103 	orr.w	r1, r2, r3
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	685b      	ldr	r3, [r3, #4]
 80010a4:	1e5a      	subs	r2, r3, #1
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	430a      	orrs	r2, r1
 80010ac:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	2200      	movs	r2, #0
 80010b2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	2201      	movs	r2, #1
 80010b8:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80010bc:	2300      	movs	r3, #0
}
 80010be:	4618      	mov	r0, r3
 80010c0:	3710      	adds	r7, #16
 80010c2:	46bd      	mov	sp, r7
 80010c4:	bd80      	pop	{r7, pc}
	...

080010c8 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 80010c8:	b480      	push	{r7}
 80010ca:	b087      	sub	sp, #28
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]
 80010d0:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	f893 3020 	ldrb.w	r3, [r3, #32]
 80010de:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 80010e0:	7cfb      	ldrb	r3, [r7, #19]
 80010e2:	2b01      	cmp	r3, #1
 80010e4:	d003      	beq.n	80010ee <HAL_CAN_ConfigFilter+0x26>
 80010e6:	7cfb      	ldrb	r3, [r7, #19]
 80010e8:	2b02      	cmp	r3, #2
 80010ea:	f040 80be 	bne.w	800126a <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 80010ee:	4b65      	ldr	r3, [pc, #404]	; (8001284 <HAL_CAN_ConfigFilter+0x1bc>)
 80010f0:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80010f2:	697b      	ldr	r3, [r7, #20]
 80010f4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80010f8:	f043 0201 	orr.w	r2, r3, #1
 80010fc:	697b      	ldr	r3, [r7, #20]
 80010fe:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8001102:	697b      	ldr	r3, [r7, #20]
 8001104:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001108:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800110c:	697b      	ldr	r3, [r7, #20]
 800110e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8001112:	697b      	ldr	r3, [r7, #20]
 8001114:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8001118:	683b      	ldr	r3, [r7, #0]
 800111a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800111c:	021b      	lsls	r3, r3, #8
 800111e:	431a      	orrs	r2, r3
 8001120:	697b      	ldr	r3, [r7, #20]
 8001122:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8001126:	683b      	ldr	r3, [r7, #0]
 8001128:	695b      	ldr	r3, [r3, #20]
 800112a:	f003 031f 	and.w	r3, r3, #31
 800112e:	2201      	movs	r2, #1
 8001130:	fa02 f303 	lsl.w	r3, r2, r3
 8001134:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8001136:	697b      	ldr	r3, [r7, #20]
 8001138:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800113c:	68fb      	ldr	r3, [r7, #12]
 800113e:	43db      	mvns	r3, r3
 8001140:	401a      	ands	r2, r3
 8001142:	697b      	ldr	r3, [r7, #20]
 8001144:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8001148:	683b      	ldr	r3, [r7, #0]
 800114a:	69db      	ldr	r3, [r3, #28]
 800114c:	2b00      	cmp	r3, #0
 800114e:	d123      	bne.n	8001198 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8001150:	697b      	ldr	r3, [r7, #20]
 8001152:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001156:	68fb      	ldr	r3, [r7, #12]
 8001158:	43db      	mvns	r3, r3
 800115a:	401a      	ands	r2, r3
 800115c:	697b      	ldr	r3, [r7, #20]
 800115e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001162:	683b      	ldr	r3, [r7, #0]
 8001164:	68db      	ldr	r3, [r3, #12]
 8001166:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001168:	683b      	ldr	r3, [r7, #0]
 800116a:	685b      	ldr	r3, [r3, #4]
 800116c:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800116e:	683a      	ldr	r2, [r7, #0]
 8001170:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001172:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001174:	697b      	ldr	r3, [r7, #20]
 8001176:	3248      	adds	r2, #72	; 0x48
 8001178:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800117c:	683b      	ldr	r3, [r7, #0]
 800117e:	689b      	ldr	r3, [r3, #8]
 8001180:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8001182:	683b      	ldr	r3, [r7, #0]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001188:	683b      	ldr	r3, [r7, #0]
 800118a:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800118c:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800118e:	6979      	ldr	r1, [r7, #20]
 8001190:	3348      	adds	r3, #72	; 0x48
 8001192:	00db      	lsls	r3, r3, #3
 8001194:	440b      	add	r3, r1
 8001196:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8001198:	683b      	ldr	r3, [r7, #0]
 800119a:	69db      	ldr	r3, [r3, #28]
 800119c:	2b01      	cmp	r3, #1
 800119e:	d122      	bne.n	80011e6 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80011a0:	697b      	ldr	r3, [r7, #20]
 80011a2:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80011a6:	68fb      	ldr	r3, [r7, #12]
 80011a8:	431a      	orrs	r2, r3
 80011aa:	697b      	ldr	r3, [r7, #20]
 80011ac:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80011b0:	683b      	ldr	r3, [r7, #0]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80011b6:	683b      	ldr	r3, [r7, #0]
 80011b8:	685b      	ldr	r3, [r3, #4]
 80011ba:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80011bc:	683a      	ldr	r2, [r7, #0]
 80011be:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80011c0:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80011c2:	697b      	ldr	r3, [r7, #20]
 80011c4:	3248      	adds	r2, #72	; 0x48
 80011c6:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80011ca:	683b      	ldr	r3, [r7, #0]
 80011cc:	689b      	ldr	r3, [r3, #8]
 80011ce:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80011d0:	683b      	ldr	r3, [r7, #0]
 80011d2:	68db      	ldr	r3, [r3, #12]
 80011d4:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80011d6:	683b      	ldr	r3, [r7, #0]
 80011d8:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80011da:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80011dc:	6979      	ldr	r1, [r7, #20]
 80011de:	3348      	adds	r3, #72	; 0x48
 80011e0:	00db      	lsls	r3, r3, #3
 80011e2:	440b      	add	r3, r1
 80011e4:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80011e6:	683b      	ldr	r3, [r7, #0]
 80011e8:	699b      	ldr	r3, [r3, #24]
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d109      	bne.n	8001202 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80011ee:	697b      	ldr	r3, [r7, #20]
 80011f0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80011f4:	68fb      	ldr	r3, [r7, #12]
 80011f6:	43db      	mvns	r3, r3
 80011f8:	401a      	ands	r2, r3
 80011fa:	697b      	ldr	r3, [r7, #20]
 80011fc:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8001200:	e007      	b.n	8001212 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8001202:	697b      	ldr	r3, [r7, #20]
 8001204:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001208:	68fb      	ldr	r3, [r7, #12]
 800120a:	431a      	orrs	r2, r3
 800120c:	697b      	ldr	r3, [r7, #20]
 800120e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8001212:	683b      	ldr	r3, [r7, #0]
 8001214:	691b      	ldr	r3, [r3, #16]
 8001216:	2b00      	cmp	r3, #0
 8001218:	d109      	bne.n	800122e <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 800121a:	697b      	ldr	r3, [r7, #20]
 800121c:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001220:	68fb      	ldr	r3, [r7, #12]
 8001222:	43db      	mvns	r3, r3
 8001224:	401a      	ands	r2, r3
 8001226:	697b      	ldr	r3, [r7, #20]
 8001228:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 800122c:	e007      	b.n	800123e <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 800122e:	697b      	ldr	r3, [r7, #20]
 8001230:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	431a      	orrs	r2, r3
 8001238:	697b      	ldr	r3, [r7, #20]
 800123a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 800123e:	683b      	ldr	r3, [r7, #0]
 8001240:	6a1b      	ldr	r3, [r3, #32]
 8001242:	2b01      	cmp	r3, #1
 8001244:	d107      	bne.n	8001256 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8001246:	697b      	ldr	r3, [r7, #20]
 8001248:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800124c:	68fb      	ldr	r3, [r7, #12]
 800124e:	431a      	orrs	r2, r3
 8001250:	697b      	ldr	r3, [r7, #20]
 8001252:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001256:	697b      	ldr	r3, [r7, #20]
 8001258:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800125c:	f023 0201 	bic.w	r2, r3, #1
 8001260:	697b      	ldr	r3, [r7, #20]
 8001262:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8001266:	2300      	movs	r3, #0
 8001268:	e006      	b.n	8001278 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800126e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001276:	2301      	movs	r3, #1
  }
}
 8001278:	4618      	mov	r0, r3
 800127a:	371c      	adds	r7, #28
 800127c:	46bd      	mov	sp, r7
 800127e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001282:	4770      	bx	lr
 8001284:	40006400 	.word	0x40006400

08001288 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b084      	sub	sp, #16
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001296:	b2db      	uxtb	r3, r3
 8001298:	2b01      	cmp	r3, #1
 800129a:	d12e      	bne.n	80012fa <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	2202      	movs	r2, #2
 80012a0:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	681a      	ldr	r2, [r3, #0]
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	f022 0201 	bic.w	r2, r2, #1
 80012b2:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80012b4:	f7ff fe00 	bl	8000eb8 <HAL_GetTick>
 80012b8:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80012ba:	e012      	b.n	80012e2 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80012bc:	f7ff fdfc 	bl	8000eb8 <HAL_GetTick>
 80012c0:	4602      	mov	r2, r0
 80012c2:	68fb      	ldr	r3, [r7, #12]
 80012c4:	1ad3      	subs	r3, r2, r3
 80012c6:	2b0a      	cmp	r3, #10
 80012c8:	d90b      	bls.n	80012e2 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012ce:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	2205      	movs	r2, #5
 80012da:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80012de:	2301      	movs	r3, #1
 80012e0:	e012      	b.n	8001308 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	685b      	ldr	r3, [r3, #4]
 80012e8:	f003 0301 	and.w	r3, r3, #1
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d1e5      	bne.n	80012bc <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	2200      	movs	r2, #0
 80012f4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 80012f6:	2300      	movs	r3, #0
 80012f8:	e006      	b.n	8001308 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012fe:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001306:	2301      	movs	r3, #1
  }
}
 8001308:	4618      	mov	r0, r3
 800130a:	3710      	adds	r7, #16
 800130c:	46bd      	mov	sp, r7
 800130e:	bd80      	pop	{r7, pc}

08001310 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8001310:	b480      	push	{r7}
 8001312:	b089      	sub	sp, #36	; 0x24
 8001314:	af00      	add	r7, sp, #0
 8001316:	60f8      	str	r0, [r7, #12]
 8001318:	60b9      	str	r1, [r7, #8]
 800131a:	607a      	str	r2, [r7, #4]
 800131c:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 800131e:	68fb      	ldr	r3, [r7, #12]
 8001320:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001324:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8001326:	68fb      	ldr	r3, [r7, #12]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	689b      	ldr	r3, [r3, #8]
 800132c:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 800132e:	7ffb      	ldrb	r3, [r7, #31]
 8001330:	2b01      	cmp	r3, #1
 8001332:	d003      	beq.n	800133c <HAL_CAN_AddTxMessage+0x2c>
 8001334:	7ffb      	ldrb	r3, [r7, #31]
 8001336:	2b02      	cmp	r3, #2
 8001338:	f040 80b8 	bne.w	80014ac <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800133c:	69bb      	ldr	r3, [r7, #24]
 800133e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001342:	2b00      	cmp	r3, #0
 8001344:	d10a      	bne.n	800135c <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001346:	69bb      	ldr	r3, [r7, #24]
 8001348:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800134c:	2b00      	cmp	r3, #0
 800134e:	d105      	bne.n	800135c <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8001350:	69bb      	ldr	r3, [r7, #24]
 8001352:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001356:	2b00      	cmp	r3, #0
 8001358:	f000 80a0 	beq.w	800149c <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 800135c:	69bb      	ldr	r3, [r7, #24]
 800135e:	0e1b      	lsrs	r3, r3, #24
 8001360:	f003 0303 	and.w	r3, r3, #3
 8001364:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8001366:	697b      	ldr	r3, [r7, #20]
 8001368:	2b02      	cmp	r3, #2
 800136a:	d907      	bls.n	800137c <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001370:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001378:	2301      	movs	r3, #1
 800137a:	e09e      	b.n	80014ba <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 800137c:	2201      	movs	r2, #1
 800137e:	697b      	ldr	r3, [r7, #20]
 8001380:	409a      	lsls	r2, r3
 8001382:	683b      	ldr	r3, [r7, #0]
 8001384:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8001386:	68bb      	ldr	r3, [r7, #8]
 8001388:	689b      	ldr	r3, [r3, #8]
 800138a:	2b00      	cmp	r3, #0
 800138c:	d10d      	bne.n	80013aa <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800138e:	68bb      	ldr	r3, [r7, #8]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8001394:	68bb      	ldr	r3, [r7, #8]
 8001396:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001398:	68f9      	ldr	r1, [r7, #12]
 800139a:	6809      	ldr	r1, [r1, #0]
 800139c:	431a      	orrs	r2, r3
 800139e:	697b      	ldr	r3, [r7, #20]
 80013a0:	3318      	adds	r3, #24
 80013a2:	011b      	lsls	r3, r3, #4
 80013a4:	440b      	add	r3, r1
 80013a6:	601a      	str	r2, [r3, #0]
 80013a8:	e00f      	b.n	80013ca <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80013aa:	68bb      	ldr	r3, [r7, #8]
 80013ac:	685b      	ldr	r3, [r3, #4]
 80013ae:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 80013b0:	68bb      	ldr	r3, [r7, #8]
 80013b2:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80013b4:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 80013b6:	68bb      	ldr	r3, [r7, #8]
 80013b8:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80013ba:	68f9      	ldr	r1, [r7, #12]
 80013bc:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 80013be:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80013c0:	697b      	ldr	r3, [r7, #20]
 80013c2:	3318      	adds	r3, #24
 80013c4:	011b      	lsls	r3, r3, #4
 80013c6:	440b      	add	r3, r1
 80013c8:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80013ca:	68fb      	ldr	r3, [r7, #12]
 80013cc:	6819      	ldr	r1, [r3, #0]
 80013ce:	68bb      	ldr	r3, [r7, #8]
 80013d0:	691a      	ldr	r2, [r3, #16]
 80013d2:	697b      	ldr	r3, [r7, #20]
 80013d4:	3318      	adds	r3, #24
 80013d6:	011b      	lsls	r3, r3, #4
 80013d8:	440b      	add	r3, r1
 80013da:	3304      	adds	r3, #4
 80013dc:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80013de:	68bb      	ldr	r3, [r7, #8]
 80013e0:	7d1b      	ldrb	r3, [r3, #20]
 80013e2:	2b01      	cmp	r3, #1
 80013e4:	d111      	bne.n	800140a <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80013e6:	68fb      	ldr	r3, [r7, #12]
 80013e8:	681a      	ldr	r2, [r3, #0]
 80013ea:	697b      	ldr	r3, [r7, #20]
 80013ec:	3318      	adds	r3, #24
 80013ee:	011b      	lsls	r3, r3, #4
 80013f0:	4413      	add	r3, r2
 80013f2:	3304      	adds	r3, #4
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	68fa      	ldr	r2, [r7, #12]
 80013f8:	6811      	ldr	r1, [r2, #0]
 80013fa:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80013fe:	697b      	ldr	r3, [r7, #20]
 8001400:	3318      	adds	r3, #24
 8001402:	011b      	lsls	r3, r3, #4
 8001404:	440b      	add	r3, r1
 8001406:	3304      	adds	r3, #4
 8001408:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	3307      	adds	r3, #7
 800140e:	781b      	ldrb	r3, [r3, #0]
 8001410:	061a      	lsls	r2, r3, #24
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	3306      	adds	r3, #6
 8001416:	781b      	ldrb	r3, [r3, #0]
 8001418:	041b      	lsls	r3, r3, #16
 800141a:	431a      	orrs	r2, r3
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	3305      	adds	r3, #5
 8001420:	781b      	ldrb	r3, [r3, #0]
 8001422:	021b      	lsls	r3, r3, #8
 8001424:	4313      	orrs	r3, r2
 8001426:	687a      	ldr	r2, [r7, #4]
 8001428:	3204      	adds	r2, #4
 800142a:	7812      	ldrb	r2, [r2, #0]
 800142c:	4610      	mov	r0, r2
 800142e:	68fa      	ldr	r2, [r7, #12]
 8001430:	6811      	ldr	r1, [r2, #0]
 8001432:	ea43 0200 	orr.w	r2, r3, r0
 8001436:	697b      	ldr	r3, [r7, #20]
 8001438:	011b      	lsls	r3, r3, #4
 800143a:	440b      	add	r3, r1
 800143c:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8001440:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	3303      	adds	r3, #3
 8001446:	781b      	ldrb	r3, [r3, #0]
 8001448:	061a      	lsls	r2, r3, #24
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	3302      	adds	r3, #2
 800144e:	781b      	ldrb	r3, [r3, #0]
 8001450:	041b      	lsls	r3, r3, #16
 8001452:	431a      	orrs	r2, r3
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	3301      	adds	r3, #1
 8001458:	781b      	ldrb	r3, [r3, #0]
 800145a:	021b      	lsls	r3, r3, #8
 800145c:	4313      	orrs	r3, r2
 800145e:	687a      	ldr	r2, [r7, #4]
 8001460:	7812      	ldrb	r2, [r2, #0]
 8001462:	4610      	mov	r0, r2
 8001464:	68fa      	ldr	r2, [r7, #12]
 8001466:	6811      	ldr	r1, [r2, #0]
 8001468:	ea43 0200 	orr.w	r2, r3, r0
 800146c:	697b      	ldr	r3, [r7, #20]
 800146e:	011b      	lsls	r3, r3, #4
 8001470:	440b      	add	r3, r1
 8001472:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8001476:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	681a      	ldr	r2, [r3, #0]
 800147c:	697b      	ldr	r3, [r7, #20]
 800147e:	3318      	adds	r3, #24
 8001480:	011b      	lsls	r3, r3, #4
 8001482:	4413      	add	r3, r2
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	68fa      	ldr	r2, [r7, #12]
 8001488:	6811      	ldr	r1, [r2, #0]
 800148a:	f043 0201 	orr.w	r2, r3, #1
 800148e:	697b      	ldr	r3, [r7, #20]
 8001490:	3318      	adds	r3, #24
 8001492:	011b      	lsls	r3, r3, #4
 8001494:	440b      	add	r3, r1
 8001496:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8001498:	2300      	movs	r3, #0
 800149a:	e00e      	b.n	80014ba <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014a0:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 80014a8:	2301      	movs	r3, #1
 80014aa:	e006      	b.n	80014ba <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80014ac:	68fb      	ldr	r3, [r7, #12]
 80014ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014b0:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80014b8:	2301      	movs	r3, #1
  }
}
 80014ba:	4618      	mov	r0, r3
 80014bc:	3724      	adds	r7, #36	; 0x24
 80014be:	46bd      	mov	sp, r7
 80014c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c4:	4770      	bx	lr

080014c6 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80014c6:	b480      	push	{r7}
 80014c8:	b087      	sub	sp, #28
 80014ca:	af00      	add	r7, sp, #0
 80014cc:	60f8      	str	r0, [r7, #12]
 80014ce:	60b9      	str	r1, [r7, #8]
 80014d0:	607a      	str	r2, [r7, #4]
 80014d2:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80014da:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80014dc:	7dfb      	ldrb	r3, [r7, #23]
 80014de:	2b01      	cmp	r3, #1
 80014e0:	d003      	beq.n	80014ea <HAL_CAN_GetRxMessage+0x24>
 80014e2:	7dfb      	ldrb	r3, [r7, #23]
 80014e4:	2b02      	cmp	r3, #2
 80014e6:	f040 80f3 	bne.w	80016d0 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80014ea:	68bb      	ldr	r3, [r7, #8]
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d10e      	bne.n	800150e <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	68db      	ldr	r3, [r3, #12]
 80014f6:	f003 0303 	and.w	r3, r3, #3
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d116      	bne.n	800152c <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80014fe:	68fb      	ldr	r3, [r7, #12]
 8001500:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001502:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800150a:	2301      	movs	r3, #1
 800150c:	e0e7      	b.n	80016de <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	691b      	ldr	r3, [r3, #16]
 8001514:	f003 0303 	and.w	r3, r3, #3
 8001518:	2b00      	cmp	r3, #0
 800151a:	d107      	bne.n	800152c <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001520:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001528:	2301      	movs	r3, #1
 800152a:	e0d8      	b.n	80016de <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	681a      	ldr	r2, [r3, #0]
 8001530:	68bb      	ldr	r3, [r7, #8]
 8001532:	331b      	adds	r3, #27
 8001534:	011b      	lsls	r3, r3, #4
 8001536:	4413      	add	r3, r2
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	f003 0204 	and.w	r2, r3, #4
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	689b      	ldr	r3, [r3, #8]
 8001546:	2b00      	cmp	r3, #0
 8001548:	d10c      	bne.n	8001564 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 800154a:	68fb      	ldr	r3, [r7, #12]
 800154c:	681a      	ldr	r2, [r3, #0]
 800154e:	68bb      	ldr	r3, [r7, #8]
 8001550:	331b      	adds	r3, #27
 8001552:	011b      	lsls	r3, r3, #4
 8001554:	4413      	add	r3, r2
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	0d5b      	lsrs	r3, r3, #21
 800155a:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	601a      	str	r2, [r3, #0]
 8001562:	e00b      	b.n	800157c <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	681a      	ldr	r2, [r3, #0]
 8001568:	68bb      	ldr	r3, [r7, #8]
 800156a:	331b      	adds	r3, #27
 800156c:	011b      	lsls	r3, r3, #4
 800156e:	4413      	add	r3, r2
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	08db      	lsrs	r3, r3, #3
 8001574:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	681a      	ldr	r2, [r3, #0]
 8001580:	68bb      	ldr	r3, [r7, #8]
 8001582:	331b      	adds	r3, #27
 8001584:	011b      	lsls	r3, r3, #4
 8001586:	4413      	add	r3, r2
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	f003 0202 	and.w	r2, r3, #2
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8001592:	68fb      	ldr	r3, [r7, #12]
 8001594:	681a      	ldr	r2, [r3, #0]
 8001596:	68bb      	ldr	r3, [r7, #8]
 8001598:	331b      	adds	r3, #27
 800159a:	011b      	lsls	r3, r3, #4
 800159c:	4413      	add	r3, r2
 800159e:	3304      	adds	r3, #4
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	f003 020f 	and.w	r2, r3, #15
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	681a      	ldr	r2, [r3, #0]
 80015ae:	68bb      	ldr	r3, [r7, #8]
 80015b0:	331b      	adds	r3, #27
 80015b2:	011b      	lsls	r3, r3, #4
 80015b4:	4413      	add	r3, r2
 80015b6:	3304      	adds	r3, #4
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	0a1b      	lsrs	r3, r3, #8
 80015bc:	b2da      	uxtb	r2, r3
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80015c2:	68fb      	ldr	r3, [r7, #12]
 80015c4:	681a      	ldr	r2, [r3, #0]
 80015c6:	68bb      	ldr	r3, [r7, #8]
 80015c8:	331b      	adds	r3, #27
 80015ca:	011b      	lsls	r3, r3, #4
 80015cc:	4413      	add	r3, r2
 80015ce:	3304      	adds	r3, #4
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	0c1b      	lsrs	r3, r3, #16
 80015d4:	b29a      	uxth	r2, r3
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	681a      	ldr	r2, [r3, #0]
 80015de:	68bb      	ldr	r3, [r7, #8]
 80015e0:	011b      	lsls	r3, r3, #4
 80015e2:	4413      	add	r3, r2
 80015e4:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	b2da      	uxtb	r2, r3
 80015ec:	683b      	ldr	r3, [r7, #0]
 80015ee:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	681a      	ldr	r2, [r3, #0]
 80015f4:	68bb      	ldr	r3, [r7, #8]
 80015f6:	011b      	lsls	r3, r3, #4
 80015f8:	4413      	add	r3, r2
 80015fa:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	0a1a      	lsrs	r2, r3, #8
 8001602:	683b      	ldr	r3, [r7, #0]
 8001604:	3301      	adds	r3, #1
 8001606:	b2d2      	uxtb	r2, r2
 8001608:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	681a      	ldr	r2, [r3, #0]
 800160e:	68bb      	ldr	r3, [r7, #8]
 8001610:	011b      	lsls	r3, r3, #4
 8001612:	4413      	add	r3, r2
 8001614:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	0c1a      	lsrs	r2, r3, #16
 800161c:	683b      	ldr	r3, [r7, #0]
 800161e:	3302      	adds	r3, #2
 8001620:	b2d2      	uxtb	r2, r2
 8001622:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	681a      	ldr	r2, [r3, #0]
 8001628:	68bb      	ldr	r3, [r7, #8]
 800162a:	011b      	lsls	r3, r3, #4
 800162c:	4413      	add	r3, r2
 800162e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	0e1a      	lsrs	r2, r3, #24
 8001636:	683b      	ldr	r3, [r7, #0]
 8001638:	3303      	adds	r3, #3
 800163a:	b2d2      	uxtb	r2, r2
 800163c:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	681a      	ldr	r2, [r3, #0]
 8001642:	68bb      	ldr	r3, [r7, #8]
 8001644:	011b      	lsls	r3, r3, #4
 8001646:	4413      	add	r3, r2
 8001648:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800164c:	681a      	ldr	r2, [r3, #0]
 800164e:	683b      	ldr	r3, [r7, #0]
 8001650:	3304      	adds	r3, #4
 8001652:	b2d2      	uxtb	r2, r2
 8001654:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	681a      	ldr	r2, [r3, #0]
 800165a:	68bb      	ldr	r3, [r7, #8]
 800165c:	011b      	lsls	r3, r3, #4
 800165e:	4413      	add	r3, r2
 8001660:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	0a1a      	lsrs	r2, r3, #8
 8001668:	683b      	ldr	r3, [r7, #0]
 800166a:	3305      	adds	r3, #5
 800166c:	b2d2      	uxtb	r2, r2
 800166e:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	681a      	ldr	r2, [r3, #0]
 8001674:	68bb      	ldr	r3, [r7, #8]
 8001676:	011b      	lsls	r3, r3, #4
 8001678:	4413      	add	r3, r2
 800167a:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	0c1a      	lsrs	r2, r3, #16
 8001682:	683b      	ldr	r3, [r7, #0]
 8001684:	3306      	adds	r3, #6
 8001686:	b2d2      	uxtb	r2, r2
 8001688:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 800168a:	68fb      	ldr	r3, [r7, #12]
 800168c:	681a      	ldr	r2, [r3, #0]
 800168e:	68bb      	ldr	r3, [r7, #8]
 8001690:	011b      	lsls	r3, r3, #4
 8001692:	4413      	add	r3, r2
 8001694:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	0e1a      	lsrs	r2, r3, #24
 800169c:	683b      	ldr	r3, [r7, #0]
 800169e:	3307      	adds	r3, #7
 80016a0:	b2d2      	uxtb	r2, r2
 80016a2:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80016a4:	68bb      	ldr	r3, [r7, #8]
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d108      	bne.n	80016bc <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80016aa:	68fb      	ldr	r3, [r7, #12]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	68da      	ldr	r2, [r3, #12]
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	f042 0220 	orr.w	r2, r2, #32
 80016b8:	60da      	str	r2, [r3, #12]
 80016ba:	e007      	b.n	80016cc <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	691a      	ldr	r2, [r3, #16]
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	f042 0220 	orr.w	r2, r2, #32
 80016ca:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80016cc:	2300      	movs	r3, #0
 80016ce:	e006      	b.n	80016de <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016d4:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80016dc:	2301      	movs	r3, #1
  }
}
 80016de:	4618      	mov	r0, r3
 80016e0:	371c      	adds	r7, #28
 80016e2:	46bd      	mov	sp, r7
 80016e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e8:	4770      	bx	lr

080016ea <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80016ea:	b480      	push	{r7}
 80016ec:	b085      	sub	sp, #20
 80016ee:	af00      	add	r7, sp, #0
 80016f0:	6078      	str	r0, [r7, #4]
 80016f2:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80016fa:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80016fc:	7bfb      	ldrb	r3, [r7, #15]
 80016fe:	2b01      	cmp	r3, #1
 8001700:	d002      	beq.n	8001708 <HAL_CAN_ActivateNotification+0x1e>
 8001702:	7bfb      	ldrb	r3, [r7, #15]
 8001704:	2b02      	cmp	r3, #2
 8001706:	d109      	bne.n	800171c <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	6959      	ldr	r1, [r3, #20]
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	683a      	ldr	r2, [r7, #0]
 8001714:	430a      	orrs	r2, r1
 8001716:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8001718:	2300      	movs	r3, #0
 800171a:	e006      	b.n	800172a <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001720:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001728:	2301      	movs	r3, #1
  }
}
 800172a:	4618      	mov	r0, r3
 800172c:	3714      	adds	r7, #20
 800172e:	46bd      	mov	sp, r7
 8001730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001734:	4770      	bx	lr

08001736 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8001736:	b580      	push	{r7, lr}
 8001738:	b08a      	sub	sp, #40	; 0x28
 800173a:	af00      	add	r7, sp, #0
 800173c:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 800173e:	2300      	movs	r3, #0
 8001740:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	695b      	ldr	r3, [r3, #20]
 8001748:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	685b      	ldr	r3, [r3, #4]
 8001750:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	689b      	ldr	r3, [r3, #8]
 8001758:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	68db      	ldr	r3, [r3, #12]
 8001760:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	691b      	ldr	r3, [r3, #16]
 8001768:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	699b      	ldr	r3, [r3, #24]
 8001770:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8001772:	6a3b      	ldr	r3, [r7, #32]
 8001774:	f003 0301 	and.w	r3, r3, #1
 8001778:	2b00      	cmp	r3, #0
 800177a:	d07c      	beq.n	8001876 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 800177c:	69bb      	ldr	r3, [r7, #24]
 800177e:	f003 0301 	and.w	r3, r3, #1
 8001782:	2b00      	cmp	r3, #0
 8001784:	d023      	beq.n	80017ce <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	2201      	movs	r2, #1
 800178c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 800178e:	69bb      	ldr	r3, [r7, #24]
 8001790:	f003 0302 	and.w	r3, r3, #2
 8001794:	2b00      	cmp	r3, #0
 8001796:	d003      	beq.n	80017a0 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8001798:	6878      	ldr	r0, [r7, #4]
 800179a:	f000 f983 	bl	8001aa4 <HAL_CAN_TxMailbox0CompleteCallback>
 800179e:	e016      	b.n	80017ce <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80017a0:	69bb      	ldr	r3, [r7, #24]
 80017a2:	f003 0304 	and.w	r3, r3, #4
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d004      	beq.n	80017b4 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80017aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017ac:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80017b0:	627b      	str	r3, [r7, #36]	; 0x24
 80017b2:	e00c      	b.n	80017ce <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80017b4:	69bb      	ldr	r3, [r7, #24]
 80017b6:	f003 0308 	and.w	r3, r3, #8
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d004      	beq.n	80017c8 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80017be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017c0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80017c4:	627b      	str	r3, [r7, #36]	; 0x24
 80017c6:	e002      	b.n	80017ce <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80017c8:	6878      	ldr	r0, [r7, #4]
 80017ca:	f000 f989 	bl	8001ae0 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80017ce:	69bb      	ldr	r3, [r7, #24]
 80017d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d024      	beq.n	8001822 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80017e0:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80017e2:	69bb      	ldr	r3, [r7, #24]
 80017e4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d003      	beq.n	80017f4 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80017ec:	6878      	ldr	r0, [r7, #4]
 80017ee:	f000 f963 	bl	8001ab8 <HAL_CAN_TxMailbox1CompleteCallback>
 80017f2:	e016      	b.n	8001822 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80017f4:	69bb      	ldr	r3, [r7, #24]
 80017f6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d004      	beq.n	8001808 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80017fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001800:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001804:	627b      	str	r3, [r7, #36]	; 0x24
 8001806:	e00c      	b.n	8001822 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8001808:	69bb      	ldr	r3, [r7, #24]
 800180a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800180e:	2b00      	cmp	r3, #0
 8001810:	d004      	beq.n	800181c <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8001812:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001814:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001818:	627b      	str	r3, [r7, #36]	; 0x24
 800181a:	e002      	b.n	8001822 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 800181c:	6878      	ldr	r0, [r7, #4]
 800181e:	f000 f969 	bl	8001af4 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8001822:	69bb      	ldr	r3, [r7, #24]
 8001824:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001828:	2b00      	cmp	r3, #0
 800182a:	d024      	beq.n	8001876 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001834:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8001836:	69bb      	ldr	r3, [r7, #24]
 8001838:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800183c:	2b00      	cmp	r3, #0
 800183e:	d003      	beq.n	8001848 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001840:	6878      	ldr	r0, [r7, #4]
 8001842:	f000 f943 	bl	8001acc <HAL_CAN_TxMailbox2CompleteCallback>
 8001846:	e016      	b.n	8001876 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8001848:	69bb      	ldr	r3, [r7, #24]
 800184a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800184e:	2b00      	cmp	r3, #0
 8001850:	d004      	beq.n	800185c <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001852:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001854:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001858:	627b      	str	r3, [r7, #36]	; 0x24
 800185a:	e00c      	b.n	8001876 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 800185c:	69bb      	ldr	r3, [r7, #24]
 800185e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001862:	2b00      	cmp	r3, #0
 8001864:	d004      	beq.n	8001870 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8001866:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001868:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800186c:	627b      	str	r3, [r7, #36]	; 0x24
 800186e:	e002      	b.n	8001876 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001870:	6878      	ldr	r0, [r7, #4]
 8001872:	f000 f949 	bl	8001b08 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8001876:	6a3b      	ldr	r3, [r7, #32]
 8001878:	f003 0308 	and.w	r3, r3, #8
 800187c:	2b00      	cmp	r3, #0
 800187e:	d00c      	beq.n	800189a <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8001880:	697b      	ldr	r3, [r7, #20]
 8001882:	f003 0310 	and.w	r3, r3, #16
 8001886:	2b00      	cmp	r3, #0
 8001888:	d007      	beq.n	800189a <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 800188a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800188c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001890:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	2210      	movs	r2, #16
 8001898:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 800189a:	6a3b      	ldr	r3, [r7, #32]
 800189c:	f003 0304 	and.w	r3, r3, #4
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d00b      	beq.n	80018bc <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80018a4:	697b      	ldr	r3, [r7, #20]
 80018a6:	f003 0308 	and.w	r3, r3, #8
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d006      	beq.n	80018bc <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	2208      	movs	r2, #8
 80018b4:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80018b6:	6878      	ldr	r0, [r7, #4]
 80018b8:	f000 f930 	bl	8001b1c <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80018bc:	6a3b      	ldr	r3, [r7, #32]
 80018be:	f003 0302 	and.w	r3, r3, #2
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d009      	beq.n	80018da <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	68db      	ldr	r3, [r3, #12]
 80018cc:	f003 0303 	and.w	r3, r3, #3
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d002      	beq.n	80018da <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80018d4:	6878      	ldr	r0, [r7, #4]
 80018d6:	f7fe fe17 	bl	8000508 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80018da:	6a3b      	ldr	r3, [r7, #32]
 80018dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d00c      	beq.n	80018fe <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80018e4:	693b      	ldr	r3, [r7, #16]
 80018e6:	f003 0310 	and.w	r3, r3, #16
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d007      	beq.n	80018fe <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80018ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018f0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80018f4:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	2210      	movs	r2, #16
 80018fc:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80018fe:	6a3b      	ldr	r3, [r7, #32]
 8001900:	f003 0320 	and.w	r3, r3, #32
 8001904:	2b00      	cmp	r3, #0
 8001906:	d00b      	beq.n	8001920 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8001908:	693b      	ldr	r3, [r7, #16]
 800190a:	f003 0308 	and.w	r3, r3, #8
 800190e:	2b00      	cmp	r3, #0
 8001910:	d006      	beq.n	8001920 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	2208      	movs	r2, #8
 8001918:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 800191a:	6878      	ldr	r0, [r7, #4]
 800191c:	f000 f912 	bl	8001b44 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8001920:	6a3b      	ldr	r3, [r7, #32]
 8001922:	f003 0310 	and.w	r3, r3, #16
 8001926:	2b00      	cmp	r3, #0
 8001928:	d009      	beq.n	800193e <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	691b      	ldr	r3, [r3, #16]
 8001930:	f003 0303 	and.w	r3, r3, #3
 8001934:	2b00      	cmp	r3, #0
 8001936:	d002      	beq.n	800193e <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8001938:	6878      	ldr	r0, [r7, #4]
 800193a:	f000 f8f9 	bl	8001b30 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 800193e:	6a3b      	ldr	r3, [r7, #32]
 8001940:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001944:	2b00      	cmp	r3, #0
 8001946:	d00b      	beq.n	8001960 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8001948:	69fb      	ldr	r3, [r7, #28]
 800194a:	f003 0310 	and.w	r3, r3, #16
 800194e:	2b00      	cmp	r3, #0
 8001950:	d006      	beq.n	8001960 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	2210      	movs	r2, #16
 8001958:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 800195a:	6878      	ldr	r0, [r7, #4]
 800195c:	f000 f8fc 	bl	8001b58 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8001960:	6a3b      	ldr	r3, [r7, #32]
 8001962:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001966:	2b00      	cmp	r3, #0
 8001968:	d00b      	beq.n	8001982 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 800196a:	69fb      	ldr	r3, [r7, #28]
 800196c:	f003 0308 	and.w	r3, r3, #8
 8001970:	2b00      	cmp	r3, #0
 8001972:	d006      	beq.n	8001982 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	2208      	movs	r2, #8
 800197a:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 800197c:	6878      	ldr	r0, [r7, #4]
 800197e:	f000 f8f5 	bl	8001b6c <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8001982:	6a3b      	ldr	r3, [r7, #32]
 8001984:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001988:	2b00      	cmp	r3, #0
 800198a:	d07b      	beq.n	8001a84 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 800198c:	69fb      	ldr	r3, [r7, #28]
 800198e:	f003 0304 	and.w	r3, r3, #4
 8001992:	2b00      	cmp	r3, #0
 8001994:	d072      	beq.n	8001a7c <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001996:	6a3b      	ldr	r3, [r7, #32]
 8001998:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800199c:	2b00      	cmp	r3, #0
 800199e:	d008      	beq.n	80019b2 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d003      	beq.n	80019b2 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80019aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019ac:	f043 0301 	orr.w	r3, r3, #1
 80019b0:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80019b2:	6a3b      	ldr	r3, [r7, #32]
 80019b4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d008      	beq.n	80019ce <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d003      	beq.n	80019ce <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80019c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019c8:	f043 0302 	orr.w	r3, r3, #2
 80019cc:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80019ce:	6a3b      	ldr	r3, [r7, #32]
 80019d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d008      	beq.n	80019ea <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d003      	beq.n	80019ea <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80019e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019e4:	f043 0304 	orr.w	r3, r3, #4
 80019e8:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80019ea:	6a3b      	ldr	r3, [r7, #32]
 80019ec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d043      	beq.n	8001a7c <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d03e      	beq.n	8001a7c <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001a04:	2b60      	cmp	r3, #96	; 0x60
 8001a06:	d02b      	beq.n	8001a60 <HAL_CAN_IRQHandler+0x32a>
 8001a08:	2b60      	cmp	r3, #96	; 0x60
 8001a0a:	d82e      	bhi.n	8001a6a <HAL_CAN_IRQHandler+0x334>
 8001a0c:	2b50      	cmp	r3, #80	; 0x50
 8001a0e:	d022      	beq.n	8001a56 <HAL_CAN_IRQHandler+0x320>
 8001a10:	2b50      	cmp	r3, #80	; 0x50
 8001a12:	d82a      	bhi.n	8001a6a <HAL_CAN_IRQHandler+0x334>
 8001a14:	2b40      	cmp	r3, #64	; 0x40
 8001a16:	d019      	beq.n	8001a4c <HAL_CAN_IRQHandler+0x316>
 8001a18:	2b40      	cmp	r3, #64	; 0x40
 8001a1a:	d826      	bhi.n	8001a6a <HAL_CAN_IRQHandler+0x334>
 8001a1c:	2b30      	cmp	r3, #48	; 0x30
 8001a1e:	d010      	beq.n	8001a42 <HAL_CAN_IRQHandler+0x30c>
 8001a20:	2b30      	cmp	r3, #48	; 0x30
 8001a22:	d822      	bhi.n	8001a6a <HAL_CAN_IRQHandler+0x334>
 8001a24:	2b10      	cmp	r3, #16
 8001a26:	d002      	beq.n	8001a2e <HAL_CAN_IRQHandler+0x2f8>
 8001a28:	2b20      	cmp	r3, #32
 8001a2a:	d005      	beq.n	8001a38 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8001a2c:	e01d      	b.n	8001a6a <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8001a2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a30:	f043 0308 	orr.w	r3, r3, #8
 8001a34:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001a36:	e019      	b.n	8001a6c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8001a38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a3a:	f043 0310 	orr.w	r3, r3, #16
 8001a3e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001a40:	e014      	b.n	8001a6c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8001a42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a44:	f043 0320 	orr.w	r3, r3, #32
 8001a48:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001a4a:	e00f      	b.n	8001a6c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8001a4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a4e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001a52:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001a54:	e00a      	b.n	8001a6c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8001a56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a58:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001a5c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001a5e:	e005      	b.n	8001a6c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8001a60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a62:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a66:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001a68:	e000      	b.n	8001a6c <HAL_CAN_IRQHandler+0x336>
            break;
 8001a6a:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	699a      	ldr	r2, [r3, #24]
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001a7a:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	2204      	movs	r2, #4
 8001a82:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8001a84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d008      	beq.n	8001a9c <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001a8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a90:	431a      	orrs	r2, r3
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8001a96:	6878      	ldr	r0, [r7, #4]
 8001a98:	f000 f872 	bl	8001b80 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8001a9c:	bf00      	nop
 8001a9e:	3728      	adds	r7, #40	; 0x28
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	bd80      	pop	{r7, pc}

08001aa4 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001aa4:	b480      	push	{r7}
 8001aa6:	b083      	sub	sp, #12
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8001aac:	bf00      	nop
 8001aae:	370c      	adds	r7, #12
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab6:	4770      	bx	lr

08001ab8 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001ab8:	b480      	push	{r7}
 8001aba:	b083      	sub	sp, #12
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8001ac0:	bf00      	nop
 8001ac2:	370c      	adds	r7, #12
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aca:	4770      	bx	lr

08001acc <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001acc:	b480      	push	{r7}
 8001ace:	b083      	sub	sp, #12
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8001ad4:	bf00      	nop
 8001ad6:	370c      	adds	r7, #12
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ade:	4770      	bx	lr

08001ae0 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001ae0:	b480      	push	{r7}
 8001ae2:	b083      	sub	sp, #12
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8001ae8:	bf00      	nop
 8001aea:	370c      	adds	r7, #12
 8001aec:	46bd      	mov	sp, r7
 8001aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af2:	4770      	bx	lr

08001af4 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001af4:	b480      	push	{r7}
 8001af6:	b083      	sub	sp, #12
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8001afc:	bf00      	nop
 8001afe:	370c      	adds	r7, #12
 8001b00:	46bd      	mov	sp, r7
 8001b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b06:	4770      	bx	lr

08001b08 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001b08:	b480      	push	{r7}
 8001b0a:	b083      	sub	sp, #12
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8001b10:	bf00      	nop
 8001b12:	370c      	adds	r7, #12
 8001b14:	46bd      	mov	sp, r7
 8001b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1a:	4770      	bx	lr

08001b1c <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8001b1c:	b480      	push	{r7}
 8001b1e:	b083      	sub	sp, #12
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8001b24:	bf00      	nop
 8001b26:	370c      	adds	r7, #12
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2e:	4770      	bx	lr

08001b30 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001b30:	b480      	push	{r7}
 8001b32:	b083      	sub	sp, #12
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8001b38:	bf00      	nop
 8001b3a:	370c      	adds	r7, #12
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b42:	4770      	bx	lr

08001b44 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8001b44:	b480      	push	{r7}
 8001b46:	b083      	sub	sp, #12
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8001b4c:	bf00      	nop
 8001b4e:	370c      	adds	r7, #12
 8001b50:	46bd      	mov	sp, r7
 8001b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b56:	4770      	bx	lr

08001b58 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8001b58:	b480      	push	{r7}
 8001b5a:	b083      	sub	sp, #12
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8001b60:	bf00      	nop
 8001b62:	370c      	adds	r7, #12
 8001b64:	46bd      	mov	sp, r7
 8001b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6a:	4770      	bx	lr

08001b6c <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8001b6c:	b480      	push	{r7}
 8001b6e:	b083      	sub	sp, #12
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8001b74:	bf00      	nop
 8001b76:	370c      	adds	r7, #12
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7e:	4770      	bx	lr

08001b80 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8001b80:	b480      	push	{r7}
 8001b82:	b083      	sub	sp, #12
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8001b88:	bf00      	nop
 8001b8a:	370c      	adds	r7, #12
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b92:	4770      	bx	lr

08001b94 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b94:	b480      	push	{r7}
 8001b96:	b085      	sub	sp, #20
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	f003 0307 	and.w	r3, r3, #7
 8001ba2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ba4:	4b0c      	ldr	r3, [pc, #48]	; (8001bd8 <__NVIC_SetPriorityGrouping+0x44>)
 8001ba6:	68db      	ldr	r3, [r3, #12]
 8001ba8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001baa:	68ba      	ldr	r2, [r7, #8]
 8001bac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001bb0:	4013      	ands	r3, r2
 8001bb2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001bb8:	68bb      	ldr	r3, [r7, #8]
 8001bba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001bbc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001bc0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001bc4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001bc6:	4a04      	ldr	r2, [pc, #16]	; (8001bd8 <__NVIC_SetPriorityGrouping+0x44>)
 8001bc8:	68bb      	ldr	r3, [r7, #8]
 8001bca:	60d3      	str	r3, [r2, #12]
}
 8001bcc:	bf00      	nop
 8001bce:	3714      	adds	r7, #20
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd6:	4770      	bx	lr
 8001bd8:	e000ed00 	.word	0xe000ed00

08001bdc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001bdc:	b480      	push	{r7}
 8001bde:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001be0:	4b04      	ldr	r3, [pc, #16]	; (8001bf4 <__NVIC_GetPriorityGrouping+0x18>)
 8001be2:	68db      	ldr	r3, [r3, #12]
 8001be4:	0a1b      	lsrs	r3, r3, #8
 8001be6:	f003 0307 	and.w	r3, r3, #7
}
 8001bea:	4618      	mov	r0, r3
 8001bec:	46bd      	mov	sp, r7
 8001bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf2:	4770      	bx	lr
 8001bf4:	e000ed00 	.word	0xe000ed00

08001bf8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001bf8:	b480      	push	{r7}
 8001bfa:	b083      	sub	sp, #12
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	4603      	mov	r3, r0
 8001c00:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	db0b      	blt.n	8001c22 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c0a:	79fb      	ldrb	r3, [r7, #7]
 8001c0c:	f003 021f 	and.w	r2, r3, #31
 8001c10:	4907      	ldr	r1, [pc, #28]	; (8001c30 <__NVIC_EnableIRQ+0x38>)
 8001c12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c16:	095b      	lsrs	r3, r3, #5
 8001c18:	2001      	movs	r0, #1
 8001c1a:	fa00 f202 	lsl.w	r2, r0, r2
 8001c1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001c22:	bf00      	nop
 8001c24:	370c      	adds	r7, #12
 8001c26:	46bd      	mov	sp, r7
 8001c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2c:	4770      	bx	lr
 8001c2e:	bf00      	nop
 8001c30:	e000e100 	.word	0xe000e100

08001c34 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c34:	b480      	push	{r7}
 8001c36:	b083      	sub	sp, #12
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	4603      	mov	r3, r0
 8001c3c:	6039      	str	r1, [r7, #0]
 8001c3e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	db0a      	blt.n	8001c5e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c48:	683b      	ldr	r3, [r7, #0]
 8001c4a:	b2da      	uxtb	r2, r3
 8001c4c:	490c      	ldr	r1, [pc, #48]	; (8001c80 <__NVIC_SetPriority+0x4c>)
 8001c4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c52:	0112      	lsls	r2, r2, #4
 8001c54:	b2d2      	uxtb	r2, r2
 8001c56:	440b      	add	r3, r1
 8001c58:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c5c:	e00a      	b.n	8001c74 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c5e:	683b      	ldr	r3, [r7, #0]
 8001c60:	b2da      	uxtb	r2, r3
 8001c62:	4908      	ldr	r1, [pc, #32]	; (8001c84 <__NVIC_SetPriority+0x50>)
 8001c64:	79fb      	ldrb	r3, [r7, #7]
 8001c66:	f003 030f 	and.w	r3, r3, #15
 8001c6a:	3b04      	subs	r3, #4
 8001c6c:	0112      	lsls	r2, r2, #4
 8001c6e:	b2d2      	uxtb	r2, r2
 8001c70:	440b      	add	r3, r1
 8001c72:	761a      	strb	r2, [r3, #24]
}
 8001c74:	bf00      	nop
 8001c76:	370c      	adds	r7, #12
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7e:	4770      	bx	lr
 8001c80:	e000e100 	.word	0xe000e100
 8001c84:	e000ed00 	.word	0xe000ed00

08001c88 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c88:	b480      	push	{r7}
 8001c8a:	b089      	sub	sp, #36	; 0x24
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	60f8      	str	r0, [r7, #12]
 8001c90:	60b9      	str	r1, [r7, #8]
 8001c92:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	f003 0307 	and.w	r3, r3, #7
 8001c9a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c9c:	69fb      	ldr	r3, [r7, #28]
 8001c9e:	f1c3 0307 	rsb	r3, r3, #7
 8001ca2:	2b04      	cmp	r3, #4
 8001ca4:	bf28      	it	cs
 8001ca6:	2304      	movcs	r3, #4
 8001ca8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001caa:	69fb      	ldr	r3, [r7, #28]
 8001cac:	3304      	adds	r3, #4
 8001cae:	2b06      	cmp	r3, #6
 8001cb0:	d902      	bls.n	8001cb8 <NVIC_EncodePriority+0x30>
 8001cb2:	69fb      	ldr	r3, [r7, #28]
 8001cb4:	3b03      	subs	r3, #3
 8001cb6:	e000      	b.n	8001cba <NVIC_EncodePriority+0x32>
 8001cb8:	2300      	movs	r3, #0
 8001cba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cbc:	f04f 32ff 	mov.w	r2, #4294967295
 8001cc0:	69bb      	ldr	r3, [r7, #24]
 8001cc2:	fa02 f303 	lsl.w	r3, r2, r3
 8001cc6:	43da      	mvns	r2, r3
 8001cc8:	68bb      	ldr	r3, [r7, #8]
 8001cca:	401a      	ands	r2, r3
 8001ccc:	697b      	ldr	r3, [r7, #20]
 8001cce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001cd0:	f04f 31ff 	mov.w	r1, #4294967295
 8001cd4:	697b      	ldr	r3, [r7, #20]
 8001cd6:	fa01 f303 	lsl.w	r3, r1, r3
 8001cda:	43d9      	mvns	r1, r3
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ce0:	4313      	orrs	r3, r2
         );
}
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	3724      	adds	r7, #36	; 0x24
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cec:	4770      	bx	lr
	...

08001cf0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	b082      	sub	sp, #8
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	3b01      	subs	r3, #1
 8001cfc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001d00:	d301      	bcc.n	8001d06 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d02:	2301      	movs	r3, #1
 8001d04:	e00f      	b.n	8001d26 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d06:	4a0a      	ldr	r2, [pc, #40]	; (8001d30 <SysTick_Config+0x40>)
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	3b01      	subs	r3, #1
 8001d0c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d0e:	210f      	movs	r1, #15
 8001d10:	f04f 30ff 	mov.w	r0, #4294967295
 8001d14:	f7ff ff8e 	bl	8001c34 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d18:	4b05      	ldr	r3, [pc, #20]	; (8001d30 <SysTick_Config+0x40>)
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d1e:	4b04      	ldr	r3, [pc, #16]	; (8001d30 <SysTick_Config+0x40>)
 8001d20:	2207      	movs	r2, #7
 8001d22:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d24:	2300      	movs	r3, #0
}
 8001d26:	4618      	mov	r0, r3
 8001d28:	3708      	adds	r7, #8
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	bd80      	pop	{r7, pc}
 8001d2e:	bf00      	nop
 8001d30:	e000e010 	.word	0xe000e010

08001d34 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	b082      	sub	sp, #8
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d3c:	6878      	ldr	r0, [r7, #4]
 8001d3e:	f7ff ff29 	bl	8001b94 <__NVIC_SetPriorityGrouping>
}
 8001d42:	bf00      	nop
 8001d44:	3708      	adds	r7, #8
 8001d46:	46bd      	mov	sp, r7
 8001d48:	bd80      	pop	{r7, pc}

08001d4a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001d4a:	b580      	push	{r7, lr}
 8001d4c:	b086      	sub	sp, #24
 8001d4e:	af00      	add	r7, sp, #0
 8001d50:	4603      	mov	r3, r0
 8001d52:	60b9      	str	r1, [r7, #8]
 8001d54:	607a      	str	r2, [r7, #4]
 8001d56:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001d58:	2300      	movs	r3, #0
 8001d5a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001d5c:	f7ff ff3e 	bl	8001bdc <__NVIC_GetPriorityGrouping>
 8001d60:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d62:	687a      	ldr	r2, [r7, #4]
 8001d64:	68b9      	ldr	r1, [r7, #8]
 8001d66:	6978      	ldr	r0, [r7, #20]
 8001d68:	f7ff ff8e 	bl	8001c88 <NVIC_EncodePriority>
 8001d6c:	4602      	mov	r2, r0
 8001d6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d72:	4611      	mov	r1, r2
 8001d74:	4618      	mov	r0, r3
 8001d76:	f7ff ff5d 	bl	8001c34 <__NVIC_SetPriority>
}
 8001d7a:	bf00      	nop
 8001d7c:	3718      	adds	r7, #24
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	bd80      	pop	{r7, pc}

08001d82 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d82:	b580      	push	{r7, lr}
 8001d84:	b082      	sub	sp, #8
 8001d86:	af00      	add	r7, sp, #0
 8001d88:	4603      	mov	r3, r0
 8001d8a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d90:	4618      	mov	r0, r3
 8001d92:	f7ff ff31 	bl	8001bf8 <__NVIC_EnableIRQ>
}
 8001d96:	bf00      	nop
 8001d98:	3708      	adds	r7, #8
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	bd80      	pop	{r7, pc}

08001d9e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d9e:	b580      	push	{r7, lr}
 8001da0:	b082      	sub	sp, #8
 8001da2:	af00      	add	r7, sp, #0
 8001da4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001da6:	6878      	ldr	r0, [r7, #4]
 8001da8:	f7ff ffa2 	bl	8001cf0 <SysTick_Config>
 8001dac:	4603      	mov	r3, r0
}
 8001dae:	4618      	mov	r0, r3
 8001db0:	3708      	adds	r7, #8
 8001db2:	46bd      	mov	sp, r7
 8001db4:	bd80      	pop	{r7, pc}

08001db6 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001db6:	b580      	push	{r7, lr}
 8001db8:	b084      	sub	sp, #16
 8001dba:	af00      	add	r7, sp, #0
 8001dbc:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dc2:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001dc4:	f7ff f878 	bl	8000eb8 <HAL_GetTick>
 8001dc8:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001dd0:	b2db      	uxtb	r3, r3
 8001dd2:	2b02      	cmp	r3, #2
 8001dd4:	d008      	beq.n	8001de8 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	2280      	movs	r2, #128	; 0x80
 8001dda:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	2200      	movs	r2, #0
 8001de0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001de4:	2301      	movs	r3, #1
 8001de6:	e052      	b.n	8001e8e <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	681a      	ldr	r2, [r3, #0]
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	f022 0216 	bic.w	r2, r2, #22
 8001df6:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	695a      	ldr	r2, [r3, #20]
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001e06:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d103      	bne.n	8001e18 <HAL_DMA_Abort+0x62>
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d007      	beq.n	8001e28 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	681a      	ldr	r2, [r3, #0]
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	f022 0208 	bic.w	r2, r2, #8
 8001e26:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	681a      	ldr	r2, [r3, #0]
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	f022 0201 	bic.w	r2, r2, #1
 8001e36:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001e38:	e013      	b.n	8001e62 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001e3a:	f7ff f83d 	bl	8000eb8 <HAL_GetTick>
 8001e3e:	4602      	mov	r2, r0
 8001e40:	68bb      	ldr	r3, [r7, #8]
 8001e42:	1ad3      	subs	r3, r2, r3
 8001e44:	2b05      	cmp	r3, #5
 8001e46:	d90c      	bls.n	8001e62 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	2220      	movs	r2, #32
 8001e4c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	2203      	movs	r2, #3
 8001e52:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	2200      	movs	r2, #0
 8001e5a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001e5e:	2303      	movs	r3, #3
 8001e60:	e015      	b.n	8001e8e <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	f003 0301 	and.w	r3, r3, #1
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d1e4      	bne.n	8001e3a <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e74:	223f      	movs	r2, #63	; 0x3f
 8001e76:	409a      	lsls	r2, r3
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	2201      	movs	r2, #1
 8001e80:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	2200      	movs	r2, #0
 8001e88:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001e8c:	2300      	movs	r3, #0
}
 8001e8e:	4618      	mov	r0, r3
 8001e90:	3710      	adds	r7, #16
 8001e92:	46bd      	mov	sp, r7
 8001e94:	bd80      	pop	{r7, pc}

08001e96 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001e96:	b480      	push	{r7}
 8001e98:	b083      	sub	sp, #12
 8001e9a:	af00      	add	r7, sp, #0
 8001e9c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001ea4:	b2db      	uxtb	r3, r3
 8001ea6:	2b02      	cmp	r3, #2
 8001ea8:	d004      	beq.n	8001eb4 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	2280      	movs	r2, #128	; 0x80
 8001eae:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001eb0:	2301      	movs	r3, #1
 8001eb2:	e00c      	b.n	8001ece <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	2205      	movs	r2, #5
 8001eb8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	681a      	ldr	r2, [r3, #0]
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	f022 0201 	bic.w	r2, r2, #1
 8001eca:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001ecc:	2300      	movs	r3, #0
}
 8001ece:	4618      	mov	r0, r3
 8001ed0:	370c      	adds	r7, #12
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed8:	4770      	bx	lr

08001eda <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8001eda:	b480      	push	{r7}
 8001edc:	b083      	sub	sp, #12
 8001ede:	af00      	add	r7, sp, #0
 8001ee0:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	370c      	adds	r7, #12
 8001eea:	46bd      	mov	sp, r7
 8001eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef0:	4770      	bx	lr
	...

08001ef4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ef4:	b480      	push	{r7}
 8001ef6:	b089      	sub	sp, #36	; 0x24
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	6078      	str	r0, [r7, #4]
 8001efc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001efe:	2300      	movs	r3, #0
 8001f00:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001f02:	2300      	movs	r3, #0
 8001f04:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001f06:	2300      	movs	r3, #0
 8001f08:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	61fb      	str	r3, [r7, #28]
 8001f0e:	e165      	b.n	80021dc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001f10:	2201      	movs	r2, #1
 8001f12:	69fb      	ldr	r3, [r7, #28]
 8001f14:	fa02 f303 	lsl.w	r3, r2, r3
 8001f18:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001f1a:	683b      	ldr	r3, [r7, #0]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	697a      	ldr	r2, [r7, #20]
 8001f20:	4013      	ands	r3, r2
 8001f22:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001f24:	693a      	ldr	r2, [r7, #16]
 8001f26:	697b      	ldr	r3, [r7, #20]
 8001f28:	429a      	cmp	r2, r3
 8001f2a:	f040 8154 	bne.w	80021d6 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001f2e:	683b      	ldr	r3, [r7, #0]
 8001f30:	685b      	ldr	r3, [r3, #4]
 8001f32:	f003 0303 	and.w	r3, r3, #3
 8001f36:	2b01      	cmp	r3, #1
 8001f38:	d005      	beq.n	8001f46 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f3a:	683b      	ldr	r3, [r7, #0]
 8001f3c:	685b      	ldr	r3, [r3, #4]
 8001f3e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001f42:	2b02      	cmp	r3, #2
 8001f44:	d130      	bne.n	8001fa8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	689b      	ldr	r3, [r3, #8]
 8001f4a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001f4c:	69fb      	ldr	r3, [r7, #28]
 8001f4e:	005b      	lsls	r3, r3, #1
 8001f50:	2203      	movs	r2, #3
 8001f52:	fa02 f303 	lsl.w	r3, r2, r3
 8001f56:	43db      	mvns	r3, r3
 8001f58:	69ba      	ldr	r2, [r7, #24]
 8001f5a:	4013      	ands	r3, r2
 8001f5c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001f5e:	683b      	ldr	r3, [r7, #0]
 8001f60:	68da      	ldr	r2, [r3, #12]
 8001f62:	69fb      	ldr	r3, [r7, #28]
 8001f64:	005b      	lsls	r3, r3, #1
 8001f66:	fa02 f303 	lsl.w	r3, r2, r3
 8001f6a:	69ba      	ldr	r2, [r7, #24]
 8001f6c:	4313      	orrs	r3, r2
 8001f6e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	69ba      	ldr	r2, [r7, #24]
 8001f74:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	685b      	ldr	r3, [r3, #4]
 8001f7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001f7c:	2201      	movs	r2, #1
 8001f7e:	69fb      	ldr	r3, [r7, #28]
 8001f80:	fa02 f303 	lsl.w	r3, r2, r3
 8001f84:	43db      	mvns	r3, r3
 8001f86:	69ba      	ldr	r2, [r7, #24]
 8001f88:	4013      	ands	r3, r2
 8001f8a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001f8c:	683b      	ldr	r3, [r7, #0]
 8001f8e:	685b      	ldr	r3, [r3, #4]
 8001f90:	091b      	lsrs	r3, r3, #4
 8001f92:	f003 0201 	and.w	r2, r3, #1
 8001f96:	69fb      	ldr	r3, [r7, #28]
 8001f98:	fa02 f303 	lsl.w	r3, r2, r3
 8001f9c:	69ba      	ldr	r2, [r7, #24]
 8001f9e:	4313      	orrs	r3, r2
 8001fa0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	69ba      	ldr	r2, [r7, #24]
 8001fa6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001fa8:	683b      	ldr	r3, [r7, #0]
 8001faa:	685b      	ldr	r3, [r3, #4]
 8001fac:	f003 0303 	and.w	r3, r3, #3
 8001fb0:	2b03      	cmp	r3, #3
 8001fb2:	d017      	beq.n	8001fe4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	68db      	ldr	r3, [r3, #12]
 8001fb8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001fba:	69fb      	ldr	r3, [r7, #28]
 8001fbc:	005b      	lsls	r3, r3, #1
 8001fbe:	2203      	movs	r2, #3
 8001fc0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fc4:	43db      	mvns	r3, r3
 8001fc6:	69ba      	ldr	r2, [r7, #24]
 8001fc8:	4013      	ands	r3, r2
 8001fca:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001fcc:	683b      	ldr	r3, [r7, #0]
 8001fce:	689a      	ldr	r2, [r3, #8]
 8001fd0:	69fb      	ldr	r3, [r7, #28]
 8001fd2:	005b      	lsls	r3, r3, #1
 8001fd4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fd8:	69ba      	ldr	r2, [r7, #24]
 8001fda:	4313      	orrs	r3, r2
 8001fdc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	69ba      	ldr	r2, [r7, #24]
 8001fe2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001fe4:	683b      	ldr	r3, [r7, #0]
 8001fe6:	685b      	ldr	r3, [r3, #4]
 8001fe8:	f003 0303 	and.w	r3, r3, #3
 8001fec:	2b02      	cmp	r3, #2
 8001fee:	d123      	bne.n	8002038 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001ff0:	69fb      	ldr	r3, [r7, #28]
 8001ff2:	08da      	lsrs	r2, r3, #3
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	3208      	adds	r2, #8
 8001ff8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ffc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001ffe:	69fb      	ldr	r3, [r7, #28]
 8002000:	f003 0307 	and.w	r3, r3, #7
 8002004:	009b      	lsls	r3, r3, #2
 8002006:	220f      	movs	r2, #15
 8002008:	fa02 f303 	lsl.w	r3, r2, r3
 800200c:	43db      	mvns	r3, r3
 800200e:	69ba      	ldr	r2, [r7, #24]
 8002010:	4013      	ands	r3, r2
 8002012:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002014:	683b      	ldr	r3, [r7, #0]
 8002016:	691a      	ldr	r2, [r3, #16]
 8002018:	69fb      	ldr	r3, [r7, #28]
 800201a:	f003 0307 	and.w	r3, r3, #7
 800201e:	009b      	lsls	r3, r3, #2
 8002020:	fa02 f303 	lsl.w	r3, r2, r3
 8002024:	69ba      	ldr	r2, [r7, #24]
 8002026:	4313      	orrs	r3, r2
 8002028:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800202a:	69fb      	ldr	r3, [r7, #28]
 800202c:	08da      	lsrs	r2, r3, #3
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	3208      	adds	r2, #8
 8002032:	69b9      	ldr	r1, [r7, #24]
 8002034:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800203e:	69fb      	ldr	r3, [r7, #28]
 8002040:	005b      	lsls	r3, r3, #1
 8002042:	2203      	movs	r2, #3
 8002044:	fa02 f303 	lsl.w	r3, r2, r3
 8002048:	43db      	mvns	r3, r3
 800204a:	69ba      	ldr	r2, [r7, #24]
 800204c:	4013      	ands	r3, r2
 800204e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002050:	683b      	ldr	r3, [r7, #0]
 8002052:	685b      	ldr	r3, [r3, #4]
 8002054:	f003 0203 	and.w	r2, r3, #3
 8002058:	69fb      	ldr	r3, [r7, #28]
 800205a:	005b      	lsls	r3, r3, #1
 800205c:	fa02 f303 	lsl.w	r3, r2, r3
 8002060:	69ba      	ldr	r2, [r7, #24]
 8002062:	4313      	orrs	r3, r2
 8002064:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	69ba      	ldr	r2, [r7, #24]
 800206a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800206c:	683b      	ldr	r3, [r7, #0]
 800206e:	685b      	ldr	r3, [r3, #4]
 8002070:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002074:	2b00      	cmp	r3, #0
 8002076:	f000 80ae 	beq.w	80021d6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800207a:	2300      	movs	r3, #0
 800207c:	60fb      	str	r3, [r7, #12]
 800207e:	4b5d      	ldr	r3, [pc, #372]	; (80021f4 <HAL_GPIO_Init+0x300>)
 8002080:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002082:	4a5c      	ldr	r2, [pc, #368]	; (80021f4 <HAL_GPIO_Init+0x300>)
 8002084:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002088:	6453      	str	r3, [r2, #68]	; 0x44
 800208a:	4b5a      	ldr	r3, [pc, #360]	; (80021f4 <HAL_GPIO_Init+0x300>)
 800208c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800208e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002092:	60fb      	str	r3, [r7, #12]
 8002094:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002096:	4a58      	ldr	r2, [pc, #352]	; (80021f8 <HAL_GPIO_Init+0x304>)
 8002098:	69fb      	ldr	r3, [r7, #28]
 800209a:	089b      	lsrs	r3, r3, #2
 800209c:	3302      	adds	r3, #2
 800209e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80020a4:	69fb      	ldr	r3, [r7, #28]
 80020a6:	f003 0303 	and.w	r3, r3, #3
 80020aa:	009b      	lsls	r3, r3, #2
 80020ac:	220f      	movs	r2, #15
 80020ae:	fa02 f303 	lsl.w	r3, r2, r3
 80020b2:	43db      	mvns	r3, r3
 80020b4:	69ba      	ldr	r2, [r7, #24]
 80020b6:	4013      	ands	r3, r2
 80020b8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	4a4f      	ldr	r2, [pc, #316]	; (80021fc <HAL_GPIO_Init+0x308>)
 80020be:	4293      	cmp	r3, r2
 80020c0:	d025      	beq.n	800210e <HAL_GPIO_Init+0x21a>
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	4a4e      	ldr	r2, [pc, #312]	; (8002200 <HAL_GPIO_Init+0x30c>)
 80020c6:	4293      	cmp	r3, r2
 80020c8:	d01f      	beq.n	800210a <HAL_GPIO_Init+0x216>
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	4a4d      	ldr	r2, [pc, #308]	; (8002204 <HAL_GPIO_Init+0x310>)
 80020ce:	4293      	cmp	r3, r2
 80020d0:	d019      	beq.n	8002106 <HAL_GPIO_Init+0x212>
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	4a4c      	ldr	r2, [pc, #304]	; (8002208 <HAL_GPIO_Init+0x314>)
 80020d6:	4293      	cmp	r3, r2
 80020d8:	d013      	beq.n	8002102 <HAL_GPIO_Init+0x20e>
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	4a4b      	ldr	r2, [pc, #300]	; (800220c <HAL_GPIO_Init+0x318>)
 80020de:	4293      	cmp	r3, r2
 80020e0:	d00d      	beq.n	80020fe <HAL_GPIO_Init+0x20a>
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	4a4a      	ldr	r2, [pc, #296]	; (8002210 <HAL_GPIO_Init+0x31c>)
 80020e6:	4293      	cmp	r3, r2
 80020e8:	d007      	beq.n	80020fa <HAL_GPIO_Init+0x206>
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	4a49      	ldr	r2, [pc, #292]	; (8002214 <HAL_GPIO_Init+0x320>)
 80020ee:	4293      	cmp	r3, r2
 80020f0:	d101      	bne.n	80020f6 <HAL_GPIO_Init+0x202>
 80020f2:	2306      	movs	r3, #6
 80020f4:	e00c      	b.n	8002110 <HAL_GPIO_Init+0x21c>
 80020f6:	2307      	movs	r3, #7
 80020f8:	e00a      	b.n	8002110 <HAL_GPIO_Init+0x21c>
 80020fa:	2305      	movs	r3, #5
 80020fc:	e008      	b.n	8002110 <HAL_GPIO_Init+0x21c>
 80020fe:	2304      	movs	r3, #4
 8002100:	e006      	b.n	8002110 <HAL_GPIO_Init+0x21c>
 8002102:	2303      	movs	r3, #3
 8002104:	e004      	b.n	8002110 <HAL_GPIO_Init+0x21c>
 8002106:	2302      	movs	r3, #2
 8002108:	e002      	b.n	8002110 <HAL_GPIO_Init+0x21c>
 800210a:	2301      	movs	r3, #1
 800210c:	e000      	b.n	8002110 <HAL_GPIO_Init+0x21c>
 800210e:	2300      	movs	r3, #0
 8002110:	69fa      	ldr	r2, [r7, #28]
 8002112:	f002 0203 	and.w	r2, r2, #3
 8002116:	0092      	lsls	r2, r2, #2
 8002118:	4093      	lsls	r3, r2
 800211a:	69ba      	ldr	r2, [r7, #24]
 800211c:	4313      	orrs	r3, r2
 800211e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002120:	4935      	ldr	r1, [pc, #212]	; (80021f8 <HAL_GPIO_Init+0x304>)
 8002122:	69fb      	ldr	r3, [r7, #28]
 8002124:	089b      	lsrs	r3, r3, #2
 8002126:	3302      	adds	r3, #2
 8002128:	69ba      	ldr	r2, [r7, #24]
 800212a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800212e:	4b3a      	ldr	r3, [pc, #232]	; (8002218 <HAL_GPIO_Init+0x324>)
 8002130:	689b      	ldr	r3, [r3, #8]
 8002132:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002134:	693b      	ldr	r3, [r7, #16]
 8002136:	43db      	mvns	r3, r3
 8002138:	69ba      	ldr	r2, [r7, #24]
 800213a:	4013      	ands	r3, r2
 800213c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800213e:	683b      	ldr	r3, [r7, #0]
 8002140:	685b      	ldr	r3, [r3, #4]
 8002142:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002146:	2b00      	cmp	r3, #0
 8002148:	d003      	beq.n	8002152 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800214a:	69ba      	ldr	r2, [r7, #24]
 800214c:	693b      	ldr	r3, [r7, #16]
 800214e:	4313      	orrs	r3, r2
 8002150:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002152:	4a31      	ldr	r2, [pc, #196]	; (8002218 <HAL_GPIO_Init+0x324>)
 8002154:	69bb      	ldr	r3, [r7, #24]
 8002156:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002158:	4b2f      	ldr	r3, [pc, #188]	; (8002218 <HAL_GPIO_Init+0x324>)
 800215a:	68db      	ldr	r3, [r3, #12]
 800215c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800215e:	693b      	ldr	r3, [r7, #16]
 8002160:	43db      	mvns	r3, r3
 8002162:	69ba      	ldr	r2, [r7, #24]
 8002164:	4013      	ands	r3, r2
 8002166:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002168:	683b      	ldr	r3, [r7, #0]
 800216a:	685b      	ldr	r3, [r3, #4]
 800216c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002170:	2b00      	cmp	r3, #0
 8002172:	d003      	beq.n	800217c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002174:	69ba      	ldr	r2, [r7, #24]
 8002176:	693b      	ldr	r3, [r7, #16]
 8002178:	4313      	orrs	r3, r2
 800217a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800217c:	4a26      	ldr	r2, [pc, #152]	; (8002218 <HAL_GPIO_Init+0x324>)
 800217e:	69bb      	ldr	r3, [r7, #24]
 8002180:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002182:	4b25      	ldr	r3, [pc, #148]	; (8002218 <HAL_GPIO_Init+0x324>)
 8002184:	685b      	ldr	r3, [r3, #4]
 8002186:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002188:	693b      	ldr	r3, [r7, #16]
 800218a:	43db      	mvns	r3, r3
 800218c:	69ba      	ldr	r2, [r7, #24]
 800218e:	4013      	ands	r3, r2
 8002190:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002192:	683b      	ldr	r3, [r7, #0]
 8002194:	685b      	ldr	r3, [r3, #4]
 8002196:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800219a:	2b00      	cmp	r3, #0
 800219c:	d003      	beq.n	80021a6 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800219e:	69ba      	ldr	r2, [r7, #24]
 80021a0:	693b      	ldr	r3, [r7, #16]
 80021a2:	4313      	orrs	r3, r2
 80021a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80021a6:	4a1c      	ldr	r2, [pc, #112]	; (8002218 <HAL_GPIO_Init+0x324>)
 80021a8:	69bb      	ldr	r3, [r7, #24]
 80021aa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80021ac:	4b1a      	ldr	r3, [pc, #104]	; (8002218 <HAL_GPIO_Init+0x324>)
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021b2:	693b      	ldr	r3, [r7, #16]
 80021b4:	43db      	mvns	r3, r3
 80021b6:	69ba      	ldr	r2, [r7, #24]
 80021b8:	4013      	ands	r3, r2
 80021ba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80021bc:	683b      	ldr	r3, [r7, #0]
 80021be:	685b      	ldr	r3, [r3, #4]
 80021c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d003      	beq.n	80021d0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80021c8:	69ba      	ldr	r2, [r7, #24]
 80021ca:	693b      	ldr	r3, [r7, #16]
 80021cc:	4313      	orrs	r3, r2
 80021ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80021d0:	4a11      	ldr	r2, [pc, #68]	; (8002218 <HAL_GPIO_Init+0x324>)
 80021d2:	69bb      	ldr	r3, [r7, #24]
 80021d4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80021d6:	69fb      	ldr	r3, [r7, #28]
 80021d8:	3301      	adds	r3, #1
 80021da:	61fb      	str	r3, [r7, #28]
 80021dc:	69fb      	ldr	r3, [r7, #28]
 80021de:	2b0f      	cmp	r3, #15
 80021e0:	f67f ae96 	bls.w	8001f10 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80021e4:	bf00      	nop
 80021e6:	bf00      	nop
 80021e8:	3724      	adds	r7, #36	; 0x24
 80021ea:	46bd      	mov	sp, r7
 80021ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f0:	4770      	bx	lr
 80021f2:	bf00      	nop
 80021f4:	40023800 	.word	0x40023800
 80021f8:	40013800 	.word	0x40013800
 80021fc:	40020000 	.word	0x40020000
 8002200:	40020400 	.word	0x40020400
 8002204:	40020800 	.word	0x40020800
 8002208:	40020c00 	.word	0x40020c00
 800220c:	40021000 	.word	0x40021000
 8002210:	40021400 	.word	0x40021400
 8002214:	40021800 	.word	0x40021800
 8002218:	40013c00 	.word	0x40013c00

0800221c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800221c:	b480      	push	{r7}
 800221e:	b083      	sub	sp, #12
 8002220:	af00      	add	r7, sp, #0
 8002222:	6078      	str	r0, [r7, #4]
 8002224:	460b      	mov	r3, r1
 8002226:	807b      	strh	r3, [r7, #2]
 8002228:	4613      	mov	r3, r2
 800222a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800222c:	787b      	ldrb	r3, [r7, #1]
 800222e:	2b00      	cmp	r3, #0
 8002230:	d003      	beq.n	800223a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002232:	887a      	ldrh	r2, [r7, #2]
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002238:	e003      	b.n	8002242 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800223a:	887b      	ldrh	r3, [r7, #2]
 800223c:	041a      	lsls	r2, r3, #16
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	619a      	str	r2, [r3, #24]
}
 8002242:	bf00      	nop
 8002244:	370c      	adds	r7, #12
 8002246:	46bd      	mov	sp, r7
 8002248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224c:	4770      	bx	lr
	...

08002250 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002250:	b580      	push	{r7, lr}
 8002252:	b084      	sub	sp, #16
 8002254:	af00      	add	r7, sp, #0
 8002256:	6078      	str	r0, [r7, #4]
 8002258:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	2b00      	cmp	r3, #0
 800225e:	d101      	bne.n	8002264 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002260:	2301      	movs	r3, #1
 8002262:	e0cc      	b.n	80023fe <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002264:	4b68      	ldr	r3, [pc, #416]	; (8002408 <HAL_RCC_ClockConfig+0x1b8>)
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f003 030f 	and.w	r3, r3, #15
 800226c:	683a      	ldr	r2, [r7, #0]
 800226e:	429a      	cmp	r2, r3
 8002270:	d90c      	bls.n	800228c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002272:	4b65      	ldr	r3, [pc, #404]	; (8002408 <HAL_RCC_ClockConfig+0x1b8>)
 8002274:	683a      	ldr	r2, [r7, #0]
 8002276:	b2d2      	uxtb	r2, r2
 8002278:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800227a:	4b63      	ldr	r3, [pc, #396]	; (8002408 <HAL_RCC_ClockConfig+0x1b8>)
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f003 030f 	and.w	r3, r3, #15
 8002282:	683a      	ldr	r2, [r7, #0]
 8002284:	429a      	cmp	r2, r3
 8002286:	d001      	beq.n	800228c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002288:	2301      	movs	r3, #1
 800228a:	e0b8      	b.n	80023fe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f003 0302 	and.w	r3, r3, #2
 8002294:	2b00      	cmp	r3, #0
 8002296:	d020      	beq.n	80022da <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f003 0304 	and.w	r3, r3, #4
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d005      	beq.n	80022b0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80022a4:	4b59      	ldr	r3, [pc, #356]	; (800240c <HAL_RCC_ClockConfig+0x1bc>)
 80022a6:	689b      	ldr	r3, [r3, #8]
 80022a8:	4a58      	ldr	r2, [pc, #352]	; (800240c <HAL_RCC_ClockConfig+0x1bc>)
 80022aa:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80022ae:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	f003 0308 	and.w	r3, r3, #8
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d005      	beq.n	80022c8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80022bc:	4b53      	ldr	r3, [pc, #332]	; (800240c <HAL_RCC_ClockConfig+0x1bc>)
 80022be:	689b      	ldr	r3, [r3, #8]
 80022c0:	4a52      	ldr	r2, [pc, #328]	; (800240c <HAL_RCC_ClockConfig+0x1bc>)
 80022c2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80022c6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80022c8:	4b50      	ldr	r3, [pc, #320]	; (800240c <HAL_RCC_ClockConfig+0x1bc>)
 80022ca:	689b      	ldr	r3, [r3, #8]
 80022cc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	689b      	ldr	r3, [r3, #8]
 80022d4:	494d      	ldr	r1, [pc, #308]	; (800240c <HAL_RCC_ClockConfig+0x1bc>)
 80022d6:	4313      	orrs	r3, r2
 80022d8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f003 0301 	and.w	r3, r3, #1
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d044      	beq.n	8002370 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	685b      	ldr	r3, [r3, #4]
 80022ea:	2b01      	cmp	r3, #1
 80022ec:	d107      	bne.n	80022fe <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022ee:	4b47      	ldr	r3, [pc, #284]	; (800240c <HAL_RCC_ClockConfig+0x1bc>)
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d119      	bne.n	800232e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80022fa:	2301      	movs	r3, #1
 80022fc:	e07f      	b.n	80023fe <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	685b      	ldr	r3, [r3, #4]
 8002302:	2b02      	cmp	r3, #2
 8002304:	d003      	beq.n	800230e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800230a:	2b03      	cmp	r3, #3
 800230c:	d107      	bne.n	800231e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800230e:	4b3f      	ldr	r3, [pc, #252]	; (800240c <HAL_RCC_ClockConfig+0x1bc>)
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002316:	2b00      	cmp	r3, #0
 8002318:	d109      	bne.n	800232e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800231a:	2301      	movs	r3, #1
 800231c:	e06f      	b.n	80023fe <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800231e:	4b3b      	ldr	r3, [pc, #236]	; (800240c <HAL_RCC_ClockConfig+0x1bc>)
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f003 0302 	and.w	r3, r3, #2
 8002326:	2b00      	cmp	r3, #0
 8002328:	d101      	bne.n	800232e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800232a:	2301      	movs	r3, #1
 800232c:	e067      	b.n	80023fe <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800232e:	4b37      	ldr	r3, [pc, #220]	; (800240c <HAL_RCC_ClockConfig+0x1bc>)
 8002330:	689b      	ldr	r3, [r3, #8]
 8002332:	f023 0203 	bic.w	r2, r3, #3
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	685b      	ldr	r3, [r3, #4]
 800233a:	4934      	ldr	r1, [pc, #208]	; (800240c <HAL_RCC_ClockConfig+0x1bc>)
 800233c:	4313      	orrs	r3, r2
 800233e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002340:	f7fe fdba 	bl	8000eb8 <HAL_GetTick>
 8002344:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002346:	e00a      	b.n	800235e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002348:	f7fe fdb6 	bl	8000eb8 <HAL_GetTick>
 800234c:	4602      	mov	r2, r0
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	1ad3      	subs	r3, r2, r3
 8002352:	f241 3288 	movw	r2, #5000	; 0x1388
 8002356:	4293      	cmp	r3, r2
 8002358:	d901      	bls.n	800235e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800235a:	2303      	movs	r3, #3
 800235c:	e04f      	b.n	80023fe <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800235e:	4b2b      	ldr	r3, [pc, #172]	; (800240c <HAL_RCC_ClockConfig+0x1bc>)
 8002360:	689b      	ldr	r3, [r3, #8]
 8002362:	f003 020c 	and.w	r2, r3, #12
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	685b      	ldr	r3, [r3, #4]
 800236a:	009b      	lsls	r3, r3, #2
 800236c:	429a      	cmp	r2, r3
 800236e:	d1eb      	bne.n	8002348 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002370:	4b25      	ldr	r3, [pc, #148]	; (8002408 <HAL_RCC_ClockConfig+0x1b8>)
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f003 030f 	and.w	r3, r3, #15
 8002378:	683a      	ldr	r2, [r7, #0]
 800237a:	429a      	cmp	r2, r3
 800237c:	d20c      	bcs.n	8002398 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800237e:	4b22      	ldr	r3, [pc, #136]	; (8002408 <HAL_RCC_ClockConfig+0x1b8>)
 8002380:	683a      	ldr	r2, [r7, #0]
 8002382:	b2d2      	uxtb	r2, r2
 8002384:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002386:	4b20      	ldr	r3, [pc, #128]	; (8002408 <HAL_RCC_ClockConfig+0x1b8>)
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f003 030f 	and.w	r3, r3, #15
 800238e:	683a      	ldr	r2, [r7, #0]
 8002390:	429a      	cmp	r2, r3
 8002392:	d001      	beq.n	8002398 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002394:	2301      	movs	r3, #1
 8002396:	e032      	b.n	80023fe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	f003 0304 	and.w	r3, r3, #4
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d008      	beq.n	80023b6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80023a4:	4b19      	ldr	r3, [pc, #100]	; (800240c <HAL_RCC_ClockConfig+0x1bc>)
 80023a6:	689b      	ldr	r3, [r3, #8]
 80023a8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	68db      	ldr	r3, [r3, #12]
 80023b0:	4916      	ldr	r1, [pc, #88]	; (800240c <HAL_RCC_ClockConfig+0x1bc>)
 80023b2:	4313      	orrs	r3, r2
 80023b4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f003 0308 	and.w	r3, r3, #8
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d009      	beq.n	80023d6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80023c2:	4b12      	ldr	r3, [pc, #72]	; (800240c <HAL_RCC_ClockConfig+0x1bc>)
 80023c4:	689b      	ldr	r3, [r3, #8]
 80023c6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	691b      	ldr	r3, [r3, #16]
 80023ce:	00db      	lsls	r3, r3, #3
 80023d0:	490e      	ldr	r1, [pc, #56]	; (800240c <HAL_RCC_ClockConfig+0x1bc>)
 80023d2:	4313      	orrs	r3, r2
 80023d4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80023d6:	f000 f855 	bl	8002484 <HAL_RCC_GetSysClockFreq>
 80023da:	4602      	mov	r2, r0
 80023dc:	4b0b      	ldr	r3, [pc, #44]	; (800240c <HAL_RCC_ClockConfig+0x1bc>)
 80023de:	689b      	ldr	r3, [r3, #8]
 80023e0:	091b      	lsrs	r3, r3, #4
 80023e2:	f003 030f 	and.w	r3, r3, #15
 80023e6:	490a      	ldr	r1, [pc, #40]	; (8002410 <HAL_RCC_ClockConfig+0x1c0>)
 80023e8:	5ccb      	ldrb	r3, [r1, r3]
 80023ea:	fa22 f303 	lsr.w	r3, r2, r3
 80023ee:	4a09      	ldr	r2, [pc, #36]	; (8002414 <HAL_RCC_ClockConfig+0x1c4>)
 80023f0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80023f2:	4b09      	ldr	r3, [pc, #36]	; (8002418 <HAL_RCC_ClockConfig+0x1c8>)
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	4618      	mov	r0, r3
 80023f8:	f7fe fd1a 	bl	8000e30 <HAL_InitTick>

  return HAL_OK;
 80023fc:	2300      	movs	r3, #0
}
 80023fe:	4618      	mov	r0, r3
 8002400:	3710      	adds	r7, #16
 8002402:	46bd      	mov	sp, r7
 8002404:	bd80      	pop	{r7, pc}
 8002406:	bf00      	nop
 8002408:	40023c00 	.word	0x40023c00
 800240c:	40023800 	.word	0x40023800
 8002410:	08004764 	.word	0x08004764
 8002414:	20000000 	.word	0x20000000
 8002418:	20000004 	.word	0x20000004

0800241c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800241c:	b480      	push	{r7}
 800241e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002420:	4b03      	ldr	r3, [pc, #12]	; (8002430 <HAL_RCC_GetHCLKFreq+0x14>)
 8002422:	681b      	ldr	r3, [r3, #0]
}
 8002424:	4618      	mov	r0, r3
 8002426:	46bd      	mov	sp, r7
 8002428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242c:	4770      	bx	lr
 800242e:	bf00      	nop
 8002430:	20000000 	.word	0x20000000

08002434 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002434:	b580      	push	{r7, lr}
 8002436:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002438:	f7ff fff0 	bl	800241c <HAL_RCC_GetHCLKFreq>
 800243c:	4602      	mov	r2, r0
 800243e:	4b05      	ldr	r3, [pc, #20]	; (8002454 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002440:	689b      	ldr	r3, [r3, #8]
 8002442:	0a9b      	lsrs	r3, r3, #10
 8002444:	f003 0307 	and.w	r3, r3, #7
 8002448:	4903      	ldr	r1, [pc, #12]	; (8002458 <HAL_RCC_GetPCLK1Freq+0x24>)
 800244a:	5ccb      	ldrb	r3, [r1, r3]
 800244c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002450:	4618      	mov	r0, r3
 8002452:	bd80      	pop	{r7, pc}
 8002454:	40023800 	.word	0x40023800
 8002458:	08004774 	.word	0x08004774

0800245c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800245c:	b580      	push	{r7, lr}
 800245e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002460:	f7ff ffdc 	bl	800241c <HAL_RCC_GetHCLKFreq>
 8002464:	4602      	mov	r2, r0
 8002466:	4b05      	ldr	r3, [pc, #20]	; (800247c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002468:	689b      	ldr	r3, [r3, #8]
 800246a:	0b5b      	lsrs	r3, r3, #13
 800246c:	f003 0307 	and.w	r3, r3, #7
 8002470:	4903      	ldr	r1, [pc, #12]	; (8002480 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002472:	5ccb      	ldrb	r3, [r1, r3]
 8002474:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002478:	4618      	mov	r0, r3
 800247a:	bd80      	pop	{r7, pc}
 800247c:	40023800 	.word	0x40023800
 8002480:	08004774 	.word	0x08004774

08002484 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002484:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002488:	b0a6      	sub	sp, #152	; 0x98
 800248a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800248c:	2300      	movs	r3, #0
 800248e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t pllvco = 0U;
 8002492:	2300      	movs	r3, #0
 8002494:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t pllp = 0U;
 8002498:	2300      	movs	r3, #0
 800249a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  uint32_t pllr = 0U;
 800249e:	2300      	movs	r3, #0
 80024a0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  uint32_t sysclockfreq = 0U;
 80024a4:	2300      	movs	r3, #0
 80024a6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80024aa:	4bc8      	ldr	r3, [pc, #800]	; (80027cc <HAL_RCC_GetSysClockFreq+0x348>)
 80024ac:	689b      	ldr	r3, [r3, #8]
 80024ae:	f003 030c 	and.w	r3, r3, #12
 80024b2:	2b0c      	cmp	r3, #12
 80024b4:	f200 817e 	bhi.w	80027b4 <HAL_RCC_GetSysClockFreq+0x330>
 80024b8:	a201      	add	r2, pc, #4	; (adr r2, 80024c0 <HAL_RCC_GetSysClockFreq+0x3c>)
 80024ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024be:	bf00      	nop
 80024c0:	080024f5 	.word	0x080024f5
 80024c4:	080027b5 	.word	0x080027b5
 80024c8:	080027b5 	.word	0x080027b5
 80024cc:	080027b5 	.word	0x080027b5
 80024d0:	080024fd 	.word	0x080024fd
 80024d4:	080027b5 	.word	0x080027b5
 80024d8:	080027b5 	.word	0x080027b5
 80024dc:	080027b5 	.word	0x080027b5
 80024e0:	08002505 	.word	0x08002505
 80024e4:	080027b5 	.word	0x080027b5
 80024e8:	080027b5 	.word	0x080027b5
 80024ec:	080027b5 	.word	0x080027b5
 80024f0:	0800266f 	.word	0x0800266f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80024f4:	4bb6      	ldr	r3, [pc, #728]	; (80027d0 <HAL_RCC_GetSysClockFreq+0x34c>)
 80024f6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
       break;
 80024fa:	e15f      	b.n	80027bc <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80024fc:	4bb5      	ldr	r3, [pc, #724]	; (80027d4 <HAL_RCC_GetSysClockFreq+0x350>)
 80024fe:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8002502:	e15b      	b.n	80027bc <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002504:	4bb1      	ldr	r3, [pc, #708]	; (80027cc <HAL_RCC_GetSysClockFreq+0x348>)
 8002506:	685b      	ldr	r3, [r3, #4]
 8002508:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800250c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002510:	4bae      	ldr	r3, [pc, #696]	; (80027cc <HAL_RCC_GetSysClockFreq+0x348>)
 8002512:	685b      	ldr	r3, [r3, #4]
 8002514:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002518:	2b00      	cmp	r3, #0
 800251a:	d031      	beq.n	8002580 <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800251c:	4bab      	ldr	r3, [pc, #684]	; (80027cc <HAL_RCC_GetSysClockFreq+0x348>)
 800251e:	685b      	ldr	r3, [r3, #4]
 8002520:	099b      	lsrs	r3, r3, #6
 8002522:	2200      	movs	r2, #0
 8002524:	66bb      	str	r3, [r7, #104]	; 0x68
 8002526:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002528:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800252a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800252e:	663b      	str	r3, [r7, #96]	; 0x60
 8002530:	2300      	movs	r3, #0
 8002532:	667b      	str	r3, [r7, #100]	; 0x64
 8002534:	4ba7      	ldr	r3, [pc, #668]	; (80027d4 <HAL_RCC_GetSysClockFreq+0x350>)
 8002536:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 800253a:	462a      	mov	r2, r5
 800253c:	fb03 f202 	mul.w	r2, r3, r2
 8002540:	2300      	movs	r3, #0
 8002542:	4621      	mov	r1, r4
 8002544:	fb01 f303 	mul.w	r3, r1, r3
 8002548:	4413      	add	r3, r2
 800254a:	4aa2      	ldr	r2, [pc, #648]	; (80027d4 <HAL_RCC_GetSysClockFreq+0x350>)
 800254c:	4621      	mov	r1, r4
 800254e:	fba1 1202 	umull	r1, r2, r1, r2
 8002552:	67fa      	str	r2, [r7, #124]	; 0x7c
 8002554:	460a      	mov	r2, r1
 8002556:	67ba      	str	r2, [r7, #120]	; 0x78
 8002558:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800255a:	4413      	add	r3, r2
 800255c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800255e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002562:	2200      	movs	r2, #0
 8002564:	65bb      	str	r3, [r7, #88]	; 0x58
 8002566:	65fa      	str	r2, [r7, #92]	; 0x5c
 8002568:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800256c:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8002570:	f7fd fe48 	bl	8000204 <__aeabi_uldivmod>
 8002574:	4602      	mov	r2, r0
 8002576:	460b      	mov	r3, r1
 8002578:	4613      	mov	r3, r2
 800257a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800257e:	e064      	b.n	800264a <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002580:	4b92      	ldr	r3, [pc, #584]	; (80027cc <HAL_RCC_GetSysClockFreq+0x348>)
 8002582:	685b      	ldr	r3, [r3, #4]
 8002584:	099b      	lsrs	r3, r3, #6
 8002586:	2200      	movs	r2, #0
 8002588:	653b      	str	r3, [r7, #80]	; 0x50
 800258a:	657a      	str	r2, [r7, #84]	; 0x54
 800258c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800258e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002592:	64bb      	str	r3, [r7, #72]	; 0x48
 8002594:	2300      	movs	r3, #0
 8002596:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002598:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 800259c:	4622      	mov	r2, r4
 800259e:	462b      	mov	r3, r5
 80025a0:	f04f 0000 	mov.w	r0, #0
 80025a4:	f04f 0100 	mov.w	r1, #0
 80025a8:	0159      	lsls	r1, r3, #5
 80025aa:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80025ae:	0150      	lsls	r0, r2, #5
 80025b0:	4602      	mov	r2, r0
 80025b2:	460b      	mov	r3, r1
 80025b4:	4621      	mov	r1, r4
 80025b6:	1a51      	subs	r1, r2, r1
 80025b8:	6139      	str	r1, [r7, #16]
 80025ba:	4629      	mov	r1, r5
 80025bc:	eb63 0301 	sbc.w	r3, r3, r1
 80025c0:	617b      	str	r3, [r7, #20]
 80025c2:	f04f 0200 	mov.w	r2, #0
 80025c6:	f04f 0300 	mov.w	r3, #0
 80025ca:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80025ce:	4659      	mov	r1, fp
 80025d0:	018b      	lsls	r3, r1, #6
 80025d2:	4651      	mov	r1, sl
 80025d4:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80025d8:	4651      	mov	r1, sl
 80025da:	018a      	lsls	r2, r1, #6
 80025dc:	4651      	mov	r1, sl
 80025de:	ebb2 0801 	subs.w	r8, r2, r1
 80025e2:	4659      	mov	r1, fp
 80025e4:	eb63 0901 	sbc.w	r9, r3, r1
 80025e8:	f04f 0200 	mov.w	r2, #0
 80025ec:	f04f 0300 	mov.w	r3, #0
 80025f0:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80025f4:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80025f8:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80025fc:	4690      	mov	r8, r2
 80025fe:	4699      	mov	r9, r3
 8002600:	4623      	mov	r3, r4
 8002602:	eb18 0303 	adds.w	r3, r8, r3
 8002606:	60bb      	str	r3, [r7, #8]
 8002608:	462b      	mov	r3, r5
 800260a:	eb49 0303 	adc.w	r3, r9, r3
 800260e:	60fb      	str	r3, [r7, #12]
 8002610:	f04f 0200 	mov.w	r2, #0
 8002614:	f04f 0300 	mov.w	r3, #0
 8002618:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800261c:	4629      	mov	r1, r5
 800261e:	028b      	lsls	r3, r1, #10
 8002620:	4621      	mov	r1, r4
 8002622:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002626:	4621      	mov	r1, r4
 8002628:	028a      	lsls	r2, r1, #10
 800262a:	4610      	mov	r0, r2
 800262c:	4619      	mov	r1, r3
 800262e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002632:	2200      	movs	r2, #0
 8002634:	643b      	str	r3, [r7, #64]	; 0x40
 8002636:	647a      	str	r2, [r7, #68]	; 0x44
 8002638:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800263c:	f7fd fde2 	bl	8000204 <__aeabi_uldivmod>
 8002640:	4602      	mov	r2, r0
 8002642:	460b      	mov	r3, r1
 8002644:	4613      	mov	r3, r2
 8002646:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800264a:	4b60      	ldr	r3, [pc, #384]	; (80027cc <HAL_RCC_GetSysClockFreq+0x348>)
 800264c:	685b      	ldr	r3, [r3, #4]
 800264e:	0c1b      	lsrs	r3, r3, #16
 8002650:	f003 0303 	and.w	r3, r3, #3
 8002654:	3301      	adds	r3, #1
 8002656:	005b      	lsls	r3, r3, #1
 8002658:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

      sysclockfreq = pllvco/pllp;
 800265c:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002660:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002664:	fbb2 f3f3 	udiv	r3, r2, r3
 8002668:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 800266c:	e0a6      	b.n	80027bc <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800266e:	4b57      	ldr	r3, [pc, #348]	; (80027cc <HAL_RCC_GetSysClockFreq+0x348>)
 8002670:	685b      	ldr	r3, [r3, #4]
 8002672:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002676:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800267a:	4b54      	ldr	r3, [pc, #336]	; (80027cc <HAL_RCC_GetSysClockFreq+0x348>)
 800267c:	685b      	ldr	r3, [r3, #4]
 800267e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002682:	2b00      	cmp	r3, #0
 8002684:	d02a      	beq.n	80026dc <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002686:	4b51      	ldr	r3, [pc, #324]	; (80027cc <HAL_RCC_GetSysClockFreq+0x348>)
 8002688:	685b      	ldr	r3, [r3, #4]
 800268a:	099b      	lsrs	r3, r3, #6
 800268c:	2200      	movs	r2, #0
 800268e:	63bb      	str	r3, [r7, #56]	; 0x38
 8002690:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002692:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002694:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002698:	2100      	movs	r1, #0
 800269a:	4b4e      	ldr	r3, [pc, #312]	; (80027d4 <HAL_RCC_GetSysClockFreq+0x350>)
 800269c:	fb03 f201 	mul.w	r2, r3, r1
 80026a0:	2300      	movs	r3, #0
 80026a2:	fb00 f303 	mul.w	r3, r0, r3
 80026a6:	4413      	add	r3, r2
 80026a8:	4a4a      	ldr	r2, [pc, #296]	; (80027d4 <HAL_RCC_GetSysClockFreq+0x350>)
 80026aa:	fba0 1202 	umull	r1, r2, r0, r2
 80026ae:	677a      	str	r2, [r7, #116]	; 0x74
 80026b0:	460a      	mov	r2, r1
 80026b2:	673a      	str	r2, [r7, #112]	; 0x70
 80026b4:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80026b6:	4413      	add	r3, r2
 80026b8:	677b      	str	r3, [r7, #116]	; 0x74
 80026ba:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80026be:	2200      	movs	r2, #0
 80026c0:	633b      	str	r3, [r7, #48]	; 0x30
 80026c2:	637a      	str	r2, [r7, #52]	; 0x34
 80026c4:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80026c8:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 80026cc:	f7fd fd9a 	bl	8000204 <__aeabi_uldivmod>
 80026d0:	4602      	mov	r2, r0
 80026d2:	460b      	mov	r3, r1
 80026d4:	4613      	mov	r3, r2
 80026d6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80026da:	e05b      	b.n	8002794 <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80026dc:	4b3b      	ldr	r3, [pc, #236]	; (80027cc <HAL_RCC_GetSysClockFreq+0x348>)
 80026de:	685b      	ldr	r3, [r3, #4]
 80026e0:	099b      	lsrs	r3, r3, #6
 80026e2:	2200      	movs	r2, #0
 80026e4:	62bb      	str	r3, [r7, #40]	; 0x28
 80026e6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80026e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80026ee:	623b      	str	r3, [r7, #32]
 80026f0:	2300      	movs	r3, #0
 80026f2:	627b      	str	r3, [r7, #36]	; 0x24
 80026f4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80026f8:	4642      	mov	r2, r8
 80026fa:	464b      	mov	r3, r9
 80026fc:	f04f 0000 	mov.w	r0, #0
 8002700:	f04f 0100 	mov.w	r1, #0
 8002704:	0159      	lsls	r1, r3, #5
 8002706:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800270a:	0150      	lsls	r0, r2, #5
 800270c:	4602      	mov	r2, r0
 800270e:	460b      	mov	r3, r1
 8002710:	4641      	mov	r1, r8
 8002712:	ebb2 0a01 	subs.w	sl, r2, r1
 8002716:	4649      	mov	r1, r9
 8002718:	eb63 0b01 	sbc.w	fp, r3, r1
 800271c:	f04f 0200 	mov.w	r2, #0
 8002720:	f04f 0300 	mov.w	r3, #0
 8002724:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002728:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800272c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002730:	ebb2 040a 	subs.w	r4, r2, sl
 8002734:	eb63 050b 	sbc.w	r5, r3, fp
 8002738:	f04f 0200 	mov.w	r2, #0
 800273c:	f04f 0300 	mov.w	r3, #0
 8002740:	00eb      	lsls	r3, r5, #3
 8002742:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002746:	00e2      	lsls	r2, r4, #3
 8002748:	4614      	mov	r4, r2
 800274a:	461d      	mov	r5, r3
 800274c:	4643      	mov	r3, r8
 800274e:	18e3      	adds	r3, r4, r3
 8002750:	603b      	str	r3, [r7, #0]
 8002752:	464b      	mov	r3, r9
 8002754:	eb45 0303 	adc.w	r3, r5, r3
 8002758:	607b      	str	r3, [r7, #4]
 800275a:	f04f 0200 	mov.w	r2, #0
 800275e:	f04f 0300 	mov.w	r3, #0
 8002762:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002766:	4629      	mov	r1, r5
 8002768:	028b      	lsls	r3, r1, #10
 800276a:	4621      	mov	r1, r4
 800276c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002770:	4621      	mov	r1, r4
 8002772:	028a      	lsls	r2, r1, #10
 8002774:	4610      	mov	r0, r2
 8002776:	4619      	mov	r1, r3
 8002778:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800277c:	2200      	movs	r2, #0
 800277e:	61bb      	str	r3, [r7, #24]
 8002780:	61fa      	str	r2, [r7, #28]
 8002782:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002786:	f7fd fd3d 	bl	8000204 <__aeabi_uldivmod>
 800278a:	4602      	mov	r2, r0
 800278c:	460b      	mov	r3, r1
 800278e:	4613      	mov	r3, r2
 8002790:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002794:	4b0d      	ldr	r3, [pc, #52]	; (80027cc <HAL_RCC_GetSysClockFreq+0x348>)
 8002796:	685b      	ldr	r3, [r3, #4]
 8002798:	0f1b      	lsrs	r3, r3, #28
 800279a:	f003 0307 	and.w	r3, r3, #7
 800279e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

      sysclockfreq = pllvco/pllr;
 80027a2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80027a6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80027aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80027ae:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 80027b2:	e003      	b.n	80027bc <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80027b4:	4b06      	ldr	r3, [pc, #24]	; (80027d0 <HAL_RCC_GetSysClockFreq+0x34c>)
 80027b6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 80027ba:	bf00      	nop
    }
  }
  return sysclockfreq;
 80027bc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
}
 80027c0:	4618      	mov	r0, r3
 80027c2:	3798      	adds	r7, #152	; 0x98
 80027c4:	46bd      	mov	sp, r7
 80027c6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80027ca:	bf00      	nop
 80027cc:	40023800 	.word	0x40023800
 80027d0:	00f42400 	.word	0x00f42400
 80027d4:	017d7840 	.word	0x017d7840

080027d8 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80027d8:	b580      	push	{r7, lr}
 80027da:	b086      	sub	sp, #24
 80027dc:	af00      	add	r7, sp, #0
 80027de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d101      	bne.n	80027ea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80027e6:	2301      	movs	r3, #1
 80027e8:	e28d      	b.n	8002d06 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f003 0301 	and.w	r3, r3, #1
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	f000 8083 	beq.w	80028fe <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80027f8:	4b94      	ldr	r3, [pc, #592]	; (8002a4c <HAL_RCC_OscConfig+0x274>)
 80027fa:	689b      	ldr	r3, [r3, #8]
 80027fc:	f003 030c 	and.w	r3, r3, #12
 8002800:	2b04      	cmp	r3, #4
 8002802:	d019      	beq.n	8002838 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002804:	4b91      	ldr	r3, [pc, #580]	; (8002a4c <HAL_RCC_OscConfig+0x274>)
 8002806:	689b      	ldr	r3, [r3, #8]
 8002808:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800280c:	2b08      	cmp	r3, #8
 800280e:	d106      	bne.n	800281e <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002810:	4b8e      	ldr	r3, [pc, #568]	; (8002a4c <HAL_RCC_OscConfig+0x274>)
 8002812:	685b      	ldr	r3, [r3, #4]
 8002814:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002818:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800281c:	d00c      	beq.n	8002838 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800281e:	4b8b      	ldr	r3, [pc, #556]	; (8002a4c <HAL_RCC_OscConfig+0x274>)
 8002820:	689b      	ldr	r3, [r3, #8]
 8002822:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002826:	2b0c      	cmp	r3, #12
 8002828:	d112      	bne.n	8002850 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800282a:	4b88      	ldr	r3, [pc, #544]	; (8002a4c <HAL_RCC_OscConfig+0x274>)
 800282c:	685b      	ldr	r3, [r3, #4]
 800282e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002832:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002836:	d10b      	bne.n	8002850 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002838:	4b84      	ldr	r3, [pc, #528]	; (8002a4c <HAL_RCC_OscConfig+0x274>)
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002840:	2b00      	cmp	r3, #0
 8002842:	d05b      	beq.n	80028fc <HAL_RCC_OscConfig+0x124>
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	685b      	ldr	r3, [r3, #4]
 8002848:	2b00      	cmp	r3, #0
 800284a:	d157      	bne.n	80028fc <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 800284c:	2301      	movs	r3, #1
 800284e:	e25a      	b.n	8002d06 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	685b      	ldr	r3, [r3, #4]
 8002854:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002858:	d106      	bne.n	8002868 <HAL_RCC_OscConfig+0x90>
 800285a:	4b7c      	ldr	r3, [pc, #496]	; (8002a4c <HAL_RCC_OscConfig+0x274>)
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	4a7b      	ldr	r2, [pc, #492]	; (8002a4c <HAL_RCC_OscConfig+0x274>)
 8002860:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002864:	6013      	str	r3, [r2, #0]
 8002866:	e01d      	b.n	80028a4 <HAL_RCC_OscConfig+0xcc>
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	685b      	ldr	r3, [r3, #4]
 800286c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002870:	d10c      	bne.n	800288c <HAL_RCC_OscConfig+0xb4>
 8002872:	4b76      	ldr	r3, [pc, #472]	; (8002a4c <HAL_RCC_OscConfig+0x274>)
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	4a75      	ldr	r2, [pc, #468]	; (8002a4c <HAL_RCC_OscConfig+0x274>)
 8002878:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800287c:	6013      	str	r3, [r2, #0]
 800287e:	4b73      	ldr	r3, [pc, #460]	; (8002a4c <HAL_RCC_OscConfig+0x274>)
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	4a72      	ldr	r2, [pc, #456]	; (8002a4c <HAL_RCC_OscConfig+0x274>)
 8002884:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002888:	6013      	str	r3, [r2, #0]
 800288a:	e00b      	b.n	80028a4 <HAL_RCC_OscConfig+0xcc>
 800288c:	4b6f      	ldr	r3, [pc, #444]	; (8002a4c <HAL_RCC_OscConfig+0x274>)
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	4a6e      	ldr	r2, [pc, #440]	; (8002a4c <HAL_RCC_OscConfig+0x274>)
 8002892:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002896:	6013      	str	r3, [r2, #0]
 8002898:	4b6c      	ldr	r3, [pc, #432]	; (8002a4c <HAL_RCC_OscConfig+0x274>)
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	4a6b      	ldr	r2, [pc, #428]	; (8002a4c <HAL_RCC_OscConfig+0x274>)
 800289e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80028a2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	685b      	ldr	r3, [r3, #4]
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d013      	beq.n	80028d4 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028ac:	f7fe fb04 	bl	8000eb8 <HAL_GetTick>
 80028b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028b2:	e008      	b.n	80028c6 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80028b4:	f7fe fb00 	bl	8000eb8 <HAL_GetTick>
 80028b8:	4602      	mov	r2, r0
 80028ba:	693b      	ldr	r3, [r7, #16]
 80028bc:	1ad3      	subs	r3, r2, r3
 80028be:	2b64      	cmp	r3, #100	; 0x64
 80028c0:	d901      	bls.n	80028c6 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80028c2:	2303      	movs	r3, #3
 80028c4:	e21f      	b.n	8002d06 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028c6:	4b61      	ldr	r3, [pc, #388]	; (8002a4c <HAL_RCC_OscConfig+0x274>)
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d0f0      	beq.n	80028b4 <HAL_RCC_OscConfig+0xdc>
 80028d2:	e014      	b.n	80028fe <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028d4:	f7fe faf0 	bl	8000eb8 <HAL_GetTick>
 80028d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80028da:	e008      	b.n	80028ee <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80028dc:	f7fe faec 	bl	8000eb8 <HAL_GetTick>
 80028e0:	4602      	mov	r2, r0
 80028e2:	693b      	ldr	r3, [r7, #16]
 80028e4:	1ad3      	subs	r3, r2, r3
 80028e6:	2b64      	cmp	r3, #100	; 0x64
 80028e8:	d901      	bls.n	80028ee <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80028ea:	2303      	movs	r3, #3
 80028ec:	e20b      	b.n	8002d06 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80028ee:	4b57      	ldr	r3, [pc, #348]	; (8002a4c <HAL_RCC_OscConfig+0x274>)
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d1f0      	bne.n	80028dc <HAL_RCC_OscConfig+0x104>
 80028fa:	e000      	b.n	80028fe <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028fc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f003 0302 	and.w	r3, r3, #2
 8002906:	2b00      	cmp	r3, #0
 8002908:	d06f      	beq.n	80029ea <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800290a:	4b50      	ldr	r3, [pc, #320]	; (8002a4c <HAL_RCC_OscConfig+0x274>)
 800290c:	689b      	ldr	r3, [r3, #8]
 800290e:	f003 030c 	and.w	r3, r3, #12
 8002912:	2b00      	cmp	r3, #0
 8002914:	d017      	beq.n	8002946 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002916:	4b4d      	ldr	r3, [pc, #308]	; (8002a4c <HAL_RCC_OscConfig+0x274>)
 8002918:	689b      	ldr	r3, [r3, #8]
 800291a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800291e:	2b08      	cmp	r3, #8
 8002920:	d105      	bne.n	800292e <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002922:	4b4a      	ldr	r3, [pc, #296]	; (8002a4c <HAL_RCC_OscConfig+0x274>)
 8002924:	685b      	ldr	r3, [r3, #4]
 8002926:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800292a:	2b00      	cmp	r3, #0
 800292c:	d00b      	beq.n	8002946 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800292e:	4b47      	ldr	r3, [pc, #284]	; (8002a4c <HAL_RCC_OscConfig+0x274>)
 8002930:	689b      	ldr	r3, [r3, #8]
 8002932:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002936:	2b0c      	cmp	r3, #12
 8002938:	d11c      	bne.n	8002974 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800293a:	4b44      	ldr	r3, [pc, #272]	; (8002a4c <HAL_RCC_OscConfig+0x274>)
 800293c:	685b      	ldr	r3, [r3, #4]
 800293e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002942:	2b00      	cmp	r3, #0
 8002944:	d116      	bne.n	8002974 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002946:	4b41      	ldr	r3, [pc, #260]	; (8002a4c <HAL_RCC_OscConfig+0x274>)
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f003 0302 	and.w	r3, r3, #2
 800294e:	2b00      	cmp	r3, #0
 8002950:	d005      	beq.n	800295e <HAL_RCC_OscConfig+0x186>
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	68db      	ldr	r3, [r3, #12]
 8002956:	2b01      	cmp	r3, #1
 8002958:	d001      	beq.n	800295e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800295a:	2301      	movs	r3, #1
 800295c:	e1d3      	b.n	8002d06 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800295e:	4b3b      	ldr	r3, [pc, #236]	; (8002a4c <HAL_RCC_OscConfig+0x274>)
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	691b      	ldr	r3, [r3, #16]
 800296a:	00db      	lsls	r3, r3, #3
 800296c:	4937      	ldr	r1, [pc, #220]	; (8002a4c <HAL_RCC_OscConfig+0x274>)
 800296e:	4313      	orrs	r3, r2
 8002970:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002972:	e03a      	b.n	80029ea <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	68db      	ldr	r3, [r3, #12]
 8002978:	2b00      	cmp	r3, #0
 800297a:	d020      	beq.n	80029be <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800297c:	4b34      	ldr	r3, [pc, #208]	; (8002a50 <HAL_RCC_OscConfig+0x278>)
 800297e:	2201      	movs	r2, #1
 8002980:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002982:	f7fe fa99 	bl	8000eb8 <HAL_GetTick>
 8002986:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002988:	e008      	b.n	800299c <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800298a:	f7fe fa95 	bl	8000eb8 <HAL_GetTick>
 800298e:	4602      	mov	r2, r0
 8002990:	693b      	ldr	r3, [r7, #16]
 8002992:	1ad3      	subs	r3, r2, r3
 8002994:	2b02      	cmp	r3, #2
 8002996:	d901      	bls.n	800299c <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8002998:	2303      	movs	r3, #3
 800299a:	e1b4      	b.n	8002d06 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800299c:	4b2b      	ldr	r3, [pc, #172]	; (8002a4c <HAL_RCC_OscConfig+0x274>)
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f003 0302 	and.w	r3, r3, #2
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d0f0      	beq.n	800298a <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029a8:	4b28      	ldr	r3, [pc, #160]	; (8002a4c <HAL_RCC_OscConfig+0x274>)
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	691b      	ldr	r3, [r3, #16]
 80029b4:	00db      	lsls	r3, r3, #3
 80029b6:	4925      	ldr	r1, [pc, #148]	; (8002a4c <HAL_RCC_OscConfig+0x274>)
 80029b8:	4313      	orrs	r3, r2
 80029ba:	600b      	str	r3, [r1, #0]
 80029bc:	e015      	b.n	80029ea <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80029be:	4b24      	ldr	r3, [pc, #144]	; (8002a50 <HAL_RCC_OscConfig+0x278>)
 80029c0:	2200      	movs	r2, #0
 80029c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029c4:	f7fe fa78 	bl	8000eb8 <HAL_GetTick>
 80029c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80029ca:	e008      	b.n	80029de <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80029cc:	f7fe fa74 	bl	8000eb8 <HAL_GetTick>
 80029d0:	4602      	mov	r2, r0
 80029d2:	693b      	ldr	r3, [r7, #16]
 80029d4:	1ad3      	subs	r3, r2, r3
 80029d6:	2b02      	cmp	r3, #2
 80029d8:	d901      	bls.n	80029de <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80029da:	2303      	movs	r3, #3
 80029dc:	e193      	b.n	8002d06 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80029de:	4b1b      	ldr	r3, [pc, #108]	; (8002a4c <HAL_RCC_OscConfig+0x274>)
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f003 0302 	and.w	r3, r3, #2
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d1f0      	bne.n	80029cc <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f003 0308 	and.w	r3, r3, #8
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d036      	beq.n	8002a64 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	695b      	ldr	r3, [r3, #20]
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d016      	beq.n	8002a2c <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80029fe:	4b15      	ldr	r3, [pc, #84]	; (8002a54 <HAL_RCC_OscConfig+0x27c>)
 8002a00:	2201      	movs	r2, #1
 8002a02:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a04:	f7fe fa58 	bl	8000eb8 <HAL_GetTick>
 8002a08:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a0a:	e008      	b.n	8002a1e <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002a0c:	f7fe fa54 	bl	8000eb8 <HAL_GetTick>
 8002a10:	4602      	mov	r2, r0
 8002a12:	693b      	ldr	r3, [r7, #16]
 8002a14:	1ad3      	subs	r3, r2, r3
 8002a16:	2b02      	cmp	r3, #2
 8002a18:	d901      	bls.n	8002a1e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8002a1a:	2303      	movs	r3, #3
 8002a1c:	e173      	b.n	8002d06 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a1e:	4b0b      	ldr	r3, [pc, #44]	; (8002a4c <HAL_RCC_OscConfig+0x274>)
 8002a20:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a22:	f003 0302 	and.w	r3, r3, #2
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d0f0      	beq.n	8002a0c <HAL_RCC_OscConfig+0x234>
 8002a2a:	e01b      	b.n	8002a64 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002a2c:	4b09      	ldr	r3, [pc, #36]	; (8002a54 <HAL_RCC_OscConfig+0x27c>)
 8002a2e:	2200      	movs	r2, #0
 8002a30:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a32:	f7fe fa41 	bl	8000eb8 <HAL_GetTick>
 8002a36:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a38:	e00e      	b.n	8002a58 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002a3a:	f7fe fa3d 	bl	8000eb8 <HAL_GetTick>
 8002a3e:	4602      	mov	r2, r0
 8002a40:	693b      	ldr	r3, [r7, #16]
 8002a42:	1ad3      	subs	r3, r2, r3
 8002a44:	2b02      	cmp	r3, #2
 8002a46:	d907      	bls.n	8002a58 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8002a48:	2303      	movs	r3, #3
 8002a4a:	e15c      	b.n	8002d06 <HAL_RCC_OscConfig+0x52e>
 8002a4c:	40023800 	.word	0x40023800
 8002a50:	42470000 	.word	0x42470000
 8002a54:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a58:	4b8a      	ldr	r3, [pc, #552]	; (8002c84 <HAL_RCC_OscConfig+0x4ac>)
 8002a5a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a5c:	f003 0302 	and.w	r3, r3, #2
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d1ea      	bne.n	8002a3a <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f003 0304 	and.w	r3, r3, #4
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	f000 8097 	beq.w	8002ba0 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002a72:	2300      	movs	r3, #0
 8002a74:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a76:	4b83      	ldr	r3, [pc, #524]	; (8002c84 <HAL_RCC_OscConfig+0x4ac>)
 8002a78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d10f      	bne.n	8002aa2 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a82:	2300      	movs	r3, #0
 8002a84:	60bb      	str	r3, [r7, #8]
 8002a86:	4b7f      	ldr	r3, [pc, #508]	; (8002c84 <HAL_RCC_OscConfig+0x4ac>)
 8002a88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a8a:	4a7e      	ldr	r2, [pc, #504]	; (8002c84 <HAL_RCC_OscConfig+0x4ac>)
 8002a8c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a90:	6413      	str	r3, [r2, #64]	; 0x40
 8002a92:	4b7c      	ldr	r3, [pc, #496]	; (8002c84 <HAL_RCC_OscConfig+0x4ac>)
 8002a94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a9a:	60bb      	str	r3, [r7, #8]
 8002a9c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a9e:	2301      	movs	r3, #1
 8002aa0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002aa2:	4b79      	ldr	r3, [pc, #484]	; (8002c88 <HAL_RCC_OscConfig+0x4b0>)
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d118      	bne.n	8002ae0 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002aae:	4b76      	ldr	r3, [pc, #472]	; (8002c88 <HAL_RCC_OscConfig+0x4b0>)
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	4a75      	ldr	r2, [pc, #468]	; (8002c88 <HAL_RCC_OscConfig+0x4b0>)
 8002ab4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ab8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002aba:	f7fe f9fd 	bl	8000eb8 <HAL_GetTick>
 8002abe:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ac0:	e008      	b.n	8002ad4 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ac2:	f7fe f9f9 	bl	8000eb8 <HAL_GetTick>
 8002ac6:	4602      	mov	r2, r0
 8002ac8:	693b      	ldr	r3, [r7, #16]
 8002aca:	1ad3      	subs	r3, r2, r3
 8002acc:	2b02      	cmp	r3, #2
 8002ace:	d901      	bls.n	8002ad4 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8002ad0:	2303      	movs	r3, #3
 8002ad2:	e118      	b.n	8002d06 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ad4:	4b6c      	ldr	r3, [pc, #432]	; (8002c88 <HAL_RCC_OscConfig+0x4b0>)
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d0f0      	beq.n	8002ac2 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	689b      	ldr	r3, [r3, #8]
 8002ae4:	2b01      	cmp	r3, #1
 8002ae6:	d106      	bne.n	8002af6 <HAL_RCC_OscConfig+0x31e>
 8002ae8:	4b66      	ldr	r3, [pc, #408]	; (8002c84 <HAL_RCC_OscConfig+0x4ac>)
 8002aea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002aec:	4a65      	ldr	r2, [pc, #404]	; (8002c84 <HAL_RCC_OscConfig+0x4ac>)
 8002aee:	f043 0301 	orr.w	r3, r3, #1
 8002af2:	6713      	str	r3, [r2, #112]	; 0x70
 8002af4:	e01c      	b.n	8002b30 <HAL_RCC_OscConfig+0x358>
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	689b      	ldr	r3, [r3, #8]
 8002afa:	2b05      	cmp	r3, #5
 8002afc:	d10c      	bne.n	8002b18 <HAL_RCC_OscConfig+0x340>
 8002afe:	4b61      	ldr	r3, [pc, #388]	; (8002c84 <HAL_RCC_OscConfig+0x4ac>)
 8002b00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b02:	4a60      	ldr	r2, [pc, #384]	; (8002c84 <HAL_RCC_OscConfig+0x4ac>)
 8002b04:	f043 0304 	orr.w	r3, r3, #4
 8002b08:	6713      	str	r3, [r2, #112]	; 0x70
 8002b0a:	4b5e      	ldr	r3, [pc, #376]	; (8002c84 <HAL_RCC_OscConfig+0x4ac>)
 8002b0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b0e:	4a5d      	ldr	r2, [pc, #372]	; (8002c84 <HAL_RCC_OscConfig+0x4ac>)
 8002b10:	f043 0301 	orr.w	r3, r3, #1
 8002b14:	6713      	str	r3, [r2, #112]	; 0x70
 8002b16:	e00b      	b.n	8002b30 <HAL_RCC_OscConfig+0x358>
 8002b18:	4b5a      	ldr	r3, [pc, #360]	; (8002c84 <HAL_RCC_OscConfig+0x4ac>)
 8002b1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b1c:	4a59      	ldr	r2, [pc, #356]	; (8002c84 <HAL_RCC_OscConfig+0x4ac>)
 8002b1e:	f023 0301 	bic.w	r3, r3, #1
 8002b22:	6713      	str	r3, [r2, #112]	; 0x70
 8002b24:	4b57      	ldr	r3, [pc, #348]	; (8002c84 <HAL_RCC_OscConfig+0x4ac>)
 8002b26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b28:	4a56      	ldr	r2, [pc, #344]	; (8002c84 <HAL_RCC_OscConfig+0x4ac>)
 8002b2a:	f023 0304 	bic.w	r3, r3, #4
 8002b2e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	689b      	ldr	r3, [r3, #8]
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d015      	beq.n	8002b64 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b38:	f7fe f9be 	bl	8000eb8 <HAL_GetTick>
 8002b3c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b3e:	e00a      	b.n	8002b56 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002b40:	f7fe f9ba 	bl	8000eb8 <HAL_GetTick>
 8002b44:	4602      	mov	r2, r0
 8002b46:	693b      	ldr	r3, [r7, #16]
 8002b48:	1ad3      	subs	r3, r2, r3
 8002b4a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b4e:	4293      	cmp	r3, r2
 8002b50:	d901      	bls.n	8002b56 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8002b52:	2303      	movs	r3, #3
 8002b54:	e0d7      	b.n	8002d06 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b56:	4b4b      	ldr	r3, [pc, #300]	; (8002c84 <HAL_RCC_OscConfig+0x4ac>)
 8002b58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b5a:	f003 0302 	and.w	r3, r3, #2
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d0ee      	beq.n	8002b40 <HAL_RCC_OscConfig+0x368>
 8002b62:	e014      	b.n	8002b8e <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b64:	f7fe f9a8 	bl	8000eb8 <HAL_GetTick>
 8002b68:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b6a:	e00a      	b.n	8002b82 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002b6c:	f7fe f9a4 	bl	8000eb8 <HAL_GetTick>
 8002b70:	4602      	mov	r2, r0
 8002b72:	693b      	ldr	r3, [r7, #16]
 8002b74:	1ad3      	subs	r3, r2, r3
 8002b76:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b7a:	4293      	cmp	r3, r2
 8002b7c:	d901      	bls.n	8002b82 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8002b7e:	2303      	movs	r3, #3
 8002b80:	e0c1      	b.n	8002d06 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b82:	4b40      	ldr	r3, [pc, #256]	; (8002c84 <HAL_RCC_OscConfig+0x4ac>)
 8002b84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b86:	f003 0302 	and.w	r3, r3, #2
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d1ee      	bne.n	8002b6c <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002b8e:	7dfb      	ldrb	r3, [r7, #23]
 8002b90:	2b01      	cmp	r3, #1
 8002b92:	d105      	bne.n	8002ba0 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b94:	4b3b      	ldr	r3, [pc, #236]	; (8002c84 <HAL_RCC_OscConfig+0x4ac>)
 8002b96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b98:	4a3a      	ldr	r2, [pc, #232]	; (8002c84 <HAL_RCC_OscConfig+0x4ac>)
 8002b9a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002b9e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	699b      	ldr	r3, [r3, #24]
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	f000 80ad 	beq.w	8002d04 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002baa:	4b36      	ldr	r3, [pc, #216]	; (8002c84 <HAL_RCC_OscConfig+0x4ac>)
 8002bac:	689b      	ldr	r3, [r3, #8]
 8002bae:	f003 030c 	and.w	r3, r3, #12
 8002bb2:	2b08      	cmp	r3, #8
 8002bb4:	d060      	beq.n	8002c78 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	699b      	ldr	r3, [r3, #24]
 8002bba:	2b02      	cmp	r3, #2
 8002bbc:	d145      	bne.n	8002c4a <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002bbe:	4b33      	ldr	r3, [pc, #204]	; (8002c8c <HAL_RCC_OscConfig+0x4b4>)
 8002bc0:	2200      	movs	r2, #0
 8002bc2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bc4:	f7fe f978 	bl	8000eb8 <HAL_GetTick>
 8002bc8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002bca:	e008      	b.n	8002bde <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002bcc:	f7fe f974 	bl	8000eb8 <HAL_GetTick>
 8002bd0:	4602      	mov	r2, r0
 8002bd2:	693b      	ldr	r3, [r7, #16]
 8002bd4:	1ad3      	subs	r3, r2, r3
 8002bd6:	2b02      	cmp	r3, #2
 8002bd8:	d901      	bls.n	8002bde <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8002bda:	2303      	movs	r3, #3
 8002bdc:	e093      	b.n	8002d06 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002bde:	4b29      	ldr	r3, [pc, #164]	; (8002c84 <HAL_RCC_OscConfig+0x4ac>)
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d1f0      	bne.n	8002bcc <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	69da      	ldr	r2, [r3, #28]
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	6a1b      	ldr	r3, [r3, #32]
 8002bf2:	431a      	orrs	r2, r3
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bf8:	019b      	lsls	r3, r3, #6
 8002bfa:	431a      	orrs	r2, r3
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c00:	085b      	lsrs	r3, r3, #1
 8002c02:	3b01      	subs	r3, #1
 8002c04:	041b      	lsls	r3, r3, #16
 8002c06:	431a      	orrs	r2, r3
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c0c:	061b      	lsls	r3, r3, #24
 8002c0e:	431a      	orrs	r2, r3
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c14:	071b      	lsls	r3, r3, #28
 8002c16:	491b      	ldr	r1, [pc, #108]	; (8002c84 <HAL_RCC_OscConfig+0x4ac>)
 8002c18:	4313      	orrs	r3, r2
 8002c1a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002c1c:	4b1b      	ldr	r3, [pc, #108]	; (8002c8c <HAL_RCC_OscConfig+0x4b4>)
 8002c1e:	2201      	movs	r2, #1
 8002c20:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c22:	f7fe f949 	bl	8000eb8 <HAL_GetTick>
 8002c26:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c28:	e008      	b.n	8002c3c <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c2a:	f7fe f945 	bl	8000eb8 <HAL_GetTick>
 8002c2e:	4602      	mov	r2, r0
 8002c30:	693b      	ldr	r3, [r7, #16]
 8002c32:	1ad3      	subs	r3, r2, r3
 8002c34:	2b02      	cmp	r3, #2
 8002c36:	d901      	bls.n	8002c3c <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8002c38:	2303      	movs	r3, #3
 8002c3a:	e064      	b.n	8002d06 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c3c:	4b11      	ldr	r3, [pc, #68]	; (8002c84 <HAL_RCC_OscConfig+0x4ac>)
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d0f0      	beq.n	8002c2a <HAL_RCC_OscConfig+0x452>
 8002c48:	e05c      	b.n	8002d04 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c4a:	4b10      	ldr	r3, [pc, #64]	; (8002c8c <HAL_RCC_OscConfig+0x4b4>)
 8002c4c:	2200      	movs	r2, #0
 8002c4e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c50:	f7fe f932 	bl	8000eb8 <HAL_GetTick>
 8002c54:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c56:	e008      	b.n	8002c6a <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c58:	f7fe f92e 	bl	8000eb8 <HAL_GetTick>
 8002c5c:	4602      	mov	r2, r0
 8002c5e:	693b      	ldr	r3, [r7, #16]
 8002c60:	1ad3      	subs	r3, r2, r3
 8002c62:	2b02      	cmp	r3, #2
 8002c64:	d901      	bls.n	8002c6a <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8002c66:	2303      	movs	r3, #3
 8002c68:	e04d      	b.n	8002d06 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c6a:	4b06      	ldr	r3, [pc, #24]	; (8002c84 <HAL_RCC_OscConfig+0x4ac>)
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d1f0      	bne.n	8002c58 <HAL_RCC_OscConfig+0x480>
 8002c76:	e045      	b.n	8002d04 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	699b      	ldr	r3, [r3, #24]
 8002c7c:	2b01      	cmp	r3, #1
 8002c7e:	d107      	bne.n	8002c90 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8002c80:	2301      	movs	r3, #1
 8002c82:	e040      	b.n	8002d06 <HAL_RCC_OscConfig+0x52e>
 8002c84:	40023800 	.word	0x40023800
 8002c88:	40007000 	.word	0x40007000
 8002c8c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002c90:	4b1f      	ldr	r3, [pc, #124]	; (8002d10 <HAL_RCC_OscConfig+0x538>)
 8002c92:	685b      	ldr	r3, [r3, #4]
 8002c94:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	699b      	ldr	r3, [r3, #24]
 8002c9a:	2b01      	cmp	r3, #1
 8002c9c:	d030      	beq.n	8002d00 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002ca8:	429a      	cmp	r2, r3
 8002caa:	d129      	bne.n	8002d00 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002cb6:	429a      	cmp	r2, r3
 8002cb8:	d122      	bne.n	8002d00 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002cba:	68fa      	ldr	r2, [r7, #12]
 8002cbc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002cc0:	4013      	ands	r3, r2
 8002cc2:	687a      	ldr	r2, [r7, #4]
 8002cc4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002cc6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002cc8:	4293      	cmp	r3, r2
 8002cca:	d119      	bne.n	8002d00 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cd6:	085b      	lsrs	r3, r3, #1
 8002cd8:	3b01      	subs	r3, #1
 8002cda:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002cdc:	429a      	cmp	r2, r3
 8002cde:	d10f      	bne.n	8002d00 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cea:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002cec:	429a      	cmp	r2, r3
 8002cee:	d107      	bne.n	8002d00 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cfa:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002cfc:	429a      	cmp	r2, r3
 8002cfe:	d001      	beq.n	8002d04 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8002d00:	2301      	movs	r3, #1
 8002d02:	e000      	b.n	8002d06 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8002d04:	2300      	movs	r3, #0
}
 8002d06:	4618      	mov	r0, r3
 8002d08:	3718      	adds	r7, #24
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	bd80      	pop	{r7, pc}
 8002d0e:	bf00      	nop
 8002d10:	40023800 	.word	0x40023800

08002d14 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002d14:	b580      	push	{r7, lr}
 8002d16:	b082      	sub	sp, #8
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d101      	bne.n	8002d26 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002d22:	2301      	movs	r3, #1
 8002d24:	e041      	b.n	8002daa <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d2c:	b2db      	uxtb	r3, r3
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d106      	bne.n	8002d40 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	2200      	movs	r2, #0
 8002d36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002d3a:	6878      	ldr	r0, [r7, #4]
 8002d3c:	f7fd ff52 	bl	8000be4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	2202      	movs	r2, #2
 8002d44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681a      	ldr	r2, [r3, #0]
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	3304      	adds	r3, #4
 8002d50:	4619      	mov	r1, r3
 8002d52:	4610      	mov	r0, r2
 8002d54:	f000 fa96 	bl	8003284 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	2201      	movs	r2, #1
 8002d5c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	2201      	movs	r2, #1
 8002d64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	2201      	movs	r2, #1
 8002d6c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	2201      	movs	r2, #1
 8002d74:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	2201      	movs	r2, #1
 8002d7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	2201      	movs	r2, #1
 8002d84:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	2201      	movs	r2, #1
 8002d8c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	2201      	movs	r2, #1
 8002d94:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	2201      	movs	r2, #1
 8002d9c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	2201      	movs	r2, #1
 8002da4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002da8:	2300      	movs	r3, #0
}
 8002daa:	4618      	mov	r0, r3
 8002dac:	3708      	adds	r7, #8
 8002dae:	46bd      	mov	sp, r7
 8002db0:	bd80      	pop	{r7, pc}
	...

08002db4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002db4:	b480      	push	{r7}
 8002db6:	b085      	sub	sp, #20
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002dc2:	b2db      	uxtb	r3, r3
 8002dc4:	2b01      	cmp	r3, #1
 8002dc6:	d001      	beq.n	8002dcc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002dc8:	2301      	movs	r3, #1
 8002dca:	e04e      	b.n	8002e6a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	2202      	movs	r2, #2
 8002dd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	68da      	ldr	r2, [r3, #12]
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f042 0201 	orr.w	r2, r2, #1
 8002de2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	4a23      	ldr	r2, [pc, #140]	; (8002e78 <HAL_TIM_Base_Start_IT+0xc4>)
 8002dea:	4293      	cmp	r3, r2
 8002dec:	d022      	beq.n	8002e34 <HAL_TIM_Base_Start_IT+0x80>
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002df6:	d01d      	beq.n	8002e34 <HAL_TIM_Base_Start_IT+0x80>
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	4a1f      	ldr	r2, [pc, #124]	; (8002e7c <HAL_TIM_Base_Start_IT+0xc8>)
 8002dfe:	4293      	cmp	r3, r2
 8002e00:	d018      	beq.n	8002e34 <HAL_TIM_Base_Start_IT+0x80>
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	4a1e      	ldr	r2, [pc, #120]	; (8002e80 <HAL_TIM_Base_Start_IT+0xcc>)
 8002e08:	4293      	cmp	r3, r2
 8002e0a:	d013      	beq.n	8002e34 <HAL_TIM_Base_Start_IT+0x80>
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	4a1c      	ldr	r2, [pc, #112]	; (8002e84 <HAL_TIM_Base_Start_IT+0xd0>)
 8002e12:	4293      	cmp	r3, r2
 8002e14:	d00e      	beq.n	8002e34 <HAL_TIM_Base_Start_IT+0x80>
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	4a1b      	ldr	r2, [pc, #108]	; (8002e88 <HAL_TIM_Base_Start_IT+0xd4>)
 8002e1c:	4293      	cmp	r3, r2
 8002e1e:	d009      	beq.n	8002e34 <HAL_TIM_Base_Start_IT+0x80>
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	4a19      	ldr	r2, [pc, #100]	; (8002e8c <HAL_TIM_Base_Start_IT+0xd8>)
 8002e26:	4293      	cmp	r3, r2
 8002e28:	d004      	beq.n	8002e34 <HAL_TIM_Base_Start_IT+0x80>
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	4a18      	ldr	r2, [pc, #96]	; (8002e90 <HAL_TIM_Base_Start_IT+0xdc>)
 8002e30:	4293      	cmp	r3, r2
 8002e32:	d111      	bne.n	8002e58 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	689b      	ldr	r3, [r3, #8]
 8002e3a:	f003 0307 	and.w	r3, r3, #7
 8002e3e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	2b06      	cmp	r3, #6
 8002e44:	d010      	beq.n	8002e68 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	681a      	ldr	r2, [r3, #0]
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f042 0201 	orr.w	r2, r2, #1
 8002e54:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e56:	e007      	b.n	8002e68 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	681a      	ldr	r2, [r3, #0]
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f042 0201 	orr.w	r2, r2, #1
 8002e66:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002e68:	2300      	movs	r3, #0
}
 8002e6a:	4618      	mov	r0, r3
 8002e6c:	3714      	adds	r7, #20
 8002e6e:	46bd      	mov	sp, r7
 8002e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e74:	4770      	bx	lr
 8002e76:	bf00      	nop
 8002e78:	40010000 	.word	0x40010000
 8002e7c:	40000400 	.word	0x40000400
 8002e80:	40000800 	.word	0x40000800
 8002e84:	40000c00 	.word	0x40000c00
 8002e88:	40010400 	.word	0x40010400
 8002e8c:	40014000 	.word	0x40014000
 8002e90:	40001800 	.word	0x40001800

08002e94 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002e94:	b580      	push	{r7, lr}
 8002e96:	b082      	sub	sp, #8
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	691b      	ldr	r3, [r3, #16]
 8002ea2:	f003 0302 	and.w	r3, r3, #2
 8002ea6:	2b02      	cmp	r3, #2
 8002ea8:	d122      	bne.n	8002ef0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	68db      	ldr	r3, [r3, #12]
 8002eb0:	f003 0302 	and.w	r3, r3, #2
 8002eb4:	2b02      	cmp	r3, #2
 8002eb6:	d11b      	bne.n	8002ef0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f06f 0202 	mvn.w	r2, #2
 8002ec0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	2201      	movs	r2, #1
 8002ec6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	699b      	ldr	r3, [r3, #24]
 8002ece:	f003 0303 	and.w	r3, r3, #3
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d003      	beq.n	8002ede <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002ed6:	6878      	ldr	r0, [r7, #4]
 8002ed8:	f000 f9b5 	bl	8003246 <HAL_TIM_IC_CaptureCallback>
 8002edc:	e005      	b.n	8002eea <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ede:	6878      	ldr	r0, [r7, #4]
 8002ee0:	f000 f9a7 	bl	8003232 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ee4:	6878      	ldr	r0, [r7, #4]
 8002ee6:	f000 f9b8 	bl	800325a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	2200      	movs	r2, #0
 8002eee:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	691b      	ldr	r3, [r3, #16]
 8002ef6:	f003 0304 	and.w	r3, r3, #4
 8002efa:	2b04      	cmp	r3, #4
 8002efc:	d122      	bne.n	8002f44 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	68db      	ldr	r3, [r3, #12]
 8002f04:	f003 0304 	and.w	r3, r3, #4
 8002f08:	2b04      	cmp	r3, #4
 8002f0a:	d11b      	bne.n	8002f44 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	f06f 0204 	mvn.w	r2, #4
 8002f14:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	2202      	movs	r2, #2
 8002f1a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	699b      	ldr	r3, [r3, #24]
 8002f22:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d003      	beq.n	8002f32 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002f2a:	6878      	ldr	r0, [r7, #4]
 8002f2c:	f000 f98b 	bl	8003246 <HAL_TIM_IC_CaptureCallback>
 8002f30:	e005      	b.n	8002f3e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f32:	6878      	ldr	r0, [r7, #4]
 8002f34:	f000 f97d 	bl	8003232 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f38:	6878      	ldr	r0, [r7, #4]
 8002f3a:	f000 f98e 	bl	800325a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	2200      	movs	r2, #0
 8002f42:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	691b      	ldr	r3, [r3, #16]
 8002f4a:	f003 0308 	and.w	r3, r3, #8
 8002f4e:	2b08      	cmp	r3, #8
 8002f50:	d122      	bne.n	8002f98 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	68db      	ldr	r3, [r3, #12]
 8002f58:	f003 0308 	and.w	r3, r3, #8
 8002f5c:	2b08      	cmp	r3, #8
 8002f5e:	d11b      	bne.n	8002f98 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	f06f 0208 	mvn.w	r2, #8
 8002f68:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	2204      	movs	r2, #4
 8002f6e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	69db      	ldr	r3, [r3, #28]
 8002f76:	f003 0303 	and.w	r3, r3, #3
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d003      	beq.n	8002f86 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002f7e:	6878      	ldr	r0, [r7, #4]
 8002f80:	f000 f961 	bl	8003246 <HAL_TIM_IC_CaptureCallback>
 8002f84:	e005      	b.n	8002f92 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f86:	6878      	ldr	r0, [r7, #4]
 8002f88:	f000 f953 	bl	8003232 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f8c:	6878      	ldr	r0, [r7, #4]
 8002f8e:	f000 f964 	bl	800325a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	2200      	movs	r2, #0
 8002f96:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	691b      	ldr	r3, [r3, #16]
 8002f9e:	f003 0310 	and.w	r3, r3, #16
 8002fa2:	2b10      	cmp	r3, #16
 8002fa4:	d122      	bne.n	8002fec <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	68db      	ldr	r3, [r3, #12]
 8002fac:	f003 0310 	and.w	r3, r3, #16
 8002fb0:	2b10      	cmp	r3, #16
 8002fb2:	d11b      	bne.n	8002fec <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f06f 0210 	mvn.w	r2, #16
 8002fbc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	2208      	movs	r2, #8
 8002fc2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	69db      	ldr	r3, [r3, #28]
 8002fca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d003      	beq.n	8002fda <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002fd2:	6878      	ldr	r0, [r7, #4]
 8002fd4:	f000 f937 	bl	8003246 <HAL_TIM_IC_CaptureCallback>
 8002fd8:	e005      	b.n	8002fe6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002fda:	6878      	ldr	r0, [r7, #4]
 8002fdc:	f000 f929 	bl	8003232 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002fe0:	6878      	ldr	r0, [r7, #4]
 8002fe2:	f000 f93a 	bl	800325a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	2200      	movs	r2, #0
 8002fea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	691b      	ldr	r3, [r3, #16]
 8002ff2:	f003 0301 	and.w	r3, r3, #1
 8002ff6:	2b01      	cmp	r3, #1
 8002ff8:	d10e      	bne.n	8003018 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	68db      	ldr	r3, [r3, #12]
 8003000:	f003 0301 	and.w	r3, r3, #1
 8003004:	2b01      	cmp	r3, #1
 8003006:	d107      	bne.n	8003018 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f06f 0201 	mvn.w	r2, #1
 8003010:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003012:	6878      	ldr	r0, [r7, #4]
 8003014:	f7fd fade 	bl	80005d4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	691b      	ldr	r3, [r3, #16]
 800301e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003022:	2b80      	cmp	r3, #128	; 0x80
 8003024:	d10e      	bne.n	8003044 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	68db      	ldr	r3, [r3, #12]
 800302c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003030:	2b80      	cmp	r3, #128	; 0x80
 8003032:	d107      	bne.n	8003044 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800303c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800303e:	6878      	ldr	r0, [r7, #4]
 8003040:	f000 fae0 	bl	8003604 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	691b      	ldr	r3, [r3, #16]
 800304a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800304e:	2b40      	cmp	r3, #64	; 0x40
 8003050:	d10e      	bne.n	8003070 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	68db      	ldr	r3, [r3, #12]
 8003058:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800305c:	2b40      	cmp	r3, #64	; 0x40
 800305e:	d107      	bne.n	8003070 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003068:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800306a:	6878      	ldr	r0, [r7, #4]
 800306c:	f000 f8ff 	bl	800326e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	691b      	ldr	r3, [r3, #16]
 8003076:	f003 0320 	and.w	r3, r3, #32
 800307a:	2b20      	cmp	r3, #32
 800307c:	d10e      	bne.n	800309c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	68db      	ldr	r3, [r3, #12]
 8003084:	f003 0320 	and.w	r3, r3, #32
 8003088:	2b20      	cmp	r3, #32
 800308a:	d107      	bne.n	800309c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	f06f 0220 	mvn.w	r2, #32
 8003094:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003096:	6878      	ldr	r0, [r7, #4]
 8003098:	f000 faaa 	bl	80035f0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800309c:	bf00      	nop
 800309e:	3708      	adds	r7, #8
 80030a0:	46bd      	mov	sp, r7
 80030a2:	bd80      	pop	{r7, pc}

080030a4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80030a4:	b580      	push	{r7, lr}
 80030a6:	b084      	sub	sp, #16
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	6078      	str	r0, [r7, #4]
 80030ac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80030ae:	2300      	movs	r3, #0
 80030b0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80030b8:	2b01      	cmp	r3, #1
 80030ba:	d101      	bne.n	80030c0 <HAL_TIM_ConfigClockSource+0x1c>
 80030bc:	2302      	movs	r3, #2
 80030be:	e0b4      	b.n	800322a <HAL_TIM_ConfigClockSource+0x186>
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	2201      	movs	r2, #1
 80030c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	2202      	movs	r2, #2
 80030cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	689b      	ldr	r3, [r3, #8]
 80030d6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80030d8:	68bb      	ldr	r3, [r7, #8]
 80030da:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80030de:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80030e0:	68bb      	ldr	r3, [r7, #8]
 80030e2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80030e6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	68ba      	ldr	r2, [r7, #8]
 80030ee:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80030f0:	683b      	ldr	r3, [r7, #0]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80030f8:	d03e      	beq.n	8003178 <HAL_TIM_ConfigClockSource+0xd4>
 80030fa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80030fe:	f200 8087 	bhi.w	8003210 <HAL_TIM_ConfigClockSource+0x16c>
 8003102:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003106:	f000 8086 	beq.w	8003216 <HAL_TIM_ConfigClockSource+0x172>
 800310a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800310e:	d87f      	bhi.n	8003210 <HAL_TIM_ConfigClockSource+0x16c>
 8003110:	2b70      	cmp	r3, #112	; 0x70
 8003112:	d01a      	beq.n	800314a <HAL_TIM_ConfigClockSource+0xa6>
 8003114:	2b70      	cmp	r3, #112	; 0x70
 8003116:	d87b      	bhi.n	8003210 <HAL_TIM_ConfigClockSource+0x16c>
 8003118:	2b60      	cmp	r3, #96	; 0x60
 800311a:	d050      	beq.n	80031be <HAL_TIM_ConfigClockSource+0x11a>
 800311c:	2b60      	cmp	r3, #96	; 0x60
 800311e:	d877      	bhi.n	8003210 <HAL_TIM_ConfigClockSource+0x16c>
 8003120:	2b50      	cmp	r3, #80	; 0x50
 8003122:	d03c      	beq.n	800319e <HAL_TIM_ConfigClockSource+0xfa>
 8003124:	2b50      	cmp	r3, #80	; 0x50
 8003126:	d873      	bhi.n	8003210 <HAL_TIM_ConfigClockSource+0x16c>
 8003128:	2b40      	cmp	r3, #64	; 0x40
 800312a:	d058      	beq.n	80031de <HAL_TIM_ConfigClockSource+0x13a>
 800312c:	2b40      	cmp	r3, #64	; 0x40
 800312e:	d86f      	bhi.n	8003210 <HAL_TIM_ConfigClockSource+0x16c>
 8003130:	2b30      	cmp	r3, #48	; 0x30
 8003132:	d064      	beq.n	80031fe <HAL_TIM_ConfigClockSource+0x15a>
 8003134:	2b30      	cmp	r3, #48	; 0x30
 8003136:	d86b      	bhi.n	8003210 <HAL_TIM_ConfigClockSource+0x16c>
 8003138:	2b20      	cmp	r3, #32
 800313a:	d060      	beq.n	80031fe <HAL_TIM_ConfigClockSource+0x15a>
 800313c:	2b20      	cmp	r3, #32
 800313e:	d867      	bhi.n	8003210 <HAL_TIM_ConfigClockSource+0x16c>
 8003140:	2b00      	cmp	r3, #0
 8003142:	d05c      	beq.n	80031fe <HAL_TIM_ConfigClockSource+0x15a>
 8003144:	2b10      	cmp	r3, #16
 8003146:	d05a      	beq.n	80031fe <HAL_TIM_ConfigClockSource+0x15a>
 8003148:	e062      	b.n	8003210 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	6818      	ldr	r0, [r3, #0]
 800314e:	683b      	ldr	r3, [r7, #0]
 8003150:	6899      	ldr	r1, [r3, #8]
 8003152:	683b      	ldr	r3, [r7, #0]
 8003154:	685a      	ldr	r2, [r3, #4]
 8003156:	683b      	ldr	r3, [r7, #0]
 8003158:	68db      	ldr	r3, [r3, #12]
 800315a:	f000 f9ad 	bl	80034b8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	689b      	ldr	r3, [r3, #8]
 8003164:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003166:	68bb      	ldr	r3, [r7, #8]
 8003168:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800316c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	68ba      	ldr	r2, [r7, #8]
 8003174:	609a      	str	r2, [r3, #8]
      break;
 8003176:	e04f      	b.n	8003218 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	6818      	ldr	r0, [r3, #0]
 800317c:	683b      	ldr	r3, [r7, #0]
 800317e:	6899      	ldr	r1, [r3, #8]
 8003180:	683b      	ldr	r3, [r7, #0]
 8003182:	685a      	ldr	r2, [r3, #4]
 8003184:	683b      	ldr	r3, [r7, #0]
 8003186:	68db      	ldr	r3, [r3, #12]
 8003188:	f000 f996 	bl	80034b8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	689a      	ldr	r2, [r3, #8]
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800319a:	609a      	str	r2, [r3, #8]
      break;
 800319c:	e03c      	b.n	8003218 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	6818      	ldr	r0, [r3, #0]
 80031a2:	683b      	ldr	r3, [r7, #0]
 80031a4:	6859      	ldr	r1, [r3, #4]
 80031a6:	683b      	ldr	r3, [r7, #0]
 80031a8:	68db      	ldr	r3, [r3, #12]
 80031aa:	461a      	mov	r2, r3
 80031ac:	f000 f90a 	bl	80033c4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	2150      	movs	r1, #80	; 0x50
 80031b6:	4618      	mov	r0, r3
 80031b8:	f000 f963 	bl	8003482 <TIM_ITRx_SetConfig>
      break;
 80031bc:	e02c      	b.n	8003218 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	6818      	ldr	r0, [r3, #0]
 80031c2:	683b      	ldr	r3, [r7, #0]
 80031c4:	6859      	ldr	r1, [r3, #4]
 80031c6:	683b      	ldr	r3, [r7, #0]
 80031c8:	68db      	ldr	r3, [r3, #12]
 80031ca:	461a      	mov	r2, r3
 80031cc:	f000 f929 	bl	8003422 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	2160      	movs	r1, #96	; 0x60
 80031d6:	4618      	mov	r0, r3
 80031d8:	f000 f953 	bl	8003482 <TIM_ITRx_SetConfig>
      break;
 80031dc:	e01c      	b.n	8003218 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	6818      	ldr	r0, [r3, #0]
 80031e2:	683b      	ldr	r3, [r7, #0]
 80031e4:	6859      	ldr	r1, [r3, #4]
 80031e6:	683b      	ldr	r3, [r7, #0]
 80031e8:	68db      	ldr	r3, [r3, #12]
 80031ea:	461a      	mov	r2, r3
 80031ec:	f000 f8ea 	bl	80033c4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	2140      	movs	r1, #64	; 0x40
 80031f6:	4618      	mov	r0, r3
 80031f8:	f000 f943 	bl	8003482 <TIM_ITRx_SetConfig>
      break;
 80031fc:	e00c      	b.n	8003218 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681a      	ldr	r2, [r3, #0]
 8003202:	683b      	ldr	r3, [r7, #0]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	4619      	mov	r1, r3
 8003208:	4610      	mov	r0, r2
 800320a:	f000 f93a 	bl	8003482 <TIM_ITRx_SetConfig>
      break;
 800320e:	e003      	b.n	8003218 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003210:	2301      	movs	r3, #1
 8003212:	73fb      	strb	r3, [r7, #15]
      break;
 8003214:	e000      	b.n	8003218 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003216:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	2201      	movs	r2, #1
 800321c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	2200      	movs	r2, #0
 8003224:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003228:	7bfb      	ldrb	r3, [r7, #15]
}
 800322a:	4618      	mov	r0, r3
 800322c:	3710      	adds	r7, #16
 800322e:	46bd      	mov	sp, r7
 8003230:	bd80      	pop	{r7, pc}

08003232 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003232:	b480      	push	{r7}
 8003234:	b083      	sub	sp, #12
 8003236:	af00      	add	r7, sp, #0
 8003238:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800323a:	bf00      	nop
 800323c:	370c      	adds	r7, #12
 800323e:	46bd      	mov	sp, r7
 8003240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003244:	4770      	bx	lr

08003246 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003246:	b480      	push	{r7}
 8003248:	b083      	sub	sp, #12
 800324a:	af00      	add	r7, sp, #0
 800324c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800324e:	bf00      	nop
 8003250:	370c      	adds	r7, #12
 8003252:	46bd      	mov	sp, r7
 8003254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003258:	4770      	bx	lr

0800325a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800325a:	b480      	push	{r7}
 800325c:	b083      	sub	sp, #12
 800325e:	af00      	add	r7, sp, #0
 8003260:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003262:	bf00      	nop
 8003264:	370c      	adds	r7, #12
 8003266:	46bd      	mov	sp, r7
 8003268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800326c:	4770      	bx	lr

0800326e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800326e:	b480      	push	{r7}
 8003270:	b083      	sub	sp, #12
 8003272:	af00      	add	r7, sp, #0
 8003274:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003276:	bf00      	nop
 8003278:	370c      	adds	r7, #12
 800327a:	46bd      	mov	sp, r7
 800327c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003280:	4770      	bx	lr
	...

08003284 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003284:	b480      	push	{r7}
 8003286:	b085      	sub	sp, #20
 8003288:	af00      	add	r7, sp, #0
 800328a:	6078      	str	r0, [r7, #4]
 800328c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	4a40      	ldr	r2, [pc, #256]	; (8003398 <TIM_Base_SetConfig+0x114>)
 8003298:	4293      	cmp	r3, r2
 800329a:	d013      	beq.n	80032c4 <TIM_Base_SetConfig+0x40>
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032a2:	d00f      	beq.n	80032c4 <TIM_Base_SetConfig+0x40>
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	4a3d      	ldr	r2, [pc, #244]	; (800339c <TIM_Base_SetConfig+0x118>)
 80032a8:	4293      	cmp	r3, r2
 80032aa:	d00b      	beq.n	80032c4 <TIM_Base_SetConfig+0x40>
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	4a3c      	ldr	r2, [pc, #240]	; (80033a0 <TIM_Base_SetConfig+0x11c>)
 80032b0:	4293      	cmp	r3, r2
 80032b2:	d007      	beq.n	80032c4 <TIM_Base_SetConfig+0x40>
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	4a3b      	ldr	r2, [pc, #236]	; (80033a4 <TIM_Base_SetConfig+0x120>)
 80032b8:	4293      	cmp	r3, r2
 80032ba:	d003      	beq.n	80032c4 <TIM_Base_SetConfig+0x40>
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	4a3a      	ldr	r2, [pc, #232]	; (80033a8 <TIM_Base_SetConfig+0x124>)
 80032c0:	4293      	cmp	r3, r2
 80032c2:	d108      	bne.n	80032d6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80032ca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80032cc:	683b      	ldr	r3, [r7, #0]
 80032ce:	685b      	ldr	r3, [r3, #4]
 80032d0:	68fa      	ldr	r2, [r7, #12]
 80032d2:	4313      	orrs	r3, r2
 80032d4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	4a2f      	ldr	r2, [pc, #188]	; (8003398 <TIM_Base_SetConfig+0x114>)
 80032da:	4293      	cmp	r3, r2
 80032dc:	d02b      	beq.n	8003336 <TIM_Base_SetConfig+0xb2>
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032e4:	d027      	beq.n	8003336 <TIM_Base_SetConfig+0xb2>
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	4a2c      	ldr	r2, [pc, #176]	; (800339c <TIM_Base_SetConfig+0x118>)
 80032ea:	4293      	cmp	r3, r2
 80032ec:	d023      	beq.n	8003336 <TIM_Base_SetConfig+0xb2>
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	4a2b      	ldr	r2, [pc, #172]	; (80033a0 <TIM_Base_SetConfig+0x11c>)
 80032f2:	4293      	cmp	r3, r2
 80032f4:	d01f      	beq.n	8003336 <TIM_Base_SetConfig+0xb2>
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	4a2a      	ldr	r2, [pc, #168]	; (80033a4 <TIM_Base_SetConfig+0x120>)
 80032fa:	4293      	cmp	r3, r2
 80032fc:	d01b      	beq.n	8003336 <TIM_Base_SetConfig+0xb2>
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	4a29      	ldr	r2, [pc, #164]	; (80033a8 <TIM_Base_SetConfig+0x124>)
 8003302:	4293      	cmp	r3, r2
 8003304:	d017      	beq.n	8003336 <TIM_Base_SetConfig+0xb2>
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	4a28      	ldr	r2, [pc, #160]	; (80033ac <TIM_Base_SetConfig+0x128>)
 800330a:	4293      	cmp	r3, r2
 800330c:	d013      	beq.n	8003336 <TIM_Base_SetConfig+0xb2>
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	4a27      	ldr	r2, [pc, #156]	; (80033b0 <TIM_Base_SetConfig+0x12c>)
 8003312:	4293      	cmp	r3, r2
 8003314:	d00f      	beq.n	8003336 <TIM_Base_SetConfig+0xb2>
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	4a26      	ldr	r2, [pc, #152]	; (80033b4 <TIM_Base_SetConfig+0x130>)
 800331a:	4293      	cmp	r3, r2
 800331c:	d00b      	beq.n	8003336 <TIM_Base_SetConfig+0xb2>
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	4a25      	ldr	r2, [pc, #148]	; (80033b8 <TIM_Base_SetConfig+0x134>)
 8003322:	4293      	cmp	r3, r2
 8003324:	d007      	beq.n	8003336 <TIM_Base_SetConfig+0xb2>
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	4a24      	ldr	r2, [pc, #144]	; (80033bc <TIM_Base_SetConfig+0x138>)
 800332a:	4293      	cmp	r3, r2
 800332c:	d003      	beq.n	8003336 <TIM_Base_SetConfig+0xb2>
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	4a23      	ldr	r2, [pc, #140]	; (80033c0 <TIM_Base_SetConfig+0x13c>)
 8003332:	4293      	cmp	r3, r2
 8003334:	d108      	bne.n	8003348 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800333c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800333e:	683b      	ldr	r3, [r7, #0]
 8003340:	68db      	ldr	r3, [r3, #12]
 8003342:	68fa      	ldr	r2, [r7, #12]
 8003344:	4313      	orrs	r3, r2
 8003346:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800334e:	683b      	ldr	r3, [r7, #0]
 8003350:	695b      	ldr	r3, [r3, #20]
 8003352:	4313      	orrs	r3, r2
 8003354:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	68fa      	ldr	r2, [r7, #12]
 800335a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800335c:	683b      	ldr	r3, [r7, #0]
 800335e:	689a      	ldr	r2, [r3, #8]
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003364:	683b      	ldr	r3, [r7, #0]
 8003366:	681a      	ldr	r2, [r3, #0]
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	4a0a      	ldr	r2, [pc, #40]	; (8003398 <TIM_Base_SetConfig+0x114>)
 8003370:	4293      	cmp	r3, r2
 8003372:	d003      	beq.n	800337c <TIM_Base_SetConfig+0xf8>
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	4a0c      	ldr	r2, [pc, #48]	; (80033a8 <TIM_Base_SetConfig+0x124>)
 8003378:	4293      	cmp	r3, r2
 800337a:	d103      	bne.n	8003384 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800337c:	683b      	ldr	r3, [r7, #0]
 800337e:	691a      	ldr	r2, [r3, #16]
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	2201      	movs	r2, #1
 8003388:	615a      	str	r2, [r3, #20]
}
 800338a:	bf00      	nop
 800338c:	3714      	adds	r7, #20
 800338e:	46bd      	mov	sp, r7
 8003390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003394:	4770      	bx	lr
 8003396:	bf00      	nop
 8003398:	40010000 	.word	0x40010000
 800339c:	40000400 	.word	0x40000400
 80033a0:	40000800 	.word	0x40000800
 80033a4:	40000c00 	.word	0x40000c00
 80033a8:	40010400 	.word	0x40010400
 80033ac:	40014000 	.word	0x40014000
 80033b0:	40014400 	.word	0x40014400
 80033b4:	40014800 	.word	0x40014800
 80033b8:	40001800 	.word	0x40001800
 80033bc:	40001c00 	.word	0x40001c00
 80033c0:	40002000 	.word	0x40002000

080033c4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80033c4:	b480      	push	{r7}
 80033c6:	b087      	sub	sp, #28
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	60f8      	str	r0, [r7, #12]
 80033cc:	60b9      	str	r1, [r7, #8]
 80033ce:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	6a1b      	ldr	r3, [r3, #32]
 80033d4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	6a1b      	ldr	r3, [r3, #32]
 80033da:	f023 0201 	bic.w	r2, r3, #1
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	699b      	ldr	r3, [r3, #24]
 80033e6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80033e8:	693b      	ldr	r3, [r7, #16]
 80033ea:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80033ee:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	011b      	lsls	r3, r3, #4
 80033f4:	693a      	ldr	r2, [r7, #16]
 80033f6:	4313      	orrs	r3, r2
 80033f8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80033fa:	697b      	ldr	r3, [r7, #20]
 80033fc:	f023 030a 	bic.w	r3, r3, #10
 8003400:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003402:	697a      	ldr	r2, [r7, #20]
 8003404:	68bb      	ldr	r3, [r7, #8]
 8003406:	4313      	orrs	r3, r2
 8003408:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	693a      	ldr	r2, [r7, #16]
 800340e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	697a      	ldr	r2, [r7, #20]
 8003414:	621a      	str	r2, [r3, #32]
}
 8003416:	bf00      	nop
 8003418:	371c      	adds	r7, #28
 800341a:	46bd      	mov	sp, r7
 800341c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003420:	4770      	bx	lr

08003422 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003422:	b480      	push	{r7}
 8003424:	b087      	sub	sp, #28
 8003426:	af00      	add	r7, sp, #0
 8003428:	60f8      	str	r0, [r7, #12]
 800342a:	60b9      	str	r1, [r7, #8]
 800342c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	6a1b      	ldr	r3, [r3, #32]
 8003432:	f023 0210 	bic.w	r2, r3, #16
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	699b      	ldr	r3, [r3, #24]
 800343e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	6a1b      	ldr	r3, [r3, #32]
 8003444:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003446:	697b      	ldr	r3, [r7, #20]
 8003448:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800344c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	031b      	lsls	r3, r3, #12
 8003452:	697a      	ldr	r2, [r7, #20]
 8003454:	4313      	orrs	r3, r2
 8003456:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003458:	693b      	ldr	r3, [r7, #16]
 800345a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800345e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003460:	68bb      	ldr	r3, [r7, #8]
 8003462:	011b      	lsls	r3, r3, #4
 8003464:	693a      	ldr	r2, [r7, #16]
 8003466:	4313      	orrs	r3, r2
 8003468:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	697a      	ldr	r2, [r7, #20]
 800346e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	693a      	ldr	r2, [r7, #16]
 8003474:	621a      	str	r2, [r3, #32]
}
 8003476:	bf00      	nop
 8003478:	371c      	adds	r7, #28
 800347a:	46bd      	mov	sp, r7
 800347c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003480:	4770      	bx	lr

08003482 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003482:	b480      	push	{r7}
 8003484:	b085      	sub	sp, #20
 8003486:	af00      	add	r7, sp, #0
 8003488:	6078      	str	r0, [r7, #4]
 800348a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	689b      	ldr	r3, [r3, #8]
 8003490:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003498:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800349a:	683a      	ldr	r2, [r7, #0]
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	4313      	orrs	r3, r2
 80034a0:	f043 0307 	orr.w	r3, r3, #7
 80034a4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	68fa      	ldr	r2, [r7, #12]
 80034aa:	609a      	str	r2, [r3, #8]
}
 80034ac:	bf00      	nop
 80034ae:	3714      	adds	r7, #20
 80034b0:	46bd      	mov	sp, r7
 80034b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b6:	4770      	bx	lr

080034b8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80034b8:	b480      	push	{r7}
 80034ba:	b087      	sub	sp, #28
 80034bc:	af00      	add	r7, sp, #0
 80034be:	60f8      	str	r0, [r7, #12]
 80034c0:	60b9      	str	r1, [r7, #8]
 80034c2:	607a      	str	r2, [r7, #4]
 80034c4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	689b      	ldr	r3, [r3, #8]
 80034ca:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80034cc:	697b      	ldr	r3, [r7, #20]
 80034ce:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80034d2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80034d4:	683b      	ldr	r3, [r7, #0]
 80034d6:	021a      	lsls	r2, r3, #8
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	431a      	orrs	r2, r3
 80034dc:	68bb      	ldr	r3, [r7, #8]
 80034de:	4313      	orrs	r3, r2
 80034e0:	697a      	ldr	r2, [r7, #20]
 80034e2:	4313      	orrs	r3, r2
 80034e4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	697a      	ldr	r2, [r7, #20]
 80034ea:	609a      	str	r2, [r3, #8]
}
 80034ec:	bf00      	nop
 80034ee:	371c      	adds	r7, #28
 80034f0:	46bd      	mov	sp, r7
 80034f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f6:	4770      	bx	lr

080034f8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80034f8:	b480      	push	{r7}
 80034fa:	b085      	sub	sp, #20
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	6078      	str	r0, [r7, #4]
 8003500:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003508:	2b01      	cmp	r3, #1
 800350a:	d101      	bne.n	8003510 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800350c:	2302      	movs	r3, #2
 800350e:	e05a      	b.n	80035c6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	2201      	movs	r2, #1
 8003514:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	2202      	movs	r2, #2
 800351c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	685b      	ldr	r3, [r3, #4]
 8003526:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	689b      	ldr	r3, [r3, #8]
 800352e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003536:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003538:	683b      	ldr	r3, [r7, #0]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	68fa      	ldr	r2, [r7, #12]
 800353e:	4313      	orrs	r3, r2
 8003540:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	68fa      	ldr	r2, [r7, #12]
 8003548:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	4a21      	ldr	r2, [pc, #132]	; (80035d4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003550:	4293      	cmp	r3, r2
 8003552:	d022      	beq.n	800359a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800355c:	d01d      	beq.n	800359a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	4a1d      	ldr	r2, [pc, #116]	; (80035d8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003564:	4293      	cmp	r3, r2
 8003566:	d018      	beq.n	800359a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	4a1b      	ldr	r2, [pc, #108]	; (80035dc <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800356e:	4293      	cmp	r3, r2
 8003570:	d013      	beq.n	800359a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	4a1a      	ldr	r2, [pc, #104]	; (80035e0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003578:	4293      	cmp	r3, r2
 800357a:	d00e      	beq.n	800359a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	4a18      	ldr	r2, [pc, #96]	; (80035e4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003582:	4293      	cmp	r3, r2
 8003584:	d009      	beq.n	800359a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	4a17      	ldr	r2, [pc, #92]	; (80035e8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800358c:	4293      	cmp	r3, r2
 800358e:	d004      	beq.n	800359a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	4a15      	ldr	r2, [pc, #84]	; (80035ec <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003596:	4293      	cmp	r3, r2
 8003598:	d10c      	bne.n	80035b4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800359a:	68bb      	ldr	r3, [r7, #8]
 800359c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80035a0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80035a2:	683b      	ldr	r3, [r7, #0]
 80035a4:	685b      	ldr	r3, [r3, #4]
 80035a6:	68ba      	ldr	r2, [r7, #8]
 80035a8:	4313      	orrs	r3, r2
 80035aa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	68ba      	ldr	r2, [r7, #8]
 80035b2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	2201      	movs	r2, #1
 80035b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	2200      	movs	r2, #0
 80035c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80035c4:	2300      	movs	r3, #0
}
 80035c6:	4618      	mov	r0, r3
 80035c8:	3714      	adds	r7, #20
 80035ca:	46bd      	mov	sp, r7
 80035cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d0:	4770      	bx	lr
 80035d2:	bf00      	nop
 80035d4:	40010000 	.word	0x40010000
 80035d8:	40000400 	.word	0x40000400
 80035dc:	40000800 	.word	0x40000800
 80035e0:	40000c00 	.word	0x40000c00
 80035e4:	40010400 	.word	0x40010400
 80035e8:	40014000 	.word	0x40014000
 80035ec:	40001800 	.word	0x40001800

080035f0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80035f0:	b480      	push	{r7}
 80035f2:	b083      	sub	sp, #12
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80035f8:	bf00      	nop
 80035fa:	370c      	adds	r7, #12
 80035fc:	46bd      	mov	sp, r7
 80035fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003602:	4770      	bx	lr

08003604 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003604:	b480      	push	{r7}
 8003606:	b083      	sub	sp, #12
 8003608:	af00      	add	r7, sp, #0
 800360a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800360c:	bf00      	nop
 800360e:	370c      	adds	r7, #12
 8003610:	46bd      	mov	sp, r7
 8003612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003616:	4770      	bx	lr

08003618 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003618:	b580      	push	{r7, lr}
 800361a:	b082      	sub	sp, #8
 800361c:	af00      	add	r7, sp, #0
 800361e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	2b00      	cmp	r3, #0
 8003624:	d101      	bne.n	800362a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003626:	2301      	movs	r3, #1
 8003628:	e03f      	b.n	80036aa <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003630:	b2db      	uxtb	r3, r3
 8003632:	2b00      	cmp	r3, #0
 8003634:	d106      	bne.n	8003644 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	2200      	movs	r2, #0
 800363a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800363e:	6878      	ldr	r0, [r7, #4]
 8003640:	f7fd faf6 	bl	8000c30 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	2224      	movs	r2, #36	; 0x24
 8003648:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	68da      	ldr	r2, [r3, #12]
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800365a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800365c:	6878      	ldr	r0, [r7, #4]
 800365e:	f000 fdc7 	bl	80041f0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	691a      	ldr	r2, [r3, #16]
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003670:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	695a      	ldr	r2, [r3, #20]
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003680:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	68da      	ldr	r2, [r3, #12]
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003690:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	2200      	movs	r2, #0
 8003696:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	2220      	movs	r2, #32
 800369c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	2220      	movs	r2, #32
 80036a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80036a8:	2300      	movs	r3, #0
}
 80036aa:	4618      	mov	r0, r3
 80036ac:	3708      	adds	r7, #8
 80036ae:	46bd      	mov	sp, r7
 80036b0:	bd80      	pop	{r7, pc}

080036b2 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80036b2:	b480      	push	{r7}
 80036b4:	b085      	sub	sp, #20
 80036b6:	af00      	add	r7, sp, #0
 80036b8:	60f8      	str	r0, [r7, #12]
 80036ba:	60b9      	str	r1, [r7, #8]
 80036bc:	4613      	mov	r3, r2
 80036be:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036c6:	b2db      	uxtb	r3, r3
 80036c8:	2b20      	cmp	r3, #32
 80036ca:	d130      	bne.n	800372e <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 80036cc:	68bb      	ldr	r3, [r7, #8]
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d002      	beq.n	80036d8 <HAL_UART_Transmit_IT+0x26>
 80036d2:	88fb      	ldrh	r3, [r7, #6]
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d101      	bne.n	80036dc <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 80036d8:	2301      	movs	r3, #1
 80036da:	e029      	b.n	8003730 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80036e2:	2b01      	cmp	r3, #1
 80036e4:	d101      	bne.n	80036ea <HAL_UART_Transmit_IT+0x38>
 80036e6:	2302      	movs	r3, #2
 80036e8:	e022      	b.n	8003730 <HAL_UART_Transmit_IT+0x7e>
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	2201      	movs	r2, #1
 80036ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	68ba      	ldr	r2, [r7, #8]
 80036f6:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	88fa      	ldrh	r2, [r7, #6]
 80036fc:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	88fa      	ldrh	r2, [r7, #6]
 8003702:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	2200      	movs	r2, #0
 8003708:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	2221      	movs	r2, #33	; 0x21
 800370e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	2200      	movs	r2, #0
 8003716:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	68da      	ldr	r2, [r3, #12]
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003728:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 800372a:	2300      	movs	r3, #0
 800372c:	e000      	b.n	8003730 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 800372e:	2302      	movs	r3, #2
  }
}
 8003730:	4618      	mov	r0, r3
 8003732:	3714      	adds	r7, #20
 8003734:	46bd      	mov	sp, r7
 8003736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800373a:	4770      	bx	lr

0800373c <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800373c:	b580      	push	{r7, lr}
 800373e:	b084      	sub	sp, #16
 8003740:	af00      	add	r7, sp, #0
 8003742:	60f8      	str	r0, [r7, #12]
 8003744:	60b9      	str	r1, [r7, #8]
 8003746:	4613      	mov	r3, r2
 8003748:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003750:	b2db      	uxtb	r3, r3
 8003752:	2b20      	cmp	r3, #32
 8003754:	d11d      	bne.n	8003792 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8003756:	68bb      	ldr	r3, [r7, #8]
 8003758:	2b00      	cmp	r3, #0
 800375a:	d002      	beq.n	8003762 <HAL_UART_Receive_IT+0x26>
 800375c:	88fb      	ldrh	r3, [r7, #6]
 800375e:	2b00      	cmp	r3, #0
 8003760:	d101      	bne.n	8003766 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003762:	2301      	movs	r3, #1
 8003764:	e016      	b.n	8003794 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800376c:	2b01      	cmp	r3, #1
 800376e:	d101      	bne.n	8003774 <HAL_UART_Receive_IT+0x38>
 8003770:	2302      	movs	r3, #2
 8003772:	e00f      	b.n	8003794 <HAL_UART_Receive_IT+0x58>
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	2201      	movs	r2, #1
 8003778:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	2200      	movs	r2, #0
 8003780:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003782:	88fb      	ldrh	r3, [r7, #6]
 8003784:	461a      	mov	r2, r3
 8003786:	68b9      	ldr	r1, [r7, #8]
 8003788:	68f8      	ldr	r0, [r7, #12]
 800378a:	f000 fb59 	bl	8003e40 <UART_Start_Receive_IT>
 800378e:	4603      	mov	r3, r0
 8003790:	e000      	b.n	8003794 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8003792:	2302      	movs	r3, #2
  }
}
 8003794:	4618      	mov	r0, r3
 8003796:	3710      	adds	r7, #16
 8003798:	46bd      	mov	sp, r7
 800379a:	bd80      	pop	{r7, pc}

0800379c <HAL_UART_AbortReceive>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive(UART_HandleTypeDef *huart)
{
 800379c:	b580      	push	{r7, lr}
 800379e:	b09a      	sub	sp, #104	; 0x68
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	330c      	adds	r3, #12
 80037aa:	64bb      	str	r3, [r7, #72]	; 0x48
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037ac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80037ae:	e853 3f00 	ldrex	r3, [r3]
 80037b2:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80037b4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80037b6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80037ba:	667b      	str	r3, [r7, #100]	; 0x64
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	330c      	adds	r3, #12
 80037c2:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80037c4:	657a      	str	r2, [r7, #84]	; 0x54
 80037c6:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037c8:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80037ca:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80037cc:	e841 2300 	strex	r3, r2, [r1]
 80037d0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80037d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d1e5      	bne.n	80037a4 <HAL_UART_AbortReceive+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	3314      	adds	r3, #20
 80037de:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80037e2:	e853 3f00 	ldrex	r3, [r3]
 80037e6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80037e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037ea:	f023 0301 	bic.w	r3, r3, #1
 80037ee:	663b      	str	r3, [r7, #96]	; 0x60
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	3314      	adds	r3, #20
 80037f6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80037f8:	643a      	str	r2, [r7, #64]	; 0x40
 80037fa:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037fc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80037fe:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003800:	e841 2300 	strex	r3, r2, [r1]
 8003804:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003806:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003808:	2b00      	cmp	r3, #0
 800380a:	d1e5      	bne.n	80037d8 <HAL_UART_AbortReceive+0x3c>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003810:	2b01      	cmp	r3, #1
 8003812:	d119      	bne.n	8003848 <HAL_UART_AbortReceive+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	330c      	adds	r3, #12
 800381a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800381c:	6a3b      	ldr	r3, [r7, #32]
 800381e:	e853 3f00 	ldrex	r3, [r3]
 8003822:	61fb      	str	r3, [r7, #28]
   return(result);
 8003824:	69fb      	ldr	r3, [r7, #28]
 8003826:	f023 0310 	bic.w	r3, r3, #16
 800382a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	330c      	adds	r3, #12
 8003832:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003834:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003836:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003838:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800383a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800383c:	e841 2300 	strex	r3, r2, [r1]
 8003840:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003842:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003844:	2b00      	cmp	r3, #0
 8003846:	d1e5      	bne.n	8003814 <HAL_UART_AbortReceive+0x78>
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	695b      	ldr	r3, [r3, #20]
 800384e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003852:	2b40      	cmp	r3, #64	; 0x40
 8003854:	d136      	bne.n	80038c4 <HAL_UART_AbortReceive+0x128>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	3314      	adds	r3, #20
 800385c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	e853 3f00 	ldrex	r3, [r3]
 8003864:	60bb      	str	r3, [r7, #8]
   return(result);
 8003866:	68bb      	ldr	r3, [r7, #8]
 8003868:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800386c:	65bb      	str	r3, [r7, #88]	; 0x58
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	3314      	adds	r3, #20
 8003874:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003876:	61ba      	str	r2, [r7, #24]
 8003878:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800387a:	6979      	ldr	r1, [r7, #20]
 800387c:	69ba      	ldr	r2, [r7, #24]
 800387e:	e841 2300 	strex	r3, r2, [r1]
 8003882:	613b      	str	r3, [r7, #16]
   return(result);
 8003884:	693b      	ldr	r3, [r7, #16]
 8003886:	2b00      	cmp	r3, #0
 8003888:	d1e5      	bne.n	8003856 <HAL_UART_AbortReceive+0xba>

    /* Abort the UART DMA Rx stream : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800388e:	2b00      	cmp	r3, #0
 8003890:	d018      	beq.n	80038c4 <HAL_UART_AbortReceive+0x128>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003896:	2200      	movs	r2, #0
 8003898:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800389e:	4618      	mov	r0, r3
 80038a0:	f7fe fa89 	bl	8001db6 <HAL_DMA_Abort>
 80038a4:	4603      	mov	r3, r0
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d00c      	beq.n	80038c4 <HAL_UART_AbortReceive+0x128>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038ae:	4618      	mov	r0, r3
 80038b0:	f7fe fb13 	bl	8001eda <HAL_DMA_GetError>
 80038b4:	4603      	mov	r3, r0
 80038b6:	2b20      	cmp	r3, #32
 80038b8:	d104      	bne.n	80038c4 <HAL_UART_AbortReceive+0x128>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	2210      	movs	r2, #16
 80038be:	641a      	str	r2, [r3, #64]	; 0x40

          return HAL_TIMEOUT;
 80038c0:	2303      	movs	r3, #3
 80038c2:	e00a      	b.n	80038da <HAL_UART_AbortReceive+0x13e>
      }
    }
  }

  /* Reset Rx transfer counter */
  huart->RxXferCount = 0x00U;
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	2200      	movs	r2, #0
 80038c8:	85da      	strh	r2, [r3, #46]	; 0x2e

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	2220      	movs	r2, #32
 80038ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	2200      	movs	r2, #0
 80038d6:	631a      	str	r2, [r3, #48]	; 0x30

  return HAL_OK;
 80038d8:	2300      	movs	r3, #0
}
 80038da:	4618      	mov	r0, r3
 80038dc:	3768      	adds	r7, #104	; 0x68
 80038de:	46bd      	mov	sp, r7
 80038e0:	bd80      	pop	{r7, pc}
	...

080038e4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80038e4:	b580      	push	{r7, lr}
 80038e6:	b0ba      	sub	sp, #232	; 0xe8
 80038e8:	af00      	add	r7, sp, #0
 80038ea:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	68db      	ldr	r3, [r3, #12]
 80038fc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	695b      	ldr	r3, [r3, #20]
 8003906:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800390a:	2300      	movs	r3, #0
 800390c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8003910:	2300      	movs	r3, #0
 8003912:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003916:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800391a:	f003 030f 	and.w	r3, r3, #15
 800391e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8003922:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003926:	2b00      	cmp	r3, #0
 8003928:	d10f      	bne.n	800394a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800392a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800392e:	f003 0320 	and.w	r3, r3, #32
 8003932:	2b00      	cmp	r3, #0
 8003934:	d009      	beq.n	800394a <HAL_UART_IRQHandler+0x66>
 8003936:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800393a:	f003 0320 	and.w	r3, r3, #32
 800393e:	2b00      	cmp	r3, #0
 8003940:	d003      	beq.n	800394a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003942:	6878      	ldr	r0, [r7, #4]
 8003944:	f000 fb99 	bl	800407a <UART_Receive_IT>
      return;
 8003948:	e256      	b.n	8003df8 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800394a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800394e:	2b00      	cmp	r3, #0
 8003950:	f000 80de 	beq.w	8003b10 <HAL_UART_IRQHandler+0x22c>
 8003954:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003958:	f003 0301 	and.w	r3, r3, #1
 800395c:	2b00      	cmp	r3, #0
 800395e:	d106      	bne.n	800396e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003960:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003964:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003968:	2b00      	cmp	r3, #0
 800396a:	f000 80d1 	beq.w	8003b10 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800396e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003972:	f003 0301 	and.w	r3, r3, #1
 8003976:	2b00      	cmp	r3, #0
 8003978:	d00b      	beq.n	8003992 <HAL_UART_IRQHandler+0xae>
 800397a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800397e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003982:	2b00      	cmp	r3, #0
 8003984:	d005      	beq.n	8003992 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800398a:	f043 0201 	orr.w	r2, r3, #1
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003992:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003996:	f003 0304 	and.w	r3, r3, #4
 800399a:	2b00      	cmp	r3, #0
 800399c:	d00b      	beq.n	80039b6 <HAL_UART_IRQHandler+0xd2>
 800399e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80039a2:	f003 0301 	and.w	r3, r3, #1
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d005      	beq.n	80039b6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039ae:	f043 0202 	orr.w	r2, r3, #2
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80039b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80039ba:	f003 0302 	and.w	r3, r3, #2
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d00b      	beq.n	80039da <HAL_UART_IRQHandler+0xf6>
 80039c2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80039c6:	f003 0301 	and.w	r3, r3, #1
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d005      	beq.n	80039da <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039d2:	f043 0204 	orr.w	r2, r3, #4
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80039da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80039de:	f003 0308 	and.w	r3, r3, #8
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d011      	beq.n	8003a0a <HAL_UART_IRQHandler+0x126>
 80039e6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80039ea:	f003 0320 	and.w	r3, r3, #32
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d105      	bne.n	80039fe <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80039f2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80039f6:	f003 0301 	and.w	r3, r3, #1
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d005      	beq.n	8003a0a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a02:	f043 0208 	orr.w	r2, r3, #8
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	f000 81ed 	beq.w	8003dee <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003a14:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a18:	f003 0320 	and.w	r3, r3, #32
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d008      	beq.n	8003a32 <HAL_UART_IRQHandler+0x14e>
 8003a20:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003a24:	f003 0320 	and.w	r3, r3, #32
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d002      	beq.n	8003a32 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003a2c:	6878      	ldr	r0, [r7, #4]
 8003a2e:	f000 fb24 	bl	800407a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	695b      	ldr	r3, [r3, #20]
 8003a38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a3c:	2b40      	cmp	r3, #64	; 0x40
 8003a3e:	bf0c      	ite	eq
 8003a40:	2301      	moveq	r3, #1
 8003a42:	2300      	movne	r3, #0
 8003a44:	b2db      	uxtb	r3, r3
 8003a46:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a4e:	f003 0308 	and.w	r3, r3, #8
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d103      	bne.n	8003a5e <HAL_UART_IRQHandler+0x17a>
 8003a56:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d04f      	beq.n	8003afe <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003a5e:	6878      	ldr	r0, [r7, #4]
 8003a60:	f000 fa2c 	bl	8003ebc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	695b      	ldr	r3, [r3, #20]
 8003a6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a6e:	2b40      	cmp	r3, #64	; 0x40
 8003a70:	d141      	bne.n	8003af6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	3314      	adds	r3, #20
 8003a78:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a7c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003a80:	e853 3f00 	ldrex	r3, [r3]
 8003a84:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003a88:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003a8c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003a90:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	3314      	adds	r3, #20
 8003a9a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003a9e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003aa2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003aa6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003aaa:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003aae:	e841 2300 	strex	r3, r2, [r1]
 8003ab2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003ab6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d1d9      	bne.n	8003a72 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d013      	beq.n	8003aee <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003aca:	4a7d      	ldr	r2, [pc, #500]	; (8003cc0 <HAL_UART_IRQHandler+0x3dc>)
 8003acc:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ad2:	4618      	mov	r0, r3
 8003ad4:	f7fe f9df 	bl	8001e96 <HAL_DMA_Abort_IT>
 8003ad8:	4603      	mov	r3, r0
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d016      	beq.n	8003b0c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ae2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ae4:	687a      	ldr	r2, [r7, #4]
 8003ae6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003ae8:	4610      	mov	r0, r2
 8003aea:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003aec:	e00e      	b.n	8003b0c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003aee:	6878      	ldr	r0, [r7, #4]
 8003af0:	f000 f990 	bl	8003e14 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003af4:	e00a      	b.n	8003b0c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003af6:	6878      	ldr	r0, [r7, #4]
 8003af8:	f000 f98c 	bl	8003e14 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003afc:	e006      	b.n	8003b0c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003afe:	6878      	ldr	r0, [r7, #4]
 8003b00:	f000 f988 	bl	8003e14 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	2200      	movs	r2, #0
 8003b08:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8003b0a:	e170      	b.n	8003dee <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b0c:	bf00      	nop
    return;
 8003b0e:	e16e      	b.n	8003dee <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b14:	2b01      	cmp	r3, #1
 8003b16:	f040 814a 	bne.w	8003dae <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003b1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b1e:	f003 0310 	and.w	r3, r3, #16
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	f000 8143 	beq.w	8003dae <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003b28:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003b2c:	f003 0310 	and.w	r3, r3, #16
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	f000 813c 	beq.w	8003dae <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003b36:	2300      	movs	r3, #0
 8003b38:	60bb      	str	r3, [r7, #8]
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	60bb      	str	r3, [r7, #8]
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	685b      	ldr	r3, [r3, #4]
 8003b48:	60bb      	str	r3, [r7, #8]
 8003b4a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	695b      	ldr	r3, [r3, #20]
 8003b52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b56:	2b40      	cmp	r3, #64	; 0x40
 8003b58:	f040 80b4 	bne.w	8003cc4 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	685b      	ldr	r3, [r3, #4]
 8003b64:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003b68:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	f000 8140 	beq.w	8003df2 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003b76:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003b7a:	429a      	cmp	r2, r3
 8003b7c:	f080 8139 	bcs.w	8003df2 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003b86:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b8c:	69db      	ldr	r3, [r3, #28]
 8003b8e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003b92:	f000 8088 	beq.w	8003ca6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	330c      	adds	r3, #12
 8003b9c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ba0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003ba4:	e853 3f00 	ldrex	r3, [r3]
 8003ba8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003bac:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003bb0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003bb4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	330c      	adds	r3, #12
 8003bbe:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8003bc2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003bc6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bca:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003bce:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003bd2:	e841 2300 	strex	r3, r2, [r1]
 8003bd6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003bda:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d1d9      	bne.n	8003b96 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	3314      	adds	r3, #20
 8003be8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bea:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003bec:	e853 3f00 	ldrex	r3, [r3]
 8003bf0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003bf2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003bf4:	f023 0301 	bic.w	r3, r3, #1
 8003bf8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	3314      	adds	r3, #20
 8003c02:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003c06:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003c0a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c0c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003c0e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003c12:	e841 2300 	strex	r3, r2, [r1]
 8003c16:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003c18:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d1e1      	bne.n	8003be2 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	3314      	adds	r3, #20
 8003c24:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c26:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003c28:	e853 3f00 	ldrex	r3, [r3]
 8003c2c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003c2e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003c30:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003c34:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	3314      	adds	r3, #20
 8003c3e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003c42:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003c44:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c46:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003c48:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003c4a:	e841 2300 	strex	r3, r2, [r1]
 8003c4e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003c50:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d1e3      	bne.n	8003c1e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	2220      	movs	r2, #32
 8003c5a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	2200      	movs	r2, #0
 8003c62:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	330c      	adds	r3, #12
 8003c6a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c6c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003c6e:	e853 3f00 	ldrex	r3, [r3]
 8003c72:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003c74:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003c76:	f023 0310 	bic.w	r3, r3, #16
 8003c7a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	330c      	adds	r3, #12
 8003c84:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8003c88:	65ba      	str	r2, [r7, #88]	; 0x58
 8003c8a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c8c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003c8e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003c90:	e841 2300 	strex	r3, r2, [r1]
 8003c94:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003c96:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d1e3      	bne.n	8003c64 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ca0:	4618      	mov	r0, r3
 8003ca2:	f7fe f888 	bl	8001db6 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003cae:	b29b      	uxth	r3, r3
 8003cb0:	1ad3      	subs	r3, r2, r3
 8003cb2:	b29b      	uxth	r3, r3
 8003cb4:	4619      	mov	r1, r3
 8003cb6:	6878      	ldr	r0, [r7, #4]
 8003cb8:	f000 f8b6 	bl	8003e28 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003cbc:	e099      	b.n	8003df2 <HAL_UART_IRQHandler+0x50e>
 8003cbe:	bf00      	nop
 8003cc0:	08003f83 	.word	0x08003f83
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003ccc:	b29b      	uxth	r3, r3
 8003cce:	1ad3      	subs	r3, r2, r3
 8003cd0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003cd8:	b29b      	uxth	r3, r3
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	f000 808b 	beq.w	8003df6 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8003ce0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	f000 8086 	beq.w	8003df6 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	330c      	adds	r3, #12
 8003cf0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cf2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003cf4:	e853 3f00 	ldrex	r3, [r3]
 8003cf8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003cfa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003cfc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003d00:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	330c      	adds	r3, #12
 8003d0a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8003d0e:	647a      	str	r2, [r7, #68]	; 0x44
 8003d10:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d12:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003d14:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003d16:	e841 2300 	strex	r3, r2, [r1]
 8003d1a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003d1c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d1e3      	bne.n	8003cea <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	3314      	adds	r3, #20
 8003d28:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d2c:	e853 3f00 	ldrex	r3, [r3]
 8003d30:	623b      	str	r3, [r7, #32]
   return(result);
 8003d32:	6a3b      	ldr	r3, [r7, #32]
 8003d34:	f023 0301 	bic.w	r3, r3, #1
 8003d38:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	3314      	adds	r3, #20
 8003d42:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003d46:	633a      	str	r2, [r7, #48]	; 0x30
 8003d48:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d4a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003d4c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003d4e:	e841 2300 	strex	r3, r2, [r1]
 8003d52:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003d54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d1e3      	bne.n	8003d22 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	2220      	movs	r2, #32
 8003d5e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	2200      	movs	r2, #0
 8003d66:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	330c      	adds	r3, #12
 8003d6e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d70:	693b      	ldr	r3, [r7, #16]
 8003d72:	e853 3f00 	ldrex	r3, [r3]
 8003d76:	60fb      	str	r3, [r7, #12]
   return(result);
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	f023 0310 	bic.w	r3, r3, #16
 8003d7e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	330c      	adds	r3, #12
 8003d88:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8003d8c:	61fa      	str	r2, [r7, #28]
 8003d8e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d90:	69b9      	ldr	r1, [r7, #24]
 8003d92:	69fa      	ldr	r2, [r7, #28]
 8003d94:	e841 2300 	strex	r3, r2, [r1]
 8003d98:	617b      	str	r3, [r7, #20]
   return(result);
 8003d9a:	697b      	ldr	r3, [r7, #20]
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d1e3      	bne.n	8003d68 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003da0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003da4:	4619      	mov	r1, r3
 8003da6:	6878      	ldr	r0, [r7, #4]
 8003da8:	f000 f83e 	bl	8003e28 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003dac:	e023      	b.n	8003df6 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003dae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003db2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d009      	beq.n	8003dce <HAL_UART_IRQHandler+0x4ea>
 8003dba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003dbe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d003      	beq.n	8003dce <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8003dc6:	6878      	ldr	r0, [r7, #4]
 8003dc8:	f000 f8ef 	bl	8003faa <UART_Transmit_IT>
    return;
 8003dcc:	e014      	b.n	8003df8 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003dce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003dd2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d00e      	beq.n	8003df8 <HAL_UART_IRQHandler+0x514>
 8003dda:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003dde:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d008      	beq.n	8003df8 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8003de6:	6878      	ldr	r0, [r7, #4]
 8003de8:	f000 f92f 	bl	800404a <UART_EndTransmit_IT>
    return;
 8003dec:	e004      	b.n	8003df8 <HAL_UART_IRQHandler+0x514>
    return;
 8003dee:	bf00      	nop
 8003df0:	e002      	b.n	8003df8 <HAL_UART_IRQHandler+0x514>
      return;
 8003df2:	bf00      	nop
 8003df4:	e000      	b.n	8003df8 <HAL_UART_IRQHandler+0x514>
      return;
 8003df6:	bf00      	nop
  }
}
 8003df8:	37e8      	adds	r7, #232	; 0xe8
 8003dfa:	46bd      	mov	sp, r7
 8003dfc:	bd80      	pop	{r7, pc}
 8003dfe:	bf00      	nop

08003e00 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003e00:	b480      	push	{r7}
 8003e02:	b083      	sub	sp, #12
 8003e04:	af00      	add	r7, sp, #0
 8003e06:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003e08:	bf00      	nop
 8003e0a:	370c      	adds	r7, #12
 8003e0c:	46bd      	mov	sp, r7
 8003e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e12:	4770      	bx	lr

08003e14 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003e14:	b480      	push	{r7}
 8003e16:	b083      	sub	sp, #12
 8003e18:	af00      	add	r7, sp, #0
 8003e1a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003e1c:	bf00      	nop
 8003e1e:	370c      	adds	r7, #12
 8003e20:	46bd      	mov	sp, r7
 8003e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e26:	4770      	bx	lr

08003e28 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003e28:	b480      	push	{r7}
 8003e2a:	b083      	sub	sp, #12
 8003e2c:	af00      	add	r7, sp, #0
 8003e2e:	6078      	str	r0, [r7, #4]
 8003e30:	460b      	mov	r3, r1
 8003e32:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003e34:	bf00      	nop
 8003e36:	370c      	adds	r7, #12
 8003e38:	46bd      	mov	sp, r7
 8003e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e3e:	4770      	bx	lr

08003e40 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003e40:	b480      	push	{r7}
 8003e42:	b085      	sub	sp, #20
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	60f8      	str	r0, [r7, #12]
 8003e48:	60b9      	str	r1, [r7, #8]
 8003e4a:	4613      	mov	r3, r2
 8003e4c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	68ba      	ldr	r2, [r7, #8]
 8003e52:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	88fa      	ldrh	r2, [r7, #6]
 8003e58:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	88fa      	ldrh	r2, [r7, #6]
 8003e5e:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	2200      	movs	r2, #0
 8003e64:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	2222      	movs	r2, #34	; 0x22
 8003e6a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	2200      	movs	r2, #0
 8003e72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	691b      	ldr	r3, [r3, #16]
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d007      	beq.n	8003e8e <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	68da      	ldr	r2, [r3, #12]
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003e8c:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	695a      	ldr	r2, [r3, #20]
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	f042 0201 	orr.w	r2, r2, #1
 8003e9c:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	68da      	ldr	r2, [r3, #12]
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	f042 0220 	orr.w	r2, r2, #32
 8003eac:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003eae:	2300      	movs	r3, #0
}
 8003eb0:	4618      	mov	r0, r3
 8003eb2:	3714      	adds	r7, #20
 8003eb4:	46bd      	mov	sp, r7
 8003eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eba:	4770      	bx	lr

08003ebc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003ebc:	b480      	push	{r7}
 8003ebe:	b095      	sub	sp, #84	; 0x54
 8003ec0:	af00      	add	r7, sp, #0
 8003ec2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	330c      	adds	r3, #12
 8003eca:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ecc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ece:	e853 3f00 	ldrex	r3, [r3]
 8003ed2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003ed4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ed6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003eda:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	330c      	adds	r3, #12
 8003ee2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003ee4:	643a      	str	r2, [r7, #64]	; 0x40
 8003ee6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ee8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003eea:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003eec:	e841 2300 	strex	r3, r2, [r1]
 8003ef0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003ef2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d1e5      	bne.n	8003ec4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	3314      	adds	r3, #20
 8003efe:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f00:	6a3b      	ldr	r3, [r7, #32]
 8003f02:	e853 3f00 	ldrex	r3, [r3]
 8003f06:	61fb      	str	r3, [r7, #28]
   return(result);
 8003f08:	69fb      	ldr	r3, [r7, #28]
 8003f0a:	f023 0301 	bic.w	r3, r3, #1
 8003f0e:	64bb      	str	r3, [r7, #72]	; 0x48
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	3314      	adds	r3, #20
 8003f16:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003f18:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003f1a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f1c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003f1e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003f20:	e841 2300 	strex	r3, r2, [r1]
 8003f24:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003f26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d1e5      	bne.n	8003ef8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f30:	2b01      	cmp	r3, #1
 8003f32:	d119      	bne.n	8003f68 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	330c      	adds	r3, #12
 8003f3a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	e853 3f00 	ldrex	r3, [r3]
 8003f42:	60bb      	str	r3, [r7, #8]
   return(result);
 8003f44:	68bb      	ldr	r3, [r7, #8]
 8003f46:	f023 0310 	bic.w	r3, r3, #16
 8003f4a:	647b      	str	r3, [r7, #68]	; 0x44
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	330c      	adds	r3, #12
 8003f52:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003f54:	61ba      	str	r2, [r7, #24]
 8003f56:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f58:	6979      	ldr	r1, [r7, #20]
 8003f5a:	69ba      	ldr	r2, [r7, #24]
 8003f5c:	e841 2300 	strex	r3, r2, [r1]
 8003f60:	613b      	str	r3, [r7, #16]
   return(result);
 8003f62:	693b      	ldr	r3, [r7, #16]
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d1e5      	bne.n	8003f34 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	2220      	movs	r2, #32
 8003f6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	2200      	movs	r2, #0
 8003f74:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003f76:	bf00      	nop
 8003f78:	3754      	adds	r7, #84	; 0x54
 8003f7a:	46bd      	mov	sp, r7
 8003f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f80:	4770      	bx	lr

08003f82 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003f82:	b580      	push	{r7, lr}
 8003f84:	b084      	sub	sp, #16
 8003f86:	af00      	add	r7, sp, #0
 8003f88:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f8e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	2200      	movs	r2, #0
 8003f94:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	2200      	movs	r2, #0
 8003f9a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003f9c:	68f8      	ldr	r0, [r7, #12]
 8003f9e:	f7ff ff39 	bl	8003e14 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003fa2:	bf00      	nop
 8003fa4:	3710      	adds	r7, #16
 8003fa6:	46bd      	mov	sp, r7
 8003fa8:	bd80      	pop	{r7, pc}

08003faa <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003faa:	b480      	push	{r7}
 8003fac:	b085      	sub	sp, #20
 8003fae:	af00      	add	r7, sp, #0
 8003fb0:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003fb8:	b2db      	uxtb	r3, r3
 8003fba:	2b21      	cmp	r3, #33	; 0x21
 8003fbc:	d13e      	bne.n	800403c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	689b      	ldr	r3, [r3, #8]
 8003fc2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003fc6:	d114      	bne.n	8003ff2 <UART_Transmit_IT+0x48>
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	691b      	ldr	r3, [r3, #16]
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d110      	bne.n	8003ff2 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	6a1b      	ldr	r3, [r3, #32]
 8003fd4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	881b      	ldrh	r3, [r3, #0]
 8003fda:	461a      	mov	r2, r3
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003fe4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	6a1b      	ldr	r3, [r3, #32]
 8003fea:	1c9a      	adds	r2, r3, #2
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	621a      	str	r2, [r3, #32]
 8003ff0:	e008      	b.n	8004004 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	6a1b      	ldr	r3, [r3, #32]
 8003ff6:	1c59      	adds	r1, r3, #1
 8003ff8:	687a      	ldr	r2, [r7, #4]
 8003ffa:	6211      	str	r1, [r2, #32]
 8003ffc:	781a      	ldrb	r2, [r3, #0]
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004008:	b29b      	uxth	r3, r3
 800400a:	3b01      	subs	r3, #1
 800400c:	b29b      	uxth	r3, r3
 800400e:	687a      	ldr	r2, [r7, #4]
 8004010:	4619      	mov	r1, r3
 8004012:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004014:	2b00      	cmp	r3, #0
 8004016:	d10f      	bne.n	8004038 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	68da      	ldr	r2, [r3, #12]
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004026:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	68da      	ldr	r2, [r3, #12]
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004036:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004038:	2300      	movs	r3, #0
 800403a:	e000      	b.n	800403e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800403c:	2302      	movs	r3, #2
  }
}
 800403e:	4618      	mov	r0, r3
 8004040:	3714      	adds	r7, #20
 8004042:	46bd      	mov	sp, r7
 8004044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004048:	4770      	bx	lr

0800404a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800404a:	b580      	push	{r7, lr}
 800404c:	b082      	sub	sp, #8
 800404e:	af00      	add	r7, sp, #0
 8004050:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	68da      	ldr	r2, [r3, #12]
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004060:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	2220      	movs	r2, #32
 8004066:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800406a:	6878      	ldr	r0, [r7, #4]
 800406c:	f7ff fec8 	bl	8003e00 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004070:	2300      	movs	r3, #0
}
 8004072:	4618      	mov	r0, r3
 8004074:	3708      	adds	r7, #8
 8004076:	46bd      	mov	sp, r7
 8004078:	bd80      	pop	{r7, pc}

0800407a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800407a:	b580      	push	{r7, lr}
 800407c:	b08c      	sub	sp, #48	; 0x30
 800407e:	af00      	add	r7, sp, #0
 8004080:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004088:	b2db      	uxtb	r3, r3
 800408a:	2b22      	cmp	r3, #34	; 0x22
 800408c:	f040 80ab 	bne.w	80041e6 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	689b      	ldr	r3, [r3, #8]
 8004094:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004098:	d117      	bne.n	80040ca <UART_Receive_IT+0x50>
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	691b      	ldr	r3, [r3, #16]
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d113      	bne.n	80040ca <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80040a2:	2300      	movs	r3, #0
 80040a4:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040aa:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	685b      	ldr	r3, [r3, #4]
 80040b2:	b29b      	uxth	r3, r3
 80040b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80040b8:	b29a      	uxth	r2, r3
 80040ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040bc:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040c2:	1c9a      	adds	r2, r3, #2
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	629a      	str	r2, [r3, #40]	; 0x28
 80040c8:	e026      	b.n	8004118 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040ce:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80040d0:	2300      	movs	r3, #0
 80040d2:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	689b      	ldr	r3, [r3, #8]
 80040d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80040dc:	d007      	beq.n	80040ee <UART_Receive_IT+0x74>
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	689b      	ldr	r3, [r3, #8]
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d10a      	bne.n	80040fc <UART_Receive_IT+0x82>
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	691b      	ldr	r3, [r3, #16]
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d106      	bne.n	80040fc <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	685b      	ldr	r3, [r3, #4]
 80040f4:	b2da      	uxtb	r2, r3
 80040f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040f8:	701a      	strb	r2, [r3, #0]
 80040fa:	e008      	b.n	800410e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	685b      	ldr	r3, [r3, #4]
 8004102:	b2db      	uxtb	r3, r3
 8004104:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004108:	b2da      	uxtb	r2, r3
 800410a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800410c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004112:	1c5a      	adds	r2, r3, #1
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800411c:	b29b      	uxth	r3, r3
 800411e:	3b01      	subs	r3, #1
 8004120:	b29b      	uxth	r3, r3
 8004122:	687a      	ldr	r2, [r7, #4]
 8004124:	4619      	mov	r1, r3
 8004126:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004128:	2b00      	cmp	r3, #0
 800412a:	d15a      	bne.n	80041e2 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	68da      	ldr	r2, [r3, #12]
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	f022 0220 	bic.w	r2, r2, #32
 800413a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	68da      	ldr	r2, [r3, #12]
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800414a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	695a      	ldr	r2, [r3, #20]
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	f022 0201 	bic.w	r2, r2, #1
 800415a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	2220      	movs	r2, #32
 8004160:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004168:	2b01      	cmp	r3, #1
 800416a:	d135      	bne.n	80041d8 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	2200      	movs	r2, #0
 8004170:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	330c      	adds	r3, #12
 8004178:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800417a:	697b      	ldr	r3, [r7, #20]
 800417c:	e853 3f00 	ldrex	r3, [r3]
 8004180:	613b      	str	r3, [r7, #16]
   return(result);
 8004182:	693b      	ldr	r3, [r7, #16]
 8004184:	f023 0310 	bic.w	r3, r3, #16
 8004188:	627b      	str	r3, [r7, #36]	; 0x24
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	330c      	adds	r3, #12
 8004190:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004192:	623a      	str	r2, [r7, #32]
 8004194:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004196:	69f9      	ldr	r1, [r7, #28]
 8004198:	6a3a      	ldr	r2, [r7, #32]
 800419a:	e841 2300 	strex	r3, r2, [r1]
 800419e:	61bb      	str	r3, [r7, #24]
   return(result);
 80041a0:	69bb      	ldr	r3, [r7, #24]
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d1e5      	bne.n	8004172 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	f003 0310 	and.w	r3, r3, #16
 80041b0:	2b10      	cmp	r3, #16
 80041b2:	d10a      	bne.n	80041ca <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80041b4:	2300      	movs	r3, #0
 80041b6:	60fb      	str	r3, [r7, #12]
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	60fb      	str	r3, [r7, #12]
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	685b      	ldr	r3, [r3, #4]
 80041c6:	60fb      	str	r3, [r7, #12]
 80041c8:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80041ce:	4619      	mov	r1, r3
 80041d0:	6878      	ldr	r0, [r7, #4]
 80041d2:	f7ff fe29 	bl	8003e28 <HAL_UARTEx_RxEventCallback>
 80041d6:	e002      	b.n	80041de <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80041d8:	6878      	ldr	r0, [r7, #4]
 80041da:	f7fc fa17 	bl	800060c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80041de:	2300      	movs	r3, #0
 80041e0:	e002      	b.n	80041e8 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80041e2:	2300      	movs	r3, #0
 80041e4:	e000      	b.n	80041e8 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80041e6:	2302      	movs	r3, #2
  }
}
 80041e8:	4618      	mov	r0, r3
 80041ea:	3730      	adds	r7, #48	; 0x30
 80041ec:	46bd      	mov	sp, r7
 80041ee:	bd80      	pop	{r7, pc}

080041f0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80041f0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80041f4:	b0c0      	sub	sp, #256	; 0x100
 80041f6:	af00      	add	r7, sp, #0
 80041f8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80041fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	691b      	ldr	r3, [r3, #16]
 8004204:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004208:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800420c:	68d9      	ldr	r1, [r3, #12]
 800420e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004212:	681a      	ldr	r2, [r3, #0]
 8004214:	ea40 0301 	orr.w	r3, r0, r1
 8004218:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800421a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800421e:	689a      	ldr	r2, [r3, #8]
 8004220:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004224:	691b      	ldr	r3, [r3, #16]
 8004226:	431a      	orrs	r2, r3
 8004228:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800422c:	695b      	ldr	r3, [r3, #20]
 800422e:	431a      	orrs	r2, r3
 8004230:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004234:	69db      	ldr	r3, [r3, #28]
 8004236:	4313      	orrs	r3, r2
 8004238:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800423c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	68db      	ldr	r3, [r3, #12]
 8004244:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004248:	f021 010c 	bic.w	r1, r1, #12
 800424c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004250:	681a      	ldr	r2, [r3, #0]
 8004252:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004256:	430b      	orrs	r3, r1
 8004258:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800425a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	695b      	ldr	r3, [r3, #20]
 8004262:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004266:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800426a:	6999      	ldr	r1, [r3, #24]
 800426c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004270:	681a      	ldr	r2, [r3, #0]
 8004272:	ea40 0301 	orr.w	r3, r0, r1
 8004276:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004278:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800427c:	681a      	ldr	r2, [r3, #0]
 800427e:	4b8f      	ldr	r3, [pc, #572]	; (80044bc <UART_SetConfig+0x2cc>)
 8004280:	429a      	cmp	r2, r3
 8004282:	d005      	beq.n	8004290 <UART_SetConfig+0xa0>
 8004284:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004288:	681a      	ldr	r2, [r3, #0]
 800428a:	4b8d      	ldr	r3, [pc, #564]	; (80044c0 <UART_SetConfig+0x2d0>)
 800428c:	429a      	cmp	r2, r3
 800428e:	d104      	bne.n	800429a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004290:	f7fe f8e4 	bl	800245c <HAL_RCC_GetPCLK2Freq>
 8004294:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004298:	e003      	b.n	80042a2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800429a:	f7fe f8cb 	bl	8002434 <HAL_RCC_GetPCLK1Freq>
 800429e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80042a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042a6:	69db      	ldr	r3, [r3, #28]
 80042a8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80042ac:	f040 810c 	bne.w	80044c8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80042b0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80042b4:	2200      	movs	r2, #0
 80042b6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80042ba:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80042be:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80042c2:	4622      	mov	r2, r4
 80042c4:	462b      	mov	r3, r5
 80042c6:	1891      	adds	r1, r2, r2
 80042c8:	65b9      	str	r1, [r7, #88]	; 0x58
 80042ca:	415b      	adcs	r3, r3
 80042cc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80042ce:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80042d2:	4621      	mov	r1, r4
 80042d4:	eb12 0801 	adds.w	r8, r2, r1
 80042d8:	4629      	mov	r1, r5
 80042da:	eb43 0901 	adc.w	r9, r3, r1
 80042de:	f04f 0200 	mov.w	r2, #0
 80042e2:	f04f 0300 	mov.w	r3, #0
 80042e6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80042ea:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80042ee:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80042f2:	4690      	mov	r8, r2
 80042f4:	4699      	mov	r9, r3
 80042f6:	4623      	mov	r3, r4
 80042f8:	eb18 0303 	adds.w	r3, r8, r3
 80042fc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004300:	462b      	mov	r3, r5
 8004302:	eb49 0303 	adc.w	r3, r9, r3
 8004306:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800430a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800430e:	685b      	ldr	r3, [r3, #4]
 8004310:	2200      	movs	r2, #0
 8004312:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004316:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800431a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800431e:	460b      	mov	r3, r1
 8004320:	18db      	adds	r3, r3, r3
 8004322:	653b      	str	r3, [r7, #80]	; 0x50
 8004324:	4613      	mov	r3, r2
 8004326:	eb42 0303 	adc.w	r3, r2, r3
 800432a:	657b      	str	r3, [r7, #84]	; 0x54
 800432c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004330:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004334:	f7fb ff66 	bl	8000204 <__aeabi_uldivmod>
 8004338:	4602      	mov	r2, r0
 800433a:	460b      	mov	r3, r1
 800433c:	4b61      	ldr	r3, [pc, #388]	; (80044c4 <UART_SetConfig+0x2d4>)
 800433e:	fba3 2302 	umull	r2, r3, r3, r2
 8004342:	095b      	lsrs	r3, r3, #5
 8004344:	011c      	lsls	r4, r3, #4
 8004346:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800434a:	2200      	movs	r2, #0
 800434c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004350:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004354:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004358:	4642      	mov	r2, r8
 800435a:	464b      	mov	r3, r9
 800435c:	1891      	adds	r1, r2, r2
 800435e:	64b9      	str	r1, [r7, #72]	; 0x48
 8004360:	415b      	adcs	r3, r3
 8004362:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004364:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004368:	4641      	mov	r1, r8
 800436a:	eb12 0a01 	adds.w	sl, r2, r1
 800436e:	4649      	mov	r1, r9
 8004370:	eb43 0b01 	adc.w	fp, r3, r1
 8004374:	f04f 0200 	mov.w	r2, #0
 8004378:	f04f 0300 	mov.w	r3, #0
 800437c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004380:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004384:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004388:	4692      	mov	sl, r2
 800438a:	469b      	mov	fp, r3
 800438c:	4643      	mov	r3, r8
 800438e:	eb1a 0303 	adds.w	r3, sl, r3
 8004392:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004396:	464b      	mov	r3, r9
 8004398:	eb4b 0303 	adc.w	r3, fp, r3
 800439c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80043a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80043a4:	685b      	ldr	r3, [r3, #4]
 80043a6:	2200      	movs	r2, #0
 80043a8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80043ac:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80043b0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80043b4:	460b      	mov	r3, r1
 80043b6:	18db      	adds	r3, r3, r3
 80043b8:	643b      	str	r3, [r7, #64]	; 0x40
 80043ba:	4613      	mov	r3, r2
 80043bc:	eb42 0303 	adc.w	r3, r2, r3
 80043c0:	647b      	str	r3, [r7, #68]	; 0x44
 80043c2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80043c6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80043ca:	f7fb ff1b 	bl	8000204 <__aeabi_uldivmod>
 80043ce:	4602      	mov	r2, r0
 80043d0:	460b      	mov	r3, r1
 80043d2:	4611      	mov	r1, r2
 80043d4:	4b3b      	ldr	r3, [pc, #236]	; (80044c4 <UART_SetConfig+0x2d4>)
 80043d6:	fba3 2301 	umull	r2, r3, r3, r1
 80043da:	095b      	lsrs	r3, r3, #5
 80043dc:	2264      	movs	r2, #100	; 0x64
 80043de:	fb02 f303 	mul.w	r3, r2, r3
 80043e2:	1acb      	subs	r3, r1, r3
 80043e4:	00db      	lsls	r3, r3, #3
 80043e6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80043ea:	4b36      	ldr	r3, [pc, #216]	; (80044c4 <UART_SetConfig+0x2d4>)
 80043ec:	fba3 2302 	umull	r2, r3, r3, r2
 80043f0:	095b      	lsrs	r3, r3, #5
 80043f2:	005b      	lsls	r3, r3, #1
 80043f4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80043f8:	441c      	add	r4, r3
 80043fa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80043fe:	2200      	movs	r2, #0
 8004400:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004404:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004408:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800440c:	4642      	mov	r2, r8
 800440e:	464b      	mov	r3, r9
 8004410:	1891      	adds	r1, r2, r2
 8004412:	63b9      	str	r1, [r7, #56]	; 0x38
 8004414:	415b      	adcs	r3, r3
 8004416:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004418:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800441c:	4641      	mov	r1, r8
 800441e:	1851      	adds	r1, r2, r1
 8004420:	6339      	str	r1, [r7, #48]	; 0x30
 8004422:	4649      	mov	r1, r9
 8004424:	414b      	adcs	r3, r1
 8004426:	637b      	str	r3, [r7, #52]	; 0x34
 8004428:	f04f 0200 	mov.w	r2, #0
 800442c:	f04f 0300 	mov.w	r3, #0
 8004430:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004434:	4659      	mov	r1, fp
 8004436:	00cb      	lsls	r3, r1, #3
 8004438:	4651      	mov	r1, sl
 800443a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800443e:	4651      	mov	r1, sl
 8004440:	00ca      	lsls	r2, r1, #3
 8004442:	4610      	mov	r0, r2
 8004444:	4619      	mov	r1, r3
 8004446:	4603      	mov	r3, r0
 8004448:	4642      	mov	r2, r8
 800444a:	189b      	adds	r3, r3, r2
 800444c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004450:	464b      	mov	r3, r9
 8004452:	460a      	mov	r2, r1
 8004454:	eb42 0303 	adc.w	r3, r2, r3
 8004458:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800445c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004460:	685b      	ldr	r3, [r3, #4]
 8004462:	2200      	movs	r2, #0
 8004464:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004468:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800446c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004470:	460b      	mov	r3, r1
 8004472:	18db      	adds	r3, r3, r3
 8004474:	62bb      	str	r3, [r7, #40]	; 0x28
 8004476:	4613      	mov	r3, r2
 8004478:	eb42 0303 	adc.w	r3, r2, r3
 800447c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800447e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004482:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004486:	f7fb febd 	bl	8000204 <__aeabi_uldivmod>
 800448a:	4602      	mov	r2, r0
 800448c:	460b      	mov	r3, r1
 800448e:	4b0d      	ldr	r3, [pc, #52]	; (80044c4 <UART_SetConfig+0x2d4>)
 8004490:	fba3 1302 	umull	r1, r3, r3, r2
 8004494:	095b      	lsrs	r3, r3, #5
 8004496:	2164      	movs	r1, #100	; 0x64
 8004498:	fb01 f303 	mul.w	r3, r1, r3
 800449c:	1ad3      	subs	r3, r2, r3
 800449e:	00db      	lsls	r3, r3, #3
 80044a0:	3332      	adds	r3, #50	; 0x32
 80044a2:	4a08      	ldr	r2, [pc, #32]	; (80044c4 <UART_SetConfig+0x2d4>)
 80044a4:	fba2 2303 	umull	r2, r3, r2, r3
 80044a8:	095b      	lsrs	r3, r3, #5
 80044aa:	f003 0207 	and.w	r2, r3, #7
 80044ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	4422      	add	r2, r4
 80044b6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80044b8:	e105      	b.n	80046c6 <UART_SetConfig+0x4d6>
 80044ba:	bf00      	nop
 80044bc:	40011000 	.word	0x40011000
 80044c0:	40011400 	.word	0x40011400
 80044c4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80044c8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80044cc:	2200      	movs	r2, #0
 80044ce:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80044d2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80044d6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80044da:	4642      	mov	r2, r8
 80044dc:	464b      	mov	r3, r9
 80044de:	1891      	adds	r1, r2, r2
 80044e0:	6239      	str	r1, [r7, #32]
 80044e2:	415b      	adcs	r3, r3
 80044e4:	627b      	str	r3, [r7, #36]	; 0x24
 80044e6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80044ea:	4641      	mov	r1, r8
 80044ec:	1854      	adds	r4, r2, r1
 80044ee:	4649      	mov	r1, r9
 80044f0:	eb43 0501 	adc.w	r5, r3, r1
 80044f4:	f04f 0200 	mov.w	r2, #0
 80044f8:	f04f 0300 	mov.w	r3, #0
 80044fc:	00eb      	lsls	r3, r5, #3
 80044fe:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004502:	00e2      	lsls	r2, r4, #3
 8004504:	4614      	mov	r4, r2
 8004506:	461d      	mov	r5, r3
 8004508:	4643      	mov	r3, r8
 800450a:	18e3      	adds	r3, r4, r3
 800450c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004510:	464b      	mov	r3, r9
 8004512:	eb45 0303 	adc.w	r3, r5, r3
 8004516:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800451a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800451e:	685b      	ldr	r3, [r3, #4]
 8004520:	2200      	movs	r2, #0
 8004522:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004526:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800452a:	f04f 0200 	mov.w	r2, #0
 800452e:	f04f 0300 	mov.w	r3, #0
 8004532:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004536:	4629      	mov	r1, r5
 8004538:	008b      	lsls	r3, r1, #2
 800453a:	4621      	mov	r1, r4
 800453c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004540:	4621      	mov	r1, r4
 8004542:	008a      	lsls	r2, r1, #2
 8004544:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004548:	f7fb fe5c 	bl	8000204 <__aeabi_uldivmod>
 800454c:	4602      	mov	r2, r0
 800454e:	460b      	mov	r3, r1
 8004550:	4b60      	ldr	r3, [pc, #384]	; (80046d4 <UART_SetConfig+0x4e4>)
 8004552:	fba3 2302 	umull	r2, r3, r3, r2
 8004556:	095b      	lsrs	r3, r3, #5
 8004558:	011c      	lsls	r4, r3, #4
 800455a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800455e:	2200      	movs	r2, #0
 8004560:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004564:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004568:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800456c:	4642      	mov	r2, r8
 800456e:	464b      	mov	r3, r9
 8004570:	1891      	adds	r1, r2, r2
 8004572:	61b9      	str	r1, [r7, #24]
 8004574:	415b      	adcs	r3, r3
 8004576:	61fb      	str	r3, [r7, #28]
 8004578:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800457c:	4641      	mov	r1, r8
 800457e:	1851      	adds	r1, r2, r1
 8004580:	6139      	str	r1, [r7, #16]
 8004582:	4649      	mov	r1, r9
 8004584:	414b      	adcs	r3, r1
 8004586:	617b      	str	r3, [r7, #20]
 8004588:	f04f 0200 	mov.w	r2, #0
 800458c:	f04f 0300 	mov.w	r3, #0
 8004590:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004594:	4659      	mov	r1, fp
 8004596:	00cb      	lsls	r3, r1, #3
 8004598:	4651      	mov	r1, sl
 800459a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800459e:	4651      	mov	r1, sl
 80045a0:	00ca      	lsls	r2, r1, #3
 80045a2:	4610      	mov	r0, r2
 80045a4:	4619      	mov	r1, r3
 80045a6:	4603      	mov	r3, r0
 80045a8:	4642      	mov	r2, r8
 80045aa:	189b      	adds	r3, r3, r2
 80045ac:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80045b0:	464b      	mov	r3, r9
 80045b2:	460a      	mov	r2, r1
 80045b4:	eb42 0303 	adc.w	r3, r2, r3
 80045b8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80045bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045c0:	685b      	ldr	r3, [r3, #4]
 80045c2:	2200      	movs	r2, #0
 80045c4:	67bb      	str	r3, [r7, #120]	; 0x78
 80045c6:	67fa      	str	r2, [r7, #124]	; 0x7c
 80045c8:	f04f 0200 	mov.w	r2, #0
 80045cc:	f04f 0300 	mov.w	r3, #0
 80045d0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80045d4:	4649      	mov	r1, r9
 80045d6:	008b      	lsls	r3, r1, #2
 80045d8:	4641      	mov	r1, r8
 80045da:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80045de:	4641      	mov	r1, r8
 80045e0:	008a      	lsls	r2, r1, #2
 80045e2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80045e6:	f7fb fe0d 	bl	8000204 <__aeabi_uldivmod>
 80045ea:	4602      	mov	r2, r0
 80045ec:	460b      	mov	r3, r1
 80045ee:	4b39      	ldr	r3, [pc, #228]	; (80046d4 <UART_SetConfig+0x4e4>)
 80045f0:	fba3 1302 	umull	r1, r3, r3, r2
 80045f4:	095b      	lsrs	r3, r3, #5
 80045f6:	2164      	movs	r1, #100	; 0x64
 80045f8:	fb01 f303 	mul.w	r3, r1, r3
 80045fc:	1ad3      	subs	r3, r2, r3
 80045fe:	011b      	lsls	r3, r3, #4
 8004600:	3332      	adds	r3, #50	; 0x32
 8004602:	4a34      	ldr	r2, [pc, #208]	; (80046d4 <UART_SetConfig+0x4e4>)
 8004604:	fba2 2303 	umull	r2, r3, r2, r3
 8004608:	095b      	lsrs	r3, r3, #5
 800460a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800460e:	441c      	add	r4, r3
 8004610:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004614:	2200      	movs	r2, #0
 8004616:	673b      	str	r3, [r7, #112]	; 0x70
 8004618:	677a      	str	r2, [r7, #116]	; 0x74
 800461a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800461e:	4642      	mov	r2, r8
 8004620:	464b      	mov	r3, r9
 8004622:	1891      	adds	r1, r2, r2
 8004624:	60b9      	str	r1, [r7, #8]
 8004626:	415b      	adcs	r3, r3
 8004628:	60fb      	str	r3, [r7, #12]
 800462a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800462e:	4641      	mov	r1, r8
 8004630:	1851      	adds	r1, r2, r1
 8004632:	6039      	str	r1, [r7, #0]
 8004634:	4649      	mov	r1, r9
 8004636:	414b      	adcs	r3, r1
 8004638:	607b      	str	r3, [r7, #4]
 800463a:	f04f 0200 	mov.w	r2, #0
 800463e:	f04f 0300 	mov.w	r3, #0
 8004642:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004646:	4659      	mov	r1, fp
 8004648:	00cb      	lsls	r3, r1, #3
 800464a:	4651      	mov	r1, sl
 800464c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004650:	4651      	mov	r1, sl
 8004652:	00ca      	lsls	r2, r1, #3
 8004654:	4610      	mov	r0, r2
 8004656:	4619      	mov	r1, r3
 8004658:	4603      	mov	r3, r0
 800465a:	4642      	mov	r2, r8
 800465c:	189b      	adds	r3, r3, r2
 800465e:	66bb      	str	r3, [r7, #104]	; 0x68
 8004660:	464b      	mov	r3, r9
 8004662:	460a      	mov	r2, r1
 8004664:	eb42 0303 	adc.w	r3, r2, r3
 8004668:	66fb      	str	r3, [r7, #108]	; 0x6c
 800466a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800466e:	685b      	ldr	r3, [r3, #4]
 8004670:	2200      	movs	r2, #0
 8004672:	663b      	str	r3, [r7, #96]	; 0x60
 8004674:	667a      	str	r2, [r7, #100]	; 0x64
 8004676:	f04f 0200 	mov.w	r2, #0
 800467a:	f04f 0300 	mov.w	r3, #0
 800467e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004682:	4649      	mov	r1, r9
 8004684:	008b      	lsls	r3, r1, #2
 8004686:	4641      	mov	r1, r8
 8004688:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800468c:	4641      	mov	r1, r8
 800468e:	008a      	lsls	r2, r1, #2
 8004690:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004694:	f7fb fdb6 	bl	8000204 <__aeabi_uldivmod>
 8004698:	4602      	mov	r2, r0
 800469a:	460b      	mov	r3, r1
 800469c:	4b0d      	ldr	r3, [pc, #52]	; (80046d4 <UART_SetConfig+0x4e4>)
 800469e:	fba3 1302 	umull	r1, r3, r3, r2
 80046a2:	095b      	lsrs	r3, r3, #5
 80046a4:	2164      	movs	r1, #100	; 0x64
 80046a6:	fb01 f303 	mul.w	r3, r1, r3
 80046aa:	1ad3      	subs	r3, r2, r3
 80046ac:	011b      	lsls	r3, r3, #4
 80046ae:	3332      	adds	r3, #50	; 0x32
 80046b0:	4a08      	ldr	r2, [pc, #32]	; (80046d4 <UART_SetConfig+0x4e4>)
 80046b2:	fba2 2303 	umull	r2, r3, r2, r3
 80046b6:	095b      	lsrs	r3, r3, #5
 80046b8:	f003 020f 	and.w	r2, r3, #15
 80046bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	4422      	add	r2, r4
 80046c4:	609a      	str	r2, [r3, #8]
}
 80046c6:	bf00      	nop
 80046c8:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80046cc:	46bd      	mov	sp, r7
 80046ce:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80046d2:	bf00      	nop
 80046d4:	51eb851f 	.word	0x51eb851f

080046d8 <__libc_init_array>:
 80046d8:	b570      	push	{r4, r5, r6, lr}
 80046da:	4d0d      	ldr	r5, [pc, #52]	; (8004710 <__libc_init_array+0x38>)
 80046dc:	4c0d      	ldr	r4, [pc, #52]	; (8004714 <__libc_init_array+0x3c>)
 80046de:	1b64      	subs	r4, r4, r5
 80046e0:	10a4      	asrs	r4, r4, #2
 80046e2:	2600      	movs	r6, #0
 80046e4:	42a6      	cmp	r6, r4
 80046e6:	d109      	bne.n	80046fc <__libc_init_array+0x24>
 80046e8:	4d0b      	ldr	r5, [pc, #44]	; (8004718 <__libc_init_array+0x40>)
 80046ea:	4c0c      	ldr	r4, [pc, #48]	; (800471c <__libc_init_array+0x44>)
 80046ec:	f000 f82e 	bl	800474c <_init>
 80046f0:	1b64      	subs	r4, r4, r5
 80046f2:	10a4      	asrs	r4, r4, #2
 80046f4:	2600      	movs	r6, #0
 80046f6:	42a6      	cmp	r6, r4
 80046f8:	d105      	bne.n	8004706 <__libc_init_array+0x2e>
 80046fa:	bd70      	pop	{r4, r5, r6, pc}
 80046fc:	f855 3b04 	ldr.w	r3, [r5], #4
 8004700:	4798      	blx	r3
 8004702:	3601      	adds	r6, #1
 8004704:	e7ee      	b.n	80046e4 <__libc_init_array+0xc>
 8004706:	f855 3b04 	ldr.w	r3, [r5], #4
 800470a:	4798      	blx	r3
 800470c:	3601      	adds	r6, #1
 800470e:	e7f2      	b.n	80046f6 <__libc_init_array+0x1e>
 8004710:	08004784 	.word	0x08004784
 8004714:	08004784 	.word	0x08004784
 8004718:	08004784 	.word	0x08004784
 800471c:	08004788 	.word	0x08004788

08004720 <memcpy>:
 8004720:	440a      	add	r2, r1
 8004722:	4291      	cmp	r1, r2
 8004724:	f100 33ff 	add.w	r3, r0, #4294967295
 8004728:	d100      	bne.n	800472c <memcpy+0xc>
 800472a:	4770      	bx	lr
 800472c:	b510      	push	{r4, lr}
 800472e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004732:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004736:	4291      	cmp	r1, r2
 8004738:	d1f9      	bne.n	800472e <memcpy+0xe>
 800473a:	bd10      	pop	{r4, pc}

0800473c <memset>:
 800473c:	4402      	add	r2, r0
 800473e:	4603      	mov	r3, r0
 8004740:	4293      	cmp	r3, r2
 8004742:	d100      	bne.n	8004746 <memset+0xa>
 8004744:	4770      	bx	lr
 8004746:	f803 1b01 	strb.w	r1, [r3], #1
 800474a:	e7f9      	b.n	8004740 <memset+0x4>

0800474c <_init>:
 800474c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800474e:	bf00      	nop
 8004750:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004752:	bc08      	pop	{r3}
 8004754:	469e      	mov	lr, r3
 8004756:	4770      	bx	lr

08004758 <_fini>:
 8004758:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800475a:	bf00      	nop
 800475c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800475e:	bc08      	pop	{r3}
 8004760:	469e      	mov	lr, r3
 8004762:	4770      	bx	lr
